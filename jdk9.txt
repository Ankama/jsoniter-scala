[info] Loading settings from idea.sbt,build.sbt ...
[info] Loading global plugins from /home/andriy/.sbt/1.0/plugins
[info] Loading settings from plugins.sbt ...
[info] Loading project definition from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/project
[info] Loading settings from release.sbt,build.sbt,version.sbt ...
[info] Set current project to jsoniter-scala (in build file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[success] Total time: 0 s, completed Feb 10, 2018, 7:23:41 PM
[info] Updating core...
[info] Done updating.
[info] Updating macros...
[info] Done updating.
[info] Updating benchmark...
[info] Done updating.
[info] Compiling 4 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/classes ...
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:974:63: constructor String in class String is deprecated: see corresponding Javadoc for more information.
[warn]   private def toDouble: Double = java.lang.Double.parseDouble(new String(buf, 0, mark, head - mark))
[warn]                                                               ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:475:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos)
[warn]       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:483:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos + 1)
[warn]       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:970:14: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]       zoneId.getBytes(0, len, buf, pos)
[warn]              ^
[warn] four warnings found
[info] Done compiling.
[info] Compiling 1 Scala source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/classes ...
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/core_2.12-0.8.1-SNAPSHOT.jar ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/macros_2.12-0.8.1-SNAPSHOT.jar ...
[info] Compiling 43 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done packaging.
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:13:55: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("s", "bd");
[info]       private def d1(in: JsonReader, default: Option[String]): Option[String] = {
[info]         val x = in.readString(null);
[info]         if (x.eq(null))
[info]           None
[info]         else
[info]           Some(x)
[info]       };
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _bd: scala.math.BigDecimal = null;
[info]           var _os: Option[String] = None;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readString(_s);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3138 => if (in.isCharBufEqualsTo(l, "bd"))
[info]                       {
[info]                         _bd = in.readBigDecimal(_bd);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556 => if (in.isCharBufEqualsTo(l, "os"))
[info]                       _os = d1(in, _os)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs(s = _s, bd = _bd, os = _os)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: Option[String], out: JsonWriter): Unit = if (x.eq(null).||(x.isEmpty))
[info]         out.writeNull()
[info]       else
[info]         out.writeVal(x.get);
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("s");
[info]             out.writeVal(x.s)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("bd");
[info]             out.writeVal(x.bd)
[info]           };
[info]           {
[info]             val v = x.os;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("os");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val anyRefsCodec: JsonCodec[AnyRefs] = make[AnyRefs](CodecMakerConfig())
[info]                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:14:52: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Arrays':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Arrays] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays): com.github.plokhotnyuk.jsoniter_scala.macros.Arrays = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays, out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Array[Int]] = new Array[Array[Int]](0);
[info]       private val v1: Array[BigInt] = new Array[scala.math.BigInt](0);
[info]       private val v2: Array[Int] = new Array[Int](0);
[info]       private def d2(in: JsonReader, default: Array[Int]): Array[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Int](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Int](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInt());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Int](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d1(in: JsonReader, default: Array[Array[Int]]): Array[Array[Int]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Array[Int]](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Array[Int]](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, d2(in, v2));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Array[Int]](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d3(in: JsonReader, default: Array[BigInt]): Array[BigInt] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigInt](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[scala.math.BigInt](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigInt(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[scala.math.BigInt](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays): com.github.plokhotnyuk.jsoniter_scala.macros.Arrays = if (in.isNextToken('{'))
[info]         {
[info]           var _aa: Array[Array[Int]] = v0;
[info]           var _a: Array[BigInt] = v1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3104 => if (in.isCharBufEqualsTo(l, "aa"))
[info]                       _aa = d1(in, _aa)
[info]                     else
[info]                       in.skip()
[info]                     case 97 => if (in.isCharBufEqualsTo(l, "a"))
[info]                       _a = d3(in, _a)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Arrays(aa = _aa, a = _a)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e2(x: Array[Int], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e1(x: Array[Array[Int]], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               e2(x(i), out);
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: Array[BigInt], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.aa;
[info]             if (v.ne(null).&&(v.length.>(0)))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("aa");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.a;
[info]             if (v.ne(null).&&(v.length.>(0)))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("a");
[info]                 e3(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val arraysCodec: JsonCodec[Arrays] = make[Arrays](CodecMakerConfig())
[info]                                                    ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:15:83: Generated JSON codec for type 'Array[BigDecimal]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[BigDecimal]] {
[info]       def nullValue: Array[BigDecimal] = v0;
[info]       def decode(in: JsonReader, default: Array[BigDecimal]): Array[BigDecimal] = d0(in, default);
[info]       def encode(x: Array[BigDecimal], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[BigDecimal] = new Array[scala.math.BigDecimal](0);
[info]       private def d0(in: JsonReader, default: Array[BigDecimal]): Array[BigDecimal] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigDecimal](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[scala.math.BigDecimal](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigDecimal(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[scala.math.BigDecimal](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[BigDecimal], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val bigDecimalArrayCodec: JsonCodec[Array[BigDecimal]] = make[Array[BigDecimal]](CodecMakerConfig())
[info]                                                                                   ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:16:71: Generated JSON codec for type 'Array[BigInt]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[BigInt]] {
[info]       def nullValue: Array[BigInt] = v0;
[info]       def decode(in: JsonReader, default: Array[BigInt]): Array[BigInt] = d0(in, default);
[info]       def encode(x: Array[BigInt], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[BigInt] = new Array[scala.math.BigInt](0);
[info]       private def d0(in: JsonReader, default: Array[BigInt]): Array[BigInt] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigInt](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[scala.math.BigInt](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigInt(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[scala.math.BigInt](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[BigInt], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val bigIntArrayCodec: JsonCodec[Array[BigInt]] = make[Array[BigInt]](CodecMakerConfig())
[info]                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:17:55: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.BitSets':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.BitSets] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets): com.github.plokhotnyuk.jsoniter_scala.macros.BitSets = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = BitSet.newBuilder;
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d2(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               BitSet.empty;
[info]             do 
[info]               x.add(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets): com.github.plokhotnyuk.jsoniter_scala.macros.BitSets = if (in.isNextToken('{'))
[info]         {
[info]           var _bs: scala.collection.immutable.BitSet = BitSet.empty;
[info]           var _mbs: scala.collection.mutable.BitSet = BitSet.empty;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3153 => if (in.isCharBufEqualsTo(l, "bs"))
[info]                       _bs = d1(in, _bs)
[info]                     else
[info]                       in.skip()
[info]                     case 107902 => if (in.isCharBufEqualsTo(l, "mbs"))
[info]                       _mbs = d2(in, _mbs)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.BitSets(bs = _bs, mbs = _mbs)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.bs;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("bs");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.mbs;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("mbs");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val bitSetsCodec: JsonCodec[BitSets] = make[BitSets](CodecMakerConfig())
[info]                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:18:74: Generated JSON codec for type 'Array[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[Boolean]] {
[info]       def nullValue: Array[Boolean] = v0;
[info]       def decode(in: JsonReader, default: Array[Boolean]): Array[Boolean] = d0(in, default);
[info]       def encode(x: Array[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Boolean] = new Array[Boolean](0);
[info]       private def d0(in: JsonReader, default: Array[Boolean]): Array[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Boolean](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Boolean](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBoolean());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Boolean](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[Boolean], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val booleanArrayCodec: JsonCodec[Array[Boolean]] = make[Array[Boolean]](CodecMakerConfig())
[info]                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:19:65: Generated JSON codec for type 'Array[Byte]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[Byte]] {
[info]       def nullValue: Array[Byte] = v0;
[info]       def decode(in: JsonReader, default: Array[Byte]): Array[Byte] = d0(in, default);
[info]       def encode(x: Array[Byte], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Byte] = new Array[Byte](0);
[info]       private def d0(in: JsonReader, default: Array[Byte]): Array[Byte] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Byte](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Byte](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readByte());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Byte](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[Byte], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val byteArrayCodec: JsonCodec[Array[Byte]] = make[Array[Byte]](CodecMakerConfig())
[info]                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:20:71: Generated JSON codec for type 'Array[Double]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[Double]] {
[info]       def nullValue: Array[Double] = v0;
[info]       def decode(in: JsonReader, default: Array[Double]): Array[Double] = d0(in, default);
[info]       def encode(x: Array[Double], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Double] = new Array[Double](0);
[info]       private def d0(in: JsonReader, default: Array[Double]): Array[Double] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Double](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Double](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDouble());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Double](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[Double], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val doubleArrayCodec: JsonCodec[Array[Double]] = make[Array[Double]](CodecMakerConfig())
[info]                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:21:77: Generated JSON codec for type 'Array[java.time.Duration]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[java.time.Duration]] {
[info]       def nullValue: Array[java.time.Duration] = v0;
[info]       def decode(in: JsonReader, default: Array[java.time.Duration]): Array[java.time.Duration] = d0(in, default);
[info]       def encode(x: Array[java.time.Duration], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[java.time.Duration] = new Array[java.time.Duration](0);
[info]       private def d0(in: JsonReader, default: Array[java.time.Duration]): Array[java.time.Duration] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Duration](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.time.Duration](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDuration(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.time.Duration](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[java.time.Duration], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val durationArrayCodec: JsonCodec[Array[Duration]] = make[Array[Duration]](CodecMakerConfig())
[info]                                                                             ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:22:68: Generated JSON codec for type 'Array[Float]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[Float]] {
[info]       def nullValue: Array[Float] = v0;
[info]       def decode(in: JsonReader, default: Array[Float]): Array[Float] = d0(in, default);
[info]       def encode(x: Array[Float], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Float] = new Array[Float](0);
[info]       private def d0(in: JsonReader, default: Array[Float]): Array[Float] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Float](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Float](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readFloat());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Float](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[Float], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val floatArrayCodec: JsonCodec[Array[Float]] = make[Array[Float]](CodecMakerConfig())
[info]                                                                    ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:23:74: Generated JSON codec for type 'Array[java.time.Instant]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[java.time.Instant]] {
[info]       def nullValue: Array[java.time.Instant] = v0;
[info]       def decode(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = d0(in, default);
[info]       def encode(x: Array[java.time.Instant], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[java.time.Instant] = new Array[java.time.Instant](0);
[info]       private def d0(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Instant](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.time.Instant](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInstant(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.time.Instant](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[java.time.Instant], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val instantArrayCodec: JsonCodec[Array[Instant]] = make[Array[Instant]](CodecMakerConfig())
[info]                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:24:80: Generated JSON codec for type 'Array[java.time.LocalDate]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[java.time.LocalDate]] {
[info]       def nullValue: Array[java.time.LocalDate] = v0;
[info]       def decode(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = d0(in, default);
[info]       def encode(x: Array[java.time.LocalDate], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[java.time.LocalDate] = new Array[java.time.LocalDate](0);
[info]       private def d0(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDate](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.time.LocalDate](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDate(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.time.LocalDate](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[java.time.LocalDate], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val localDateArrayCodec: JsonCodec[Array[LocalDate]] = make[Array[LocalDate]](CodecMakerConfig())
[info]                                                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:25:92: Generated JSON codec for type 'Array[java.time.LocalDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[java.time.LocalDateTime]] {
[info]       def nullValue: Array[java.time.LocalDateTime] = v0;
[info]       def decode(in: JsonReader, default: Array[java.time.LocalDateTime]): Array[java.time.LocalDateTime] = d0(in, default);
[info]       def encode(x: Array[java.time.LocalDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[java.time.LocalDateTime] = new Array[java.time.LocalDateTime](0);
[info]       private def d0(in: JsonReader, default: Array[java.time.LocalDateTime]): Array[java.time.LocalDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.time.LocalDateTime](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.time.LocalDateTime](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[java.time.LocalDateTime], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val localDateTimeArrayCodec: JsonCodec[Array[LocalDateTime]] = make[Array[LocalDateTime]](CodecMakerConfig())
[info]                                                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:26:95: Generated JSON codec for type 'Array[java.time.OffsetDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[java.time.OffsetDateTime]] {
[info]       def nullValue: Array[java.time.OffsetDateTime] = v0;
[info]       def decode(in: JsonReader, default: Array[java.time.OffsetDateTime]): Array[java.time.OffsetDateTime] = d0(in, default);
[info]       def encode(x: Array[java.time.OffsetDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[java.time.OffsetDateTime] = new Array[java.time.OffsetDateTime](0);
[info]       private def d0(in: JsonReader, default: Array[java.time.OffsetDateTime]): Array[java.time.OffsetDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.OffsetDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.time.OffsetDateTime](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readOffsetDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.time.OffsetDateTime](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[java.time.OffsetDateTime], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val offsetDateTimeArrayCodec: JsonCodec[Array[OffsetDateTime]] = make[Array[OffsetDateTime]](CodecMakerConfig())
[info]                                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:27:80: Generated JSON codec for type 'Array[java.time.LocalTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[java.time.LocalTime]] {
[info]       def nullValue: Array[java.time.LocalTime] = v0;
[info]       def decode(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = d0(in, default);
[info]       def encode(x: Array[java.time.LocalTime], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[java.time.LocalTime] = new Array[java.time.LocalTime](0);
[info]       private def d0(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.time.LocalTime](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.time.LocalTime](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[java.time.LocalTime], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val localTimeArrayCodec: JsonCodec[Array[LocalTime]] = make[Array[LocalTime]](CodecMakerConfig())
[info]                                                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:28:71: Generated JSON codec for type 'Array[java.time.Period]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[java.time.Period]] {
[info]       def nullValue: Array[java.time.Period] = v0;
[info]       def decode(in: JsonReader, default: Array[java.time.Period]): Array[java.time.Period] = d0(in, default);
[info]       def encode(x: Array[java.time.Period], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[java.time.Period] = new Array[java.time.Period](0);
[info]       private def d0(in: JsonReader, default: Array[java.time.Period]): Array[java.time.Period] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Period](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.time.Period](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readPeriod(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.time.Period](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[java.time.Period], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val periodArrayCodec: JsonCodec[Array[Period]] = make[Array[Period]](CodecMakerConfig())
[info]                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:29:92: Generated JSON codec for type 'Array[java.time.ZonedDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[java.time.ZonedDateTime]] {
[info]       def nullValue: Array[java.time.ZonedDateTime] = v0;
[info]       def decode(in: JsonReader, default: Array[java.time.ZonedDateTime]): Array[java.time.ZonedDateTime] = d0(in, default);
[info]       def encode(x: Array[java.time.ZonedDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[java.time.ZonedDateTime] = new Array[java.time.ZonedDateTime](0);
[info]       private def d0(in: JsonReader, default: Array[java.time.ZonedDateTime]): Array[java.time.ZonedDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZonedDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.time.ZonedDateTime](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZonedDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.time.ZonedDateTime](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[java.time.ZonedDateTime], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val zonedDateTimeArrayCodec: JsonCodec[Array[ZonedDateTime]] = make[Array[ZonedDateTime]](CodecMakerConfig())
[info]                                                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:30:83: Generated JSON codec for type 'Array[java.time.ZoneOffset]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[java.time.ZoneOffset]] {
[info]       def nullValue: Array[java.time.ZoneOffset] = v0;
[info]       def decode(in: JsonReader, default: Array[java.time.ZoneOffset]): Array[java.time.ZoneOffset] = d0(in, default);
[info]       def encode(x: Array[java.time.ZoneOffset], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[java.time.ZoneOffset] = new Array[java.time.ZoneOffset](0);
[info]       private def d0(in: JsonReader, default: Array[java.time.ZoneOffset]): Array[java.time.ZoneOffset] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneOffset](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.time.ZoneOffset](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneOffset(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.time.ZoneOffset](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[java.time.ZoneOffset], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val zoneOffsetArrayCodec: JsonCodec[Array[ZoneOffset]] = make[Array[ZoneOffset]](CodecMakerConfig())
[info]                                                                                   ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:31:71: Generated JSON codec for type 'Array[java.time.ZoneId]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[java.time.ZoneId]] {
[info]       def nullValue: Array[java.time.ZoneId] = v0;
[info]       def decode(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = d0(in, default);
[info]       def encode(x: Array[java.time.ZoneId], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[java.time.ZoneId] = new Array[java.time.ZoneId](0);
[info]       private def d0(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneId](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.time.ZoneId](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneId(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.time.ZoneId](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[java.time.ZoneId], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val zoneIdArrayCodec: JsonCodec[Array[ZoneId]] = make[Array[ZoneId]](CodecMakerConfig())
[info]                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:32:62: Generated JSON codec for type 'Array[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[Int]] {
[info]       def nullValue: Array[Int] = v0;
[info]       def decode(in: JsonReader, default: Array[Int]): Array[Int] = d0(in, default);
[info]       def encode(x: Array[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Int] = new Array[Int](0);
[info]       private def d0(in: JsonReader, default: Array[Int]): Array[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Int](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Int](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInt());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Int](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[Int], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val intArrayCodec: JsonCodec[Array[Int]] = make[Array[Int]](CodecMakerConfig())
[info]                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:33:68: Generated JSON codec for type 'Array[Short]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[Short]] {
[info]       def nullValue: Array[Short] = v0;
[info]       def decode(in: JsonReader, default: Array[Short]): Array[Short] = d0(in, default);
[info]       def encode(x: Array[Short], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Short] = new Array[Short](0);
[info]       private def d0(in: JsonReader, default: Array[Short]): Array[Short] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Short](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Short](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readShort());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Short](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[Short], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val shortArrayCodec: JsonCodec[Array[Short]] = make[Array[Short]](CodecMakerConfig())
[info]                                                                    ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:34:65: Generated JSON codec for type 'Array[Long]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[Long]] {
[info]       def nullValue: Array[Long] = v0;
[info]       def decode(in: JsonReader, default: Array[Long]): Array[Long] = d0(in, default);
[info]       def encode(x: Array[Long], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Long] = new Array[Long](0);
[info]       private def d0(in: JsonReader, default: Array[Long]): Array[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Long](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLong());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Long](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[Long], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val longArrayCodec: JsonCodec[Array[Long]] = make[Array[Long]](CodecMakerConfig())
[info]                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:35:65: Generated JSON codec for type 'Array[java.util.UUID]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[java.util.UUID]] {
[info]       def nullValue: Array[java.util.UUID] = v0;
[info]       def decode(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = d0(in, default);
[info]       def encode(x: Array[java.util.UUID], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[java.util.UUID] = new Array[java.util.UUID](0);
[info]       private def d0(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.util.UUID](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.util.UUID](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readUUID(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.util.UUID](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[java.util.UUID], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val uuidArrayCodec: JsonCodec[Array[UUID]] = make[Array[UUID]](CodecMakerConfig())
[info]                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:36:61: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Iterables':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Iterables] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables): com.github.plokhotnyuk.jsoniter_scala.macros.Iterables = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.immutable.Vector[String]): scala.collection.immutable.Vector[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Vector.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d2(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Set.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d4(in: JsonReader, default: scala.collection.immutable.HashSet[Long]): scala.collection.immutable.HashSet[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = HashSet.newBuilder[Long];
[info]             do 
[info]               x.+=(in.readLong())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d3(in: JsonReader, default: List[scala.collection.immutable.HashSet[Long]]): List[scala.collection.immutable.HashSet[Long]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = List.newBuilder[scala.collection.immutable.HashSet[Long]];
[info]             do 
[info]               x.+=(d4(in, HashSet.empty[Long]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables): com.github.plokhotnyuk.jsoniter_scala.macros.Iterables = if (in.isNextToken('{'))
[info]         {
[info]           var _l: scala.collection.immutable.Vector[String] = Vector.empty[String];
[info]           var _s: scala.collection.immutable.Set[Int] = Set.empty[Int];
[info]           var _ls: List[scala.collection.immutable.HashSet[Long]] = List.empty[scala.collection.immutable.HashSet[Long]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       _l = d1(in, _l)
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       _s = d2(in, _s)
[info]                     else
[info]                       in.skip()
[info]                     case 3463 => if (in.isCharBufEqualsTo(l, "ls"))
[info]                       _ls = d3(in, _ls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Iterables(l = _l, s = _s, ls = _ls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.immutable.Vector[String], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e4(x: scala.collection.immutable.HashSet[Long], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: List[scala.collection.immutable.HashSet[Long]], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e4(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.l;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("l");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.s;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("s");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.ls;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("ls");
[info]                 e3(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val iterablesCodec: JsonCodec[Iterables] = make[Iterables](CodecMakerConfig())
[info]                                                             ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:37:46: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Maps':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Maps] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Maps = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Maps): com.github.plokhotnyuk.jsoniter_scala.macros.Maps = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.Maps, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.immutable.HashMap[String,Double]): scala.collection.immutable.HashMap[String,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = HashMap.empty[String, Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsString(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d3(in: JsonReader, default: scala.collection.immutable.HashMap[Long,Double]): scala.collection.immutable.HashMap[Long,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = HashMap.empty[Long, Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsLong(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]]): scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = Map.empty[Int, scala.collection.immutable.HashMap[Long,Double]];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), d3(in, HashMap.empty[Long, Double]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Maps): com.github.plokhotnyuk.jsoniter_scala.macros.Maps = if (in.isNextToken('{'))
[info]         {
[info]           var _m: scala.collection.immutable.HashMap[String,Double] = HashMap.empty[String, Double];
[info]           var _mm: scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]] = Map.empty[Int, scala.collection.immutable.HashMap[Long,Double]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 109 => if (in.isCharBufEqualsTo(l, "m"))
[info]                       _m = d1(in, _m)
[info]                     else
[info]                       in.skip()
[info]                     case 3488 => if (in.isCharBufEqualsTo(l, "mm"))
[info]                       _mm = d2(in, _mm)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Maps(m = _m, mm = _mm)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.immutable.HashMap[String,Double], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             out.writeVal(kv._2)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: scala.collection.immutable.HashMap[Long,Double], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             out.writeVal(kv._2)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             e3(kv._2, out)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Maps, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.m;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("m");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.mm;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("mm");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val mapsCodec: JsonCodec[Maps] = make[Maps](CodecMakerConfig())
[info]                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:38:81: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("s", "i");
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _i: Int = 0;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readString(_s);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         _i = in.readInt();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields(s = _s, i = _i)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("s");
[info]             out.writeVal(x.s)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("i");
[info]             out.writeVal(x.i)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val missingReqFieldCodec: JsonCodec[MissingReqFields] = make[MissingReqFields](CodecMakerConfig())
[info]                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:39:82: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables): com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[String]): scala.collection.mutable.ArrayBuffer[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               ArrayBuffer.empty[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d2(in: JsonReader, default: scala.collection.mutable.TreeSet[Int]): scala.collection.mutable.TreeSet[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               TreeSet.empty[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d4(in: JsonReader, default: scala.collection.mutable.Set[Long]): scala.collection.mutable.Set[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               Set.empty[Long];
[info]             do 
[info]               x.+=(in.readLong())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d3(in: JsonReader, default: scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]]): scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = ResizableArray.newBuilder[scala.collection.mutable.Set[Long]];
[info]             do 
[info]               x.+=(d4(in, Set.empty[Long]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables): com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables = if (in.isNextToken('{'))
[info]         {
[info]           var _l: scala.collection.mutable.ArrayBuffer[String] = ArrayBuffer.empty[String];
[info]           var _s: scala.collection.mutable.TreeSet[Int] = TreeSet.empty[Int];
[info]           var _ls: scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]] = ResizableArray.empty[scala.collection.mutable.Set[Long]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       _l = d1(in, _l)
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       _s = d2(in, _s)
[info]                     else
[info]                       in.skip()
[info]                     case 3463 => if (in.isCharBufEqualsTo(l, "ls"))
[info]                       _ls = d3(in, _ls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables(l = _l, s = _s, ls = _ls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.mutable.ArrayBuffer[String], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: scala.collection.mutable.TreeSet[Int], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e4(x: scala.collection.mutable.Set[Long], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e4(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.l;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("l");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.s;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("s");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.ls;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("ls");
[info]                 e3(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val mutableIterablesCodec: JsonCodec[MutableIterables] = make[MutableIterables](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:40:67: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps): com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.mutable.HashMap[String,Double]): scala.collection.mutable.HashMap[String,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               HashMap.empty[String, Double];
[info]             do 
[info]               x.update(in.readKeyAsString(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d3(in: JsonReader, default: scala.collection.mutable.OpenHashMap[Long,Double]): scala.collection.mutable.OpenHashMap[Long,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               OpenHashMap.empty[Long, Double];
[info]             do 
[info]               x.update(in.readKeyAsLong(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]]): scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               Map.empty[Int, scala.collection.mutable.OpenHashMap[Long,Double]];
[info]             do 
[info]               x.update(in.readKeyAsInt(), d3(in, OpenHashMap.empty[Long, Double]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps): com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps = if (in.isNextToken('{'))
[info]         {
[info]           var _m: scala.collection.mutable.HashMap[String,Double] = HashMap.empty[String, Double];
[info]           var _mm: scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]] = Map.empty[Int, scala.collection.mutable.OpenHashMap[Long,Double]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 109 => if (in.isCharBufEqualsTo(l, "m"))
[info]                       _m = d1(in, _m)
[info]                     else
[info]                       in.skip()
[info]                     case 3488 => if (in.isCharBufEqualsTo(l, "mm"))
[info]                       _mm = d2(in, _mm)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps(m = _m, mm = _mm)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.mutable.HashMap[String,Double], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             out.writeVal(kv._2)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: scala.collection.mutable.OpenHashMap[Long,Double], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             out.writeVal(kv._2)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             e3(kv._2, out)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.m;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("m");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.mm;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("mm");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val mutableMapsCodec: JsonCodec[MutableMaps] = make[MutableMaps](CodecMakerConfig())
[info]                                                                   ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:41:76: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps): com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.immutable.IntMap[Double]): scala.collection.immutable.IntMap[Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = IntMap.empty[Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d3(in: JsonReader, default: scala.collection.immutable.LongMap[Double]): scala.collection.immutable.LongMap[Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = LongMap.empty[Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsLong(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]]): scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               LongMap.empty[scala.collection.immutable.LongMap[Double]];
[info]             do 
[info]               x.update(in.readKeyAsLong(), d3(in, LongMap.empty[Double]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps): com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps = if (in.isNextToken('{'))
[info]         {
[info]           var _m: scala.collection.immutable.IntMap[Double] = IntMap.empty[Double];
[info]           var _mm: scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]] = LongMap.empty[scala.collection.immutable.LongMap[Double]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 109 => if (in.isCharBufEqualsTo(l, "m"))
[info]                       _m = d1(in, _m)
[info]                     else
[info]                       in.skip()
[info]                     case 3488 => if (in.isCharBufEqualsTo(l, "mm"))
[info]                       _mm = d2(in, _mm)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps(m = _m, mm = _mm)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.immutable.IntMap[Double], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             out.writeVal(kv._2)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: scala.collection.immutable.LongMap[Double], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             out.writeVal(kv._2)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             e3(kv._2, out)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.m;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("m");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.mm;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("mm");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val intAndLongMapsCodec: JsonCodec[IntAndLongMaps] = make[IntAndLongMaps](CodecMakerConfig())
[info]                                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:42:64: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Primitives':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Primitives] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("b", "s", "i", "l", "bl", "ch", "dbl", "f");
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = if (in.isNextToken('{'))
[info]         {
[info]           var _b: Byte = ((0): Byte);
[info]           var _s: Short = ((0): Short);
[info]           var _i: Int = 0;
[info]           var _l: Long = 0L;
[info]           var _bl: Boolean = false;
[info]           var _ch: Char = '\u0000';
[info]           var _dbl: Double = 0.0;
[info]           var _f: Float = 0.0F;
[info]           var req0 = 255;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         _b = in.readByte();
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readShort();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         _i = in.readInt();
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         _l = in.readLong();
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3146 => if (in.isCharBufEqualsTo(l, "bl"))
[info]                       {
[info]                         _bl = in.readBoolean();
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3173 => if (in.isCharBufEqualsTo(l, "ch"))
[info]                       {
[info]                         _ch = in.readChar();
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 99246 => if (in.isCharBufEqualsTo(l, "dbl"))
[info]                       {
[info]                         _dbl = in.readDouble();
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102 => if (in.isCharBufEqualsTo(l, "f"))
[info]                       {
[info]                         _f = in.readFloat();
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.Primitives(b = _b, s = _s, i = _i, l = _l, bl = _bl, ch = _ch, dbl = _dbl, f = _f)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("b");
[info]             out.writeVal(x.b)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("s");
[info]             out.writeVal(x.s)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("i");
[info]             out.writeVal(x.i)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("l");
[info]             out.writeVal(x.l)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("bl");
[info]             out.writeVal(x.bl)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("ch");
[info]             out.writeVal(x.ch)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("dbl");
[info]             out.writeVal(x.dbl)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("f");
[info]             out.writeVal(x.f)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val primitivesCodec: JsonCodec[Primitives] = make[Primitives](CodecMakerConfig())
[info]                                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:43:73: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("s", "l");
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _l: Long = 0L;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readString(_s);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         _l = in.readLong();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields(s = _s, l = _l)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("s");
[info]             out.writeVal(x.s)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("l");
[info]             out.writeVal(x.l)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val extractFieldsCodec: JsonCodec[ExtractFields] = make[ExtractFields](CodecMakerConfig())
[info]                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:44:51: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("a");
[info]       private val r1: Array[String] = Array("b");
[info]       private val r2: Array[String] = Array("l", "r");
[info]       private def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.A): com.github.plokhotnyuk.jsoniter_scala.macros.A = if (in.isNextToken('{'))
[info]         {
[info]           var _a: Int = 0;
[info]           var req0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 97 => if (in.isCharBufEqualsTo(l, "a"))
[info]                       {
[info]                         _a = in.readInt();
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.A(a = _a)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.B): com.github.plokhotnyuk.jsoniter_scala.macros.B = if (in.isNextToken('{'))
[info]         {
[info]           var _b: String = null;
[info]           var req0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         _b = in.readString(_b);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.B(b = _b)
[info]           else
[info]             in.requiredKeyError(r1, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.C): com.github.plokhotnyuk.jsoniter_scala.macros.C = if (in.isNextToken('{'))
[info]         {
[info]           var _l: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var _r: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         _l = d0(in, _l);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 114 => if (in.isCharBufEqualsTo(l, "r"))
[info]                       {
[info]                         _r = d0(in, _r);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.C(l = _l, r = _r)
[info]           else
[info]             in.requiredKeyError(r2, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           {
[info]             in.scanToKey("type");
[info]             val l = in.readStringAsCharBuf();
[info]             (in.charBufToHashCode(l): @switch) match {
[info]               case 65 => if (in.isCharBufEqualsTo(l, "A"))
[info]                 {
[info]                   in.rollbackToMark();
[info]                   d1(in, null)
[info]                 }
[info]               else
[info]                 in.discriminatorValueError("type")
[info]               case 66 => if (in.isCharBufEqualsTo(l, "B"))
[info]                 {
[info]                   in.rollbackToMark();
[info]                   d2(in, null)
[info]                 }
[info]               else
[info]                 in.discriminatorValueError("type")
[info]               case 67 => if (in.isCharBufEqualsTo(l, "C"))
[info]                 {
[info]                   in.rollbackToMark();
[info]                   d3(in, null)
[info]                 }
[info]               else
[info]                 in.discriminatorValueError("type")
[info]               case _ => in.discriminatorValueError("type")
[info]             }
[info]           }
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.A, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("type");
[info]             out.writeNonEscapedAsciiVal("A")
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("a");
[info]             out.writeVal(x.a)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.B, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("type");
[info]             out.writeNonEscapedAsciiVal("B")
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("b");
[info]             out.writeVal(x.b)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.C, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("type");
[info]             out.writeNonEscapedAsciiVal("C")
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("l");
[info]             e0(x.l, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("r");
[info]             e0(x.r, out)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.A)) => e1(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.B)) => e2(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.C)) => e3(x, out)
[info]         case null => out.writeNull()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val adtCodec: JsonCodec[AdtBase] = make[AdtBase](CodecMakerConfig())
[info]                                                   ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:45:52: Generated JSON codec for type 'String':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[String] {
[info]       def nullValue: String = null;
[info]       def decode(in: JsonReader, default: String): String = in.readString(default);
[info]       def encode(x: String, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val stringCodec: JsonCodec[String] = make[String](CodecMakerConfig())
[info]                                                    ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:46:75: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("status");
[info]       private val r1: Array[String] = Array("distance", "duration", "status");
[info]       private val r2: Array[String] = Array("text", "value");
[info]       private def d1(in: JsonReader, default: Seq[String]): Seq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d6(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Value): com.github.plokhotnyuk.jsoniter_scala.macros.Value = if (in.isNextToken('{'))
[info]         {
[info]           var _text: String = null;
[info]           var _value: Int = 0;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         _text = in.readString(_text);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 111972721 => if (in.isCharBufEqualsTo(l, "value"))
[info]                       {
[info]                         _value = in.readInt();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.Value(text = _text, value = _value)
[info]           else
[info]             in.requiredKeyError(r2, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Elements): com.github.plokhotnyuk.jsoniter_scala.macros.Elements = if (in.isNextToken('{'))
[info]         {
[info]           var _distance: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _duration: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _status: String = null;
[info]           var req0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 288459765 => if (in.isCharBufEqualsTo(l, "distance"))
[info]                       {
[info]                         _distance = d6(in, _distance);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1992012396 => if (in.isCharBufEqualsTo(l, "duration"))
[info]                       {
[info]                         _duration = d6(in, _duration);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         _status = in.readString(_status);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.Elements(distance = _distance, duration = _duration, status = _status)
[info]           else
[info]             in.requiredKeyError(r1, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d4(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Rows): com.github.plokhotnyuk.jsoniter_scala.macros.Rows = if (in.isNextToken('{'))
[info]         {
[info]           var _elements: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -8339209 => if (in.isCharBufEqualsTo(l, "elements"))
[info]                       _elements = d4(in, _elements)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Rows(elements = _elements)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]             do 
[info]               x.+=(d3(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = if (in.isNextToken('{'))
[info]         {
[info]           var _destination_addresses: Seq[String] = Seq.empty[String];
[info]           var _origin_addresses: Seq[String] = Seq.empty[String];
[info]           var _rows: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]           var _status: String = null;
[info]           var req0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 715423921 => if (in.isCharBufEqualsTo(l, "destination_addresses"))
[info]                       _destination_addresses = d1(in, _destination_addresses)
[info]                     else
[info]                       in.skip()
[info]                     case 1780936137 => if (in.isCharBufEqualsTo(l, "origin_addresses"))
[info]                       _origin_addresses = d1(in, _origin_addresses)
[info]                     else
[info]                       in.skip()
[info]                     case 3506649 => if (in.isCharBufEqualsTo(l, "rows"))
[info]                       _rows = d2(in, _rows)
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         _status = in.readString(_status);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix(destination_addresses = _destination_addresses, origin_addresses = _origin_addresses, rows = _rows, status = _status)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: Seq[String], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e6(x: com.github.plokhotnyuk.jsoniter_scala.macros.Value, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("text");
[info]             out.writeVal(x.text)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("value");
[info]             out.writeVal(x.value)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.Elements, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("distance");
[info]             e6(x.distance, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("duration");
[info]             e6(x.duration, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("status");
[info]             out.writeVal(x.status)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e4(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e5(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.Rows, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.elements;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("elements");
[info]                 e4(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e3(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.destination_addresses;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("destination_addresses");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.origin_addresses;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("origin_addresses");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.rows;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("rows");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("status");
[info]             out.writeVal(x.status)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val googleMapsAPICodec: JsonCodec[DistanceMatrix] = make[DistanceMatrix](CodecMakerConfig())
[info]                                                                           ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:47:64: Generated JSON codec for type 'Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]] {
[info]       def nullValue: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]       def decode(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = d0(in, default);
[info]       def encode(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "user", "retweeted_status", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "possibly_sensitive", "lang");
[info]       private val r1: Array[String] = Array("screen_name", "name", "id", "id_str");
[info]       private val r2: Array[String] = Array("url", "expanded_url", "display_url");
[info]       private val r3: Array[String] = Array("id", "id_str", "name", "screen_name", "location", "description", "url", "entities", "protected", "followers_count", "friends_count", "listed_count", "created_at", "favourites_count", "utc_offset", "time_zone", "geo_enabled", "verified", "statuses_count", "lang", "contributors_enabled", "is_translator", "is_translation_enabled", "profile_background_color", "profile_background_image_url", "profile_background_image_url_https", "profile_background_tile", "profile_image_url", "profile_image_url_https", "profile_banner_url", "profile_link_color", "profile_sidebar_border_color", "profile_sidebar_fill_color", "profile_text_color", "profile_use_background_image", "has_extended_profile", "default_profile", "default_profile_image", "following", "follow_request_sent", "notifications", "translator_type");
[info]       private val r4: Array[String] = Array("url", "description");
[info]       private val r5: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "user", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "possibly_sensitive", "lang");
[info]       private def d3(in: JsonReader, default: Seq[String]): Seq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d6(in: JsonReader, default: Seq[Int]): Seq[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions): com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions = if (in.isNextToken('{'))
[info]         {
[info]           var _screen_name: String = null;
[info]           var _name: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var req0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         _screen_name = in.readString(_screen_name);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         _name = in.readString(_name);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = in.readString(_id_str);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       _indices = d6(in, _indices)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions(screen_name = _screen_name, name = _name, id = _id, id_str = _id_str, indices = _indices)
[info]           else
[info]             in.requiredKeyError(r1, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d4(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d8(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Urls): com.github.plokhotnyuk.jsoniter_scala.macros.Urls = if (in.isNextToken('{'))
[info]         {
[info]           var _url: String = null;
[info]           var _expanded_url: String = null;
[info]           var _display_url: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var req0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         _url = in.readString(_url);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -518939415 => if (in.isCharBufEqualsTo(l, "expanded_url"))
[info]                       {
[info]                         _expanded_url = in.readString(_expanded_url);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1714674802 => if (in.isCharBufEqualsTo(l, "display_url"))
[info]                       {
[info]                         _display_url = in.readString(_display_url);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       _indices = d6(in, _indices)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.Urls(url = _url, expanded_url = _expanded_url, display_url = _display_url, indices = _indices)
[info]           else
[info]             in.requiredKeyError(r2, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d7(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]             do 
[info]               x.+=(d8(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Entities): com.github.plokhotnyuk.jsoniter_scala.macros.Entities = if (in.isNextToken('{'))
[info]         {
[info]           var _hashtags: Seq[String] = Seq.empty[String];
[info]           var _symbols: Seq[String] = Seq.empty[String];
[info]           var _user_mentions: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 149143079 => if (in.isCharBufEqualsTo(l, "hashtags"))
[info]                       _hashtags = d3(in, _hashtags)
[info]                     else
[info]                       in.skip()
[info]                     case -1743438373 => if (in.isCharBufEqualsTo(l, "symbols"))
[info]                       _symbols = d3(in, _symbols)
[info]                     else
[info]                       in.skip()
[info]                     case -553518659 => if (in.isCharBufEqualsTo(l, "user_mentions"))
[info]                       _user_mentions = d4(in, _user_mentions)
[info]                     else
[info]                       in.skip()
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       _urls = d7(in, _urls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Entities(hashtags = _hashtags, symbols = _symbols, user_mentions = _user_mentions, urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d9(in: JsonReader, default: Option[String]): Option[String] = {
[info]         val x = in.readString(null);
[info]         if (x.eq(null))
[info]           None
[info]         else
[info]           Some(x)
[info]       };
[info]       private def d12(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Url): com.github.plokhotnyuk.jsoniter_scala.macros.Url = if (in.isNextToken('{'))
[info]         {
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       _urls = d7(in, _urls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Url(urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d11(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities): com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = if (in.isNextToken('{'))
[info]         {
[info]           var _url: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var _description: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         _url = d12(in, _url);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         _description = d12(in, _description);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities(url = _url, description = _description)
[info]           else
[info]             in.requiredKeyError(r4, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d10(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.User): com.github.plokhotnyuk.jsoniter_scala.macros.User = if (in.isNextToken('{'))
[info]         {
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _name: String = null;
[info]           var _screen_name: String = null;
[info]           var _location: String = null;
[info]           var _description: String = null;
[info]           var _url: String = null;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = null;
[info]           var _protected: Boolean = false;
[info]           var _followers_count: Int = 0;
[info]           var _friends_count: Int = 0;
[info]           var _listed_count: Int = 0;
[info]           var _created_at: String = null;
[info]           var _favourites_count: Int = 0;
[info]           var _utc_offset: Int = 0;
[info]           var _time_zone: String = null;
[info]           var _geo_enabled: Boolean = false;
[info]           var _verified: Boolean = false;
[info]           var _statuses_count: Int = 0;
[info]           var _lang: String = null;
[info]           var _contributors_enabled: Boolean = false;
[info]           var _is_translator: Boolean = false;
[info]           var _is_translation_enabled: Boolean = false;
[info]           var _profile_background_color: String = null;
[info]           var _profile_background_image_url: String = null;
[info]           var _profile_background_image_url_https: String = null;
[info]           var _profile_background_tile: Boolean = false;
[info]           var _profile_image_url: String = null;
[info]           var _profile_image_url_https: String = null;
[info]           var _profile_banner_url: String = null;
[info]           var _profile_link_color: String = null;
[info]           var _profile_sidebar_border_color: String = null;
[info]           var _profile_sidebar_fill_color: String = null;
[info]           var _profile_text_color: String = null;
[info]           var _profile_use_background_image: Boolean = false;
[info]           var _has_extended_profile: Boolean = false;
[info]           var _default_profile: Boolean = false;
[info]           var _default_profile_image: Boolean = false;
[info]           var _following: Boolean = false;
[info]           var _follow_request_sent: Boolean = false;
[info]           var _notifications: Boolean = false;
[info]           var _translator_type: String = null;
[info]           var req0 = -1;
[info]           var req1 = 1023;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = in.readString(_id_str);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         _name = in.readString(_name);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         _screen_name = in.readString(_screen_name);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1901043637 => if (in.isCharBufEqualsTo(l, "location"))
[info]                       {
[info]                         _location = in.readString(_location);
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         _description = in.readString(_description);
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         _url = in.readString(_url);
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         _entities = d11(in, _entities);
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -608539730 => if (in.isCharBufEqualsTo(l, "protected"))
[info]                       {
[info]                         _protected = in.readBoolean();
[info]                         req0.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -460163995 => if (in.isCharBufEqualsTo(l, "followers_count"))
[info]                       {
[info]                         _followers_count = in.readInt();
[info]                         req0.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1666926107 => if (in.isCharBufEqualsTo(l, "friends_count"))
[info]                       {
[info]                         _friends_count = in.readInt();
[info]                         req0.&=(-1025)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1974943731 => if (in.isCharBufEqualsTo(l, "listed_count"))
[info]                       {
[info]                         _listed_count = in.readInt();
[info]                         req0.&=(-2049)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         _created_at = in.readString(_created_at);
[info]                         req0.&=(-4097)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 226316666 => if (in.isCharBufEqualsTo(l, "favourites_count"))
[info]                       {
[info]                         _favourites_count = in.readInt();
[info]                         req0.&=(-8193)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1699658638 => if (in.isCharBufEqualsTo(l, "utc_offset"))
[info]                       {
[info]                         _utc_offset = in.readInt();
[info]                         req0.&=(-16385)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 36848094 => if (in.isCharBufEqualsTo(l, "time_zone"))
[info]                       {
[info]                         _time_zone = in.readString(_time_zone);
[info]                         req0.&=(-32769)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1085743021 => if (in.isCharBufEqualsTo(l, "geo_enabled"))
[info]                       {
[info]                         _geo_enabled = in.readBoolean();
[info]                         req0.&=(-65537)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1994383672 => if (in.isCharBufEqualsTo(l, "verified"))
[info]                       {
[info]                         _verified = in.readBoolean();
[info]                         req0.&=(-131073)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1824078800 => if (in.isCharBufEqualsTo(l, "statuses_count"))
[info]                       {
[info]                         _statuses_count = in.readInt();
[info]                         req0.&=(-262145)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         _lang = in.readString(_lang);
[info]                         req0.&=(-524289)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 647263482 => if (in.isCharBufEqualsTo(l, "contributors_enabled"))
[info]                       {
[info]                         _contributors_enabled = in.readBoolean();
[info]                         req0.&=(-1048577)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 583435343 => if (in.isCharBufEqualsTo(l, "is_translator"))
[info]                       {
[info]                         _is_translator = in.readBoolean();
[info]                         req0.&=(-2097153)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1690715422 => if (in.isCharBufEqualsTo(l, "is_translation_enabled"))
[info]                       {
[info]                         _is_translation_enabled = in.readBoolean();
[info]                         req0.&=(-4194305)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1592986856 => if (in.isCharBufEqualsTo(l, "profile_background_color"))
[info]                       {
[info]                         _profile_background_color = in.readString(_profile_background_color);
[info]                         req0.&=(-8388609)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1189803120 => if (in.isCharBufEqualsTo(l, "profile_background_image_url"))
[info]                       {
[info]                         _profile_background_image_url = in.readString(_profile_background_image_url);
[info]                         req0.&=(-16777217)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 594447228 => if (in.isCharBufEqualsTo(l, "profile_background_image_url_https"))
[info]                       {
[info]                         _profile_background_image_url_https = in.readString(_profile_background_image_url_https);
[info]                         req0.&=(-33554433)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1021718665 => if (in.isCharBufEqualsTo(l, "profile_background_tile"))
[info]                       {
[info]                         _profile_background_tile = in.readBoolean();
[info]                         req0.&=(-67108865)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -174080651 => if (in.isCharBufEqualsTo(l, "profile_image_url"))
[info]                       {
[info]                         _profile_image_url = in.readString(_profile_image_url);
[info]                         req0.&=(-134217729)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -782008927 => if (in.isCharBufEqualsTo(l, "profile_image_url_https"))
[info]                       {
[info]                         _profile_image_url_https = in.readString(_profile_image_url_https);
[info]                         req0.&=(-268435457)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -690137550 => if (in.isCharBufEqualsTo(l, "profile_banner_url"))
[info]                       {
[info]                         _profile_banner_url = in.readString(_profile_banner_url);
[info]                         req0.&=(-536870913)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1512257332 => if (in.isCharBufEqualsTo(l, "profile_link_color"))
[info]                       {
[info]                         _profile_link_color = in.readString(_profile_link_color);
[info]                         req0.&=(-1073741825)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1412739479 => if (in.isCharBufEqualsTo(l, "profile_sidebar_border_color"))
[info]                       {
[info]                         _profile_sidebar_border_color = in.readString(_profile_sidebar_border_color);
[info]                         req0.&=(2147483647)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 486184128 => if (in.isCharBufEqualsTo(l, "profile_sidebar_fill_color"))
[info]                       {
[info]                         _profile_sidebar_fill_color = in.readString(_profile_sidebar_fill_color);
[info]                         req1.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1774134745 => if (in.isCharBufEqualsTo(l, "profile_text_color"))
[info]                       {
[info]                         _profile_text_color = in.readString(_profile_text_color);
[info]                         req1.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -101767272 => if (in.isCharBufEqualsTo(l, "profile_use_background_image"))
[info]                       {
[info]                         _profile_use_background_image = in.readBoolean();
[info]                         req1.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 284519336 => if (in.isCharBufEqualsTo(l, "has_extended_profile"))
[info]                       {
[info]                         _has_extended_profile = in.readBoolean();
[info]                         req1.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -312724053 => if (in.isCharBufEqualsTo(l, "default_profile"))
[info]                       {
[info]                         _default_profile = in.readBoolean();
[info]                         req1.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 545330631 => if (in.isCharBufEqualsTo(l, "default_profile_image"))
[info]                       {
[info]                         _default_profile_image = in.readBoolean();
[info]                         req1.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 765915793 => if (in.isCharBufEqualsTo(l, "following"))
[info]                       {
[info]                         _following = in.readBoolean();
[info]                         req1.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 585125142 => if (in.isCharBufEqualsTo(l, "follow_request_sent"))
[info]                       {
[info]                         _follow_request_sent = in.readBoolean();
[info]                         req1.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1272354024 => if (in.isCharBufEqualsTo(l, "notifications"))
[info]                       {
[info]                         _notifications = in.readBoolean();
[info]                         req1.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -475640257 => if (in.isCharBufEqualsTo(l, "translator_type"))
[info]                       {
[info]                         _translator_type = in.readString(_translator_type);
[info]                         req1.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0).&&(req1.==(0)))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.User(id = _id, id_str = _id_str, name = _name, screen_name = _screen_name, location = _location, description = _description, url = _url, entities = _entities, `protected` = _protected, followers_count = _followers_count, friends_count = _friends_count, listed_count = _listed_count, created_at = _created_at, favourites_count = _favourites_count, utc_offset = _utc_offset, time_zone = _time_zone, geo_enabled = _geo_enabled, verified = _verified, statuses_count = _statuses_count, lang = _lang, contributors_enabled = _contributors_enabled, is_translator = _is_translator, is_translation_enabled = _is_translation_enabled, profile_background_color = _profile_background_color, profile_background_image_url = _profile_background_image_url, profile_background_image_url_https = _profile_background_image_url_https, profile_background_tile = _profile_background_tile, profile_image_url = _profile_image_url, profile_image_url_https = _profile_image_url_https, profile_banner_url = _profile_banner_url, profile_link_color = _profile_link_color, profile_sidebar_border_color = _profile_sidebar_border_color, profile_sidebar_fill_color = _profile_sidebar_fill_color, profile_text_color = _profile_text_color, profile_use_background_image = _profile_use_background_image, has_extended_profile = _has_extended_profile, default_profile = _default_profile, default_profile_image = _default_profile_image, following = _following, follow_request_sent = _follow_request_sent, notifications = _notifications, translator_type = _translator_type)
[info]           else
[info]             in.requiredKeyError(r3, Array(req0, req1))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d13(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus): com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var req0 = 32767;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         _created_at = in.readString(_created_at);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = in.readString(_id_str);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         _text = in.readString(_text);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         _truncated = in.readBoolean();
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         _entities = d2(in, _entities);
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         _source = in.readString(_source);
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         _user = d10(in, _user);
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       _geo = d9(in, _geo)
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       _coordinates = d9(in, _coordinates)
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       _place = d9(in, _place)
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       _contributors = d9(in, _contributors)
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         _is_quote_status = in.readBoolean();
[info]                         req0.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         _retweet_count = in.readInt();
[info]                         req0.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         _favorite_count = in.readInt();
[info]                         req0.&=(-1025)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         _favorited = in.readBoolean();
[info]                         req0.&=(-2049)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         _retweeted = in.readBoolean();
[info]                         req0.&=(-4097)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         _possibly_sensitive = in.readBoolean();
[info]                         req0.&=(-8193)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         _lang = in.readString(_lang);
[info]                         req0.&=(-16385)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]           else
[info]             in.requiredKeyError(r5, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet): com.github.plokhotnyuk.jsoniter_scala.macros.Tweet = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _retweeted_status: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = null;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var req0 = 65535;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         _created_at = in.readString(_created_at);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = in.readString(_id_str);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         _text = in.readString(_text);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         _truncated = in.readBoolean();
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         _entities = d2(in, _entities);
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         _source = in.readString(_source);
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         _user = d10(in, _user);
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       _geo = d9(in, _geo)
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       _coordinates = d9(in, _coordinates)
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       _place = d9(in, _place)
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       _contributors = d9(in, _contributors)
[info]                     else
[info]                       in.skip()
[info]                     case 364396852 => if (in.isCharBufEqualsTo(l, "retweeted_status"))
[info]                       {
[info]                         _retweeted_status = d13(in, _retweeted_status);
[info]                         req0.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         _is_quote_status = in.readBoolean();
[info]                         req0.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         _retweet_count = in.readInt();
[info]                         req0.&=(-1025)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         _favorite_count = in.readInt();
[info]                         req0.&=(-2049)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         _favorited = in.readBoolean();
[info]                         req0.&=(-4097)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         _retweeted = in.readBoolean();
[info]                         req0.&=(-8193)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         _possibly_sensitive = in.readBoolean();
[info]                         req0.&=(-16385)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         _lang = in.readString(_lang);
[info]                         req0.&=(-32769)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.Tweet(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, retweeted_status = _retweeted_status, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]             do 
[info]               x.+=(d1(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e3(x: Seq[String], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e6(x: Seq[Int], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("screen_name");
[info]             out.writeVal(x.screen_name)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("name");
[info]             out.writeVal(x.name)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id");
[info]             out.writeVal(x.id)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id_str");
[info]             out.writeVal(x.id_str)
[info]           };
[info]           {
[info]             val v = x.indices;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("indices");
[info]                 e6(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e4(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e5(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e8(x: com.github.plokhotnyuk.jsoniter_scala.macros.Urls, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("url");
[info]             out.writeVal(x.url)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("expanded_url");
[info]             out.writeVal(x.expanded_url)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("display_url");
[info]             out.writeVal(x.display_url)
[info]           };
[info]           {
[info]             val v = x.indices;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("indices");
[info]                 e6(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e7(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e8(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.Entities, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.hashtags;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("hashtags");
[info]                 e3(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.symbols;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("symbols");
[info]                 e3(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.user_mentions;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("user_mentions");
[info]                 e4(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.urls;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("urls");
[info]                 e7(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e9(x: Option[String], out: JsonWriter): Unit = if (x.eq(null).||(x.isEmpty))
[info]         out.writeNull()
[info]       else
[info]         out.writeVal(x.get);
[info]       private def e12(x: com.github.plokhotnyuk.jsoniter_scala.macros.Url, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.urls;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("urls");
[info]                 e7(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e11(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("url");
[info]             e12(x.url, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("description");
[info]             e12(x.description, out)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e10(x: com.github.plokhotnyuk.jsoniter_scala.macros.User, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("id");
[info]             out.writeVal(x.id)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id_str");
[info]             out.writeVal(x.id_str)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("name");
[info]             out.writeVal(x.name)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("screen_name");
[info]             out.writeVal(x.screen_name)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("location");
[info]             out.writeVal(x.location)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("description");
[info]             out.writeVal(x.description)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("url");
[info]             out.writeVal(x.url)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("entities");
[info]             e11(x.entities, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("protected");
[info]             out.writeVal(x.`protected`)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("followers_count");
[info]             out.writeVal(x.followers_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("friends_count");
[info]             out.writeVal(x.friends_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("listed_count");
[info]             out.writeVal(x.listed_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("created_at");
[info]             out.writeVal(x.created_at)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("favourites_count");
[info]             out.writeVal(x.favourites_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("utc_offset");
[info]             out.writeVal(x.utc_offset)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("time_zone");
[info]             out.writeVal(x.time_zone)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("geo_enabled");
[info]             out.writeVal(x.geo_enabled)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("verified");
[info]             out.writeVal(x.verified)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("statuses_count");
[info]             out.writeVal(x.statuses_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("lang");
[info]             out.writeVal(x.lang)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("contributors_enabled");
[info]             out.writeVal(x.contributors_enabled)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("is_translator");
[info]             out.writeVal(x.is_translator)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("is_translation_enabled");
[info]             out.writeVal(x.is_translation_enabled)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_background_color");
[info]             out.writeVal(x.profile_background_color)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_background_image_url");
[info]             out.writeVal(x.profile_background_image_url)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_background_image_url_https");
[info]             out.writeVal(x.profile_background_image_url_https)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_background_tile");
[info]             out.writeVal(x.profile_background_tile)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_image_url");
[info]             out.writeVal(x.profile_image_url)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_image_url_https");
[info]             out.writeVal(x.profile_image_url_https)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_banner_url");
[info]             out.writeVal(x.profile_banner_url)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_link_color");
[info]             out.writeVal(x.profile_link_color)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_sidebar_border_color");
[info]             out.writeVal(x.profile_sidebar_border_color)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_sidebar_fill_color");
[info]             out.writeVal(x.profile_sidebar_fill_color)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_text_color");
[info]             out.writeVal(x.profile_text_color)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_use_background_image");
[info]             out.writeVal(x.profile_use_background_image)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("has_extended_profile");
[info]             out.writeVal(x.has_extended_profile)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("default_profile");
[info]             out.writeVal(x.default_profile)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("default_profile_image");
[info]             out.writeVal(x.default_profile_image)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("following");
[info]             out.writeVal(x.following)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("follow_request_sent");
[info]             out.writeVal(x.follow_request_sent)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("notifications");
[info]             out.writeVal(x.notifications)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("translator_type");
[info]             out.writeVal(x.translator_type)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e13(x: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("created_at");
[info]             out.writeVal(x.created_at)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id");
[info]             out.writeVal(x.id)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id_str");
[info]             out.writeVal(x.id_str)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("text");
[info]             out.writeVal(x.text)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("truncated");
[info]             out.writeVal(x.truncated)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("entities");
[info]             e2(x.entities, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("source");
[info]             out.writeVal(x.source)
[info]           };
[info]           {
[info]             val v = x.in_reply_to_status_id;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_status_id_str;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_user_id;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_user_id_str;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_screen_name;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("user");
[info]             e10(x.user, out)
[info]           };
[info]           {
[info]             val v = x.geo;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("geo");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.coordinates;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("coordinates");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.place;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("place");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.contributors;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("contributors");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("is_quote_status");
[info]             out.writeVal(x.is_quote_status)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("retweet_count");
[info]             out.writeVal(x.retweet_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("favorite_count");
[info]             out.writeVal(x.favorite_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("favorited");
[info]             out.writeVal(x.favorited)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("retweeted");
[info]             out.writeVal(x.retweeted)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]             out.writeVal(x.possibly_sensitive)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("lang");
[info]             out.writeVal(x.lang)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("created_at");
[info]             out.writeVal(x.created_at)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id");
[info]             out.writeVal(x.id)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id_str");
[info]             out.writeVal(x.id_str)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("text");
[info]             out.writeVal(x.text)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("truncated");
[info]             out.writeVal(x.truncated)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("entities");
[info]             e2(x.entities, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("source");
[info]             out.writeVal(x.source)
[info]           };
[info]           {
[info]             val v = x.in_reply_to_status_id;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_status_id_str;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_user_id;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_user_id_str;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_screen_name;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("user");
[info]             e10(x.user, out)
[info]           };
[info]           {
[info]             val v = x.geo;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("geo");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.coordinates;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("coordinates");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.place;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("place");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.contributors;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("contributors");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("retweeted_status");
[info]             e13(x.retweeted_status, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("is_quote_status");
[info]             out.writeVal(x.is_quote_status)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("retweet_count");
[info]             out.writeVal(x.retweet_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("favorite_count");
[info]             out.writeVal(x.favorite_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("favorited");
[info]             out.writeVal(x.favorited)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("retweeted");
[info]             out.writeVal(x.retweeted)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]             out.writeVal(x.possibly_sensitive)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("lang");
[info]             out.writeVal(x.lang)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e1(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val twitterAPICodec: JsonCodec[Seq[Tweet]] = make[Seq[Tweet]](CodecMakerConfig())
[info]                                                                ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:14:18: local val v1 in value arraysFormat is never used
[warn]     implicit val v1: Format[Array[BigInt]] = Format(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:20:18: local val v1 in value bitSetsFormat is never used
[warn]     implicit val v1: Reads[BitSet] = Reads[BitSet](js => JsSuccess(BitSet(js.as[Array[Int]]: _*)))
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:21:18: local val v2 in value bitSetsFormat is never used
[warn]     implicit val v2: Reads[mutable.BitSet] =
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:28:18: local val v1 in value mapsFormat is never used
[warn]     implicit val v1: OFormat[HashMap[String, Double]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:31:18: local val v2 in value mapsFormat is never used
[warn]     implicit val v2: OFormat[Map[Int, HashMap[Long, Double]]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:43:18: local val v1 in value mutableMapsFormat is never used
[warn]     implicit val v1: OFormat[mutable.HashMap[String, Double]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:46:18: local val v2 in value mutableMapsFormat is never used
[warn]     implicit val v2: OFormat[mutable.Map[Int, mutable.OpenHashMap[Long, Double]]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:63:18: local val v1 in value intAndLongMapsFormat is never used
[warn]     implicit val v1: OFormat[IntMap[Double]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:68:18: local val v2 in value intAndLongMapsFormat is never used
[warn]     implicit val v2: OFormat[mutable.LongMap[LongMap[Double]]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:80:18: local val v1 in value primitivesFormat is never used
[warn]     implicit val v1: Format[Char] = Format(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:87:23: local val v1 in value adtFormat is never used
[warn]     implicit lazy val v1: OFormat[A] = Json.format[A]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:88:23: local val v2 in value adtFormat is never used
[warn]     implicit lazy val v2: OFormat[B] = Json.format[B]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:89:23: local val v3 in value adtFormat is never used
[warn]     implicit lazy val v3: OFormat[C] = Json.format[C]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:94:18: local val v1 in value googleMapsAPIFormat is never used
[warn]     implicit val v1: OFormat[Value] = Json.format[Value]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:95:18: local val v2 in value googleMapsAPIFormat is never used
[warn]     implicit val v2: OFormat[Elements] = Json.format[Elements]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:96:18: local val v3 in value googleMapsAPIFormat is never used
[warn]     implicit val v3: OFormat[Rows] = Json.format[Rows]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:100:18: local val v1 in value twitterAPIFormat is never used
[warn]     implicit val v1: OFormat[Urls] = Json.format[Urls]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:101:18: local val v2 in value twitterAPIFormat is never used
[warn]     implicit val v2: OFormat[Url] = Json.format[Url]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:102:18: local val v3 in value twitterAPIFormat is never used
[warn]     implicit val v3: OFormat[UserEntities] = Json.format[UserEntities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:103:18: local val v4 in value twitterAPIFormat is never used
[warn]     implicit val v4: OFormat[UserMentions] = Json.format[UserMentions]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:104:18: local val v5 in value twitterAPIFormat is never used
[warn]     implicit val v5: OFormat[Entities] = Json.format[Entities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:105:18: local val v6 in value twitterAPIFormat is never used
[warn]     implicit val v6: Format[User] = Jsonx.formatCaseClass[User]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:106:18: local val v7 in value twitterAPIFormat is never used
[warn]     implicit val v7: Format[RetweetedStatus] = Jsonx.formatCaseClass[RetweetedStatus]
[warn]                  ^
[warn] 23 warnings found
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.8.1-SNAPSHOT.jar ...
Processing 321 classes from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes with "reflection" generator
Writing out Java source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/src_managed/jmh and resources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/resource_managed/jmh
[info] Compiling 37 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/test-classes ...
[info] Done packaging.
[info] Compiling 416 Java sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.8.1-SNAPSHOT-tests.jar ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.8.1-SNAPSHOT-jmh.jar ...
[info] Done packaging.
[info] Running (fork) org.openjdk.jmh.Main -prof gc -rf json -rff jdk9.json .*Benchmark.*
[error] WARNING: An illegal reflective access operation has occurred
[error] WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/tmp/sbt_11ae7560/target/5f9f9839/jmh-core-1.20.jar) to field java.io.PrintStream.charOut
[error] WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[error] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[error] WARNING: All illegal access operations will be denied in a future release
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce
[info] # Run progress: 0.00% complete, ETA 00:36:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 403158.130 ops/s
[info] # Warmup Iteration   2: 732216.901 ops/s
[info] # Warmup Iteration   3: 730529.728 ops/s
[info] Iteration   1: 731917.989 ops/s
[info]                  ·gc.alloc.rate:                   1934.032 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.224 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1971.116 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4239.767 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 702542.184 ops/s
[info]                  ·gc.alloc.rate:                   1856.165 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.373 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1990.921 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4462.013 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 722792.703 ops/s
[info]                  ·gc.alloc.rate:                   1910.177 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.136 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1673.001 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3643.478 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 731202.189 ops/s
[info]                  ·gc.alloc.rate:                   1932.234 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.179 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2019.485 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4347.847 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 734046.103 ops/s
[info]                  ·gc.alloc.rate:                   1940.340 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.134 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028.034 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4348.013 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce":
[info]   724500.234 ±(99.9%) 50063.353 ops/s [Average]
[info]   (min, avg, max) = (702542.184, 724500.234, 734046.103), stdev = 13001.294
[info]   CI (99.9%): [674436.881, 774563.586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate":
[info]   1914.589 ±(99.9%) 133.185 MB/sec [Average]
[info]   (min, avg, max) = (1856.165, 1914.589, 1940.340), stdev = 34.588
[info]   CI (99.9%): [1781.404, 2047.775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4160.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4160.001, 4160.001, 4160.001), stdev = 0.001
[info]   CI (99.9%): [4160.000, 4160.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.096 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.166), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.209 ±(99.9%) 0.380 B/op [Average]
[info]   (min, avg, max) = (0.134, 0.209, 0.373), stdev = 0.099
[info]   CI (99.9%): [≈ 0, 0.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1936.511 ±(99.9%) 573.915 MB/sec [Average]
[info]   (min, avg, max) = (1673.001, 1936.511, 2028.034), stdev = 149.044
[info]   CI (99.9%): [1362.596, 2510.427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4208.224 ±(99.9%) 1252.759 B/op [Average]
[info]   (min, avg, max) = (3643.478, 4208.224, 4462.013), stdev = 325.338
[info]   CI (99.9%): [2955.465, 5460.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala
[info] # Run progress: 0.37% complete, ETA 00:57:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 475211.164 ops/s
[info] # Warmup Iteration   2: 1605749.784 ops/s
[info] # Warmup Iteration   3: 1668345.441 ops/s
[info] Iteration   1: 1682904.490 ops/s
[info]                  ·gc.alloc.rate:                   1197.550 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.136 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1309.550 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1224.748 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 1697874.308 ops/s
[info]                  ·gc.alloc.rate:                   1207.911 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.096 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      989.234 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 917.238 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 1656109.453 ops/s
[info]                  ·gc.alloc.rate:                   1178.438 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.079 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1328.128 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1262.268 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1652188.519 ops/s
[info]                  ·gc.alloc.rate:                   1175.353 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.099 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1001.153 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 954.004 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1673988.485 ops/s
[info]                  ·gc.alloc.rate:                   1191.007 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.098 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.231 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1261.267 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala":
[info]   1672613.051 ±(99.9%) 72945.744 ops/s [Average]
[info]   (min, avg, max) = (1652188.519, 1672613.051, 1697874.308), stdev = 18943.778
[info]   CI (99.9%): [1599667.307, 1745558.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1190.052 ±(99.9%) 51.913 MB/sec [Average]
[info]   (min, avg, max) = (1175.353, 1190.052, 1207.911), stdev = 13.482
[info]   CI (99.9%): [1138.139, 1241.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1120.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1120.000, 1120.000, 1120.000), stdev = 0.001
[info]   CI (99.9%): [1120.000, 1120.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.108 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.108, 0.146), stdev = 0.023
[info]   CI (99.9%): [0.020, 0.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.102 ±(99.9%) 0.081 B/op [Average]
[info]   (min, avg, max) = (0.079, 0.102, 0.136), stdev = 0.021
[info]   CI (99.9%): [0.021, 0.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1193.859 ±(99.9%) 699.870 MB/sec [Average]
[info]   (min, avg, max) = (989.234, 1193.859, 1341.231), stdev = 181.754
[info]   CI (99.9%): [493.989, 1893.729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1123.905 ±(99.9%) 666.282 B/op [Average]
[info]   (min, avg, max) = (917.238, 1123.905, 1262.268), stdev = 173.031
[info]   CI (99.9%): [457.623, 1790.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala
[info] # Run progress: 0.74% complete, ETA 00:57:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3108049.753 ops/s
[info] # Warmup Iteration   2: 3787805.441 ops/s
[info] # Warmup Iteration   3: 4070870.549 ops/s
[info] Iteration   1: 4063184.851 ops/s
[info]                  ·gc.alloc.rate:                   268.454 MB/sec
[info]                  ·gc.alloc.rate.norm:              104.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.764 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 99.084 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 4053181.909 ops/s
[info]                  ·gc.alloc.rate:                   267.728 MB/sec
[info]                  ·gc.alloc.rate.norm:              104.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.704 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 99.330 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 4058640.787 ops/s
[info]                  ·gc.alloc.rate:                   268.130 MB/sec
[info]                  ·gc.alloc.rate.norm:              104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.037 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.733 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 99.192 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 4044596.548 ops/s
[info]                  ·gc.alloc.rate:      267.193 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 4030431.842 ops/s
[info]                  ·gc.alloc.rate:                   266.231 MB/sec
[info]                  ·gc.alloc.rate.norm:              104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.141 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.227 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      332.273 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 129.799 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala":
[info]   4050007.187 ±(99.9%) 49863.158 ops/s [Average]
[info]   (min, avg, max) = (4030431.842, 4050007.187, 4063184.851), stdev = 12949.304
[info]   CI (99.9%): [4000144.029, 4099870.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   267.547 ±(99.9%) 3.364 MB/sec [Average]
[info]   (min, avg, max) = (266.231, 267.547, 268.454), stdev = 0.874
[info]   CI (99.9%): [264.184, 270.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   104.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (104.000, 104.000, 104.000), stdev = 0.001
[info]   CI (99.9%): [104.000, 104.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.636 ±(99.9%) 5.394 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.636, 3.141), stdev = 1.401
[info]   CI (99.9%): [≈ 0, 6.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.248 ±(99.9%) 2.107 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.248, 1.227), stdev = 0.547
[info]   CI (99.9%): [≈ 0, 2.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   219.895 ±(99.9%) 490.243 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 219.895, 332.273), stdev = 127.315
[info]   CI (99.9%): [≈ 0, 710.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   85.481 ±(99.9%) 190.946 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 85.481, 129.799), stdev = 49.588
[info]   CI (99.9%): [≈ 0, 276.426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.095
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson
[info] # Run progress: 1.10% complete, ETA 00:56:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 30545.726 ops/s
[info] # Warmup Iteration   2: 172640.155 ops/s
[info] # Warmup Iteration   3: 170335.672 ops/s
[info] Iteration   1: 172960.167 ops/s
[info]                  ·gc.alloc.rate:                   1465.022 MB/sec
[info]                  ·gc.alloc.rate.norm:              13336.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.568 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1641.038 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14938.267 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 175549.446 ops/s
[info]                  ·gc.alloc.rate:                   1487.030 MB/sec
[info]                  ·gc.alloc.rate.norm:              13336.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.306 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1325.232 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11884.960 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 171833.089 ops/s
[info]                  ·gc.alloc.rate:                   1455.491 MB/sec
[info]                  ·gc.alloc.rate.norm:              13336.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.572 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1668.374 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15286.547 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 172761.041 ops/s
[info]                  ·gc.alloc.rate:                   1463.340 MB/sec
[info]                  ·gc.alloc.rate.norm:              13336.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.034 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12230.494 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 173285.344 ops/s
[info]                  ·gc.alloc.rate:                   1467.882 MB/sec
[info]                  ·gc.alloc.rate.norm:              13336.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.945 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1685.442 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15312.581 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson":
[info]   173277.817 ±(99.9%) 5313.175 ops/s [Average]
[info]   (min, avg, max) = (171833.089, 173277.817, 175549.446), stdev = 1379.815
[info]   CI (99.9%): [167964.642, 178590.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1467.753 ±(99.9%) 45.108 MB/sec [Average]
[info]   (min, avg, max) = (1455.491, 1467.753, 1487.030), stdev = 11.714
[info]   CI (99.9%): [1422.645, 1512.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   13336.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (13336.002, 13336.002, 13336.003), stdev = 0.001
[info]   CI (99.9%): [13336.002, 13336.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.209 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.075, 0.146), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.678 ±(99.9%) 1.876 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.678, 1.306), stdev = 0.487
[info]   CI (99.9%): [≈ 0, 2.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1532.424 ±(99.9%) 701.807 MB/sec [Average]
[info]   (min, avg, max) = (1325.232, 1532.424, 1685.442), stdev = 182.257
[info]   CI (99.9%): [830.617, 2234.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   13930.570 ±(99.9%) 6624.579 B/op [Average]
[info]   (min, avg, max) = (11884.960, 13930.570, 15312.581), stdev = 1720.382
[info]   CI (99.9%): [7305.991, 20555.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 1.095
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala
[info] # Run progress: 1.47% complete, ETA 00:56:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_11ae7560/target/5e31e36e/jackson-module-afterburner-2.9.4.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 559442.285 ops/s
[info] # Warmup Iteration   2: 2040338.988 ops/s
[info] # Warmup Iteration   3: 2062634.546 ops/s
[info] Iteration   1: 2090645.573 ops/s
[info]                  ·gc.alloc.rate:                   743.610 MB/sec
[info]                  ·gc.alloc.rate.norm:              560.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.031 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      647.562 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 487.668 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 2100243.298 ops/s
[info]                  ·gc.alloc.rate:                   747.143 MB/sec
[info]                  ·gc.alloc.rate.norm:              560.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.109 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      651.357 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 488.207 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 2044503.414 ops/s
[info]                  ·gc.alloc.rate:                   727.252 MB/sec
[info]                  ·gc.alloc.rate.norm:              560.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.048 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      982.553 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 756.587 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 2090793.574 ops/s
[info]                  ·gc.alloc.rate:                   743.646 MB/sec
[info]                  ·gc.alloc.rate.norm:              560.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658.531 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 495.905 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2100717.893 ops/s
[info]                  ·gc.alloc.rate:                   747.461 MB/sec
[info]                  ·gc.alloc.rate.norm:              560.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.094 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      661.418 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 495.536 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala":
[info]   2085380.750 ±(99.9%) 89978.617 ops/s [Average]
[info]   (min, avg, max) = (2044503.414, 2085380.750, 2100717.893), stdev = 23367.161
[info]   CI (99.9%): [1995402.133, 2175359.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   741.822 ±(99.9%) 32.154 MB/sec [Average]
[info]   (min, avg, max) = (727.252, 741.822, 747.461), stdev = 8.350
[info]   CI (99.9%): [709.668, 773.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   560.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (560.000, 560.000, 560.000), stdev = 0.001
[info]   CI (99.9%): [560.000, 560.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.231 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.075, 0.146), stdev = 0.060
[info]   CI (99.9%): [≈ 0, 0.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.056 ±(99.9%) 0.173 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.056, 0.109), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   720.284 ±(99.9%) 564.953 MB/sec [Average]
[info]   (min, avg, max) = (647.562, 720.284, 982.553), stdev = 146.716
[info]   CI (99.9%): [155.331, 1285.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   544.781 ±(99.9%) 456.177 B/op [Average]
[info]   (min, avg, max) = (487.668, 544.781, 756.587), stdev = 118.468
[info]   CI (99.9%): [88.604, 1000.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala
[info] # Run progress: 1.84% complete, ETA 00:56:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9332588.544 ops/s
[info] # Warmup Iteration   2: 13802627.800 ops/s
[info] # Warmup Iteration   3: 14226691.789 ops/s
[info] Iteration   1: 13702551.740 ops/s
[info]                  ·gc.alloc.rate:                   696.304 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.569 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 75.320 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 13906978.403 ops/s
[info]                  ·gc.alloc.rate:                   706.658 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.282 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 73.957 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 13853047.012 ops/s
[info]                  ·gc.alloc.rate:                   703.917 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.563 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 74.164 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 13853142.523 ops/s
[info]                  ·gc.alloc.rate:                   704.027 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.317 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 74.238 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 13963200.192 ops/s
[info]                  ·gc.alloc.rate:                   709.568 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      982.897 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 110.816 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala":
[info]   13855783.974 ±(99.9%) 373600.276 ops/s [Average]
[info]   (min, avg, max) = (13702551.740, 13855783.974, 13963200.192), stdev = 97022.805
[info]   CI (99.9%): [13482183.698, 14229384.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   704.095 ±(99.9%) 18.988 MB/sec [Average]
[info]   (min, avg, max) = (696.304, 704.095, 709.568), stdev = 4.931
[info]   CI (99.9%): [685.107, 723.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   80.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (80.000, 80.000, 80.000), stdev = 0.001
[info]   CI (99.9%): [80.000, 80.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.104), stdev = 0.017
[info]   CI (99.9%): [0.020, 0.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.010 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (0.007, 0.010, 0.012), stdev = 0.002
[info]   CI (99.9%): [0.002, 0.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   719.526 ±(99.9%) 566.943 MB/sec [Average]
[info]   (min, avg, max) = (652.563, 719.526, 982.897), stdev = 147.233
[info]   CI (99.9%): [152.583, 1286.469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   81.699 ±(99.9%) 62.710 B/op [Average]
[info]   (min, avg, max) = (73.957, 81.699, 110.816), stdev = 16.286
[info]   CI (99.9%): [18.989, 144.409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson
[info] # Run progress: 2.21% complete, ETA 00:56:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 62278.107 ops/s
[info] # Warmup Iteration   2: 331698.863 ops/s
[info] # Warmup Iteration   3: 336641.589 ops/s
[info] Iteration   1: 336245.868 ops/s
[info]                  ·gc.alloc.rate:                   1088.137 MB/sec
[info]                  ·gc.alloc.rate.norm:              5096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.390 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      980.344 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4591.182 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 334796.696 ops/s
[info]                  ·gc.alloc.rate:                   1083.734 MB/sec
[info]                  ·gc.alloc.rate.norm:              5096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.685 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1314.632 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6181.744 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 334782.859 ops/s
[info]                  ·gc.alloc.rate:                   1083.708 MB/sec
[info]                  ·gc.alloc.rate.norm:              5096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.391 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      993.270 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4670.728 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 333302.801 ops/s
[info]                  ·gc.alloc.rate:                   1078.966 MB/sec
[info]                  ·gc.alloc.rate.norm:              5096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.393 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      998.006 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4713.624 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 332556.960 ops/s
[info]                  ·gc.alloc.rate:                   1076.566 MB/sec
[info]                  ·gc.alloc.rate.norm:              5096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.591 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1002.678 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4746.250 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson":
[info]   334337.037 ±(99.9%) 5544.124 ops/s [Average]
[info]   (min, avg, max) = (332556.960, 334337.037, 336245.868), stdev = 1439.791
[info]   CI (99.9%): [328792.913, 339881.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1082.222 ±(99.9%) 17.443 MB/sec [Average]
[info]   (min, avg, max) = (1076.566, 1082.222, 1088.137), stdev = 4.530
[info]   CI (99.9%): [1064.779, 1099.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5096.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5096.001, 5096.001, 5096.001), stdev = 0.001
[info]   CI (99.9%): [5096.001, 5096.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.104 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.104, 0.146), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.490 ±(99.9%) 0.536 B/op [Average]
[info]   (min, avg, max) = (0.390, 0.490, 0.685), stdev = 0.139
[info]   CI (99.9%): [≈ 0, 1.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1057.786 ±(99.9%) 553.811 MB/sec [Average]
[info]   (min, avg, max) = (980.344, 1057.786, 1314.632), stdev = 143.823
[info]   CI (99.9%): [503.975, 1611.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4980.705 ±(99.9%) 2594.982 B/op [Average]
[info]   (min, avg, max) = (4591.182, 4980.705, 6181.744), stdev = 673.909
[info]   CI (99.9%): [2385.723, 7575.687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 5.000), stdev = 0.894
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce
[info] # Run progress: 2.57% complete, ETA 00:56:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 978329.306 ops/s
[info] # Warmup Iteration   2: 1580244.050 ops/s
[info] # Warmup Iteration   3: 1593862.407 ops/s
[info] Iteration   1: 1604223.854 ops/s
[info]                  ·gc.alloc.rate:                   2502.766 MB/sec
[info]                  ·gc.alloc.rate.norm:              2456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.102 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2323.805 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2280.384 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 1593073.764 ops/s
[info]                  ·gc.alloc.rate:                   2484.899 MB/sec
[info]                  ·gc.alloc.rate.norm:              2456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.165 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2682.729 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2651.529 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 1602655.045 ops/s
[info]                  ·gc.alloc.rate:                   2501.002 MB/sec
[info]                  ·gc.alloc.rate.norm:              2456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.102 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2364.114 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2321.575 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 1585313.355 ops/s
[info]                  ·gc.alloc.rate:                   2473.214 MB/sec
[info]                  ·gc.alloc.rate.norm:              2456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.103 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2371.446 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2354.940 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 1601314.692 ops/s
[info]                  ·gc.alloc.rate:                   2498.205 MB/sec
[info]                  ·gc.alloc.rate.norm:              2456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.205 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2717.073 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2671.171 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce":
[info]   1597316.142 ±(99.9%) 30701.095 ops/s [Average]
[info]   (min, avg, max) = (1585313.355, 1597316.142, 1604223.854), stdev = 7972.977
[info]   CI (99.9%): [1566615.047, 1628017.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate":
[info]   2492.017 ±(99.9%) 48.659 MB/sec [Average]
[info]   (min, avg, max) = (2473.214, 2492.017, 2502.766), stdev = 12.637
[info]   CI (99.9%): [2443.358, 2540.677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2456.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2456.000, 2456.000, 2456.000), stdev = 0.001
[info]   CI (99.9%): [2456.000, 2456.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.137 ±(99.9%) 0.184 MB/sec [Average]
[info]   (min, avg, max) = (0.104, 0.137, 0.208), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.135 ±(99.9%) 0.181 B/op [Average]
[info]   (min, avg, max) = (0.102, 0.135, 0.205), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2491.833 ±(99.9%) 736.200 MB/sec [Average]
[info]   (min, avg, max) = (2323.805, 2491.833, 2717.073), stdev = 191.189
[info]   CI (99.9%): [1755.633, 3228.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2455.920 ±(99.9%) 729.731 B/op [Average]
[info]   (min, avg, max) = (2280.384, 2455.920, 2671.171), stdev = 189.509
[info]   CI (99.9%): [1726.189, 3185.650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.count":
[info]   37.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.400, 8.000), stdev = 0.548
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.000, 8.000), stdev = 0.707
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala
[info] # Run progress: 2.94% complete, ETA 00:55:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 912465.729 ops/s
[info] # Warmup Iteration   2: 2562453.158 ops/s
[info] # Warmup Iteration   3: 2555351.730 ops/s
[info] Iteration   1: 2567258.104 ops/s
[info]                  ·gc.alloc.rate:                   1800.298 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.089 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1654.416 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1014.541 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 2574839.433 ops/s
[info]                  ·gc.alloc.rate:                   1805.699 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.076 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2004.194 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1225.359 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 2541046.094 ops/s
[info]                  ·gc.alloc.rate:                   1781.743 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.077 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1681.300 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1041.764 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 2558649.279 ops/s
[info]                  ·gc.alloc.rate:                   1794.067 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1687.899 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1038.668 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 2570876.039 ops/s
[info]                  ·gc.alloc.rate:                   1803.082 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.064 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1693.634 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1036.987 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala":
[info]   2562533.790 ±(99.9%) 51667.248 ops/s [Average]
[info]   (min, avg, max) = (2541046.094, 2562533.790, 2574839.433), stdev = 13417.820
[info]   CI (99.9%): [2510866.542, 2614201.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1796.978 ±(99.9%) 36.780 MB/sec [Average]
[info]   (min, avg, max) = (1781.743, 1796.978, 1805.699), stdev = 9.552
[info]   CI (99.9%): [1760.198, 1833.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1104.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1104.000, 1104.000, 1104.000), stdev = 0.001
[info]   CI (99.9%): [1104.000, 1104.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.112 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.112, 0.146), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.069 ±(99.9%) 0.075 B/op [Average]
[info]   (min, avg, max) = (0.038, 0.069, 0.089), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1744.288 ±(99.9%) 562.448 MB/sec [Average]
[info]   (min, avg, max) = (1654.416, 1744.288, 2004.194), stdev = 146.066
[info]   CI (99.9%): [1181.841, 2306.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1071.464 ±(99.9%) 333.866 B/op [Average]
[info]   (min, avg, max) = (1014.541, 1071.464, 1225.359), stdev = 86.704
[info]   CI (99.9%): [737.598, 1405.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 8.000), stdev = 1.095
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala
[info] # Run progress: 3.31% complete, ETA 00:55:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10191330.027 ops/s
[info] # Warmup Iteration   2: 11475409.628 ops/s
[info] # Warmup Iteration   3: 11778278.873 ops/s
[info] Iteration   1: 11700893.588 ops/s
[info]                  ·gc.alloc.rate:                   1486.401 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1321.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 177.762 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 11702817.695 ops/s
[info]                  ·gc.alloc.rate:                   1486.603 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1659.406 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 223.248 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 11800124.279 ops/s
[info]                  ·gc.alloc.rate:                   1498.996 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1335.388 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 178.171 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 11770490.473 ops/s
[info]                  ·gc.alloc.rate:                   1495.323 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1677.160 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 224.321 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 11767560.282 ops/s
[info]                  ·gc.alloc.rate:                   1495.414 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.552 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 180.225 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala":
[info]   11748377.263 ±(99.9%) 170748.050 ops/s [Average]
[info]   (min, avg, max) = (11700893.588, 11748377.263, 11800124.279), stdev = 44342.726
[info]   CI (99.9%): [11577629.213, 11919125.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1492.547 ±(99.9%) 22.004 MB/sec [Average]
[info]   (min, avg, max) = (1486.401, 1492.547, 1498.996), stdev = 5.714
[info]   CI (99.9%): [1470.544, 1514.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   200.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (200.000, 200.000, 200.000), stdev = 0.001
[info]   CI (99.9%): [200.000, 200.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.146), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.012 ±(99.9%) 0.019 B/op [Average]
[info]   (min, avg, max) = (0.008, 0.012, 0.020), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1468.126 ±(99.9%) 704.916 MB/sec [Average]
[info]   (min, avg, max) = (1321.125, 1468.126, 1677.160), stdev = 183.065
[info]   CI (99.9%): [763.210, 2173.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   196.745 ±(99.9%) 95.126 B/op [Average]
[info]   (min, avg, max) = (177.762, 196.745, 224.321), stdev = 24.704
[info]   CI (99.9%): [101.619, 291.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson
[info] # Run progress: 3.68% complete, ETA 00:55:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 141049.273 ops/s
[info] # Warmup Iteration   2: 638963.843 ops/s
[info] # Warmup Iteration   3: 648404.692 ops/s
[info] Iteration   1: 644886.338 ops/s
[info]                  ·gc.alloc.rate:                   1703.543 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.406 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1979.129 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4832.972 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 649036.232 ops/s
[info]                  ·gc.alloc.rate:                   1715.203 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.252 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1666.788 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4042.578 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 645310.323 ops/s
[info]                  ·gc.alloc.rate:                   1705.261 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.254 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1677.585 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4092.484 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 644978.625 ops/s
[info]                  ·gc.alloc.rate:                   1704.357 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.254 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1685.500 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4113.975 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 649990.976 ops/s
[info]                  ·gc.alloc.rate:                   1717.741 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.353 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1691.374 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4096.145 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson":
[info]   646840.499 ±(99.9%) 9505.224 ops/s [Average]
[info]   (min, avg, max) = (644886.338, 646840.499, 649990.976), stdev = 2468.477
[info]   CI (99.9%): [637335.275, 656345.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1709.221 ±(99.9%) 25.828 MB/sec [Average]
[info]   (min, avg, max) = (1703.543, 1709.221, 1717.741), stdev = 6.707
[info]   CI (99.9%): [1683.393, 1735.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   4160.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4160.001, 4160.001, 4160.001), stdev = 0.001
[info]   CI (99.9%): [4160.001, 4160.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.125 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (0.104, 0.125, 0.166), stdev = 0.029
[info]   CI (99.9%): [0.012, 0.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.304 ±(99.9%) 0.276 B/op [Average]
[info]   (min, avg, max) = (0.252, 0.304, 0.406), stdev = 0.072
[info]   CI (99.9%): [0.028, 0.580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1740.075 ±(99.9%) 515.802 MB/sec [Average]
[info]   (min, avg, max) = (1666.788, 1740.075, 1979.129), stdev = 133.952
[info]   CI (99.9%): [1224.273, 2255.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4235.631 ±(99.9%) 1289.869 B/op [Average]
[info]   (min, avg, max) = (4042.578, 4235.631, 4832.972), stdev = 334.975
[info]   CI (99.9%): [2945.761, 5525.500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 0.707
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce
[info] # Run progress: 4.04% complete, ETA 00:55:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1199288.466 ops/s
[info] # Warmup Iteration   2: 2055031.973 ops/s
[info] # Warmup Iteration   3: 2115516.815 ops/s
[info] Iteration   1: 2042369.269 ops/s
[info]                  ·gc.alloc.rate:                   1868.685 MB/sec
[info]                  ·gc.alloc.rate.norm:              1440.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.112 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1974.355 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1521.430 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 2084913.842 ops/s
[info]                  ·gc.alloc.rate:                   1907.025 MB/sec
[info]                  ·gc.alloc.rate.norm:              1440.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.110 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1659.779 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1253.304 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 2101067.248 ops/s
[info]                  ·gc.alloc.rate:                   1922.351 MB/sec
[info]                  ·gc.alloc.rate.norm:              1440.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.062 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2007.307 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1503.640 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 2089899.284 ops/s
[info]                  ·gc.alloc.rate:                   1912.399 MB/sec
[info]                  ·gc.alloc.rate.norm:              1440.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.078 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2020.661 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1521.519 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 2126547.610 ops/s
[info]                  ·gc.alloc.rate:                   1945.606 MB/sec
[info]                  ·gc.alloc.rate.norm:              1440.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.077 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.293 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1501.939 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce":
[info]   2088959.451 ±(99.9%) 117859.960 ops/s [Average]
[info]   (min, avg, max) = (2042369.269, 2088959.451, 2126547.610), stdev = 30607.857
[info]   CI (99.9%): [1971099.490, 2206819.411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1911.213 ±(99.9%) 107.793 MB/sec [Average]
[info]   (min, avg, max) = (1868.685, 1911.213, 1945.606), stdev = 27.994
[info]   CI (99.9%): [1803.420, 2019.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1440.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1440.000, 1440.000, 1440.000), stdev = 0.001
[info]   CI (99.9%): [1440.000, 1440.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.117 ±(99.9%) 0.107 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.117, 0.146), stdev = 0.028
[info]   CI (99.9%): [0.009, 0.224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.088 ±(99.9%) 0.085 B/op [Average]
[info]   (min, avg, max) = (0.062, 0.088, 0.112), stdev = 0.022
[info]   CI (99.9%): [0.003, 0.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1938.279 ±(99.9%) 604.866 MB/sec [Average]
[info]   (min, avg, max) = (1659.779, 1938.279, 2029.293), stdev = 157.082
[info]   CI (99.9%): [1333.413, 2543.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1460.366 ±(99.9%) 447.172 B/op [Average]
[info]   (min, avg, max) = (1253.304, 1460.366, 1521.519), stdev = 116.129
[info]   CI (99.9%): [1013.194, 1907.539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala
[info] # Run progress: 4.41% complete, ETA 00:55:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_11ae7560/target/5e31e36e/jackson-module-afterburner-2.9.4.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 2068173.767 ops/s
[info] # Warmup Iteration   2: 6662285.778 ops/s
[info] # Warmup Iteration   3: 6686257.495 ops/s
[info] Iteration   1: 6722107.719 ops/s
[info]                  ·gc.alloc.rate:                   1844.319 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1650.851 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 386.683 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 6663840.714 ops/s
[info]                  ·gc.alloc.rate:                   1828.447 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.044 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2001.701 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 472.934 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 6615961.592 ops/s
[info]                  ·gc.alloc.rate:                   1815.455 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1679.180 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 399.572 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 6680190.206 ops/s
[info]                  ·gc.alloc.rate:                   1832.716 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2024.317 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 477.164 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 6721382.266 ops/s
[info]                  ·gc.alloc.rate:                   1844.550 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.029 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1692.876 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 396.478 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala":
[info]   6680696.499 ±(99.9%) 170531.829 ops/s [Average]
[info]   (min, avg, max) = (6615961.592, 6680696.499, 6722107.719), stdev = 44286.575
[info]   CI (99.9%): [6510164.670, 6851228.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1833.097 ±(99.9%) 46.771 MB/sec [Average]
[info]   (min, avg, max) = (1815.455, 1833.097, 1844.550), stdev = 12.146
[info]   CI (99.9%): [1786.326, 1879.868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   432.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (432.000, 432.000, 432.000), stdev = 0.001
[info]   CI (99.9%): [432.000, 432.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.112 ±(99.9%) 0.184 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.112, 0.187), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.026 ±(99.9%) 0.044 B/op [Average]
[info]   (min, avg, max) = (0.015, 0.026, 0.044), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1809.785 ±(99.9%) 717.402 MB/sec [Average]
[info]   (min, avg, max) = (1650.851, 1809.785, 2024.317), stdev = 186.307
[info]   CI (99.9%): [1092.383, 2527.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   426.566 ±(99.9%) 171.502 B/op [Average]
[info]   (min, avg, max) = (386.683, 426.566, 477.164), stdev = 44.538
[info]   CI (99.9%): [255.064, 598.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 7.000), stdev = 0.837
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala
[info] # Run progress: 4.78% complete, ETA 00:54:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16006952.763 ops/s
[info] # Warmup Iteration   2: 21687210.482 ops/s
[info] # Warmup Iteration   3: 22707916.563 ops/s
[info] Iteration   1: 22856335.022 ops/s
[info]                  ·gc.alloc.rate:                   696.854 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.614 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 45.159 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 22850388.254 ops/s
[info]                  ·gc.alloc.rate:                   696.476 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.109 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 45.011 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 22719476.442 ops/s
[info]                  ·gc.alloc.rate:                   692.688 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.631 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 45.224 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 22730113.383 ops/s
[info]                  ·gc.alloc.rate:                   693.061 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.317 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 45.247 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 22683455.772 ops/s
[info]                  ·gc.alloc.rate:                   691.583 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.915 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 45.455 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala":
[info]   22767953.775 ±(99.9%) 307621.312 ops/s [Average]
[info]   (min, avg, max) = (22683455.772, 22767953.775, 22856335.022), stdev = 79888.278
[info]   CI (99.9%): [22460332.462, 23075575.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   694.132 ±(99.9%) 9.160 MB/sec [Average]
[info]   (min, avg, max) = (691.583, 694.132, 696.854), stdev = 2.379
[info]   CI (99.9%): [684.972, 703.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.104), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.004 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.007), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   653.917 ±(99.9%) 4.925 MB/sec [Average]
[info]   (min, avg, max) = (652.631, 653.917, 655.614), stdev = 1.279
[info]   CI (99.9%): [648.992, 658.842] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   45.219 ±(99.9%) 0.619 B/op [Average]
[info]   (min, avg, max) = (45.011, 45.219, 45.455), stdev = 0.161
[info]   CI (99.9%): [44.601, 45.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 5.15% complete, ETA 00:54:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17100024.726 ops/s
[info] # Warmup Iteration   2: 22383723.217 ops/s
[info] # Warmup Iteration   3: 22692059.551 ops/s
[info] Iteration   1: 22637596.976 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 23037016.901 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 22718152.151 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 23062633.385 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 22441217.615 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc":
[info]   22779323.405 ±(99.9%) 1027505.769 ops/s [Average]
[info]   (min, avg, max) = (22441217.615, 22779323.405, 23062633.385), stdev = 266839.985
[info]   CI (99.9%): [21751817.636, 23806829.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson
[info] # Run progress: 5.51% complete, ETA 00:54:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 338818.209 ops/s
[info] # Warmup Iteration   2: 1195828.060 ops/s
[info] # Warmup Iteration   3: 1181985.235 ops/s
[info] Iteration   1: 1201458.347 ops/s
[info]                  ·gc.alloc.rate:                   1788.536 MB/sec
[info]                  ·gc.alloc.rate.norm:              2344.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.218 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1984.150 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2600.367 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 1196374.304 ops/s
[info]                  ·gc.alloc.rate:                   1781.455 MB/sec
[info]                  ·gc.alloc.rate.norm:              2344.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.137 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1669.030 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2196.073 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 1168064.171 ops/s
[info]                  ·gc.alloc.rate:                   1739.059 MB/sec
[info]                  ·gc.alloc.rate.norm:              2344.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.112 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1678.746 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2262.708 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 1201321.844 ops/s
[info]                  ·gc.alloc.rate:                   1788.726 MB/sec
[info]                  ·gc.alloc.rate.norm:              2344.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.109 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1687.179 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2210.930 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 1199805.108 ops/s
[info]                  ·gc.alloc.rate:                   1786.512 MB/sec
[info]                  ·gc.alloc.rate.norm:              2344.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.137 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030.903 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2664.654 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson":
[info]   1193404.755 ±(99.9%) 55114.963 ops/s [Average]
[info]   (min, avg, max) = (1168064.171, 1193404.755, 1201458.347), stdev = 14313.181
[info]   CI (99.9%): [1138289.792, 1248519.718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1776.858 ±(99.9%) 82.145 MB/sec [Average]
[info]   (min, avg, max) = (1739.059, 1776.858, 1788.726), stdev = 21.333
[info]   CI (99.9%): [1694.713, 1859.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2344.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2344.000, 2344.000, 2344.000), stdev = 0.001
[info]   CI (99.9%): [2344.000, 2344.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.108 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.108, 0.166), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.143 ±(99.9%) 0.170 B/op [Average]
[info]   (min, avg, max) = (0.109, 0.143, 0.218), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1810.001 ±(99.9%) 697.677 MB/sec [Average]
[info]   (min, avg, max) = (1669.030, 1810.001, 2030.903), stdev = 181.185
[info]   CI (99.9%): [1112.324, 2507.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2386.946 ±(99.9%) 872.830 B/op [Average]
[info]   (min, avg, max) = (2196.073, 2386.946, 2664.654), stdev = 226.671
[info]   CI (99.9%): [1514.117, 3259.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.600, 8.000), stdev = 1.140
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce
[info] # Run progress: 5.88% complete, ETA 00:54:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13235.834 ops/s
[info] # Warmup Iteration   2: 16275.722 ops/s
[info] # Warmup Iteration   3: 16448.892 ops/s
[info] Iteration   1: 16506.214 ops/s
[info]                  ·gc.alloc.rate:                   1198.737 MB/sec
[info]                  ·gc.alloc.rate.norm:              114329.078 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.923 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1306.117 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 124570.397 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 16556.867 ops/s
[info]                  ·gc.alloc.rate:                   1202.948 MB/sec
[info]                  ·gc.alloc.rate.norm:              114344.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15.830 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1312.984 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 124803.339 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 16581.956 ops/s
[info]                  ·gc.alloc.rate:                   1204.353 MB/sec
[info]                  ·gc.alloc.rate.norm:              114344.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.976 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      989.171 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 93914.123 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 16501.751 ops/s
[info]                  ·gc.alloc.rate:                   1198.612 MB/sec
[info]                  ·gc.alloc.rate.norm:              114343.058 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.911 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1327.193 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 126609.231 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 16591.302 ops/s
[info]                  ·gc.alloc.rate:                   1205.138 MB/sec
[info]                  ·gc.alloc.rate.norm:              114344.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.949 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1000.599 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 94937.357 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce":
[info]   16547.618 ±(99.9%) 160.981 ops/s [Average]
[info]   (min, avg, max) = (16501.751, 16547.618, 16591.302), stdev = 41.806
[info]   CI (99.9%): [16386.637, 16708.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate":
[info]   1201.957 ±(99.9%) 11.930 MB/sec [Average]
[info]   (min, avg, max) = (1198.612, 1201.957, 1205.138), stdev = 3.098
[info]   CI (99.9%): [1190.027, 1213.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   114340.842 ±(99.9%) 25.376 B/op [Average]
[info]   (min, avg, max) = (114329.078, 114340.842, 114344.027), stdev = 6.590
[info]   CI (99.9%): [114315.467, 114366.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.231 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.092, 0.167), stdev = 0.060
[info]   CI (99.9%): [≈ 0, 0.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   8.718 ±(99.9%) 21.988 B/op [Average]
[info]   (min, avg, max) = (1.976, 8.718, 15.830), stdev = 5.710
[info]   CI (99.9%): [≈ 0, 30.706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1187.213 ±(99.9%) 676.871 MB/sec [Average]
[info]   (min, avg, max) = (989.171, 1187.213, 1327.193), stdev = 175.781
[info]   CI (99.9%): [510.342, 1864.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   112966.889 ±(99.9%) 65260.416 B/op [Average]
[info]   (min, avg, max) = (93914.123, 112966.889, 126609.231), stdev = 16947.923
[info]   CI (99.9%): [47706.473, 178227.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala
[info] # Run progress: 6.25% complete, ETA 00:54:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11669.487 ops/s
[info] # Warmup Iteration   2: 18934.607 ops/s
[info] # Warmup Iteration   3: 19211.375 ops/s
[info] Iteration   1: 19096.698 ops/s
[info]                  ·gc.alloc.rate:                   675.446 MB/sec
[info]                  ·gc.alloc.rate.norm:              55677.670 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.147 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      649.319 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53523.983 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 19243.097 ops/s
[info]                  ·gc.alloc.rate:                   681.103 MB/sec
[info]                  ·gc.alloc.rate.norm:              55696.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.405 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.274 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53420.387 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 19128.764 ops/s
[info]                  ·gc.alloc.rate:                   676.758 MB/sec
[info]                  ·gc.alloc.rate.norm:              55696.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.713 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.937 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53982.510 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 19252.407 ops/s
[info]                  ·gc.alloc.rate:                   680.940 MB/sec
[info]                  ·gc.alloc.rate.norm:              55669.202 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658.755 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53855.508 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 19272.693 ops/s
[info]                  ·gc.alloc.rate:                   681.683 MB/sec
[info]                  ·gc.alloc.rate.norm:              55664.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.700 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      661.516 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54017.222 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala":
[info]   19198.732 ±(99.9%) 308.208 ops/s [Average]
[info]   (min, avg, max) = (19096.698, 19198.732, 19272.693), stdev = 80.041
[info]   CI (99.9%): [18890.524, 19506.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   679.186 ±(99.9%) 11.038 MB/sec [Average]
[info]   (min, avg, max) = (675.446, 679.186, 681.683), stdev = 2.866
[info]   CI (99.9%): [668.148, 690.224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   55680.588 ±(99.9%) 57.410 B/op [Average]
[info]   (min, avg, max) = (55664.021, 55680.588, 55696.027), stdev = 14.909
[info]   CI (99.9%): [55623.178, 55737.999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.062), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2.393 ±(99.9%) 7.525 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.393, 5.147), stdev = 1.954
[info]   CI (99.9%): [≈ 0, 9.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   655.760 ±(99.9%) 18.244 MB/sec [Average]
[info]   (min, avg, max) = (649.319, 655.760, 661.516), stdev = 4.738
[info]   CI (99.9%): [637.516, 674.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   53759.922 ±(99.9%) 1047.199 B/op [Average]
[info]   (min, avg, max) = (53420.387, 53759.922, 54017.222), stdev = 271.954
[info]   CI (99.9%): [52712.723, 54807.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala
[info] # Run progress: 6.62% complete, ETA 00:53:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18544.165 ops/s
[info] # Warmup Iteration   2: 20007.922 ops/s
[info] # Warmup Iteration   3: 20570.331 ops/s
[info] Iteration   1: 20791.666 ops/s
[info]                  ·gc.alloc.rate:                   385.699 MB/sec
[info]                  ·gc.alloc.rate.norm:              29200.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.011 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.809 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.476 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38722.237 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 20858.457 ops/s
[info]                  ·gc.alloc.rate:                   386.866 MB/sec
[info]                  ·gc.alloc.rate.norm:              29200.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.297 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     248.821 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.646 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24881.124 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 20874.533 ops/s
[info]                  ·gc.alloc.rate:                   387.146 MB/sec
[info]                  ·gc.alloc.rate.norm:              29200.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.615 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24860.864 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 20874.352 ops/s
[info]                  ·gc.alloc.rate:                   387.206 MB/sec
[info]                  ·gc.alloc.rate.norm:              29200.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.708 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.335 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24760.416 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 20910.221 ops/s
[info]                  ·gc.alloc.rate:                   387.867 MB/sec
[info]                  ·gc.alloc.rate.norm:              29200.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.329 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24717.795 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala":
[info]   20861.846 ±(99.9%) 167.782 ops/s [Average]
[info]   (min, avg, max) = (20791.666, 20861.846, 20910.221), stdev = 43.572
[info]   CI (99.9%): [20694.064, 21029.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   386.957 ±(99.9%) 3.055 MB/sec [Average]
[info]   (min, avg, max) = (385.699, 386.957, 387.867), stdev = 0.793
[info]   CI (99.9%): [383.901, 390.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   29200.021 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (29200.020, 29200.021, 29200.025), stdev = 0.002
[info]   CI (99.9%): [29200.013, 29200.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.674 ±(99.9%) 5.646 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.674, 3.297), stdev = 1.466
[info]   CI (99.9%): [≈ 0, 6.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   50.868 ±(99.9%) 426.175 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 50.868, 248.821), stdev = 110.676
[info]   CI (99.9%): [≈ 0, 477.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   365.480 ±(99.9%) 314.277 MB/sec [Average]
[info]   (min, avg, max) = (328.329, 365.480, 511.476), stdev = 81.617
[info]   CI (99.9%): [51.203, 679.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   27588.487 ±(99.9%) 23967.668 B/op [Average]
[info]   (min, avg, max) = (24717.795, 27588.487, 38722.237), stdev = 6224.327
[info]   CI (99.9%): [3620.820, 51556.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 5.000), stdev = 1.732
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson
[info] # Run progress: 6.99% complete, ETA 00:53:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8947.317 ops/s
[info] # Warmup Iteration   2: 17082.454 ops/s
[info] # Warmup Iteration   3: 16943.817 ops/s
[info] Iteration   1: 17125.856 ops/s
[info]                  ·gc.alloc.rate:                   966.143 MB/sec
[info]                  ·gc.alloc.rate.norm:              88808.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.913 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      962.164 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 88442.232 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 17112.926 ops/s
[info]                  ·gc.alloc.rate:                   965.342 MB/sec
[info]                  ·gc.alloc.rate.norm:              88808.099 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.829 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      971.587 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 89382.588 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 17175.787 ops/s
[info]                  ·gc.alloc.rate:                   968.903 MB/sec
[info]                  ·gc.alloc.rate.norm:              88808.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.815 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      978.198 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 89659.962 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 17154.393 ops/s
[info]                  ·gc.alloc.rate:                   967.647 MB/sec
[info]                  ·gc.alloc.rate.norm:              88808.030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      985.782 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 90472.450 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 17180.773 ops/s
[info]                  ·gc.alloc.rate:                   969.281 MB/sec
[info]                  ·gc.alloc.rate.norm:              88808.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.440 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      992.555 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 90940.447 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson":
[info]   17149.947 ±(99.9%) 115.337 ops/s [Average]
[info]   (min, avg, max) = (17112.926, 17149.947, 17180.773), stdev = 29.953
[info]   CI (99.9%): [17034.610, 17265.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   967.463 ±(99.9%) 6.573 MB/sec [Average]
[info]   (min, avg, max) = (965.342, 967.463, 969.281), stdev = 1.707
[info]   CI (99.9%): [960.891, 974.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   88808.040 ±(99.9%) 0.127 B/op [Average]
[info]   (min, avg, max) = (88808.024, 88808.040, 88808.099), stdev = 0.033
[info]   CI (99.9%): [88807.913, 88808.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.183 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.125), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4.199 ±(99.9%) 16.738 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.199, 11.440), stdev = 4.347
[info]   CI (99.9%): [≈ 0, 20.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   978.057 ±(99.9%) 45.738 MB/sec [Average]
[info]   (min, avg, max) = (962.164, 978.057, 992.555), stdev = 11.878
[info]   CI (99.9%): [932.319, 1023.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   89779.536 ±(99.9%) 3747.258 B/op [Average]
[info]   (min, avg, max) = (88442.232, 89779.536, 90940.447), stdev = 973.151
[info]   CI (99.9%): [86032.278, 93526.794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce
[info] # Run progress: 7.35% complete, ETA 00:53:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9712.835 ops/s
[info] # Warmup Iteration   2: 13423.438 ops/s
[info] # Warmup Iteration   3: 13504.453 ops/s
[info] Iteration   1: 13346.431 ops/s
[info]                  ·gc.alloc.rate:                   1587.224 MB/sec
[info]                  ·gc.alloc.rate.norm:              187256.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.455 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1636.784 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 193102.929 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 13511.420 ops/s
[info]                  ·gc.alloc.rate:                   1607.168 MB/sec
[info]                  ·gc.alloc.rate.norm:              187259.714 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.699 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1651.190 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 192388.944 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 13679.157 ops/s
[info]                  ·gc.alloc.rate:                   1627.297 MB/sec
[info]                  ·gc.alloc.rate.norm:              187280.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.790 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1664.481 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 191559.400 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 13589.216 ops/s
[info]                  ·gc.alloc.rate:                   1616.629 MB/sec
[info]                  ·gc.alloc.rate.norm:              187280.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.232 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1675.173 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 194062.164 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 13502.879 ops/s
[info]                  ·gc.alloc.rate:                   1606.329 MB/sec
[info]                  ·gc.alloc.rate.norm:              187280.038 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.705 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1683.756 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 196307.154 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce":
[info]   13525.821 ±(99.9%) 473.353 ops/s [Average]
[info]   (min, avg, max) = (13346.431, 13525.821, 13679.157), stdev = 122.928
[info]   CI (99.9%): [13052.467, 13999.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1608.929 ±(99.9%) 57.038 MB/sec [Average]
[info]   (min, avg, max) = (1587.224, 1608.929, 1627.297), stdev = 14.813
[info]   CI (99.9%): [1551.891, 1665.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   187271.169 ±(99.9%) 47.003 B/op [Average]
[info]   (min, avg, max) = (187256.033, 187271.169, 187280.038), stdev = 12.207
[info]   CI (99.9%): [187224.166, 187318.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.058, 0.083), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   6.776 ±(99.9%) 12.169 B/op [Average]
[info]   (min, avg, max) = (2.455, 6.776, 9.705), stdev = 3.160
[info]   CI (99.9%): [≈ 0, 18.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1662.277 ±(99.9%) 72.177 MB/sec [Average]
[info]   (min, avg, max) = (1636.784, 1662.277, 1683.756), stdev = 18.744
[info]   CI (99.9%): [1590.100, 1734.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   193484.118 ±(99.9%) 7035.443 B/op [Average]
[info]   (min, avg, max) = (191559.400, 193484.118, 196307.154), stdev = 1827.082
[info]   CI (99.9%): [186448.675, 200519.561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala
[info] # Run progress: 7.72% complete, ETA 00:53:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6685.799 ops/s
[info] # Warmup Iteration   2: 12979.296 ops/s
[info] # Warmup Iteration   3: 12964.479 ops/s
[info] Iteration   1: 13122.424 ops/s
[info]                  ·gc.alloc.rate:                   1450.603 MB/sec
[info]                  ·gc.alloc.rate.norm:              174063.887 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.482 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1316.842 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 158013.357 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 13037.801 ops/s
[info]                  ·gc.alloc.rate:                   1441.921 MB/sec
[info]                  ·gc.alloc.rate.norm:              174064.181 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.539 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1660.978 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 200507.995 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 13119.901 ops/s
[info]                  ·gc.alloc.rate:                   1450.907 MB/sec
[info]                  ·gc.alloc.rate.norm:              174063.882 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.066 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 160526.494 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 13135.490 ops/s
[info]                  ·gc.alloc.rate:                   1452.498 MB/sec
[info]                  ·gc.alloc.rate.norm:              174064.184 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.894 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 161049.271 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 13109.063 ops/s
[info]                  ·gc.alloc.rate:                   1449.506 MB/sec
[info]                  ·gc.alloc.rate.norm:              174064.031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.499 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.113 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 162008.311 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala":
[info]   13104.936 ±(99.9%) 148.979 ops/s [Average]
[info]   (min, avg, max) = (13037.801, 13104.936, 13135.490), stdev = 38.689
[info]   CI (99.9%): [12955.956, 13253.915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1449.087 ±(99.9%) 15.966 MB/sec [Average]
[info]   (min, avg, max) = (1441.921, 1449.087, 1452.498), stdev = 4.146
[info]   CI (99.9%): [1433.121, 1465.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   174064.033 ±(99.9%) 0.574 B/op [Average]
[info]   (min, avg, max) = (174063.882, 174064.033, 174064.184), stdev = 0.149
[info]   CI (99.9%): [174063.460, 174064.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.104), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   4.504 ±(99.9%) 20.866 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.504, 12.482), stdev = 5.419
[info]   CI (99.9%): [≈ 0, 25.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1401.779 ±(99.9%) 559.941 MB/sec [Average]
[info]   (min, avg, max) = (1316.842, 1401.779, 1660.978), stdev = 145.415
[info]   CI (99.9%): [841.837, 1961.720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   168421.086 ±(99.9%) 69303.100 B/op [Average]
[info]   (min, avg, max) = (158013.357, 168421.086, 200507.995), stdev = 17997.795
[info]   CI (99.9%): [99117.986, 237724.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala
[info] # Run progress: 8.09% complete, ETA 00:53:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11892.951 ops/s
[info] # Warmup Iteration   2: 14618.329 ops/s
[info] # Warmup Iteration   3: 14862.188 ops/s
[info] Iteration   1: 14832.758 ops/s
[info]                  ·gc.alloc.rate:                   1565.678 MB/sec
[info]                  ·gc.alloc.rate.norm:              166168.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.417 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1637.891 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 173832.075 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 14710.255 ops/s
[info]                  ·gc.alloc.rate:                   1552.553 MB/sec
[info]                  ·gc.alloc.rate.norm:              166168.046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.271 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28.953 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1650.389 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 176639.408 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 14750.231 ops/s
[info]                  ·gc.alloc.rate:                   1556.986 MB/sec
[info]                  ·gc.alloc.rate.norm:              166168.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.442 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1663.935 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 177581.993 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 14767.285 ops/s
[info]                  ·gc.alloc.rate:                   1558.736 MB/sec
[info]                  ·gc.alloc.rate.norm:              166168.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.656 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.902 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 142732.705 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 14858.529 ops/s
[info]                  ·gc.alloc.rate:                   1568.184 MB/sec
[info]                  ·gc.alloc.rate.norm:              166168.037 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.820 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1682.034 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 178231.813 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala":
[info]   14783.811 ±(99.9%) 234.146 ops/s [Average]
[info]   (min, avg, max) = (14710.255, 14783.811, 14858.529), stdev = 60.807
[info]   CI (99.9%): [14549.666, 15017.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1560.428 ±(99.9%) 24.690 MB/sec [Average]
[info]   (min, avg, max) = (1552.553, 1560.428, 1568.184), stdev = 6.412
[info]   CI (99.9%): [1535.737, 1585.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   166168.033 ±(99.9%) 0.031 B/op [Average]
[info]   (min, avg, max) = (166168.028, 166168.033, 166168.046), stdev = 0.008
[info]   CI (99.9%): [166168.002, 166168.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.100 ±(99.9%) 0.373 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.100, 0.271), stdev = 0.097
[info]   CI (99.9%): [≈ 0, 0.473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   10.658 ±(99.9%) 40.002 B/op [Average]
[info]   (min, avg, max) = (4.417, 10.658, 28.953), stdev = 10.388
[info]   CI (99.9%): [≈ 0, 50.660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1594.630 ±(99.9%) 554.079 MB/sec [Average]
[info]   (min, avg, max) = (1338.902, 1594.630, 1682.034), stdev = 143.893
[info]   CI (99.9%): [1040.551, 2148.709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   169803.599 ±(99.9%) 58630.035 B/op [Average]
[info]   (min, avg, max) = (142732.705, 169803.599, 178231.813), stdev = 15226.034
[info]   CI (99.9%): [111173.564, 228433.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 8.46% complete, ETA 00:52:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12199.497 ops/s
[info] # Warmup Iteration   2: 14219.487 ops/s
[info] # Warmup Iteration   3: 14403.888 ops/s
[info] Iteration   1: 14365.396 ops/s
[info]                  ·gc.alloc.rate:                   1489.127 MB/sec
[info]                  ·gc.alloc.rate.norm:              163136.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.833 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1636.397 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 179269.614 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 14361.784 ops/s
[info]                  ·gc.alloc.rate:                   1488.141 MB/sec
[info]                  ·gc.alloc.rate.norm:              163137.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.124 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1319.411 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 144639.982 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 14594.288 ops/s
[info]                  ·gc.alloc.rate:                   1512.302 MB/sec
[info]                  ·gc.alloc.rate.norm:              163136.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.979 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1660.702 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 179144.304 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 14452.370 ops/s
[info]                  ·gc.alloc.rate:                   1498.067 MB/sec
[info]                  ·gc.alloc.rate.norm:              163136.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.334 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1337.509 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 145651.675 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 14556.121 ops/s
[info]                  ·gc.alloc.rate:                   1508.673 MB/sec
[info]                  ·gc.alloc.rate.norm:              163136.035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.253 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1681.020 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 181772.378 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc":
[info]   14465.992 ±(99.9%) 411.801 ops/s [Average]
[info]   (min, avg, max) = (14361.784, 14465.992, 14594.288), stdev = 106.943
[info]   CI (99.9%): [14054.191, 14877.793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1499.262 ±(99.9%) 42.463 MB/sec [Average]
[info]   (min, avg, max) = (1488.141, 1499.262, 1512.302), stdev = 11.027
[info]   CI (99.9%): [1456.799, 1541.725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   163136.225 ±(99.9%) 1.680 B/op [Average]
[info]   (min, avg, max) = (163136.028, 163136.225, 163137.005), stdev = 0.436
[info]   CI (99.9%): [163134.545, 163137.905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.104), stdev = 0.017
[info]   CI (99.9%): [0.020, 0.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   9.505 ±(99.9%) 7.193 B/op [Average]
[info]   (min, avg, max) = (6.833, 9.505, 11.334), stdev = 1.868
[info]   CI (99.9%): [2.311, 16.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   1527.008 ±(99.9%) 701.003 MB/sec [Average]
[info]   (min, avg, max) = (1319.411, 1527.008, 1681.020), stdev = 182.048
[info]   CI (99.9%): [826.005, 2228.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   166095.591 ±(99.9%) 73764.769 B/op [Average]
[info]   (min, avg, max) = (144639.982, 166095.591, 181772.378), stdev = 19156.476
[info]   CI (99.9%): [92330.822, 239860.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 5.000), stdev = 0.894
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson
[info] # Run progress: 8.82% complete, ETA 00:52:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2834.337 ops/s
[info] # Warmup Iteration   2: 4292.736 ops/s
[info] # Warmup Iteration   3: 4406.414 ops/s
[info] Iteration   1: 4444.976 ops/s
[info]                  ·gc.alloc.rate:                   1084.193 MB/sec
[info]                  ·gc.alloc.rate.norm:              383968.471 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14.737 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      969.405 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 343316.091 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 4453.903 ops/s
[info]                  ·gc.alloc.rate:                   1086.307 MB/sec
[info]                  ·gc.alloc.rate.norm:              383968.099 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29.421 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      972.215 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 343641.068 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 4387.902 ops/s
[info]                  ·gc.alloc.rate:                   1070.403 MB/sec
[info]                  ·gc.alloc.rate.norm:              383968.153 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22.393 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1303.768 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 467679.227 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 4451.351 ops/s
[info]                  ·gc.alloc.rate:                   1085.669 MB/sec
[info]                  ·gc.alloc.rate.norm:              383967.653 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.359 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      985.066 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 348387.198 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 4454.682 ops/s
[info]                  ·gc.alloc.rate:                   1086.753 MB/sec
[info]                  ·gc.alloc.rate.norm:              383968.478 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22.061 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      990.711 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 350035.189 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson":
[info]   4438.563 ±(99.9%) 110.035 ops/s [Average]
[info]   (min, avg, max) = (4387.902, 4438.563, 4454.682), stdev = 28.576
[info]   CI (99.9%): [4328.528, 4548.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1082.665 ±(99.9%) 26.656 MB/sec [Average]
[info]   (min, avg, max) = (1070.403, 1082.665, 1086.753), stdev = 6.922
[info]   CI (99.9%): [1056.009, 1109.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   383968.171 ±(99.9%) 1.303 B/op [Average]
[info]   (min, avg, max) = (383967.653, 383968.171, 383968.478), stdev = 0.338
[info]   CI (99.9%): [383966.868, 383969.473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.054, 0.083), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   19.194 ±(99.9%) 32.388 B/op [Average]
[info]   (min, avg, max) = (7.359, 19.194, 29.421), stdev = 8.411
[info]   CI (99.9%): [≈ 0, 51.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1044.233 ±(99.9%) 559.702 MB/sec [Average]
[info]   (min, avg, max) = (969.405, 1044.233, 1303.768), stdev = 145.353
[info]   CI (99.9%): [484.531, 1603.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   370611.755 ±(99.9%) 209248.854 B/op [Average]
[info]   (min, avg, max) = (343316.091, 370611.755, 467679.227), stdev = 54341.263
[info]   CI (99.9%): [161362.900, 579860.609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce
[info] # Run progress: 9.19% complete, ETA 00:52:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6432.025 ops/s
[info] # Warmup Iteration   2: 8337.141 ops/s
[info] # Warmup Iteration   3: 8485.244 ops/s
[info] Iteration   1: 8445.163 ops/s
[info]                  ·gc.alloc.rate:                   1247.313 MB/sec
[info]                  ·gc.alloc.rate.norm:              232520.048 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27.152 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1311.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 244394.667 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 8458.653 ops/s
[info]                  ·gc.alloc.rate:                   1249.260 MB/sec
[info]                  ·gc.alloc.rate.norm:              232520.048 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23.237 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1316.700 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 245072.573 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 8476.422 ops/s
[info]                  ·gc.alloc.rate:                   1252.198 MB/sec
[info]                  ·gc.alloc.rate.norm:              232520.048 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.595 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1324.810 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 246003.499 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 8330.303 ops/s
[info]                  ·gc.alloc.rate:                   1230.501 MB/sec
[info]                  ·gc.alloc.rate.norm:              232520.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.865 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1331.834 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 251668.307 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 8443.777 ops/s
[info]                  ·gc.alloc.rate:                   1247.187 MB/sec
[info]                  ·gc.alloc.rate.norm:              232527.622 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15.519 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1003.171 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 187032.885 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce":
[info]   8430.864 ±(99.9%) 222.301 ops/s [Average]
[info]   (min, avg, max) = (8330.303, 8430.864, 8476.422), stdev = 57.731
[info]   CI (99.9%): [8208.563, 8653.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1245.292 ±(99.9%) 32.780 MB/sec [Average]
[info]   (min, avg, max) = (1230.501, 1245.292, 1252.198), stdev = 8.513
[info]   CI (99.9%): [1212.512, 1278.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   232521.564 ±(99.9%) 13.041 B/op [Average]
[info]   (min, avg, max) = (232520.048, 232521.564, 232527.622), stdev = 3.387
[info]   CI (99.9%): [232508.523, 232534.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.092, 0.146), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   17.073 ±(99.9%) 30.852 B/op [Average]
[info]   (min, avg, max) = (7.865, 17.073, 27.152), stdev = 8.012
[info]   CI (99.9%): [≈ 0, 47.926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1257.506 ±(99.9%) 548.320 MB/sec [Average]
[info]   (min, avg, max) = (1003.171, 1257.506, 1331.834), stdev = 142.397
[info]   CI (99.9%): [709.186, 1805.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   234834.386 ±(99.9%) 103490.899 B/op [Average]
[info]   (min, avg, max) = (187032.885, 234834.386, 251668.307), stdev = 26876.258
[info]   CI (99.9%): [131343.487, 338325.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala
[info] # Run progress: 9.56% complete, ETA 00:52:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15698.354 ops/s
[info] # Warmup Iteration   2: 24596.712 ops/s
[info] # Warmup Iteration   3: 24567.617 ops/s
[info] Iteration   1: 24546.436 ops/s
[info]                  ·gc.alloc.rate:                   908.078 MB/sec
[info]                  ·gc.alloc.rate.norm:              58248.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.339 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      980.416 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62888.081 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 24508.096 ops/s
[info]                  ·gc.alloc.rate:                   906.730 MB/sec
[info]                  ·gc.alloc.rate.norm:              58242.431 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.684 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      987.645 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63439.875 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 24469.769 ops/s
[info]                  ·gc.alloc.rate:                   904.878 MB/sec
[info]                  ·gc.alloc.rate.norm:              58216.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.678 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      661.568 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 42562.521 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 24474.910 ops/s
[info]                  ·gc.alloc.rate:                   905.005 MB/sec
[info]                  ·gc.alloc.rate.norm:              58216.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.339 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      996.451 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 64098.443 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 24200.205 ops/s
[info]                  ·gc.alloc.rate:                   894.955 MB/sec
[info]                  ·gc.alloc.rate.norm:              58216.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.707 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1001.908 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65173.205 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala":
[info]   24439.883 ±(99.9%) 529.278 ops/s [Average]
[info]   (min, avg, max) = (24200.205, 24439.883, 24546.436), stdev = 137.452
[info]   CI (99.9%): [23910.605, 24969.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   903.929 ±(99.9%) 19.976 MB/sec [Average]
[info]   (min, avg, max) = (894.955, 903.929, 908.078), stdev = 5.188
[info]   CI (99.9%): [883.954, 923.905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   58227.700 ±(99.9%) 62.068 B/op [Average]
[info]   (min, avg, max) = (58216.017, 58227.700, 58248.018), stdev = 16.119
[info]   CI (99.9%): [58165.632, 58289.768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.058, 0.104), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3.749 ±(99.9%) 8.433 B/op [Average]
[info]   (min, avg, max) = (1.339, 3.749, 6.684), stdev = 2.190
[info]   CI (99.9%): [≈ 0, 12.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   925.598 ±(99.9%) 569.225 MB/sec [Average]
[info]   (min, avg, max) = (661.568, 925.598, 1001.908), stdev = 147.826
[info]   CI (99.9%): [356.373, 1494.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   59632.425 ±(99.9%) 36890.051 B/op [Average]
[info]   (min, avg, max) = (42562.521, 59632.425, 65173.205), stdev = 9580.229
[info]   CI (99.9%): [22742.374, 96522.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala
[info] # Run progress: 9.93% complete, ETA 00:52:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25312.341 ops/s
[info] # Warmup Iteration   2: 28112.417 ops/s
[info] # Warmup Iteration   3: 28008.689 ops/s
[info] Iteration   1: 28101.177 ops/s
[info]                  ·gc.alloc.rate:                   509.937 MB/sec
[info]                  ·gc.alloc.rate.norm:              28568.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.658 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     148.906 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      586.862 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 32877.561 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 27831.892 ops/s
[info]                  ·gc.alloc.rate:                   505.018 MB/sec
[info]                  ·gc.alloc.rate.norm:              28568.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.886 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      661.588 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37424.927 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 28232.168 ops/s
[info]                  ·gc.alloc.rate:                   512.292 MB/sec
[info]                  ·gc.alloc.rate.norm:              28568.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.294 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18418.872 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 28141.294 ops/s
[info]                  ·gc.alloc.rate:                   510.727 MB/sec
[info]                  ·gc.alloc.rate.norm:              28568.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      659.367 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36882.336 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 28222.577 ops/s
[info]                  ·gc.alloc.rate:                   512.164 MB/sec
[info]                  ·gc.alloc.rate.norm:              28568.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.972 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18405.519 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala":
[info]   28105.822 ±(99.9%) 626.581 ops/s [Average]
[info]   (min, avg, max) = (27831.892, 28105.822, 28232.168), stdev = 162.721
[info]   CI (99.9%): [27479.241, 28732.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   510.028 ±(99.9%) 11.437 MB/sec [Average]
[info]   (min, avg, max) = (505.018, 510.028, 512.292), stdev = 2.970
[info]   CI (99.9%): [498.591, 521.464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   28568.016 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (28568.014, 28568.016, 28568.019), stdev = 0.002
[info]   CI (99.9%): [28568.008, 28568.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.552 ±(99.9%) 4.536 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.552, 2.658), stdev = 1.178
[info]   CI (99.9%): [≈ 0, 5.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   30.958 ±(99.9%) 254.080 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 30.958, 148.906), stdev = 65.984
[info]   CI (99.9%): [≈ 0, 285.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   513.617 ±(99.9%) 655.278 MB/sec [Average]
[info]   (min, avg, max) = (329.972, 513.617, 661.588), stdev = 170.174
[info]   CI (99.9%): [≈ 0, 1168.895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   28801.843 ±(99.9%) 37141.903 B/op [Average]
[info]   (min, avg, max) = (18405.519, 28801.843, 37424.927), stdev = 9645.634
[info]   CI (99.9%): [≈ 0, 65943.746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 5.000), stdev = 1.643
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala
[info] # Run progress: 10.29% complete, ETA 00:51:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8293.028 ops/s
[info] # Warmup Iteration   2: 15431.169 ops/s
[info] # Warmup Iteration   3: 15204.277 ops/s
[info] Iteration   1: 15452.761 ops/s
[info]                  ·gc.alloc.rate:                   1541.885 MB/sec
[info]                  ·gc.alloc.rate.norm:              157088.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.480 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1322.485 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 134735.503 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 15402.740 ops/s
[info]                  ·gc.alloc.rate:                   1536.850 MB/sec
[info]                  ·gc.alloc.rate.norm:              157088.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.761 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1664.602 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 170146.038 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 15453.254 ops/s
[info]                  ·gc.alloc.rate:                   1542.503 MB/sec
[info]                  ·gc.alloc.rate.norm:              157088.043 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.236 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1675.018 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 170583.363 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 15440.714 ops/s
[info]                  ·gc.alloc.rate:                   1540.913 MB/sec
[info]                  ·gc.alloc.rate.norm:              157088.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.365 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.321 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 137352.321 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 15369.372 ops/s
[info]                  ·gc.alloc.rate:                   1533.673 MB/sec
[info]                  ·gc.alloc.rate.norm:              157087.908 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.789 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1689.475 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 173046.075 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala":
[info]   15423.768 ±(99.9%) 141.460 ops/s [Average]
[info]   (min, avg, max) = (15369.372, 15423.768, 15453.254), stdev = 36.737
[info]   CI (99.9%): [15282.308, 15565.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1539.165 ±(99.9%) 14.550 MB/sec [Average]
[info]   (min, avg, max) = (1533.673, 1539.165, 1542.503), stdev = 3.779
[info]   CI (99.9%): [1524.614, 1553.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   157088.004 ±(99.9%) 0.210 B/op [Average]
[info]   (min, avg, max) = (157087.908, 157088.004, 157088.043), stdev = 0.055
[info]   CI (99.9%): [157087.794, 157088.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.087, 0.125), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   8.926 ±(99.9%) 14.711 B/op [Average]
[info]   (min, avg, max) = (4.236, 8.926, 12.789), stdev = 3.821
[info]   CI (99.9%): [≈ 0, 23.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1539.780 ±(99.9%) 721.767 MB/sec [Average]
[info]   (min, avg, max) = (1322.485, 1539.780, 1689.475), stdev = 187.441
[info]   CI (99.9%): [818.013, 2261.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   157172.660 ±(99.9%) 74477.681 B/op [Average]
[info]   (min, avg, max) = (134735.503, 157172.660, 173046.075), stdev = 19341.617
[info]   CI (99.9%): [82694.979, 231650.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala
[info] # Run progress: 10.66% complete, ETA 00:51:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15227.070 ops/s
[info] # Warmup Iteration   2: 18055.264 ops/s
[info] # Warmup Iteration   3: 18090.205 ops/s
[info] Iteration   1: 18075.914 ops/s
[info]                  ·gc.alloc.rate:                   1579.121 MB/sec
[info]                  ·gc.alloc.rate.norm:              137528.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.874 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1640.084 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 142837.381 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 18249.502 ops/s
[info]                  ·gc.alloc.rate:                   1594.380 MB/sec
[info]                  ·gc.alloc.rate.norm:              137528.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.976 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1321.985 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 114031.850 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 18128.608 ops/s
[info]                  ·gc.alloc.rate:                   1583.586 MB/sec
[info]                  ·gc.alloc.rate.norm:              137528.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.228 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1663.643 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 144480.623 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 18039.523 ops/s
[info]                  ·gc.alloc.rate:                   1575.986 MB/sec
[info]                  ·gc.alloc.rate.norm:              137528.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.896 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1674.479 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 146123.052 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 17936.015 ops/s
[info]                  ·gc.alloc.rate:                   1567.028 MB/sec
[info]                  ·gc.alloc.rate.norm:              137528.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.954 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1683.093 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 147714.325 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala":
[info]   18085.912 ±(99.9%) 444.518 ops/s [Average]
[info]   (min, avg, max) = (17936.015, 18085.912, 18249.502), stdev = 115.440
[info]   CI (99.9%): [17641.394, 18530.430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1580.020 ±(99.9%) 38.737 MB/sec [Average]
[info]   (min, avg, max) = (1567.028, 1580.020, 1594.380), stdev = 10.060
[info]   CI (99.9%): [1541.283, 1618.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   137528.024 ±(99.9%) 0.012 B/op [Average]
[info]   (min, avg, max) = (137528.022, 137528.024, 137528.030), stdev = 0.003
[info]   CI (99.9%): [137528.012, 137528.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.112 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.112, 0.125), stdev = 0.019
[info]   CI (99.9%): [0.041, 0.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   9.786 ±(99.9%) 6.379 B/op [Average]
[info]   (min, avg, max) = (7.228, 9.786, 10.954), stdev = 1.657
[info]   CI (99.9%): [3.407, 16.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1596.657 ±(99.9%) 594.500 MB/sec [Average]
[info]   (min, avg, max) = (1321.985, 1596.657, 1683.093), stdev = 154.390
[info]   CI (99.9%): [1002.157, 2191.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   139037.446 ±(99.9%) 54280.476 B/op [Average]
[info]   (min, avg, max) = (114031.850, 139037.446, 147714.325), stdev = 14096.467
[info]   CI (99.9%): [84756.970, 193317.922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 11.03% complete, ETA 00:51:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15255.903 ops/s
[info] # Warmup Iteration   2: 17548.393 ops/s
[info] # Warmup Iteration   3: 17387.724 ops/s
[info] Iteration   1: 17463.757 ops/s
[info]                  ·gc.alloc.rate:                   1524.603 MB/sec
[info]                  ·gc.alloc.rate.norm:              137440.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.379 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1638.320 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 147691.410 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 17663.912 ops/s
[info]                  ·gc.alloc.rate:                   1542.565 MB/sec
[info]                  ·gc.alloc.rate.norm:              137440.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.129 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1651.129 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 147112.850 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 17652.229 ops/s
[info]                  ·gc.alloc.rate:                   1540.834 MB/sec
[info]                  ·gc.alloc.rate.norm:              137440.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.135 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1330.288 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 118659.654 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 17515.765 ops/s
[info]                  ·gc.alloc.rate:                   1529.709 MB/sec
[info]                  ·gc.alloc.rate.norm:              137440.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.611 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1674.090 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 150412.209 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 17459.553 ops/s
[info]                  ·gc.alloc.rate:                   1524.823 MB/sec
[info]                  ·gc.alloc.rate.norm:              137440.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.505 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.516 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 121278.186 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   17551.043 ±(99.9%) 386.083 ops/s [Average]
[info]   (min, avg, max) = (17459.553, 17551.043, 17663.912), stdev = 100.265
[info]   CI (99.9%): [17164.960, 17937.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1532.507 ±(99.9%) 33.339 MB/sec [Average]
[info]   (min, avg, max) = (1524.603, 1532.507, 1542.565), stdev = 8.658
[info]   CI (99.9%): [1499.168, 1565.846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   137440.025 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (137440.023, 137440.025, 137440.029), stdev = 0.003
[info]   CI (99.9%): [137440.015, 137440.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   0.100 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.100, 0.125), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   8.952 ±(99.9%) 9.222 B/op [Average]
[info]   (min, avg, max) = (5.611, 8.952, 11.135), stdev = 2.395
[info]   CI (99.9%): [≈ 0, 18.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   1527.869 ±(99.9%) 669.901 MB/sec [Average]
[info]   (min, avg, max) = (1330.288, 1527.869, 1674.090), stdev = 173.971
[info]   CI (99.9%): [857.968, 2197.769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   137030.862 ±(99.9%) 60272.182 B/op [Average]
[info]   (min, avg, max) = (118659.654, 137030.862, 150412.209), stdev = 15652.494
[info]   CI (99.9%): [76758.680, 197303.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 0.837
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce
[info] # Run progress: 11.40% complete, ETA 00:51:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 310411.125 ops/s
[info] # Warmup Iteration   2: 369174.568 ops/s
[info] # Warmup Iteration   3: 374285.900 ops/s
[info] Iteration   1: 369567.500 ops/s
[info]                  ·gc.alloc.rate:                   1868.536 MB/sec
[info]                  ·gc.alloc.rate.norm:              7960.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.443 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1978.449 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8428.233 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 371684.632 ops/s
[info]                  ·gc.alloc.rate:                   1879.162 MB/sec
[info]                  ·gc.alloc.rate.norm:              7960.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.529 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1997.358 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8460.671 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 371561.865 ops/s
[info]                  ·gc.alloc.rate:                   1878.630 MB/sec
[info]                  ·gc.alloc.rate.norm:              7960.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.265 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1676.048 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7101.635 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 367297.881 ops/s
[info]                  ·gc.alloc.rate:                   1857.275 MB/sec
[info]                  ·gc.alloc.rate.norm:              7960.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.357 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2021.835 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8665.280 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 368630.328 ops/s
[info]                  ·gc.alloc.rate:                   1863.943 MB/sec
[info]                  ·gc.alloc.rate.norm:              7960.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.444 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1691.116 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7221.939 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce":
[info]   369748.441 ±(99.9%) 7287.160 ops/s [Average]
[info]   (min, avg, max) = (367297.881, 369748.441, 371684.632), stdev = 1892.452
[info]   CI (99.9%): [362461.282, 377035.601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1869.509 ±(99.9%) 36.427 MB/sec [Average]
[info]   (min, avg, max) = (1857.275, 1869.509, 1879.162), stdev = 9.460
[info]   CI (99.9%): [1833.082, 1905.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   7960.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7960.001, 7960.001, 7960.001), stdev = 0.001
[info]   CI (99.9%): [7960.001, 7960.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.096 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.125), stdev = 0.024
[info]   CI (99.9%): [0.004, 0.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.408 ±(99.9%) 0.387 B/op [Average]
[info]   (min, avg, max) = (0.265, 0.408, 0.529), stdev = 0.100
[info]   CI (99.9%): [0.021, 0.794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1872.961 ±(99.9%) 668.639 MB/sec [Average]
[info]   (min, avg, max) = (1676.048, 1872.961, 2021.835), stdev = 173.643
[info]   CI (99.9%): [1204.322, 2541.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   7975.552 ±(99.9%) 2886.475 B/op [Average]
[info]   (min, avg, max) = (7101.635, 7975.552, 8665.280), stdev = 749.608
[info]   CI (99.9%): [5089.077, 10862.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 8.000), stdev = 1.517
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala
[info] # Run progress: 11.76% complete, ETA 00:51:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 433070.841 ops/s
[info] # Warmup Iteration   2: 697756.819 ops/s
[info] # Warmup Iteration   3: 700704.188 ops/s
[info] Iteration   1: 698835.299 ops/s
[info]                  ·gc.alloc.rate:                   578.813 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.281 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      647.245 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1458.170 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 698932.929 ops/s
[info]                  ·gc.alloc.rate:                   578.941 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.141 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      651.326 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1467.041 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 697587.542 ops/s
[info]                  ·gc.alloc.rate:                   577.831 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.047 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.586 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1477.215 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 699913.604 ops/s
[info]                  ·gc.alloc.rate:                   579.776 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.047 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.649 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 739.180 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 706197.459 ops/s
[info]                  ·gc.alloc.rate:                   584.960 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.186 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658.599 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1468.157 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala":
[info]   700293.366 ±(99.9%) 13100.789 ops/s [Average]
[info]   (min, avg, max) = (697587.542, 700293.366, 706197.459), stdev = 3402.233
[info]   CI (99.9%): [687192.578, 713394.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   580.064 ±(99.9%) 10.869 MB/sec [Average]
[info]   (min, avg, max) = (577.831, 580.064, 584.960), stdev = 2.823
[info]   CI (99.9%): [569.195, 590.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1304.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1304.001, 1304.001, 1304.001), stdev = 0.001
[info]   CI (99.9%): [1304.000, 1304.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.170 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.125), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.140 ±(99.9%) 0.382 B/op [Average]
[info]   (min, avg, max) = (0.047, 0.140, 0.281), stdev = 0.099
[info]   CI (99.9%): [≈ 0, 0.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   588.081 ±(99.9%) 558.679 MB/sec [Average]
[info]   (min, avg, max) = (328.649, 588.081, 658.599), stdev = 145.087
[info]   CI (99.9%): [29.402, 1146.760] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1321.953 ±(99.9%) 1254.732 B/op [Average]
[info]   (min, avg, max) = (739.180, 1321.953, 1477.215), stdev = 325.850
[info]   CI (99.9%): [67.221, 2576.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala
[info] # Run progress: 12.13% complete, ETA 00:50:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1697683.938 ops/s
[info] # Warmup Iteration   2: 1797277.273 ops/s
[info] # Warmup Iteration   3: 1785462.084 ops/s
[info] Iteration   1: 1803033.989 ops/s
[info]                  ·gc.alloc.rate:                   348.190 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.017 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.679 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 223.231 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1750959.056 ops/s
[info]                  ·gc.alloc.rate:                   338.089 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.723 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 229.939 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1769632.909 ops/s
[info]                  ·gc.alloc.rate:                   341.713 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.269 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.909 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.978 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 293.560 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1809317.145 ops/s
[info]                  ·gc.alloc.rate:                   349.493 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.079 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 287.113 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1806546.155 ops/s
[info]                  ·gc.alloc.rate:                   348.895 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.343 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 286.093 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala":
[info]   1787897.851 ±(99.9%) 100665.634 ops/s [Average]
[info]   (min, avg, max) = (1750959.056, 1787897.851, 1809317.145), stdev = 26142.546
[info]   CI (99.9%): [1687232.216, 1888563.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   345.276 ±(99.9%) 19.609 MB/sec [Average]
[info]   (min, avg, max) = (338.089, 345.276, 349.493), stdev = 5.092
[info]   CI (99.9%): [325.667, 364.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   304.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (304.000, 304.000, 304.000), stdev = 0.001
[info]   CI (99.9%): [304.000, 304.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.661 ±(99.9%) 5.614 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.661, 3.269), stdev = 1.458
[info]   CI (99.9%): [≈ 0, 6.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.588 ±(99.9%) 4.995 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.588, 2.909), stdev = 1.297
[info]   CI (99.9%): [≈ 0, 5.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   299.960 ±(99.9%) 155.600 MB/sec [Average]
[info]   (min, avg, max) = (255.679, 299.960, 330.079), stdev = 40.409
[info]   CI (99.9%): [144.360, 455.561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   263.987 ±(99.9%) 132.252 B/op [Average]
[info]   (min, avg, max) = (223.231, 263.987, 293.560), stdev = 34.345
[info]   CI (99.9%): [131.735, 396.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 1.000
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson
[info] # Run progress: 12.50% complete, ETA 00:50:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 63257.165 ops/s
[info] # Warmup Iteration   2: 102699.705 ops/s
[info] # Warmup Iteration   3: 104962.989 ops/s
[info] Iteration   1: 105445.179 ops/s
[info]                  ·gc.alloc.rate:                   3828.107 MB/sec
[info]                  ·gc.alloc.rate.norm:              57176.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.864 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3717.967 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55530.978 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 105501.644 ops/s
[info]                  ·gc.alloc.rate:                   3831.924 MB/sec
[info]                  ·gc.alloc.rate.norm:              57176.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.174 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3734.351 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55720.134 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 104647.191 ops/s
[info]                  ·gc.alloc.rate:                   3800.255 MB/sec
[info]                  ·gc.alloc.rate.norm:              57176.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.878 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3741.520 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 56292.323 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   4: 104137.657 ops/s
[info]                  ·gc.alloc.rate:                   3781.820 MB/sec
[info]                  ·gc.alloc.rate.norm:              57176.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.258 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3742.933 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 56588.090 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   5: 105209.601 ops/s
[info]                  ·gc.alloc.rate:                   3821.094 MB/sec
[info]                  ·gc.alloc.rate.norm:              57176.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.491 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4083.420 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61101.252 B/op
[info]                  ·gc.count:                        12.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson":
[info]   104988.254 ±(99.9%) 2246.269 ops/s [Average]
[info]   (min, avg, max) = (104137.657, 104988.254, 105501.644), stdev = 583.349
[info]   CI (99.9%): [102741.985, 107234.524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3812.640 ±(99.9%) 81.362 MB/sec [Average]
[info]   (min, avg, max) = (3781.820, 3812.640, 3831.924), stdev = 21.129
[info]   CI (99.9%): [3731.278, 3894.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   57176.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (57176.004, 57176.004, 57176.004), stdev = 0.001
[info]   CI (99.9%): [57176.003, 57176.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.129 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.129, 0.166), stdev = 0.031
[info]   CI (99.9%): [0.010, 0.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.933 ±(99.9%) 1.756 B/op [Average]
[info]   (min, avg, max) = (1.258, 1.933, 2.491), stdev = 0.456
[info]   CI (99.9%): [0.177, 3.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   3804.038 ±(99.9%) 602.601 MB/sec [Average]
[info]   (min, avg, max) = (3717.967, 3804.038, 4083.420), stdev = 156.494
[info]   CI (99.9%): [3201.438, 4406.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   57046.555 ±(99.9%) 8880.721 B/op [Average]
[info]   (min, avg, max) = (55530.978, 57046.555, 61101.252), stdev = 2306.295
[info]   CI (99.9%): [48165.834, 65927.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   56.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (11.000, 11.200, 12.000), stdev = 0.447
[info]   CI (99.9%): [56.000, 56.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   63.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (11.000, 12.600, 19.000), stdev = 3.578
[info]   CI (99.9%): [63.000, 63.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce
[info] # Run progress: 12.87% complete, ETA 00:50:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 244715.015 ops/s
[info] # Warmup Iteration   2: 309007.799 ops/s
[info] # Warmup Iteration   3: 315501.227 ops/s
[info] Iteration   1: 316109.774 ops/s
[info]                  ·gc.alloc.rate:                   774.254 MB/sec
[info]                  ·gc.alloc.rate.norm:              3856.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.415 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.576 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3250.010 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 319427.819 ops/s
[info]                  ·gc.alloc.rate:                   782.317 MB/sec
[info]                  ·gc.alloc.rate.norm:              3856.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.308 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      651.241 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3209.937 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 318291.312 ops/s
[info]                  ·gc.alloc.rate:                   779.545 MB/sec
[info]                  ·gc.alloc.rate.norm:              3856.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.103 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      979.470 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4844.927 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 318069.213 ops/s
[info]                  ·gc.alloc.rate:                   779.297 MB/sec
[info]                  ·gc.alloc.rate.norm:              3856.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.206 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.111 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3241.524 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 316027.489 ops/s
[info]                  ·gc.alloc.rate:                   774.104 MB/sec
[info]                  ·gc.alloc.rate.norm:              3856.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.311 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.639 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3270.879 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce":
[info]   317585.122 ±(99.9%) 5689.141 ops/s [Average]
[info]   (min, avg, max) = (316027.489, 317585.122, 319427.819), stdev = 1477.452
[info]   CI (99.9%): [311895.981, 323274.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   777.903 ±(99.9%) 13.865 MB/sec [Average]
[info]   (min, avg, max) = (774.104, 777.903, 782.317), stdev = 3.601
[info]   CI (99.9%): [764.038, 791.769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   3856.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3856.001, 3856.001, 3856.001), stdev = 0.001
[info]   CI (99.9%): [3856.001, 3856.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.054, 0.083), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.268 ±(99.9%) 0.456 B/op [Average]
[info]   (min, avg, max) = (0.103, 0.268, 0.415), stdev = 0.118
[info]   CI (99.9%): [≈ 0, 0.724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   719.007 ±(99.9%) 560.724 MB/sec [Average]
[info]   (min, avg, max) = (651.241, 719.007, 979.470), stdev = 145.618
[info]   CI (99.9%): [158.283, 1279.732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3563.455 ±(99.9%) 2759.756 B/op [Average]
[info]   (min, avg, max) = (3209.937, 3563.455, 4844.927), stdev = 716.700
[info]   CI (99.9%): [803.699, 6323.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala
[info] # Run progress: 13.24% complete, ETA 00:50:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 739576.733 ops/s
[info] # Warmup Iteration   2: 1085592.471 ops/s
[info] # Warmup Iteration   3: 1085068.940 ops/s
[info] Iteration   1: 1103911.995 ops/s
[info]                  ·gc.alloc.rate:                   779.628 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.148 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      969.751 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1383.177 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1098442.418 ops/s
[info]                  ·gc.alloc.rate:                   775.939 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.119 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      650.674 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 932.483 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1106951.038 ops/s
[info]                  ·gc.alloc.rate:                   781.831 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.059 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.541 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 929.533 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1085646.225 ops/s
[info]                  ·gc.alloc.rate:                   766.881 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.151 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      986.277 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1430.130 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1084385.834 ops/s
[info]                  ·gc.alloc.rate:                   765.941 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.091 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      661.242 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 959.997 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala":
[info]   1095867.502 ±(99.9%) 39947.161 ops/s [Average]
[info]   (min, avg, max) = (1084385.834, 1095867.502, 1106951.038), stdev = 10374.151
[info]   CI (99.9%): [1055920.341, 1135814.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   774.044 ±(99.9%) 28.058 MB/sec [Average]
[info]   (min, avg, max) = (765.941, 774.044, 781.831), stdev = 7.287
[info]   CI (99.9%): [745.986, 802.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1112.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1112.000, 1112.000, 1112.000), stdev = 0.001
[info]   CI (99.9%): [1112.000, 1112.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.104), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.114 ±(99.9%) 0.151 B/op [Average]
[info]   (min, avg, max) = (0.059, 0.114, 0.151), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   784.297 ±(99.9%) 681.476 MB/sec [Average]
[info]   (min, avg, max) = (650.674, 784.297, 986.277), stdev = 176.977
[info]   CI (99.9%): [102.821, 1465.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1127.064 ±(99.9%) 985.934 B/op [Average]
[info]   (min, avg, max) = (929.533, 1127.064, 1430.130), stdev = 256.044
[info]   CI (99.9%): [141.130, 2112.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 4.000), stdev = 0.837
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala
[info] # Run progress: 13.60% complete, ETA 00:50:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2059715.170 ops/s
[info] # Warmup Iteration   2: 2274387.614 ops/s
[info] # Warmup Iteration   3: 2336314.178 ops/s
[info] Iteration   1: 2311004.075 ops/s
[info]                  ·gc.alloc.rate:                   1069.243 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.043 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1305.885 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 889.120 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 2339413.236 ops/s
[info]                  ·gc.alloc.rate:                   1081.710 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.084 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      981.889 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 660.820 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 2347257.304 ops/s
[info]                  ·gc.alloc.rate:                   1085.467 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.056 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      985.324 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 660.836 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 2340535.600 ops/s
[info]                  ·gc.alloc.rate:                   1082.698 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.056 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1322.362 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 889.149 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 2324546.424 ops/s
[info]                  ·gc.alloc.rate:                   1074.995 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.056 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      997.270 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 675.364 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala":
[info]   2332551.328 ±(99.9%) 56312.384 ops/s [Average]
[info]   (min, avg, max) = (2311004.075, 2332551.328, 2347257.304), stdev = 14624.147
[info]   CI (99.9%): [2276238.944, 2388863.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1078.823 ±(99.9%) 25.391 MB/sec [Average]
[info]   (min, avg, max) = (1069.243, 1078.823, 1085.467), stdev = 6.594
[info]   CI (99.9%): [1053.431, 1104.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   728.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (728.000, 728.000, 728.000), stdev = 0.001
[info]   CI (99.9%): [728.000, 728.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.125), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.059 ±(99.9%) 0.059 B/op [Average]
[info]   (min, avg, max) = (0.043, 0.059, 0.084), stdev = 0.015
[info]   CI (99.9%): [≈ 10⁻³, 0.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1118.546 ±(99.9%) 688.200 MB/sec [Average]
[info]   (min, avg, max) = (981.889, 1118.546, 1322.362), stdev = 178.723
[info]   CI (99.9%): [430.346, 1806.746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   755.058 ±(99.9%) 471.852 B/op [Average]
[info]   (min, avg, max) = (660.820, 755.058, 889.149), stdev = 122.538
[info]   CI (99.9%): [283.206, 1226.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 13.97% complete, ETA 00:49:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2335339.535 ops/s
[info] # Warmup Iteration   2: 2524023.545 ops/s
[info] # Warmup Iteration   3: 2560021.098 ops/s
[info] Iteration   1: 2559621.805 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2568377.891 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2564021.922 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2562499.011 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2565483.278 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2564000.781 ±(99.9%) 12594.032 ops/s [Average]
[info]   (min, avg, max) = (2559621.805, 2564000.781, 2568377.891), stdev = 3270.630
[info]   CI (99.9%): [2551406.749, 2576594.813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson
[info] # Run progress: 14.34% complete, ETA 00:49:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 422076.565 ops/s
[info] # Warmup Iteration   2: 546503.777 ops/s
[info] # Warmup Iteration   3: 555386.882 ops/s
[info] Iteration   1: 558188.779 ops/s
[info]                  ·gc.alloc.rate:                   658.106 MB/sec
[info]                  ·gc.alloc.rate.norm:              1856.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.235 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      648.360 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1828.515 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 556530.893 ops/s
[info]                  ·gc.alloc.rate:                   656.075 MB/sec
[info]                  ·gc.alloc.rate.norm:              1856.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.294 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      646.622 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1829.259 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 557387.142 ops/s
[info]                  ·gc.alloc.rate:                   657.081 MB/sec
[info]                  ·gc.alloc.rate.norm:              1856.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.118 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      646.552 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1826.260 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 557981.381 ops/s
[info]                  ·gc.alloc.rate:                   657.848 MB/sec
[info]                  ·gc.alloc.rate.norm:              1856.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.176 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      647.958 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1828.097 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 557758.840 ops/s
[info]                  ·gc.alloc.rate:                   657.755 MB/sec
[info]                  ·gc.alloc.rate.norm:              1856.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      649.760 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1833.441 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson":
[info]   557569.407 ±(99.9%) 2511.022 ops/s [Average]
[info]   (min, avg, max) = (556530.893, 557569.407, 558188.779), stdev = 652.104
[info]   CI (99.9%): [555058.385, 560080.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   657.373 ±(99.9%) 3.152 MB/sec [Average]
[info]   (min, avg, max) = (656.075, 657.373, 658.106), stdev = 0.819
[info]   CI (99.9%): [654.221, 660.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   1856.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1856.001, 1856.001, 1856.001), stdev = 0.001
[info]   CI (99.9%): [1856.001, 1856.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.104), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.165 ±(99.9%) 0.436 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.165, 0.294), stdev = 0.113
[info]   CI (99.9%): [≈ 0, 0.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   647.850 ±(99.9%) 5.135 MB/sec [Average]
[info]   (min, avg, max) = (646.552, 647.850, 649.760), stdev = 1.334
[info]   CI (99.9%): [642.715, 652.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1829.114 ±(99.9%) 10.239 B/op [Average]
[info]   (min, avg, max) = (1826.260, 1829.114, 1833.441), stdev = 2.659
[info]   CI (99.9%): [1818.875, 1839.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce
[info] # Run progress: 14.71% complete, ETA 00:49:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 144378.832 ops/s
[info] # Warmup Iteration   2: 174864.232 ops/s
[info] # Warmup Iteration   3: 177122.967 ops/s
[info] Iteration   1: 176628.284 ops/s
[info]                  ·gc.alloc.rate:                   2123.430 MB/sec
[info]                  ·gc.alloc.rate.norm:              18920.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.557 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2318.753 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20660.353 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 176315.357 ops/s
[info]                  ·gc.alloc.rate:                   2118.945 MB/sec
[info]                  ·gc.alloc.rate.norm:              18920.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.487 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2005.237 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17904.707 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 176205.618 ops/s
[info]                  ·gc.alloc.rate:                   2117.513 MB/sec
[info]                  ·gc.alloc.rate.norm:              18920.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.744 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2018.406 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18034.477 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 177931.891 ops/s
[info]                  ·gc.alloc.rate:                   2138.332 MB/sec
[info]                  ·gc.alloc.rate.norm:              18920.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.552 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2366.345 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20937.464 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 178614.034 ops/s
[info]                  ·gc.alloc.rate:                   2146.867 MB/sec
[info]                  ·gc.alloc.rate.norm:              18920.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.101 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2034.488 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17929.619 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce":
[info]   177139.037 ±(99.9%) 4136.003 ops/s [Average]
[info]   (min, avg, max) = (176205.618, 177139.037, 178614.034), stdev = 1074.107
[info]   CI (99.9%): [173003.033, 181275.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate":
[info]   2129.017 ±(99.9%) 49.851 MB/sec [Average]
[info]   (min, avg, max) = (2117.513, 2129.017, 2146.867), stdev = 12.946
[info]   CI (99.9%): [2079.166, 2178.868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   18920.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (18920.002, 18920.002, 18920.002), stdev = 0.001
[info]   CI (99.9%): [18920.002, 18920.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.100 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.100, 0.166), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.888 ±(99.9%) 1.549 B/op [Average]
[info]   (min, avg, max) = (0.552, 0.888, 1.487), stdev = 0.402
[info]   CI (99.9%): [≈ 0, 2.436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2148.646 ±(99.9%) 685.831 MB/sec [Average]
[info]   (min, avg, max) = (2005.237, 2148.646, 2366.345), stdev = 178.108
[info]   CI (99.9%): [1462.814, 2834.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   19093.324 ±(99.9%) 6010.154 B/op [Average]
[info]   (min, avg, max) = (17904.707, 19093.324, 20937.464), stdev = 1560.818
[info]   CI (99.9%): [13083.170, 25103.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.count":
[info]   32.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 0.707
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala
[info] # Run progress: 15.07% complete, ETA 00:49:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 274127.352 ops/s
[info] # Warmup Iteration   2: 431869.253 ops/s
[info] # Warmup Iteration   3: 440821.815 ops/s
[info] Iteration   1: 437923.410 ops/s
[info]                  ·gc.alloc.rate:                   362.708 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.075 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.381 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1838.507 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 436958.345 ops/s
[info]                  ·gc.alloc.rate:                   361.965 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.375 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      323.697 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1166.140 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 430516.569 ops/s
[info]                  ·gc.alloc.rate:                   356.607 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      323.666 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1183.547 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 439199.653 ops/s
[info]                  ·gc.alloc.rate:                   363.740 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.075 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      325.585 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1167.217 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 426750.797 ops/s
[info]                  ·gc.alloc.rate:                   353.495 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      325.663 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1201.332 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala":
[info]   434269.755 ±(99.9%) 20691.858 ops/s [Average]
[info]   (min, avg, max) = (426750.797, 434269.755, 439199.653), stdev = 5373.610
[info]   CI (99.9%): [413577.896, 454961.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   359.703 ±(99.9%) 17.066 MB/sec [Average]
[info]   (min, avg, max) = (353.495, 359.703, 363.740), stdev = 4.432
[info]   CI (99.9%): [342.637, 376.770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1304.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1304.001, 1304.001, 1304.001), stdev = 0.001
[info]   CI (99.9%): [1304.001, 1304.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.104), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.105 ±(99.9%) 0.599 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.105, 0.375), stdev = 0.156
[info]   CI (99.9%): [≈ 0, 0.704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   361.999 ±(99.9%) 321.579 MB/sec [Average]
[info]   (min, avg, max) = (323.666, 361.999, 511.381), stdev = 83.513
[info]   CI (99.9%): [40.419, 683.578] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1311.348 ±(99.9%) 1136.090 B/op [Average]
[info]   (min, avg, max) = (1166.140, 1311.348, 1838.507), stdev = 295.039
[info]   CI (99.9%): [175.258, 2447.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 3.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala
[info] # Run progress: 15.44% complete, ETA 00:49:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1066477.482 ops/s
[info] # Warmup Iteration   2: 1042463.243 ops/s
[info] # Warmup Iteration   3: 1113198.067 ops/s
[info] Iteration   1: 1114073.108 ops/s
[info]                  ·gc.alloc.rate:                   215.111 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.703 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 361.366 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1115007.562 ops/s
[info]                  ·gc.alloc.rate:                   215.323 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.004 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.756 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 361.085 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1113771.030 ops/s
[info]                  ·gc.alloc.rate:                   215.059 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.008 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.716 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 361.471 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1113630.827 ops/s
[info]                  ·gc.alloc.rate:                   215.062 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.753 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 361.519 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1116518.293 ops/s
[info]                  ·gc.alloc.rate:      215.610 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala":
[info]   1114600.164 ±(99.9%) 4616.784 ops/s [Average]
[info]   (min, avg, max) = (1113630.827, 1114600.164, 1116518.293), stdev = 1198.964
[info]   CI (99.9%): [1109983.380, 1119216.947] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   215.233 ±(99.9%) 0.912 MB/sec [Average]
[info]   (min, avg, max) = (215.059, 215.233, 215.610), stdev = 0.237
[info]   CI (99.9%): [214.321, 216.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   304.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (304.000, 304.000, 304.000), stdev = 0.001
[info]   CI (99.9%): [304.000, 304.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.002 ±(99.9%) 0.014 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.008), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.003 ±(99.9%) 0.020 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.011), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   204.586 ±(99.9%) 440.386 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.586, 255.756), stdev = 114.367
[info]   CI (99.9%): [≈ 0, 644.971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   289.088 ±(99.9%) 622.285 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 289.088, 361.519), stdev = 161.605
[info]   CI (99.9%): [≈ 0, 911.373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.095
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson
[info] # Run progress: 15.81% complete, ETA 00:48:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 44056.166 ops/s
[info] # Warmup Iteration   2: 80219.634 ops/s
[info] # Warmup Iteration   3: 80593.872 ops/s
[info] Iteration   1: 81480.812 ops/s
[info]                  ·gc.alloc.rate:                   3361.038 MB/sec
[info]                  ·gc.alloc.rate.norm:              64952.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.814 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3031.613 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 58585.882 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 81581.098 ops/s
[info]                  ·gc.alloc.rate:                   3365.956 MB/sec
[info]                  ·gc.alloc.rate.norm:              64952.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3388.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65379.379 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 80579.526 ops/s
[info]                  ·gc.alloc.rate:                   3324.357 MB/sec
[info]                  ·gc.alloc.rate.norm:              64952.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3395.947 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66350.748 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 81068.695 ops/s
[info]                  ·gc.alloc.rate:                   3344.858 MB/sec
[info]                  ·gc.alloc.rate.norm:              64952.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.271 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.253 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3402.319 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66067.814 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 80740.982 ops/s
[info]                  ·gc.alloc.rate:                   3331.050 MB/sec
[info]                  ·gc.alloc.rate.norm:              64952.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.840 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3402.575 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66346.669 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson":
[info]   81090.223 ±(99.9%) 1696.866 ops/s [Average]
[info]   (min, avg, max) = (80579.526, 81090.223, 81581.098), stdev = 440.671
[info]   CI (99.9%): [79393.357, 82787.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3345.452 ±(99.9%) 69.848 MB/sec [Average]
[info]   (min, avg, max) = (3324.357, 3345.452, 3365.956), stdev = 18.139
[info]   CI (99.9%): [3275.604, 3415.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   64952.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (64952.005, 64952.005, 64952.005), stdev = 0.001
[info]   CI (99.9%): [64952.004, 64952.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.175 ±(99.9%) 0.251 MB/sec [Average]
[info]   (min, avg, max) = (0.104, 0.175, 0.271), stdev = 0.065
[info]   CI (99.9%): [≈ 0, 0.426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3.391 ±(99.9%) 4.848 B/op [Average]
[info]   (min, avg, max) = (2.033, 3.391, 5.253), stdev = 1.259
[info]   CI (99.9%): [≈ 0, 8.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   3324.112 ±(99.9%) 630.035 MB/sec [Average]
[info]   (min, avg, max) = (3031.613, 3324.112, 3402.575), stdev = 163.618
[info]   CI (99.9%): [2694.077, 3954.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   64546.099 ±(99.9%) 12920.183 B/op [Average]
[info]   (min, avg, max) = (58585.882, 64546.099, 66350.748), stdev = 3355.330
[info]   CI (99.9%): [51625.916, 77466.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.count":
[info]   49.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.800, 10.000), stdev = 0.447
[info]   CI (99.9%): [49.000, 49.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.time":
[info]   51.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (10.000, 10.200, 11.000), stdev = 0.447
[info]   CI (99.9%): [51.000, 51.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce
[info] # Run progress: 16.18% complete, ETA 00:48:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 259096.910 ops/s
[info] # Warmup Iteration   2: 320784.162 ops/s
[info] # Warmup Iteration   3: 324973.373 ops/s
[info] Iteration   1: 326382.536 ops/s
[info]                  ·gc.alloc.rate:                   1616.829 MB/sec
[info]                  ·gc.alloc.rate.norm:              7800.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.301 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1640.695 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7915.139 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 323194.218 ops/s
[info]                  ·gc.alloc.rate:                   1601.150 MB/sec
[info]                  ·gc.alloc.rate.norm:              7800.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.608 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1322.466 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6442.395 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 319501.112 ops/s
[info]                  ·gc.alloc.rate:                   1582.925 MB/sec
[info]                  ·gc.alloc.rate.norm:              7800.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.308 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1665.057 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8204.715 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 324963.472 ops/s
[info]                  ·gc.alloc.rate:                   1610.516 MB/sec
[info]                  ·gc.alloc.rate.norm:              7800.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.504 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1675.567 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8115.054 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 326383.318 ops/s
[info]                  ·gc.alloc.rate:                   1617.001 MB/sec
[info]                  ·gc.alloc.rate.norm:              7800.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.402 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1684.078 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8123.566 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce":
[info]   324084.931 ±(99.9%) 11083.262 ops/s [Average]
[info]   (min, avg, max) = (319501.112, 324084.931, 326383.318), stdev = 2878.288
[info]   CI (99.9%): [313001.669, 335168.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1605.684 ±(99.9%) 54.937 MB/sec [Average]
[info]   (min, avg, max) = (1582.925, 1605.684, 1617.001), stdev = 14.267
[info]   CI (99.9%): [1550.747, 1660.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   7800.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7800.001, 7800.001, 7800.001), stdev = 0.001
[info]   CI (99.9%): [7800.001, 7800.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.125), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.425 ±(99.9%) 0.508 B/op [Average]
[info]   (min, avg, max) = (0.301, 0.425, 0.608), stdev = 0.132
[info]   CI (99.9%): [≈ 0, 0.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1597.573 ±(99.9%) 595.493 MB/sec [Average]
[info]   (min, avg, max) = (1322.466, 1597.573, 1684.078), stdev = 154.648
[info]   CI (99.9%): [1002.080, 2193.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   7760.174 ±(99.9%) 2866.187 B/op [Average]
[info]   (min, avg, max) = (6442.395, 7760.174, 8204.715), stdev = 744.340
[info]   CI (99.9%): [4893.987, 10626.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 5.000), stdev = 0.894
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala
[info] # Run progress: 16.54% complete, ETA 00:48:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1692184.492 ops/s
[info] # Warmup Iteration   2: 1895753.431 ops/s
[info] # Warmup Iteration   3: 1888181.333 ops/s
[info] Iteration   1: 1896116.677 ops/s
[info]                  ·gc.alloc.rate:                   510.636 MB/sec
[info]                  ·gc.alloc.rate.norm:              424.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.731 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.098 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      584.291 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 485.159 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 1895751.465 ops/s
[info]                  ·gc.alloc.rate:                   510.728 MB/sec
[info]                  ·gc.alloc.rate.norm:              424.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.850 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 544.478 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1886634.349 ops/s
[info]                  ·gc.alloc.rate:                   508.091 MB/sec
[info]                  ·gc.alloc.rate.norm:              424.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.069 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      326.965 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 272.851 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1892028.876 ops/s
[info]                  ·gc.alloc.rate:                   509.602 MB/sec
[info]                  ·gc.alloc.rate.norm:              424.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.667 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 543.034 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1873555.454 ops/s
[info]                  ·gc.alloc.rate:                   504.604 MB/sec
[info]                  ·gc.alloc.rate.norm:              424.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      326.333 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 274.206 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala":
[info]   1888817.364 ±(99.9%) 35986.888 ops/s [Average]
[info]   (min, avg, max) = (1873555.454, 1888817.364, 1896116.677), stdev = 9345.681
[info]   CI (99.9%): [1852830.476, 1924804.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   508.732 ±(99.9%) 9.782 MB/sec [Average]
[info]   (min, avg, max) = (504.604, 508.732, 510.728), stdev = 2.540
[info]   CI (99.9%): [498.950, 518.515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   424.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (424.000, 424.000, 424.000), stdev = 0.001
[info]   CI (99.9%): [424.000, 424.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.780 ±(99.9%) 6.355 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.780, 3.731), stdev = 1.650
[info]   CI (99.9%): [≈ 0, 7.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.647 ±(99.9%) 5.277 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.647, 3.098), stdev = 1.370
[info]   CI (99.9%): [≈ 0, 5.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   509.221 ±(99.9%) 651.139 MB/sec [Average]
[info]   (min, avg, max) = (326.333, 509.221, 655.850), stdev = 169.099
[info]   CI (99.9%): [≈ 0, 1160.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   423.945 ±(99.9%) 536.709 B/op [Average]
[info]   (min, avg, max) = (272.851, 423.945, 544.478), stdev = 139.382
[info]   CI (99.9%): [≈ 0, 960.654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 5.000), stdev = 1.643
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 16.91% complete, ETA 00:48:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1689095.246 ops/s
[info] # Warmup Iteration   2: 1873106.746 ops/s
[info] # Warmup Iteration   3: 1856405.885 ops/s
[info] Iteration   1: 1861352.339 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1848149.754 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1863716.094 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1859730.655 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1860767.499 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc":
[info]   1858743.268 ±(99.9%) 23488.236 ops/s [Average]
[info]   (min, avg, max) = (1848149.754, 1858743.268, 1863716.094), stdev = 6099.820
[info]   CI (99.9%): [1835255.033, 1882231.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson
[info] # Run progress: 17.28% complete, ETA 00:48:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 31982.344 ops/s
[info] # Warmup Iteration   2: 47029.332 ops/s
[info] # Warmup Iteration   3: 46967.517 ops/s
[info] Iteration   1: 46934.233 ops/s
[info]                  ·gc.alloc.rate:                   1977.586 MB/sec
[info]                  ·gc.alloc.rate.norm:              66336.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.188 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1963.683 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65869.648 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 47120.921 ops/s
[info]                  ·gc.alloc.rate:                   1985.386 MB/sec
[info]                  ·gc.alloc.rate.norm:              66336.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.781 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1987.371 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66402.323 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 47299.477 ops/s
[info]                  ·gc.alloc.rate:                   1993.124 MB/sec
[info]                  ·gc.alloc.rate.norm:              66336.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.770 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2005.754 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66756.376 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 47140.402 ops/s
[info]                  ·gc.alloc.rate:                   1986.179 MB/sec
[info]                  ·gc.alloc.rate.norm:              66336.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.085 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2019.240 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 67440.227 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 47360.503 ops/s
[info]                  ·gc.alloc.rate:                   1995.708 MB/sec
[info]                  ·gc.alloc.rate.norm:              66336.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.075 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028.452 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 67424.426 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson":
[info]   47171.107 ±(99.9%) 644.107 ops/s [Average]
[info]   (min, avg, max) = (46934.233, 47171.107, 47360.503), stdev = 167.273
[info]   CI (99.9%): [46527.000, 47815.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1987.596 ±(99.9%) 27.462 MB/sec [Average]
[info]   (min, avg, max) = (1977.586, 1987.596, 1995.708), stdev = 7.132
[info]   CI (99.9%): [1960.135, 2015.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   66336.009 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (66336.009, 66336.009, 66336.009), stdev = 0.001
[info]   CI (99.9%): [66336.008, 66336.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.083, 0.125), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2.780 ±(99.9%) 3.314 B/op [Average]
[info]   (min, avg, max) = (2.075, 2.780, 4.188), stdev = 0.861
[info]   CI (99.9%): [≈ 0, 6.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   2000.900 ±(99.9%) 99.806 MB/sec [Average]
[info]   (min, avg, max) = (1963.683, 2000.900, 2028.452), stdev = 25.919
[info]   CI (99.9%): [1901.095, 2100.706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   66778.600 ±(99.9%) 2599.623 B/op [Average]
[info]   (min, avg, max) = (65869.648, 66778.600, 67440.227), stdev = 675.114
[info]   CI (99.9%): [64178.977, 69378.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 0.707
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce
[info] # Run progress: 17.65% complete, ETA 00:47:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20199.978 ops/s
[info] # Warmup Iteration   2: 26519.289 ops/s
[info] # Warmup Iteration   3: 26987.796 ops/s
[info] Iteration   1: 27004.915 ops/s
[info]                  ·gc.alloc.rate:                   1581.776 MB/sec
[info]                  ·gc.alloc.rate.norm:              92192.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.279 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1640.164 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 95595.069 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 26988.394 ops/s
[info]                  ·gc.alloc.rate:                   1580.591 MB/sec
[info]                  ·gc.alloc.rate.norm:              92192.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.926 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1652.743 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 96400.465 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 27116.334 ops/s
[info]                  ·gc.alloc.rate:                   1588.252 MB/sec
[info]                  ·gc.alloc.rate.norm:              92192.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.625 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1665.782 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 96692.301 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 26835.008 ops/s
[info]                  ·gc.alloc.rate:                   1571.518 MB/sec
[info]                  ·gc.alloc.rate.norm:              92192.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.662 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.847 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78601.204 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 26997.569 ops/s
[info]                  ·gc.alloc.rate:                   1581.053 MB/sec
[info]                  ·gc.alloc.rate.norm:              92192.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.641 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1682.250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 98092.844 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce":
[info]   26988.444 ±(99.9%) 386.280 ops/s [Average]
[info]   (min, avg, max) = (26835.008, 26988.444, 27116.334), stdev = 100.316
[info]   CI (99.9%): [26602.164, 27374.724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate":
[info]   1580.638 ±(99.9%) 22.993 MB/sec [Average]
[info]   (min, avg, max) = (1571.518, 1580.638, 1588.252), stdev = 5.971
[info]   CI (99.9%): [1557.645, 1603.631] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   92192.016 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (92192.015, 92192.016, 92192.019), stdev = 0.002
[info]   CI (99.9%): [92192.010, 92192.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.100 ±(99.9%) 0.215 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.100, 0.187), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5.826 ±(99.9%) 12.540 B/op [Average]
[info]   (min, avg, max) = (3.625, 5.826, 10.926), stdev = 3.257
[info]   CI (99.9%): [≈ 0, 18.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1596.157 ±(99.9%) 554.990 MB/sec [Average]
[info]   (min, avg, max) = (1339.847, 1596.157, 1682.250), stdev = 144.129
[info]   CI (99.9%): [1041.167, 2151.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   93076.376 ±(99.9%) 31351.659 B/op [Average]
[info]   (min, avg, max) = (78601.204, 93076.376, 98092.844), stdev = 8141.926
[info]   CI (99.9%): [61724.718, 124428.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala
[info] # Run progress: 18.01% complete, ETA 00:47:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 34747.153 ops/s
[info] # Warmup Iteration   2: 61403.037 ops/s
[info] # Warmup Iteration   3: 62232.842 ops/s
[info] Iteration   1: 62563.258 ops/s
[info]                  ·gc.alloc.rate:                   1032.221 MB/sec
[info]                  ·gc.alloc.rate.norm:              25976.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.571 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      983.195 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24742.265 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 61982.210 ops/s
[info]                  ·gc.alloc.rate:                   1022.979 MB/sec
[info]                  ·gc.alloc.rate.norm:              25976.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.586 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      988.901 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25110.680 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 62636.072 ops/s
[info]                  ·gc.alloc.rate:                   1033.369 MB/sec
[info]                  ·gc.alloc.rate.norm:              25976.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      995.127 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25014.715 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 62539.583 ops/s
[info]                  ·gc.alloc.rate:                   1031.803 MB/sec
[info]                  ·gc.alloc.rate.norm:              25976.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.572 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      999.805 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25170.451 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 62403.798 ops/s
[info]                  ·gc.alloc.rate:                   1029.649 MB/sec
[info]                  ·gc.alloc.rate.norm:              25976.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.150 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1004.505 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25341.679 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala":
[info]   62424.984 ±(99.9%) 1006.537 ops/s [Average]
[info]   (min, avg, max) = (61982.210, 62424.984, 62636.072), stdev = 261.395
[info]   CI (99.9%): [61418.447, 63431.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1030.004 ±(99.9%) 15.988 MB/sec [Average]
[info]   (min, avg, max) = (1022.979, 1030.004, 1033.369), stdev = 4.152
[info]   CI (99.9%): [1014.016, 1045.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   25976.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (25976.007, 25976.007, 25976.007), stdev = 0.001
[info]   CI (99.9%): [25976.006, 25976.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.125), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.785 ±(99.9%) 3.068 B/op [Average]
[info]   (min, avg, max) = (1.046, 1.785, 3.150), stdev = 0.797
[info]   CI (99.9%): [≈ 0, 4.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   994.306 ±(99.9%) 32.651 MB/sec [Average]
[info]   (min, avg, max) = (983.195, 994.306, 1004.505), stdev = 8.479
[info]   CI (99.9%): [961.656, 1026.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   25075.958 ±(99.9%) 852.037 B/op [Average]
[info]   (min, avg, max) = (24742.265, 25075.958, 25341.679), stdev = 221.271
[info]   CI (99.9%): [24223.921, 25927.995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala
[info] # Run progress: 18.38% complete, ETA 00:47:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 75359.732 ops/s
[info] # Warmup Iteration   2: 81069.070 ops/s
[info] # Warmup Iteration   3: 81360.737 ops/s
[info] Iteration   1: 81629.083 ops/s
[info]                  ·gc.alloc.rate:                   525.864 MB/sec
[info]                  ·gc.alloc.rate.norm:              10144.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.220 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62.120 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.901 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6363.841 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 82725.892 ops/s
[info]                  ·gc.alloc.rate:                   532.973 MB/sec
[info]                  ·gc.alloc.rate.norm:              10144.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.188 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658.223 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12527.858 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 83163.379 ops/s
[info]                  ·gc.alloc.rate:                   536.051 MB/sec
[info]                  ·gc.alloc.rate.norm:              10144.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.576 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.190 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12417.463 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 80263.561 ops/s
[info]                  ·gc.alloc.rate:                   517.184 MB/sec
[info]                  ·gc.alloc.rate.norm:              10144.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.641 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6426.331 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 82971.891 ops/s
[info]                  ·gc.alloc.rate:                   534.617 MB/sec
[info]                  ·gc.alloc.rate.norm:              10144.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.790 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.940 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12446.043 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala":
[info]   82150.761 ±(99.9%) 4662.339 ops/s [Average]
[info]   (min, avg, max) = (80263.561, 82150.761, 83163.379), stdev = 1210.795
[info]   CI (99.9%): [77488.422, 86813.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   529.338 ±(99.9%) 30.193 MB/sec [Average]
[info]   (min, avg, max) = (517.184, 529.338, 536.051), stdev = 7.841
[info]   CI (99.9%): [499.145, 559.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   10144.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10144.005, 10144.005, 10144.005), stdev = 0.001
[info]   CI (99.9%): [10144.004, 10144.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.682 ±(99.9%) 5.466 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.682, 3.220), stdev = 1.420
[info]   CI (99.9%): [≈ 0, 6.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   13.135 ±(99.9%) 105.469 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13.135, 62.120), stdev = 27.390
[info]   CI (99.9%): [≈ 0, 118.604] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   525.579 ±(99.9%) 691.823 MB/sec [Average]
[info]   (min, avg, max) = (327.641, 525.579, 658.223), stdev = 179.664
[info]   CI (99.9%): [≈ 0, 1217.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   10036.307 ±(99.9%) 12800.640 B/op [Average]
[info]   (min, avg, max) = (6363.841, 10036.307, 12527.858), stdev = 3324.286
[info]   CI (99.9%): [≈ 0, 22836.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson
[info] # Run progress: 18.75% complete, ETA 00:47:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16548.896 ops/s
[info] # Warmup Iteration   2: 33244.400 ops/s
[info] # Warmup Iteration   3: 33336.676 ops/s
[info] Iteration   1: 33273.313 ops/s
[info]                  ·gc.alloc.rate:                   1694.431 MB/sec
[info]                  ·gc.alloc.rate.norm:              80152.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.923 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1648.164 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 77963.442 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 33828.932 ops/s
[info]                  ·gc.alloc.rate:                   1722.262 MB/sec
[info]                  ·gc.alloc.rate.norm:              80152.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.748 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1664.453 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 77461.673 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 33584.074 ops/s
[info]                  ·gc.alloc.rate:                   1709.726 MB/sec
[info]                  ·gc.alloc.rate.norm:              80152.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.853 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1674.895 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78519.124 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 33778.107 ops/s
[info]                  ·gc.alloc.rate:                   1719.898 MB/sec
[info]                  ·gc.alloc.rate.norm:              80152.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.819 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1684.275 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78491.896 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 33894.229 ops/s
[info]                  ·gc.alloc.rate:                   1725.627 MB/sec
[info]                  ·gc.alloc.rate.norm:              80152.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.833 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1690.246 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78508.640 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson":
[info]   33671.731 ±(99.9%) 966.415 ops/s [Average]
[info]   (min, avg, max) = (33273.313, 33671.731, 33894.229), stdev = 250.975
[info]   CI (99.9%): [32705.316, 34638.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1714.389 ±(99.9%) 48.658 MB/sec [Average]
[info]   (min, avg, max) = (1694.431, 1714.389, 1725.627), stdev = 12.636
[info]   CI (99.9%): [1665.731, 1763.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   80152.013 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (80152.012, 80152.013, 80152.015), stdev = 0.001
[info]   CI (99.9%): [80152.007, 80152.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.125 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.104, 0.125, 0.166), stdev = 0.025
[info]   CI (99.9%): [0.027, 0.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   5.835 ±(99.9%) 4.513 B/op [Average]
[info]   (min, avg, max) = (4.833, 5.835, 7.748), stdev = 1.172
[info]   CI (99.9%): [1.322, 10.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1672.407 ±(99.9%) 64.326 MB/sec [Average]
[info]   (min, avg, max) = (1648.164, 1672.407, 1690.246), stdev = 16.705
[info]   CI (99.9%): [1608.080, 1736.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   78188.955 ±(99.9%) 1808.961 B/op [Average]
[info]   (min, avg, max) = (77461.673, 78188.955, 78519.124), stdev = 469.781
[info]   CI (99.9%): [76379.994, 79997.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce
[info] # Run progress: 19.12% complete, ETA 00:46:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28669.301 ops/s
[info] # Warmup Iteration   2: 38232.719 ops/s
[info] # Warmup Iteration   3: 39634.508 ops/s
[info] Iteration   1: 38346.577 ops/s
[info]                  ·gc.alloc.rate:                   585.083 MB/sec
[info]                  ·gc.alloc.rate.norm:              24017.420 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.416 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     140.226 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.141 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26852.243 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 38772.776 ops/s
[info]                  ·gc.alloc.rate:                   597.465 MB/sec
[info]                  ·gc.alloc.rate.norm:              24256.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      326.357 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13249.497 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 38535.227 ops/s
[info]                  ·gc.alloc.rate:                   593.776 MB/sec
[info]                  ·gc.alloc.rate.norm:              24256.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.101 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      651.939 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26631.970 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 38553.981 ops/s
[info]                  ·gc.alloc.rate:                   594.056 MB/sec
[info]                  ·gc.alloc.rate.norm:              24256.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.850 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      651.958 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26620.229 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 38614.748 ops/s
[info]                  ·gc.alloc.rate:                   594.977 MB/sec
[info]                  ·gc.alloc.rate.norm:              24256.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.545 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.954 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26619.599 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce":
[info]   38564.662 ±(99.9%) 591.427 ops/s [Average]
[info]   (min, avg, max) = (38346.577, 38564.662, 38772.776), stdev = 153.592
[info]   CI (99.9%): [37973.235, 39156.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate":
[info]   593.071 ±(99.9%) 18.084 MB/sec [Average]
[info]   (min, avg, max) = (585.083, 593.071, 597.465), stdev = 4.696
[info]   CI (99.9%): [574.987, 611.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   24208.293 ±(99.9%) 410.868 B/op [Average]
[info]   (min, avg, max) = (24017.420, 24208.293, 24256.011), stdev = 106.701
[info]   CI (99.9%): [23797.425, 24619.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.725 ±(99.9%) 5.796 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.725, 3.416), stdev = 1.505
[info]   CI (99.9%): [≈ 0, 6.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   29.744 ±(99.9%) 237.939 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 29.744, 140.226), stdev = 61.792
[info]   CI (99.9%): [≈ 0, 267.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   587.470 ±(99.9%) 562.076 MB/sec [Average]
[info]   (min, avg, max) = (326.357, 587.470, 654.141), stdev = 145.969
[info]   CI (99.9%): [25.394, 1149.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   23994.708 ±(99.9%) 23133.016 B/op [Average]
[info]   (min, avg, max) = (13249.497, 23994.708, 26852.243), stdev = 6007.571
[info]   CI (99.9%): [861.691, 47127.724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala
[info] # Run progress: 19.49% complete, ETA 00:46:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25569.039 ops/s
[info] # Warmup Iteration   2: 41937.267 ops/s
[info] # Warmup Iteration   3: 41950.116 ops/s
[info] Iteration   1: 42001.620 ops/s
[info]                  ·gc.alloc.rate:                   379.257 MB/sec
[info]                  ·gc.alloc.rate.norm:              14216.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.780 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.708 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9584.927 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 42066.245 ops/s
[info]                  ·gc.alloc.rate:                   379.878 MB/sec
[info]                  ·gc.alloc.rate.norm:              14216.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      320.671 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12000.317 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 41017.678 ops/s
[info]                  ·gc.alloc.rate:                   370.379 MB/sec
[info]                  ·gc.alloc.rate.norm:              14216.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.597 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      320.615 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12305.970 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 41806.190 ops/s
[info]                  ·gc.alloc.rate:                   377.467 MB/sec
[info]                  ·gc.alloc.rate.norm:              14216.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.135 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      645.197 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24299.178 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 41987.429 ops/s
[info]                  ·gc.alloc.rate:                   379.144 MB/sec
[info]                  ·gc.alloc.rate.norm:              14216.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      324.618 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12171.551 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala":
[info]   41775.832 ±(99.9%) 1673.827 ops/s [Average]
[info]   (min, avg, max) = (41017.678, 41775.832, 42066.245), stdev = 434.688
[info]   CI (99.9%): [40102.006, 43449.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   377.225 ±(99.9%) 15.133 MB/sec [Average]
[info]   (min, avg, max) = (370.379, 377.225, 379.878), stdev = 3.930
[info]   CI (99.9%): [362.092, 392.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   14216.010 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (14216.010, 14216.010, 14216.011), stdev = 0.001
[info]   CI (99.9%): [14216.008, 14216.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.083), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.102 ±(99.9%) 5.061 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.102, 3.135), stdev = 1.314
[info]   CI (99.9%): [≈ 0, 6.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   373.362 ±(99.9%) 595.517 MB/sec [Average]
[info]   (min, avg, max) = (255.708, 373.362, 645.197), stdev = 154.654
[info]   CI (99.9%): [≈ 0, 968.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   14072.389 ±(99.9%) 22432.392 B/op [Average]
[info]   (min, avg, max) = (9584.927, 14072.389, 24299.178), stdev = 5825.621
[info]   CI (99.9%): [≈ 0, 36504.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala
[info] # Run progress: 19.85% complete, ETA 00:46:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 39116.661 ops/s
[info] # Warmup Iteration   2: 46213.910 ops/s
[info] # Warmup Iteration   3: 46178.928 ops/s
[info] Iteration   1: 46205.815 ops/s
[info]                  ·gc.alloc.rate:                   405.909 MB/sec
[info]                  ·gc.alloc.rate.norm:              13832.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.011 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.386 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.377 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17425.970 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 46012.737 ops/s
[info]                  ·gc.alloc.rate:                   404.270 MB/sec
[info]                  ·gc.alloc.rate.norm:              13832.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.700 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     126.610 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11233.115 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 46407.385 ops/s
[info]                  ·gc.alloc.rate:                   407.743 MB/sec
[info]                  ·gc.alloc.rate.norm:              13832.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.824 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.300 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11137.040 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 46066.382 ops/s
[info]                  ·gc.alloc.rate:                   404.760 MB/sec
[info]                  ·gc.alloc.rate.norm:              13832.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      326.298 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11150.706 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 46197.673 ops/s
[info]                  ·gc.alloc.rate:                   405.929 MB/sec
[info]                  ·gc.alloc.rate.norm:              13832.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.837 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.626 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22238.189 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala":
[info]   46177.998 ±(99.9%) 588.874 ops/s [Average]
[info]   (min, avg, max) = (46012.737, 46177.998, 46407.385), stdev = 152.929
[info]   CI (99.9%): [45589.124, 46766.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   405.722 ±(99.9%) 5.166 MB/sec [Average]
[info]   (min, avg, max) = (404.270, 405.722, 407.743), stdev = 1.342
[info]   CI (99.9%): [400.556, 410.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   13832.009 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (13832.009, 13832.009, 13832.010), stdev = 0.001
[info]   CI (99.9%): [13832.008, 13832.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.776 ±(99.9%) 6.298 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.776, 3.700), stdev = 1.635
[info]   CI (99.9%): [≈ 0, 7.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   26.531 ±(99.9%) 215.487 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 26.531, 126.610), stdev = 55.961
[info]   CI (99.9%): [≈ 0, 242.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   429.383 ±(99.9%) 569.909 MB/sec [Average]
[info]   (min, avg, max) = (326.298, 429.383, 652.626), stdev = 148.004
[info]   CI (99.9%): [≈ 0, 999.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   14637.004 ±(99.9%) 19401.555 B/op [Average]
[info]   (min, avg, max) = (11137.040, 14637.004, 22238.189), stdev = 5038.522
[info]   CI (99.9%): [≈ 0, 34038.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 5.000), stdev = 1.673
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 20.22% complete, ETA 00:46:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 38332.883 ops/s
[info] # Warmup Iteration   2: 45479.374 ops/s
[info] # Warmup Iteration   3: 46177.049 ops/s
[info] Iteration   1: 46688.432 ops/s
[info]                  ·gc.alloc.rate:                   356.836 MB/sec
[info]                  ·gc.alloc.rate.norm:              12032.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.714 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8622.308 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 46674.806 ops/s
[info]                  ·gc.alloc.rate:                   356.703 MB/sec
[info]                  ·gc.alloc.rate.norm:              12032.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.700 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8625.079 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 46780.284 ops/s
[info]                  ·gc.alloc.rate:                   357.515 MB/sec
[info]                  ·gc.alloc.rate.norm:              12032.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.769 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     126.843 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.610 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11059.226 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 46785.057 ops/s
[info]                  ·gc.alloc.rate:                   357.575 MB/sec
[info]                  ·gc.alloc.rate.norm:              12032.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.401 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.644 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11058.517 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 46861.301 ops/s
[info]                  ·gc.alloc.rate:                   358.307 MB/sec
[info]                  ·gc.alloc.rate.norm:              12032.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.151 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21899.337 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc":
[info]   46757.976 ±(99.9%) 296.154 ops/s [Average]
[info]   (min, avg, max) = (46674.806, 46757.976, 46861.301), stdev = 76.910
[info]   CI (99.9%): [46461.822, 47054.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   357.387 ±(99.9%) 2.488 MB/sec [Average]
[info]   (min, avg, max) = (356.703, 357.387, 358.307), stdev = 0.646
[info]   CI (99.9%): [354.899, 359.875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   12032.009 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (12032.009, 12032.009, 12032.009), stdev = 0.001
[info]   CI (99.9%): [12032.009, 12032.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   0.762 ±(99.9%) 6.473 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.762, 3.769), stdev = 1.681
[info]   CI (99.9%): [≈ 0, 7.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   25.649 ±(99.9%) 217.842 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 25.649, 126.843), stdev = 56.573
[info]   CI (99.9%): [≈ 0, 243.490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   364.164 ±(99.9%) 635.613 MB/sec [Average]
[info]   (min, avg, max) = (255.700, 364.164, 652.151), stdev = 165.067
[info]   CI (99.9%): [≈ 0, 999.777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   12252.894 ±(99.9%) 21287.430 B/op [Average]
[info]   (min, avg, max) = (8622.308, 12252.894, 21899.337), stdev = 5528.278
[info]   CI (99.9%): [≈ 0, 33540.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce
[info] # Run progress: 20.59% complete, ETA 00:46:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15491.885 ops/s
[info] # Warmup Iteration   2: 19631.892 ops/s
[info] # Warmup Iteration   3: 20089.168 ops/s
[info] Iteration   1: 20268.523 ops/s
[info]                  ·gc.alloc.rate:                   759.837 MB/sec
[info]                  ·gc.alloc.rate.norm:              59030.267 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.081 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      982.303 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 76313.204 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 20263.673 ops/s
[info]                  ·gc.alloc.rate:                   759.841 MB/sec
[info]                  ·gc.alloc.rate.norm:              59040.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.467 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.880 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50806.811 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 20051.902 ops/s
[info]                  ·gc.alloc.rate:                   751.882 MB/sec
[info]                  ·gc.alloc.rate.norm:              59038.409 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.634 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.522 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51393.608 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 20141.069 ops/s
[info]                  ·gc.alloc.rate:                   755.375 MB/sec
[info]                  ·gc.alloc.rate.norm:              59040.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.506 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      984.575 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 76954.215 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 20229.787 ops/s
[info]                  ·gc.alloc.rate:                   758.707 MB/sec
[info]                  ·gc.alloc.rate.norm:              59040.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.619 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658.598 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51249.897 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce":
[info]   20190.991 ±(99.9%) 358.322 ops/s [Average]
[info]   (min, avg, max) = (20051.902, 20190.991, 20268.523), stdev = 93.055
[info]   CI (99.9%): [19832.668, 20549.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate":
[info]   757.129 ±(99.9%) 13.309 MB/sec [Average]
[info]   (min, avg, max) = (751.882, 757.129, 759.841), stdev = 3.456
[info]   CI (99.9%): [743.820, 770.437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   59037.748 ±(99.9%) 16.326 B/op [Average]
[info]   (min, avg, max) = (59030.267, 59037.748, 59040.023), stdev = 4.240
[info]   CI (99.9%): [59021.422, 59054.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.104), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4.862 ±(99.9%) 11.645 B/op [Average]
[info]   (min, avg, max) = (1.619, 4.862, 8.081), stdev = 3.024
[info]   CI (99.9%): [≈ 0, 16.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   786.776 ±(99.9%) 691.341 MB/sec [Average]
[info]   (min, avg, max) = (653.880, 786.776, 984.575), stdev = 179.539
[info]   CI (99.9%): [95.434, 1478.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   61343.547 ±(99.9%) 53760.610 B/op [Average]
[info]   (min, avg, max) = (50806.811, 61343.547, 76954.215), stdev = 13961.460
[info]   CI (99.9%): [7582.937, 115104.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala
[info] # Run progress: 20.96% complete, ETA 00:45:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12790.533 ops/s
[info] # Warmup Iteration   2: 20135.341 ops/s
[info] # Warmup Iteration   3: 20114.450 ops/s
[info] Iteration   1: 19882.653 ops/s
[info]                  ·gc.alloc.rate:                   564.069 MB/sec
[info]                  ·gc.alloc.rate.norm:              44666.561 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.533 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      647.180 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51247.781 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 20074.011 ops/s
[info]                  ·gc.alloc.rate:                   569.734 MB/sec
[info]                  ·gc.alloc.rate.norm:              44680.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.632 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      651.992 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51130.941 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 20242.776 ops/s
[info]                  ·gc.alloc.rate:                   574.432 MB/sec
[info]                  ·gc.alloc.rate.norm:              44674.875 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.618 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.556 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50906.273 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 20526.243 ops/s
[info]                  ·gc.alloc.rate:                   582.105 MB/sec
[info]                  ·gc.alloc.rate.norm:              44648.021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.272 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25255.508 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 20457.105 ops/s
[info]                  ·gc.alloc.rate:                   580.194 MB/sec
[info]                  ·gc.alloc.rate.norm:              44648.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.203 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      659.928 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50783.834 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala":
[info]   20236.558 ±(99.9%) 1026.519 ops/s [Average]
[info]   (min, avg, max) = (19882.653, 20236.558, 20526.243), stdev = 266.584
[info]   CI (99.9%): [19210.039, 21263.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   574.107 ±(99.9%) 28.622 MB/sec [Average]
[info]   (min, avg, max) = (564.069, 574.107, 582.105), stdev = 7.433
[info]   CI (99.9%): [545.485, 602.729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   44663.500 ±(99.9%) 57.467 B/op [Average]
[info]   (min, avg, max) = (44648.020, 44663.500, 44680.020), stdev = 14.924
[info]   CI (99.9%): [44606.033, 44720.967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.222 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.146), stdev = 0.058
[info]   CI (99.9%): [≈ 0, 0.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3.597 ±(99.9%) 17.631 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.597, 11.533), stdev = 4.579
[info]   CI (99.9%): [≈ 0, 21.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   588.586 ±(99.9%) 558.473 MB/sec [Average]
[info]   (min, avg, max) = (329.272, 588.586, 659.928), stdev = 145.034
[info]   CI (99.9%): [30.113, 1147.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   45864.867 ±(99.9%) 44368.751 B/op [Average]
[info]   (min, avg, max) = (25255.508, 45864.867, 51247.781), stdev = 11522.424
[info]   CI (99.9%): [1496.116, 90233.618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala
[info] # Run progress: 21.32% complete, ETA 00:45:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 78638.711 ops/s
[info] # Warmup Iteration   2: 80521.118 ops/s
[info] # Warmup Iteration   3: 78262.807 ops/s
[info] Iteration   1: 82154.874 ops/s
[info]                  ·gc.alloc.rate:                   213.750 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.006 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.124 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.666 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4899.232 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 82107.747 ops/s
[info]                  ·gc.alloc.rate:                   213.605 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.702 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4903.229 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 82073.581 ops/s
[info]                  ·gc.alloc.rate:                   213.553 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.726 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4904.902 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 82030.358 ops/s
[info]                  ·gc.alloc.rate:      213.471 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 81321.099 ops/s
[info]                  ·gc.alloc.rate:                   211.587 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          ≈ 10⁻⁵ MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     ≈ 10⁻³ B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.721 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4950.370 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala":
[info]   81937.532 ±(99.9%) 1338.516 ops/s [Average]
[info]   (min, avg, max) = (81321.099, 81937.532, 82154.874), stdev = 347.608
[info]   CI (99.9%): [80599.016, 83276.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   213.193 ±(99.9%) 3.479 MB/sec [Average]
[info]   (min, avg, max) = (211.587, 213.193, 213.750), stdev = 0.904
[info]   CI (99.9%): [209.714, 216.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.005, 4096.005, 4096.005), stdev = 0.001
[info]   CI (99.9%): [4096.004, 4096.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.001 ±(99.9%) 0.011 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.006), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.025 ±(99.9%) 0.213 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.124), stdev = 0.055
[info]   CI (99.9%): [≈ 0, 0.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   204.563 ±(99.9%) 440.337 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.563, 255.726), stdev = 114.354
[info]   CI (99.9%): [≈ 0, 644.900] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3931.547 ±(99.9%) 8463.331 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3931.547, 4950.370), stdev = 2197.900
[info]   CI (99.9%): [≈ 0, 12394.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.095
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson
[info] # Run progress: 21.69% complete, ETA 00:45:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9345.852 ops/s
[info] # Warmup Iteration   2: 16354.350 ops/s
[info] # Warmup Iteration   3: 16809.675 ops/s
[info] Iteration   1: 16841.588 ops/s
[info]                  ·gc.alloc.rate:                   1069.498 MB/sec
[info]                  ·gc.alloc.rate.norm:              99984.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.891 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      977.139 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 91349.675 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 16573.955 ops/s
[info]                  ·gc.alloc.rate:                   1052.783 MB/sec
[info]                  ·gc.alloc.rate.norm:              99984.625 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.861 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1312.176 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 124619.614 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 16706.177 ops/s
[info]                  ·gc.alloc.rate:                   1061.017 MB/sec
[info]                  ·gc.alloc.rate.norm:              99984.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.844 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      990.540 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 93342.717 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 16472.535 ops/s
[info]                  ·gc.alloc.rate:                   1046.099 MB/sec
[info]                  ·gc.alloc.rate.norm:              99984.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.989 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      997.142 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 95304.841 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 16551.762 ops/s
[info]                  ·gc.alloc.rate:                   1051.163 MB/sec
[info]                  ·gc.alloc.rate.norm:              99984.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.959 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1001.849 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 95293.421 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson":
[info]   16629.203 ±(99.9%) 560.090 ops/s [Average]
[info]   (min, avg, max) = (16472.535, 16629.203, 16841.588), stdev = 145.453
[info]   CI (99.9%): [16069.114, 17189.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1056.112 ±(99.9%) 35.453 MB/sec [Average]
[info]   (min, avg, max) = (1046.099, 1056.112, 1069.498), stdev = 9.207
[info]   CI (99.9%): [1020.659, 1091.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   99984.147 ±(99.9%) 1.029 B/op [Average]
[info]   (min, avg, max) = (99984.025, 99984.147, 99984.625), stdev = 0.267
[info]   CI (99.9%): [99983.118, 99985.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.160 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.125), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   5.909 ±(99.9%) 15.211 B/op [Average]
[info]   (min, avg, max) = (1.989, 5.909, 11.861), stdev = 3.950
[info]   CI (99.9%): [≈ 0, 21.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1055.769 ±(99.9%) 553.096 MB/sec [Average]
[info]   (min, avg, max) = (977.139, 1055.769, 1312.176), stdev = 143.637
[info]   CI (99.9%): [502.674, 1608.865] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   99982.054 ±(99.9%) 53407.047 B/op [Average]
[info]   (min, avg, max) = (91349.675, 99982.054, 124619.614), stdev = 13869.641
[info]   CI (99.9%): [46575.007, 153389.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.400, 4.000), stdev = 0.894
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce
[info] # Run progress: 22.06% complete, ETA 00:45:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 42983.197 ops/s
[info] # Warmup Iteration   2: 56858.487 ops/s
[info] # Warmup Iteration   3: 58467.287 ops/s
[info] Iteration   1: 58617.872 ops/s
[info]                  ·gc.alloc.rate:                   1073.178 MB/sec
[info]                  ·gc.alloc.rate.norm:              28824.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.677 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      979.213 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26300.249 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 58794.443 ops/s
[info]                  ·gc.alloc.rate:                   1076.432 MB/sec
[info]                  ·gc.alloc.rate.norm:              28824.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.344 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      981.290 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26276.368 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 58598.100 ops/s
[info]                  ·gc.alloc.rate:                   1072.855 MB/sec
[info]                  ·gc.alloc.rate.norm:              28824.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.677 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1315.193 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35334.805 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 57765.294 ops/s
[info]                  ·gc.alloc.rate:                   1057.633 MB/sec
[info]                  ·gc.alloc.rate.norm:              28824.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.269 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      992.545 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27050.132 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 58638.582 ops/s
[info]                  ·gc.alloc.rate:                   1073.654 MB/sec
[info]                  ·gc.alloc.rate.norm:              28824.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.235 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      996.612 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26755.682 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce":
[info]   58482.858 ±(99.9%) 1573.287 ops/s [Average]
[info]   (min, avg, max) = (57765.294, 58482.858, 58794.443), stdev = 408.578
[info]   CI (99.9%): [56909.571, 60056.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1070.750 ±(99.9%) 28.758 MB/sec [Average]
[info]   (min, avg, max) = (1057.633, 1070.750, 1076.432), stdev = 7.468
[info]   CI (99.9%): [1041.993, 1099.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   28824.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (28824.007, 28824.007, 28824.008), stdev = 0.001
[info]   CI (99.9%): [28824.006, 28824.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.083, 0.125), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2.240 ±(99.9%) 2.621 B/op [Average]
[info]   (min, avg, max) = (1.677, 2.240, 3.344), stdev = 0.681
[info]   CI (99.9%): [≈ 0, 4.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1052.971 ±(99.9%) 565.161 MB/sec [Average]
[info]   (min, avg, max) = (979.213, 1052.971, 1315.193), stdev = 146.771
[info]   CI (99.9%): [487.809, 1618.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   28343.447 ±(99.9%) 15101.230 B/op [Average]
[info]   (min, avg, max) = (26276.368, 28343.447, 35334.805), stdev = 3921.741
[info]   CI (99.9%): [13242.218, 43444.677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala
[info] # Run progress: 22.43% complete, ETA 00:45:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 230292.254 ops/s
[info] # Warmup Iteration   2: 252324.196 ops/s
[info] # Warmup Iteration   3: 249081.623 ops/s
[info] Iteration   1: 250505.631 ops/s
[info]                  ·gc.alloc.rate:                   397.150 MB/sec
[info]                  ·gc.alloc.rate.norm:              2496.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.029 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.180 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.404 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3214.065 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 246223.334 ops/s
[info]                  ·gc.alloc.rate:                   390.370 MB/sec
[info]                  ·gc.alloc.rate.norm:              2496.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.685 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23.565 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.651 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2101.376 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 252925.039 ops/s
[info]                  ·gc.alloc.rate:                   400.935 MB/sec
[info]                  ·gc.alloc.rate.norm:              2496.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.259 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.588 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2045.612 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 252302.808 ops/s
[info]                  ·gc.alloc.rate:                   400.014 MB/sec
[info]                  ·gc.alloc.rate.norm:              2496.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.130 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      326.977 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2040.266 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 249297.523 ops/s
[info]                  ·gc.alloc.rate:                   395.257 MB/sec
[info]                  ·gc.alloc.rate.norm:              2496.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.526 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.302 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4125.520 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala":
[info]   250250.867 ±(99.9%) 10288.581 ops/s [Average]
[info]   (min, avg, max) = (246223.334, 250250.867, 252925.039), stdev = 2671.912
[info]   CI (99.9%): [239962.286, 260539.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   396.745 ±(99.9%) 16.252 MB/sec [Average]
[info]   (min, avg, max) = (390.370, 396.745, 400.935), stdev = 4.221
[info]   CI (99.9%): [380.493, 412.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2496.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2496.002, 2496.002, 2496.002), stdev = 0.001
[info]   CI (99.9%): [2496.001, 2496.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.772 ±(99.9%) 6.272 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.772, 3.685), stdev = 1.629
[info]   CI (99.9%): [≈ 0, 7.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4.932 ±(99.9%) 40.113 B/op [Average]
[info]   (min, avg, max) = (0.130, 4.932, 23.565), stdev = 10.417
[info]   CI (99.9%): [≈ 0, 45.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   429.785 ±(99.9%) 570.037 MB/sec [Average]
[info]   (min, avg, max) = (326.977, 429.785, 653.302), stdev = 148.037
[info]   CI (99.9%): [≈ 0, 999.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2705.368 ±(99.9%) 3611.224 B/op [Average]
[info]   (min, avg, max) = (2040.266, 2705.368, 4125.520), stdev = 937.823
[info]   CI (99.9%): [≈ 0, 6316.591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 5.000), stdev = 1.673
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 22.79% complete, ETA 00:44:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 299484.383 ops/s
[info] # Warmup Iteration   2: 333707.528 ops/s
[info] # Warmup Iteration   3: 338423.291 ops/s
[info] Iteration   1: 340012.968 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 338914.369 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 337932.138 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 336896.573 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 335681.392 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc":
[info]   337887.488 ±(99.9%) 6507.165 ops/s [Average]
[info]   (min, avg, max) = (335681.392, 337887.488, 340012.968), stdev = 1689.890
[info]   CI (99.9%): [331380.323, 344394.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson
[info] # Run progress: 23.16% complete, ETA 00:44:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 48702.753 ops/s
[info] # Warmup Iteration   2: 71172.631 ops/s
[info] # Warmup Iteration   3: 72674.054 ops/s
[info] Iteration   1: 73023.305 ops/s
[info]                  ·gc.alloc.rate:                   1138.365 MB/sec
[info]                  ·gc.alloc.rate.norm:              24544.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.795 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1294.462 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27909.577 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 73118.778 ops/s
[info]                  ·gc.alloc.rate:                   1139.875 MB/sec
[info]                  ·gc.alloc.rate.norm:              24544.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.240 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      974.907 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20991.881 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 71726.693 ops/s
[info]                  ·gc.alloc.rate:                   1118.211 MB/sec
[info]                  ·gc.alloc.rate.norm:              24544.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.827 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1306.743 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28682.162 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 72942.819 ops/s
[info]                  ·gc.alloc.rate:                   1137.153 MB/sec
[info]                  ·gc.alloc.rate.norm:              24544.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.898 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      986.524 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21292.890 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 73230.296 ops/s
[info]                  ·gc.alloc.rate:                   1141.825 MB/sec
[info]                  ·gc.alloc.rate.norm:              24544.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.132 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1325.436 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28490.801 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson":
[info]   72808.378 ±(99.9%) 2364.835 ops/s [Average]
[info]   (min, avg, max) = (71726.693, 72808.378, 73230.296), stdev = 614.140
[info]   CI (99.9%): [70443.543, 75173.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1135.086 ±(99.9%) 36.941 MB/sec [Average]
[info]   (min, avg, max) = (1118.211, 1135.086, 1141.825), stdev = 9.593
[info]   CI (99.9%): [1098.145, 1172.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   24544.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (24544.006, 24544.006, 24544.006), stdev = 0.001
[info]   CI (99.9%): [24544.005, 24544.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.092, 0.146), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.978 ±(99.9%) 3.118 B/op [Average]
[info]   (min, avg, max) = (0.898, 1.978, 3.132), stdev = 0.810
[info]   CI (99.9%): [≈ 0, 5.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1177.615 ±(99.9%) 693.609 MB/sec [Average]
[info]   (min, avg, max) = (974.907, 1177.615, 1325.436), stdev = 180.128
[info]   CI (99.9%): [484.005, 1871.224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   25473.462 ±(99.9%) 15269.211 B/op [Average]
[info]   (min, avg, max) = (20991.881, 25473.462, 28682.162), stdev = 3965.366
[info]   CI (99.9%): [10204.251, 40742.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce
[info] # Run progress: 23.53% complete, ETA 00:44:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 30598.965 ops/s
[info] # Warmup Iteration   2: 37943.090 ops/s
[info] # Warmup Iteration   3: 38053.182 ops/s
[info] Iteration   1: 37961.600 ops/s
[info]                  ·gc.alloc.rate:                   1692.737 MB/sec
[info]                  ·gc.alloc.rate.norm:              70200.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.452 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1644.783 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68211.291 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 38201.383 ops/s
[info]                  ·gc.alloc.rate:                   1703.190 MB/sec
[info]                  ·gc.alloc.rate.norm:              70200.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.431 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1658.034 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68338.854 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 38082.666 ops/s
[info]                  ·gc.alloc.rate:                   1698.055 MB/sec
[info]                  ·gc.alloc.rate.norm:              70200.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.581 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1670.143 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69046.120 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 38381.846 ops/s
[info]                  ·gc.alloc.rate:                   1711.624 MB/sec
[info]                  ·gc.alloc.rate.norm:              70200.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.561 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1678.904 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68858.038 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 38327.996 ops/s
[info]                  ·gc.alloc.rate:                   1709.163 MB/sec
[info]                  ·gc.alloc.rate.norm:              70200.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.564 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1687.176 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69296.935 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce":
[info]   38191.098 ±(99.9%) 666.001 ops/s [Average]
[info]   (min, avg, max) = (37961.600, 38191.098, 38381.846), stdev = 172.958
[info]   CI (99.9%): [37525.098, 38857.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate":
[info]   1702.954 ±(99.9%) 29.962 MB/sec [Average]
[info]   (min, avg, max) = (1692.737, 1702.954, 1711.624), stdev = 7.781
[info]   CI (99.9%): [1672.992, 1732.915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   70200.013 ±(99.9%) 0.014 B/op [Average]
[info]   (min, avg, max) = (70200.011, 70200.013, 70200.019), stdev = 0.004
[info]   CI (99.9%): [70199.999, 70200.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.071, 0.083), stdev = 0.011
[info]   CI (99.9%): [0.027, 0.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2.918 ±(99.9%) 1.841 B/op [Average]
[info]   (min, avg, max) = (2.561, 2.918, 3.452), stdev = 0.478
[info]   CI (99.9%): [1.077, 4.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1667.808 ±(99.9%) 64.703 MB/sec [Average]
[info]   (min, avg, max) = (1644.783, 1667.808, 1687.176), stdev = 16.803
[info]   CI (99.9%): [1603.105, 1732.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   68750.248 ±(99.9%) 1783.128 B/op [Average]
[info]   (min, avg, max) = (68211.291, 68750.248, 69296.935), stdev = 463.073
[info]   CI (99.9%): [66967.119, 70533.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala
[info] # Run progress: 23.90% complete, ETA 00:44:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 66960.364 ops/s
[info] # Warmup Iteration   2: 106297.875 ops/s
[info] # Warmup Iteration   3: 104443.626 ops/s
[info] Iteration   1: 105974.526 ops/s
[info]                  ·gc.alloc.rate:                   1168.428 MB/sec
[info]                  ·gc.alloc.rate.norm:              17360.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.546 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1314.421 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19529.097 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 106015.540 ops/s
[info]                  ·gc.alloc.rate:                   1169.246 MB/sec
[info]                  ·gc.alloc.rate.norm:              17360.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.163 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      992.804 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14740.331 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 105915.549 ops/s
[info]                  ·gc.alloc.rate:                   1167.878 MB/sec
[info]                  ·gc.alloc.rate.norm:              17360.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.547 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1332.463 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19806.491 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 106960.071 ops/s
[info]                  ·gc.alloc.rate:                   1179.586 MB/sec
[info]                  ·gc.alloc.rate.norm:              17360.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.225 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1004.640 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14785.311 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 106820.896 ops/s
[info]                  ·gc.alloc.rate:                   1178.042 MB/sec
[info]                  ·gc.alloc.rate.norm:              17360.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.840 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.908 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19804.266 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala":
[info]   106337.317 ±(99.9%) 1958.457 ops/s [Average]
[info]   (min, avg, max) = (105915.549, 106337.317, 106960.071), stdev = 508.605
[info]   CI (99.9%): [104378.859, 108295.774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1172.636 ±(99.9%) 21.898 MB/sec [Average]
[info]   (min, avg, max) = (1167.878, 1172.636, 1179.586), stdev = 5.687
[info]   CI (99.9%): [1150.738, 1194.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   17360.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (17360.004, 17360.004, 17360.004), stdev = 0.001
[info]   CI (99.9%): [17360.003, 17360.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.112 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.112, 0.146), stdev = 0.024
[info]   CI (99.9%): [0.021, 0.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.664 ±(99.9%) 1.362 B/op [Average]
[info]   (min, avg, max) = (1.225, 1.664, 2.163), stdev = 0.354
[info]   CI (99.9%): [0.302, 3.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1197.647 ±(99.9%) 700.606 MB/sec [Average]
[info]   (min, avg, max) = (992.804, 1197.647, 1343.908), stdev = 181.945
[info]   CI (99.9%): [497.041, 1898.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   17733.099 ±(99.9%) 10450.156 B/op [Average]
[info]   (min, avg, max) = (14740.331, 17733.099, 19806.491), stdev = 2713.872
[info]   CI (99.9%): [7282.943, 28183.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 1.000
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala
[info] # Run progress: 24.26% complete, ETA 00:44:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 144574.839 ops/s
[info] # Warmup Iteration   2: 151673.007 ops/s
[info] # Warmup Iteration   3: 150048.016 ops/s
[info] Iteration   1: 151482.563 ops/s
[info]                  ·gc.alloc.rate:      98.532 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 150886.479 ops/s
[info]                  ·gc.alloc.rate:                   98.122 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.098 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21.899 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.679 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2668.256 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 151734.497 ops/s
[info]                  ·gc.alloc.rate:      98.693 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 151741.122 ops/s
[info]                  ·gc.alloc.rate:      98.700 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 150838.580 ops/s
[info]                  ·gc.alloc.rate:                   98.106 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.018 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.192 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.702 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2668.946 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala":
[info]   151336.648 ±(99.9%) 1715.480 ops/s [Average]
[info]   (min, avg, max) = (150838.580, 151336.648, 151741.122), stdev = 445.505
[info]   CI (99.9%): [149621.168, 153052.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   98.431 ±(99.9%) 1.142 MB/sec [Average]
[info]   (min, avg, max) = (98.106, 98.431, 98.700), stdev = 0.297
[info]   CI (99.9%): [97.289, 99.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1024.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1024.003, 1024.003, 1024.003), stdev = 0.001
[info]   CI (99.9%): [1024.002, 1024.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.423 ±(99.9%) 3.606 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.423, 2.098), stdev = 0.936
[info]   CI (99.9%): [≈ 0, 4.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4.418 ±(99.9%) 37.631 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.418, 21.899), stdev = 9.773
[info]   CI (99.9%): [≈ 0, 42.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   102.276 ±(99.9%) 539.273 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 102.276, 255.702), stdev = 140.047
[info]   CI (99.9%): [≈ 0, 641.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1067.440 ±(99.9%) 5628.305 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1067.440, 2668.946), stdev = 1461.653
[info]   CI (99.9%): [≈ 0, 6695.746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 3.000), stdev = 1.414
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson
[info] # Run progress: 24.63% complete, ETA 00:43:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21367.875 ops/s
[info] # Warmup Iteration   2: 39303.282 ops/s
[info] # Warmup Iteration   3: 40042.415 ops/s
[info] Iteration   1: 39781.344 ops/s
[info]                  ·gc.alloc.rate:                   2070.731 MB/sec
[info]                  ·gc.alloc.rate.norm:              81952.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.294 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1991.570 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78819.100 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 40360.750 ops/s
[info]                  ·gc.alloc.rate:                   2107.672 MB/sec
[info]                  ·gc.alloc.rate.norm:              82212.183 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.682 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2009.682 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78389.952 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 40000.437 ops/s
[info]                  ·gc.alloc.rate:                   2082.340 MB/sec
[info]                  ·gc.alloc.rate.norm:              81952.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.095 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2359.695 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 92867.510 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 39762.988 ops/s
[info]                  ·gc.alloc.rate:                   2069.711 MB/sec
[info]                  ·gc.alloc.rate.norm:              81952.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.296 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030.645 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 80405.153 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 40064.696 ops/s
[info]                  ·gc.alloc.rate:                   2085.879 MB/sec
[info]                  ·gc.alloc.rate.norm:              81952.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.250 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.813 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035.362 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 79967.265 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson":
[info]   39994.043 ±(99.9%) 939.538 ops/s [Average]
[info]   (min, avg, max) = (39762.988, 39994.043, 40360.750), stdev = 243.995
[info]   CI (99.9%): [39054.505, 40933.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2083.267 ±(99.9%) 59.161 MB/sec [Average]
[info]   (min, avg, max) = (2069.711, 2083.267, 2107.672), stdev = 15.364
[info]   CI (99.9%): [2024.106, 2142.427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   82004.045 ±(99.9%) 448.032 B/op [Average]
[info]   (min, avg, max) = (81952.010, 82004.045, 82212.183), stdev = 116.352
[info]   CI (99.9%): [81556.014, 82452.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.133 ±(99.9%) 0.269 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.133, 0.250), stdev = 0.070
[info]   CI (99.9%): [≈ 0, 0.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   5.236 ±(99.9%) 10.542 B/op [Average]
[info]   (min, avg, max) = (3.294, 5.236, 9.813), stdev = 2.738
[info]   CI (99.9%): [≈ 0, 15.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   2085.391 ±(99.9%) 594.288 MB/sec [Average]
[info]   (min, avg, max) = (1991.570, 2085.391, 2359.695), stdev = 154.335
[info]   CI (99.9%): [1491.102, 2679.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   82089.796 ±(99.9%) 23413.733 B/op [Average]
[info]   (min, avg, max) = (78389.952, 82089.796, 92867.510), stdev = 6080.472
[info]   CI (99.9%): [58676.063, 105503.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 7.000), stdev = 0.837
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce
[info] # Run progress: 25.00% complete, ETA 00:43:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 63747.855 ops/s
[info] # Warmup Iteration   2: 83539.505 ops/s
[info] # Warmup Iteration   3: 80316.691 ops/s
[info] Iteration   1: 79472.872 ops/s
[info]                  ·gc.alloc.rate:                   610.416 MB/sec
[info]                  ·gc.alloc.rate.norm:              12088.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.423 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67.778 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.846 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12967.858 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 80218.895 ops/s
[info]                  ·gc.alloc.rate:                   616.019 MB/sec
[info]                  ·gc.alloc.rate.norm:              12088.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.665 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12807.115 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 80278.296 ops/s
[info]                  ·gc.alloc.rate:                   616.382 MB/sec
[info]                  ·gc.alloc.rate.norm:              12088.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.632 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      651.230 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12771.428 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 80193.609 ops/s
[info]                  ·gc.alloc.rate:                   615.653 MB/sec
[info]                  ·gc.alloc.rate.norm:              12088.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.226 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      651.807 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12797.874 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 80114.171 ops/s
[info]                  ·gc.alloc.rate:                   615.204 MB/sec
[info]                  ·gc.alloc.rate.norm:              12088.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.818 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.298 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12836.502 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce":
[info]   80055.569 ±(99.9%) 1274.656 ops/s [Average]
[info]   (min, avg, max) = (79472.872, 80055.569, 80278.296), stdev = 331.024
[info]   CI (99.9%): [78780.913, 81330.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate":
[info]   614.735 ±(99.9%) 9.448 MB/sec [Average]
[info]   (min, avg, max) = (610.416, 614.735, 616.382), stdev = 2.454
[info]   CI (99.9%): [605.287, 624.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   12088.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (12088.005, 12088.005, 12088.005), stdev = 0.001
[info]   CI (99.9%): [12088.005, 12088.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.722 ±(99.9%) 5.815 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.722, 3.423), stdev = 1.510
[info]   CI (99.9%): [≈ 0, 6.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   14.291 ±(99.9%) 115.159 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14.291, 67.778), stdev = 29.906
[info]   CI (99.9%): [≈ 0, 129.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   652.769 ±(99.9%) 5.411 MB/sec [Average]
[info]   (min, avg, max) = (651.230, 652.769, 654.846), stdev = 1.405
[info]   CI (99.9%): [647.359, 658.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   12836.155 ±(99.9%) 297.300 B/op [Average]
[info]   (min, avg, max) = (12771.428, 12836.155, 12967.858), stdev = 77.208
[info]   CI (99.9%): [12538.855, 13133.455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala
[info] # Run progress: 25.37% complete, ETA 00:43:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 67718.511 ops/s
[info] # Warmup Iteration   2: 101550.611 ops/s
[info] # Warmup Iteration   3: 103474.273 ops/s
[info] Iteration   1: 103312.236 ops/s
[info]                  ·gc.alloc.rate:                   341.185 MB/sec
[info]                  ·gc.alloc.rate.norm:              5200.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.343 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7793.388 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 103150.729 ops/s
[info]                  ·gc.alloc.rate:                   340.722 MB/sec
[info]                  ·gc.alloc.rate.norm:              5200.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      320.336 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4888.869 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 103953.847 ops/s
[info]                  ·gc.alloc.rate:                   343.394 MB/sec
[info]                  ·gc.alloc.rate.norm:              5200.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.945 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      320.341 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4850.923 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 103716.071 ops/s
[info]                  ·gc.alloc.rate:                   342.541 MB/sec
[info]                  ·gc.alloc.rate.norm:              5200.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.632 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      322.610 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4897.432 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 103837.303 ops/s
[info]                  ·gc.alloc.rate:                   343.068 MB/sec
[info]                  ·gc.alloc.rate.norm:              5200.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      322.727 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4891.679 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala":
[info]   103594.037 ±(99.9%) 1333.161 ops/s [Average]
[info]   (min, avg, max) = (103150.729, 103594.037, 103953.847), stdev = 346.218
[info]   CI (99.9%): [102260.876, 104927.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   342.182 ±(99.9%) 4.518 MB/sec [Average]
[info]   (min, avg, max) = (340.722, 342.182, 343.394), stdev = 1.173
[info]   CI (99.9%): [337.664, 346.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   5200.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5200.004, 5200.004, 5200.004), stdev = 0.001
[info]   CI (99.9%): [5200.003, 5200.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.315 ±(99.9%) 1.717 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.315, 0.945), stdev = 0.446
[info]   CI (99.9%): [≈ 0, 2.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   359.471 ±(99.9%) 326.947 MB/sec [Average]
[info]   (min, avg, max) = (320.336, 359.471, 511.343), stdev = 84.907
[info]   CI (99.9%): [32.525, 686.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5464.458 ±(99.9%) 5013.694 B/op [Average]
[info]   (min, avg, max) = (4850.923, 5464.458, 7793.388), stdev = 1302.040
[info]   CI (99.9%): [450.764, 10478.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 3.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala
[info] # Run progress: 25.74% complete, ETA 00:43:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 103621.092 ops/s
[info] # Warmup Iteration   2: 117509.843 ops/s
[info] # Warmup Iteration   3: 116765.250 ops/s
[info] Iteration   1: 117366.725 ops/s
[info]                  ·gc.alloc.rate:                   359.043 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.020 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.266 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.735 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3430.280 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 117758.497 ops/s
[info]                  ·gc.alloc.rate:                   360.226 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.723 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3418.863 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 117606.555 ops/s
[info]                  ·gc.alloc.rate:                   359.742 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.708 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49.641 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.610 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4399.227 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 116201.005 ops/s
[info]                  ·gc.alloc.rate:                   355.456 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.846 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.948 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8873.774 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 117711.802 ops/s
[info]                  ·gc.alloc.rate:                   360.086 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      326.309 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4364.242 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala":
[info]   117328.917 ±(99.9%) 2496.867 ops/s [Average]
[info]   (min, avg, max) = (116201.005, 117328.917, 117758.497), stdev = 648.428
[info]   CI (99.9%): [114832.050, 119825.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   358.911 ±(99.9%) 7.643 MB/sec [Average]
[info]   (min, avg, max) = (355.456, 358.911, 360.226), stdev = 1.985
[info]   CI (99.9%): [351.268, 366.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   4816.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4816.003, 4816.004, 4816.004), stdev = 0.001
[info]   CI (99.9%): [4816.003, 4816.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.758 ±(99.9%) 6.351 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.758, 3.708), stdev = 1.649
[info]   CI (99.9%): [≈ 0, 7.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   10.150 ±(99.9%) 85.016 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.150, 49.641), stdev = 22.078
[info]   CI (99.9%): [≈ 0, 95.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   364.265 ±(99.9%) 640.785 MB/sec [Average]
[info]   (min, avg, max) = (255.723, 364.265, 654.948), stdev = 166.410
[info]   CI (99.9%): [≈ 0, 1005.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4897.277 ±(99.9%) 8755.981 B/op [Average]
[info]   (min, avg, max) = (3418.863, 4897.277, 8873.774), stdev = 2273.900
[info]   CI (99.9%): [≈ 0, 13653.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 26.10% complete, ETA 00:42:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 104932.065 ops/s
[info] # Warmup Iteration   2: 116609.325 ops/s
[info] # Warmup Iteration   3: 116776.327 ops/s
[info] Iteration   1: 117899.925 ops/s
[info]                  ·gc.alloc.rate:                   267.781 MB/sec
[info]                  ·gc.alloc.rate.norm:              3576.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.014 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.192 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.705 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3414.746 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 117028.782 ops/s
[info]                  ·gc.alloc.rate:                   265.805 MB/sec
[info]                  ·gc.alloc.rate.norm:              3576.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.703 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3440.098 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 117708.894 ops/s
[info]                  ·gc.alloc.rate:                   267.369 MB/sec
[info]                  ·gc.alloc.rate.norm:              3576.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.035 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.474 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.698 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3419.908 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 117514.681 ops/s
[info]                  ·gc.alloc.rate:                   266.940 MB/sec
[info]                  ·gc.alloc.rate.norm:              3576.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.707 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49.662 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.632 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4402.446 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 117922.650 ops/s
[info]                  ·gc.alloc.rate:      267.848 MB/sec
[info]                  ·gc.alloc.rate.norm: 3576.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc":
[info]   117614.986 ±(99.9%) 1412.670 ops/s [Average]
[info]   (min, avg, max) = (117028.782, 117614.986, 117922.650), stdev = 366.866
[info]   CI (99.9%): [116202.317, 119027.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   267.149 ±(99.9%) 3.214 MB/sec [Average]
[info]   (min, avg, max) = (265.805, 267.149, 267.848), stdev = 0.835
[info]   CI (99.9%): [263.935, 270.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   3576.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3576.003, 3576.003, 3576.003), stdev = 0.001
[info]   CI (99.9%): [3576.003, 3576.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   0.751 ±(99.9%) 6.363 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.751, 3.707), stdev = 1.652
[info]   CI (99.9%): [≈ 0, 7.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   10.066 ±(99.9%) 85.238 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.066, 49.662), stdev = 22.136
[info]   CI (99.9%): [≈ 0, 95.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   219.148 ±(99.9%) 487.153 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 219.148, 328.632), stdev = 126.512
[info]   CI (99.9%): [≈ 0, 706.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   2935.440 ±(99.9%) 6525.688 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2935.440, 4402.446), stdev = 1694.700
[info]   CI (99.9%): [≈ 0, 9461.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 3.000), stdev = 1.304
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce
[info] # Run progress: 26.47% complete, ETA 00:42:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6135.356 ops/s
[info] # Warmup Iteration   2: 9823.011 ops/s
[info] # Warmup Iteration   3: 10003.258 ops/s
[info] Iteration   1: 9986.147 ops/s
[info]                  ·gc.alloc.rate:                   1639.651 MB/sec
[info]                  ·gc.alloc.rate.norm:              258488.044 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19.682 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1643.032 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 259021.051 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 10023.658 ops/s
[info]                  ·gc.alloc.rate:                   1645.611 MB/sec
[info]                  ·gc.alloc.rate.norm:              258488.041 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16.342 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1654.903 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 259947.701 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 10003.789 ops/s
[info]                  ·gc.alloc.rate:                   1642.451 MB/sec
[info]                  ·gc.alloc.rate.norm:              258488.047 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.549 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1666.847 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 262327.372 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 9914.392 ops/s
[info]                  ·gc.alloc.rate:                   1627.980 MB/sec
[info]                  ·gc.alloc.rate.norm:              258495.237 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16.521 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1677.096 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 266294.107 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 10018.576 ops/s
[info]                  ·gc.alloc.rate:                   1645.210 MB/sec
[info]                  ·gc.alloc.rate.norm:              258504.041 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13.078 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1684.690 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 264707.372 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce":
[info]   9989.312 ±(99.9%) 170.787 ops/s [Average]
[info]   (min, avg, max) = (9914.392, 9989.312, 10023.658), stdev = 44.353
[info]   CI (99.9%): [9818.526, 10160.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate":
[info]   1640.181 ±(99.9%) 27.839 MB/sec [Average]
[info]   (min, avg, max) = (1627.980, 1640.181, 1645.611), stdev = 7.230
[info]   CI (99.9%): [1612.341, 1668.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   258492.682 ±(99.9%) 27.234 B/op [Average]
[info]   (min, avg, max) = (258488.041, 258492.682, 258504.041), stdev = 7.073
[info]   CI (99.9%): [258465.448, 258519.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.092, 0.125), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   14.435 ±(99.9%) 19.210 B/op [Average]
[info]   (min, avg, max) = (6.549, 14.435, 19.682), stdev = 4.989
[info]   CI (99.9%): [≈ 0, 33.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1665.314 ±(99.9%) 64.476 MB/sec [Average]
[info]   (min, avg, max) = (1643.032, 1665.314, 1684.690), stdev = 16.744
[info]   CI (99.9%): [1600.838, 1729.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   262459.521 ±(99.9%) 11853.896 B/op [Average]
[info]   (min, avg, max) = (259021.051, 262459.521, 266294.107), stdev = 3078.419
[info]   CI (99.9%): [250605.624, 274313.417] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 0.837
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala
[info] # Run progress: 26.84% complete, ETA 00:42:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4818.521 ops/s
[info] # Warmup Iteration   2: 10259.114 ops/s
[info] # Warmup Iteration   3: 10414.568 ops/s
[info] Iteration   1: 10506.963 ops/s
[info]                  ·gc.alloc.rate:                   1623.030 MB/sec
[info]                  ·gc.alloc.rate.norm:              243136.042 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.471 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1657.341 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 248276.059 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 10421.648 ops/s
[info]                  ·gc.alloc.rate:                   1609.821 MB/sec
[info]                  ·gc.alloc.rate.norm:              243136.042 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.574 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1670.070 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 252235.641 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 10411.563 ops/s
[info]                  ·gc.alloc.rate:                   1608.005 MB/sec
[info]                  ·gc.alloc.rate.norm:              243136.039 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.439 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.026 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 203070.359 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 10509.397 ops/s
[info]                  ·gc.alloc.rate:                   1622.994 MB/sec
[info]                  ·gc.alloc.rate.norm:              243154.042 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1685.830 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 252567.963 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 10541.193 ops/s
[info]                  ·gc.alloc.rate:                   1628.294 MB/sec
[info]                  ·gc.alloc.rate.norm:              243168.039 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.215 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1690.766 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 252497.578 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala":
[info]   10478.153 ±(99.9%) 222.933 ops/s [Average]
[info]   (min, avg, max) = (10411.563, 10478.153, 10541.193), stdev = 57.895
[info]   CI (99.9%): [10255.220, 10701.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1618.429 ±(99.9%) 34.553 MB/sec [Average]
[info]   (min, avg, max) = (1608.005, 1618.429, 1628.294), stdev = 8.973
[info]   CI (99.9%): [1583.876, 1652.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   243146.041 ±(99.9%) 56.063 B/op [Average]
[info]   (min, avg, max) = (243136.039, 243146.041, 243168.039), stdev = 14.559
[info]   CI (99.9%): [243089.978, 243202.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.083), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   8.140 ±(99.9%) 20.199 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.140, 12.574), stdev = 5.246
[info]   CI (99.9%): [≈ 0, 28.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1609.407 ±(99.9%) 575.656 MB/sec [Average]
[info]   (min, avg, max) = (1343.026, 1609.407, 1690.766), stdev = 149.496
[info]   CI (99.9%): [1033.751, 2185.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   241729.520 ±(99.9%) 83506.374 B/op [Average]
[info]   (min, avg, max) = (203070.359, 241729.520, 252567.963), stdev = 21686.340
[info]   CI (99.9%): [158223.146, 325235.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala
[info] # Run progress: 27.21% complete, ETA 00:42:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 112279.325 ops/s
[info] # Warmup Iteration   2: 118907.503 ops/s
[info] # Warmup Iteration   3: 120041.458 ops/s
[info] Iteration   1: 120344.969 ops/s
[info]                  ·gc.alloc.rate:                   313.343 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.055 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.717 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      510.411 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6672.077 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 120623.944 ops/s
[info]                  ·gc.alloc.rate:                   313.857 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.749 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3337.670 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 117800.101 ops/s
[info]                  ·gc.alloc.rate:                   306.483 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.659 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35.532 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      331.287 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4427.507 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 120793.956 ops/s
[info]                  ·gc.alloc.rate:                   314.288 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.814 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      331.317 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4317.931 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 120795.899 ops/s
[info]                  ·gc.alloc.rate:                   314.335 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.359 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4304.806 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala":
[info]   120071.774 ±(99.9%) 4940.966 ops/s [Average]
[info]   (min, avg, max) = (117800.101, 120071.774, 120795.899), stdev = 1283.153
[info]   CI (99.9%): [115130.808, 125012.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   312.461 ±(99.9%) 12.961 MB/sec [Average]
[info]   (min, avg, max) = (306.483, 312.461, 314.335), stdev = 3.366
[info]   CI (99.9%): [299.500, 325.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.003, 4096.004, 4096.004), stdev = 0.001
[info]   CI (99.9%): [4096.003, 4096.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.555 ±(99.9%) 4.529 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.555, 2.659), stdev = 1.176
[info]   CI (99.9%): [≈ 0, 5.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   7.412 ±(99.9%) 60.547 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.412, 35.532), stdev = 15.724
[info]   CI (99.9%): [≈ 0, 67.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   351.825 ±(99.9%) 363.694 MB/sec [Average]
[info]   (min, avg, max) = (255.749, 351.825, 510.411), stdev = 94.450
[info]   CI (99.9%): [≈ 0, 715.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4611.998 ±(99.9%) 4748.453 B/op [Average]
[info]   (min, avg, max) = (3337.670, 4611.998, 6672.077), stdev = 1233.158
[info]   CI (99.9%): [≈ 0, 9360.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 5.000), stdev = 1.673
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson
[info] # Run progress: 27.57% complete, ETA 00:42:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2304.533 ops/s
[info] # Warmup Iteration   2: 5796.309 ops/s
[info] # Warmup Iteration   3: 5912.510 ops/s
[info] Iteration   1: 5985.579 ops/s
[info]                  ·gc.alloc.rate:                   1580.096 MB/sec
[info]                  ·gc.alloc.rate.norm:              415600.073 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.945 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1654.113 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 435067.981 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 6040.505 ops/s
[info]                  ·gc.alloc.rate:                   1594.703 MB/sec
[info]                  ·gc.alloc.rate.norm:              415600.068 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16.270 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1334.508 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 347789.855 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 6026.384 ops/s
[info]                  ·gc.alloc.rate:                   1590.844 MB/sec
[info]                  ·gc.alloc.rate.norm:              415600.073 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.436 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1677.285 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 438182.307 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 6016.776 ops/s
[info]                  ·gc.alloc.rate:                   1588.383 MB/sec
[info]                  ·gc.alloc.rate.norm:              415600.073 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16.332 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1685.184 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 440928.037 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 6031.167 ops/s
[info]                  ·gc.alloc.rate:                   1592.249 MB/sec
[info]                  ·gc.alloc.rate.norm:              415600.068 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27.157 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1690.026 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 441121.480 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson":
[info]   6020.082 ±(99.9%) 81.254 ops/s [Average]
[info]   (min, avg, max) = (5985.579, 6020.082, 6040.505), stdev = 21.101
[info]   CI (99.9%): [5938.828, 6101.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1589.255 ±(99.9%) 21.595 MB/sec [Average]
[info]   (min, avg, max) = (1580.096, 1589.255, 1594.703), stdev = 5.608
[info]   CI (99.9%): [1567.660, 1610.850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   415600.071 ±(99.9%) 0.012 B/op [Average]
[info]   (min, avg, max) = (415600.068, 415600.071, 415600.073), stdev = 0.003
[info]   CI (99.9%): [415600.059, 415600.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.058, 0.104), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   15.228 ±(99.9%) 30.976 B/op [Average]
[info]   (min, avg, max) = (5.436, 15.228, 27.157), stdev = 8.044
[info]   CI (99.9%): [≈ 0, 46.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1608.223 ±(99.9%) 591.579 MB/sec [Average]
[info]   (min, avg, max) = (1334.508, 1608.223, 1690.026), stdev = 153.631
[info]   CI (99.9%): [1016.644, 2199.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   420617.932 ±(99.9%) 157054.070 B/op [Average]
[info]   (min, avg, max) = (347789.855, 420617.932, 441121.480), stdev = 40786.443
[info]   CI (99.9%): [263563.862, 577672.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce
[info] # Run progress: 27.94% complete, ETA 00:41:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17344.824 ops/s
[info] # Warmup Iteration   2: 25042.023 ops/s
[info] # Warmup Iteration   3: 25179.573 ops/s
[info] Iteration   1: 25100.845 ops/s
[info]                  ·gc.alloc.rate:                   1410.617 MB/sec
[info]                  ·gc.alloc.rate.norm:              88480.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.610 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1308.706 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 82087.710 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 25133.174 ops/s
[info]                  ·gc.alloc.rate:                   1412.554 MB/sec
[info]                  ·gc.alloc.rate.norm:              88470.506 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.518 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1317.020 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 82487.033 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 25168.768 ops/s
[info]                  ·gc.alloc.rate:                   1414.112 MB/sec
[info]                  ·gc.alloc.rate.norm:              88456.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.905 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1658.073 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 103716.304 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 25218.566 ops/s
[info]                  ·gc.alloc.rate:                   1417.154 MB/sec
[info]                  ·gc.alloc.rate.norm:              88456.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.299 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1335.387 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 83352.293 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 25225.553 ops/s
[info]                  ·gc.alloc.rate:                   1417.367 MB/sec
[info]                  ·gc.alloc.rate.norm:              88456.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.896 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.771 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 83738.136 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce":
[info]   25169.381 ±(99.9%) 207.212 ops/s [Average]
[info]   (min, avg, max) = (25100.845, 25169.381, 25225.553), stdev = 53.812
[info]   CI (99.9%): [24962.169, 25376.593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1414.361 ±(99.9%) 11.256 MB/sec [Average]
[info]   (min, avg, max) = (1410.617, 1414.361, 1417.367), stdev = 2.923
[info]   CI (99.9%): [1403.105, 1425.617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   88463.715 ±(99.9%) 42.605 B/op [Average]
[info]   (min, avg, max) = (88456.016, 88463.715, 88480.018), stdev = 11.064
[info]   CI (99.9%): [88421.109, 88506.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.058, 0.104), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3.646 ±(99.9%) 7.446 B/op [Average]
[info]   (min, avg, max) = (1.299, 3.646, 6.518), stdev = 1.934
[info]   CI (99.9%): [≈ 0, 11.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1392.191 ±(99.9%) 574.645 MB/sec [Average]
[info]   (min, avg, max) = (1308.706, 1392.191, 1658.073), stdev = 149.233
[info]   CI (99.9%): [817.546, 1966.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   87076.295 ±(99.9%) 35908.608 B/op [Average]
[info]   (min, avg, max) = (82087.710, 87076.295, 103716.304), stdev = 9325.351
[info]   CI (99.9%): [51167.688, 122984.903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala
[info] # Run progress: 28.31% complete, ETA 00:41:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 243423.734 ops/s
[info] # Warmup Iteration   2: 266786.412 ops/s
[info] # Warmup Iteration   3: 270902.449 ops/s
[info] Iteration   1: 271446.407 ops/s
[info]                  ·gc.alloc.rate:                   598.601 MB/sec
[info]                  ·gc.alloc.rate.norm:              3472.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.738 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21.683 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.169 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3811.712 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 272352.788 ops/s
[info]                  ·gc.alloc.rate:                   600.587 MB/sec
[info]                  ·gc.alloc.rate.norm:              3472.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.241 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.895 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3780.178 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 272184.143 ops/s
[info]                  ·gc.alloc.rate:                   600.198 MB/sec
[info]                  ·gc.alloc.rate.norm:              3472.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.602 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.534 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3774.752 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 272430.455 ops/s
[info]                  ·gc.alloc.rate:                   600.803 MB/sec
[info]                  ·gc.alloc.rate.norm:              3472.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.481 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.607 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3771.372 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 273075.212 ops/s
[info]                  ·gc.alloc.rate:                   602.221 MB/sec
[info]                  ·gc.alloc.rate.norm:              3472.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      326.966 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1885.065 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala":
[info]   272297.801 ±(99.9%) 2247.585 ops/s [Average]
[info]   (min, avg, max) = (271446.407, 272297.801, 273075.212), stdev = 583.691
[info]   CI (99.9%): [270050.216, 274545.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   600.482 ±(99.9%) 5.005 MB/sec [Average]
[info]   (min, avg, max) = (598.601, 600.482, 602.221), stdev = 1.300
[info]   CI (99.9%): [595.477, 605.487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3472.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3472.001, 3472.002, 3472.002), stdev = 0.001
[info]   CI (99.9%): [3472.001, 3472.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.793 ±(99.9%) 6.341 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.793, 3.738), stdev = 1.647
[info]   CI (99.9%): [≈ 0, 7.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4.601 ±(99.9%) 36.781 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.601, 21.683), stdev = 9.552
[info]   CI (99.9%): [≈ 0, 41.382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   588.634 ±(99.9%) 563.307 MB/sec [Average]
[info]   (min, avg, max) = (326.966, 588.634, 657.169), stdev = 146.289
[info]   CI (99.9%): [25.327, 1151.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3404.616 ±(99.9%) 3271.529 B/op [Average]
[info]   (min, avg, max) = (1885.065, 3404.616, 3811.712), stdev = 849.606
[info]   CI (99.9%): [133.087, 6676.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 4.000), stdev = 1.225
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 28.68% complete, ETA 00:41:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 268540.564 ops/s
[info] # Warmup Iteration   2: 292304.389 ops/s
[info] # Warmup Iteration   3: 295864.061 ops/s
[info] Iteration   1: 295783.044 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 296429.684 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 297282.535 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 296097.948 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 295498.988 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc":
[info]   296218.440 ±(99.9%) 2652.910 ops/s [Average]
[info]   (min, avg, max) = (295498.988, 296218.440, 297282.535), stdev = 688.952
[info]   CI (99.9%): [293565.530, 298871.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson
[info] # Run progress: 29.04% complete, ETA 00:41:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18001.850 ops/s
[info] # Warmup Iteration   2: 28016.014 ops/s
[info] # Warmup Iteration   3: 28305.248 ops/s
[info] Iteration   1: 28145.113 ops/s
[info]                  ·gc.alloc.rate:                   1480.188 MB/sec
[info]                  ·gc.alloc.rate.norm:              82792.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.492 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1623.502 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 90808.052 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 28288.197 ops/s
[info]                  ·gc.alloc.rate:                   1487.491 MB/sec
[info]                  ·gc.alloc.rate.norm:              82792.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.632 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1308.815 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 72847.112 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 28315.794 ops/s
[info]                  ·gc.alloc.rate:                   1489.164 MB/sec
[info]                  ·gc.alloc.rate.norm:              82792.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.471 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1651.787 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 91833.237 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 28336.286 ops/s
[info]                  ·gc.alloc.rate:                   1490.180 MB/sec
[info]                  ·gc.alloc.rate.norm:              82792.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.624 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1331.786 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 73991.885 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 28210.111 ops/s
[info]                  ·gc.alloc.rate:                   1483.686 MB/sec
[info]                  ·gc.alloc.rate.norm:              82792.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.968 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1674.595 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 93445.008 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson":
[info]   28259.100 ±(99.9%) 306.914 ops/s [Average]
[info]   (min, avg, max) = (28145.113, 28259.100, 28336.286), stdev = 79.705
[info]   CI (99.9%): [27952.186, 28566.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1486.142 ±(99.9%) 15.963 MB/sec [Average]
[info]   (min, avg, max) = (1480.188, 1486.142, 1490.180), stdev = 4.146
[info]   CI (99.9%): [1470.179, 1502.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   82792.015 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (82792.014, 82792.015, 82792.018), stdev = 0.002
[info]   CI (99.9%): [82792.009, 82792.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.083, 0.125), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4.637 ±(99.9%) 5.481 B/op [Average]
[info]   (min, avg, max) = (3.471, 4.637, 6.968), stdev = 1.423
[info]   CI (99.9%): [≈ 0, 10.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1518.097 ±(99.9%) 699.466 MB/sec [Average]
[info]   (min, avg, max) = (1308.815, 1518.097, 1674.595), stdev = 181.649
[info]   CI (99.9%): [818.631, 2217.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   84585.059 ±(99.9%) 39445.856 B/op [Average]
[info]   (min, avg, max) = (72847.112, 84585.059, 93445.008), stdev = 10243.964
[info]   CI (99.9%): [45139.202, 124030.915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce
[info] # Run progress: 29.41% complete, ETA 00:41:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 113668.921 ops/s
[info] # Warmup Iteration   2: 138317.237 ops/s
[info] # Warmup Iteration   3: 139460.864 ops/s
[info] Iteration   1: 139692.739 ops/s
[info]                  ·gc.alloc.rate:                   2274.562 MB/sec
[info]                  ·gc.alloc.rate.norm:              25640.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.704 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2321.823 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26172.749 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 140978.697 ops/s
[info]                  ·gc.alloc.rate:                   2296.088 MB/sec
[info]                  ·gc.alloc.rate.norm:              25640.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.859 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2344.613 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26181.863 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 140740.807 ops/s
[info]                  ·gc.alloc.rate:                   2292.086 MB/sec
[info]                  ·gc.alloc.rate.norm:              25640.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.698 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2359.700 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26396.347 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 139740.394 ops/s
[info]                  ·gc.alloc.rate:                   2275.797 MB/sec
[info]                  ·gc.alloc.rate.norm:              25640.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.407 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2369.631 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26697.177 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 139571.892 ops/s
[info]                  ·gc.alloc.rate:                   2273.149 MB/sec
[info]                  ·gc.alloc.rate.norm:              25640.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.643 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2036.467 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22970.346 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce":
[info]   140144.906 ±(99.9%) 2544.585 ops/s [Average]
[info]   (min, avg, max) = (139571.892, 140144.906, 140978.697), stdev = 660.821
[info]   CI (99.9%): [137600.320, 142689.491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   2282.337 ±(99.9%) 41.819 MB/sec [Average]
[info]   (min, avg, max) = (2273.149, 2282.337, 2296.088), stdev = 10.860
[info]   CI (99.9%): [2240.518, 2324.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   25640.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (25640.003, 25640.003, 25640.003), stdev = 0.001
[info]   CI (99.9%): [25640.002, 25640.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.112 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.112, 0.166), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1.262 ±(99.9%) 2.067 B/op [Average]
[info]   (min, avg, max) = (0.698, 1.262, 1.859), stdev = 0.537
[info]   CI (99.9%): [≈ 0, 3.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2286.447 ±(99.9%) 542.552 MB/sec [Average]
[info]   (min, avg, max) = (2036.467, 2286.447, 2369.631), stdev = 140.899
[info]   CI (99.9%): [1743.895, 2828.999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   25683.697 ±(99.9%) 5898.097 B/op [Average]
[info]   (min, avg, max) = (22970.346, 25683.697, 26697.177), stdev = 1531.717
[info]   CI (99.9%): [19785.599, 31581.794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.count":
[info]   34.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala
[info] # Run progress: 29.78% complete, ETA 00:40:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 195570.907 ops/s
[info] # Warmup Iteration   2: 304780.085 ops/s
[info] # Warmup Iteration   3: 305314.087 ops/s
[info] Iteration   1: 305278.487 ops/s
[info]                  ·gc.alloc.rate:                   431.463 MB/sec
[info]                  ·gc.alloc.rate.norm:              2224.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.429 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      578.837 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2983.654 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 301531.512 ops/s
[info]                  ·gc.alloc.rate:                   425.989 MB/sec
[info]                  ·gc.alloc.rate.norm:              2224.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      323.669 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1689.810 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 300802.109 ops/s
[info]                  ·gc.alloc.rate:                   424.940 MB/sec
[info]                  ·gc.alloc.rate.norm:              2224.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.327 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      325.634 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1704.265 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 303913.632 ops/s
[info]                  ·gc.alloc.rate:                   429.298 MB/sec
[info]                  ·gc.alloc.rate.norm:              2224.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      325.602 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1686.801 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 299198.097 ops/s
[info]                  ·gc.alloc.rate:                   422.624 MB/sec
[info]                  ·gc.alloc.rate.norm:              2224.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.548 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.570 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3444.583 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala":
[info]   302144.767 ±(99.9%) 9394.852 ops/s [Average]
[info]   (min, avg, max) = (299198.097, 302144.767, 305278.487), stdev = 2439.813
[info]   CI (99.9%): [292749.915, 311539.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   426.863 ±(99.9%) 13.547 MB/sec [Average]
[info]   (min, avg, max) = (422.624, 426.863, 431.463), stdev = 3.518
[info]   CI (99.9%): [413.315, 440.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2224.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2224.001, 2224.001, 2224.001), stdev = 0.001
[info]   CI (99.9%): [2224.001, 2224.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.184 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.104), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.261 ±(99.9%) 0.964 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.261, 0.548), stdev = 0.250
[info]   CI (99.9%): [≈ 0, 1.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   441.662 ±(99.9%) 623.880 MB/sec [Average]
[info]   (min, avg, max) = (323.669, 441.662, 654.570), stdev = 162.020
[info]   CI (99.9%): [≈ 0, 1065.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2301.823 ±(99.9%) 3267.767 B/op [Average]
[info]   (min, avg, max) = (1686.801, 2301.823, 3444.583), stdev = 848.629
[info]   CI (99.9%): [≈ 0, 5569.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 1.095
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala
[info] # Run progress: 30.15% complete, ETA 00:40:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 696264.201 ops/s
[info] # Warmup Iteration   2: 738820.158 ops/s
[info] # Warmup Iteration   3: 738022.120 ops/s
[info] Iteration   1: 741979.030 ops/s
[info]                  ·gc.alloc.rate:                   482.642 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.232 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.857 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      585.401 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1242.019 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 745800.040 ops/s
[info]                  ·gc.alloc.rate:                   485.171 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.044 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.696 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 695.855 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 743044.412 ops/s
[info]                  ·gc.alloc.rate:                   483.258 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.132 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.524 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1391.145 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 727210.763 ops/s
[info]                  ·gc.alloc.rate:                   473.045 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.045 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.655 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 709.274 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 743613.591 ops/s
[info]                  ·gc.alloc.rate:                   483.690 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.088 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.626 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1387.997 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala":
[info]   740329.567 ±(99.9%) 28745.065 ops/s [Average]
[info]   (min, avg, max) = (727210.763, 740329.567, 745800.040), stdev = 7465.002
[info]   CI (99.9%): [711584.502, 769074.632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   481.561 ±(99.9%) 18.680 MB/sec [Average]
[info]   (min, avg, max) = (473.045, 481.561, 485.171), stdev = 4.851
[info]   CI (99.9%): [462.881, 500.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1024.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1024.001, 1024.001, 1024.001), stdev = 0.001
[info]   CI (99.9%): [1024.000, 1024.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.675 ±(99.9%) 5.503 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.675, 3.232), stdev = 1.429
[info]   CI (99.9%): [≈ 0, 6.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.433 ±(99.9%) 11.675 B/op [Average]
[info]   (min, avg, max) = (0.044, 1.433, 6.857), stdev = 3.032
[info]   CI (99.9%): [≈ 0, 13.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   510.980 ±(99.9%) 650.394 MB/sec [Average]
[info]   (min, avg, max) = (327.655, 510.980, 656.524), stdev = 168.905
[info]   CI (99.9%): [≈ 0, 1161.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1085.258 ±(99.9%) 1365.202 B/op [Average]
[info]   (min, avg, max) = (695.855, 1085.258, 1391.145), stdev = 354.539
[info]   CI (99.9%): [≈ 0, 2450.460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 5.000), stdev = 1.643
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson
[info] # Run progress: 30.51% complete, ETA 00:40:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 41199.258 ops/s
[info] # Warmup Iteration   2: 68788.893 ops/s
[info] # Warmup Iteration   3: 67758.962 ops/s
[info] Iteration   1: 69388.117 ops/s
[info]                  ·gc.alloc.rate:                   2953.056 MB/sec
[info]                  ·gc.alloc.rate.norm:              67008.351 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.833 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3022.832 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68591.652 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 69697.070 ops/s
[info]                  ·gc.alloc.rate:                   2960.905 MB/sec
[info]                  ·gc.alloc.rate.norm:              66856.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.880 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2706.789 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61118.170 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 67670.108 ops/s
[info]                  ·gc.alloc.rate:                   2873.547 MB/sec
[info]                  ·gc.alloc.rate.norm:              66856.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.936 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3053.515 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 71043.162 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 69456.943 ops/s
[info]                  ·gc.alloc.rate:                   2957.264 MB/sec
[info]                  ·gc.alloc.rate.norm:              67000.922 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.885 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3057.751 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69277.601 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 69728.267 ops/s
[info]                  ·gc.alloc.rate:                   2961.235 MB/sec
[info]                  ·gc.alloc.rate.norm:              66856.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.349 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2722.342 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61462.494 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson":
[info]   69188.101 ±(99.9%) 3316.594 ops/s [Average]
[info]   (min, avg, max) = (67670.108, 69188.101, 69728.267), stdev = 861.309
[info]   CI (99.9%): [65871.507, 72504.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2941.201 ±(99.9%) 146.189 MB/sec [Average]
[info]   (min, avg, max) = (2873.547, 2941.201, 2961.235), stdev = 37.965
[info]   CI (99.9%): [2795.013, 3087.390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   66915.458 ±(99.9%) 313.637 B/op [Average]
[info]   (min, avg, max) = (66856.006, 66915.458, 67008.351), stdev = 81.451
[info]   CI (99.9%): [66601.821, 67229.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.096 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.096, 0.125), stdev = 0.019
[info]   CI (99.9%): [0.024, 0.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2.177 ±(99.9%) 1.600 B/op [Average]
[info]   (min, avg, max) = (1.880, 2.177, 2.833), stdev = 0.416
[info]   CI (99.9%): [0.577, 3.777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   2912.646 ±(99.9%) 698.533 MB/sec [Average]
[info]   (min, avg, max) = (2706.789, 2912.646, 3057.751), stdev = 181.407
[info]   CI (99.9%): [2214.113, 3611.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   66298.616 ±(99.9%) 17944.598 B/op [Average]
[info]   (min, avg, max) = (61118.170, 66298.616, 71043.162), stdev = 4660.155
[info]   CI (99.9%): [48354.018, 84243.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.count":
[info]   43.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.600, 9.000), stdev = 0.548
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.800, 10.000), stdev = 0.837
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce
[info] # Run progress: 30.88% complete, ETA 00:40:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 186268.302 ops/s
[info] # Warmup Iteration   2: 227470.452 ops/s
[info] # Warmup Iteration   3: 228995.797 ops/s
[info] Iteration   1: 227627.094 ops/s
[info]                  ·gc.alloc.rate:                   1600.752 MB/sec
[info]                  ·gc.alloc.rate.norm:              11072.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.432 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1640.707 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11348.355 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 229011.960 ops/s
[info]                  ·gc.alloc.rate:                   1610.514 MB/sec
[info]                  ·gc.alloc.rate.norm:              11072.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.858 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1654.779 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11376.317 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 227050.860 ops/s
[info]                  ·gc.alloc.rate:                   1596.737 MB/sec
[info]                  ·gc.alloc.rate.norm:              11072.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.577 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1332.717 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9241.250 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 228280.005 ops/s
[info]                  ·gc.alloc.rate:                   1605.580 MB/sec
[info]                  ·gc.alloc.rate.norm:              11072.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.574 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1675.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11552.007 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 228909.194 ops/s
[info]                  ·gc.alloc.rate:                   1610.395 MB/sec
[info]                  ·gc.alloc.rate.norm:              11072.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.716 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1684.558 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11581.896 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce":
[info]   228175.822 ±(99.9%) 3229.986 ops/s [Average]
[info]   (min, avg, max) = (227050.860, 228175.822, 229011.960), stdev = 838.817
[info]   CI (99.9%): [224945.837, 231405.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1604.796 ±(99.9%) 23.260 MB/sec [Average]
[info]   (min, avg, max) = (1596.737, 1604.796, 1610.514), stdev = 6.041
[info]   CI (99.9%): [1581.536, 1628.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   11072.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11072.002, 11072.002, 11072.002), stdev = 0.001
[info]   CI (99.9%): [11072.002, 11072.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.092, 0.125), stdev = 0.024
[info]   CI (99.9%): [≈ 10⁻⁴, 0.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.631 ±(99.9%) 0.623 B/op [Average]
[info]   (min, avg, max) = (0.432, 0.631, 0.858), stdev = 0.162
[info]   CI (99.9%): [0.008, 1.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1597.589 ±(99.9%) 573.965 MB/sec [Average]
[info]   (min, avg, max) = (1332.717, 1597.589, 1684.558), stdev = 149.057
[info]   CI (99.9%): [1023.624, 2171.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   11019.965 ±(99.9%) 3849.435 B/op [Average]
[info]   (min, avg, max) = (9241.250, 11019.965, 11581.896), stdev = 999.686
[info]   CI (99.9%): [7170.530, 14869.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala
[info] # Run progress: 31.25% complete, ETA 00:39:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 585369.874 ops/s
[info] # Warmup Iteration   2: 859748.238 ops/s
[info] # Warmup Iteration   3: 828083.838 ops/s
[info] Iteration   1: 858991.419 ops/s
[info]                  ·gc.alloc.rate:                   676.417 MB/sec
[info]                  ·gc.alloc.rate.norm:              1240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.229 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      643.109 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1178.942 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 862098.298 ops/s
[info]                  ·gc.alloc.rate:                   679.247 MB/sec
[info]                  ·gc.alloc.rate.norm:              1240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.114 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      972.275 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1774.939 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 853587.766 ops/s
[info]                  ·gc.alloc.rate:                   672.348 MB/sec
[info]                  ·gc.alloc.rate.norm:              1240.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.077 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      651.941 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1202.364 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 851168.602 ops/s
[info]                  ·gc.alloc.rate:                   670.465 MB/sec
[info]                  ·gc.alloc.rate.norm:              1240.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.302 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1211.957 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 859420.967 ops/s
[info]                  ·gc.alloc.rate:                   677.129 MB/sec
[info]                  ·gc.alloc.rate.norm:              1240.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.152 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658.777 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1206.394 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala":
[info]   857053.410 ±(99.9%) 17376.365 ops/s [Average]
[info]   (min, avg, max) = (851168.602, 857053.410, 862098.298), stdev = 4512.587
[info]   CI (99.9%): [839677.045, 874429.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   675.121 ±(99.9%) 13.897 MB/sec [Average]
[info]   (min, avg, max) = (670.465, 675.121, 679.247), stdev = 3.609
[info]   CI (99.9%): [661.224, 689.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1240.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1240.000, 1240.000, 1240.001), stdev = 0.001
[info]   CI (99.9%): [1240.000, 1240.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.179 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.125), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.114 ±(99.9%) 0.328 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.114, 0.229), stdev = 0.085
[info]   CI (99.9%): [≈ 0, 0.443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   716.281 ±(99.9%) 551.503 MB/sec [Average]
[info]   (min, avg, max) = (643.109, 716.281, 972.275), stdev = 143.223
[info]   CI (99.9%): [164.779, 1267.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1314.919 ±(99.9%) 991.411 B/op [Average]
[info]   (min, avg, max) = (1178.942, 1314.919, 1774.939), stdev = 257.466
[info]   CI (99.9%): [323.509, 2306.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala
[info] # Run progress: 31.62% complete, ETA 00:39:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1071876.428 ops/s
[info] # Warmup Iteration   2: 1143200.462 ops/s
[info] # Warmup Iteration   3: 1147789.741 ops/s
[info] Iteration   1: 1186616.857 ops/s
[info]                  ·gc.alloc.rate:                   645.185 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.083 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.609 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 869.831 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1175987.150 ops/s
[info]                  ·gc.alloc.rate:                   639.371 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.195 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.253 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 874.586 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1180321.582 ops/s
[info]                  ·gc.alloc.rate:                   641.846 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      326.334 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 435.217 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1187232.995 ops/s
[info]                  ·gc.alloc.rate:                   645.639 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.110 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.703 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 865.366 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1190464.823 ops/s
[info]                  ·gc.alloc.rate:                   647.264 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.110 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.865 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 864.730 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala":
[info]   1184124.681 ±(99.9%) 22514.987 ops/s [Average]
[info]   (min, avg, max) = (1175987.150, 1184124.681, 1190464.823), stdev = 5847.071
[info]   CI (99.9%): [1161609.694, 1206639.668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   643.861 ±(99.9%) 12.285 MB/sec [Average]
[info]   (min, avg, max) = (639.371, 643.861, 647.264), stdev = 3.190
[info]   CI (99.9%): [631.576, 656.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   856.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (856.000, 856.000, 856.000), stdev = 0.001
[info]   CI (99.9%): [856.000, 856.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.201 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.075, 0.146), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.100 ±(99.9%) 0.269 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.100, 0.195), stdev = 0.070
[info]   CI (99.9%): [≈ 0, 0.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   588.353 ±(99.9%) 564.031 MB/sec [Average]
[info]   (min, avg, max) = (326.334, 588.353, 655.609), stdev = 146.477
[info]   CI (99.9%): [24.322, 1152.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   781.946 ±(99.9%) 746.517 B/op [Average]
[info]   (min, avg, max) = (435.217, 781.946, 874.586), stdev = 193.868
[info]   CI (99.9%): [35.429, 1528.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 31.99% complete, ETA 00:39:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1027918.441 ops/s
[info] # Warmup Iteration   2: 1123927.972 ops/s
[info] # Warmup Iteration   3: 1125004.925 ops/s
[info] Iteration   1: 1124439.103 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1124790.216 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1124473.840 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1120611.009 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1121434.053 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   1123149.644 ±(99.9%) 7578.923 ops/s [Average]
[info]   (min, avg, max) = (1120611.009, 1123149.644, 1124790.216), stdev = 1968.222
[info]   CI (99.9%): [1115570.721, 1130728.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson
[info] # Run progress: 32.35% complete, ETA 00:39:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22314.572 ops/s
[info] # Warmup Iteration   2: 33091.813 ops/s
[info] # Warmup Iteration   3: 34078.304 ops/s
[info] Iteration   1: 34152.594 ops/s
[info]                  ·gc.alloc.rate:                   1847.061 MB/sec
[info]                  ·gc.alloc.rate.norm:              85144.066 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.796 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1959.743 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 90338.383 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 34585.360 ops/s
[info]                  ·gc.alloc.rate:                   1870.418 MB/sec
[info]                  ·gc.alloc.rate.norm:              85144.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.736 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1651.812 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 75192.760 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 34401.512 ops/s
[info]                  ·gc.alloc.rate:                   1860.544 MB/sec
[info]                  ·gc.alloc.rate.norm:              85144.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.857 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2000.211 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 91535.578 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 34513.144 ops/s
[info]                  ·gc.alloc.rate:                   1866.597 MB/sec
[info]                  ·gc.alloc.rate.norm:              85144.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.848 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1678.465 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 76562.451 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 34317.842 ops/s
[info]                  ·gc.alloc.rate:                   1856.806 MB/sec
[info]                  ·gc.alloc.rate.norm:              85144.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.864 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2024.509 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 92834.075 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson":
[info]   34394.090 ±(99.9%) 652.759 ops/s [Average]
[info]   (min, avg, max) = (34152.594, 34394.090, 34585.360), stdev = 169.519
[info]   CI (99.9%): [33741.331, 35046.849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1860.285 ±(99.9%) 34.952 MB/sec [Average]
[info]   (min, avg, max) = (1847.061, 1860.285, 1870.418), stdev = 9.077
[info]   CI (99.9%): [1825.334, 1895.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   85144.023 ±(99.9%) 0.093 B/op [Average]
[info]   (min, avg, max) = (85144.012, 85144.023, 85144.066), stdev = 0.024
[info]   CI (99.9%): [85143.930, 85144.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.079, 0.104), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3.620 ±(99.9%) 4.030 B/op [Average]
[info]   (min, avg, max) = (2.848, 3.620, 4.796), stdev = 1.047
[info]   CI (99.9%): [≈ 0, 7.650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1862.948 ±(99.9%) 701.951 MB/sec [Average]
[info]   (min, avg, max) = (1651.812, 1862.948, 2024.509), stdev = 182.294
[info]   CI (99.9%): [1160.997, 2564.899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   85292.649 ±(99.9%) 33321.467 B/op [Average]
[info]   (min, avg, max) = (75192.760, 85292.649, 92834.075), stdev = 8653.479
[info]   CI (99.9%): [51971.182, 118614.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 7.000), stdev = 1.140
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce
[info] # Run progress: 32.72% complete, ETA 00:39:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7582.502 ops/s
[info] # Warmup Iteration   2: 10594.239 ops/s
[info] # Warmup Iteration   3: 10595.697 ops/s
[info] Iteration   1: 10473.968 ops/s
[info]                  ·gc.alloc.rate:                   1345.918 MB/sec
[info]                  ·gc.alloc.rate.norm:              202231.226 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.383 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1310.866 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 196964.548 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 10519.932 ops/s
[info]                  ·gc.alloc.rate:                   1344.833 MB/sec
[info]                  ·gc.alloc.rate.norm:              201248.039 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.342 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1317.114 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 197100.003 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 10543.910 ops/s
[info]                  ·gc.alloc.rate:                   1347.836 MB/sec
[info]                  ·gc.alloc.rate.norm:              201248.042 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.321 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1325.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 197863.288 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 10528.318 ops/s
[info]                  ·gc.alloc.rate:                   1346.222 MB/sec
[info]                  ·gc.alloc.rate.norm:              201276.751 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.336 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1668.075 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 249397.777 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 10573.399 ops/s
[info]                  ·gc.alloc.rate:                   1352.019 MB/sec
[info]                  ·gc.alloc.rate.norm:              201280.039 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.393 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.282 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 199681.549 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce":
[info]   10527.905 ±(99.9%) 140.150 ops/s [Average]
[info]   (min, avg, max) = (10473.968, 10527.905, 10573.399), stdev = 36.397
[info]   CI (99.9%): [10387.755, 10668.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1347.366 ±(99.9%) 10.839 MB/sec [Average]
[info]   (min, avg, max) = (1344.833, 1347.366, 1352.019), stdev = 2.815
[info]   CI (99.9%): [1336.526, 1358.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   201456.819 ±(99.9%) 1667.999 B/op [Average]
[info]   (min, avg, max) = (201248.039, 201456.819, 202231.226), stdev = 433.174
[info]   CI (99.9%): [199788.820, 203124.818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.067, 0.083), stdev = 0.009
[info]   CI (99.9%): [0.031, 0.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   9.955 ±(99.9%) 5.249 B/op [Average]
[info]   (min, avg, max) = (9.321, 9.955, 12.393), stdev = 1.363
[info]   CI (99.9%): [4.706, 15.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1392.501 ±(99.9%) 594.814 MB/sec [Average]
[info]   (min, avg, max) = (1310.866, 1392.501, 1668.075), stdev = 154.471
[info]   CI (99.9%): [797.687, 1987.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   208201.433 ±(99.9%) 88776.213 B/op [Average]
[info]   (min, avg, max) = (196964.548, 208201.433, 249397.777), stdev = 23054.901
[info]   CI (99.9%): [119425.220, 296977.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala
[info] # Run progress: 33.09% complete, ETA 00:38:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6034.379 ops/s
[info] # Warmup Iteration   2: 11389.169 ops/s
[info] # Warmup Iteration   3: 11438.159 ops/s
[info] Iteration   1: 11452.800 ops/s
[info]                  ·gc.alloc.rate:                   1356.986 MB/sec
[info]                  ·gc.alloc.rate.norm:              186544.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.721 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1317.119 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 181063.582 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 11489.570 ops/s
[info]                  ·gc.alloc.rate:                   1361.405 MB/sec
[info]                  ·gc.alloc.rate.norm:              186544.038 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.554 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1327.808 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 181940.528 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 11420.239 ops/s
[info]                  ·gc.alloc.rate:                   1353.261 MB/sec
[info]                  ·gc.alloc.rate.norm:              186550.667 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.869 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1336.447 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 184232.866 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 11501.972 ops/s
[info]                  ·gc.alloc.rate:                   1363.071 MB/sec
[info]                  ·gc.alloc.rate.norm:              186576.168 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.696 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1678.938 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 229811.767 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 11429.951 ops/s
[info]                  ·gc.alloc.rate:                   1354.457 MB/sec
[info]                  ·gc.alloc.rate.norm:              186576.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.598 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.594 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 185768.450 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala":
[info]   11458.906 ±(99.9%) 138.381 ops/s [Average]
[info]   (min, avg, max) = (11420.239, 11458.906, 11501.972), stdev = 35.937
[info]   CI (99.9%): [11320.526, 11597.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1357.836 ±(99.9%) 16.475 MB/sec [Average]
[info]   (min, avg, max) = (1353.261, 1357.836, 1363.071), stdev = 4.278
[info]   CI (99.9%): [1341.361, 1374.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   186558.189 ±(99.9%) 63.824 B/op [Average]
[info]   (min, avg, max) = (186544.036, 186558.189, 186576.168), stdev = 16.575
[info]   CI (99.9%): [186494.365, 186622.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.046, 0.062), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   6.288 ±(99.9%) 9.201 B/op [Average]
[info]   (min, avg, max) = (2.869, 6.288, 8.598), stdev = 2.389
[info]   CI (99.9%): [≈ 0, 15.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1401.781 ±(99.9%) 598.255 MB/sec [Average]
[info]   (min, avg, max) = (1317.119, 1401.781, 1678.938), stdev = 155.365
[info]   CI (99.9%): [803.526, 2000.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   192563.439 ±(99.9%) 80498.290 B/op [Average]
[info]   (min, avg, max) = (181063.582, 192563.439, 229811.767), stdev = 20905.150
[info]   CI (99.9%): [112065.148, 273061.729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala
[info] # Run progress: 33.46% complete, ETA 00:38:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 136319.987 ops/s
[info] # Warmup Iteration   2: 144697.944 ops/s
[info] # Warmup Iteration   3: 147703.508 ops/s
[info] Iteration   1: 147296.384 ops/s
[info]                  ·gc.alloc.rate:                   958.276 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.890 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      991.119 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10590.958 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 147347.451 ops/s
[info]                  ·gc.alloc.rate:                   958.424 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.112 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      991.302 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10591.281 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 146738.270 ops/s
[info]                  ·gc.alloc.rate:                   954.366 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.670 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      993.206 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10656.739 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 147584.894 ops/s
[info]                  ·gc.alloc.rate:                   960.000 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.444 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      996.605 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10630.459 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 146113.967 ops/s
[info]                  ·gc.alloc.rate:                   950.592 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.673 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1000.109 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10773.410 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala":
[info]   147016.193 ±(99.9%) 2280.441 ops/s [Average]
[info]   (min, avg, max) = (146113.967, 147016.193, 147584.894), stdev = 592.223
[info]   CI (99.9%): [144735.752, 149296.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   956.332 ±(99.9%) 14.716 MB/sec [Average]
[info]   (min, avg, max) = (950.592, 956.332, 960.000), stdev = 3.822
[info]   CI (99.9%): [941.616, 971.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   10240.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10240.003, 10240.003, 10240.003), stdev = 0.001
[info]   CI (99.9%): [10240.002, 10240.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.758 ±(99.9%) 0.974 B/op [Average]
[info]   (min, avg, max) = (0.444, 0.758, 1.112), stdev = 0.253
[info]   CI (99.9%): [≈ 0, 1.732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   994.468 ±(99.9%) 14.816 MB/sec [Average]
[info]   (min, avg, max) = (991.119, 994.468, 1000.109), stdev = 3.848
[info]   CI (99.9%): [979.652, 1009.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   10648.570 ±(99.9%) 289.317 B/op [Average]
[info]   (min, avg, max) = (10590.958, 10648.570, 10773.410), stdev = 75.135
[info]   CI (99.9%): [10359.253, 10937.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson
[info] # Run progress: 33.82% complete, ETA 00:38:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4540.554 ops/s
[info] # Warmup Iteration   2: 8572.270 ops/s
[info] # Warmup Iteration   3: 8851.577 ops/s
[info] Iteration   1: 8921.569 ops/s
[info]                  ·gc.alloc.rate:                   1649.144 MB/sec
[info]                  ·gc.alloc.rate.norm:              291032.049 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.343 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1658.043 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 292602.636 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 8961.944 ops/s
[info]                  ·gc.alloc.rate:                   1656.829 MB/sec
[info]                  ·gc.alloc.rate.norm:              291032.049 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18.278 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1671.176 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 293552.150 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 8955.232 ops/s
[info]                  ·gc.alloc.rate:                   1655.996 MB/sec
[info]                  ·gc.alloc.rate.norm:              291032.046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.316 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1681.113 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 295446.062 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 8943.050 ops/s
[info]                  ·gc.alloc.rate:                   1653.414 MB/sec
[info]                  ·gc.alloc.rate.norm:              291032.046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.326 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1688.068 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 297131.697 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 8911.347 ops/s
[info]                  ·gc.alloc.rate:                   1647.703 MB/sec
[info]                  ·gc.alloc.rate.norm:              291032.046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1692.747 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 298988.244 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson":
[info]   8938.628 ±(99.9%) 83.350 ops/s [Average]
[info]   (min, avg, max) = (8911.347, 8938.628, 8961.944), stdev = 21.646
[info]   CI (99.9%): [8855.279, 9021.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1652.617 ±(99.9%) 15.643 MB/sec [Average]
[info]   (min, avg, max) = (1647.703, 1652.617, 1656.829), stdev = 4.062
[info]   CI (99.9%): [1636.974, 1668.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   291032.047 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (291032.046, 291032.047, 291032.049), stdev = 0.002
[info]   CI (99.9%): [291032.040, 291032.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.058, 0.104), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   10.258 ±(99.9%) 18.332 B/op [Average]
[info]   (min, avg, max) = (7.316, 10.258, 18.278), stdev = 4.761
[info]   CI (99.9%): [≈ 0, 28.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1678.229 ±(99.9%) 53.533 MB/sec [Average]
[info]   (min, avg, max) = (1658.043, 1678.229, 1692.747), stdev = 13.902
[info]   CI (99.9%): [1624.696, 1731.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   295544.158 ±(99.9%) 10006.540 B/op [Average]
[info]   (min, avg, max) = (292602.636, 295544.158, 298988.244), stdev = 2598.667
[info]   CI (99.9%): [285537.617, 305550.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce
[info] # Run progress: 34.19% complete, ETA 00:38:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17480.530 ops/s
[info] # Warmup Iteration   2: 23372.811 ops/s
[info] # Warmup Iteration   3: 23033.196 ops/s
[info] Iteration   1: 23390.544 ops/s
[info]                  ·gc.alloc.rate:                   1066.153 MB/sec
[info]                  ·gc.alloc.rate.norm:              71760.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      979.259 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65911.388 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 23332.383 ops/s
[info]                  ·gc.alloc.rate:                   1063.403 MB/sec
[info]                  ·gc.alloc.rate.norm:              71757.175 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.617 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      981.196 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66210.008 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 23568.070 ops/s
[info]                  ·gc.alloc.rate:                   1074.236 MB/sec
[info]                  ·gc.alloc.rate.norm:              71736.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.170 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1314.850 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 87803.895 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 23618.048 ops/s
[info]                  ·gc.alloc.rate:                   1076.567 MB/sec
[info]                  ·gc.alloc.rate.norm:              71736.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.548 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      992.180 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66113.019 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 23586.748 ops/s
[info]                  ·gc.alloc.rate:                   1074.857 MB/sec
[info]                  ·gc.alloc.rate.norm:              71736.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.166 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      996.525 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66508.179 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce":
[info]   23499.159 ±(99.9%) 495.248 ops/s [Average]
[info]   (min, avg, max) = (23332.383, 23499.159, 23618.048), stdev = 128.614
[info]   CI (99.9%): [23003.911, 23994.406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1071.043 ±(99.9%) 22.580 MB/sec [Average]
[info]   (min, avg, max) = (1063.403, 1071.043, 1076.567), stdev = 5.864
[info]   CI (99.9%): [1048.463, 1093.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   71745.049 ±(99.9%) 47.777 B/op [Average]
[info]   (min, avg, max) = (71736.017, 71745.049, 71760.017), stdev = 12.408
[info]   CI (99.9%): [71697.272, 71792.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.083), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3.900 ±(99.9%) 8.827 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.900, 5.617), stdev = 2.292
[info]   CI (99.9%): [≈ 0, 12.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1052.802 ±(99.9%) 564.770 MB/sec [Average]
[info]   (min, avg, max) = (979.259, 1052.802, 1314.850), stdev = 146.669
[info]   CI (99.9%): [488.032, 1617.572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   70509.298 ±(99.9%) 37237.140 B/op [Average]
[info]   (min, avg, max) = (65911.388, 70509.298, 87803.895), stdev = 9670.367
[info]   CI (99.9%): [33272.158, 107746.438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 1.095
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala
[info] # Run progress: 34.56% complete, ETA 00:38:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 604933.248 ops/s
[info] # Warmup Iteration   2: 710963.210 ops/s
[info] # Warmup Iteration   3: 713091.512 ops/s
[info] Iteration   1: 718653.561 ops/s
[info]                  ·gc.alloc.rate:                   1296.365 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.228 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1306.456 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2862.108 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 721465.621 ops/s
[info]                  ·gc.alloc.rate:                   1301.443 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.227 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1313.240 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2865.744 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 715402.913 ops/s
[info]                  ·gc.alloc.rate:                   1290.499 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.183 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1321.749 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2908.771 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 721142.095 ops/s
[info]                  ·gc.alloc.rate:                   1300.979 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.136 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1330.572 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2904.602 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 720562.966 ops/s
[info]                  ·gc.alloc.rate:                   1299.991 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.182 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1337.976 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2922.985 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala":
[info]   719445.431 ±(99.9%) 9660.768 ops/s [Average]
[info]   (min, avg, max) = (715402.913, 719445.431, 721465.621), stdev = 2508.871
[info]   CI (99.9%): [709784.663, 729106.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1297.855 ±(99.9%) 17.595 MB/sec [Average]
[info]   (min, avg, max) = (1290.499, 1297.855, 1301.443), stdev = 4.569
[info]   CI (99.9%): [1280.260, 1315.450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2840.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2840.001, 2840.001, 2840.001), stdev = 0.001
[info]   CI (99.9%): [2840.000, 2840.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.104), stdev = 0.017
[info]   CI (99.9%): [0.020, 0.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.191 ±(99.9%) 0.147 B/op [Average]
[info]   (min, avg, max) = (0.136, 0.191, 0.228), stdev = 0.038
[info]   CI (99.9%): [0.045, 0.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1321.999 ±(99.9%) 48.978 MB/sec [Average]
[info]   (min, avg, max) = (1306.456, 1321.999, 1337.976), stdev = 12.719
[info]   CI (99.9%): [1273.021, 1370.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2892.842 ±(99.9%) 105.093 B/op [Average]
[info]   (min, avg, max) = (2862.108, 2892.842, 2922.985), stdev = 27.292
[info]   CI (99.9%): [2787.749, 2997.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 34.93% complete, ETA 00:37:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 507755.782 ops/s
[info] # Warmup Iteration   2: 548629.397 ops/s
[info] # Warmup Iteration   3: 553110.669 ops/s
[info] Iteration   1: 552747.085 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 553560.280 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 552842.147 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 552903.088 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 551826.772 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   552775.875 ±(99.9%) 2387.314 ops/s [Average]
[info]   (min, avg, max) = (551826.772, 552775.875, 553560.280), stdev = 619.978
[info]   CI (99.9%): [550388.560, 555163.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson
[info] # Run progress: 35.29% complete, ETA 00:37:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16795.847 ops/s
[info] # Warmup Iteration   2: 24120.753 ops/s
[info] # Warmup Iteration   3: 24432.497 ops/s
[info] Iteration   1: 24289.442 ops/s
[info]                  ·gc.alloc.rate:                   1024.943 MB/sec
[info]                  ·gc.alloc.rate.norm:              66432.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.697 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1293.060 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 83810.124 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 24477.904 ops/s
[info]                  ·gc.alloc.rate:                   1033.103 MB/sec
[info]                  ·gc.alloc.rate.norm:              66429.703 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.692 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      973.160 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62575.343 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 24642.122 ops/s
[info]                  ·gc.alloc.rate:                   1039.778 MB/sec
[info]                  ·gc.alloc.rate.norm:              66416.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.977 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      977.421 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62432.965 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 24466.442 ops/s
[info]                  ·gc.alloc.rate:                   1032.463 MB/sec
[info]                  ·gc.alloc.rate.norm:              66416.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.339 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      982.774 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63219.625 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 24656.579 ops/s
[info]                  ·gc.alloc.rate:                   1040.146 MB/sec
[info]                  ·gc.alloc.rate.norm:              66416.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.657 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      989.158 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63160.313 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson":
[info]   24506.498 ±(99.9%) 579.050 ops/s [Average]
[info]   (min, avg, max) = (24289.442, 24506.498, 24656.579), stdev = 150.378
[info]   CI (99.9%): [23927.448, 25085.548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1034.087 ±(99.9%) 24.072 MB/sec [Average]
[info]   (min, avg, max) = (1024.943, 1034.087, 1040.146), stdev = 6.251
[info]   CI (99.9%): [1010.015, 1058.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   66421.954 ±(99.9%) 31.464 B/op [Average]
[info]   (min, avg, max) = (66416.017, 66421.954, 66432.018), stdev = 8.171
[info]   CI (99.9%): [66390.490, 66453.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.125), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4.273 ±(99.9%) 11.106 B/op [Average]
[info]   (min, avg, max) = (1.339, 4.273, 7.977), stdev = 2.884
[info]   CI (99.9%): [≈ 0, 15.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1043.115 ±(99.9%) 538.521 MB/sec [Average]
[info]   (min, avg, max) = (973.160, 1043.115, 1293.060), stdev = 139.852
[info]   CI (99.9%): [504.594, 1581.635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   67039.674 ±(99.9%) 36124.409 B/op [Average]
[info]   (min, avg, max) = (62432.965, 67039.674, 83810.124), stdev = 9381.394
[info]   CI (99.9%): [30915.265, 103164.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 5.000), stdev = 0.894
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce
[info] # Run progress: 35.66% complete, ETA 00:37:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19913.216 ops/s
[info] # Warmup Iteration   2: 28437.559 ops/s
[info] # Warmup Iteration   3: 28475.476 ops/s
[info] Iteration   1: 28527.812 ops/s
[info]                  ·gc.alloc.rate:                   1548.260 MB/sec
[info]                  ·gc.alloc.rate.norm:              85440.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.593 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1313.095 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 72462.569 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 28674.373 ops/s
[info]                  ·gc.alloc.rate:                   1555.567 MB/sec
[info]                  ·gc.alloc.rate.norm:              85412.689 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.141 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1653.071 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 90766.412 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 28578.966 ops/s
[info]                  ·gc.alloc.rate:                   1550.377 MB/sec
[info]                  ·gc.alloc.rate.norm:              85408.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.439 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1664.991 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 91721.972 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 28698.630 ops/s
[info]                  ·gc.alloc.rate:                   1556.999 MB/sec
[info]                  ·gc.alloc.rate.norm:              85408.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.283 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.816 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 73494.563 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 28654.018 ops/s
[info]                  ·gc.alloc.rate:                   1554.544 MB/sec
[info]                  ·gc.alloc.rate.norm:              85408.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.430 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1682.078 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 92414.884 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce":
[info]   28626.760 ±(99.9%) 273.979 ops/s [Average]
[info]   (min, avg, max) = (28527.812, 28626.760, 28698.630), stdev = 71.151
[info]   CI (99.9%): [28352.781, 28900.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate":
[info]   1553.149 ±(99.9%) 14.176 MB/sec [Average]
[info]   (min, avg, max) = (1548.260, 1553.149, 1556.999), stdev = 3.681
[info]   CI (99.9%): [1538.974, 1567.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   85415.350 ±(99.9%) 53.670 B/op [Average]
[info]   (min, avg, max) = (85408.014, 85415.350, 85440.019), stdev = 13.938
[info]   CI (99.9%): [85361.680, 85469.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.188 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.166), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4.577 ±(99.9%) 10.315 B/op [Average]
[info]   (min, avg, max) = (2.283, 4.577, 9.141), stdev = 2.679
[info]   CI (99.9%): [≈ 0, 14.892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1530.610 ±(99.9%) 719.651 MB/sec [Average]
[info]   (min, avg, max) = (1313.095, 1530.610, 1682.078), stdev = 186.891
[info]   CI (99.9%): [810.960, 2250.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   84172.080 ±(99.9%) 39436.305 B/op [Average]
[info]   (min, avg, max) = (72462.569, 84172.080, 92414.884), stdev = 10241.483
[info]   CI (99.9%): [44735.775, 123608.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala
[info] # Run progress: 36.03% complete, ETA 00:37:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17233.009 ops/s
[info] # Warmup Iteration   2: 31312.718 ops/s
[info] # Warmup Iteration   3: 31101.017 ops/s
[info] Iteration   1: 31199.330 ops/s
[info]                  ·gc.alloc.rate:                   1424.981 MB/sec
[info]                  ·gc.alloc.rate.norm:              71887.089 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.050 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1321.150 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66649.058 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 31435.589 ops/s
[info]                  ·gc.alloc.rate:                   1434.939 MB/sec
[info]                  ·gc.alloc.rate.norm:              71856.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.169 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1330.624 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66632.366 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 31307.465 ops/s
[info]                  ·gc.alloc.rate:                   1429.498 MB/sec
[info]                  ·gc.alloc.rate.norm:              71856.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.093 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1674.405 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 84166.691 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 31190.479 ops/s
[info]                  ·gc.alloc.rate:                   1423.519 MB/sec
[info]                  ·gc.alloc.rate.norm:              71856.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.252 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.802 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 67933.069 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 31325.746 ops/s
[info]                  ·gc.alloc.rate:                   1429.907 MB/sec
[info]                  ·gc.alloc.rate.norm:              71856.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.092 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.841 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 67832.500 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala":
[info]   31291.722 ±(99.9%) 389.323 ops/s [Average]
[info]   (min, avg, max) = (31190.479, 31291.722, 31435.589), stdev = 101.106
[info]   CI (99.9%): [30902.399, 31681.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1428.569 ±(99.9%) 17.393 MB/sec [Average]
[info]   (min, avg, max) = (1423.519, 1428.569, 1434.939), stdev = 4.517
[info]   CI (99.9%): [1411.176, 1445.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   71862.228 ±(99.9%) 53.514 B/op [Average]
[info]   (min, avg, max) = (71856.013, 71862.228, 71887.089), stdev = 13.897
[info]   CI (99.9%): [71808.715, 71915.742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.058, 0.104), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2.931 ±(99.9%) 6.632 B/op [Average]
[info]   (min, avg, max) = (1.050, 2.931, 5.252), stdev = 1.722
[info]   CI (99.9%): [≈ 0, 9.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1404.365 ±(99.9%) 582.984 MB/sec [Average]
[info]   (min, avg, max) = (1321.150, 1404.365, 1674.405), stdev = 151.399
[info]   CI (99.9%): [821.381, 1987.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   70642.737 ±(99.9%) 29209.718 B/op [Average]
[info]   (min, avg, max) = (66632.366, 70642.737, 84166.691), stdev = 7585.671
[info]   CI (99.9%): [41433.018, 99852.455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 0.837
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala
[info] # Run progress: 36.40% complete, ETA 00:36:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 257470.317 ops/s
[info] # Warmup Iteration   2: 271422.675 ops/s
[info] # Warmup Iteration   3: 272666.119 ops/s
[info] Iteration   1: 273985.453 ops/s
[info]                  ·gc.alloc.rate:                   712.696 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.717 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      661.469 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3801.587 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 272753.828 ops/s
[info]                  ·gc.alloc.rate:                   709.815 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.601 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      989.846 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5711.923 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 272244.723 ops/s
[info]                  ·gc.alloc.rate:                   708.285 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.241 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      659.879 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3816.070 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 273003.744 ops/s
[info]                  ·gc.alloc.rate:                   710.354 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.360 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.623 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3809.247 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 271181.174 ops/s
[info]                  ·gc.alloc.rate:                   705.740 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.483 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      662.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3842.623 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala":
[info]   272633.784 ±(99.9%) 3964.357 ops/s [Average]
[info]   (min, avg, max) = (271181.174, 272633.784, 273985.453), stdev = 1029.531
[info]   CI (99.9%): [268669.428, 276598.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   709.378 ±(99.9%) 9.927 MB/sec [Average]
[info]   (min, avg, max) = (705.740, 709.378, 712.696), stdev = 2.578
[info]   CI (99.9%): [699.451, 719.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.001, 4096.002, 4096.002), stdev = 0.001
[info]   CI (99.9%): [4096.001, 4096.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.125), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.480 ±(99.9%) 0.727 B/op [Average]
[info]   (min, avg, max) = (0.241, 0.480, 0.717), stdev = 0.189
[info]   CI (99.9%): [≈ 0, 1.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   726.780 ±(99.9%) 566.279 MB/sec [Average]
[info]   (min, avg, max) = (659.879, 726.780, 989.846), stdev = 147.061
[info]   CI (99.9%): [160.501, 1293.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4196.290 ±(99.9%) 3263.056 B/op [Average]
[info]   (min, avg, max) = (3801.587, 4196.290, 5711.923), stdev = 847.405
[info]   CI (99.9%): [933.234, 7459.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson
[info] # Run progress: 36.76% complete, ETA 00:36:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9048.247 ops/s
[info] # Warmup Iteration   2: 18125.012 ops/s
[info] # Warmup Iteration   3: 18343.373 ops/s
[info] Iteration   1: 18386.977 ops/s
[info]                  ·gc.alloc.rate:                   1867.971 MB/sec
[info]                  ·gc.alloc.rate.norm:              159960.911 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.782 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1664.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 142503.029 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 18472.977 ops/s
[info]                  ·gc.alloc.rate:                   1877.101 MB/sec
[info]                  ·gc.alloc.rate.norm:              159960.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.641 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2011.625 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 171423.674 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 18453.906 ops/s
[info]                  ·gc.alloc.rate:                   1875.247 MB/sec
[info]                  ·gc.alloc.rate.norm:              159960.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.326 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1685.508 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 143775.170 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 18322.733 ops/s
[info]                  ·gc.alloc.rate:                   1861.930 MB/sec
[info]                  ·gc.alloc.rate.norm:              159960.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.576 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.904 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 174390.770 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 18475.352 ops/s
[info]                  ·gc.alloc.rate:                   1877.773 MB/sec
[info]                  ·gc.alloc.rate.norm:              159960.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.639 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2034.889 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 173344.139 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson":
[info]   18422.389 ±(99.9%) 255.007 ops/s [Average]
[info]   (min, avg, max) = (18322.733, 18422.389, 18475.352), stdev = 66.225
[info]   CI (99.9%): [18167.382, 18677.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1872.005 ±(99.9%) 26.365 MB/sec [Average]
[info]   (min, avg, max) = (1861.930, 1872.005, 1877.773), stdev = 6.847
[info]   CI (99.9%): [1845.640, 1898.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   159960.201 ±(99.9%) 1.528 B/op [Average]
[info]   (min, avg, max) = (159960.022, 159960.201, 159960.911), stdev = 0.397
[info]   CI (99.9%): [159958.673, 159961.729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.075, 0.125), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   6.393 ±(99.9%) 15.691 B/op [Average]
[info]   (min, avg, max) = (1.782, 6.393, 10.641), stdev = 4.075
[info]   CI (99.9%): [≈ 0, 22.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1885.206 ±(99.9%) 740.910 MB/sec [Average]
[info]   (min, avg, max) = (1664.104, 1885.206, 2034.889), stdev = 192.412
[info]   CI (99.9%): [1144.296, 2626.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   161087.356 ±(99.9%) 63247.282 B/op [Average]
[info]   (min, avg, max) = (142503.029, 161087.356, 174390.770), stdev = 16425.118
[info]   CI (99.9%): [97840.075, 224334.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 1.000
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce
[info] # Run progress: 37.13% complete, ETA 00:36:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 40915.641 ops/s
[info] # Warmup Iteration   2: 52900.570 ops/s
[info] # Warmup Iteration   3: 52523.524 ops/s
[info] Iteration   1: 53293.766 ops/s
[info]                  ·gc.alloc.rate:                   1405.657 MB/sec
[info]                  ·gc.alloc.rate.norm:              41528.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.229 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1309.327 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38682.062 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 53594.796 ops/s
[info]                  ·gc.alloc.rate:                   1413.822 MB/sec
[info]                  ·gc.alloc.rate.norm:              41528.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.056 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1317.627 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38702.478 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 53483.018 ops/s
[info]                  ·gc.alloc.rate:                   1410.842 MB/sec
[info]                  ·gc.alloc.rate.norm:              41528.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.450 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1658.450 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 48816.333 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 53140.088 ops/s
[info]                  ·gc.alloc.rate:                   1401.832 MB/sec
[info]                  ·gc.alloc.rate.norm:              41528.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.849 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1335.210 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39554.389 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 53422.042 ops/s
[info]                  ·gc.alloc.rate:                   1409.270 MB/sec
[info]                  ·gc.alloc.rate.norm:              41528.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.226 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.460 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39559.279 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce":
[info]   53386.742 ±(99.9%) 676.017 ops/s [Average]
[info]   (min, avg, max) = (53140.088, 53386.742, 53594.796), stdev = 175.559
[info]   CI (99.9%): [52710.725, 54062.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1408.285 ±(99.9%) 17.928 MB/sec [Average]
[info]   (min, avg, max) = (1401.832, 1408.285, 1413.822), stdev = 4.656
[info]   CI (99.9%): [1390.356, 1426.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   41528.008 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (41528.008, 41528.008, 41528.008), stdev = 0.001
[info]   CI (99.9%): [41528.007, 41528.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.104), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1.962 ±(99.9%) 3.060 B/op [Average]
[info]   (min, avg, max) = (1.226, 1.962, 3.056), stdev = 0.795
[info]   CI (99.9%): [≈ 0, 5.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1392.615 ±(99.9%) 574.505 MB/sec [Average]
[info]   (min, avg, max) = (1309.327, 1392.615, 1658.450), stdev = 149.197
[info]   CI (99.9%): [818.109, 1967.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   41062.908 ±(99.9%) 16772.657 B/op [Average]
[info]   (min, avg, max) = (38682.062, 41062.908, 48816.333), stdev = 4355.806
[info]   CI (99.9%): [24290.251, 57835.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 6.000), stdev = 0.894
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala
[info] # Run progress: 37.50% complete, ETA 00:36:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 969018.141 ops/s
[info] # Warmup Iteration   2: 1115322.230 ops/s
[info] # Warmup Iteration   3: 1129220.680 ops/s
[info] Iteration   1: 1126800.897 ops/s
[info]                  ·gc.alloc.rate:                   1208.595 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.087 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      979.928 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1368.630 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1127384.883 ops/s
[info]                  ·gc.alloc.rate:                   1208.938 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.145 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1312.064 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1831.993 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 1127226.933 ops/s
[info]                  ·gc.alloc.rate:                   1208.535 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.116 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1319.749 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1843.335 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1129993.199 ops/s
[info]                  ·gc.alloc.rate:                   1211.629 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.058 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      994.939 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1386.116 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1126965.496 ops/s
[info]                  ·gc.alloc.rate:                   1208.400 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.116 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1334.592 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1864.277 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala":
[info]   1127674.282 ±(99.9%) 5067.084 ops/s [Average]
[info]   (min, avg, max) = (1126800.897, 1127674.282, 1129993.199), stdev = 1315.906
[info]   CI (99.9%): [1122607.198, 1132741.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1209.219 ±(99.9%) 5.242 MB/sec [Average]
[info]   (min, avg, max) = (1208.400, 1209.219, 1211.629), stdev = 1.361
[info]   CI (99.9%): [1203.978, 1214.461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1688.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1688.000, 1688.000, 1688.000), stdev = 0.001
[info]   CI (99.9%): [1688.000, 1688.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.105 ±(99.9%) 0.128 B/op [Average]
[info]   (min, avg, max) = (0.058, 0.105, 0.145), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1188.254 ±(99.9%) 706.897 MB/sec [Average]
[info]   (min, avg, max) = (979.928, 1188.254, 1334.592), stdev = 183.579
[info]   CI (99.9%): [481.357, 1895.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1658.870 ±(99.9%) 990.794 B/op [Average]
[info]   (min, avg, max) = (1368.630, 1658.870, 1864.277), stdev = 257.306
[info]   CI (99.9%): [668.076, 2649.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.400, 5.000), stdev = 1.342
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 37.87% complete, ETA 00:36:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 656315.216 ops/s
[info] # Warmup Iteration   2: 719419.520 ops/s
[info] # Warmup Iteration   3: 721814.248 ops/s
[info] Iteration   1: 723637.263 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 723625.274 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 723931.043 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 721983.247 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 723018.641 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc":
[info]   723239.094 ±(99.9%) 2990.279 ops/s [Average]
[info]   (min, avg, max) = (721983.247, 723239.094, 723931.043), stdev = 776.566
[info]   CI (99.9%): [720248.814, 726229.373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson
[info] # Run progress: 38.24% complete, ETA 00:35:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 41740.934 ops/s
[info] # Warmup Iteration   2: 58700.104 ops/s
[info] # Warmup Iteration   3: 59453.099 ops/s
[info] Iteration   1: 58764.341 ops/s
[info]                  ·gc.alloc.rate:                   1365.774 MB/sec
[info]                  ·gc.alloc.rate.norm:              36584.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.115 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1622.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 43447.606 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 59588.207 ops/s
[info]                  ·gc.alloc.rate:                   1384.730 MB/sec
[info]                  ·gc.alloc.rate.norm:              36584.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.199 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1306.508 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34517.401 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 59586.046 ops/s
[info]                  ·gc.alloc.rate:                   1384.677 MB/sec
[info]                  ·gc.alloc.rate.norm:              36584.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.199 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1317.156 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34800.056 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 59681.419 ops/s
[info]                  ·gc.alloc.rate:                   1386.888 MB/sec
[info]                  ·gc.alloc.rate.norm:              36584.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.098 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1327.437 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35015.767 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 58507.741 ops/s
[info]                  ·gc.alloc.rate:                   1359.593 MB/sec
[info]                  ·gc.alloc.rate.norm:              36584.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.560 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1335.808 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35944.010 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson":
[info]   59225.551 ±(99.9%) 2106.672 ops/s [Average]
[info]   (min, avg, max) = (58507.741, 59225.551, 59681.419), stdev = 547.096
[info]   CI (99.9%): [57118.878, 61332.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1376.333 ±(99.9%) 48.831 MB/sec [Average]
[info]   (min, avg, max) = (1359.593, 1376.333, 1386.888), stdev = 12.681
[info]   CI (99.9%): [1327.501, 1425.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   36584.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (36584.007, 36584.007, 36584.007), stdev = 0.001
[info]   CI (99.9%): [36584.006, 36584.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.054, 0.083), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.434 ±(99.9%) 2.823 B/op [Average]
[info]   (min, avg, max) = (0.560, 1.434, 2.199), stdev = 0.733
[info]   CI (99.9%): [≈ 0, 4.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1381.784 ±(99.9%) 518.835 MB/sec [Average]
[info]   (min, avg, max) = (1306.508, 1381.784, 1622.010), stdev = 134.740
[info]   CI (99.9%): [862.949, 1900.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   36744.968 ±(99.9%) 14574.289 B/op [Average]
[info]   (min, avg, max) = (34517.401, 36744.968, 43447.606), stdev = 3784.897
[info]   CI (99.9%): [22170.679, 51319.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 0.837
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce
[info] # Run progress: 38.60% complete, ETA 00:35:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12273.741 ops/s
[info] # Warmup Iteration   2: 16688.480 ops/s
[info] # Warmup Iteration   3: 16850.275 ops/s
[info] Iteration   1: 16443.527 ops/s
[info]                  ·gc.alloc.rate:                   1445.716 MB/sec
[info]                  ·gc.alloc.rate.norm:              138416.829 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.977 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1640.438 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 157060.070 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 16857.243 ops/s
[info]                  ·gc.alloc.rate:                   1482.712 MB/sec
[info]                  ·gc.alloc.rate.norm:              138432.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.829 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1321.221 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 123354.568 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 16745.553 ops/s
[info]                  ·gc.alloc.rate:                   1472.432 MB/sec
[info]                  ·gc.alloc.rate.norm:              138432.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.825 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1662.989 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 156347.377 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 16746.815 ops/s
[info]                  ·gc.alloc.rate:                   1472.806 MB/sec
[info]                  ·gc.alloc.rate.norm:              138431.075 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.868 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.571 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 125814.097 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 16814.736 ops/s
[info]                  ·gc.alloc.rate:                   1478.682 MB/sec
[info]                  ·gc.alloc.rate.norm:              138432.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.793 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.876 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 125811.663 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce":
[info]   16721.575 ±(99.9%) 625.677 ops/s [Average]
[info]   (min, avg, max) = (16443.527, 16721.575, 16857.243), stdev = 162.486
[info]   CI (99.9%): [16095.897, 17347.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1470.470 ±(99.9%) 55.781 MB/sec [Average]
[info]   (min, avg, max) = (1445.716, 1470.470, 1482.712), stdev = 14.486
[info]   CI (99.9%): [1414.689, 1526.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   138428.796 ±(99.9%) 25.808 B/op [Average]
[info]   (min, avg, max) = (138416.829, 138428.796, 138432.026), stdev = 6.702
[info]   CI (99.9%): [138402.988, 138454.604] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.071, 0.083), stdev = 0.011
[info]   CI (99.9%): [0.027, 0.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   6.658 ±(99.9%) 4.050 B/op [Average]
[info]   (min, avg, max) = (5.829, 6.658, 7.825), stdev = 1.052
[info]   CI (99.9%): [2.608, 10.709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1461.419 ±(99.9%) 670.394 MB/sec [Average]
[info]   (min, avg, max) = (1321.221, 1461.419, 1662.989), stdev = 174.099
[info]   CI (99.9%): [791.025, 2131.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   137677.555 ±(99.9%) 66998.248 B/op [Average]
[info]   (min, avg, max) = (123354.568, 137677.555, 157060.070), stdev = 17399.232
[info]   CI (99.9%): [70679.308, 204675.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala
[info] # Run progress: 38.97% complete, ETA 00:35:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10039.976 ops/s
[info] # Warmup Iteration   2: 18173.905 ops/s
[info] # Warmup Iteration   3: 18046.577 ops/s
[info] Iteration   1: 17939.053 ops/s
[info]                  ·gc.alloc.rate:                   1390.470 MB/sec
[info]                  ·gc.alloc.rate.norm:              122037.084 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.826 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1321.707 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 116001.971 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 17937.896 ops/s
[info]                  ·gc.alloc.rate:                   1391.168 MB/sec
[info]                  ·gc.alloc.rate.norm:              122064.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.132 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1330.886 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 116774.698 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 18117.785 ops/s
[info]                  ·gc.alloc.rate:                   1404.942 MB/sec
[info]                  ·gc.alloc.rate.norm:              122064.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.424 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.556 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 116296.295 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 18153.146 ops/s
[info]                  ·gc.alloc.rate:                   1407.427 MB/sec
[info]                  ·gc.alloc.rate.norm:              122049.909 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.895 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 116540.528 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 18193.616 ops/s
[info]                  ·gc.alloc.rate:                   1410.642 MB/sec
[info]                  ·gc.alloc.rate.norm:              122032.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.203 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1686.913 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 145931.677 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala":
[info]   18068.299 ±(99.9%) 467.904 ops/s [Average]
[info]   (min, avg, max) = (17937.896, 18068.299, 18193.616), stdev = 121.513
[info]   CI (99.9%): [17600.395, 18536.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1400.930 ±(99.9%) 36.395 MB/sec [Average]
[info]   (min, avg, max) = (1390.470, 1400.930, 1410.642), stdev = 9.452
[info]   CI (99.9%): [1364.535, 1437.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   122049.413 ±(99.9%) 57.167 B/op [Average]
[info]   (min, avg, max) = (122032.022, 122049.413, 122064.025), stdev = 14.846
[info]   CI (99.9%): [121992.246, 122106.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.075, 0.104), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   6.522 ±(99.9%) 11.678 B/op [Average]
[info]   (min, avg, max) = (1.826, 6.522, 9.132), stdev = 3.033
[info]   CI (99.9%): [≈ 0, 18.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1404.391 ±(99.9%) 608.999 MB/sec [Average]
[info]   (min, avg, max) = (1321.707, 1404.391, 1686.913), stdev = 158.155
[info]   CI (99.9%): [795.392, 2013.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   122309.034 ±(99.9%) 50861.521 B/op [Average]
[info]   (min, avg, max) = (116001.971, 122309.034, 145931.677), stdev = 13208.575
[info]   CI (99.9%): [71447.513, 173170.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 7.000), stdev = 1.095
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala
[info] # Run progress: 39.34% complete, ETA 00:35:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 290199.130 ops/s
[info] # Warmup Iteration   2: 301050.853 ops/s
[info] # Warmup Iteration   3: 289810.535 ops/s
[info] Iteration   1: 304003.450 ops/s
[info]                  ·gc.alloc.rate:                   790.939 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.108 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.558 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3420.803 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 310639.585 ops/s
[info]                  ·gc.alloc.rate:                   808.047 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.633 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      989.398 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5015.269 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 310525.714 ops/s
[info]                  ·gc.alloc.rate:                   807.993 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.211 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.981 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3350.746 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 308851.102 ops/s
[info]                  ·gc.alloc.rate:                   803.597 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.106 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      993.259 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5062.723 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 306309.513 ops/s
[info]                  ·gc.alloc.rate:                   796.988 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.428 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      663.949 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3412.268 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala":
[info]   308065.873 ±(99.9%) 11039.917 ops/s [Average]
[info]   (min, avg, max) = (304003.450, 308065.873, 310639.585), stdev = 2867.031
[info]   CI (99.9%): [297025.956, 319105.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   801.513 ±(99.9%) 28.641 MB/sec [Average]
[info]   (min, avg, max) = (790.939, 801.513, 808.047), stdev = 7.438
[info]   CI (99.9%): [772.872, 830.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.001, 4096.001, 4096.001), stdev = 0.001
[info]   CI (99.9%): [4096.001, 4096.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.058, 0.125), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.297 ±(99.9%) 0.881 B/op [Average]
[info]   (min, avg, max) = (0.106, 0.297, 0.633), stdev = 0.229
[info]   CI (99.9%): [≈ 0, 1.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   793.629 ±(99.9%) 694.979 MB/sec [Average]
[info]   (min, avg, max) = (660.558, 793.629, 993.259), stdev = 180.484
[info]   CI (99.9%): [98.650, 1488.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4052.362 ±(99.9%) 3470.321 B/op [Average]
[info]   (min, avg, max) = (3350.746, 4052.362, 5062.723), stdev = 901.231
[info]   CI (99.9%): [582.041, 7522.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson
[info] # Run progress: 39.71% complete, ETA 00:35:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6943.829 ops/s
[info] # Warmup Iteration   2: 12822.671 ops/s
[info] # Warmup Iteration   3: 13133.704 ops/s
[info] Iteration   1: 13137.088 ops/s
[info]                  ·gc.alloc.rate:                   1796.582 MB/sec
[info]                  ·gc.alloc.rate.norm:              215256.031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.481 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1995.438 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 239081.712 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 13243.811 ops/s
[info]                  ·gc.alloc.rate:                   1811.424 MB/sec
[info]                  ·gc.alloc.rate.norm:              215256.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.369 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1675.731 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 199131.279 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 13098.766 ops/s
[info]                  ·gc.alloc.rate:                   1790.896 MB/sec
[info]                  ·gc.alloc.rate.norm:              215256.973 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1683.931 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 202400.298 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 13176.976 ops/s
[info]                  ·gc.alloc.rate:                   1801.481 MB/sec
[info]                  ·gc.alloc.rate.norm:              215256.031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.945 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028.097 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 242334.029 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 13200.293 ops/s
[info]                  ·gc.alloc.rate:                   1804.989 MB/sec
[info]                  ·gc.alloc.rate.norm:              215256.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.964 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1694.196 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 202043.274 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson":
[info]   13171.387 ±(99.9%) 215.793 ops/s [Average]
[info]   (min, avg, max) = (13098.766, 13171.387, 13243.811), stdev = 56.041
[info]   CI (99.9%): [12955.593, 13387.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1801.074 ±(99.9%) 30.222 MB/sec [Average]
[info]   (min, avg, max) = (1790.896, 1801.074, 1811.424), stdev = 7.849
[info]   CI (99.9%): [1770.853, 1831.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   215256.221 ±(99.9%) 1.620 B/op [Average]
[info]   (min, avg, max) = (215256.031, 215256.221, 215256.973), stdev = 0.421
[info]   CI (99.9%): [215254.601, 215257.841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   8.953 ±(99.9%) 10.864 B/op [Average]
[info]   (min, avg, max) = (4.964, 8.953, 12.369), stdev = 2.821
[info]   CI (99.9%): [≈ 0, 19.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1815.478 ±(99.9%) 691.873 MB/sec [Average]
[info]   (min, avg, max) = (1675.731, 1815.478, 2028.097), stdev = 179.677
[info]   CI (99.9%): [1123.606, 2507.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   216998.118 ±(99.9%) 83603.349 B/op [Average]
[info]   (min, avg, max) = (199131.279, 216998.118, 242334.029), stdev = 21711.524
[info]   CI (99.9%): [133394.770, 300601.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 7.000), stdev = 1.225
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce
[info] # Run progress: 40.07% complete, ETA 00:34:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29163.128 ops/s
[info] # Warmup Iteration   2: 38865.619 ops/s
[info] # Warmup Iteration   3: 39031.337 ops/s
[info] Iteration   1: 38630.756 ops/s
[info]                  ·gc.alloc.rate:                   1270.286 MB/sec
[info]                  ·gc.alloc.rate.norm:              51768.491 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.696 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1307.797 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53297.186 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 39370.577 ops/s
[info]                  ·gc.alloc.rate:                   1294.555 MB/sec
[info]                  ·gc.alloc.rate.norm:              51768.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.825 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1314.509 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52565.940 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 39448.950 ops/s
[info]                  ·gc.alloc.rate:                   1297.298 MB/sec
[info]                  ·gc.alloc.rate.norm:              51768.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.322 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1323.913 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52830.075 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 39507.233 ops/s
[info]                  ·gc.alloc.rate:                   1299.158 MB/sec
[info]                  ·gc.alloc.rate.norm:              51768.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.658 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      998.534 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39788.944 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 38883.407 ops/s
[info]                  ·gc.alloc.rate:                   1278.697 MB/sec
[info]                  ·gc.alloc.rate.norm:              51768.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.528 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1337.206 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54136.750 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce":
[info]   39168.185 ±(99.9%) 1497.145 ops/s [Average]
[info]   (min, avg, max) = (38630.756, 39168.185, 39507.233), stdev = 388.804
[info]   CI (99.9%): [37671.039, 40665.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1287.999 ±(99.9%) 49.246 MB/sec [Average]
[info]   (min, avg, max) = (1270.286, 1287.999, 1299.158), stdev = 12.789
[info]   CI (99.9%): [1238.753, 1337.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   51768.107 ±(99.9%) 0.828 B/op [Average]
[info]   (min, avg, max) = (51768.010, 51768.107, 51768.491), stdev = 0.215
[info]   CI (99.9%): [51767.279, 51768.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.146), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3.006 ±(99.9%) 6.616 B/op [Average]
[info]   (min, avg, max) = (1.658, 3.006, 5.825), stdev = 1.718
[info]   CI (99.9%): [≈ 0, 9.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1256.392 ±(99.9%) 556.684 MB/sec [Average]
[info]   (min, avg, max) = (998.534, 1256.392, 1337.206), stdev = 144.569
[info]   CI (99.9%): [699.708, 1813.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   50523.779 ±(99.9%) 23221.605 B/op [Average]
[info]   (min, avg, max) = (39788.944, 50523.779, 54136.750), stdev = 6030.577
[info]   CI (99.9%): [27302.174, 73745.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala
[info] # Run progress: 40.44% complete, ETA 00:34:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1100280.822 ops/s
[info] # Warmup Iteration   2: 1214937.892 ops/s
[info] # Warmup Iteration   3: 1229481.907 ops/s
[info] Iteration   1: 1227001.471 ops/s
[info]                  ·gc.alloc.rate:                   1116.070 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.107 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      978.907 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1256.010 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1233502.260 ops/s
[info]                  ·gc.alloc.rate:                   1121.904 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.266 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1309.804 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1671.836 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 1229614.696 ops/s
[info]                  ·gc.alloc.rate:                   1118.718 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.053 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      987.438 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1263.958 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1228656.595 ops/s
[info]                  ·gc.alloc.rate:                   1118.031 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.080 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      992.936 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1271.776 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1230108.837 ops/s
[info]                  ·gc.alloc.rate:                   1119.128 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.133 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1330.719 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1702.746 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala":
[info]   1229776.772 ±(99.9%) 9228.076 ops/s [Average]
[info]   (min, avg, max) = (1227001.471, 1229776.772, 1233502.260), stdev = 2396.502
[info]   CI (99.9%): [1220548.696, 1239004.848] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1118.770 ±(99.9%) 8.121 MB/sec [Average]
[info]   (min, avg, max) = (1116.070, 1118.770, 1121.904), stdev = 2.109
[info]   CI (99.9%): [1110.649, 1126.891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1432.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1432.000, 1432.000, 1432.000), stdev = 0.001
[info]   CI (99.9%): [1432.000, 1432.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.100 ±(99.9%) 0.250 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.100, 0.208), stdev = 0.065
[info]   CI (99.9%): [≈ 0, 0.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.128 ±(99.9%) 0.318 B/op [Average]
[info]   (min, avg, max) = (0.053, 0.128, 0.266), stdev = 0.083
[info]   CI (99.9%): [≈ 0, 0.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1119.961 ±(99.9%) 704.923 MB/sec [Average]
[info]   (min, avg, max) = (978.907, 1119.961, 1330.719), stdev = 183.066
[info]   CI (99.9%): [415.038, 1824.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1433.265 ±(99.9%) 894.185 B/op [Average]
[info]   (min, avg, max) = (1256.010, 1433.265, 1702.746), stdev = 232.217
[info]   CI (99.9%): [539.080, 2327.450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 1.000
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 40.81% complete, ETA 00:34:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1255844.770 ops/s
[info] # Warmup Iteration   2: 1356825.292 ops/s
[info] # Warmup Iteration   3: 1371380.930 ops/s
[info] Iteration   1: 1362276.582 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1372533.980 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1372361.181 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1364361.055 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1373670.434 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   1369040.646 ±(99.9%) 20404.361 ops/s [Average]
[info]   (min, avg, max) = (1362276.582, 1369040.646, 1373670.434), stdev = 5298.948
[info]   CI (99.9%): [1348636.285, 1389445.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson
[info] # Run progress: 41.18% complete, ETA 00:34:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27382.775 ops/s
[info] # Warmup Iteration   2: 37771.107 ops/s
[info] # Warmup Iteration   3: 37160.007 ops/s
[info] Iteration   1: 37700.790 ops/s
[info]                  ·gc.alloc.rate:                   1139.749 MB/sec
[info]                  ·gc.alloc.rate.norm:              47595.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.476 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      970.228 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 40515.944 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 38092.868 ops/s
[info]                  ·gc.alloc.rate:                   1151.828 MB/sec
[info]                  ·gc.alloc.rate.norm:              47592.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.300 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1300.263 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53725.139 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 38175.774 ops/s
[info]                  ·gc.alloc.rate:                   1154.121 MB/sec
[info]                  ·gc.alloc.rate.norm:              47592.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.716 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      981.264 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 40463.983 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 37810.601 ops/s
[info]                  ·gc.alloc.rate:                   1143.027 MB/sec
[info]                  ·gc.alloc.rate.norm:              47592.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.332 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1317.160 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54842.363 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 37955.585 ops/s
[info]                  ·gc.alloc.rate:                   1147.448 MB/sec
[info]                  ·gc.alloc.rate.norm:              47592.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.452 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      994.537 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 41249.789 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson":
[info]   37947.124 ±(99.9%) 752.879 ops/s [Average]
[info]   (min, avg, max) = (37700.790, 37947.124, 38175.774), stdev = 195.520
[info]   CI (99.9%): [37194.245, 38700.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1147.235 ±(99.9%) 22.968 MB/sec [Average]
[info]   (min, avg, max) = (1139.749, 1147.235, 1154.121), stdev = 5.965
[info]   CI (99.9%): [1124.266, 1170.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   47592.613 ±(99.9%) 5.182 B/op [Average]
[info]   (min, avg, max) = (47592.011, 47592.613, 47595.020), stdev = 1.346
[info]   CI (99.9%): [47587.431, 47597.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.104), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3.455 ±(99.9%) 4.088 B/op [Average]
[info]   (min, avg, max) = (1.716, 3.455, 4.332), stdev = 1.062
[info]   CI (99.9%): [≈ 0, 7.543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1112.690 ±(99.9%) 690.222 MB/sec [Average]
[info]   (min, avg, max) = (970.228, 1112.690, 1317.160), stdev = 179.249
[info]   CI (99.9%): [422.468, 1802.913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   46159.444 ±(99.9%) 28623.581 B/op [Average]
[info]   (min, avg, max) = (40463.983, 46159.444, 54842.363), stdev = 7433.453
[info]   CI (99.9%): [17535.863, 74783.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.400, 5.000), stdev = 1.140
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce
[info] # Run progress: 41.54% complete, ETA 00:34:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 105459.863 ops/s
[info] # Warmup Iteration   2: 129679.087 ops/s
[info] # Warmup Iteration   3: 129594.214 ops/s
[info] Iteration   1: 128847.550 ops/s
[info]                  ·gc.alloc.rate:                   2209.452 MB/sec
[info]                  ·gc.alloc.rate.norm:              27000.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2321.320 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28367.049 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 129415.528 ops/s
[info]                  ·gc.alloc.rate:                   2220.069 MB/sec
[info]                  ·gc.alloc.rate.norm:              27000.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2009.026 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24433.342 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 128988.387 ops/s
[info]                  ·gc.alloc.rate:                   2211.923 MB/sec
[info]                  ·gc.alloc.rate.norm:              27000.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.762 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2358.123 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28784.615 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 129764.301 ops/s
[info]                  ·gc.alloc.rate:                   2225.570 MB/sec
[info]                  ·gc.alloc.rate.norm:              27000.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2368.736 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28736.853 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 129419.315 ops/s
[info]                  ·gc.alloc.rate:                   2220.420 MB/sec
[info]                  ·gc.alloc.rate.norm:              27000.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.266 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2036.455 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24763.006 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce":
[info]   129287.016 ±(99.9%) 1420.216 ops/s [Average]
[info]   (min, avg, max) = (128847.550, 129287.016, 129764.301), stdev = 368.826
[info]   CI (99.9%): [127866.801, 130707.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate":
[info]   2217.487 ±(99.9%) 25.552 MB/sec [Average]
[info]   (min, avg, max) = (2209.452, 2217.487, 2225.570), stdev = 6.636
[info]   CI (99.9%): [2191.935, 2243.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   27000.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (27000.003, 27000.003, 27000.003), stdev = 0.001
[info]   CI (99.9%): [27000.003, 27000.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.100 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.100, 0.166), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1.215 ±(99.9%) 1.862 B/op [Average]
[info]   (min, avg, max) = (0.762, 1.215, 2.020), stdev = 0.484
[info]   CI (99.9%): [≈ 0, 3.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2218.732 ±(99.9%) 693.269 MB/sec [Average]
[info]   (min, avg, max) = (2009.026, 2218.732, 2368.736), stdev = 180.040
[info]   CI (99.9%): [1525.463, 2912.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   27016.973 ±(99.9%) 8536.966 B/op [Average]
[info]   (min, avg, max) = (24433.342, 27016.973, 28784.615), stdev = 2217.023
[info]   CI (99.9%): [18480.007, 35553.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.count":
[info]   33.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 7.000), stdev = 1.095
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala
[info] # Run progress: 41.91% complete, ETA 00:33:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 163522.201 ops/s
[info] # Warmup Iteration   2: 254004.734 ops/s
[info] # Warmup Iteration   3: 252707.946 ops/s
[info] Iteration   1: 249916.035 ops/s
[info]                  ·gc.alloc.rate:                   548.730 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.655 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      647.407 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4077.483 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 246554.042 ops/s
[info]                  ·gc.alloc.rate:                   541.294 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      651.373 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4158.822 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 245886.826 ops/s
[info]                  ·gc.alloc.rate:                   539.749 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.266 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.285 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2095.600 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 245927.529 ops/s
[info]                  ·gc.alloc.rate:                   539.886 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.533 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.962 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4199.044 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 245666.765 ops/s
[info]                  ·gc.alloc.rate:                   539.297 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.267 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658.573 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4220.369 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala":
[info]   246790.239 ±(99.9%) 6847.494 ops/s [Average]
[info]   (min, avg, max) = (245666.765, 246790.239, 249916.035), stdev = 1778.272
[info]   CI (99.9%): [239942.746, 253637.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   541.791 ±(99.9%) 15.211 MB/sec [Average]
[info]   (min, avg, max) = (539.297, 541.791, 548.730), stdev = 3.950
[info]   CI (99.9%): [526.580, 557.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3456.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3456.002, 3456.002, 3456.002), stdev = 0.001
[info]   CI (99.9%): [3456.001, 3456.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.104), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.344 ±(99.9%) 0.987 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.344, 0.655), stdev = 0.256
[info]   CI (99.9%): [≈ 0, 1.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   588.120 ±(99.9%) 561.709 MB/sec [Average]
[info]   (min, avg, max) = (327.285, 588.120, 658.573), stdev = 145.874
[info]   CI (99.9%): [26.411, 1149.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3750.264 ±(99.9%) 3567.984 B/op [Average]
[info]   (min, avg, max) = (2095.600, 3750.264, 4220.369), stdev = 926.594
[info]   CI (99.9%): [182.279, 7318.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 3.000), stdev = 0.894
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala
[info] # Run progress: 42.28% complete, ETA 00:33:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 462700.694 ops/s
[info] # Warmup Iteration   2: 499552.697 ops/s
[info] # Warmup Iteration   3: 501715.909 ops/s
[info] Iteration   1: 506255.768 ops/s
[info]                  ·gc.alloc.rate:                   637.911 MB/sec
[info]                  ·gc.alloc.rate.norm:              1984.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.388 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658.145 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2046.932 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 503867.051 ops/s
[info]                  ·gc.alloc.rate:                   635.243 MB/sec
[info]                  ·gc.alloc.rate.norm:              1984.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.260 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.390 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2046.924 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 488214.540 ops/s
[info]                  ·gc.alloc.rate:                   615.202 MB/sec
[info]                  ·gc.alloc.rate.norm:              1984.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.589 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1056.461 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 503763.065 ops/s
[info]                  ·gc.alloc.rate:                   634.878 MB/sec
[info]                  ·gc.alloc.rate.norm:              1984.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.195 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.627 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2051.967 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 492159.467 ops/s
[info]                  ·gc.alloc.rate:                   620.241 MB/sec
[info]                  ·gc.alloc.rate.norm:              1984.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.266 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.262 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2102.422 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala":
[info]   498851.978 ±(99.9%) 31165.880 ops/s [Average]
[info]   (min, avg, max) = (488214.540, 498851.978, 506255.768), stdev = 8093.680
[info]   CI (99.9%): [467686.098, 530017.859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   628.695 ±(99.9%) 39.437 MB/sec [Average]
[info]   (min, avg, max) = (615.202, 628.695, 637.911), stdev = 10.242
[info]   CI (99.9%): [589.258, 668.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1984.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1984.001, 1984.001, 1984.001), stdev = 0.001
[info]   CI (99.9%): [1984.001, 1984.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.176 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.071, 0.125), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.222 ±(99.9%) 0.548 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.222, 0.388), stdev = 0.142
[info]   CI (99.9%): [≈ 0, 0.770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   591.003 ±(99.9%) 567.031 MB/sec [Average]
[info]   (min, avg, max) = (327.589, 591.003, 658.145), stdev = 147.256
[info]   CI (99.9%): [23.972, 1158.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1860.941 ±(99.9%) 1734.046 B/op [Average]
[info]   (min, avg, max) = (1056.461, 1860.941, 2102.422), stdev = 450.326
[info]   CI (99.9%): [126.895, 3594.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson
[info] # Run progress: 42.65% complete, ETA 00:33:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 38114.309 ops/s
[info] # Warmup Iteration   2: 67643.020 ops/s
[info] # Warmup Iteration   3: 68948.266 ops/s
[info] Iteration   1: 68558.298 ops/s
[info]                  ·gc.alloc.rate:                   2968.188 MB/sec
[info]                  ·gc.alloc.rate.norm:              68168.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.301 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3022.783 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69421.866 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 69021.346 ops/s
[info]                  ·gc.alloc.rate:                   2988.739 MB/sec
[info]                  ·gc.alloc.rate.norm:              68168.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.747 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3045.540 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69463.546 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 68805.382 ops/s
[info]                  ·gc.alloc.rate:                   2985.342 MB/sec
[info]                  ·gc.alloc.rate.norm:              68309.891 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.333 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2714.909 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62121.923 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 68139.891 ops/s
[info]                  ·gc.alloc.rate:                   2950.302 MB/sec
[info]                  ·gc.alloc.rate.norm:              68168.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.366 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3058.376 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70665.105 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 67687.668 ops/s
[info]                  ·gc.alloc.rate:                   2930.882 MB/sec
[info]                  ·gc.alloc.rate.norm:              68168.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.872 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3062.615 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 71231.921 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson":
[info]   68442.517 ±(99.9%) 2057.033 ops/s [Average]
[info]   (min, avg, max) = (67687.668, 68442.517, 69021.346), stdev = 534.205
[info]   CI (99.9%): [66385.484, 70499.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2964.690 ±(99.9%) 93.672 MB/sec [Average]
[info]   (min, avg, max) = (2930.882, 2964.690, 2988.739), stdev = 24.326
[info]   CI (99.9%): [2871.019, 3058.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   68196.383 ±(99.9%) 244.334 B/op [Average]
[info]   (min, avg, max) = (68168.006, 68196.383, 68309.891), stdev = 63.453
[info]   CI (99.9%): [67952.049, 68440.717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.171 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (0.146, 0.171, 0.208), stdev = 0.027
[info]   CI (99.9%): [0.066, 0.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3.924 ±(99.9%) 2.344 B/op [Average]
[info]   (min, avg, max) = (3.333, 3.924, 4.747), stdev = 0.609
[info]   CI (99.9%): [1.579, 6.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   2980.845 ±(99.9%) 575.550 MB/sec [Average]
[info]   (min, avg, max) = (2714.909, 2980.845, 3062.615), stdev = 149.469
[info]   CI (99.9%): [2405.294, 3556.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   68580.872 ±(99.9%) 14223.491 B/op [Average]
[info]   (min, avg, max) = (62121.923, 68580.872, 71231.921), stdev = 3693.795
[info]   CI (99.9%): [54357.381, 82804.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.count":
[info]   44.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.800, 9.000), stdev = 0.447
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 9.400, 10.000), stdev = 0.548
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce
[info] # Run progress: 43.01% complete, ETA 00:33:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 159319.830 ops/s
[info] # Warmup Iteration   2: 197266.340 ops/s
[info] # Warmup Iteration   3: 197506.628 ops/s
[info] Iteration   1: 196648.909 ops/s
[info]                  ·gc.alloc.rate:                   1691.632 MB/sec
[info]                  ·gc.alloc.rate.norm:              13544.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.833 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1642.910 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13153.912 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 197689.530 ops/s
[info]                  ·gc.alloc.rate:                   1700.801 MB/sec
[info]                  ·gc.alloc.rate.norm:              13544.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.994 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1657.136 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13196.289 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 198243.098 ops/s
[info]                  ·gc.alloc.rate:                   1705.435 MB/sec
[info]                  ·gc.alloc.rate.norm:              13544.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.661 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1669.353 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13257.450 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 198666.211 ops/s
[info]                  ·gc.alloc.rate:                   1709.253 MB/sec
[info]                  ·gc.alloc.rate.norm:              13544.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.165 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1678.852 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13303.106 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 197041.117 ops/s
[info]                  ·gc.alloc.rate:                   1695.133 MB/sec
[info]                  ·gc.alloc.rate.norm:              13544.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.330 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1687.043 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13479.366 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce":
[info]   197657.773 ±(99.9%) 3197.794 ops/s [Average]
[info]   (min, avg, max) = (196648.909, 197657.773, 198666.211), stdev = 830.457
[info]   CI (99.9%): [194459.979, 200855.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1700.451 ±(99.9%) 27.800 MB/sec [Average]
[info]   (min, avg, max) = (1691.632, 1700.451, 1709.253), stdev = 7.220
[info]   CI (99.9%): [1672.651, 1728.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   13544.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (13544.002, 13544.002, 13544.002), stdev = 0.001
[info]   CI (99.9%): [13544.002, 13544.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.100 ±(99.9%) 0.207 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.100, 0.166), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.797 ±(99.9%) 1.659 B/op [Average]
[info]   (min, avg, max) = (0.165, 0.797, 1.330), stdev = 0.431
[info]   CI (99.9%): [≈ 0, 2.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1667.059 ±(99.9%) 67.396 MB/sec [Average]
[info]   (min, avg, max) = (1642.910, 1667.059, 1687.043), stdev = 17.502
[info]   CI (99.9%): [1599.664, 1734.455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   13278.024 ±(99.9%) 485.835 B/op [Average]
[info]   (min, avg, max) = (13153.912, 13278.024, 13479.366), stdev = 126.170
[info]   CI (99.9%): [12792.189, 13763.859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala
[info] # Run progress: 43.38% complete, ETA 00:32:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 331928.958 ops/s
[info] # Warmup Iteration   2: 487304.365 ops/s
[info] # Warmup Iteration   3: 492444.683 ops/s
[info] Iteration   1: 490783.357 ops/s
[info]                  ·gc.alloc.rate:                   503.745 MB/sec
[info]                  ·gc.alloc.rate.norm:              1616.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.134 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      641.230 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2057.049 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 489739.249 ops/s
[info]                  ·gc.alloc.rate:                   502.774 MB/sec
[info]                  ·gc.alloc.rate.norm:              1616.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      322.693 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1037.189 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 488024.360 ops/s
[info]                  ·gc.alloc.rate:                   500.927 MB/sec
[info]                  ·gc.alloc.rate.norm:              1616.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.403 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      647.231 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2087.979 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 494028.597 ops/s
[info]                  ·gc.alloc.rate:                   507.191 MB/sec
[info]                  ·gc.alloc.rate.norm:              1616.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      324.684 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1034.500 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 491107.734 ops/s
[info]                  ·gc.alloc.rate:                   504.124 MB/sec
[info]                  ·gc.alloc.rate.norm:              1616.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.067 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      651.942 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2089.839 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala":
[info]   490736.659 ±(99.9%) 8464.441 ops/s [Average]
[info]   (min, avg, max) = (488024.360, 490736.659, 494028.597), stdev = 2198.188
[info]   CI (99.9%): [482272.219, 499201.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   503.752 ±(99.9%) 8.803 MB/sec [Average]
[info]   (min, avg, max) = (500.927, 503.752, 507.191), stdev = 2.286
[info]   CI (99.9%): [494.950, 512.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1616.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1616.001, 1616.001, 1616.001), stdev = 0.001
[info]   CI (99.9%): [1616.001, 1616.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.200 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.125), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.121 ±(99.9%) 0.644 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.121, 0.403), stdev = 0.167
[info]   CI (99.9%): [≈ 0, 0.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   517.556 ±(99.9%) 681.634 MB/sec [Average]
[info]   (min, avg, max) = (322.693, 517.556, 651.942), stdev = 177.018
[info]   CI (99.9%): [≈ 0, 1199.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1661.311 ±(99.9%) 2199.178 B/op [Average]
[info]   (min, avg, max) = (1034.500, 1661.311, 2089.839), stdev = 571.119
[info]   CI (99.9%): [≈ 0, 3860.489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala
[info] # Run progress: 43.75% complete, ETA 00:32:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 567325.117 ops/s
[info] # Warmup Iteration   2: 643108.603 ops/s
[info] # Warmup Iteration   3: 597526.203 ops/s
[info] Iteration   1: 590160.057 ops/s
[info]                  ·gc.alloc.rate:                   461.888 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.714 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.905 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      584.433 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1558.866 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 583091.084 ops/s
[info]                  ·gc.alloc.rate:                   456.493 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.797 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 887.370 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 589198.241 ops/s
[info]                  ·gc.alloc.rate:                   461.037 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.222 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.900 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1747.378 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 588801.035 ops/s
[info]                  ·gc.alloc.rate:                   460.796 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      326.338 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 872.508 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 571535.380 ops/s
[info]                  ·gc.alloc.rate:                   447.416 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      326.408 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 898.795 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala":
[info]   584557.159 ±(99.9%) 29991.715 ops/s [Average]
[info]   (min, avg, max) = (571535.380, 584557.159, 590160.057), stdev = 7788.753
[info]   CI (99.9%): [554565.444, 614548.875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   457.526 ±(99.9%) 23.211 MB/sec [Average]
[info]   (min, avg, max) = (447.416, 457.526, 461.888), stdev = 6.028
[info]   CI (99.9%): [434.315, 480.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1232.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1232.001, 1232.001, 1232.001), stdev = 0.001
[info]   CI (99.9%): [1232.001, 1232.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.759 ±(99.9%) 6.361 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.759, 3.714), stdev = 1.652
[info]   CI (99.9%): [≈ 0, 7.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2.026 ±(99.9%) 16.966 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.026, 9.905), stdev = 4.406
[info]   CI (99.9%): [≈ 0, 18.991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   443.975 ±(99.9%) 623.053 MB/sec [Average]
[info]   (min, avg, max) = (326.338, 443.975, 653.900), stdev = 161.805
[info]   CI (99.9%): [≈ 0, 1067.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1192.983 ±(99.9%) 1638.080 B/op [Average]
[info]   (min, avg, max) = (872.508, 1192.983, 1747.378), stdev = 425.404
[info]   CI (99.9%): [≈ 0, 2831.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 5.000), stdev = 1.732
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 44.12% complete, ETA 00:32:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 588829.715 ops/s
[info] # Warmup Iteration   2: 655630.458 ops/s
[info] # Warmup Iteration   3: 678279.547 ops/s
[info] Iteration   1: 678900.177 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 676771.003 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 680039.320 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 677742.258 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 678925.479 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc":
[info]   678475.647 ±(99.9%) 4821.506 ops/s [Average]
[info]   (min, avg, max) = (676771.003, 678475.647, 680039.320), stdev = 1252.130
[info]   CI (99.9%): [673654.142, 683297.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson
[info] # Run progress: 44.49% complete, ETA 00:32:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20722.201 ops/s
[info] # Warmup Iteration   2: 30133.644 ops/s
[info] # Warmup Iteration   3: 30688.457 ops/s
[info] Iteration   1: 30454.735 ops/s
[info]                  ·gc.alloc.rate:                   1561.161 MB/sec
[info]                  ·gc.alloc.rate.norm:              80703.263 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.227 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1625.754 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 84042.358 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 30895.487 ops/s
[info]                  ·gc.alloc.rate:                   1583.419 MB/sec
[info]                  ·gc.alloc.rate.norm:              80688.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.302 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1641.130 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 83628.865 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 30256.545 ops/s
[info]                  ·gc.alloc.rate:                   1551.271 MB/sec
[info]                  ·gc.alloc.rate.norm:              80688.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.331 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1325.578 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68948.792 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 30329.437 ops/s
[info]                  ·gc.alloc.rate:                   1554.434 MB/sec
[info]                  ·gc.alloc.rate.norm:              80688.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.401 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1668.452 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 86606.467 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 30844.517 ops/s
[info]                  ·gc.alloc.rate:                   1580.995 MB/sec
[info]                  ·gc.alloc.rate.norm:              80688.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.311 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1678.567 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 85667.752 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson":
[info]   30556.144 ±(99.9%) 1138.632 ops/s [Average]
[info]   (min, avg, max) = (30256.545, 30556.144, 30895.487), stdev = 295.699
[info]   CI (99.9%): [29417.512, 31694.777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1566.256 ±(99.9%) 57.826 MB/sec [Average]
[info]   (min, avg, max) = (1551.271, 1566.256, 1583.419), stdev = 15.017
[info]   CI (99.9%): [1508.430, 1624.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   80691.063 ±(99.9%) 26.261 B/op [Average]
[info]   (min, avg, max) = (80688.013, 80691.063, 80703.263), stdev = 6.820
[info]   CI (99.9%): [80664.803, 80717.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.092, 0.104), stdev = 0.019
[info]   CI (99.9%): [0.020, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4.714 ±(99.9%) 3.618 B/op [Average]
[info]   (min, avg, max) = (3.227, 4.714, 5.401), stdev = 0.940
[info]   CI (99.9%): [1.096, 8.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1587.896 ±(99.9%) 570.456 MB/sec [Average]
[info]   (min, avg, max) = (1325.578, 1587.896, 1678.567), stdev = 148.146
[info]   CI (99.9%): [1017.441, 2158.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   81778.847 ±(99.9%) 28005.716 B/op [Average]
[info]   (min, avg, max) = (68948.792, 81778.847, 86606.467), stdev = 7272.995
[info]   CI (99.9%): [53773.131, 109784.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 5.000), stdev = 0.894
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce
[info] # Run progress: 44.85% complete, ETA 00:32:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5364.592 ops/s
[info] # Warmup Iteration   2: 7889.990 ops/s
[info] # Warmup Iteration   3: 8124.479 ops/s
[info] Iteration   1: 8120.085 ops/s
[info]                  ·gc.alloc.rate:                   1249.722 MB/sec
[info]                  ·gc.alloc.rate.norm:              242280.050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.068 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1309.403 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 253850.142 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 8128.593 ops/s
[info]                  ·gc.alloc.rate:                   1251.346 MB/sec
[info]                  ·gc.alloc.rate.norm:              242280.054 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20.153 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1315.637 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 254727.872 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 8134.046 ops/s
[info]                  ·gc.alloc.rate:                   1251.757 MB/sec
[info]                  ·gc.alloc.rate.norm:              242280.050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.081 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      991.030 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 191815.826 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 8083.955 ops/s
[info]                  ·gc.alloc.rate:                   1244.211 MB/sec
[info]                  ·gc.alloc.rate.norm:              242280.050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.157 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1329.239 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 258837.212 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 8084.684 ops/s
[info]                  ·gc.alloc.rate:                   1244.307 MB/sec
[info]                  ·gc.alloc.rate.norm:              242281.069 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.156 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1336.496 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 260231.487 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce":
[info]   8110.273 ±(99.9%) 93.224 ops/s [Average]
[info]   (min, avg, max) = (8083.955, 8110.273, 8134.046), stdev = 24.210
[info]   CI (99.9%): [8017.049, 8203.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1248.269 ±(99.9%) 14.397 MB/sec [Average]
[info]   (min, avg, max) = (1244.211, 1248.269, 1251.757), stdev = 3.739
[info]   CI (99.9%): [1233.871, 1262.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   242280.255 ±(99.9%) 1.753 B/op [Average]
[info]   (min, avg, max) = (242280.050, 242280.255, 242281.069), stdev = 0.455
[info]   CI (99.9%): [242278.502, 242282.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.104), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   12.923 ±(99.9%) 16.974 B/op [Average]
[info]   (min, avg, max) = (8.068, 12.923, 20.153), stdev = 4.408
[info]   CI (99.9%): [≈ 0, 29.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1256.361 ±(99.9%) 572.635 MB/sec [Average]
[info]   (min, avg, max) = (991.030, 1256.361, 1336.496), stdev = 148.711
[info]   CI (99.9%): [683.727, 1828.996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   243892.508 ±(99.9%) 112575.319 B/op [Average]
[info]   (min, avg, max) = (191815.826, 243892.508, 260231.487), stdev = 29235.453
[info]   CI (99.9%): [131317.189, 356467.827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala
[info] # Run progress: 45.22% complete, ETA 00:31:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 89311.437 ops/s
[info] # Warmup Iteration   2: 98446.009 ops/s
[info] # Warmup Iteration   3: 99999.623 ops/s
[info] Iteration   1: 99485.577 ops/s
[info]                  ·gc.alloc.rate:                   963.530 MB/sec
[info]                  ·gc.alloc.rate.norm:              15248.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.317 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      989.463 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15658.409 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 99213.828 ops/s
[info]                  ·gc.alloc.rate:                   960.825 MB/sec
[info]                  ·gc.alloc.rate.norm:              15248.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.642 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      990.156 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15713.476 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 97988.214 ops/s
[info]                  ·gc.alloc.rate:                   949.002 MB/sec
[info]                  ·gc.alloc.rate.norm:              15248.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.669 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      992.154 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15941.334 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 99599.376 ops/s
[info]                  ·gc.alloc.rate:                   964.763 MB/sec
[info]                  ·gc.alloc.rate.norm:              15248.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.329 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      996.628 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15751.639 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 98751.938 ops/s
[info]                  ·gc.alloc.rate:                   956.543 MB/sec
[info]                  ·gc.alloc.rate.norm:              15248.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.327 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      999.275 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15929.175 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala":
[info]   99007.787 ±(99.9%) 2529.217 ops/s [Average]
[info]   (min, avg, max) = (97988.214, 99007.787, 99599.376), stdev = 656.830
[info]   CI (99.9%): [96478.570, 101537.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   958.933 ±(99.9%) 24.583 MB/sec [Average]
[info]   (min, avg, max) = (949.002, 958.933, 964.763), stdev = 6.384
[info]   CI (99.9%): [934.350, 983.515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   15248.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (15248.004, 15248.004, 15248.004), stdev = 0.001
[info]   CI (99.9%): [15248.004, 15248.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.215 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.079, 0.166), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.257 ±(99.9%) 3.408 B/op [Average]
[info]   (min, avg, max) = (0.329, 1.257, 2.642), stdev = 0.885
[info]   CI (99.9%): [≈ 0, 4.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   993.535 ±(99.9%) 16.384 MB/sec [Average]
[info]   (min, avg, max) = (989.463, 993.535, 999.275), stdev = 4.255
[info]   CI (99.9%): [977.151, 1009.920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   15798.806 ±(99.9%) 496.597 B/op [Average]
[info]   (min, avg, max) = (15658.409, 15798.806, 15941.334), stdev = 128.965
[info]   CI (99.9%): [15302.210, 16295.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson
[info] # Run progress: 45.59% complete, ETA 00:31:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3587.752 ops/s
[info] # Warmup Iteration   2: 7454.977 ops/s
[info] # Warmup Iteration   3: 7612.616 ops/s
[info] Iteration   1: 7590.976 ops/s
[info]                  ·gc.alloc.rate:                   1370.122 MB/sec
[info]                  ·gc.alloc.rate.norm:              284216.058 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.315 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1319.300 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 273673.641 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 7574.492 ops/s
[info]                  ·gc.alloc.rate:                   1367.399 MB/sec
[info]                  ·gc.alloc.rate.norm:              284216.054 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.976 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1330.461 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 276538.391 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 7588.270 ops/s
[info]                  ·gc.alloc.rate:                   1369.839 MB/sec
[info]                  ·gc.alloc.rate.norm:              284216.054 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.635 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1337.701 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 277547.982 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 7620.627 ops/s
[info]                  ·gc.alloc.rate:                   1376.298 MB/sec
[info]                  ·gc.alloc.rate.norm:              284216.054 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.299 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.184 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 277584.464 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 7613.575 ops/s
[info]                  ·gc.alloc.rate:                   1374.598 MB/sec
[info]                  ·gc.alloc.rate.norm:              284216.058 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.303 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.086 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 278941.042 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson":
[info]   7597.588 ±(99.9%) 73.322 ops/s [Average]
[info]   (min, avg, max) = (7574.492, 7597.588, 7620.627), stdev = 19.042
[info]   CI (99.9%): [7524.266, 7670.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1371.651 ±(99.9%) 14.145 MB/sec [Average]
[info]   (min, avg, max) = (1367.399, 1371.651, 1376.298), stdev = 3.673
[info]   CI (99.9%): [1357.507, 1385.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   284216.055 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (284216.054, 284216.055, 284216.058), stdev = 0.002
[info]   CI (99.9%): [284216.047, 284216.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.033, 0.062), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   6.905 ±(99.9%) 14.928 B/op [Average]
[info]   (min, avg, max) = (4.299, 6.905, 12.976), stdev = 3.877
[info]   CI (99.9%): [≈ 0, 21.834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1336.146 ±(99.9%) 45.176 MB/sec [Average]
[info]   (min, avg, max) = (1319.300, 1336.146, 1349.086), stdev = 11.732
[info]   CI (99.9%): [1290.970, 1381.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   276857.104 ±(99.9%) 7600.798 B/op [Average]
[info]   (min, avg, max) = (273673.641, 276857.104, 278941.042), stdev = 1973.903
[info]   CI (99.9%): [269256.306, 284457.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce
[info] # Run progress: 45.96% complete, ETA 00:31:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13615.603 ops/s
[info] # Warmup Iteration   2: 18473.742 ops/s
[info] # Warmup Iteration   3: 18485.176 ops/s
[info] Iteration   1: 18512.803 ops/s
[info]                  ·gc.alloc.rate:                   923.217 MB/sec
[info]                  ·gc.alloc.rate.norm:              78514.508 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.078 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      978.762 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 83238.294 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 18532.948 ops/s
[info]                  ·gc.alloc.rate:                   924.561 MB/sec
[info]                  ·gc.alloc.rate.norm:              78552.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.607 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.511 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55438.308 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 18536.948 ops/s
[info]                  ·gc.alloc.rate:                   924.915 MB/sec
[info]                  ·gc.alloc.rate.norm:              78552.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      982.541 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 83446.086 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 18463.197 ops/s
[info]                  ·gc.alloc.rate:                   921.072 MB/sec
[info]                  ·gc.alloc.rate.norm:              78530.209 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.097 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      986.594 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 84116.599 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 18618.806 ops/s
[info]                  ·gc.alloc.rate:                   928.834 MB/sec
[info]                  ·gc.alloc.rate.norm:              78528.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.279 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      991.983 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 83866.936 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce":
[info]   18532.940 ±(99.9%) 216.619 ops/s [Average]
[info]   (min, avg, max) = (18463.197, 18532.940, 18618.806), stdev = 56.255
[info]   CI (99.9%): [18316.321, 18749.559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   924.520 ±(99.9%) 10.952 MB/sec [Average]
[info]   (min, avg, max) = (921.072, 924.520, 928.834), stdev = 2.844
[info]   CI (99.9%): [913.568, 935.471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   78535.358 ±(99.9%) 62.996 B/op [Average]
[info]   (min, avg, max) = (78514.508, 78535.358, 78552.028), stdev = 16.360
[info]   CI (99.9%): [78472.363, 78598.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.176 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.071, 0.125), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   6.012 ±(99.9%) 14.927 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.012, 10.607), stdev = 3.876
[info]   CI (99.9%): [≈ 0, 20.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   918.478 ±(99.9%) 572.825 MB/sec [Average]
[info]   (min, avg, max) = (652.511, 918.478, 991.983), stdev = 148.761
[info]   CI (99.9%): [345.653, 1491.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   78021.245 ±(99.9%) 48629.569 B/op [Average]
[info]   (min, avg, max) = (55438.308, 78021.245, 84116.599), stdev = 12628.945
[info]   CI (99.9%): [29391.675, 126650.814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala
[info] # Run progress: 46.32% complete, ETA 00:31:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 419036.342 ops/s
[info] # Warmup Iteration   2: 457649.380 ops/s
[info] # Warmup Iteration   3: 437803.606 ops/s
[info] Iteration   1: 444262.067 ops/s
[info]                  ·gc.alloc.rate:                   1006.784 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.147 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      978.782 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3468.762 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 442673.557 ops/s
[info]                  ·gc.alloc.rate:                   1003.333 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.444 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      980.343 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3486.246 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 445290.193 ops/s
[info]                  ·gc.alloc.rate:                   1009.167 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.294 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      984.510 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3480.822 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 440220.836 ops/s
[info]                  ·gc.alloc.rate:                   997.761 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.223 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      988.604 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3535.254 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 441682.986 ops/s
[info]                  ·gc.alloc.rate:                   1000.989 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.371 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      993.793 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3542.350 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala":
[info]   442825.928 ±(99.9%) 7761.492 ops/s [Average]
[info]   (min, avg, max) = (440220.836, 442825.928, 445290.193), stdev = 2015.635
[info]   CI (99.9%): [435064.436, 450587.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1003.607 ±(99.9%) 17.447 MB/sec [Average]
[info]   (min, avg, max) = (997.761, 1003.607, 1009.167), stdev = 4.531
[info]   CI (99.9%): [986.160, 1021.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3568.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3568.001, 3568.001, 3568.001), stdev = 0.001
[info]   CI (99.9%): [3568.001, 3568.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.125), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.296 ±(99.9%) 0.451 B/op [Average]
[info]   (min, avg, max) = (0.147, 0.296, 0.444), stdev = 0.117
[info]   CI (99.9%): [≈ 0, 0.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   985.206 ±(99.9%) 23.634 MB/sec [Average]
[info]   (min, avg, max) = (978.782, 985.206, 993.793), stdev = 6.138
[info]   CI (99.9%): [961.572, 1008.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3502.687 ±(99.9%) 129.629 B/op [Average]
[info]   (min, avg, max) = (3468.762, 3502.687, 3542.350), stdev = 33.664
[info]   CI (99.9%): [3373.058, 3632.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 46.69% complete, ETA 00:31:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 462486.111 ops/s
[info] # Warmup Iteration   2: 508004.131 ops/s
[info] # Warmup Iteration   3: 506283.775 ops/s
[info] Iteration   1: 505922.470 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 505281.631 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 504250.250 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 504575.265 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 505649.357 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   505135.794 ±(99.9%) 2724.350 ops/s [Average]
[info]   (min, avg, max) = (504250.250, 505135.794, 505922.470), stdev = 707.505
[info]   CI (99.9%): [502411.444, 507860.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson
[info] # Run progress: 47.06% complete, ETA 00:30:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13759.689 ops/s
[info] # Warmup Iteration   2: 19180.709 ops/s
[info] # Warmup Iteration   3: 19593.895 ops/s
[info] Iteration   1: 19780.763 ops/s
[info]                  ·gc.alloc.rate:                   923.250 MB/sec
[info]                  ·gc.alloc.rate.norm:              73483.710 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      645.930 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51411.177 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 19840.837 ops/s
[info]                  ·gc.alloc.rate:                   914.546 MB/sec
[info]                  ·gc.alloc.rate.norm:              72552.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.256 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      969.813 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 76936.437 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 19873.536 ops/s
[info]                  ·gc.alloc.rate:                   917.156 MB/sec
[info]                  ·gc.alloc.rate.norm:              72657.486 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.242 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      973.836 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 77147.721 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 19838.136 ops/s
[info]                  ·gc.alloc.rate:                   914.088 MB/sec
[info]                  ·gc.alloc.rate.norm:              72536.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.954 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      978.630 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 77657.617 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 19577.450 ops/s
[info]                  ·gc.alloc.rate:                   902.088 MB/sec
[info]                  ·gc.alloc.rate.norm:              72536.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.694 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      985.315 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 79228.241 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson":
[info]   19782.145 ±(99.9%) 458.994 ops/s [Average]
[info]   (min, avg, max) = (19577.450, 19782.145, 19873.536), stdev = 119.199
[info]   CI (99.9%): [19323.150, 20241.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   914.225 ±(99.9%) 29.669 MB/sec [Average]
[info]   (min, avg, max) = (902.088, 914.225, 923.250), stdev = 7.705
[info]   CI (99.9%): [884.556, 943.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   72753.052 ±(99.9%) 1584.872 B/op [Average]
[info]   (min, avg, max) = (72536.021, 72753.052, 73483.710), stdev = 411.586
[info]   CI (99.9%): [71168.180, 74337.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.071, 0.104), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   5.629 ±(99.9%) 13.200 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.629, 8.256), stdev = 3.428
[info]   CI (99.9%): [≈ 0, 18.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   910.705 ±(99.9%) 570.381 MB/sec [Average]
[info]   (min, avg, max) = (645.930, 910.705, 985.315), stdev = 148.126
[info]   CI (99.9%): [340.324, 1481.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   72476.239 ±(99.9%) 45475.484 B/op [Average]
[info]   (min, avg, max) = (51411.177, 72476.239, 79228.241), stdev = 11809.839
[info]   CI (99.9%): [27000.754, 117951.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 4.000), stdev = 0.837
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce
[info] # Run progress: 47.43% complete, ETA 00:30:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11264.393 ops/s
[info] # Warmup Iteration   2: 27150.396 ops/s
[info] # Warmup Iteration   3: 27567.818 ops/s
[info] Iteration   1: 27948.987 ops/s
[info]                  ·gc.alloc.rate:                   1007.371 MB/sec
[info]                  ·gc.alloc.rate.norm:              56752.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.172 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      980.699 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55249.408 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 27327.726 ops/s
[info]                  ·gc.alloc.rate:                   985.539 MB/sec
[info]                  ·gc.alloc.rate.norm:              56751.431 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.994 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      982.026 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 56549.137 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 27959.232 ops/s
[info]                  ·gc.alloc.rate:                   1007.827 MB/sec
[info]                  ·gc.alloc.rate.norm:              56752.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.343 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      984.454 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55435.873 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 28079.666 ops/s
[info]                  ·gc.alloc.rate:                   1012.434 MB/sec
[info]                  ·gc.alloc.rate.norm:              56752.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.500 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      988.725 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55423.025 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 27625.770 ops/s
[info]                  ·gc.alloc.rate:                   996.002 MB/sec
[info]                  ·gc.alloc.rate.norm:              56752.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.186 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      993.285 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 56597.224 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce":
[info]   27788.276 ±(99.9%) 1184.468 ops/s [Average]
[info]   (min, avg, max) = (27327.726, 27788.276, 28079.666), stdev = 307.603
[info]   CI (99.9%): [26603.808, 28972.744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate":
[info]   1001.835 ±(99.9%) 42.114 MB/sec [Average]
[info]   (min, avg, max) = (985.539, 1001.835, 1012.434), stdev = 10.937
[info]   CI (99.9%): [959.720, 1043.949] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   56751.898 ±(99.9%) 1.006 B/op [Average]
[info]   (min, avg, max) = (56751.431, 56751.898, 56752.016), stdev = 0.261
[info]   CI (99.9%): [56750.893, 56752.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.050, 0.104), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2.839 ±(99.9%) 7.738 B/op [Average]
[info]   (min, avg, max) = (1.172, 2.839, 5.994), stdev = 2.009
[info]   CI (99.9%): [≈ 0, 10.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   985.838 ±(99.9%) 19.883 MB/sec [Average]
[info]   (min, avg, max) = (980.699, 985.838, 993.285), stdev = 5.164
[info]   CI (99.9%): [965.955, 1005.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   55850.933 ±(99.9%) 2555.428 B/op [Average]
[info]   (min, avg, max) = (55249.408, 55850.933, 56597.224), stdev = 663.636
[info]   CI (99.9%): [53295.506, 58406.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala
[info] # Run progress: 47.79% complete, ETA 00:30:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7914.621 ops/s
[info] # Warmup Iteration   2: 26935.091 ops/s
[info] # Warmup Iteration   3: 27669.262 ops/s
[info] Iteration   1: 27875.080 ops/s
[info]                  ·gc.alloc.rate:                   763.985 MB/sec
[info]                  ·gc.alloc.rate.norm:              43144.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.526 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      649.702 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36690.193 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 27615.577 ops/s
[info]                  ·gc.alloc.rate:                   756.891 MB/sec
[info]                  ·gc.alloc.rate.norm:              43144.522 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.746 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      980.742 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55904.564 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 28199.607 ops/s
[info]                  ·gc.alloc.rate:                   772.979 MB/sec
[info]                  ·gc.alloc.rate.norm:              43144.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658.745 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36768.008 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 28104.640 ops/s
[info]                  ·gc.alloc.rate:                   770.148 MB/sec
[info]                  ·gc.alloc.rate.norm:              43144.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.166 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      661.214 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37041.479 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 28074.417 ops/s
[info]                  ·gc.alloc.rate:                   769.366 MB/sec
[info]                  ·gc.alloc.rate.norm:              43144.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.334 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      995.272 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55812.267 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala":
[info]   27973.864 ±(99.9%) 895.432 ops/s [Average]
[info]   (min, avg, max) = (27615.577, 27973.864, 28199.607), stdev = 232.541
[info]   CI (99.9%): [27078.432, 28869.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   766.674 ±(99.9%) 24.506 MB/sec [Average]
[info]   (min, avg, max) = (756.891, 766.674, 772.979), stdev = 6.364
[info]   CI (99.9%): [742.168, 791.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   43144.116 ±(99.9%) 0.873 B/op [Average]
[info]   (min, avg, max) = (43144.015, 43144.116, 43144.522), stdev = 0.227
[info]   CI (99.9%): [43143.243, 43144.989] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.083), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2.354 ±(99.9%) 7.216 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.354, 4.746), stdev = 1.874
[info]   CI (99.9%): [≈ 0, 9.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   789.135 ±(99.9%) 699.538 MB/sec [Average]
[info]   (min, avg, max) = (649.702, 789.135, 995.272), stdev = 181.668
[info]   CI (99.9%): [89.597, 1488.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   44443.302 ±(99.9%) 40129.073 B/op [Average]
[info]   (min, avg, max) = (36690.193, 44443.302, 55904.564), stdev = 10421.393
[info]   CI (99.9%): [4314.229, 84572.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 4.000), stdev = 0.837
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala
[info] # Run progress: 48.16% complete, ETA 00:30:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 197135.080 ops/s
[info] # Warmup Iteration   2: 204610.344 ops/s
[info] # Warmup Iteration   3: 204541.018 ops/s
[info] Iteration   1: 204968.770 ops/s
[info]                  ·gc.alloc.rate:                   533.261 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.575 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19.781 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      331.603 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2547.061 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 203874.227 ops/s
[info]                  ·gc.alloc.rate:                   530.486 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.643 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      662.015 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5111.568 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 203395.299 ops/s
[info]                  ·gc.alloc.rate:                   529.352 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.644 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.144 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5108.040 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 206069.664 ops/s
[info]                  ·gc.alloc.rate:                   536.175 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.663 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2518.390 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 205731.647 ops/s
[info]                  ·gc.alloc.rate:                   535.292 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.319 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.659 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5055.294 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala":
[info]   204807.921 ±(99.9%) 4448.461 ops/s [Average]
[info]   (min, avg, max) = (203395.299, 204807.921, 206069.664), stdev = 1155.251
[info]   CI (99.9%): [200359.460, 209256.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   532.913 ±(99.9%) 11.390 MB/sec [Average]
[info]   (min, avg, max) = (529.352, 532.913, 536.175), stdev = 2.958
[info]   CI (99.9%): [521.524, 544.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.002, 4096.002, 4096.002), stdev = 0.001
[info]   CI (99.9%): [4096.002, 4096.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.557 ±(99.9%) 4.347 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.557, 2.575), stdev = 1.129
[info]   CI (99.9%): [≈ 0, 4.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4.277 ±(99.9%) 33.389 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.277, 19.781), stdev = 8.671
[info]   CI (99.9%): [≈ 0, 37.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   528.817 ±(99.9%) 696.654 MB/sec [Average]
[info]   (min, avg, max) = (329.663, 528.817, 662.015), stdev = 180.919
[info]   CI (99.9%): [≈ 0, 1225.471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4068.071 ±(99.9%) 5397.778 B/op [Average]
[info]   (min, avg, max) = (2518.390, 4068.071, 5111.568), stdev = 1401.786
[info]   CI (99.9%): [≈ 0, 9465.849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson
[info] # Run progress: 48.53% complete, ETA 00:29:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5219.215 ops/s
[info] # Warmup Iteration   2: 22133.725 ops/s
[info] # Warmup Iteration   3: 22392.697 ops/s
[info] Iteration   1: 22490.533 ops/s
[info]                  ·gc.alloc.rate:                   1406.362 MB/sec
[info]                  ·gc.alloc.rate.norm:              98448.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.370 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1634.433 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 114413.416 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 22687.066 ops/s
[info]                  ·gc.alloc.rate:                   1418.726 MB/sec
[info]                  ·gc.alloc.rate.norm:              98448.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.776 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1321.233 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 91682.816 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 22589.547 ops/s
[info]                  ·gc.alloc.rate:                   1412.652 MB/sec
[info]                  ·gc.alloc.rate.norm:              98448.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.450 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1330.547 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 92726.160 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 22649.389 ops/s
[info]                  ·gc.alloc.rate:                   1416.325 MB/sec
[info]                  ·gc.alloc.rate.norm:              98448.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.339 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1674.413 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 116387.585 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 22599.115 ops/s
[info]                  ·gc.alloc.rate:                   1413.679 MB/sec
[info]                  ·gc.alloc.rate.norm:              98448.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.798 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.520 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 93771.130 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson":
[info]   22603.130 ±(99.9%) 285.986 ops/s [Average]
[info]   (min, avg, max) = (22490.533, 22603.130, 22687.066), stdev = 74.270
[info]   CI (99.9%): [22317.145, 22889.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1413.549 ±(99.9%) 17.957 MB/sec [Average]
[info]   (min, avg, max) = (1406.362, 1413.549, 1418.726), stdev = 4.663
[info]   CI (99.9%): [1395.592, 1431.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   98448.020 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (98448.018, 98448.020, 98448.023), stdev = 0.002
[info]   CI (99.9%): [98448.013, 98448.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.083), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4.347 ±(99.9%) 6.818 B/op [Average]
[info]   (min, avg, max) = (1.450, 4.347, 5.798), stdev = 1.771
[info]   CI (99.9%): [≈ 0, 11.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1461.429 ±(99.9%) 681.470 MB/sec [Average]
[info]   (min, avg, max) = (1321.233, 1461.429, 1674.413), stdev = 176.976
[info]   CI (99.9%): [779.959, 2142.899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   101796.221 ±(99.9%) 47980.730 B/op [Average]
[info]   (min, avg, max) = (91682.816, 101796.221, 116387.585), stdev = 12460.443
[info]   CI (99.9%): [53815.491, 149776.951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 0.837
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce
[info] # Run progress: 48.90% complete, ETA 00:29:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 64721.988 ops/s
[info] # Warmup Iteration   2: 82432.904 ops/s
[info] # Warmup Iteration   3: 83745.179 ops/s
[info] Iteration   1: 83320.188 ops/s
[info]                  ·gc.alloc.rate:                   1284.854 MB/sec
[info]                  ·gc.alloc.rate.norm:              24280.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.752 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1307.748 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24712.641 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 83412.684 ops/s
[info]                  ·gc.alloc.rate:                   1286.471 MB/sec
[info]                  ·gc.alloc.rate.norm:              24280.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.964 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1314.626 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24811.376 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 83654.728 ops/s
[info]                  ·gc.alloc.rate:                   1290.642 MB/sec
[info]                  ·gc.alloc.rate.norm:              24280.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.783 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1323.702 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24901.941 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 83443.799 ops/s
[info]                  ·gc.alloc.rate:                   1287.425 MB/sec
[info]                  ·gc.alloc.rate.norm:              24280.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.178 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1332.337 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25127.028 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 83460.091 ops/s
[info]                  ·gc.alloc.rate:                   1287.253 MB/sec
[info]                  ·gc.alloc.rate.norm:              24280.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.963 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1003.911 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18935.640 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce":
[info]   83458.298 ±(99.9%) 471.422 ops/s [Average]
[info]   (min, avg, max) = (83320.188, 83458.298, 83654.728), stdev = 122.427
[info]   CI (99.9%): [82986.876, 83929.720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1287.329 ±(99.9%) 8.135 MB/sec [Average]
[info]   (min, avg, max) = (1284.854, 1287.329, 1290.642), stdev = 2.113
[info]   CI (99.9%): [1279.194, 1295.464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   24280.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (24280.005, 24280.005, 24280.005), stdev = 0.001
[info]   CI (99.9%): [24280.004, 24280.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.092, 0.146), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1.728 ±(99.9%) 2.955 B/op [Average]
[info]   (min, avg, max) = (0.783, 1.728, 2.752), stdev = 0.767
[info]   CI (99.9%): [≈ 0, 4.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1256.465 ±(99.9%) 544.814 MB/sec [Average]
[info]   (min, avg, max) = (1003.911, 1256.465, 1332.337), stdev = 141.487
[info]   CI (99.9%): [711.651, 1801.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   23697.725 ±(99.9%) 10267.720 B/op [Average]
[info]   (min, avg, max) = (18935.640, 23697.725, 25127.028), stdev = 2666.494
[info]   CI (99.9%): [13430.005, 33965.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala
[info] # Run progress: 49.26% complete, ETA 00:29:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 91529.361 ops/s
[info] # Warmup Iteration   2: 141141.664 ops/s
[info] # Warmup Iteration   3: 141832.317 ops/s
[info] Iteration   1: 141389.281 ops/s
[info]                  ·gc.alloc.rate:                   1195.939 MB/sec
[info]                  ·gc.alloc.rate.norm:              13320.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.695 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      979.320 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10907.373 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 137851.998 ops/s
[info]                  ·gc.alloc.rate:                   1166.364 MB/sec
[info]                  ·gc.alloc.rate.norm:              13320.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.426 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1316.990 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15040.176 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 141204.546 ops/s
[info]                  ·gc.alloc.rate:                   1194.579 MB/sec
[info]                  ·gc.alloc.rate.norm:              13320.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.696 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      994.442 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11088.402 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 141591.709 ops/s
[info]                  ·gc.alloc.rate:                   1198.149 MB/sec
[info]                  ·gc.alloc.rate.norm:              13320.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.463 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1334.040 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14830.726 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 141692.944 ops/s
[info]                  ·gc.alloc.rate:                   1198.868 MB/sec
[info]                  ·gc.alloc.rate.norm:              13320.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.925 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.233 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14901.755 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala":
[info]   140746.096 ±(99.9%) 6271.719 ops/s [Average]
[info]   (min, avg, max) = (137851.998, 140746.096, 141692.944), stdev = 1628.746
[info]   CI (99.9%): [134474.376, 147017.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1190.780 ±(99.9%) 52.970 MB/sec [Average]
[info]   (min, avg, max) = (1166.364, 1190.780, 1198.868), stdev = 13.756
[info]   CI (99.9%): [1137.810, 1243.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   13320.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (13320.003, 13320.003, 13320.003), stdev = 0.001
[info]   CI (99.9%): [13320.003, 13320.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.125), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.841 ±(99.9%) 1.408 B/op [Average]
[info]   (min, avg, max) = (0.463, 0.841, 1.426), stdev = 0.366
[info]   CI (99.9%): [≈ 0, 2.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1193.205 ±(99.9%) 726.342 MB/sec [Average]
[info]   (min, avg, max) = (979.320, 1193.205, 1341.233), stdev = 188.629
[info]   CI (99.9%): [466.863, 1919.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   13353.687 ±(99.9%) 8289.707 B/op [Average]
[info]   (min, avg, max) = (10907.373, 13353.687, 15040.176), stdev = 2152.811
[info]   CI (99.9%): [5063.980, 21643.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala
[info] # Run progress: 49.63% complete, ETA 00:29:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 413755.490 ops/s
[info] # Warmup Iteration   2: 453250.702 ops/s
[info] # Warmup Iteration   3: 420297.794 ops/s
[info] Iteration   1: 419068.589 ops/s
[info]                  ·gc.alloc.rate:                   464.207 MB/sec
[info]                  ·gc.alloc.rate.norm:              1744.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.726 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      584.274 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2195.087 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 417895.935 ops/s
[info]                  ·gc.alloc.rate:                   463.077 MB/sec
[info]                  ·gc.alloc.rate.norm:              1744.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.078 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.745 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1238.093 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 418350.310 ops/s
[info]                  ·gc.alloc.rate:                   463.410 MB/sec
[info]                  ·gc.alloc.rate.norm:              1744.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.157 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.868 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2460.775 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 419801.993 ops/s
[info]                  ·gc.alloc.rate:                   465.086 MB/sec
[info]                  ·gc.alloc.rate.norm:              1744.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.156 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      326.314 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1223.627 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 420115.905 ops/s
[info]                  ·gc.alloc.rate:                   465.417 MB/sec
[info]                  ·gc.alloc.rate.norm:              1744.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      326.311 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1222.745 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala":
[info]   419046.546 ±(99.9%) 3613.951 ops/s [Average]
[info]   (min, avg, max) = (417895.935, 419046.546, 420115.905), stdev = 938.532
[info]   CI (99.9%): [415432.595, 422660.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   464.239 ±(99.9%) 3.919 MB/sec [Average]
[info]   (min, avg, max) = (463.077, 464.239, 465.417), stdev = 1.018
[info]   CI (99.9%): [460.320, 468.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1744.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1744.001, 1744.001, 1744.001), stdev = 0.001
[info]   CI (99.9%): [1744.001, 1744.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.766 ±(99.9%) 6.373 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.766, 3.726), stdev = 1.655
[info]   CI (99.9%): [≈ 0, 7.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2.878 ±(99.9%) 23.942 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.878, 14.000), stdev = 6.218
[info]   CI (99.9%): [≈ 0, 26.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   443.902 ±(99.9%) 623.001 MB/sec [Average]
[info]   (min, avg, max) = (326.311, 443.902, 653.868), stdev = 161.791
[info]   CI (99.9%): [≈ 0, 1066.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1668.065 ±(99.9%) 2347.671 B/op [Average]
[info]   (min, avg, max) = (1222.745, 1668.065, 2460.775), stdev = 609.683
[info]   CI (99.9%): [≈ 0, 4015.737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 5.000), stdev = 1.732
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 50.00% complete, ETA 00:29:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 461176.289 ops/s
[info] # Warmup Iteration   2: 533127.238 ops/s
[info] # Warmup Iteration   3: 531899.047 ops/s
[info] Iteration   1: 545182.762 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 546176.136 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 546769.183 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 545398.469 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 546815.192 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc":
[info]   546068.348 ±(99.9%) 2915.807 ops/s [Average]
[info]   (min, avg, max) = (545182.762, 546068.348, 546815.192), stdev = 757.226
[info]   CI (99.9%): [543152.541, 548984.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson
[info] # Run progress: 50.37% complete, ETA 00:28:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 78761.888 ops/s
[info] # Warmup Iteration   2: 108517.459 ops/s
[info] # Warmup Iteration   3: 109572.602 ops/s
[info] Iteration   1: 109462.151 ops/s
[info]                  ·gc.alloc.rate:                   1335.033 MB/sec
[info]                  ·gc.alloc.rate.norm:              19200.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.197 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1296.505 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18645.905 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 108664.200 ops/s
[info]                  ·gc.alloc.rate:                   1325.385 MB/sec
[info]                  ·gc.alloc.rate.norm:              19200.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.111 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1304.055 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18891.001 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 107977.445 ops/s
[info]                  ·gc.alloc.rate:                   1317.291 MB/sec
[info]                  ·gc.alloc.rate.norm:              19200.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.910 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1314.909 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19165.284 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 108426.514 ops/s
[info]                  ·gc.alloc.rate:                   1322.477 MB/sec
[info]                  ·gc.alloc.rate.norm:              19200.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.604 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1325.288 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19240.814 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 108880.223 ops/s
[info]                  ·gc.alloc.rate:                   1327.884 MB/sec
[info]                  ·gc.alloc.rate.norm:              19200.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.301 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1333.816 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19285.772 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson":
[info]   108682.107 ±(99.9%) 2117.781 ops/s [Average]
[info]   (min, avg, max) = (107977.445, 108682.107, 109462.151), stdev = 549.981
[info]   CI (99.9%): [106564.325, 110799.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1325.614 ±(99.9%) 25.327 MB/sec [Average]
[info]   (min, avg, max) = (1317.291, 1325.614, 1335.033), stdev = 6.577
[info]   CI (99.9%): [1300.287, 1350.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   19200.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (19200.004, 19200.004, 19200.004), stdev = 0.001
[info]   CI (99.9%): [19200.003, 19200.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.071, 0.146), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.025 ±(99.9%) 2.670 B/op [Average]
[info]   (min, avg, max) = (0.301, 1.025, 2.111), stdev = 0.693
[info]   CI (99.9%): [≈ 0, 3.694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1314.915 ±(99.9%) 58.452 MB/sec [Average]
[info]   (min, avg, max) = (1296.505, 1314.915, 1333.816), stdev = 15.180
[info]   CI (99.9%): [1256.462, 1373.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   19045.755 ±(99.9%) 1043.538 B/op [Average]
[info]   (min, avg, max) = (18645.905, 19045.755, 19285.772), stdev = 271.004
[info]   CI (99.9%): [18002.217, 20089.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 0.707
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce
[info] # Run progress: 50.74% complete, ETA 00:28:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 127648.461 ops/s
[info] # Warmup Iteration   2: 156358.654 ops/s
[info] # Warmup Iteration   3: 157796.791 ops/s
[info] Iteration   1: 157346.117 ops/s
[info]                  ·gc.alloc.rate:                   2646.275 MB/sec
[info]                  ·gc.alloc.rate.norm:              26480.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.041 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2670.054 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26717.943 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 157729.026 ops/s
[info]                  ·gc.alloc.rate:                   2653.166 MB/sec
[info]                  ·gc.alloc.rate.norm:              26480.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2357.004 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23524.146 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 155399.272 ops/s
[info]                  ·gc.alloc.rate:                   2613.613 MB/sec
[info]                  ·gc.alloc.rate.norm:              26480.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.265 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2706.001 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27416.044 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 154415.746 ops/s
[info]                  ·gc.alloc.rate:                   2597.457 MB/sec
[info]                  ·gc.alloc.rate.norm:              26480.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.636 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2715.118 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27679.506 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 156540.001 ops/s
[info]                  ·gc.alloc.rate:                   2633.806 MB/sec
[info]                  ·gc.alloc.rate.norm:              26480.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.256 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2719.727 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27343.849 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce":
[info]   156286.033 ±(99.9%) 5291.948 ops/s [Average]
[info]   (min, avg, max) = (154415.746, 156286.033, 157729.026), stdev = 1374.302
[info]   CI (99.9%): [150994.084, 161577.981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate":
[info]   2628.863 ±(99.9%) 89.007 MB/sec [Average]
[info]   (min, avg, max) = (2597.457, 2628.863, 2653.166), stdev = 23.115
[info]   CI (99.9%): [2539.856, 2717.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   26480.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (26480.003, 26480.003, 26480.003), stdev = 0.001
[info]   CI (99.9%): [26480.002, 26480.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.104 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.104, 0.125), stdev = 0.025
[info]   CI (99.9%): [0.006, 0.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1.047 ±(99.9%) 0.981 B/op [Average]
[info]   (min, avg, max) = (0.636, 1.047, 1.265), stdev = 0.255
[info]   CI (99.9%): [0.066, 2.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2633.581 ±(99.9%) 600.069 MB/sec [Average]
[info]   (min, avg, max) = (2357.004, 2633.581, 2719.727), stdev = 155.836
[info]   CI (99.9%): [2033.512, 3233.649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   26536.298 ±(99.9%) 6624.639 B/op [Average]
[info]   (min, avg, max) = (23524.146, 26536.298, 27679.506), stdev = 1720.398
[info]   CI (99.9%): [19911.659, 33160.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.count":
[info]   39.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.800, 8.000), stdev = 0.447
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.400, 8.000), stdev = 0.548
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala
[info] # Run progress: 51.10% complete, ETA 00:28:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 236566.877 ops/s
[info] # Warmup Iteration   2: 370021.269 ops/s
[info] # Warmup Iteration   3: 378648.351 ops/s
[info] Iteration   1: 379320.918 ops/s
[info]                  ·gc.alloc.rate:                   387.489 MB/sec
[info]                  ·gc.alloc.rate.norm:              1608.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.766 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1061.376 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 377153.921 ops/s
[info]                  ·gc.alloc.rate:                   385.211 MB/sec
[info]                  ·gc.alloc.rate.norm:              1608.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.434 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      323.624 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1350.914 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 378153.660 ops/s
[info]                  ·gc.alloc.rate:                   386.269 MB/sec
[info]                  ·gc.alloc.rate.norm:              1608.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.087 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      323.655 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1347.342 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 376113.914 ops/s
[info]                  ·gc.alloc.rate:                   384.136 MB/sec
[info]                  ·gc.alloc.rate.norm:              1608.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.087 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      651.222 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2726.028 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 377452.502 ops/s
[info]                  ·gc.alloc.rate:                   385.537 MB/sec
[info]                  ·gc.alloc.rate.norm:              1608.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.087 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.297 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1365.095 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala":
[info]   377638.983 ±(99.9%) 4592.486 ops/s [Average]
[info]   (min, avg, max) = (376113.914, 377638.983, 379320.918), stdev = 1192.654
[info]   CI (99.9%): [373046.497, 382231.469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   385.728 ±(99.9%) 4.806 MB/sec [Average]
[info]   (min, avg, max) = (384.136, 385.728, 387.489), stdev = 1.248
[info]   CI (99.9%): [380.922, 390.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1608.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1608.001, 1608.001, 1608.001), stdev = 0.001
[info]   CI (99.9%): [1608.001, 1608.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.104), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.139 ±(99.9%) 0.652 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.139, 0.434), stdev = 0.169
[info]   CI (99.9%): [≈ 0, 0.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   376.313 ±(99.9%) 602.900 MB/sec [Average]
[info]   (min, avg, max) = (255.766, 376.313, 651.222), stdev = 156.571
[info]   CI (99.9%): [≈ 0, 979.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1570.151 ±(99.9%) 2535.775 B/op [Average]
[info]   (min, avg, max) = (1061.376, 1570.151, 2726.028), stdev = 658.533
[info]   CI (99.9%): [≈ 0, 4105.926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala
[info] # Run progress: 51.47% complete, ETA 00:28:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 877690.041 ops/s
[info] # Warmup Iteration   2: 928768.733 ops/s
[info] # Warmup Iteration   3: 931039.168 ops/s
[info] Iteration   1: 928594.675 ops/s
[info]                  ·gc.alloc.rate:                   320.825 MB/sec
[info]                  ·gc.alloc.rate.norm:              544.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.006 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.373 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 867.098 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 934517.908 ops/s
[info]                  ·gc.alloc.rate:                   322.926 MB/sec
[info]                  ·gc.alloc.rate.norm:              544.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.730 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 430.801 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 931917.398 ops/s
[info]                  ·gc.alloc.rate:                   322.042 MB/sec
[info]                  ·gc.alloc.rate.norm:              544.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.269 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.522 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.983 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 557.413 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 933077.855 ops/s
[info]                  ·gc.alloc.rate:                   322.459 MB/sec
[info]                  ·gc.alloc.rate.norm:              544.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.070 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.999 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 556.721 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 933903.045 ops/s
[info]                  ·gc.alloc.rate:                   322.788 MB/sec
[info]                  ·gc.alloc.rate.norm:              544.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.378 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 553.421 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala":
[info]   932402.176 ±(99.9%) 9013.621 ops/s [Average]
[info]   (min, avg, max) = (928594.675, 932402.176, 934517.908), stdev = 2340.809
[info]   CI (99.9%): [923388.555, 941415.797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   322.208 ±(99.9%) 3.253 MB/sec [Average]
[info]   (min, avg, max) = (320.825, 322.208, 322.926), stdev = 0.845
[info]   CI (99.9%): [318.955, 325.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   544.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (544.000, 544.000, 544.000), stdev = 0.001
[info]   CI (99.9%): [544.000, 544.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.663 ±(99.9%) 5.609 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.663, 3.269), stdev = 1.457
[info]   CI (99.9%): [≈ 0, 6.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.121 ±(99.9%) 9.475 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.121, 5.522), stdev = 2.461
[info]   CI (99.9%): [≈ 0, 10.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   351.092 ±(99.9%) 366.268 MB/sec [Average]
[info]   (min, avg, max) = (255.730, 351.092, 511.373), stdev = 95.119
[info]   CI (99.9%): [≈ 0, 717.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   593.091 ±(99.9%) 625.618 B/op [Average]
[info]   (min, avg, max) = (430.801, 593.091, 867.098), stdev = 162.471
[info]   CI (99.9%): [≈ 0, 1218.709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 4.000), stdev = 1.304
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson
[info] # Run progress: 51.84% complete, ETA 00:28:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 43198.185 ops/s
[info] # Warmup Iteration   2: 75020.900 ops/s
[info] # Warmup Iteration   3: 75448.528 ops/s
[info] Iteration   1: 76190.668 ops/s
[info]                  ·gc.alloc.rate:                   3268.554 MB/sec
[info]                  ·gc.alloc.rate.norm:              67544.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.229 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.730 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3366.807 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69574.383 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 76077.618 ops/s
[info]                  ·gc.alloc.rate:                   3263.777 MB/sec
[info]                  ·gc.alloc.rate.norm:              67544.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.584 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3048.136 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63081.307 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 76140.967 ops/s
[info]                  ·gc.alloc.rate:                   3266.686 MB/sec
[info]                  ·gc.alloc.rate.norm:              67544.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.582 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3396.014 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70218.065 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 76071.845 ops/s
[info]                  ·gc.alloc.rate:                   3263.655 MB/sec
[info]                  ·gc.alloc.rate.norm:              67544.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.584 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3402.156 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70410.393 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 76004.061 ops/s
[info]                  ·gc.alloc.rate:                   3260.753 MB/sec
[info]                  ·gc.alloc.rate.norm:              67544.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.724 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3062.352 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63434.282 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson":
[info]   76097.032 ±(99.9%) 274.673 ops/s [Average]
[info]   (min, avg, max) = (76004.061, 76097.032, 76190.668), stdev = 71.332
[info]   CI (99.9%): [75822.359, 76371.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3264.685 ±(99.9%) 11.602 MB/sec [Average]
[info]   (min, avg, max) = (3260.753, 3264.685, 3268.554), stdev = 3.013
[info]   CI (99.9%): [3253.083, 3276.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   67544.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (67544.005, 67544.006, 67544.006), stdev = 0.001
[info]   CI (99.9%): [67544.005, 67544.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.137 ±(99.9%) 0.209 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.137, 0.229), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2.841 ±(99.9%) 4.311 B/op [Average]
[info]   (min, avg, max) = (1.724, 2.841, 4.730), stdev = 1.120
[info]   CI (99.9%): [≈ 0, 7.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   3255.093 ±(99.9%) 704.643 MB/sec [Average]
[info]   (min, avg, max) = (3048.136, 3255.093, 3402.156), stdev = 182.994
[info]   CI (99.9%): [2550.450, 3959.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   67343.686 ±(99.9%) 14419.886 B/op [Average]
[info]   (min, avg, max) = (63081.307, 67343.686, 70410.393), stdev = 3744.799
[info]   CI (99.9%): [52923.800, 81763.572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.count":
[info]   48.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.600, 10.000), stdev = 0.548
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.time":
[info]   49.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 9.800, 10.000), stdev = 0.447
[info]   CI (99.9%): [49.000, 49.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce
[info] # Run progress: 52.21% complete, ETA 00:27:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 199536.913 ops/s
[info] # Warmup Iteration   2: 248855.735 ops/s
[info] # Warmup Iteration   3: 252992.687 ops/s
[info] Iteration   1: 254827.311 ops/s
[info]                  ·gc.alloc.rate:                   1735.146 MB/sec
[info]                  ·gc.alloc.rate.norm:              10720.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.157 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1643.786 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10155.565 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 253548.336 ops/s
[info]                  ·gc.alloc.rate:                   1726.364 MB/sec
[info]                  ·gc.alloc.rate.norm:              10720.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.163 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1656.425 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10285.711 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 251154.812 ops/s
[info]                  ·gc.alloc.rate:                   1710.007 MB/sec
[info]                  ·gc.alloc.rate.norm:              10720.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.652 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1669.300 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10464.805 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 253225.481 ops/s
[info]                  ·gc.alloc.rate:                   1724.404 MB/sec
[info]                  ·gc.alloc.rate.norm:              10720.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.388 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1678.826 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10436.661 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 254757.219 ops/s
[info]                  ·gc.alloc.rate:                   1734.858 MB/sec
[info]                  ·gc.alloc.rate.norm:              10720.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.772 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2025.252 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12514.402 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce":
[info]   253502.632 ±(99.9%) 5750.214 ops/s [Average]
[info]   (min, avg, max) = (251154.812, 253502.632, 254827.311), stdev = 1493.312
[info]   CI (99.9%): [247752.418, 259252.845] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1726.156 ±(99.9%) 39.478 MB/sec [Average]
[info]   (min, avg, max) = (1710.007, 1726.156, 1735.146), stdev = 10.252
[info]   CI (99.9%): [1686.678, 1765.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   10720.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10720.002, 10720.002, 10720.002), stdev = 0.001
[info]   CI (99.9%): [10720.001, 10720.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.133 ±(99.9%) 0.209 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.133, 0.187), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.826 ±(99.9%) 1.289 B/op [Average]
[info]   (min, avg, max) = (0.388, 0.826, 1.163), stdev = 0.335
[info]   CI (99.9%): [≈ 0, 2.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1734.718 ±(99.9%) 627.466 MB/sec [Average]
[info]   (min, avg, max) = (1643.786, 1734.718, 2025.252), stdev = 162.951
[info]   CI (99.9%): [1107.252, 2362.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   10771.429 ±(99.9%) 3782.291 B/op [Average]
[info]   (min, avg, max) = (10155.565, 10771.429, 12514.402), stdev = 982.249
[info]   CI (99.9%): [6989.138, 14553.720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala
[info] # Run progress: 52.57% complete, ETA 00:27:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 788267.248 ops/s
[info] # Warmup Iteration   2: 1183628.575 ops/s
[info] # Warmup Iteration   3: 1189995.742 ops/s
[info] Iteration   1: 1158002.160 ops/s
[info]                  ·gc.alloc.rate:                   759.115 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.255 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      969.904 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1318.563 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1189542.694 ops/s
[info]                  ·gc.alloc.rate:                   779.829 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.193 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      650.698 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 861.112 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1182390.123 ops/s
[info]                  ·gc.alloc.rate:                   775.060 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.083 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.905 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 870.681 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1187879.349 ops/s
[info]                  ·gc.alloc.rate:                   778.658 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.110 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      986.498 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1307.462 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1188117.719 ops/s
[info]                  ·gc.alloc.rate:                   778.921 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.083 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      661.318 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 876.186 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala":
[info]   1181186.409 ±(99.9%) 50998.298 ops/s [Average]
[info]   (min, avg, max) = (1158002.160, 1181186.409, 1189542.694), stdev = 13244.096
[info]   CI (99.9%): [1130188.111, 1232184.707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   774.317 ±(99.9%) 33.464 MB/sec [Average]
[info]   (min, avg, max) = (759.115, 774.317, 779.829), stdev = 8.690
[info]   CI (99.9%): [740.853, 807.780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1032.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1032.000, 1032.000, 1032.000), stdev = 0.001
[info]   CI (99.9%): [1032.000, 1032.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.108 ±(99.9%) 0.215 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.108, 0.187), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.145 ±(99.9%) 0.293 B/op [Average]
[info]   (min, avg, max) = (0.083, 0.145, 0.255), stdev = 0.076
[info]   CI (99.9%): [≈ 0, 0.438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   784.464 ±(99.9%) 681.547 MB/sec [Average]
[info]   (min, avg, max) = (650.698, 784.464, 986.498), stdev = 176.996
[info]   CI (99.9%): [102.918, 1466.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1046.801 ±(99.9%) 936.125 B/op [Average]
[info]   (min, avg, max) = (861.112, 1046.801, 1318.563), stdev = 243.109
[info]   CI (99.9%): [110.676, 1982.926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 4.000), stdev = 0.894
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala
[info] # Run progress: 52.94% complete, ETA 00:27:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1230597.559 ops/s
[info] # Warmup Iteration   2: 1392109.326 ops/s
[info] # Warmup Iteration   3: 1414513.584 ops/s
[info] Iteration   1: 1420969.093 ops/s
[info]                  ·gc.alloc.rate:                   584.845 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.671 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.068 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 728.154 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1419939.324 ops/s
[info]                  ·gc.alloc.rate:                   584.488 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.997 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 725.062 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 1418528.894 ops/s
[info]                  ·gc.alloc.rate:                   583.835 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.069 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      326.261 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 362.118 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1345913.706 ops/s
[info]                  ·gc.alloc.rate:                   554.209 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.073 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.842 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 763.325 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1420562.211 ops/s
[info]                  ·gc.alloc.rate:                   584.727 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.092 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.269 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 723.959 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala":
[info]   1405182.646 ±(99.9%) 127630.580 ops/s [Average]
[info]   (min, avg, max) = (1345913.706, 1405182.646, 1420969.093), stdev = 33145.256
[info]   CI (99.9%): [1277552.066, 1532813.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   578.421 ±(99.9%) 52.140 MB/sec [Average]
[info]   (min, avg, max) = (554.209, 578.421, 584.845), stdev = 13.541
[info]   CI (99.9%): [526.281, 630.561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   648.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (648.000, 648.000, 648.000), stdev = 0.001
[info]   CI (99.9%): [648.000, 648.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.776 ±(99.9%) 6.234 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.776, 3.671), stdev = 1.619
[info]   CI (99.9%): [≈ 0, 7.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.860 ±(99.9%) 6.905 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.860, 4.068), stdev = 1.793
[info]   CI (99.9%): [≈ 0, 7.766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   588.711 ±(99.9%) 564.982 MB/sec [Average]
[info]   (min, avg, max) = (326.261, 588.711, 657.187), stdev = 146.724
[info]   CI (99.9%): [23.729, 1153.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   660.524 ±(99.9%) 645.420 B/op [Average]
[info]   (min, avg, max) = (362.118, 660.524, 763.325), stdev = 167.614
[info]   CI (99.9%): [15.103, 1305.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 4.000), stdev = 1.225
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 53.31% complete, ETA 00:27:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1341243.006 ops/s
[info] # Warmup Iteration   2: 1473924.931 ops/s
[info] # Warmup Iteration   3: 1472925.824 ops/s
[info] Iteration   1: 1474519.096 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1479606.567 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1473888.729 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1474185.230 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1474822.203 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc":
[info]   1475404.365 ±(99.9%) 9145.696 ops/s [Average]
[info]   (min, avg, max) = (1473888.729, 1475404.365, 1479606.567), stdev = 2375.108
[info]   CI (99.9%): [1466258.669, 1484550.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson
[info] # Run progress: 53.68% complete, ETA 00:26:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27334.581 ops/s
[info] # Warmup Iteration   2: 41770.290 ops/s
[info] # Warmup Iteration   3: 41864.950 ops/s
[info] Iteration   1: 42082.879 ops/s
[info]                  ·gc.alloc.rate:                   2057.707 MB/sec
[info]                  ·gc.alloc.rate.norm:              76984.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.557 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1967.618 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 73613.563 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 42135.117 ops/s
[info]                  ·gc.alloc.rate:                   2060.189 MB/sec
[info]                  ·gc.alloc.rate.norm:              76984.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.443 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1991.007 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 74398.857 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 41941.379 ops/s
[info]                  ·gc.alloc.rate:                   2050.859 MB/sec
[info]                  ·gc.alloc.rate.norm:              76984.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.562 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2008.327 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 75387.490 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 41643.506 ops/s
[info]                  ·gc.alloc.rate:                   2036.217 MB/sec
[info]                  ·gc.alloc.rate.norm:              76984.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.933 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2020.859 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 76403.336 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 41889.942 ops/s
[info]                  ·gc.alloc.rate:                   2048.463 MB/sec
[info]                  ·gc.alloc.rate.norm:              76984.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.256 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.018 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 76253.248 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson":
[info]   41938.564 ±(99.9%) 742.912 ops/s [Average]
[info]   (min, avg, max) = (41643.506, 41938.564, 42135.117), stdev = 192.932
[info]   CI (99.9%): [41195.653, 42681.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2050.687 ±(99.9%) 36.220 MB/sec [Average]
[info]   (min, avg, max) = (2036.217, 2050.687, 2060.189), stdev = 9.406
[info]   CI (99.9%): [2014.467, 2086.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   76984.010 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (76984.010, 76984.010, 76984.011), stdev = 0.001
[info]   CI (99.9%): [76984.008, 76984.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.100 ±(99.9%) 0.222 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.100, 0.166), stdev = 0.058
[info]   CI (99.9%): [≈ 0, 0.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3.750 ±(99.9%) 8.343 B/op [Average]
[info]   (min, avg, max) = (1.557, 3.750, 6.256), stdev = 2.167
[info]   CI (99.9%): [≈ 0, 12.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   2003.366 ±(99.9%) 94.699 MB/sec [Average]
[info]   (min, avg, max) = (1967.618, 2003.366, 2029.018), stdev = 24.593
[info]   CI (99.9%): [1908.667, 2098.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   75211.299 ±(99.9%) 4616.951 B/op [Average]
[info]   (min, avg, max) = (73613.563, 75211.299, 76403.336), stdev = 1199.007
[info]   CI (99.9%): [70594.348, 79828.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce
[info] # Run progress: 54.04% complete, ETA 00:26:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 33469.816 ops/s
[info] # Warmup Iteration   2: 40198.940 ops/s
[info] # Warmup Iteration   3: 40532.404 ops/s
[info] Iteration   1: 41369.846 ops/s
[info]                  ·gc.alloc.rate:                   825.539 MB/sec
[info]                  ·gc.alloc.rate.norm:              31424.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.376 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.791 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24886.447 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 41187.612 ops/s
[info]                  ·gc.alloc.rate:                   822.077 MB/sec
[info]                  ·gc.alloc.rate.norm:              31424.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.977 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      979.224 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37430.961 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 41124.134 ops/s
[info]                  ·gc.alloc.rate:                   820.809 MB/sec
[info]                  ·gc.alloc.rate.norm:              31424.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.390 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      981.161 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37562.948 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 41280.879 ops/s
[info]                  ·gc.alloc.rate:                   824.063 MB/sec
[info]                  ·gc.alloc.rate.norm:              31424.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.011 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25015.679 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 41359.230 ops/s
[info]                  ·gc.alloc.rate:                   825.605 MB/sec
[info]                  ·gc.alloc.rate.norm:              31424.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.584 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      988.970 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37641.970 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce":
[info]   41264.340 ±(99.9%) 412.729 ops/s [Average]
[info]   (min, avg, max) = (41124.134, 41264.340, 41369.846), stdev = 107.184
[info]   CI (99.9%): [40851.611, 41677.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate":
[info]   823.619 ±(99.9%) 8.192 MB/sec [Average]
[info]   (min, avg, max) = (820.809, 823.619, 825.605), stdev = 2.127
[info]   CI (99.9%): [815.427, 831.810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   31424.010 ±(99.9%) 0.003 B/op [Average]
[info]   (min, avg, max) = (31424.010, 31424.010, 31424.011), stdev = 0.001
[info]   CI (99.9%): [31424.008, 31424.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.104), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2.065 ±(99.9%) 5.565 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.065, 3.977), stdev = 1.445
[info]   CI (99.9%): [≈ 0, 7.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   851.831 ±(99.9%) 692.387 MB/sec [Average]
[info]   (min, avg, max) = (653.791, 851.831, 988.970), stdev = 179.811
[info]   CI (99.9%): [159.445, 1544.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   32507.601 ±(99.9%) 26564.464 B/op [Average]
[info]   (min, avg, max) = (24886.447, 32507.601, 37641.970), stdev = 6898.707
[info]   CI (99.9%): [5943.137, 59072.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.600, 3.000), stdev = 0.894
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala
[info] # Run progress: 54.41% complete, ETA 00:26:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 51935.746 ops/s
[info] # Warmup Iteration   2: 82245.039 ops/s
[info] # Warmup Iteration   3: 83268.691 ops/s
[info] Iteration   1: 84118.049 ops/s
[info]                  ·gc.alloc.rate:                   884.550 MB/sec
[info]                  ·gc.alloc.rate.norm:              16560.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.947 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.729 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12219.989 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 83375.360 ops/s
[info]                  ·gc.alloc.rate:                   877.070 MB/sec
[info]                  ·gc.alloc.rate.norm:              16560.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.572 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      984.696 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18592.085 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 83167.128 ops/s
[info]                  ·gc.alloc.rate:                   874.840 MB/sec
[info]                  ·gc.alloc.rate.norm:              16560.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.363 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      991.212 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18762.837 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 83415.331 ops/s
[info]                  ·gc.alloc.rate:                   877.507 MB/sec
[info]                  ·gc.alloc.rate.norm:              16560.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.393 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      663.969 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12530.177 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 83263.473 ops/s
[info]                  ·gc.alloc.rate:                   876.065 MB/sec
[info]                  ·gc.alloc.rate.norm:              16560.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.361 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1000.103 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18904.661 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala":
[info]   83467.868 ±(99.9%) 1448.828 ops/s [Average]
[info]   (min, avg, max) = (83167.128, 83467.868, 84118.049), stdev = 376.256
[info]   CI (99.9%): [82019.040, 84916.696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   878.007 ±(99.9%) 14.630 MB/sec [Average]
[info]   (min, avg, max) = (874.840, 878.007, 884.550), stdev = 3.799
[info]   CI (99.9%): [863.376, 892.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   16560.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16560.005, 16560.005, 16560.005), stdev = 0.001
[info]   CI (99.9%): [16560.004, 16560.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.092, 0.125), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.727 ±(99.9%) 3.140 B/op [Average]
[info]   (min, avg, max) = (0.393, 1.727, 2.363), stdev = 0.815
[info]   CI (99.9%): [≈ 0, 4.867] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   858.542 ±(99.9%) 704.188 MB/sec [Average]
[info]   (min, avg, max) = (652.729, 858.542, 1000.103), stdev = 182.875
[info]   CI (99.9%): [154.354, 1562.730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   16201.950 ±(99.9%) 13465.348 B/op [Average]
[info]   (min, avg, max) = (12219.989, 16201.950, 18904.661), stdev = 3496.908
[info]   CI (99.9%): [2736.602, 29667.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 1.000
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala
[info] # Run progress: 54.78% complete, ETA 00:26:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 222045.842 ops/s
[info] # Warmup Iteration   2: 238687.537 ops/s
[info] # Warmup Iteration   3: 244322.163 ops/s
[info] Iteration   1: 243912.602 ops/s
[info]                  ·gc.alloc.rate:                   793.212 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.537 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.524 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4237.713 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 237869.998 ops/s
[info]                  ·gc.alloc.rate:                   773.696 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.413 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      985.061 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6518.725 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 242305.024 ops/s
[info]                  ·gc.alloc.rate:                   788.047 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.406 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.923 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4268.079 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 239788.896 ops/s
[info]                  ·gc.alloc.rate:                   779.911 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      987.297 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6481.462 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 243364.835 ops/s
[info]                  ·gc.alloc.rate:                   791.491 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.673 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.591 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4273.238 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala":
[info]   241448.271 ±(99.9%) 9824.375 ops/s [Average]
[info]   (min, avg, max) = (237869.998, 241448.271, 243912.602), stdev = 2551.359
[info]   CI (99.9%): [231623.896, 251272.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   785.271 ±(99.9%) 31.762 MB/sec [Average]
[info]   (min, avg, max) = (773.696, 785.271, 793.212), stdev = 8.249
[info]   CI (99.9%): [753.509, 817.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   5120.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5120.002, 5120.002, 5120.002), stdev = 0.001
[info]   CI (99.9%): [5120.001, 5120.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.104), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.406 ±(99.9%) 0.969 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.406, 0.673), stdev = 0.252
[info]   CI (99.9%): [≈ 0, 1.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   789.279 ±(99.9%) 692.164 MB/sec [Average]
[info]   (min, avg, max) = (656.524, 789.279, 987.297), stdev = 179.753
[info]   CI (99.9%): [97.116, 1481.443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5155.844 ±(99.9%) 4725.791 B/op [Average]
[info]   (min, avg, max) = (4237.713, 5155.844, 6518.725), stdev = 1227.273
[info]   CI (99.9%): [430.053, 9881.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson
[info] # Run progress: 55.15% complete, ETA 00:26:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13978.818 ops/s
[info] # Warmup Iteration   2: 25301.116 ops/s
[info] # Warmup Iteration   3: 25216.701 ops/s
[info] Iteration   1: 25430.956 ops/s
[info]                  ·gc.alloc.rate:                   1194.668 MB/sec
[info]                  ·gc.alloc.rate.norm:              73960.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.576 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1306.422 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 80878.489 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 25271.308 ops/s
[info]                  ·gc.alloc.rate:                   1187.294 MB/sec
[info]                  ·gc.alloc.rate.norm:              73960.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.779 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      988.001 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61545.499 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 25296.096 ops/s
[info]                  ·gc.alloc.rate:                   1188.395 MB/sec
[info]                  ·gc.alloc.rate.norm:              73960.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.180 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1325.140 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 82470.407 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 25552.537 ops/s
[info]                  ·gc.alloc.rate:                   1200.805 MB/sec
[info]                  ·gc.alloc.rate.norm:              73960.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.282 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1335.506 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 82256.539 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 25183.175 ops/s
[info]                  ·gc.alloc.rate:                   1183.482 MB/sec
[info]                  ·gc.alloc.rate.norm:              73960.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.903 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1006.177 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62879.592 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson":
[info]   25346.815 ±(99.9%) 559.514 ops/s [Average]
[info]   (min, avg, max) = (25183.175, 25346.815, 25552.537), stdev = 145.304
[info]   CI (99.9%): [24787.300, 25906.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1190.929 ±(99.9%) 26.301 MB/sec [Average]
[info]   (min, avg, max) = (1183.482, 1190.929, 1200.805), stdev = 6.830
[info]   CI (99.9%): [1164.628, 1217.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   73960.017 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (73960.016, 73960.017, 73960.020), stdev = 0.002
[info]   CI (99.9%): [73960.010, 73960.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.125), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4.144 ±(99.9%) 9.625 B/op [Average]
[info]   (min, avg, max) = (1.282, 4.144, 7.779), stdev = 2.500
[info]   CI (99.9%): [≈ 0, 13.769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1192.249 ±(99.9%) 687.634 MB/sec [Average]
[info]   (min, avg, max) = (988.001, 1192.249, 1335.506), stdev = 178.576
[info]   CI (99.9%): [504.616, 1879.883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   74006.105 ±(99.9%) 41562.422 B/op [Average]
[info]   (min, avg, max) = (61545.499, 74006.105, 82470.407), stdev = 10793.629
[info]   CI (99.9%): [32443.683, 115568.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce
[info] # Run progress: 55.51% complete, ETA 00:25:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 41192.206 ops/s
[info] # Warmup Iteration   2: 52114.230 ops/s
[info] # Warmup Iteration   3: 52561.757 ops/s
[info] Iteration   1: 51415.316 ops/s
[info]                  ·gc.alloc.rate:                   1089.504 MB/sec
[info]                  ·gc.alloc.rate.norm:              33360.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.274 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1303.890 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39924.391 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 52559.803 ops/s
[info]                  ·gc.alloc.rate:                   1113.837 MB/sec
[info]                  ·gc.alloc.rate.norm:              33360.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.117 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      981.350 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29391.963 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 52560.252 ops/s
[info]                  ·gc.alloc.rate:                   1113.646 MB/sec
[info]                  ·gc.alloc.rate.norm:              33360.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.493 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1315.049 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39393.156 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 52551.387 ops/s
[info]                  ·gc.alloc.rate:                   1113.954 MB/sec
[info]                  ·gc.alloc.rate.norm:              33360.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.247 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      992.852 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29733.326 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 52289.706 ops/s
[info]                  ·gc.alloc.rate:                   1108.015 MB/sec
[info]                  ·gc.alloc.rate.norm:              33360.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.880 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      997.186 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30023.184 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce":
[info]   52275.293 ±(99.9%) 1904.165 ops/s [Average]
[info]   (min, avg, max) = (51415.316, 52275.293, 52560.252), stdev = 494.506
[info]   CI (99.9%): [50371.128, 54179.457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1107.791 ±(99.9%) 40.536 MB/sec [Average]
[info]   (min, avg, max) = (1089.504, 1107.791, 1113.954), stdev = 10.527
[info]   CI (99.9%): [1067.255, 1148.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   33360.008 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (33360.008, 33360.008, 33360.008), stdev = 0.001
[info]   CI (99.9%): [33360.007, 33360.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.104), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2.002 ±(99.9%) 3.104 B/op [Average]
[info]   (min, avg, max) = (1.247, 2.002, 3.117), stdev = 0.806
[info]   CI (99.9%): [≈ 0, 5.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1118.065 ±(99.9%) 673.352 MB/sec [Average]
[info]   (min, avg, max) = (981.350, 1118.065, 1315.049), stdev = 174.867
[info]   CI (99.9%): [444.713, 1791.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   33693.204 ±(99.9%) 20999.914 B/op [Average]
[info]   (min, avg, max) = (29391.963, 33693.204, 39924.391), stdev = 5453.611
[info]   CI (99.9%): [12693.290, 54693.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala
[info] # Run progress: 55.88% complete, ETA 00:25:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 51779.623 ops/s
[info] # Warmup Iteration   2: 85969.859 ops/s
[info] # Warmup Iteration   3: 86617.830 ops/s
[info] Iteration   1: 86764.852 ops/s
[info]                  ·gc.alloc.rate:                   1188.019 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.755 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1314.306 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23851.869 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 87375.624 ops/s
[info]                  ·gc.alloc.rate:                   1196.722 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.250 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      992.715 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17884.636 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 86673.080 ops/s
[info]                  ·gc.alloc.rate:                   1186.912 MB/sec
[info]                  ·gc.alloc.rate.norm:              21559.982 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.134 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1331.730 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24190.557 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 87453.833 ops/s
[info]                  ·gc.alloc.rate:                   1197.533 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.124 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.973 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24106.435 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 87590.669 ops/s
[info]                  ·gc.alloc.rate:                   1199.535 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.496 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1008.496 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18126.358 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala":
[info]   87171.612 ±(99.9%) 1623.295 ops/s [Average]
[info]   (min, avg, max) = (86673.080, 87171.612, 87590.669), stdev = 421.564
[info]   CI (99.9%): [85548.317, 88794.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1193.744 ±(99.9%) 22.470 MB/sec [Average]
[info]   (min, avg, max) = (1186.912, 1193.744, 1199.535), stdev = 5.835
[info]   CI (99.9%): [1171.274, 1216.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   21560.009 ±(99.9%) 0.074 B/op [Average]
[info]   (min, avg, max) = (21559.982, 21560.009, 21560.028), stdev = 0.019
[info]   CI (99.9%): [21559.935, 21560.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.125), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.352 ±(99.9%) 2.181 B/op [Average]
[info]   (min, avg, max) = (0.755, 1.352, 2.250), stdev = 0.566
[info]   CI (99.9%): [≈ 0, 3.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1197.244 ±(99.9%) 692.407 MB/sec [Average]
[info]   (min, avg, max) = (992.715, 1197.244, 1338.973), stdev = 179.816
[info]   CI (99.9%): [504.837, 1889.651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   21631.971 ±(99.9%) 12760.852 B/op [Average]
[info]   (min, avg, max) = (17884.636, 21631.971, 24190.557), stdev = 3313.953
[info]   CI (99.9%): [8871.119, 34392.823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala
[info] # Run progress: 56.25% complete, ETA 00:25:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 227156.538 ops/s
[info] # Warmup Iteration   2: 242902.966 ops/s
[info] # Warmup Iteration   3: 246306.490 ops/s
[info] Iteration   1: 246041.122 ops/s
[info]                  ·gc.alloc.rate:                   783.940 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.399 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.937 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4184.180 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 247313.953 ops/s
[info]                  ·gc.alloc.rate:                   787.857 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.530 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      978.648 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6230.700 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 244554.476 ops/s
[info]                  ·gc.alloc.rate:                   779.100 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.268 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4205.347 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 246581.792 ops/s
[info]                  ·gc.alloc.rate:                   785.710 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.531 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      982.972 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6275.334 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 246749.104 ops/s
[info]                  ·gc.alloc.rate:                   786.235 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.531 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.307 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4193.471 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala":
[info]   246248.089 ±(99.9%) 4042.993 ops/s [Average]
[info]   (min, avg, max) = (244554.476, 246248.089, 247313.953), stdev = 1049.952
[info]   CI (99.9%): [242205.097, 250291.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   784.568 ±(99.9%) 12.942 MB/sec [Average]
[info]   (min, avg, max) = (779.100, 784.568, 787.857), stdev = 3.361
[info]   CI (99.9%): [771.626, 797.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5016.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5016.002, 5016.002, 5016.002), stdev = 0.001
[info]   CI (99.9%): [5016.001, 5016.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.083), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.452 ±(99.9%) 0.453 B/op [Average]
[info]   (min, avg, max) = (0.268, 0.452, 0.531), stdev = 0.118
[info]   CI (99.9%): [≈ 0, 0.905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   785.210 ±(99.9%) 687.612 MB/sec [Average]
[info]   (min, avg, max) = (653.187, 785.210, 982.972), stdev = 178.571
[info]   CI (99.9%): [97.598, 1472.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5017.807 ±(99.9%) 4342.461 B/op [Average]
[info]   (min, avg, max) = (4184.180, 5017.807, 6275.334), stdev = 1127.723
[info]   CI (99.9%): [675.346, 9360.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 56.62% complete, ETA 00:25:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 249944.584 ops/s
[info] # Warmup Iteration   2: 267682.690 ops/s
[info] # Warmup Iteration   3: 275040.459 ops/s
[info] Iteration   1: 274859.123 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 275309.041 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 275273.282 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 274426.022 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 275108.823 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc":
[info]   274995.258 ±(99.9%) 1403.263 ops/s [Average]
[info]   (min, avg, max) = (274426.022, 274995.258, 275309.041), stdev = 364.423
[info]   CI (99.9%): [273591.995, 276398.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson
[info] # Run progress: 56.99% complete, ETA 00:25:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 50164.726 ops/s
[info] # Warmup Iteration   2: 70684.167 ops/s
[info] # Warmup Iteration   3: 71617.919 ops/s
[info] Iteration   1: 71070.775 ops/s
[info]                  ·gc.alloc.rate:                   1053.807 MB/sec
[info]                  ·gc.alloc.rate.norm:              23344.034 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.461 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      969.492 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21476.271 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 72540.233 ops/s
[info]                  ·gc.alloc.rate:                   1075.381 MB/sec
[info]                  ·gc.alloc.rate.norm:              23343.978 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.807 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      972.734 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21115.760 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 72484.360 ops/s
[info]                  ·gc.alloc.rate:                   1074.661 MB/sec
[info]                  ·gc.alloc.rate.norm:              23344.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.260 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1303.767 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28320.737 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 72365.557 ops/s
[info]                  ·gc.alloc.rate:                   1073.123 MB/sec
[info]                  ·gc.alloc.rate.norm:              23343.978 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.905 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      985.265 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21432.770 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 72228.178 ops/s
[info]                  ·gc.alloc.rate:                   1071.035 MB/sec
[info]                  ·gc.alloc.rate.norm:              23344.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.814 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      990.538 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21589.525 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson":
[info]   72137.820 ±(99.9%) 2342.762 ops/s [Average]
[info]   (min, avg, max) = (71070.775, 72137.820, 72540.233), stdev = 608.408
[info]   CI (99.9%): [69795.058, 74480.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1069.601 ±(99.9%) 34.597 MB/sec [Average]
[info]   (min, avg, max) = (1053.807, 1069.601, 1075.381), stdev = 8.985
[info]   CI (99.9%): [1035.004, 1104.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   23344.006 ±(99.9%) 0.107 B/op [Average]
[info]   (min, avg, max) = (23343.978, 23344.006, 23344.034), stdev = 0.028
[info]   CI (99.9%): [23343.899, 23344.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.104), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.449 ±(99.9%) 2.850 B/op [Average]
[info]   (min, avg, max) = (0.461, 1.449, 2.260), stdev = 0.740
[info]   CI (99.9%): [≈ 0, 4.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1044.359 ±(99.9%) 559.393 MB/sec [Average]
[info]   (min, avg, max) = (969.492, 1044.359, 1303.767), stdev = 145.273
[info]   CI (99.9%): [484.966, 1603.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   22787.013 ±(99.9%) 11930.967 B/op [Average]
[info]   (min, avg, max) = (21115.760, 22787.013, 28320.737), stdev = 3098.434
[info]   CI (99.9%): [10856.046, 34717.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce
[info] # Run progress: 57.35% complete, ETA 00:24:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 49723.860 ops/s
[info] # Warmup Iteration   2: 69915.316 ops/s
[info] # Warmup Iteration   3: 71071.891 ops/s
[info] Iteration   1: 71669.503 ops/s
[info]                  ·gc.alloc.rate:                   1439.492 MB/sec
[info]                  ·gc.alloc.rate.norm:              31624.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1299.054 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28538.750 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 71414.576 ops/s
[info]                  ·gc.alloc.rate:                   1434.325 MB/sec
[info]                  ·gc.alloc.rate.norm:              31624.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.294 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1637.030 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36093.247 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 71792.774 ops/s
[info]                  ·gc.alloc.rate:                   1442.263 MB/sec
[info]                  ·gc.alloc.rate.norm:              31624.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.825 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1319.971 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28942.549 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 71796.755 ops/s
[info]                  ·gc.alloc.rate:                   1442.298 MB/sec
[info]                  ·gc.alloc.rate.norm:              31624.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.282 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1329.919 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29159.965 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 71374.425 ops/s
[info]                  ·gc.alloc.rate:                   1434.196 MB/sec
[info]                  ·gc.alloc.rate.norm:              31624.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.213 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1674.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36911.967 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce":
[info]   71609.607 ±(99.9%) 783.276 ops/s [Average]
[info]   (min, avg, max) = (71374.425, 71609.607, 71796.755), stdev = 203.414
[info]   CI (99.9%): [70826.331, 72392.883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate":
[info]   1438.515 ±(99.9%) 15.585 MB/sec [Average]
[info]   (min, avg, max) = (1434.196, 1438.515, 1442.298), stdev = 4.047
[info]   CI (99.9%): [1422.930, 1454.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   31624.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (31624.006, 31624.006, 31624.006), stdev = 0.001
[info]   CI (99.9%): [31624.005, 31624.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.207 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.087, 0.146), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1.923 ±(99.9%) 4.572 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.923, 3.213), stdev = 1.187
[info]   CI (99.9%): [≈ 0, 6.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1451.997 ±(99.9%) 718.467 MB/sec [Average]
[info]   (min, avg, max) = (1299.054, 1451.997, 1674.013), stdev = 186.584
[info]   CI (99.9%): [733.530, 2170.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   31929.296 ±(99.9%) 16137.270 B/op [Average]
[info]   (min, avg, max) = (28538.750, 31929.296, 36911.967), stdev = 4190.798
[info]   CI (99.9%): [15792.025, 48066.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala
[info] # Run progress: 57.72% complete, ETA 00:24:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 49759.657 ops/s
[info] # Warmup Iteration   2: 86187.591 ops/s
[info] # Warmup Iteration   3: 86619.679 ops/s
[info] Iteration   1: 86803.600 ops/s
[info]                  ·gc.alloc.rate:                   979.805 MB/sec
[info]                  ·gc.alloc.rate.norm:              17776.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.132 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      977.986 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17742.995 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 86594.185 ops/s
[info]                  ·gc.alloc.rate:                   977.886 MB/sec
[info]                  ·gc.alloc.rate.norm:              17776.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.892 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      985.397 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17912.528 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 87049.558 ops/s
[info]                  ·gc.alloc.rate:                   982.930 MB/sec
[info]                  ·gc.alloc.rate.norm:              17776.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.376 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      990.608 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17914.854 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 86999.988 ops/s
[info]                  ·gc.alloc.rate:                   982.392 MB/sec
[info]                  ·gc.alloc.rate.norm:              17776.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.130 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      997.294 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18045.654 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 87169.387 ops/s
[info]                  ·gc.alloc.rate:                   984.302 MB/sec
[info]                  ·gc.alloc.rate.norm:              17776.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.127 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1001.189 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18080.970 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala":
[info]   86923.344 ±(99.9%) 871.782 ops/s [Average]
[info]   (min, avg, max) = (86594.185, 86923.344, 87169.387), stdev = 226.399
[info]   CI (99.9%): [86051.562, 87795.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   981.463 ±(99.9%) 9.933 MB/sec [Average]
[info]   (min, avg, max) = (977.886, 981.463, 984.302), stdev = 2.580
[info]   CI (99.9%): [971.530, 991.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   17776.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (17776.005, 17776.005, 17776.005), stdev = 0.001
[info]   CI (99.9%): [17776.004, 17776.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.104), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.132 ±(99.9%) 2.063 B/op [Average]
[info]   (min, avg, max) = (0.376, 1.132, 1.892), stdev = 0.536
[info]   CI (99.9%): [≈ 0, 3.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   990.495 ±(99.9%) 35.661 MB/sec [Average]
[info]   (min, avg, max) = (977.986, 990.495, 1001.189), stdev = 9.261
[info]   CI (99.9%): [954.834, 1026.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   17939.400 ±(99.9%) 513.853 B/op [Average]
[info]   (min, avg, max) = (17742.995, 17939.400, 18080.970), stdev = 133.446
[info]   CI (99.9%): [17425.547, 18453.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala
[info] # Run progress: 58.09% complete, ETA 00:24:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 94401.632 ops/s
[info] # Warmup Iteration   2: 108110.885 ops/s
[info] # Warmup Iteration   3: 110251.525 ops/s
[info] Iteration   1: 107952.637 ops/s
[info]                  ·gc.alloc.rate:                   1136.603 MB/sec
[info]                  ·gc.alloc.rate.norm:              16576.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.607 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1302.811 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18999.953 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 109719.217 ops/s
[info]                  ·gc.alloc.rate:                   1155.146 MB/sec
[info]                  ·gc.alloc.rate.norm:              16576.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.896 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      980.517 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14070.132 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 109860.879 ops/s
[info]                  ·gc.alloc.rate:                   1156.671 MB/sec
[info]                  ·gc.alloc.rate.norm:              16576.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.193 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1314.446 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18837.037 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 109816.166 ops/s
[info]                  ·gc.alloc.rate:                   1156.748 MB/sec
[info]                  ·gc.alloc.rate.norm:              16576.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      992.975 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14229.160 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 110257.477 ops/s
[info]                  ·gc.alloc.rate:                   1161.046 MB/sec
[info]                  ·gc.alloc.rate.norm:              16576.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.891 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1330.390 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18993.703 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala":
[info]   109521.275 ±(99.9%) 3467.766 ops/s [Average]
[info]   (min, avg, max) = (107952.637, 109521.275, 110257.477), stdev = 900.568
[info]   CI (99.9%): [106053.509, 112989.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1153.243 ±(99.9%) 36.805 MB/sec [Average]
[info]   (min, avg, max) = (1136.603, 1153.243, 1161.046), stdev = 9.558
[info]   CI (99.9%): [1116.438, 1190.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   16576.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16576.004, 16576.004, 16576.004), stdev = 0.001
[info]   CI (99.9%): [16576.003, 16576.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.083), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.717 ±(99.9%) 1.738 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.717, 1.193), stdev = 0.451
[info]   CI (99.9%): [≈ 0, 2.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1184.228 ±(99.9%) 695.407 MB/sec [Average]
[info]   (min, avg, max) = (980.517, 1184.228, 1330.390), stdev = 180.595
[info]   CI (99.9%): [488.821, 1879.635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   17025.997 ±(99.9%) 10116.219 B/op [Average]
[info]   (min, avg, max) = (14070.132, 17025.997, 18999.953), stdev = 2627.150
[info]   CI (99.9%): [6909.778, 27142.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.400, 4.000), stdev = 0.894
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson
[info] # Run progress: 58.46% complete, ETA 00:24:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19972.048 ops/s
[info] # Warmup Iteration   2: 39092.655 ops/s
[info] # Warmup Iteration   3: 38458.826 ops/s
[info] Iteration   1: 39078.051 ops/s
[info]                  ·gc.alloc.rate:                   1891.087 MB/sec
[info]                  ·gc.alloc.rate.norm:              76200.222 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.677 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1994.026 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 80348.082 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 39233.016 ops/s
[info]                  ·gc.alloc.rate:                   1899.174 MB/sec
[info]                  ·gc.alloc.rate.norm:              76200.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.175 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2011.401 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 80702.860 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 39144.424 ops/s
[info]                  ·gc.alloc.rate:                   1894.705 MB/sec
[info]                  ·gc.alloc.rate.norm:              76200.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.837 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1684.775 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 67757.191 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 39287.968 ops/s
[info]                  ·gc.alloc.rate:                   1901.534 MB/sec
[info]                  ·gc.alloc.rate.norm:              76200.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.837 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.624 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 81332.951 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 39266.302 ops/s
[info]                  ·gc.alloc.rate:                   1900.750 MB/sec
[info]                  ·gc.alloc.rate.norm:              76200.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.503 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1694.890 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 67947.191 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson":
[info]   39201.952 ±(99.9%) 339.891 ops/s [Average]
[info]   (min, avg, max) = (39078.051, 39201.952, 39287.968), stdev = 88.269
[info]   CI (99.9%): [38862.061, 39541.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1897.450 ±(99.9%) 17.065 MB/sec [Average]
[info]   (min, avg, max) = (1891.087, 1897.450, 1901.534), stdev = 4.432
[info]   CI (99.9%): [1880.385, 1914.515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   76200.053 ±(99.9%) 0.364 B/op [Average]
[info]   (min, avg, max) = (76200.010, 76200.053, 76200.222), stdev = 0.094
[info]   CI (99.9%): [76199.689, 76200.417] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.193 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.075, 0.146), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3.006 ±(99.9%) 7.727 B/op [Average]
[info]   (min, avg, max) = (0.837, 3.006, 5.837), stdev = 2.007
[info]   CI (99.9%): [≈ 0, 10.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1882.943 ±(99.9%) 680.678 MB/sec [Average]
[info]   (min, avg, max) = (1684.775, 1882.943, 2029.624), stdev = 176.770
[info]   CI (99.9%): [1202.265, 2563.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   75617.655 ±(99.9%) 27331.692 B/op [Average]
[info]   (min, avg, max) = (67757.191, 75617.655, 81332.951), stdev = 7097.954
[info]   CI (99.9%): [48285.963, 102949.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce
[info] # Run progress: 58.82% complete, ETA 00:23:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 91144.709 ops/s
[info] # Warmup Iteration   2: 112761.636 ops/s
[info] # Warmup Iteration   3: 114519.012 ops/s
[info] Iteration   1: 114856.706 ops/s
[info]                  ·gc.alloc.rate:                   790.774 MB/sec
[info]                  ·gc.alloc.rate.norm:              10840.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.426 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      645.888 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8853.903 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 113239.966 ops/s
[info]                  ·gc.alloc.rate:                   779.734 MB/sec
[info]                  ·gc.alloc.rate.norm:              10840.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.736 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      969.305 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13475.449 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 112367.156 ops/s
[info]                  ·gc.alloc.rate:                   773.841 MB/sec
[info]                  ·gc.alloc.rate.norm:              10840.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.875 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      647.353 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9068.160 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 113960.440 ops/s
[info]                  ·gc.alloc.rate:                   784.774 MB/sec
[info]                  ·gc.alloc.rate.norm:              10840.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      649.334 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8969.186 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 114379.529 ops/s
[info]                  ·gc.alloc.rate:                   787.837 MB/sec
[info]                  ·gc.alloc.rate.norm:              10840.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.432 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      978.952 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13469.605 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce":
[info]   113760.759 ±(99.9%) 3771.471 ops/s [Average]
[info]   (min, avg, max) = (112367.156, 113760.759, 114856.706), stdev = 979.439
[info]   CI (99.9%): [109989.288, 117532.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate":
[info]   783.392 ±(99.9%) 25.885 MB/sec [Average]
[info]   (min, avg, max) = (773.841, 783.392, 790.774), stdev = 6.722
[info]   CI (99.9%): [757.507, 809.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   10840.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10840.004, 10840.004, 10840.004), stdev = 0.001
[info]   CI (99.9%): [10840.003, 10840.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.191 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.079, 0.125), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1.094 ±(99.9%) 2.641 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.094, 1.736), stdev = 0.686
[info]   CI (99.9%): [≈ 0, 3.735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   778.167 ±(99.9%) 688.976 MB/sec [Average]
[info]   (min, avg, max) = (645.888, 778.167, 978.952), stdev = 178.925
[info]   CI (99.9%): [89.191, 1467.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   10767.261 ±(99.9%) 9513.877 B/op [Average]
[info]   (min, avg, max) = (8853.903, 10767.261, 13475.449), stdev = 2470.724
[info]   CI (99.9%): [1253.384, 20281.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 4.000), stdev = 0.894
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala
[info] # Run progress: 59.19% complete, ETA 00:23:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 113851.849 ops/s
[info] # Warmup Iteration   2: 160596.523 ops/s
[info] # Warmup Iteration   3: 161806.181 ops/s
[info] Iteration   1: 164413.527 ops/s
[info]                  ·gc.alloc.rate:                   243.947 MB/sec
[info]                  ·gc.alloc.rate.norm:              2336.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.199 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.689 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2448.439 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 163877.146 ops/s
[info]                  ·gc.alloc.rate:                   243.199 MB/sec
[info]                  ·gc.alloc.rate.norm:              2336.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.758 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2456.640 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 163893.287 ops/s
[info]                  ·gc.alloc.rate:                   243.171 MB/sec
[info]                  ·gc.alloc.rate.norm:              2336.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.400 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.684 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2456.206 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 163398.348 ops/s
[info]                  ·gc.alloc.rate:                   242.443 MB/sec
[info]                  ·gc.alloc.rate.norm:              2336.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.203 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      322.292 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3105.371 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 166242.553 ops/s
[info]                  ·gc.alloc.rate:      246.691 MB/sec
[info]                  ·gc.alloc.rate.norm: 2336.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala":
[info]   164364.972 ±(99.9%) 4271.651 ops/s [Average]
[info]   (min, avg, max) = (163398.348, 164364.972, 166242.553), stdev = 1109.334
[info]   CI (99.9%): [160093.321, 168636.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   243.890 ±(99.9%) 6.368 MB/sec [Average]
[info]   (min, avg, max) = (242.443, 243.890, 246.691), stdev = 1.654
[info]   CI (99.9%): [237.522, 250.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   2336.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2336.002, 2336.003, 2336.003), stdev = 0.001
[info]   CI (99.9%): [2336.002, 2336.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.200 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.125), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.360 ±(99.9%) 1.923 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.360, 1.203), stdev = 0.499
[info]   CI (99.9%): [≈ 0, 2.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   217.885 ±(99.9%) 481.973 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 217.885, 322.292), stdev = 125.167
[info]   CI (99.9%): [≈ 0, 699.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2093.331 ±(99.9%) 4635.203 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2093.331, 3105.371), stdev = 1203.748
[info]   CI (99.9%): [≈ 0, 6728.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala
[info] # Run progress: 59.56% complete, ETA 00:23:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 721354.917 ops/s
[info] # Warmup Iteration   2: 770606.329 ops/s
[info] # Warmup Iteration   3: 803724.721 ops/s
[info] Iteration   1: 799977.870 ops/s
[info]                  ·gc.alloc.rate:                   991.763 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.164 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      975.464 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1919.922 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 795576.781 ops/s
[info]                  ·gc.alloc.rate:                   986.478 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.247 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      977.683 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1934.598 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 805029.818 ops/s
[info]                  ·gc.alloc.rate:                   998.288 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.163 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      981.395 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1918.969 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 805641.224 ops/s
[info]                  ·gc.alloc.rate:                   999.273 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.163 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      986.941 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1927.912 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 800339.423 ops/s
[info]                  ·gc.alloc.rate:                   992.588 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.164 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      992.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1951.171 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala":
[info]   801313.023 ±(99.9%) 15897.948 ops/s [Average]
[info]   (min, avg, max) = (795576.781, 801313.023, 805641.224), stdev = 4128.647
[info]   CI (99.9%): [785415.076, 817210.971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   993.678 ±(99.9%) 20.124 MB/sec [Average]
[info]   (min, avg, max) = (986.478, 993.678, 999.273), stdev = 5.226
[info]   CI (99.9%): [973.554, 1013.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1952.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1952.001, 1952.001, 1952.001), stdev = 0.001
[info]   CI (99.9%): [1952.000, 1952.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.092, 0.125), stdev = 0.019
[info]   CI (99.9%): [0.020, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.180 ±(99.9%) 0.144 B/op [Average]
[info]   (min, avg, max) = (0.163, 0.180, 0.247), stdev = 0.037
[info]   CI (99.9%): [0.036, 0.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   982.730 ±(99.9%) 26.316 MB/sec [Average]
[info]   (min, avg, max) = (975.464, 982.730, 992.167), stdev = 6.834
[info]   CI (99.9%): [956.414, 1009.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1930.514 ±(99.9%) 50.781 B/op [Average]
[info]   (min, avg, max) = (1918.969, 1930.514, 1951.171), stdev = 13.188
[info]   CI (99.9%): [1879.733, 1981.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 59.93% complete, ETA 00:23:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 800205.478 ops/s
[info] # Warmup Iteration   2: 840248.413 ops/s
[info] # Warmup Iteration   3: 836590.546 ops/s
[info] Iteration   1: 845236.907 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 842901.763 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 846187.923 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 836178.039 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 838516.220 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc":
[info]   841804.170 ±(99.9%) 16637.016 ops/s [Average]
[info]   (min, avg, max) = (836178.039, 841804.170, 846187.923), stdev = 4320.580
[info]   CI (99.9%): [825167.155, 858441.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson
[info] # Run progress: 60.29% complete, ETA 00:23:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 154810.766 ops/s
[info] # Warmup Iteration   2: 210815.647 ops/s
[info] # Warmup Iteration   3: 212354.744 ops/s
[info] Iteration   1: 212583.328 ops/s
[info]                  ·gc.alloc.rate:                   694.739 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.462 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      644.405 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4771.321 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 213313.933 ops/s
[info]                  ·gc.alloc.rate:                   696.956 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.461 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      641.949 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4738.016 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 213561.388 ops/s
[info]                  ·gc.alloc.rate:                   697.934 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.153 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      642.431 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4734.925 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 212762.987 ops/s
[info]                  ·gc.alloc.rate:                   695.192 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      643.285 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4759.916 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 212743.192 ops/s
[info]                  ·gc.alloc.rate:                   695.213 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.308 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      968.659 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7167.278 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson":
[info]   212992.966 ±(99.9%) 1621.395 ops/s [Average]
[info]   (min, avg, max) = (212583.328, 212992.966, 213561.388), stdev = 421.071
[info]   CI (99.9%): [211371.570, 214614.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   696.007 ±(99.9%) 5.278 MB/sec [Average]
[info]   (min, avg, max) = (694.739, 696.007, 697.934), stdev = 1.371
[info]   CI (99.9%): [690.729, 701.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5144.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5144.002, 5144.002, 5144.002), stdev = 0.001
[info]   CI (99.9%): [5144.002, 5144.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.277 ±(99.9%) 0.773 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.277, 0.462), stdev = 0.201
[info]   CI (99.9%): [≈ 0, 1.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   708.146 ±(99.9%) 560.787 MB/sec [Average]
[info]   (min, avg, max) = (641.949, 708.146, 968.659), stdev = 145.634
[info]   CI (99.9%): [147.359, 1268.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   5234.291 ±(99.9%) 4161.310 B/op [Average]
[info]   (min, avg, max) = (4734.925, 5234.291, 7167.278), stdev = 1080.679
[info]   CI (99.9%): [1072.981, 9395.601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala
[info] # Run progress: 60.66% complete, ETA 00:22:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 109736.075 ops/s
[info] # Warmup Iteration   2: 180581.552 ops/s
[info] # Warmup Iteration   3: 182525.893 ops/s
[info] Iteration   1: 183817.586 ops/s
[info]                  ·gc.alloc.rate:                   976.876 MB/sec
[info]                  ·gc.alloc.rate.norm:              8368.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.891 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      980.403 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8398.212 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 183995.007 ops/s
[info]                  ·gc.alloc.rate:                   978.061 MB/sec
[info]                  ·gc.alloc.rate.norm:              8368.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.890 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      987.984 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8452.904 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 184235.897 ops/s
[info]                  ·gc.alloc.rate:                   979.500 MB/sec
[info]                  ·gc.alloc.rate.norm:              8368.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.533 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      993.441 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8487.096 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 184137.402 ops/s
[info]                  ·gc.alloc.rate:                   978.779 MB/sec
[info]                  ·gc.alloc.rate.norm:              8368.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.356 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      998.924 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8540.237 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 184362.229 ops/s
[info]                  ·gc.alloc.rate:                   979.952 MB/sec
[info]                  ·gc.alloc.rate.norm:              8368.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.355 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1002.898 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8563.936 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala":
[info]   184109.624 ±(99.9%) 814.457 ops/s [Average]
[info]   (min, avg, max) = (183817.586, 184109.624, 184362.229), stdev = 211.512
[info]   CI (99.9%): [183295.168, 184924.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   978.634 ±(99.9%) 4.687 MB/sec [Average]
[info]   (min, avg, max) = (976.876, 978.634, 979.952), stdev = 1.217
[info]   CI (99.9%): [973.946, 983.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   8368.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8368.002, 8368.002, 8368.002), stdev = 0.001
[info]   CI (99.9%): [8368.002, 8368.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.104), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.605 ±(99.9%) 1.042 B/op [Average]
[info]   (min, avg, max) = (0.355, 0.605, 0.891), stdev = 0.271
[info]   CI (99.9%): [≈ 0, 1.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   992.730 ±(99.9%) 34.265 MB/sec [Average]
[info]   (min, avg, max) = (980.403, 992.730, 1002.898), stdev = 8.898
[info]   CI (99.9%): [958.465, 1026.995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   8488.477 ±(99.9%) 256.784 B/op [Average]
[info]   (min, avg, max) = (8398.212, 8488.477, 8563.936), stdev = 66.686
[info]   CI (99.9%): [8231.692, 8745.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala
[info] # Run progress: 61.03% complete, ETA 00:22:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 342141.944 ops/s
[info] # Warmup Iteration   2: 353054.197 ops/s
[info] # Warmup Iteration   3: 356386.976 ops/s
[info] Iteration   1: 347961.876 ops/s
[info]                  ·gc.alloc.rate:                   675.517 MB/sec
[info]                  ·gc.alloc.rate.norm:              3056.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.180 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.813 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      662.977 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2999.271 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 356448.919 ops/s
[info]                  ·gc.alloc.rate:                   691.894 MB/sec
[info]                  ·gc.alloc.rate.norm:              3056.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.460 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      661.258 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2920.685 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 349299.111 ops/s
[info]                  ·gc.alloc.rate:                   678.016 MB/sec
[info]                  ·gc.alloc.rate.norm:              3056.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.188 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      661.211 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2980.256 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 354231.835 ops/s
[info]                  ·gc.alloc.rate:                   687.685 MB/sec
[info]                  ·gc.alloc.rate.norm:              3056.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.277 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      661.976 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2941.755 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 350486.758 ops/s
[info]                  ·gc.alloc.rate:                   680.389 MB/sec
[info]                  ·gc.alloc.rate.norm:              3056.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.374 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      994.263 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4465.780 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala":
[info]   351685.700 ±(99.9%) 13637.369 ops/s [Average]
[info]   (min, avg, max) = (347961.876, 351685.700, 356448.919), stdev = 3541.581
[info]   CI (99.9%): [338048.331, 365323.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   682.700 ±(99.9%) 26.417 MB/sec [Average]
[info]   (min, avg, max) = (675.517, 682.700, 691.894), stdev = 6.860
[info]   CI (99.9%): [656.283, 709.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3056.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3056.001, 3056.001, 3056.001), stdev = 0.001
[info]   CI (99.9%): [3056.001, 3056.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.094 ±(99.9%) 0.205 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.094, 0.180), stdev = 0.053
[info]   CI (99.9%): [≈ 0, 0.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.422 ±(99.9%) 0.928 B/op [Average]
[info]   (min, avg, max) = (0.188, 0.422, 0.813), stdev = 0.241
[info]   CI (99.9%): [≈ 0, 1.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   728.337 ±(99.9%) 572.432 MB/sec [Average]
[info]   (min, avg, max) = (661.211, 728.337, 994.263), stdev = 148.659
[info]   CI (99.9%): [155.905, 1300.769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3261.550 ±(99.9%) 2594.934 B/op [Average]
[info]   (min, avg, max) = (2920.685, 3261.550, 4465.780), stdev = 673.896
[info]   CI (99.9%): [666.615, 5856.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 1.000
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala
[info] # Run progress: 61.40% complete, ETA 00:22:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 213066.761 ops/s
[info] # Warmup Iteration   2: 310570.738 ops/s
[info] # Warmup Iteration   3: 312748.954 ops/s
[info] Iteration   1: 313123.942 ops/s
[info]                  ·gc.alloc.rate:                   308.626 MB/sec
[info]                  ·gc.alloc.rate.norm:              1552.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.644 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1285.569 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 313535.405 ops/s
[info]                  ·gc.alloc.rate:                   309.101 MB/sec
[info]                  ·gc.alloc.rate.norm:              1552.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.732 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1284.036 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 311793.058 ops/s
[info]                  ·gc.alloc.rate:                   307.365 MB/sec
[info]                  ·gc.alloc.rate.norm:              1552.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      320.951 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1620.601 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 310981.184 ops/s
[info]                  ·gc.alloc.rate:                   306.584 MB/sec
[info]                  ·gc.alloc.rate.norm:              1552.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.316 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      320.975 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1624.853 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 311741.536 ops/s
[info]                  ·gc.alloc.rate:                   307.349 MB/sec
[info]                  ·gc.alloc.rate.norm:              1552.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.315 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      322.983 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1630.949 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala":
[info]   312235.025 ±(99.9%) 4080.660 ops/s [Average]
[info]   (min, avg, max) = (310981.184, 312235.025, 313535.405), stdev = 1059.734
[info]   CI (99.9%): [308154.366, 316315.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   307.805 ±(99.9%) 3.967 MB/sec [Average]
[info]   (min, avg, max) = (306.584, 307.805, 309.101), stdev = 1.030
[info]   CI (99.9%): [303.838, 311.772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1552.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1552.001, 1552.001, 1552.001), stdev = 0.001
[info]   CI (99.9%): [1552.001, 1552.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.062), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.126 ±(99.9%) 0.666 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.126, 0.316), stdev = 0.173
[info]   CI (99.9%): [≈ 0, 0.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   295.257 ±(99.9%) 139.127 MB/sec [Average]
[info]   (min, avg, max) = (255.644, 295.257, 322.983), stdev = 36.131
[info]   CI (99.9%): [156.130, 434.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1489.202 ±(99.9%) 718.634 B/op [Average]
[info]   (min, avg, max) = (1284.036, 1489.202, 1630.949), stdev = 186.627
[info]   CI (99.9%): [770.568, 2207.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala
[info] # Run progress: 61.76% complete, ETA 00:22:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 787354.402 ops/s
[info] # Warmup Iteration   2: 871395.677 ops/s
[info] # Warmup Iteration   3: 874792.714 ops/s
[info] Iteration   1: 859463.806 ops/s
[info]                  ·gc.alloc.rate:                   637.652 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.152 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.609 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1200.892 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 873135.834 ops/s
[info]                  ·gc.alloc.rate:                   647.698 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.150 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.222 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1177.962 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 882835.967 ops/s
[info]                  ·gc.alloc.rate:                   654.958 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.148 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.611 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1163.816 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 882129.375 ops/s
[info]                  ·gc.alloc.rate:                   654.548 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.074 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.388 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1165.931 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 880381.342 ops/s
[info]                  ·gc.alloc.rate:                   653.182 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.037 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.958 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1171.175 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala":
[info]   875589.265 ±(99.9%) 37743.258 ops/s [Average]
[info]   (min, avg, max) = (859463.806, 875589.265, 882835.967), stdev = 9801.804
[info]   CI (99.9%): [837846.007, 913332.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   649.608 ±(99.9%) 28.059 MB/sec [Average]
[info]   (min, avg, max) = (637.652, 649.608, 654.958), stdev = 7.287
[info]   CI (99.9%): [621.548, 677.667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1168.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1168.000, 1168.000, 1168.001), stdev = 0.001
[info]   CI (99.9%): [1168.000, 1168.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.083), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.113 ±(99.9%) 0.206 B/op [Average]
[info]   (min, avg, max) = (0.037, 0.113, 0.152), stdev = 0.053
[info]   CI (99.9%): [≈ 0, 0.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   653.958 ±(99.9%) 4.872 MB/sec [Average]
[info]   (min, avg, max) = (652.611, 653.958, 655.609), stdev = 1.265
[info]   CI (99.9%): [649.085, 658.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1175.955 ±(99.9%) 57.650 B/op [Average]
[info]   (min, avg, max) = (1163.816, 1175.955, 1200.892), stdev = 14.971
[info]   CI (99.9%): [1118.306, 1233.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 62.13% complete, ETA 00:22:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 896771.398 ops/s
[info] # Warmup Iteration   2: 979123.751 ops/s
[info] # Warmup Iteration   3: 978450.173 ops/s
[info] Iteration   1: 979696.934 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 984537.354 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 983135.236 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 981408.904 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 981965.456 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc":
[info]   982148.777 ±(99.9%) 7013.818 ops/s [Average]
[info]   (min, avg, max) = (979696.934, 982148.777, 984537.354), stdev = 1821.466
[info]   CI (99.9%): [975134.959, 989162.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce
[info] # Run progress: 62.50% complete, ETA 00:21:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2978.691 ops/s
[info] # Warmup Iteration   2: 5257.391 ops/s
[info] # Warmup Iteration   3: 5279.529 ops/s
[info] Iteration   1: 5397.744 ops/s
[info]                  ·gc.alloc.rate:                   1065.352 MB/sec
[info]                  ·gc.alloc.rate.norm:              310624.076 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30.341 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      969.674 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 282727.159 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 5394.643 ops/s
[info]                  ·gc.alloc.rate:                   1064.412 MB/sec
[info]                  ·gc.alloc.rate.norm:              310624.076 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.145 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1295.822 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 378155.837 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 5343.485 ops/s
[info]                  ·gc.alloc.rate:                   1054.215 MB/sec
[info]                  ·gc.alloc.rate.norm:              310624.082 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.261 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      977.067 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 287892.475 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 5425.027 ops/s
[info]                  ·gc.alloc.rate:                   1070.818 MB/sec
[info]                  ·gc.alloc.rate.norm:              310624.075 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      982.788 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 285088.242 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 5420.567 ops/s
[info]                  ·gc.alloc.rate:                   1069.893 MB/sec
[info]                  ·gc.alloc.rate.norm:              310624.081 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18.131 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1320.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 383304.617 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce":
[info]   5396.293 ±(99.9%) 124.900 ops/s [Average]
[info]   (min, avg, max) = (5343.485, 5396.293, 5425.027), stdev = 32.436
[info]   CI (99.9%): [5271.393, 5521.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1064.938 ±(99.9%) 25.437 MB/sec [Average]
[info]   (min, avg, max) = (1054.215, 1064.938, 1070.818), stdev = 6.606
[info]   CI (99.9%): [1039.501, 1090.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   310624.078 ±(99.9%) 0.013 B/op [Average]
[info]   (min, avg, max) = (310624.075, 310624.078, 310624.082), stdev = 0.003
[info]   CI (99.9%): [310624.065, 310624.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.104), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   14.576 ±(99.9%) 42.396 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14.576, 30.341), stdev = 11.010
[info]   CI (99.9%): [≈ 0, 56.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1109.116 ±(99.9%) 700.213 MB/sec [Average]
[info]   (min, avg, max) = (969.674, 1109.116, 1320.229), stdev = 181.843
[info]   CI (99.9%): [408.903, 1809.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   323433.666 ±(99.9%) 201650.380 B/op [Average]
[info]   (min, avg, max) = (282727.159, 323433.666, 383304.617), stdev = 52367.963
[info]   CI (99.9%): [121783.286, 525084.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 5.000), stdev = 0.894
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala
[info] # Run progress: 62.87% complete, ETA 00:21:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19776.809 ops/s
[info] # Warmup Iteration   2: 31486.060 ops/s
[info] # Warmup Iteration   3: 32558.869 ops/s
[info] Iteration   1: 32170.847 ops/s
[info]                  ·gc.alloc.rate:                   546.612 MB/sec
[info]                  ·gc.alloc.rate.norm:              26744.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4.121 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     201.619 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      583.811 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28564.050 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 32308.763 ops/s
[info]                  ·gc.alloc.rate:                   548.954 MB/sec
[info]                  ·gc.alloc.rate.norm:              26744.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.766 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31850.257 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 32516.521 ops/s
[info]                  ·gc.alloc.rate:                   552.486 MB/sec
[info]                  ·gc.alloc.rate.norm:              26744.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      325.696 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15765.878 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 32369.662 ops/s
[info]                  ·gc.alloc.rate:                   550.076 MB/sec
[info]                  ·gc.alloc.rate.norm:              26744.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      650.123 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31608.196 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 32457.744 ops/s
[info]                  ·gc.alloc.rate:                   551.412 MB/sec
[info]                  ·gc.alloc.rate.norm:              26744.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      650.602 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31554.819 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala":
[info]   32364.707 ±(99.9%) 518.192 ops/s [Average]
[info]   (min, avg, max) = (32170.847, 32364.707, 32516.521), stdev = 134.573
[info]   CI (99.9%): [31846.515, 32882.900] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   549.908 ±(99.9%) 8.763 MB/sec [Average]
[info]   (min, avg, max) = (546.612, 549.908, 552.486), stdev = 2.276
[info]   CI (99.9%): [541.145, 558.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   26744.014 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (26744.013, 26744.014, 26744.017), stdev = 0.002
[info]   CI (99.9%): [26744.006, 26744.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.853 ±(99.9%) 7.034 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.853, 4.121), stdev = 1.827
[info]   CI (99.9%): [≈ 0, 7.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   41.738 ±(99.9%) 344.169 B/op [Average]
[info]   (min, avg, max) = (1.008, 41.738, 201.619), stdev = 89.380
[info]   CI (99.9%): [≈ 0, 385.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   572.800 ±(99.9%) 543.776 MB/sec [Average]
[info]   (min, avg, max) = (325.696, 572.800, 653.766), stdev = 141.217
[info]   CI (99.9%): [29.024, 1116.576] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   27868.640 ±(99.9%) 26565.669 B/op [Average]
[info]   (min, avg, max) = (15765.878, 27868.640, 31850.257), stdev = 6899.020
[info]   CI (99.9%): [1302.971, 54434.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 5.000), stdev = 1.517
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson
[info] # Run progress: 63.24% complete, ETA 00:21:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2056.649 ops/s
[info] # Warmup Iteration   2: 4476.547 ops/s
[info] # Warmup Iteration   3: 4570.900 ops/s
[info] Iteration   1: 4608.333 ops/s
[info]                  ·gc.alloc.rate:                   1170.103 MB/sec
[info]                  ·gc.alloc.rate.norm:              399728.095 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28.432 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1309.007 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 447180.134 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 4645.630 ops/s
[info]                  ·gc.alloc.rate:                   1179.613 MB/sec
[info]                  ·gc.alloc.rate.norm:              399728.095 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14.100 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1319.509 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 447133.742 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 4642.392 ops/s
[info]                  ·gc.alloc.rate:                   1178.682 MB/sec
[info]                  ·gc.alloc.rate.norm:              399728.088 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      997.026 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 338122.860 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 4619.889 ops/s
[info]                  ·gc.alloc.rate:                   1172.913 MB/sec
[info]                  ·gc.alloc.rate.norm:              399728.088 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.091 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1336.660 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 455532.638 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 4628.449 ops/s
[info]                  ·gc.alloc.rate:                   1175.319 MB/sec
[info]                  ·gc.alloc.rate.norm:              399728.088 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.077 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1006.843 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 342429.139 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson":
[info]   4628.938 ±(99.9%) 59.850 ops/s [Average]
[info]   (min, avg, max) = (4608.333, 4628.938, 4645.630), stdev = 15.543
[info]   CI (99.9%): [4569.089, 4688.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1175.326 ±(99.9%) 15.250 MB/sec [Average]
[info]   (min, avg, max) = (1170.103, 1175.326, 1179.613), stdev = 3.960
[info]   CI (99.9%): [1160.076, 1190.576] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   399728.091 ±(99.9%) 0.015 B/op [Average]
[info]   (min, avg, max) = (399728.088, 399728.091, 399728.095), stdev = 0.004
[info]   CI (99.9%): [399728.076, 399728.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.083), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   11.340 ±(99.9%) 41.498 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.340, 28.432), stdev = 10.777
[info]   CI (99.9%): [≈ 0, 52.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1193.809 ±(99.9%) 675.668 MB/sec [Average]
[info]   (min, avg, max) = (997.026, 1193.809, 1336.660), stdev = 175.469
[info]   CI (99.9%): [518.141, 1869.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   406079.702 ±(99.9%) 231757.901 B/op [Average]
[info]   (min, avg, max) = (338122.860, 406079.702, 455532.638), stdev = 60186.791
[info]   CI (99.9%): [174321.801, 637837.603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 6.000), stdev = 1.140
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce
[info] # Run progress: 63.60% complete, ETA 00:21:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9827.487 ops/s
[info] # Warmup Iteration   2: 13861.716 ops/s
[info] # Warmup Iteration   3: 13758.658 ops/s
[info] Iteration   1: 13524.254 ops/s
[info]                  ·gc.alloc.rate:                   847.528 MB/sec
[info]                  ·gc.alloc.rate.norm:              98672.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.267 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      968.772 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 112787.616 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 14027.017 ops/s
[info]                  ·gc.alloc.rate:                   879.359 MB/sec
[info]                  ·gc.alloc.rate.norm:              98688.328 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      968.960 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 108743.983 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 14074.457 ops/s
[info]                  ·gc.alloc.rate:                   882.663 MB/sec
[info]                  ·gc.alloc.rate.norm:              98736.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.983 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      647.921 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 72477.406 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 14064.777 ops/s
[info]                  ·gc.alloc.rate:                   882.128 MB/sec
[info]                  ·gc.alloc.rate.norm:              98736.031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.659 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      975.243 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 109158.342 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 14002.498 ops/s
[info]                  ·gc.alloc.rate:                   878.210 MB/sec
[info]                  ·gc.alloc.rate.norm:              98736.037 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.679 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      980.607 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 110248.351 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce":
[info]   13938.600 ±(99.9%) 898.862 ops/s [Average]
[info]   (min, avg, max) = (13524.254, 13938.600, 14074.457), stdev = 233.432
[info]   CI (99.9%): [13039.739, 14837.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   873.978 ±(99.9%) 57.383 MB/sec [Average]
[info]   (min, avg, max) = (847.528, 873.978, 882.663), stdev = 14.902
[info]   CI (99.9%): [816.594, 931.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   98713.691 ±(99.9%) 119.868 B/op [Average]
[info]   (min, avg, max) = (98672.033, 98713.691, 98736.037), stdev = 31.129
[info]   CI (99.9%): [98593.824, 98833.559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.125), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   7.520 ±(99.9%) 14.760 B/op [Average]
[info]   (min, avg, max) = (4.659, 7.520, 14.013), stdev = 3.833
[info]   CI (99.9%): [≈ 0, 22.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   908.300 ±(99.9%) 560.805 MB/sec [Average]
[info]   (min, avg, max) = (647.921, 908.300, 980.607), stdev = 145.639
[info]   CI (99.9%): [347.495, 1469.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   102683.140 ±(99.9%) 65301.666 B/op [Average]
[info]   (min, avg, max) = (72477.406, 102683.140, 112787.616), stdev = 16958.635
[info]   CI (99.9%): [37381.473, 167984.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 4.000), stdev = 0.837
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala
[info] # Run progress: 63.97% complete, ETA 00:20:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 240602.189 ops/s
[info] # Warmup Iteration   2: 270186.137 ops/s
[info] # Warmup Iteration   3: 258789.976 ops/s
[info] Iteration   1: 264761.651 ops/s
[info]                  ·gc.alloc.rate:                   933.660 MB/sec
[info]                  ·gc.alloc.rate.norm:              5552.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.619 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      975.482 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5800.697 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 265933.340 ops/s
[info]                  ·gc.alloc.rate:                   937.778 MB/sec
[info]                  ·gc.alloc.rate.norm:              5552.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.739 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      976.536 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5781.465 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 262861.286 ops/s
[info]                  ·gc.alloc.rate:                   927.116 MB/sec
[info]                  ·gc.alloc.rate.norm:              5552.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.499 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      979.319 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5864.617 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 264251.585 ops/s
[info]                  ·gc.alloc.rate:                   931.998 MB/sec
[info]                  ·gc.alloc.rate.norm:              5552.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.496 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      985.311 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5869.591 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 264900.764 ops/s
[info]                  ·gc.alloc.rate:                   934.243 MB/sec
[info]                  ·gc.alloc.rate.norm:              5552.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.495 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      989.257 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5878.937 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala":
[info]   264541.725 ±(99.9%) 4314.581 ops/s [Average]
[info]   (min, avg, max) = (262861.286, 264541.725, 265933.340), stdev = 1120.483
[info]   CI (99.9%): [260227.145, 268856.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   932.959 ±(99.9%) 14.966 MB/sec [Average]
[info]   (min, avg, max) = (927.116, 932.959, 937.778), stdev = 3.887
[info]   CI (99.9%): [917.993, 947.925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5552.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5552.002, 5552.002, 5552.002), stdev = 0.001
[info]   CI (99.9%): [5552.001, 5552.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.096 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.096, 0.125), stdev = 0.019
[info]   CI (99.9%): [0.024, 0.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.569 ±(99.9%) 0.419 B/op [Average]
[info]   (min, avg, max) = (0.495, 0.569, 0.739), stdev = 0.109
[info]   CI (99.9%): [0.151, 0.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   981.181 ±(99.9%) 22.765 MB/sec [Average]
[info]   (min, avg, max) = (975.482, 981.181, 989.257), stdev = 5.912
[info]   CI (99.9%): [958.416, 1003.946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5839.062 ±(99.9%) 171.822 B/op [Average]
[info]   (min, avg, max) = (5781.465, 5839.062, 5878.937), stdev = 44.622
[info]   CI (99.9%): [5667.239, 6010.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 64.34% complete, ETA 00:20:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 267870.761 ops/s
[info] # Warmup Iteration   2: 295864.634 ops/s
[info] # Warmup Iteration   3: 293439.878 ops/s
[info] Iteration   1: 293347.443 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 294319.694 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 294451.888 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 293315.925 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 294461.176 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   293979.225 ±(99.9%) 2286.778 ops/s [Average]
[info]   (min, avg, max) = (293315.925, 293979.225, 294461.176), stdev = 593.869
[info]   CI (99.9%): [291692.448, 296266.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson
[info] # Run progress: 64.71% complete, ETA 00:20:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10727.259 ops/s
[info] # Warmup Iteration   2: 15177.900 ops/s
[info] # Warmup Iteration   3: 15700.762 ops/s
[info] Iteration   1: 15676.984 ops/s
[info]                  ·gc.alloc.rate:                   870.318 MB/sec
[info]                  ·gc.alloc.rate.norm:              87392.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.269 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      962.277 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 96626.001 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 15751.768 ops/s
[info]                  ·gc.alloc.rate:                   874.470 MB/sec
[info]                  ·gc.alloc.rate.norm:              87392.133 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.320 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      962.387 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 96178.261 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 15795.614 ops/s
[info]                  ·gc.alloc.rate:                   876.852 MB/sec
[info]                  ·gc.alloc.rate.norm:              87392.045 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.148 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      643.949 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 64179.568 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 15791.028 ops/s
[info]                  ·gc.alloc.rate:                   876.572 MB/sec
[info]                  ·gc.alloc.rate.norm:              87392.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.299 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      971.247 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 96830.955 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 15789.986 ops/s
[info]                  ·gc.alloc.rate:                   876.469 MB/sec
[info]                  ·gc.alloc.rate.norm:              87382.071 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.374 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      976.633 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 97368.246 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson":
[info]   15761.076 ±(99.9%) 193.338 ops/s [Average]
[info]   (min, avg, max) = (15676.984, 15761.076, 15795.614), stdev = 50.209
[info]   CI (99.9%): [15567.738, 15954.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   874.936 ±(99.9%) 10.587 MB/sec [Average]
[info]   (min, avg, max) = (870.318, 874.936, 876.852), stdev = 2.749
[info]   CI (99.9%): [864.349, 885.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   87390.058 ±(99.9%) 17.195 B/op [Average]
[info]   (min, avg, max) = (87382.071, 87390.058, 87392.133), stdev = 4.466
[info]   CI (99.9%): [87372.863, 87407.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   7.482 ±(99.9%) 9.096 B/op [Average]
[info]   (min, avg, max) = (4.148, 7.482, 10.374), stdev = 2.362
[info]   CI (99.9%): [≈ 0, 16.578] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   903.298 ±(99.9%) 558.766 MB/sec [Average]
[info]   (min, avg, max) = (643.949, 903.298, 976.633), stdev = 145.110
[info]   CI (99.9%): [344.533, 1462.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   90236.606 ±(99.9%) 56113.890 B/op [Average]
[info]   (min, avg, max) = (64179.568, 90236.606, 97368.246), stdev = 14572.599
[info]   CI (99.9%): [34122.715, 146350.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce
[info] # Run progress: 65.07% complete, ETA 00:20:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 606776.742 ops/s
[info] # Warmup Iteration   2: 919108.045 ops/s
[info] # Warmup Iteration   3: 931622.182 ops/s
[info] Iteration   1: 917261.669 ops/s
[info]                  ·gc.alloc.rate:                   2968.797 MB/sec
[info]                  ·gc.alloc.rate.norm:              5096.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.286 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3007.254 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5162.012 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 934706.832 ops/s
[info]                  ·gc.alloc.rate:                   3026.450 MB/sec
[info]                  ·gc.alloc.rate.norm:              5096.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.210 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3036.895 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5113.588 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 921359.821 ops/s
[info]                  ·gc.alloc.rate:                   2982.217 MB/sec
[info]                  ·gc.alloc.rate.norm:              5096.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.213 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3050.354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5212.431 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 928944.589 ops/s
[info]                  ·gc.alloc.rate:                   3007.150 MB/sec
[info]                  ·gc.alloc.rate.norm:              5096.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.141 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3057.344 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5181.059 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 921649.492 ops/s
[info]                  ·gc.alloc.rate:                   2983.464 MB/sec
[info]                  ·gc.alloc.rate.norm:              5096.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.229 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.391 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3062.802 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5231.516 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce":
[info]   924784.481 ±(99.9%) 26810.321 ops/s [Average]
[info]   (min, avg, max) = (917261.669, 924784.481, 934706.832), stdev = 6962.555
[info]   CI (99.9%): [897974.159, 951594.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.alloc.rate":
[info]   2993.616 ±(99.9%) 88.444 MB/sec [Average]
[info]   (min, avg, max) = (2968.797, 2993.616, 3026.450), stdev = 22.969
[info]   CI (99.9%): [2905.172, 3082.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5096.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5096.000, 5096.000, 5096.000), stdev = 0.001
[info]   CI (99.9%): [5096.000, 5096.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.146 ±(99.9%) 0.212 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.146, 0.229), stdev = 0.055
[info]   CI (99.9%): [≈ 0, 0.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.248 ±(99.9%) 0.365 B/op [Average]
[info]   (min, avg, max) = (0.141, 0.248, 0.391), stdev = 0.095
[info]   CI (99.9%): [≈ 0, 0.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   3042.930 ±(99.9%) 85.389 MB/sec [Average]
[info]   (min, avg, max) = (3007.254, 3042.930, 3062.802), stdev = 22.175
[info]   CI (99.9%): [2957.541, 3128.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5180.121 ±(99.9%) 176.888 B/op [Average]
[info]   (min, avg, max) = (5113.588, 5180.121, 5231.516), stdev = 45.937
[info]   CI (99.9%): [5003.234, 5357.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.count":
[info]   45.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.000, 9.000), stdev = 0.001
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.200, 9.000), stdev = 0.447
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala
[info] # Run progress: 65.44% complete, ETA 00:20:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 745284.192 ops/s
[info] # Warmup Iteration   2: 1781448.237 ops/s
[info] # Warmup Iteration   3: 1803095.577 ops/s
[info] Iteration   1: 1792160.113 ops/s
[info]                  ·gc.alloc.rate:                   1684.607 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.110 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1651.704 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1451.094 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 1798270.481 ops/s
[info]                  ·gc.alloc.rate:                   1690.519 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.091 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1666.524 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1458.994 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 1777985.532 ops/s
[info]                  ·gc.alloc.rate:                   1671.494 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.092 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1678.211 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1485.948 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 1791695.278 ops/s
[info]                  ·gc.alloc.rate:                   1684.528 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.055 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1685.654 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1480.990 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 1792927.137 ops/s
[info]                  ·gc.alloc.rate:                   1685.551 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.128 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1691.444 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1485.175 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala":
[info]   1790607.708 ±(99.9%) 29008.534 ops/s [Average]
[info]   (min, avg, max) = (1777985.532, 1790607.708, 1798270.481), stdev = 7533.424
[info]   CI (99.9%): [1761599.174, 1819616.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1683.340 ±(99.9%) 27.212 MB/sec [Average]
[info]   (min, avg, max) = (1671.494, 1683.340, 1690.519), stdev = 7.067
[info]   CI (99.9%): [1656.127, 1710.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1480.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1480.000, 1480.000, 1480.000), stdev = 0.001
[info]   CI (99.9%): [1480.000, 1480.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.108 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.108, 0.146), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.095 ±(99.9%) 0.104 B/op [Average]
[info]   (min, avg, max) = (0.055, 0.095, 0.128), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1674.708 ±(99.9%) 61.137 MB/sec [Average]
[info]   (min, avg, max) = (1651.704, 1674.708, 1691.444), stdev = 15.877
[info]   CI (99.9%): [1613.571, 1735.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1472.440 ±(99.9%) 62.512 B/op [Average]
[info]   (min, avg, max) = (1451.094, 1472.440, 1485.948), stdev = 16.234
[info]   CI (99.9%): [1409.928, 1534.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala
[info] # Run progress: 65.81% complete, ETA 00:19:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8805672.568 ops/s
[info] # Warmup Iteration   2: 10194009.054 ops/s
[info] # Warmup Iteration   3: 10094862.357 ops/s
[info] Iteration   1: 10126416.614 ops/s
[info]                  ·gc.alloc.rate:                   2521.264 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2673.038 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 415.597 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 10252438.444 ops/s
[info]                  ·gc.alloc.rate:                   2553.563 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2358.191 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 362.008 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 10252156.555 ops/s
[info]                  ·gc.alloc.rate:                   2552.588 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2707.549 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 415.797 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 10155148.983 ops/s
[info]                  ·gc.alloc.rate:                   2528.287 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2375.657 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 368.335 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 10229893.451 ops/s
[info]                  ·gc.alloc.rate:                   2547.522 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2719.326 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 418.436 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala":
[info]   10203210.809 ±(99.9%) 225667.915 ops/s [Average]
[info]   (min, avg, max) = (10126416.614, 10203210.809, 10252438.444), stdev = 58605.241
[info]   CI (99.9%): [9977542.895, 10428878.724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2540.645 ±(99.9%) 57.281 MB/sec [Average]
[info]   (min, avg, max) = (2521.264, 2540.645, 2553.563), stdev = 14.876
[info]   CI (99.9%): [2483.364, 2597.925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   392.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (392.000, 392.000, 392.000), stdev = 0.001
[info]   CI (99.9%): [392.000, 392.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.125), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.013 ±(99.9%) 0.019 B/op [Average]
[info]   (min, avg, max) = (0.006, 0.013, 0.019), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   2566.752 ±(99.9%) 705.873 MB/sec [Average]
[info]   (min, avg, max) = (2358.191, 2566.752, 2719.326), stdev = 183.313
[info]   CI (99.9%): [1860.879, 3272.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   396.035 ±(99.9%) 108.915 B/op [Average]
[info]   (min, avg, max) = (362.008, 396.035, 418.436), stdev = 28.285
[info]   CI (99.9%): [287.120, 504.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.count":
[info]   38.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.600, 8.000), stdev = 0.548
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson
[info] # Run progress: 66.18% complete, ETA 00:19:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 72534.042 ops/s
[info] # Warmup Iteration   2: 319538.844 ops/s
[info] # Warmup Iteration   3: 316730.251 ops/s
[info] Iteration   1: 319888.648 ops/s
[info]                  ·gc.alloc.rate:                   1948.924 MB/sec
[info]                  ·gc.alloc.rate.norm:              9592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.615 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1987.397 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9781.352 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 323697.463 ops/s
[info]                  ·gc.alloc.rate:                   1972.263 MB/sec
[info]                  ·gc.alloc.rate.norm:              9592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.506 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2006.576 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9758.880 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 320155.660 ops/s
[info]                  ·gc.alloc.rate:                   1950.920 MB/sec
[info]                  ·gc.alloc.rate.norm:              9592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.205 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2019.743 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9930.379 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 323468.802 ops/s
[info]                  ·gc.alloc.rate:                   1970.653 MB/sec
[info]                  ·gc.alloc.rate.norm:              9592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.203 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1689.596 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8223.979 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 321974.731 ops/s
[info]                  ·gc.alloc.rate:                   1961.866 MB/sec
[info]                  ·gc.alloc.rate.norm:              9592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.509 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033.166 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9940.606 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson":
[info]   321837.061 ±(99.9%) 6879.099 ops/s [Average]
[info]   (min, avg, max) = (319888.648, 321837.061, 323697.463), stdev = 1786.480
[info]   CI (99.9%): [314957.962, 328716.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1960.925 ±(99.9%) 41.659 MB/sec [Average]
[info]   (min, avg, max) = (1948.924, 1960.925, 1972.263), stdev = 10.819
[info]   CI (99.9%): [1919.266, 2002.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   9592.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (9592.001, 9592.001, 9592.001), stdev = 0.001
[info]   CI (99.9%): [9592.001, 9592.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.125), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.407 ±(99.9%) 0.736 B/op [Average]
[info]   (min, avg, max) = (0.203, 0.407, 0.615), stdev = 0.191
[info]   CI (99.9%): [≈ 0, 1.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1947.296 ±(99.9%) 558.522 MB/sec [Average]
[info]   (min, avg, max) = (1689.596, 1947.296, 2033.166), stdev = 145.046
[info]   CI (99.9%): [1388.774, 2505.818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   9527.039 ±(99.9%) 2823.149 B/op [Average]
[info]   (min, avg, max) = (8223.979, 9527.039, 9940.606), stdev = 733.163
[info]   CI (99.9%): [6703.890, 12350.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce
[info] # Run progress: 66.54% complete, ETA 00:19:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 648448.164 ops/s
[info] # Warmup Iteration   2: 1041883.303 ops/s
[info] # Warmup Iteration   3: 1067472.285 ops/s
[info] Iteration   1: 1068382.888 ops/s
[info]                  ·gc.alloc.rate:                   2350.179 MB/sec
[info]                  ·gc.alloc.rate.norm:              3464.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.123 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2319.291 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3418.474 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 1063485.343 ops/s
[info]                  ·gc.alloc.rate:                   2339.832 MB/sec
[info]                  ·gc.alloc.rate.norm:              3464.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.123 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2342.370 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3467.758 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 1067226.722 ops/s
[info]                  ·gc.alloc.rate:                   2348.805 MB/sec
[info]                  ·gc.alloc.rate.norm:              3464.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.123 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2360.269 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3480.908 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 1057568.474 ops/s
[info]                  ·gc.alloc.rate:                   2327.057 MB/sec
[info]                  ·gc.alloc.rate.norm:              3464.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.186 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2369.818 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3527.653 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 1056671.901 ops/s
[info]                  ·gc.alloc.rate:                   2325.156 MB/sec
[info]                  ·gc.alloc.rate.norm:              3464.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.124 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2036.478 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3033.930 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce":
[info]   1062667.065 ±(99.9%) 20742.457 ops/s [Average]
[info]   (min, avg, max) = (1056671.901, 1062667.065, 1068382.888), stdev = 5386.750
[info]   CI (99.9%): [1041924.608, 1083409.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.alloc.rate":
[info]   2338.206 ±(99.9%) 45.274 MB/sec [Average]
[info]   (min, avg, max) = (2325.156, 2338.206, 2350.179), stdev = 11.757
[info]   CI (99.9%): [2292.932, 2383.479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   3464.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3464.000, 3464.000, 3464.000), stdev = 0.001
[info]   CI (99.9%): [3464.000, 3464.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.092, 0.125), stdev = 0.019
[info]   CI (99.9%): [0.020, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.136 ±(99.9%) 0.108 B/op [Average]
[info]   (min, avg, max) = (0.123, 0.136, 0.186), stdev = 0.028
[info]   CI (99.9%): [0.028, 0.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   2285.645 ±(99.9%) 541.450 MB/sec [Average]
[info]   (min, avg, max) = (2036.478, 2285.645, 2369.818), stdev = 140.613
[info]   CI (99.9%): [1744.195, 2827.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3385.745 ±(99.9%) 771.968 B/op [Average]
[info]   (min, avg, max) = (3033.930, 3385.745, 3527.653), stdev = 200.478
[info]   CI (99.9%): [2613.777, 4157.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.count":
[info]   34.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala
[info] # Run progress: 66.91% complete, ETA 00:19:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_11ae7560/target/5e31e36e/jackson-module-afterburner-2.9.4.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 1412848.727 ops/s
[info] # Warmup Iteration   2: 3804332.888 ops/s
[info] # Warmup Iteration   3: 3831403.332 ops/s
[info] Iteration   1: 3755976.686 ops/s
[info]                  ·gc.alloc.rate:                   2137.403 MB/sec
[info]                  ·gc.alloc.rate.norm:              896.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.035 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2326.695 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 975.352 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 3805997.055 ops/s
[info]                  ·gc.alloc.rate:                   2166.180 MB/sec
[info]                  ·gc.alloc.rate.norm:              896.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.060 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2013.242 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 832.740 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 3782267.504 ops/s
[info]                  ·gc.alloc.rate:                   2152.443 MB/sec
[info]                  ·gc.alloc.rate.norm:              896.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2361.884 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 983.184 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 3770228.978 ops/s
[info]                  ·gc.alloc.rate:                   2145.496 MB/sec
[info]                  ·gc.alloc.rate.norm:              896.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.035 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032.170 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 848.673 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 3825031.754 ops/s
[info]                  ·gc.alloc.rate:                   2177.178 MB/sec
[info]                  ·gc.alloc.rate.norm:              896.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.051 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2036.553 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 838.127 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala":
[info]   3787900.395 ±(99.9%) 106666.287 ops/s [Average]
[info]   (min, avg, max) = (3755976.686, 3787900.395, 3825031.754), stdev = 27700.896
[info]   CI (99.9%): [3681234.108, 3894566.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   2155.740 ±(99.9%) 61.509 MB/sec [Average]
[info]   (min, avg, max) = (2137.403, 2155.740, 2177.178), stdev = 15.974
[info]   CI (99.9%): [2094.230, 2217.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   896.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (896.000, 896.000, 896.000), stdev = 0.001
[info]   CI (99.9%): [896.000, 896.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.100 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.100, 0.146), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.041 ±(99.9%) 0.054 B/op [Average]
[info]   (min, avg, max) = (0.026, 0.041, 0.060), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   2154.109 ±(99.9%) 671.075 MB/sec [Average]
[info]   (min, avg, max) = (2013.242, 2154.109, 2361.884), stdev = 174.276
[info]   CI (99.9%): [1483.034, 2825.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   895.615 ±(99.9%) 295.071 B/op [Average]
[info]   (min, avg, max) = (832.740, 895.615, 983.184), stdev = 76.629
[info]   CI (99.9%): [600.544, 1190.686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.count":
[info]   32.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.400, 8.000), stdev = 0.548
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala
[info] # Run progress: 67.28% complete, ETA 00:19:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14344545.799 ops/s
[info] # Warmup Iteration   2: 19778436.941 ops/s
[info] # Warmup Iteration   3: 20588445.907 ops/s
[info] Iteration   1: 20396415.539 ops/s
[info]                  ·gc.alloc.rate:                   932.812 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.285 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50.424 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 20087874.387 ops/s
[info]                  ·gc.alloc.rate:                   918.664 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      978.935 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 76.724 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 20535701.750 ops/s
[info]                  ·gc.alloc.rate:                   939.158 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      981.862 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 75.274 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 20493896.439 ops/s
[info]                  ·gc.alloc.rate:                   937.441 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      985.479 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 75.690 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 20272782.515 ops/s
[info]                  ·gc.alloc.rate:                   927.483 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      991.616 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 76.979 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala":
[info]   20357334.126 ±(99.9%) 698839.249 ops/s [Average]
[info]   (min, avg, max) = (20087874.387, 20357334.126, 20535701.750), stdev = 181486.334
[info]   CI (99.9%): [19658494.877, 21056173.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   931.112 ±(99.9%) 31.975 MB/sec [Average]
[info]   (min, avg, max) = (918.664, 931.112, 939.158), stdev = 8.304
[info]   CI (99.9%): [899.137, 963.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   72.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (72.000, 72.000, 72.000), stdev = 0.001
[info]   CI (99.9%): [72.000, 72.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.125), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.007 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (0.005, 0.007, 0.010), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   918.235 ±(99.9%) 570.617 MB/sec [Average]
[info]   (min, avg, max) = (653.285, 918.235, 991.616), stdev = 148.187
[info]   CI (99.9%): [347.618, 1488.852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   71.018 ±(99.9%) 44.413 B/op [Average]
[info]   (min, avg, max) = (50.424, 71.018, 76.979), stdev = 11.534
[info]   CI (99.9%): [26.605, 115.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson
[info] # Run progress: 67.65% complete, ETA 00:18:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 113609.266 ops/s
[info] # Warmup Iteration   2: 463556.286 ops/s
[info] # Warmup Iteration   3: 464785.114 ops/s
[info] Iteration   1: 461605.427 ops/s
[info]                  ·gc.alloc.rate:                   1613.800 MB/sec
[info]                  ·gc.alloc.rate.norm:              5504.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.426 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1647.828 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5620.056 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 466520.468 ops/s
[info]                  ·gc.alloc.rate:                   1631.099 MB/sec
[info]                  ·gc.alloc.rate.norm:              5504.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.351 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1663.989 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5614.984 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 466760.797 ops/s
[info]                  ·gc.alloc.rate:                   1631.854 MB/sec
[info]                  ·gc.alloc.rate.norm:              5504.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.281 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1674.508 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5647.867 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 467717.242 ops/s
[info]                  ·gc.alloc.rate:                   1635.005 MB/sec
[info]                  ·gc.alloc.rate.norm:              5504.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.210 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.286 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4532.071 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 465450.678 ops/s
[info]                  ·gc.alloc.rate:                   1627.303 MB/sec
[info]                  ·gc.alloc.rate.norm:              5504.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.211 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1688.121 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5709.702 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson":
[info]   465610.922 ±(99.9%) 9164.155 ops/s [Average]
[info]   (min, avg, max) = (461605.427, 465610.922, 467717.242), stdev = 2379.902
[info]   CI (99.9%): [456446.767, 474775.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1627.812 ±(99.9%) 31.956 MB/sec [Average]
[info]   (min, avg, max) = (1613.800, 1627.812, 1635.005), stdev = 8.299
[info]   CI (99.9%): [1595.857, 1659.768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5504.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5504.001, 5504.001, 5504.001), stdev = 0.001
[info]   CI (99.9%): [5504.001, 5504.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.125), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.296 ±(99.9%) 0.359 B/op [Average]
[info]   (min, avg, max) = (0.210, 0.296, 0.426), stdev = 0.093
[info]   CI (99.9%): [≈ 0, 0.654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1604.146 ±(99.9%) 557.956 MB/sec [Average]
[info]   (min, avg, max) = (1346.286, 1604.146, 1688.121), stdev = 144.900
[info]   CI (99.9%): [1046.190, 2162.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   5424.936 ±(99.9%) 1927.426 B/op [Average]
[info]   (min, avg, max) = (4532.071, 5424.936, 5709.702), stdev = 500.547
[info]   CI (99.9%): [3497.509, 7352.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 7.000), stdev = 1.140
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala
[info] # Run progress: 68.01% complete, ETA 00:18:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1082887.803 ops/s
[info] # Warmup Iteration   2: 2083804.921 ops/s
[info] # Warmup Iteration   3: 2135387.991 ops/s
[info] Iteration   1: 2125501.969 ops/s
[info]                  ·gc.alloc.rate:                   1349.899 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.031 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1314.266 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 973.604 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 2136194.509 ops/s
[info]                  ·gc.alloc.rate:                   1356.958 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.092 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1325.298 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 976.668 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 2132320.818 ops/s
[info]                  ·gc.alloc.rate:                   1354.459 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1333.813 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 984.757 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 2118877.701 ops/s
[info]                  ·gc.alloc.rate:                   1346.126 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1340.679 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 995.954 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 2097273.512 ops/s
[info]                  ·gc.alloc.rate:                   1332.307 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.078 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.578 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1010.711 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala":
[info]   2122033.702 ±(99.9%) 59073.492 ops/s [Average]
[info]   (min, avg, max) = (2097273.512, 2122033.702, 2136194.509), stdev = 15341.198
[info]   CI (99.9%): [2062960.210, 2181107.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1347.950 ±(99.9%) 37.300 MB/sec [Average]
[info]   (min, avg, max) = (1332.307, 1347.950, 1356.958), stdev = 9.687
[info]   CI (99.9%): [1310.649, 1385.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1000.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1000.000, 1000.000, 1000.000), stdev = 0.001
[info]   CI (99.9%): [1000.000, 1000.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.125), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.059 ±(99.9%) 0.098 B/op [Average]
[info]   (min, avg, max) = (0.031, 0.059, 0.092), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1332.127 ±(99.9%) 49.104 MB/sec [Average]
[info]   (min, avg, max) = (1314.266, 1332.127, 1346.578), stdev = 12.752
[info]   CI (99.9%): [1283.023, 1381.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   988.339 ±(99.9%) 58.546 B/op [Average]
[info]   (min, avg, max) = (973.604, 988.339, 1010.711), stdev = 15.204
[info]   CI (99.9%): [929.793, 1046.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala
[info] # Run progress: 68.38% complete, ETA 00:18:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4371838.203 ops/s
[info] # Warmup Iteration   2: 5281384.250 ops/s
[info] # Warmup Iteration   3: 5356620.511 ops/s
[info] Iteration   1: 5348806.257 ops/s
[info]                  ·gc.alloc.rate:                   706.664 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.031 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658.224 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 193.742 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 5371078.167 ops/s
[info]                  ·gc.alloc.rate:                   709.660 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.986 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 192.268 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 5353604.809 ops/s
[info]                  ·gc.alloc.rate:                   707.314 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      983.500 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 289.218 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 5337735.263 ops/s
[info]                  ·gc.alloc.rate:                   705.291 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.627 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 193.648 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 5351844.997 ops/s
[info]                  ·gc.alloc.rate:                   707.129 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658.604 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 193.727 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala":
[info]   5352613.899 ±(99.9%) 46302.862 ops/s [Average]
[info]   (min, avg, max) = (5337735.263, 5352613.899, 5371078.167), stdev = 12024.706
[info]   CI (99.9%): [5306311.037, 5398916.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   707.212 ±(99.9%) 6.089 MB/sec [Average]
[info]   (min, avg, max) = (705.291, 707.212, 709.660), stdev = 1.581
[info]   CI (99.9%): [701.123, 713.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   208.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (208.000, 208.000, 208.000), stdev = 0.001
[info]   CI (99.9%): [208.000, 208.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.021 ±(99.9%) 0.027 B/op [Average]
[info]   (min, avg, max) = (0.012, 0.021, 0.031), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   722.588 ±(99.9%) 561.648 MB/sec [Average]
[info]   (min, avg, max) = (655.986, 722.588, 983.500), stdev = 145.858
[info]   CI (99.9%): [160.940, 1284.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   212.521 ±(99.9%) 165.115 B/op [Average]
[info]   (min, avg, max) = (192.268, 212.521, 289.218), stdev = 42.880
[info]   CI (99.9%): [47.406, 377.636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson
[info] # Run progress: 68.75% complete, ETA 00:18:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 112031.808 ops/s
[info] # Warmup Iteration   2: 349941.714 ops/s
[info] # Warmup Iteration   3: 350563.933 ops/s
[info] Iteration   1: 352009.196 ops/s
[info]                  ·gc.alloc.rate:                   1651.419 MB/sec
[info]                  ·gc.alloc.rate.norm:              7384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.372 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1648.141 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7369.343 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 349817.105 ops/s
[info]                  ·gc.alloc.rate:                   1640.917 MB/sec
[info]                  ·gc.alloc.rate.norm:              7384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.656 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1664.687 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7490.963 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 350554.729 ops/s
[info]                  ·gc.alloc.rate:                   1644.214 MB/sec
[info]                  ·gc.alloc.rate.norm:              7384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.374 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1675.123 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7522.810 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 355318.246 ops/s
[info]                  ·gc.alloc.rate:                   1666.431 MB/sec
[info]                  ·gc.alloc.rate.norm:              7384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.184 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1683.983 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7461.778 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 355041.391 ops/s
[info]                  ·gc.alloc.rate:                   1665.624 MB/sec
[info]                  ·gc.alloc.rate.norm:              7384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.277 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1690.471 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7494.152 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson":
[info]   352548.134 ±(99.9%) 9743.820 ops/s [Average]
[info]   (min, avg, max) = (349817.105, 352548.134, 355318.246), stdev = 2530.439
[info]   CI (99.9%): [342804.314, 362291.953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1653.721 ±(99.9%) 45.677 MB/sec [Average]
[info]   (min, avg, max) = (1640.917, 1653.721, 1666.431), stdev = 11.862
[info]   CI (99.9%): [1608.044, 1699.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   7384.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7384.001, 7384.001, 7384.001), stdev = 0.001
[info]   CI (99.9%): [7384.001, 7384.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.146), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.373 ±(99.9%) 0.680 B/op [Average]
[info]   (min, avg, max) = (0.184, 0.373, 0.656), stdev = 0.177
[info]   CI (99.9%): [≈ 0, 1.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1672.481 ±(99.9%) 64.322 MB/sec [Average]
[info]   (min, avg, max) = (1648.141, 1672.481, 1690.471), stdev = 16.704
[info]   CI (99.9%): [1608.159, 1736.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   7467.809 ±(99.9%) 227.703 B/op [Average]
[info]   (min, avg, max) = (7369.343, 7467.809, 7522.810), stdev = 59.134
[info]   CI (99.9%): [7240.106, 7695.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala
[info] # Run progress: 69.12% complete, ETA 00:17:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_11ae7560/target/5e31e36e/jackson-module-afterburner-2.9.4.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 1506933.839 ops/s
[info] # Warmup Iteration   2: 2651389.895 ops/s
[info] # Warmup Iteration   3: 2637947.457 ops/s
[info] Iteration   1: 2694168.041 ops/s
[info]                  ·gc.alloc.rate:                   1423.543 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.097 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1316.864 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 769.651 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 2706327.437 ops/s
[info]                  ·gc.alloc.rate:                   1430.316 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.073 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1325.972 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 771.304 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 2691489.504 ops/s
[info]                  ·gc.alloc.rate:                   1422.489 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1669.207 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 976.303 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 2697803.846 ops/s
[info]                  ·gc.alloc.rate:                   1425.865 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.593 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 783.410 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 2685984.160 ops/s
[info]                  ·gc.alloc.rate:                   1419.600 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.037 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.896 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 789.976 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala":
[info]   2695154.597 ±(99.9%) 29221.414 ops/s [Average]
[info]   (min, avg, max) = (2685984.160, 2695154.597, 2706327.437), stdev = 7588.708
[info]   CI (99.9%): [2665933.184, 2724376.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1424.363 ±(99.9%) 15.471 MB/sec [Average]
[info]   (min, avg, max) = (1419.600, 1424.363, 1430.316), stdev = 4.018
[info]   CI (99.9%): [1408.892, 1439.834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   832.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (832.000, 832.000, 832.000), stdev = 0.001
[info]   CI (99.9%): [832.000, 832.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.222 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.087, 0.166), stdev = 0.058
[info]   CI (99.9%): [≈ 0, 0.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.051 ±(99.9%) 0.130 B/op [Average]
[info]   (min, avg, max) = (0.012, 0.051, 0.097), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1400.506 ±(99.9%) 580.392 MB/sec [Average]
[info]   (min, avg, max) = (1316.864, 1400.506, 1669.207), stdev = 150.726
[info]   CI (99.9%): [820.114, 1980.898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   818.129 ±(99.9%) 342.035 B/op [Average]
[info]   (min, avg, max) = (769.651, 818.129, 976.303), stdev = 88.825
[info]   CI (99.9%): [476.094, 1160.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 0.837
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala
[info] # Run progress: 69.49% complete, ETA 00:17:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6214135.601 ops/s
[info] # Warmup Iteration   2: 7078687.586 ops/s
[info] # Warmup Iteration   3: 7249661.699 ops/s
[info] Iteration   1: 7259701.506 ops/s
[info]                  ·gc.alloc.rate:                   1106.917 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      979.094 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 212.286 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 7277248.331 ops/s
[info]                  ·gc.alloc.rate:                   1109.462 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      982.029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 212.434 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 7243634.047 ops/s
[info]                  ·gc.alloc.rate:                   1104.308 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1315.223 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 285.838 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 7288200.412 ops/s
[info]                  ·gc.alloc.rate:                   1111.492 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      992.259 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 214.255 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 7259149.684 ops/s
[info]                  ·gc.alloc.rate:                   1106.655 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      996.877 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 216.193 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala":
[info]   7265586.796 ±(99.9%) 66843.987 ops/s [Average]
[info]   (min, avg, max) = (7243634.047, 7265586.796, 7288200.412), stdev = 17359.171
[info]   CI (99.9%): [7198742.809, 7332430.783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1107.767 ±(99.9%) 10.662 MB/sec [Average]
[info]   (min, avg, max) = (1104.308, 1107.767, 1111.492), stdev = 2.769
[info]   CI (99.9%): [1097.105, 1118.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   240.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (240.000, 240.000, 240.000), stdev = 0.001
[info]   CI (99.9%): [240.000, 240.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.092, 0.104), stdev = 0.019
[info]   CI (99.9%): [0.020, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.020 ±(99.9%) 0.016 B/op [Average]
[info]   (min, avg, max) = (0.013, 0.020, 0.023), stdev = 0.004
[info]   CI (99.9%): [0.004, 0.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1053.096 ±(99.9%) 564.941 MB/sec [Average]
[info]   (min, avg, max) = (979.094, 1053.096, 1315.223), stdev = 146.713
[info]   CI (99.9%): [488.155, 1618.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   228.201 ±(99.9%) 124.219 B/op [Average]
[info]   (min, avg, max) = (212.286, 228.201, 285.838), stdev = 32.259
[info]   CI (99.9%): [103.982, 352.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson
[info] # Run progress: 69.85% complete, ETA 00:17:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 263753.255 ops/s
[info] # Warmup Iteration   2: 717375.131 ops/s
[info] # Warmup Iteration   3: 722784.283 ops/s
[info] Iteration   1: 719277.395 ops/s
[info]                  ·gc.alloc.rate:                   2083.218 MB/sec
[info]                  ·gc.alloc.rate.norm:              4560.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.228 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1994.223 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4365.198 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 719594.262 ops/s
[info]                  ·gc.alloc.rate:                   2084.569 MB/sec
[info]                  ·gc.alloc.rate.norm:              4560.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.364 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2010.887 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4398.822 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 717274.503 ops/s
[info]                  ·gc.alloc.rate:                   2077.395 MB/sec
[info]                  ·gc.alloc.rate.norm:              4560.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.183 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2359.740 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5179.763 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 716663.246 ops/s
[info]                  ·gc.alloc.rate:                   2075.528 MB/sec
[info]                  ·gc.alloc.rate.norm:              4560.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.229 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031.398 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4463.046 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 717803.411 ops/s
[info]                  ·gc.alloc.rate:                   2079.378 MB/sec
[info]                  ·gc.alloc.rate.norm:              4560.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.183 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035.965 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4464.797 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson":
[info]   718122.563 ±(99.9%) 4889.788 ops/s [Average]
[info]   (min, avg, max) = (716663.246, 718122.563, 719594.262), stdev = 1269.863
[info]   CI (99.9%): [713232.775, 723012.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2080.018 ±(99.9%) 14.712 MB/sec [Average]
[info]   (min, avg, max) = (2075.528, 2080.018, 2084.569), stdev = 3.821
[info]   CI (99.9%): [2065.305, 2094.730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4560.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4560.001, 4560.001, 4560.001), stdev = 0.001
[info]   CI (99.9%): [4560.000, 4560.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.108 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.108, 0.166), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.237 ±(99.9%) 0.287 B/op [Average]
[info]   (min, avg, max) = (0.183, 0.237, 0.364), stdev = 0.075
[info]   CI (99.9%): [≈ 0, 0.524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   2086.443 ±(99.9%) 591.804 MB/sec [Average]
[info]   (min, avg, max) = (1994.223, 2086.443, 2359.740), stdev = 153.690
[info]   CI (99.9%): [1494.638, 2678.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4574.325 ±(99.9%) 1313.557 B/op [Average]
[info]   (min, avg, max) = (4365.198, 4574.325, 5179.763), stdev = 341.127
[info]   CI (99.9%): [3260.768, 5887.882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.200, 9.000), stdev = 1.095
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce
[info] # Run progress: 70.22% complete, ETA 00:17:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 464736.406 ops/s
[info] # Warmup Iteration   2: 794493.381 ops/s
[info] # Warmup Iteration   3: 807892.251 ops/s
[info] Iteration   1: 801764.973 ops/s
[info]                  ·gc.alloc.rate:                   2616.310 MB/sec
[info]                  ·gc.alloc.rate.norm:              5136.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.204 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2328.765 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4571.528 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 814316.281 ops/s
[info]                  ·gc.alloc.rate:                   2656.034 MB/sec
[info]                  ·gc.alloc.rate.norm:              5136.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.402 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2684.616 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5191.270 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 812697.508 ops/s
[info]                  ·gc.alloc.rate:                   2651.213 MB/sec
[info]                  ·gc.alloc.rate.norm:              5136.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.282 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2703.095 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5236.508 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 812891.372 ops/s
[info]                  ·gc.alloc.rate:                   2651.650 MB/sec
[info]                  ·gc.alloc.rate.norm:              5136.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.202 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2713.026 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5254.881 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 810434.111 ops/s
[info]                  ·gc.alloc.rate:                   2643.929 MB/sec
[info]                  ·gc.alloc.rate.norm:              5136.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.162 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2717.776 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5279.452 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce":
[info]   810420.849 ±(99.9%) 19386.130 ops/s [Average]
[info]   (min, avg, max) = (801764.973, 810420.849, 814316.281), stdev = 5034.517
[info]   CI (99.9%): [791034.719, 829806.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate":
[info]   2643.827 ±(99.9%) 61.548 MB/sec [Average]
[info]   (min, avg, max) = (2616.310, 2643.827, 2656.034), stdev = 15.984
[info]   CI (99.9%): [2582.279, 2705.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5136.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5136.001, 5136.001, 5136.001), stdev = 0.001
[info]   CI (99.9%): [5136.000, 5136.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.129 ±(99.9%) 0.191 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.129, 0.208), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.250 ±(99.9%) 0.368 B/op [Average]
[info]   (min, avg, max) = (0.162, 0.250, 0.402), stdev = 0.095
[info]   CI (99.9%): [≈ 0, 0.618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2629.455 ±(99.9%) 649.107 MB/sec [Average]
[info]   (min, avg, max) = (2328.765, 2629.455, 2717.776), stdev = 168.571
[info]   CI (99.9%): [1980.348, 3278.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5106.728 ±(99.9%) 1158.736 B/op [Average]
[info]   (min, avg, max) = (4571.528, 5106.728, 5279.452), stdev = 300.920
[info]   CI (99.9%): [3947.992, 6265.464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.count":
[info]   39.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.800, 8.000), stdev = 0.447
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.400, 8.000), stdev = 0.548
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala
[info] # Run progress: 70.59% complete, ETA 00:17:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 285352.054 ops/s
[info] # Warmup Iteration   2: 977736.227 ops/s
[info] # Warmup Iteration   3: 994699.709 ops/s
[info] Iteration   1: 990499.884 ops/s
[info]                  ·gc.alloc.rate:                   1228.096 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.066 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1309.200 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2080.911 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 988257.265 ops/s
[info]                  ·gc.alloc.rate:                   1225.436 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.199 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1320.046 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2102.705 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 985766.207 ops/s
[info]                  ·gc.alloc.rate:                   1222.279 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.166 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      997.197 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1592.541 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 983798.725 ops/s
[info]                  ·gc.alloc.rate:                   1219.951 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.200 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1336.278 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2138.131 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 991723.621 ops/s
[info]                  ·gc.alloc.rate:                   1229.678 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.099 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.505 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2131.104 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala":
[info]   988009.140 ±(99.9%) 12598.887 ops/s [Average]
[info]   (min, avg, max) = (983798.725, 988009.140, 991723.621), stdev = 3271.891
[info]   CI (99.9%): [975410.253, 1000608.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1225.088 ±(99.9%) 15.465 MB/sec [Average]
[info]   (min, avg, max) = (1219.951, 1225.088, 1229.678), stdev = 4.016
[info]   CI (99.9%): [1209.623, 1240.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1952.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1952.000, 1952.000, 1952.000), stdev = 0.001
[info]   CI (99.9%): [1952.000, 1952.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.092, 0.125), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.146 ±(99.9%) 0.233 B/op [Average]
[info]   (min, avg, max) = (0.066, 0.146, 0.200), stdev = 0.061
[info]   CI (99.9%): [≈ 0, 0.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1261.045 ±(99.9%) 570.205 MB/sec [Average]
[info]   (min, avg, max) = (997.197, 1261.045, 1342.505), stdev = 148.081
[info]   CI (99.9%): [690.840, 1831.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2009.078 ±(99.9%) 900.947 B/op [Average]
[info]   (min, avg, max) = (1592.541, 2009.078, 2138.131), stdev = 233.973
[info]   CI (99.9%): [1108.131, 2910.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 5.000), stdev = 0.894
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala
[info] # Run progress: 70.96% complete, ETA 00:16:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7154203.134 ops/s
[info] # Warmup Iteration   2: 8121586.252 ops/s
[info] # Warmup Iteration   3: 8193489.672 ops/s
[info] Iteration   1: 8425629.840 ops/s
[info]                  ·gc.alloc.rate:                   385.300 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.026 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.693 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 47.781 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 8315174.052 ops/s
[info]                  ·gc.alloc.rate:                   380.247 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.199 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.606 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      587.966 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 111.332 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 8349111.819 ops/s
[info]                  ·gc.alloc.rate:                   381.923 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      332.367 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62.658 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 8429658.817 ops/s
[info]                  ·gc.alloc.rate:                   385.546 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.321 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61.687 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 8373761.163 ops/s
[info]                  ·gc.alloc.rate:                   382.999 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.320 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62.097 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala":
[info]   8378667.138 ±(99.9%) 189960.154 ops/s [Average]
[info]   (min, avg, max) = (8315174.052, 8378667.138, 8429658.817), stdev = 49332.049
[info]   CI (99.9%): [8188706.985, 8568627.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   383.203 ±(99.9%) 8.675 MB/sec [Average]
[info]   (min, avg, max) = (380.247, 383.203, 385.546), stdev = 2.253
[info]   CI (99.9%): [374.528, 391.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   72.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (72.000, 72.000, 72.000), stdev = 0.001
[info]   CI (99.9%): [72.000, 72.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.658 ±(99.9%) 5.471 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.658, 3.199), stdev = 1.421
[info]   CI (99.9%): [≈ 0, 6.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.124 ±(99.9%) 1.036 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.124, 0.606), stdev = 0.269
[info]   CI (99.9%): [≈ 0, 1.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   367.333 ±(99.9%) 491.258 MB/sec [Average]
[info]   (min, avg, max) = (255.693, 367.333, 587.966), stdev = 127.578
[info]   CI (99.9%): [≈ 0, 858.592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   69.111 ±(99.9%) 93.997 B/op [Average]
[info]   (min, avg, max) = (47.781, 69.111, 111.332), stdev = 24.411
[info]   CI (99.9%): [≈ 0, 163.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 4.000), stdev = 1.304
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson
[info] # Run progress: 71.32% complete, ETA 00:16:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 36245.886 ops/s
[info] # Warmup Iteration   2: 316916.704 ops/s
[info] # Warmup Iteration   3: 319124.646 ops/s
[info] Iteration   1: 321084.322 ops/s
[info]                  ·gc.alloc.rate:                   1770.330 MB/sec
[info]                  ·gc.alloc.rate.norm:              8680.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.510 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1979.535 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9705.742 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 322793.269 ops/s
[info]                  ·gc.alloc.rate:                   1779.770 MB/sec
[info]                  ·gc.alloc.rate.norm:              8680.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.609 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1665.963 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8124.959 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 323093.578 ops/s
[info]                  ·gc.alloc.rate:                   1781.205 MB/sec
[info]                  ·gc.alloc.rate.norm:              8680.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.406 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1677.333 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8173.824 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 321509.270 ops/s
[info]                  ·gc.alloc.rate:                   1772.652 MB/sec
[info]                  ·gc.alloc.rate.norm:              8680.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.102 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1685.478 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8253.140 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 323506.130 ops/s
[info]                  ·gc.alloc.rate:                   1783.462 MB/sec
[info]                  ·gc.alloc.rate.norm:              8680.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.627 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9878.071 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson":
[info]   322397.314 ±(99.9%) 4031.060 ops/s [Average]
[info]   (min, avg, max) = (321084.322, 322397.314, 323506.130), stdev = 1046.853
[info]   CI (99.9%): [318366.254, 326428.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1777.484 ±(99.9%) 21.895 MB/sec [Average]
[info]   (min, avg, max) = (1770.330, 1777.484, 1783.462), stdev = 5.686
[info]   CI (99.9%): [1755.589, 1799.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   8680.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8680.001, 8680.001, 8680.001), stdev = 0.001
[info]   CI (99.9%): [8680.001, 8680.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.108 ±(99.9%) 0.262 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.108, 0.208), stdev = 0.068
[info]   CI (99.9%): [≈ 0, 0.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.528 ±(99.9%) 1.275 B/op [Average]
[info]   (min, avg, max) = (0.102, 0.528, 1.013), stdev = 0.331
[info]   CI (99.9%): [≈ 0, 1.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1807.587 ±(99.9%) 696.322 MB/sec [Average]
[info]   (min, avg, max) = (1665.963, 1807.587, 2029.627), stdev = 180.833
[info]   CI (99.9%): [1111.265, 2503.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   8827.147 ±(99.9%) 3403.931 B/op [Average]
[info]   (min, avg, max) = (8124.959, 8827.147, 9878.071), stdev = 883.990
[info]   CI (99.9%): [5423.216, 12231.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce
[info] # Run progress: 71.69% complete, ETA 00:16:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5456.930 ops/s
[info] # Warmup Iteration   2: 7628.843 ops/s
[info] # Warmup Iteration   3: 7824.422 ops/s
[info] Iteration   1: 7740.485 ops/s
[info]                  ·gc.alloc.rate:                   1862.457 MB/sec
[info]                  ·gc.alloc.rate.norm:              378792.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42.325 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1968.506 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 400360.457 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 7810.955 ops/s
[info]                  ·gc.alloc.rate:                   1879.362 MB/sec
[info]                  ·gc.alloc.rate.norm:              378792.052 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16.776 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1989.630 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 401016.906 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 7738.014 ops/s
[info]                  ·gc.alloc.rate:                   1861.795 MB/sec
[info]                  ·gc.alloc.rate.norm:              378792.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.004 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.859 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1671.669 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 340109.825 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 7753.139 ops/s
[info]                  ·gc.alloc.rate:                   1865.780 MB/sec
[info]                  ·gc.alloc.rate.norm:              378792.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33.799 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2017.403 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 409574.651 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 7807.800 ops/s
[info]                  ·gc.alloc.rate:                   1878.872 MB/sec
[info]                  ·gc.alloc.rate.norm:              378792.060 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.025 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.047 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2026.502 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 408555.284 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce":
[info]   7770.079 ±(99.9%) 139.962 ops/s [Average]
[info]   (min, avg, max) = (7738.014, 7770.079, 7810.955), stdev = 36.348
[info]   CI (99.9%): [7630.116, 7910.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   1869.653 ±(99.9%) 33.777 MB/sec [Average]
[info]   (min, avg, max) = (1861.795, 1869.653, 1879.362), stdev = 8.772
[info]   CI (99.9%): [1835.876, 1903.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   378792.054 ±(99.9%) 0.014 B/op [Average]
[info]   (min, avg, max) = (378792.052, 378792.054, 378792.060), stdev = 0.004
[info]   CI (99.9%): [378792.041, 378792.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.097 ±(99.9%) 0.340 MB/sec [Average]
[info]   (min, avg, max) = (0.004, 0.097, 0.208), stdev = 0.088
[info]   CI (99.9%): [≈ 0, 0.437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   19.761 ±(99.9%) 69.121 B/op [Average]
[info]   (min, avg, max) = (0.859, 19.761, 42.325), stdev = 17.951
[info]   CI (99.9%): [≈ 0, 88.883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1934.742 ±(99.9%) 573.129 MB/sec [Average]
[info]   (min, avg, max) = (1671.669, 1934.742, 2026.502), stdev = 148.840
[info]   CI (99.9%): [1361.613, 2507.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   391923.425 ±(99.9%) 112704.679 B/op [Average]
[info]   (min, avg, max) = (340109.825, 391923.425, 409574.651), stdev = 29269.047
[info]   CI (99.9%): [279218.745, 504628.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 7.000), stdev = 0.837
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala
[info] # Run progress: 72.06% complete, ETA 00:16:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7377.372 ops/s
[info] # Warmup Iteration   2: 14468.583 ops/s
[info] # Warmup Iteration   3: 14722.695 ops/s
[info] Iteration   1: 14754.541 ops/s
[info]                  ·gc.alloc.rate:                   373.646 MB/sec
[info]                  ·gc.alloc.rate.norm:              39872.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.440 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.323 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54563.749 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 14750.656 ops/s
[info]                  ·gc.alloc.rate:                   373.689 MB/sec
[info]                  ·gc.alloc.rate.norm:              39872.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.396 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42.201 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      322.409 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34400.514 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 14781.438 ops/s
[info]                  ·gc.alloc.rate:                   374.383 MB/sec
[info]                  ·gc.alloc.rate.norm:              39872.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      322.309 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34326.059 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 14776.033 ops/s
[info]                  ·gc.alloc.rate:                   374.234 MB/sec
[info]                  ·gc.alloc.rate.norm:              39872.030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      324.309 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34552.846 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 14774.711 ops/s
[info]                  ·gc.alloc.rate:                   374.224 MB/sec
[info]                  ·gc.alloc.rate.norm:              39872.035 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      324.322 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34555.184 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala":
[info]   14767.476 ±(99.9%) 53.451 ops/s [Average]
[info]   (min, avg, max) = (14750.656, 14767.476, 14781.438), stdev = 13.881
[info]   CI (99.9%): [14714.025, 14820.927] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   374.035 ±(99.9%) 1.317 MB/sec [Average]
[info]   (min, avg, max) = (373.646, 374.035, 374.383), stdev = 0.342
[info]   CI (99.9%): [372.718, 375.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   39872.030 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (39872.028, 39872.030, 39872.035), stdev = 0.003
[info]   CI (99.9%): [39872.019, 39872.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.667 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.087, 0.396), stdev = 0.173
[info]   CI (99.9%): [≈ 0, 0.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   9.328 ±(99.9%) 71.147 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.328, 42.201), stdev = 18.477
[info]   CI (99.9%): [≈ 0, 80.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   360.934 ±(99.9%) 323.746 MB/sec [Average]
[info]   (min, avg, max) = (322.309, 360.934, 511.323), stdev = 84.076
[info]   CI (99.9%): [37.189, 684.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   38479.670 ±(99.9%) 34624.287 B/op [Average]
[info]   (min, avg, max) = (34326.059, 38479.670, 54563.749), stdev = 8991.817
[info]   CI (99.9%): [3855.383, 73103.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 3.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala
[info] # Run progress: 72.43% complete, ETA 00:16:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18967.861 ops/s
[info] # Warmup Iteration   2: 23435.848 ops/s
[info] # Warmup Iteration   3: 24220.829 ops/s
[info] Iteration   1: 24213.072 ops/s
[info]                  ·gc.alloc.rate:                   413.633 MB/sec
[info]                  ·gc.alloc.rate.norm:              26896.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.011 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.700 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.366 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33251.016 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 24220.560 ops/s
[info]                  ·gc.alloc.rate:                   413.758 MB/sec
[info]                  ·gc.alloc.rate.norm:              26896.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.357 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     218.236 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.609 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21426.011 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 24303.980 ops/s
[info]                  ·gc.alloc.rate:                   415.182 MB/sec
[info]                  ·gc.alloc.rate.norm:              26896.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.587 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21351.095 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 23442.396 ops/s
[info]                  ·gc.alloc.rate:                   400.644 MB/sec
[info]                  ·gc.alloc.rate.norm:              26896.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.397 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.740 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22001.851 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 24337.513 ops/s
[info]                  ·gc.alloc.rate:                   415.947 MB/sec
[info]                  ·gc.alloc.rate.norm:              26896.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.497 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 42385.852 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala":
[info]   24103.504 ±(99.9%) 1437.845 ops/s [Average]
[info]   (min, avg, max) = (23442.396, 24103.504, 24337.513), stdev = 373.404
[info]   CI (99.9%): [22665.660, 25541.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   411.833 ±(99.9%) 24.375 MB/sec [Average]
[info]   (min, avg, max) = (400.644, 411.833, 415.947), stdev = 6.330
[info]   CI (99.9%): [387.458, 436.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   26896.018 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (26896.017, 26896.018, 26896.021), stdev = 0.002
[info]   CI (99.9%): [26896.011, 26896.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.678 ±(99.9%) 5.768 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.678, 3.357), stdev = 1.498
[info]   CI (99.9%): [≈ 0, 6.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   44.067 ±(99.9%) 374.919 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 44.067, 218.236), stdev = 97.365
[info]   CI (99.9%): [≈ 0, 418.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   430.760 ±(99.9%) 571.417 MB/sec [Average]
[info]   (min, avg, max) = (327.740, 430.760, 655.497), stdev = 148.395
[info]   CI (99.9%): [≈ 0, 1002.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   28083.165 ±(99.9%) 36423.427 B/op [Average]
[info]   (min, avg, max) = (21351.095, 28083.165, 42385.852), stdev = 9459.048
[info]   CI (99.9%): [≈ 0, 64506.592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.600, 5.000), stdev = 1.817
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson
[info] # Run progress: 72.79% complete, ETA 00:15:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 921.472 ops/s
[info] # Warmup Iteration   2: 2356.522 ops/s
[info] # Warmup Iteration   3: 2321.663 ops/s
[info] Iteration   1: 2375.039 ops/s
[info]                  ·gc.alloc.rate:                   1482.750 MB/sec
[info]                  ·gc.alloc.rate.norm:              982982.226 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27.582 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1316.746 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 872930.694 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 2394.158 ops/s
[info]                  ·gc.alloc.rate:                   1495.062 MB/sec
[info]                  ·gc.alloc.rate.norm:              982976.184 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27.364 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1658.430 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1090387.694 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 2392.355 ops/s
[info]                  ·gc.alloc.rate:                   1493.736 MB/sec
[info]                  ·gc.alloc.rate.norm:              982976.170 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27.387 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1336.397 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 879436.704 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 2379.047 ops/s
[info]                  ·gc.alloc.rate:                   1485.552 MB/sec
[info]                  ·gc.alloc.rate.norm:              982976.185 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.327 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 888205.553 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 2376.793 ops/s
[info]                  ·gc.alloc.rate:                   1484.185 MB/sec
[info]                  ·gc.alloc.rate.norm:              982976.172 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13.780 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1685.099 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1116041.151 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson":
[info]   2383.479 ±(99.9%) 34.890 ops/s [Average]
[info]   (min, avg, max) = (2375.039, 2383.479, 2394.158), stdev = 9.061
[info]   CI (99.9%): [2348.588, 2418.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1488.257 ±(99.9%) 21.999 MB/sec [Average]
[info]   (min, avg, max) = (1482.750, 1488.257, 1495.062), stdev = 5.713
[info]   CI (99.9%): [1466.258, 1510.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   982977.387 ±(99.9%) 10.415 B/op [Average]
[info]   (min, avg, max) = (982976.170, 982977.387, 982982.226), stdev = 2.705
[info]   CI (99.9%): [982966.972, 982987.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   19.222 ±(99.9%) 47.237 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 19.222, 27.582), stdev = 12.267
[info]   CI (99.9%): [≈ 0, 66.460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1467.800 ±(99.9%) 718.808 MB/sec [Average]
[info]   (min, avg, max) = (1316.746, 1467.800, 1685.099), stdev = 186.672
[info]   CI (99.9%): [748.991, 2186.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   969400.359 ±(99.9%) 472131.616 B/op [Average]
[info]   (min, avg, max) = (872930.694, 969400.359, 1116041.151), stdev = 122611.081
[info]   CI (99.9%): [497268.743, 1441531.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 7.000), stdev = 1.140
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce
[info] # Run progress: 73.16% complete, ETA 00:15:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5668.122 ops/s
[info] # Warmup Iteration   2: 7381.740 ops/s
[info] # Warmup Iteration   3: 7613.674 ops/s
[info] Iteration   1: 7649.696 ops/s
[info]                  ·gc.alloc.rate:                   1645.183 MB/sec
[info]                  ·gc.alloc.rate.norm:              338568.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17.129 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1636.390 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 336758.432 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 7688.879 ops/s
[info]                  ·gc.alloc.rate:                   1654.137 MB/sec
[info]                  ·gc.alloc.rate.norm:              338568.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21.303 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1651.940 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 338118.383 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 7665.399 ops/s
[info]                  ·gc.alloc.rate:                   1648.758 MB/sec
[info]                  ·gc.alloc.rate.norm:              338568.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25.640 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1664.159 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 341730.754 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 7652.403 ops/s
[info]                  ·gc.alloc.rate:                   1646.527 MB/sec
[info]                  ·gc.alloc.rate.norm:              338568.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.842 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1676.388 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 344708.230 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 7566.936 ops/s
[info]                  ·gc.alloc.rate:                   1627.875 MB/sec
[info]                  ·gc.alloc.rate.norm:              338568.058 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.988 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.845 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 280118.995 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce":
[info]   7644.663 ±(99.9%) 177.629 ops/s [Average]
[info]   (min, avg, max) = (7566.936, 7644.663, 7688.879), stdev = 46.130
[info]   CI (99.9%): [7467.034, 7822.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate":
[info]   1644.496 ±(99.9%) 38.119 MB/sec [Average]
[info]   (min, avg, max) = (1627.875, 1644.496, 1654.137), stdev = 9.899
[info]   CI (99.9%): [1606.377, 1682.615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   338568.054 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (338568.053, 338568.054, 338568.058), stdev = 0.002
[info]   CI (99.9%): [338568.046, 338568.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.125), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   17.980 ±(99.9%) 21.245 B/op [Average]
[info]   (min, avg, max) = (12.842, 17.980, 25.640), stdev = 5.517
[info]   CI (99.9%): [≈ 0, 39.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1595.144 ±(99.9%) 537.518 MB/sec [Average]
[info]   (min, avg, max) = (1346.845, 1595.144, 1676.388), stdev = 139.592
[info]   CI (99.9%): [1057.627, 2132.662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   328286.959 ±(99.9%) 104376.058 B/op [Average]
[info]   (min, avg, max) = (280118.995, 328286.959, 344708.230), stdev = 27106.131
[info]   CI (99.9%): [223910.901, 432663.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala
[info] # Run progress: 73.53% complete, ETA 00:15:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_11ae7560/target/5e31e36e/jackson-module-afterburner-2.9.4.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 23540.501 ops/s
[info] # Warmup Iteration   2: 43186.826 ops/s
[info] # Warmup Iteration   3: 43271.151 ops/s
[info] Iteration   1: 43288.691 ops/s
[info]                  ·gc.alloc.rate:                   627.015 MB/sec
[info]                  ·gc.alloc.rate.norm:              22807.934 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.270 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      646.447 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23514.799 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 42368.418 ops/s
[info]                  ·gc.alloc.rate:                   613.906 MB/sec
[info]                  ·gc.alloc.rate.norm:              22807.868 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      324.367 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12050.891 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 43289.826 ops/s
[info]                  ·gc.alloc.rate:                   627.136 MB/sec
[info]                  ·gc.alloc.rate.norm:              22807.835 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.784 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      651.902 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23708.536 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 43360.154 ops/s
[info]                  ·gc.alloc.rate:                   628.127 MB/sec
[info]                  ·gc.alloc.rate.norm:              22807.778 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.756 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.543 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23766.981 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 43342.172 ops/s
[info]                  ·gc.alloc.rate:                   627.939 MB/sec
[info]                  ·gc.alloc.rate.norm:              22807.923 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.278 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23873.602 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala":
[info]   43129.852 ±(99.9%) 1643.555 ops/s [Average]
[info]   (min, avg, max) = (42368.418, 43129.852, 43360.154), stdev = 426.826
[info]   CI (99.9%): [41486.297, 44773.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   624.824 ±(99.9%) 23.576 MB/sec [Average]
[info]   (min, avg, max) = (613.906, 624.824, 628.127), stdev = 6.123
[info]   CI (99.9%): [601.248, 648.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   22807.868 ±(99.9%) 0.248 B/op [Average]
[info]   (min, avg, max) = (22807.778, 22807.868, 22807.934), stdev = 0.064
[info]   CI (99.9%): [22807.620, 22808.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.104), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.362 ±(99.9%) 6.318 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.362, 3.784), stdev = 1.641
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   586.908 ±(99.9%) 565.348 MB/sec [Average]
[info]   (min, avg, max) = (324.367, 586.908, 657.278), stdev = 146.819
[info]   CI (99.9%): [21.559, 1152.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   21382.962 ±(99.9%) 20094.257 B/op [Average]
[info]   (min, avg, max) = (12050.891, 21382.962, 23873.602), stdev = 5218.415
[info]   CI (99.9%): [1288.705, 41477.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala
[info] # Run progress: 73.90% complete, ETA 00:15:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 61849.329 ops/s
[info] # Warmup Iteration   2: 73082.148 ops/s
[info] # Warmup Iteration   3: 73423.192 ops/s
[info] Iteration   1: 73128.874 ops/s
[info]                  ·gc.alloc.rate:                   551.214 MB/sec
[info]                  ·gc.alloc.rate.norm:              11864.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.774 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81.224 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.356 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14105.505 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 73454.420 ops/s
[info]                  ·gc.alloc.rate:                   553.512 MB/sec
[info]                  ·gc.alloc.rate.norm:              11864.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.892 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      326.291 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6993.742 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 73436.559 ops/s
[info]                  ·gc.alloc.rate:                   553.433 MB/sec
[info]                  ·gc.alloc.rate.norm:              11864.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.231 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      651.956 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13976.064 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 72828.762 ops/s
[info]                  ·gc.alloc.rate:                   548.879 MB/sec
[info]                  ·gc.alloc.rate.norm:              11864.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.900 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      651.674 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14085.908 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 73344.673 ops/s
[info]                  ·gc.alloc.rate:                   552.762 MB/sec
[info]                  ·gc.alloc.rate.norm:              11864.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      325.978 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6996.510 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala":
[info]   73238.658 ±(99.9%) 1013.357 ops/s [Average]
[info]   (min, avg, max) = (72828.762, 73238.658, 73454.420), stdev = 263.166
[info]   CI (99.9%): [72225.301, 74252.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   551.960 ±(99.9%) 7.523 MB/sec [Average]
[info]   (min, avg, max) = (548.879, 551.960, 553.512), stdev = 1.954
[info]   CI (99.9%): [544.437, 559.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   11864.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11864.006, 11864.006, 11864.006), stdev = 0.001
[info]   CI (99.9%): [11864.005, 11864.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.792 ±(99.9%) 6.420 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.792, 3.774), stdev = 1.667
[info]   CI (99.9%): [≈ 0, 7.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   17.049 ±(99.9%) 138.175 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17.049, 81.224), stdev = 35.884
[info]   CI (99.9%): [≈ 0, 155.224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   522.251 ±(99.9%) 689.400 MB/sec [Average]
[info]   (min, avg, max) = (325.978, 522.251, 655.356), stdev = 179.035
[info]   CI (99.9%): [≈ 0, 1211.651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   11231.546 ±(99.9%) 14892.825 B/op [Average]
[info]   (min, avg, max) = (6993.742, 11231.546, 14105.505), stdev = 3867.619
[info]   CI (99.9%): [≈ 0, 26124.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 74.26% complete, ETA 00:14:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 62715.871 ops/s
[info] # Warmup Iteration   2: 74472.825 ops/s
[info] # Warmup Iteration   3: 74755.154 ops/s
[info] Iteration   1: 73163.147 ops/s
[info]                  ·gc.alloc.rate:      1.116 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 74512.234 ops/s
[info]                  ·gc.alloc.rate:      1.136 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 74923.612 ops/s
[info]                  ·gc.alloc.rate:      1.143 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 74658.917 ops/s
[info]                  ·gc.alloc.rate:      1.139 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 74771.463 ops/s
[info]                  ·gc.alloc.rate:      1.140 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   74405.875 ±(99.9%) 2737.360 ops/s [Average]
[info]   (min, avg, max) = (73163.147, 74405.875, 74923.612), stdev = 710.884
[info]   CI (99.9%): [71668.515, 77143.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1.135 ±(99.9%) 0.042 MB/sec [Average]
[info]   (min, avg, max) = (1.116, 1.135, 1.143), stdev = 0.011
[info]   CI (99.9%): [1.093, 1.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   24.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (24.005, 24.005, 24.006), stdev = 0.001
[info]   CI (99.9%): [24.005, 24.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson
[info] # Run progress: 74.63% complete, ETA 00:14:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2451.544 ops/s
[info] # Warmup Iteration   2: 5487.825 ops/s
[info] # Warmup Iteration   3: 5490.165 ops/s
[info] Iteration   1: 5544.833 ops/s
[info]                  ·gc.alloc.rate:                   1641.470 MB/sec
[info]                  ·gc.alloc.rate.norm:              466047.655 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17.722 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1649.522 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 468333.701 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 5583.033 ops/s
[info]                  ·gc.alloc.rate:                   1652.873 MB/sec
[info]                  ·gc.alloc.rate.norm:              466047.597 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29.341 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1663.295 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 468986.132 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 5518.451 ops/s
[info]                  ·gc.alloc.rate:                   1633.795 MB/sec
[info]                  ·gc.alloc.rate.norm:              466047.694 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1675.145 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 477842.922 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 5512.056 ops/s
[info]                  ·gc.alloc.rate:                   1631.861 MB/sec
[info]                  ·gc.alloc.rate.norm:              466047.846 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1682.972 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 480644.875 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 5572.454 ops/s
[info]                  ·gc.alloc.rate:                   1651.225 MB/sec
[info]                  ·gc.alloc.rate.norm:              466047.888 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.738 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1688.218 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 476488.861 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson":
[info]   5546.165 ±(99.9%) 121.519 ops/s [Average]
[info]   (min, avg, max) = (5512.056, 5546.165, 5583.033), stdev = 31.558
[info]   CI (99.9%): [5424.646, 5667.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1642.245 ±(99.9%) 37.205 MB/sec [Average]
[info]   (min, avg, max) = (1631.861, 1642.245, 1652.873), stdev = 9.662
[info]   CI (99.9%): [1605.040, 1679.450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   466047.736 ±(99.9%) 0.482 B/op [Average]
[info]   (min, avg, max) = (466047.597, 466047.736, 466047.888), stdev = 0.125
[info]   CI (99.9%): [466047.254, 466048.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.170 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.104), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   11.760 ±(99.9%) 47.988 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.760, 29.341), stdev = 12.462
[info]   CI (99.9%): [≈ 0, 59.748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1671.830 ±(99.9%) 60.094 MB/sec [Average]
[info]   (min, avg, max) = (1649.522, 1671.830, 1688.218), stdev = 15.606
[info]   CI (99.9%): [1611.737, 1731.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   474459.298 ±(99.9%) 21205.469 B/op [Average]
[info]   (min, avg, max) = (468333.701, 474459.298, 480644.875), stdev = 5506.993
[info]   CI (99.9%): [453253.829, 495664.767] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala
[info] # Run progress: 75.00% complete, ETA 00:14:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4630466.985 ops/s
[info] # Warmup Iteration   2: 5327071.478 ops/s
[info] # Warmup Iteration   3: 5462132.946 ops/s
[info] Iteration   1: 5421261.151 ops/s
[info]                  ·gc.alloc.rate:                   1625.341 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1647.148 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 478.333 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 5453734.654 ops/s
[info]                  ·gc.alloc.rate:                   1634.946 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.048 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1659.394 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 479.058 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 5458996.020 ops/s
[info]                  ·gc.alloc.rate:                   1636.497 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1669.944 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 481.647 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 5449386.344 ops/s
[info]                  ·gc.alloc.rate:                   1633.908 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1679.959 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 485.303 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 5457587.185 ops/s
[info]                  ·gc.alloc.rate:                   1636.321 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1686.494 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 486.473 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala":
[info]   5448193.071 ±(99.9%) 59728.888 ops/s [Average]
[info]   (min, avg, max) = (5421261.151, 5448193.071, 5458996.020), stdev = 15511.403
[info]   CI (99.9%): [5388464.182, 5507921.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1633.402 ±(99.9%) 17.825 MB/sec [Average]
[info]   (min, avg, max) = (1625.341, 1633.402, 1636.497), stdev = 4.629
[info]   CI (99.9%): [1615.577, 1651.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   472.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (472.000, 472.000, 472.000), stdev = 0.001
[info]   CI (99.9%): [472.000, 472.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.108 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.108, 0.166), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.031 ±(99.9%) 0.041 B/op [Average]
[info]   (min, avg, max) = (0.024, 0.031, 0.048), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1668.588 ±(99.9%) 60.762 MB/sec [Average]
[info]   (min, avg, max) = (1647.148, 1668.588, 1686.494), stdev = 15.780
[info]   CI (99.9%): [1607.826, 1729.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   482.163 ±(99.9%) 14.018 B/op [Average]
[info]   (min, avg, max) = (478.333, 482.163, 486.473), stdev = 3.640
[info]   CI (99.9%): [468.145, 496.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson
[info] # Run progress: 75.37% complete, ETA 00:14:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 123358.972 ops/s
[info] # Warmup Iteration   2: 357922.064 ops/s
[info] # Warmup Iteration   3: 363444.808 ops/s
[info] Iteration   1: 360868.138 ops/s
[info]                  ·gc.alloc.rate:                   1945.312 MB/sec
[info]                  ·gc.alloc.rate.norm:              8488.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.363 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1990.732 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8686.181 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 365642.014 ops/s
[info]                  ·gc.alloc.rate:                   1971.434 MB/sec
[info]                  ·gc.alloc.rate.norm:              8488.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.448 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1673.576 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7205.575 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 363479.742 ops/s
[info]                  ·gc.alloc.rate:                   1959.726 MB/sec
[info]                  ·gc.alloc.rate.norm:              8488.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.451 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2019.692 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8747.723 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 361964.707 ops/s
[info]                  ·gc.alloc.rate:                   1952.104 MB/sec
[info]                  ·gc.alloc.rate.norm:              8488.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.453 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.280 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8823.574 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 362371.497 ops/s
[info]                  ·gc.alloc.rate:                   1953.912 MB/sec
[info]                  ·gc.alloc.rate.norm:              8488.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.542 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033.874 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8835.364 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson":
[info]   362865.220 ±(99.9%) 6976.801 ops/s [Average]
[info]   (min, avg, max) = (360868.138, 362865.220, 365642.014), stdev = 1811.853
[info]   CI (99.9%): [355888.419, 369842.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1956.498 ±(99.9%) 37.759 MB/sec [Average]
[info]   (min, avg, max) = (1945.312, 1956.498, 1971.434), stdev = 9.806
[info]   CI (99.9%): [1918.739, 1994.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   8488.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8488.001, 8488.001, 8488.001), stdev = 0.001
[info]   CI (99.9%): [8488.001, 8488.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.104 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.104, 0.125), stdev = 0.015
[info]   CI (99.9%): [0.047, 0.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.451 ±(99.9%) 0.244 B/op [Average]
[info]   (min, avg, max) = (0.363, 0.451, 0.542), stdev = 0.063
[info]   CI (99.9%): [0.207, 0.696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1949.431 ±(99.9%) 597.300 MB/sec [Average]
[info]   (min, avg, max) = (1673.576, 1949.431, 2033.874), stdev = 155.117
[info]   CI (99.9%): [1352.131, 2546.730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   8459.683 ±(99.9%) 2709.585 B/op [Average]
[info]   (min, avg, max) = (7205.575, 8459.683, 8835.364), stdev = 703.671
[info]   CI (99.9%): [5750.099, 11169.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.800, 8.000), stdev = 1.304
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala
[info] # Run progress: 75.74% complete, ETA 00:14:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2708735.060 ops/s
[info] # Warmup Iteration   2: 3319970.986 ops/s
[info] # Warmup Iteration   3: 3355982.573 ops/s
[info] Iteration   1: 3386439.830 ops/s
[info]                  ·gc.alloc.rate:                   550.692 MB/sec
[info]                  ·gc.alloc.rate.norm:              256.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.751 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.744 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.245 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 152.591 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 3381168.186 ops/s
[info]                  ·gc.alloc.rate:                   549.833 MB/sec
[info]                  ·gc.alloc.rate.norm:              256.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.658 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 304.806 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 3369698.608 ops/s
[info]                  ·gc.alloc.rate:                   547.931 MB/sec
[info]                  ·gc.alloc.rate.norm:              256.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.029 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.573 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 304.890 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 3372808.602 ops/s
[info]                  ·gc.alloc.rate:                   548.499 MB/sec
[info]                  ·gc.alloc.rate.norm:              256.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      326.310 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 152.298 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 3367396.844 ops/s
[info]                  ·gc.alloc.rate:                   547.597 MB/sec
[info]                  ·gc.alloc.rate.norm:              256.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.623 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 305.099 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala":
[info]   3375502.414 ±(99.9%) 30947.363 ops/s [Average]
[info]   (min, avg, max) = (3367396.844, 3375502.414, 3386439.830), stdev = 8036.932
[info]   CI (99.9%): [3344555.051, 3406449.777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   548.910 ±(99.9%) 5.049 MB/sec [Average]
[info]   (min, avg, max) = (547.597, 548.910, 550.692), stdev = 1.311
[info]   CI (99.9%): [543.861, 553.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   256.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (256.000, 256.000, 256.000), stdev = 0.001
[info]   CI (99.9%): [256.000, 256.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.788 ±(99.9%) 6.381 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.788, 3.751), stdev = 1.657
[info]   CI (99.9%): [≈ 0, 7.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.366 ±(99.9%) 2.966 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.366, 1.744), stdev = 0.770
[info]   CI (99.9%): [≈ 0, 3.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   522.882 ±(99.9%) 687.590 MB/sec [Average]
[info]   (min, avg, max) = (326.310, 522.882, 654.658), stdev = 178.565
[info]   CI (99.9%): [≈ 0, 1210.472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   243.937 ±(99.9%) 321.609 B/op [Average]
[info]   (min, avg, max) = (152.298, 243.937, 305.099), stdev = 83.521
[info]   CI (99.9%): [≈ 0, 565.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson
[info] # Run progress: 76.10% complete, ETA 00:13:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 84468.496 ops/s
[info] # Warmup Iteration   2: 338364.826 ops/s
[info] # Warmup Iteration   3: 342884.803 ops/s
[info] Iteration   1: 343913.492 ops/s
[info]                  ·gc.alloc.rate:                   1336.738 MB/sec
[info]                  ·gc.alloc.rate.norm:              6120.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.286 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1312.985 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6011.250 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 346618.581 ops/s
[info]                  ·gc.alloc.rate:                   1347.281 MB/sec
[info]                  ·gc.alloc.rate.norm:              6120.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.662 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1322.417 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6007.055 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 344299.307 ops/s
[info]                  ·gc.alloc.rate:                   1338.420 MB/sec
[info]                  ·gc.alloc.rate.norm:              6120.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.190 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1331.785 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6089.663 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 345268.459 ops/s
[info]                  ·gc.alloc.rate:                   1342.305 MB/sec
[info]                  ·gc.alloc.rate.norm:              6120.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.285 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.888 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6104.422 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 345107.506 ops/s
[info]                  ·gc.alloc.rate:                   1341.560 MB/sec
[info]                  ·gc.alloc.rate.norm:              6120.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.475 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.098 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6136.145 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson":
[info]   345041.469 ±(99.9%) 4023.096 ops/s [Average]
[info]   (min, avg, max) = (343913.492, 345041.469, 346618.581), stdev = 1044.785
[info]   CI (99.9%): [341018.373, 349064.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1341.261 ±(99.9%) 15.635 MB/sec [Average]
[info]   (min, avg, max) = (1336.738, 1341.261, 1347.281), stdev = 4.060
[info]   CI (99.9%): [1325.626, 1356.895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   6120.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6120.001, 6120.001, 6120.001), stdev = 0.001
[info]   CI (99.9%): [6120.001, 6120.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.160 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.146), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.379 ±(99.9%) 0.726 B/op [Average]
[info]   (min, avg, max) = (0.190, 0.379, 0.662), stdev = 0.189
[info]   CI (99.9%): [≈ 0, 1.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1330.235 ±(99.9%) 49.346 MB/sec [Average]
[info]   (min, avg, max) = (1312.985, 1330.235, 1345.098), stdev = 12.815
[info]   CI (99.9%): [1280.889, 1379.580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   6069.707 ±(99.9%) 222.537 B/op [Average]
[info]   (min, avg, max) = (6007.055, 6069.707, 6136.145), stdev = 57.792
[info]   CI (99.9%): [5847.170, 6292.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce
[info] # Run progress: 76.47% complete, ETA 00:13:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 429145.352 ops/s
[info] # Warmup Iteration   2: 606947.881 ops/s
[info] # Warmup Iteration   3: 617553.394 ops/s
[info] Iteration   1: 619790.389 ops/s
[info]                  ·gc.alloc.rate:                   2255.386 MB/sec
[info]                  ·gc.alloc.rate.norm:              5728.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.317 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2315.399 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5880.414 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 622374.012 ops/s
[info]                  ·gc.alloc.rate:                   2264.571 MB/sec
[info]                  ·gc.alloc.rate.norm:              5728.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.368 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2340.128 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5919.114 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 621949.560 ops/s
[info]                  ·gc.alloc.rate:                   2262.797 MB/sec
[info]                  ·gc.alloc.rate.norm:              5728.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.316 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2357.251 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5967.099 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 614534.269 ops/s
[info]                  ·gc.alloc.rate:                   2236.291 MB/sec
[info]                  ·gc.alloc.rate.norm:              5728.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.213 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.442 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5198.183 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 620026.770 ops/s
[info]                  ·gc.alloc.rate:                   2256.045 MB/sec
[info]                  ·gc.alloc.rate.norm:              5728.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.159 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2374.930 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6029.846 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce":
[info]   619735.000 ±(99.9%) 12024.320 ops/s [Average]
[info]   (min, avg, max) = (614534.269, 619735.000, 622374.012), stdev = 3122.678
[info]   CI (99.9%): [607710.680, 631759.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.alloc.rate":
[info]   2255.018 ±(99.9%) 43.210 MB/sec [Average]
[info]   (min, avg, max) = (2236.291, 2255.018, 2264.571), stdev = 11.221
[info]   CI (99.9%): [2211.808, 2298.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5728.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5728.001, 5728.001, 5728.001), stdev = 0.001
[info]   CI (99.9%): [5728.001, 5728.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.108 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.108, 0.146), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.275 ±(99.9%) 0.331 B/op [Average]
[info]   (min, avg, max) = (0.159, 0.275, 0.368), stdev = 0.086
[info]   CI (99.9%): [≈ 0, 0.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2283.430 ±(99.9%) 553.235 MB/sec [Average]
[info]   (min, avg, max) = (2029.442, 2283.430, 2374.930), stdev = 143.673
[info]   CI (99.9%): [1730.195, 2836.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5798.931 ±(99.9%) 1310.894 B/op [Average]
[info]   (min, avg, max) = (5198.183, 5798.931, 6029.846), stdev = 340.435
[info]   CI (99.9%): [4488.037, 7109.825] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.count":
[info]   34.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 7.000), stdev = 0.837
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala
[info] # Run progress: 76.84% complete, ETA 00:13:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 264707.213 ops/s
[info] # Warmup Iteration   2: 620985.041 ops/s
[info] # Warmup Iteration   3: 635631.909 ops/s
[info] Iteration   1: 638734.988 ops/s
[info]                  ·gc.alloc.rate:                   743.220 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.051 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      647.547 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1596.172 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 630740.090 ops/s
[info]                  ·gc.alloc.rate:                   733.928 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.156 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      976.542 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2437.602 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 626811.845 ops/s
[info]                  ·gc.alloc.rate:                   729.398 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.261 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.584 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1644.094 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 630408.522 ops/s
[info]                  ·gc.alloc.rate:                   733.755 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.399 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1641.360 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 629847.908 ops/s
[info]                  ·gc.alloc.rate:                   732.939 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.104 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      659.908 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1649.458 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala":
[info]   631308.671 ±(99.9%) 17073.493 ops/s [Average]
[info]   (min, avg, max) = (626811.845, 631308.671, 638734.988), stdev = 4433.932
[info]   CI (99.9%): [614235.177, 648382.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   734.648 ±(99.9%) 19.755 MB/sec [Average]
[info]   (min, avg, max) = (729.398, 734.648, 743.220), stdev = 5.130
[info]   CI (99.9%): [714.893, 754.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1832.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1832.001, 1832.001, 1832.001), stdev = 0.001
[info]   CI (99.9%): [1832.001, 1832.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.104), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.114 ±(99.9%) 0.387 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.114, 0.261), stdev = 0.101
[info]   CI (99.9%): [≈ 0, 0.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   719.196 ±(99.9%) 554.242 MB/sec [Average]
[info]   (min, avg, max) = (647.547, 719.196, 976.542), stdev = 143.935
[info]   CI (99.9%): [164.954, 1273.438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1793.737 ±(99.9%) 1388.399 B/op [Average]
[info]   (min, avg, max) = (1596.172, 1793.737, 2437.602), stdev = 360.563
[info]   CI (99.9%): [405.339, 3182.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 4.000), stdev = 0.837
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala
[info] # Run progress: 77.21% complete, ETA 00:13:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3333439.637 ops/s
[info] # Warmup Iteration   2: 3813029.731 ops/s
[info] # Warmup Iteration   3: 3923213.391 ops/s
[info] Iteration   1: 3886772.503 ops/s
[info]                  ·gc.alloc.rate:                   1540.524 MB/sec
[info]                  ·gc.alloc.rate.norm:              624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.051 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1645.740 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 666.618 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 3873430.557 ops/s
[info]                  ·gc.alloc.rate:                   1535.409 MB/sec
[info]                  ·gc.alloc.rate.norm:              624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.051 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1656.683 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 673.286 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 3915554.020 ops/s
[info]                  ·gc.alloc.rate:                   1551.893 MB/sec
[info]                  ·gc.alloc.rate.norm:              624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1333.711 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 536.272 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 3859014.382 ops/s
[info]                  ·gc.alloc.rate:                   1529.648 MB/sec
[info]                  ·gc.alloc.rate.norm:              624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.051 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1676.817 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 684.036 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 3914181.399 ops/s
[info]                  ·gc.alloc.rate:                   1551.480 MB/sec
[info]                  ·gc.alloc.rate.norm:              624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.059 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1684.126 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 677.350 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala":
[info]   3889790.572 ±(99.9%) 95930.515 ops/s [Average]
[info]   (min, avg, max) = (3859014.382, 3889790.572, 3915554.020), stdev = 24912.850
[info]   CI (99.9%): [3793860.058, 3985721.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1541.791 ±(99.9%) 37.812 MB/sec [Average]
[info]   (min, avg, max) = (1529.648, 1541.791, 1551.893), stdev = 9.820
[info]   CI (99.9%): [1503.979, 1579.603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   624.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (624.000, 624.000, 624.000), stdev = 0.001
[info]   CI (99.9%): [624.000, 624.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.121 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.121, 0.146), stdev = 0.023
[info]   CI (99.9%): [0.033, 0.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.049 ±(99.9%) 0.036 B/op [Average]
[info]   (min, avg, max) = (0.033, 0.049, 0.059), stdev = 0.009
[info]   CI (99.9%): [0.013, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1599.415 ±(99.9%) 574.995 MB/sec [Average]
[info]   (min, avg, max) = (1333.711, 1599.415, 1684.126), stdev = 149.324
[info]   CI (99.9%): [1024.421, 2174.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   647.512 ±(99.9%) 240.689 B/op [Average]
[info]   (min, avg, max) = (536.272, 647.512, 684.036), stdev = 62.506
[info]   CI (99.9%): [406.823, 888.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson
[info] # Run progress: 77.57% complete, ETA 00:13:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 55028.457 ops/s
[info] # Warmup Iteration   2: 225828.353 ops/s
[info] # Warmup Iteration   3: 228533.962 ops/s
[info] Iteration   1: 229631.195 ops/s
[info]                  ·gc.alloc.rate:                   1597.252 MB/sec
[info]                  ·gc.alloc.rate.norm:              10952.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.428 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1316.934 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9029.924 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 227904.146 ops/s
[info]                  ·gc.alloc.rate:                   1585.556 MB/sec
[info]                  ·gc.alloc.rate.norm:              10952.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.719 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1660.645 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11470.669 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 229378.019 ops/s
[info]                  ·gc.alloc.rate:                   1596.173 MB/sec
[info]                  ·gc.alloc.rate.norm:              10952.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.428 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1673.253 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11480.876 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 227781.066 ops/s
[info]                  ·gc.alloc.rate:                   1584.568 MB/sec
[info]                  ·gc.alloc.rate.norm:              10952.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.431 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1682.061 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11625.838 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 227932.938 ops/s
[info]                  ·gc.alloc.rate:                   1585.726 MB/sec
[info]                  ·gc.alloc.rate.norm:              10952.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.575 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.511 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9327.462 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson":
[info]   228525.473 ±(99.9%) 3465.976 ops/s [Average]
[info]   (min, avg, max) = (227781.066, 228525.473, 229631.195), stdev = 900.103
[info]   CI (99.9%): [225059.497, 231991.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1589.855 ±(99.9%) 24.209 MB/sec [Average]
[info]   (min, avg, max) = (1584.568, 1589.855, 1597.252), stdev = 6.287
[info]   CI (99.9%): [1565.646, 1614.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   10952.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10952.002, 10952.002, 10952.002), stdev = 0.001
[info]   CI (99.9%): [10952.002, 10952.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.075, 0.104), stdev = 0.019
[info]   CI (99.9%): [0.003, 0.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.516 ±(99.9%) 0.499 B/op [Average]
[info]   (min, avg, max) = (0.428, 0.516, 0.719), stdev = 0.130
[info]   CI (99.9%): [0.017, 1.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1536.681 ±(99.9%) 715.490 MB/sec [Average]
[info]   (min, avg, max) = (1316.934, 1536.681, 1682.061), stdev = 185.811
[info]   CI (99.9%): [821.190, 2252.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   10586.954 ±(99.9%) 4972.398 B/op [Average]
[info]   (min, avg, max) = (9029.924, 10586.954, 11625.838), stdev = 1291.316
[info]   CI (99.9%): [5614.555, 15559.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce
[info] # Run progress: 77.94% complete, ETA 00:12:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 574874.215 ops/s
[info] # Warmup Iteration   2: 844948.429 ops/s
[info] # Warmup Iteration   3: 867241.842 ops/s
[info] Iteration   1: 870948.951 ops/s
[info]                  ·gc.alloc.rate:                   2000.493 MB/sec
[info]                  ·gc.alloc.rate.norm:              3616.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.113 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1975.681 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3571.150 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 857566.962 ops/s
[info]                  ·gc.alloc.rate:                   1969.720 MB/sec
[info]                  ·gc.alloc.rate.norm:              3616.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.267 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1995.509 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3663.345 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 859856.337 ops/s
[info]                  ·gc.alloc.rate:                   1974.904 MB/sec
[info]                  ·gc.alloc.rate.norm:              3616.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.114 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2011.292 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3682.626 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 871594.328 ops/s
[info]                  ·gc.alloc.rate:                   2002.097 MB/sec
[info]                  ·gc.alloc.rate.norm:              3616.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.188 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2023.445 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3654.558 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 863104.263 ops/s
[info]                  ·gc.alloc.rate:                   1982.431 MB/sec
[info]                  ·gc.alloc.rate.norm:              3616.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.228 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030.638 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3703.930 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce":
[info]   864614.168 ±(99.9%) 24613.417 ops/s [Average]
[info]   (min, avg, max) = (857566.962, 864614.168, 871594.328), stdev = 6392.026
[info]   CI (99.9%): [840000.751, 889227.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1985.929 ±(99.9%) 56.790 MB/sec [Average]
[info]   (min, avg, max) = (1969.720, 1985.929, 2002.097), stdev = 14.748
[info]   CI (99.9%): [1929.139, 2042.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   3616.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3616.000, 3616.000, 3616.001), stdev = 0.001
[info]   CI (99.9%): [3616.000, 3616.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.100 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.100, 0.146), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.182 ±(99.9%) 0.264 B/op [Average]
[info]   (min, avg, max) = (0.113, 0.182, 0.267), stdev = 0.069
[info]   CI (99.9%): [≈ 0, 0.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   2007.313 ±(99.9%) 85.239 MB/sec [Average]
[info]   (min, avg, max) = (1975.681, 2007.313, 2030.638), stdev = 22.136
[info]   CI (99.9%): [1922.074, 2092.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3655.122 ±(99.9%) 195.000 B/op [Average]
[info]   (min, avg, max) = (3571.150, 3655.122, 3703.930), stdev = 50.641
[info]   CI (99.9%): [3460.122, 3850.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala
[info] # Run progress: 78.31% complete, ETA 00:12:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_11ae7560/target/5e31e36e/jackson-module-afterburner-2.9.4.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 625538.094 ops/s
[info] # Warmup Iteration   2: 1475465.683 ops/s
[info] # Warmup Iteration   3: 1487619.040 ops/s
[info] Iteration   1: 1480623.364 ops/s
[info]                  ·gc.alloc.rate:                   1000.451 MB/sec
[info]                  ·gc.alloc.rate.norm:              1064.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.066 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      976.360 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1038.379 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1477558.954 ops/s
[info]                  ·gc.alloc.rate:                   999.054 MB/sec
[info]                  ·gc.alloc.rate.norm:              1064.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.155 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      983.712 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1047.661 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1467930.457 ops/s
[info]                  ·gc.alloc.rate:                   992.159 MB/sec
[info]                  ·gc.alloc.rate.norm:              1064.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.112 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      988.625 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1060.211 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1480085.772 ops/s
[info]                  ·gc.alloc.rate:                   1000.478 MB/sec
[info]                  ·gc.alloc.rate.norm:              1064.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.044 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      994.765 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1057.924 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1479779.139 ops/s
[info]                  ·gc.alloc.rate:                   1000.230 MB/sec
[info]                  ·gc.alloc.rate.norm:              1064.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.111 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      998.702 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1062.374 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala":
[info]   1477195.537 ±(99.9%) 20444.003 ops/s [Average]
[info]   (min, avg, max) = (1467930.457, 1477195.537, 1480623.364), stdev = 5309.243
[info]   CI (99.9%): [1456751.534, 1497639.541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   998.474 ±(99.9%) 13.781 MB/sec [Average]
[info]   (min, avg, max) = (992.159, 998.474, 1000.478), stdev = 3.579
[info]   CI (99.9%): [984.694, 1012.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1064.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1064.000, 1064.000, 1064.000), stdev = 0.001
[info]   CI (99.9%): [1064.000, 1064.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.092, 0.146), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.098 ±(99.9%) 0.167 B/op [Average]
[info]   (min, avg, max) = (0.044, 0.098, 0.155), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   988.433 ±(99.9%) 34.096 MB/sec [Average]
[info]   (min, avg, max) = (976.360, 988.433, 998.702), stdev = 8.855
[info]   CI (99.9%): [954.336, 1022.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1053.310 ±(99.9%) 38.790 B/op [Average]
[info]   (min, avg, max) = (1038.379, 1053.310, 1062.374), stdev = 10.074
[info]   CI (99.9%): [1014.519, 1092.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala
[info] # Run progress: 78.68% complete, ETA 00:12:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6105060.905 ops/s
[info] # Warmup Iteration   2: 7513717.345 ops/s
[info] # Warmup Iteration   3: 7390961.107 ops/s
[info] Iteration   1: 7520039.364 ops/s
[info]                  ·gc.alloc.rate:                   917.098 MB/sec
[info]                  ·gc.alloc.rate.norm:              192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      978.837 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 204.925 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 7540090.373 ops/s
[info]                  ·gc.alloc.rate:                   919.723 MB/sec
[info]                  ·gc.alloc.rate.norm:              192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.726 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 136.262 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 7509585.883 ops/s
[info]                  ·gc.alloc.rate:                   915.795 MB/sec
[info]                  ·gc.alloc.rate.norm:              192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      980.813 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 205.631 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 7486308.882 ops/s
[info]                  ·gc.alloc.rate:                   913.085 MB/sec
[info]                  ·gc.alloc.rate.norm:              192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      984.949 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 207.111 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 7499528.145 ops/s
[info]                  ·gc.alloc.rate:                   914.735 MB/sec
[info]                  ·gc.alloc.rate.norm:              192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      991.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 208.012 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala":
[info]   7511110.529 ±(99.9%) 78706.665 ops/s [Average]
[info]   (min, avg, max) = (7486308.882, 7511110.529, 7540090.373), stdev = 20439.871
[info]   CI (99.9%): [7432403.864, 7589817.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   916.087 ±(99.9%) 9.660 MB/sec [Average]
[info]   (min, avg, max) = (913.085, 916.087, 919.723), stdev = 2.509
[info]   CI (99.9%): [906.427, 925.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   192.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (192.000, 192.000, 192.000), stdev = 0.001
[info]   CI (99.9%): [192.000, 192.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.104), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.017 ±(99.9%) 0.021 B/op [Average]
[info]   (min, avg, max) = (0.009, 0.017, 0.022), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   917.669 ±(99.9%) 570.592 MB/sec [Average]
[info]   (min, avg, max) = (652.726, 917.669, 991.021), stdev = 148.181
[info]   CI (99.9%): [347.077, 1488.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   192.388 ±(99.9%) 120.906 B/op [Average]
[info]   (min, avg, max) = (136.262, 192.388, 208.012), stdev = 31.399
[info]   CI (99.9%): [71.482, 313.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson
[info] # Run progress: 79.04% complete, ETA 00:12:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 173153.974 ops/s
[info] # Warmup Iteration   2: 510237.454 ops/s
[info] # Warmup Iteration   3: 521722.604 ops/s
[info] Iteration   1: 523639.629 ops/s
[info]                  ·gc.alloc.rate:                   1806.538 MB/sec
[info]                  ·gc.alloc.rate.norm:              5432.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.438 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1654.207 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4973.962 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 523444.798 ops/s
[info]                  ·gc.alloc.rate:                   1806.335 MB/sec
[info]                  ·gc.alloc.rate.norm:              5432.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.376 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1669.086 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5019.266 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 516027.508 ops/s
[info]                  ·gc.alloc.rate:                   1780.595 MB/sec
[info]                  ·gc.alloc.rate.norm:              5432.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.190 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2015.926 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6149.916 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 521990.847 ops/s
[info]                  ·gc.alloc.rate:                   1801.071 MB/sec
[info]                  ·gc.alloc.rate.norm:              5432.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.251 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1687.420 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5089.229 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 523591.000 ops/s
[info]                  ·gc.alloc.rate:                   1806.714 MB/sec
[info]                  ·gc.alloc.rate.norm:              5432.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.313 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1692.924 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5089.883 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson":
[info]   521738.757 ±(99.9%) 12571.719 ops/s [Average]
[info]   (min, avg, max) = (516027.508, 521738.757, 523639.629), stdev = 3264.836
[info]   CI (99.9%): [509167.037, 534310.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1800.251 ±(99.9%) 43.281 MB/sec [Average]
[info]   (min, avg, max) = (1780.595, 1800.251, 1806.714), stdev = 11.240
[info]   CI (99.9%): [1756.969, 1843.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5432.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5432.001, 5432.001, 5432.001), stdev = 0.001
[info]   CI (99.9%): [5432.001, 5432.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.104 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.104, 0.146), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.314 ±(99.9%) 0.377 B/op [Average]
[info]   (min, avg, max) = (0.190, 0.314, 0.438), stdev = 0.098
[info]   CI (99.9%): [≈ 0, 0.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1743.912 ±(99.9%) 588.496 MB/sec [Average]
[info]   (min, avg, max) = (1654.207, 1743.912, 2015.926), stdev = 152.830
[info]   CI (99.9%): [1155.417, 2332.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   5264.451 ±(99.9%) 1915.405 B/op [Average]
[info]   (min, avg, max) = (4973.962, 5264.451, 6149.916), stdev = 497.425
[info]   CI (99.9%): [3349.046, 7179.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 7.000), stdev = 0.837
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce
[info] # Run progress: 79.41% complete, ETA 00:11:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 418311.955 ops/s
[info] # Warmup Iteration   2: 644321.148 ops/s
[info] # Warmup Iteration   3: 641753.902 ops/s
[info] Iteration   1: 651548.088 ops/s
[info]                  ·gc.alloc.rate:                   2257.870 MB/sec
[info]                  ·gc.alloc.rate.norm:              5456.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.251 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2314.936 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5593.896 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 649624.787 ops/s
[info]                  ·gc.alloc.rate:                   2251.109 MB/sec
[info]                  ·gc.alloc.rate.norm:              5456.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.252 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2339.952 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5671.328 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 652856.368 ops/s
[info]                  ·gc.alloc.rate:                   2262.237 MB/sec
[info]                  ·gc.alloc.rate.norm:              5456.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.100 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2019.501 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4870.577 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 640666.142 ops/s
[info]                  ·gc.alloc.rate:                   2220.421 MB/sec
[info]                  ·gc.alloc.rate.norm:              5456.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.205 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2367.545 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5817.513 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 643909.906 ops/s
[info]                  ·gc.alloc.rate:                   2232.404 MB/sec
[info]                  ·gc.alloc.rate.norm:              5456.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.254 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2375.649 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5806.092 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce":
[info]   647721.058 ±(99.9%) 20095.278 ops/s [Average]
[info]   (min, avg, max) = (640666.142, 647721.058, 652856.368), stdev = 5218.680
[info]   CI (99.9%): [627625.780, 667816.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.alloc.rate":
[info]   2244.808 ±(99.9%) 68.414 MB/sec [Average]
[info]   (min, avg, max) = (2220.421, 2244.808, 2262.237), stdev = 17.767
[info]   CI (99.9%): [2176.394, 2313.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5456.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5456.001, 5456.001, 5456.001), stdev = 0.001
[info]   CI (99.9%): [5456.001, 5456.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.087, 0.104), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.213 ±(99.9%) 0.255 B/op [Average]
[info]   (min, avg, max) = (0.100, 0.213, 0.254), stdev = 0.066
[info]   CI (99.9%): [≈ 0, 0.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2283.517 ±(99.9%) 575.750 MB/sec [Average]
[info]   (min, avg, max) = (2019.501, 2283.517, 2375.649), stdev = 149.520
[info]   CI (99.9%): [1707.767, 2859.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5551.881 ±(99.9%) 1510.355 B/op [Average]
[info]   (min, avg, max) = (4870.577, 5551.881, 5817.513), stdev = 392.234
[info]   CI (99.9%): [4041.526, 7062.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.count":
[info]   34.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 0.707
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala
[info] # Run progress: 79.78% complete, ETA 00:11:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4884463.501 ops/s
[info] # Warmup Iteration   2: 5484384.090 ops/s
[info] # Warmup Iteration   3: 5581565.330 ops/s
[info] Iteration   1: 5563532.550 ops/s
[info]                  ·gc.alloc.rate:                   1385.246 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1314.450 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 371.966 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 5565349.301 ops/s
[info]                  ·gc.alloc.rate:                   1385.468 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.047 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1651.558 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 467.287 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 5552739.585 ops/s
[info]                  ·gc.alloc.rate:                   1382.549 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1329.762 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 377.033 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 5556604.908 ops/s
[info]                  ·gc.alloc.rate:                   1383.697 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1337.273 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 378.848 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 5562634.923 ops/s
[info]                  ·gc.alloc.rate:                   1385.200 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.220 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 380.120 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala":
[info]   5560172.253 ±(99.9%) 20387.394 ops/s [Average]
[info]   (min, avg, max) = (5552739.585, 5560172.253, 5565349.301), stdev = 5294.541
[info]   CI (99.9%): [5539784.860, 5580559.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1384.432 ±(99.9%) 4.875 MB/sec [Average]
[info]   (min, avg, max) = (1382.549, 1384.432, 1385.468), stdev = 1.266
[info]   CI (99.9%): [1379.556, 1389.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   392.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (392.000, 392.000, 392.000), stdev = 0.001
[info]   CI (99.9%): [392.000, 392.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.166), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.025 ±(99.9%) 0.049 B/op [Average]
[info]   (min, avg, max) = (0.018, 0.025, 0.047), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1395.253 ±(99.9%) 553.274 MB/sec [Average]
[info]   (min, avg, max) = (1314.450, 1395.253, 1651.558), stdev = 143.683
[info]   CI (99.9%): [841.979, 1948.526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   395.051 ±(99.9%) 155.951 B/op [Average]
[info]   (min, avg, max) = (371.966, 395.051, 467.287), stdev = 40.500
[info]   CI (99.9%): [239.100, 551.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson
[info] # Run progress: 80.15% complete, ETA 00:11:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 107661.137 ops/s
[info] # Warmup Iteration   2: 324190.123 ops/s
[info] # Warmup Iteration   3: 326131.704 ops/s
[info] Iteration   1: 321984.372 ops/s
[info]                  ·gc.alloc.rate:                   1662.038 MB/sec
[info]                  ·gc.alloc.rate.norm:              8128.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.509 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1651.438 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8076.163 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 320113.458 ops/s
[info]                  ·gc.alloc.rate:                   1652.836 MB/sec
[info]                  ·gc.alloc.rate.norm:              8128.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.716 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1666.662 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8195.992 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 323349.499 ops/s
[info]                  ·gc.alloc.rate:                   1669.446 MB/sec
[info]                  ·gc.alloc.rate.norm:              8128.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.507 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1677.492 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8167.177 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 322863.525 ops/s
[info]                  ·gc.alloc.rate:                   1667.602 MB/sec
[info]                  ·gc.alloc.rate.norm:              8128.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.406 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1686.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8218.179 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 321855.026 ops/s
[info]                  ·gc.alloc.rate:                   1661.721 MB/sec
[info]                  ·gc.alloc.rate.norm:              8128.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.611 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1691.100 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8271.700 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson":
[info]   322033.176 ±(99.9%) 4771.390 ops/s [Average]
[info]   (min, avg, max) = (320113.458, 322033.176, 323349.499), stdev = 1239.115
[info]   CI (99.9%): [317261.786, 326804.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1662.729 ±(99.9%) 24.972 MB/sec [Average]
[info]   (min, avg, max) = (1652.836, 1662.729, 1669.446), stdev = 6.485
[info]   CI (99.9%): [1637.756, 1687.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   8128.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8128.001, 8128.001, 8128.001), stdev = 0.001
[info]   CI (99.9%): [8128.001, 8128.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.112 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.112, 0.146), stdev = 0.024
[info]   CI (99.9%): [0.021, 0.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.550 ±(99.9%) 0.455 B/op [Average]
[info]   (min, avg, max) = (0.406, 0.550, 0.716), stdev = 0.118
[info]   CI (99.9%): [0.095, 1.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1674.559 ±(99.9%) 61.261 MB/sec [Average]
[info]   (min, avg, max) = (1651.438, 1674.559, 1691.100), stdev = 15.909
[info]   CI (99.9%): [1613.297, 1735.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   8185.842 ±(99.9%) 278.329 B/op [Average]
[info]   (min, avg, max) = (8076.163, 8185.842, 8271.700), stdev = 72.281
[info]   CI (99.9%): [7907.513, 8464.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce
[info] # Run progress: 80.51% complete, ETA 00:11:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 281648.823 ops/s
[info] # Warmup Iteration   2: 451135.829 ops/s
[info] # Warmup Iteration   3: 465933.489 ops/s
[info] Iteration   1: 464355.556 ops/s
[info]                  ·gc.alloc.rate:                   1224.656 MB/sec
[info]                  ·gc.alloc.rate.norm:              4152.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.141 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      977.521 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3314.128 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 459869.081 ops/s
[info]                  ·gc.alloc.rate:                   1212.621 MB/sec
[info]                  ·gc.alloc.rate.norm:              4152.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.641 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1308.325 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4479.691 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 462618.440 ops/s
[info]                  ·gc.alloc.rate:                   1220.020 MB/sec
[info]                  ·gc.alloc.rate.norm:              4152.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.354 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1317.105 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4482.401 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 463896.633 ops/s
[info]                  ·gc.alloc.rate:                   1223.616 MB/sec
[info]                  ·gc.alloc.rate.norm:              4152.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.071 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1325.983 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4499.356 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 462012.287 ops/s
[info]                  ·gc.alloc.rate:                   1218.588 MB/sec
[info]                  ·gc.alloc.rate.norm:              4152.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.213 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      999.959 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3407.083 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce":
[info]   462550.399 ±(99.9%) 6821.890 ops/s [Average]
[info]   (min, avg, max) = (459869.081, 462550.399, 464355.556), stdev = 1771.623
[info]   CI (99.9%): [455728.510, 469372.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1219.900 ±(99.9%) 18.382 MB/sec [Average]
[info]   (min, avg, max) = (1212.621, 1219.900, 1224.656), stdev = 4.774
[info]   CI (99.9%): [1201.519, 1238.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   4152.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4152.001, 4152.001, 4152.001), stdev = 0.001
[info]   CI (99.9%): [4152.001, 4152.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.253 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.083, 0.187), stdev = 0.066
[info]   CI (99.9%): [≈ 0, 0.337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.284 ±(99.9%) 0.869 B/op [Average]
[info]   (min, avg, max) = (0.071, 0.284, 0.641), stdev = 0.226
[info]   CI (99.9%): [≈ 0, 1.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1185.779 ±(99.9%) 693.709 MB/sec [Average]
[info]   (min, avg, max) = (977.521, 1185.779, 1325.983), stdev = 180.154
[info]   CI (99.9%): [492.070, 1879.487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4036.532 ±(99.9%) 2379.522 B/op [Average]
[info]   (min, avg, max) = (3314.128, 4036.532, 4499.356), stdev = 617.954
[info]   CI (99.9%): [1657.010, 6416.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala
[info] # Run progress: 80.88% complete, ETA 00:11:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2586870.328 ops/s
[info] # Warmup Iteration   2: 3147796.937 ops/s
[info] # Warmup Iteration   3: 3146509.188 ops/s
[info] Iteration   1: 3160900.436 ops/s
[info]                  ·gc.alloc.rate:                   530.099 MB/sec
[info]                  ·gc.alloc.rate.norm:              264.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.739 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.862 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.342 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 163.521 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 3189239.367 ops/s
[info]                  ·gc.alloc.rate:                   534.789 MB/sec
[info]                  ·gc.alloc.rate.norm:              264.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.626 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 323.158 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 3191963.608 ops/s
[info]                  ·gc.alloc.rate:                   535.266 MB/sec
[info]                  ·gc.alloc.rate.norm:              264.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      326.290 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 160.931 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 3120771.187 ops/s
[info]                  ·gc.alloc.rate:                   523.562 MB/sec
[info]                  ·gc.alloc.rate.norm:              264.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.890 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 329.212 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 3197404.683 ops/s
[info]                  ·gc.alloc.rate:                   536.179 MB/sec
[info]                  ·gc.alloc.rate.norm:              264.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.061 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.636 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 321.340 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala":
[info]   3172055.856 ±(99.9%) 123110.984 ops/s [Average]
[info]   (min, avg, max) = (3120771.187, 3172055.856, 3197404.683), stdev = 31971.531
[info]   CI (99.9%): [3048944.873, 3295166.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   531.979 ±(99.9%) 20.259 MB/sec [Average]
[info]   (min, avg, max) = (523.562, 531.979, 536.179), stdev = 5.261
[info]   CI (99.9%): [511.720, 552.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   264.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (264.000, 264.000, 264.000), stdev = 0.001
[info]   CI (99.9%): [264.000, 264.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.794 ±(99.9%) 6.342 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.794, 3.739), stdev = 1.647
[info]   CI (99.9%): [≈ 0, 7.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.395 ±(99.9%) 3.159 B/op [Average]
[info]   (min, avg, max) = (0.010, 0.395, 1.862), stdev = 0.820
[info]   CI (99.9%): [≈ 0, 3.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   522.957 ±(99.9%) 687.717 MB/sec [Average]
[info]   (min, avg, max) = (326.290, 522.957, 654.626), stdev = 178.598
[info]   CI (99.9%): [≈ 0, 1210.674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   259.632 ±(99.9%) 342.600 B/op [Average]
[info]   (min, avg, max) = (160.931, 259.632, 329.212), stdev = 88.972
[info]   CI (99.9%): [≈ 0, 602.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.095
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson
[info] # Run progress: 81.25% complete, ETA 00:10:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 86149.893 ops/s
[info] # Warmup Iteration   2: 324408.766 ops/s
[info] # Warmup Iteration   3: 325593.516 ops/s
[info] Iteration   1: 319909.372 ops/s
[info]                  ·gc.alloc.rate:                   1178.568 MB/sec
[info]                  ·gc.alloc.rate.norm:              5800.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.102 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1311.190 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6452.664 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 326908.635 ops/s
[info]                  ·gc.alloc.rate:                   1204.437 MB/sec
[info]                  ·gc.alloc.rate.norm:              5800.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.601 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      989.347 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4764.228 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 322741.708 ops/s
[info]                  ·gc.alloc.rate:                   1189.108 MB/sec
[info]                  ·gc.alloc.rate.norm:              5800.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.305 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1327.568 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6475.358 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 324213.702 ops/s
[info]                  ·gc.alloc.rate:                   1194.543 MB/sec
[info]                  ·gc.alloc.rate.norm:              5800.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.303 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1335.595 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6484.867 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 325607.168 ops/s
[info]                  ·gc.alloc.rate:                   1199.760 MB/sec
[info]                  ·gc.alloc.rate.norm:              5800.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.503 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1006.011 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4863.358 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson":
[info]   323876.117 ±(99.9%) 10426.754 ops/s [Average]
[info]   (min, avg, max) = (319909.372, 323876.117, 326908.635), stdev = 2707.795
[info]   CI (99.9%): [313449.363, 334302.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1193.283 ±(99.9%) 38.599 MB/sec [Average]
[info]   (min, avg, max) = (1178.568, 1193.283, 1204.437), stdev = 10.024
[info]   CI (99.9%): [1154.685, 1231.882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5800.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5800.001, 5800.001, 5800.001), stdev = 0.001
[info]   CI (99.9%): [5800.001, 5800.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.075, 0.125), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.363 ±(99.9%) 0.749 B/op [Average]
[info]   (min, avg, max) = (0.102, 0.363, 0.601), stdev = 0.195
[info]   CI (99.9%): [≈ 0, 1.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1193.942 ±(99.9%) 691.097 MB/sec [Average]
[info]   (min, avg, max) = (989.347, 1193.942, 1335.595), stdev = 179.476
[info]   CI (99.9%): [502.845, 1885.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   5808.095 ±(99.9%) 3498.007 B/op [Average]
[info]   (min, avg, max) = (4764.228, 5808.095, 6484.867), stdev = 908.421
[info]   CI (99.9%): [2310.088, 9306.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 0.707
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce
[info] # Run progress: 81.62% complete, ETA 00:10:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1103112.346 ops/s
[info] # Warmup Iteration   2: 2000241.563 ops/s
[info] # Warmup Iteration   3: 2055833.368 ops/s
[info] Iteration   1: 2056584.159 ops/s
[info]                  ·gc.alloc.rate:                   3040.679 MB/sec
[info]                  ·gc.alloc.rate.norm:              2328.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.127 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3003.458 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2299.503 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 2069391.209 ops/s
[info]                  ·gc.alloc.rate:                   3060.225 MB/sec
[info]                  ·gc.alloc.rate.norm:              2328.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.127 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3371.558 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2564.841 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 2051260.654 ops/s
[info]                  ·gc.alloc.rate:                   3033.208 MB/sec
[info]                  ·gc.alloc.rate.norm:              2328.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.064 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2710.987 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2080.695 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 2041958.456 ops/s
[info]                  ·gc.alloc.rate:                   3020.644 MB/sec
[info]                  ·gc.alloc.rate.norm:              2328.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.096 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3057.678 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2356.542 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 2032864.044 ops/s
[info]                  ·gc.alloc.rate:                   3006.243 MB/sec
[info]                  ·gc.alloc.rate.norm:              2328.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.097 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3062.703 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2371.722 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce":
[info]   2050411.704 ±(99.9%) 53716.804 ops/s [Average]
[info]   (min, avg, max) = (2032864.044, 2050411.704, 2069391.209), stdev = 13950.083
[info]   CI (99.9%): [1996694.900, 2104128.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate":
[info]   3032.200 ±(99.9%) 78.576 MB/sec [Average]
[info]   (min, avg, max) = (3006.243, 3032.200, 3060.225), stdev = 20.406
[info]   CI (99.9%): [2953.624, 3110.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2328.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2328.000, 2328.000, 2328.000), stdev = 0.001
[info]   CI (99.9%): [2328.000, 2328.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.133 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.133, 0.166), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.102 ±(99.9%) 0.101 B/op [Average]
[info]   (min, avg, max) = (0.064, 0.102, 0.127), stdev = 0.026
[info]   CI (99.9%): [0.001, 0.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   3041.277 ±(99.9%) 903.744 MB/sec [Average]
[info]   (min, avg, max) = (2710.987, 3041.277, 3371.558), stdev = 234.699
[info]   CI (99.9%): [2137.533, 3945.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2334.660 ±(99.9%) 668.533 B/op [Average]
[info]   (min, avg, max) = (2080.695, 2334.660, 2564.841), stdev = 173.616
[info]   CI (99.9%): [1666.127, 3003.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.count":
[info]   45.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 9.000, 10.000), stdev = 0.707
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 8.200, 9.000), stdev = 0.837
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala
[info] # Run progress: 81.99% complete, ETA 00:10:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 33881.030 ops/s
[info] # Warmup Iteration   2: 288393.559 ops/s
[info] # Warmup Iteration   3: 300744.608 ops/s
[info] Iteration   1: 302078.475 ops/s
[info]                  ·gc.alloc.rate:                   544.850 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.229 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.193 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      578.568 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3015.752 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 304187.142 ops/s
[info]                  ·gc.alloc.rate:                   548.817 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      648.395 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3355.297 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 303054.273 ops/s
[info]                  ·gc.alloc.rate:                   546.731 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.108 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      325.309 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1689.823 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 302579.883 ops/s
[info]                  ·gc.alloc.rate:                   545.834 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.650 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.236 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3398.821 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 302532.899 ops/s
[info]                  ·gc.alloc.rate:                   545.802 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.433 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.965 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3413.221 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala":
[info]   302886.534 ±(99.9%) 3099.569 ops/s [Average]
[info]   (min, avg, max) = (302078.475, 302886.534, 304187.142), stdev = 804.948
[info]   CI (99.9%): [299786.965, 305986.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   546.407 ±(99.9%) 5.785 MB/sec [Average]
[info]   (min, avg, max) = (544.850, 546.407, 548.817), stdev = 1.502
[info]   CI (99.9%): [540.621, 552.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2840.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2840.001, 2840.001, 2840.001), stdev = 0.001
[info]   CI (99.9%): [2840.001, 2840.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.352 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.092, 0.229), stdev = 0.091
[info]   CI (99.9%): [≈ 0, 0.444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.477 ±(99.9%) 1.835 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.477, 1.193), stdev = 0.476
[info]   CI (99.9%): [≈ 0, 2.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   572.295 ±(99.9%) 545.871 MB/sec [Average]
[info]   (min, avg, max) = (325.309, 572.295, 655.965), stdev = 141.761
[info]   CI (99.9%): [26.424, 1118.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2974.583 ±(99.9%) 2835.932 B/op [Average]
[info]   (min, avg, max) = (1689.823, 2974.583, 3413.221), stdev = 736.483
[info]   CI (99.9%): [138.651, 5810.515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala
[info] # Run progress: 82.35% complete, ETA 00:10:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 638984.817 ops/s
[info] # Warmup Iteration   2: 709331.964 ops/s
[info] # Warmup Iteration   3: 707332.208 ops/s
[info] Iteration   1: 710242.488 ops/s
[info]                  ·gc.alloc.rate:                   451.030 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.661 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 566.839 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 709928.693 ops/s
[info]                  ·gc.alloc.rate:                   451.068 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.213 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.124 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      664.151 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1472.396 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 710220.536 ops/s
[info]                  ·gc.alloc.rate:                   451.094 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.281 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 732.179 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 685409.805 ops/s
[info]                  ·gc.alloc.rate:                   435.405 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.143 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.310 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 758.627 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 686052.974 ops/s
[info]                  ·gc.alloc.rate:                   435.895 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.143 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      659.408 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1512.768 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala":
[info]   700370.899 ±(99.9%) 51469.599 ops/s [Average]
[info]   (min, avg, max) = (685409.805, 700370.899, 710242.488), stdev = 13366.491
[info]   CI (99.9%): [648901.301, 751840.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   444.899 ±(99.9%) 32.517 MB/sec [Average]
[info]   (min, avg, max) = (435.405, 444.899, 451.094), stdev = 8.445
[info]   CI (99.9%): [412.382, 477.415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1000.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1000.001, 1000.001, 1000.001), stdev = 0.001
[info]   CI (99.9%): [1000.000, 1000.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.668 ±(99.9%) 5.481 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.668, 3.213), stdev = 1.423
[info]   CI (99.9%): [≈ 0, 6.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.482 ±(99.9%) 12.147 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.482, 7.124), stdev = 3.155
[info]   CI (99.9%): [≈ 0, 13.629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   447.962 ±(99.9%) 760.728 MB/sec [Average]
[info]   (min, avg, max) = (255.661, 447.962, 664.151), stdev = 197.559
[info]   CI (99.9%): [≈ 0, 1208.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1008.562 ±(99.9%) 1725.651 B/op [Average]
[info]   (min, avg, max) = (566.839, 1008.562, 1512.768), stdev = 448.146
[info]   CI (99.9%): [≈ 0, 2734.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 1.000
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless
[info] # Run progress: 82.72% complete, ETA 00:10:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3322769.992 ops/s
[info] # Warmup Iteration   2: 3658735.472 ops/s
[info] # Warmup Iteration   3: 3676894.658 ops/s
[info] Iteration   1: 3680507.971 ops/s
[info]                  ·gc.alloc.rate:                   1196.810 MB/sec
[info]                  ·gc.alloc.rate.norm:              512.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      989.108 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 423.144 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 3676859.853 ops/s
[info]                  ·gc.alloc.rate:                   1195.928 MB/sec
[info]                  ·gc.alloc.rate.norm:              512.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.045 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1322.770 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 566.304 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 3649187.887 ops/s
[info]                  ·gc.alloc.rate:                   1186.750 MB/sec
[info]                  ·gc.alloc.rate.norm:              512.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      995.168 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 429.346 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 3658046.165 ops/s
[info]                  ·gc.alloc.rate:                   1189.907 MB/sec
[info]                  ·gc.alloc.rate.norm:              512.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1333.398 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 573.742 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 3637981.215 ops/s
[info]                  ·gc.alloc.rate:                   1183.127 MB/sec
[info]                  ·gc.alloc.rate.norm:              512.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1004.547 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 434.719 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless":
[info]   3660516.619 ±(99.9%) 69659.500 ops/s [Average]
[info]   (min, avg, max) = (3637981.215, 3660516.619, 3680507.971), stdev = 18090.351
[info]   CI (99.9%): [3590857.118, 3730176.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate":
[info]   1190.504 ±(99.9%) 22.622 MB/sec [Average]
[info]   (min, avg, max) = (1183.127, 1190.504, 1196.810), stdev = 5.875
[info]   CI (99.9%): [1167.883, 1213.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm":
[info]   512.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (512.000, 512.000, 512.000), stdev = 0.001
[info]   CI (99.9%): [512.000, 512.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.079, 0.104), stdev = 0.017
[info]   CI (99.9%): [0.012, 0.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space.norm":
[info]   0.034 ±(99.9%) 0.028 B/op [Average]
[info]   (min, avg, max) = (0.027, 0.034, 0.045), stdev = 0.007
[info]   CI (99.9%): [0.006, 0.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space":
[info]   1128.998 ±(99.9%) 700.284 MB/sec [Average]
[info]   (min, avg, max) = (989.108, 1128.998, 1333.398), stdev = 181.861
[info]   CI (99.9%): [428.715, 1829.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space.norm":
[info]   485.451 ±(99.9%) 297.872 B/op [Average]
[info]   (min, avg, max) = (423.144, 485.451, 573.742), stdev = 77.356
[info]   CI (99.9%): [187.579, 783.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump
[info] # Run progress: 83.09% complete, ETA 00:09:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3601681.937 ops/s
[info] # Warmup Iteration   2: 3956527.778 ops/s
[info] # Warmup Iteration   3: 3796813.734 ops/s
[info] Iteration   1: 3965108.990 ops/s
[info]                  ·gc.alloc.rate:                   342.630 MB/sec
[info]                  ·gc.alloc.rate.norm:              136.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.026 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.811 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 101.539 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 4005358.920 ops/s
[info]                  ·gc.alloc.rate:                   345.977 MB/sec
[info]                  ·gc.alloc.rate.norm:              136.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.704 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 100.515 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 3986837.406 ops/s
[info]                  ·gc.alloc.rate:                   344.392 MB/sec
[info]                  ·gc.alloc.rate.norm:              136.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.193 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.261 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      332.268 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 131.212 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 3990830.741 ops/s
[info]                  ·gc.alloc.rate:                   344.769 MB/sec
[info]                  ·gc.alloc.rate.norm:              136.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      332.305 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 131.083 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 3966517.473 ops/s
[info]                  ·gc.alloc.rate:                   342.690 MB/sec
[info]                  ·gc.alloc.rate.norm:              136.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.311 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 131.087 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump":
[info]   3982930.706 ±(99.9%) 65791.534 ops/s [Average]
[info]   (min, avg, max) = (3965108.990, 3982930.706, 4005358.920), stdev = 17085.852
[info]   CI (99.9%): [3917139.172, 4048722.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate":
[info]   344.092 ±(99.9%) 5.514 MB/sec [Average]
[info]   (min, avg, max) = (342.630, 344.092, 345.977), stdev = 1.432
[info]   CI (99.9%): [338.578, 349.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm":
[info]   136.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (136.000, 136.000, 136.000), stdev = 0.001
[info]   CI (99.9%): [136.000, 136.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space":
[info]   0.652 ±(99.9%) 5.469 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.652, 3.193), stdev = 1.420
[info]   CI (99.9%): [≈ 0, 6.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space.norm":
[info]   0.258 ±(99.9%) 2.160 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.258, 1.261), stdev = 0.561
[info]   CI (99.9%): [≈ 0, 2.417] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space":
[info]   301.280 ±(99.9%) 160.047 MB/sec [Average]
[info]   (min, avg, max) = (255.704, 301.280, 332.305), stdev = 41.564
[info]   CI (99.9%): [141.233, 461.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space.norm":
[info]   119.087 ±(99.9%) 63.501 B/op [Average]
[info]   (min, avg, max) = (100.515, 119.087, 131.212), stdev = 16.491
[info]   CI (99.9%): [55.587, 182.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson
[info] # Run progress: 83.46% complete, ETA 00:09:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14539.358 ops/s
[info] # Warmup Iteration   2: 191092.588 ops/s
[info] # Warmup Iteration   3: 202573.307 ops/s
[info] Iteration   1: 205895.420 ops/s
[info]                  ·gc.alloc.rate:                   1311.875 MB/sec
[info]                  ·gc.alloc.rate.norm:              10032.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.318 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1309.087 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10010.685 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 204494.962 ops/s
[info]                  ·gc.alloc.rate:                   1303.262 MB/sec
[info]                  ·gc.alloc.rate.norm:              10032.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.961 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1320.044 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10161.186 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 204375.018 ops/s
[info]                  ·gc.alloc.rate:                   1302.495 MB/sec
[info]                  ·gc.alloc.rate.norm:              10032.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.321 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1330.026 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10244.048 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 204449.941 ops/s
[info]                  ·gc.alloc.rate:                   1302.990 MB/sec
[info]                  ·gc.alloc.rate.norm:              10032.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.320 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1337.271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10295.941 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 202487.898 ops/s
[info]                  ·gc.alloc.rate:                   1290.361 MB/sec
[info]                  ·gc.alloc.rate.norm:              10032.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.647 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1007.585 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7833.540 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson":
[info]   204340.648 ±(99.9%) 4671.411 ops/s [Average]
[info]   (min, avg, max) = (202487.898, 204340.648, 205895.420), stdev = 1213.150
[info]   CI (99.9%): [199669.237, 209012.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1302.197 ±(99.9%) 29.552 MB/sec [Average]
[info]   (min, avg, max) = (1290.361, 1302.197, 1311.875), stdev = 7.675
[info]   CI (99.9%): [1272.645, 1331.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   10032.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10032.002, 10032.002, 10032.002), stdev = 0.001
[info]   CI (99.9%): [10032.002, 10032.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.125), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.514 ±(99.9%) 1.108 B/op [Average]
[info]   (min, avg, max) = (0.318, 0.514, 0.961), stdev = 0.288
[info]   CI (99.9%): [≈ 0, 1.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1260.803 ±(99.9%) 546.599 MB/sec [Average]
[info]   (min, avg, max) = (1007.585, 1260.803, 1337.271), stdev = 141.950
[info]   CI (99.9%): [714.204, 1807.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   9709.080 ±(99.9%) 4058.556 B/op [Average]
[info]   (min, avg, max) = (7833.540, 9709.080, 10295.941), stdev = 1053.994
[info]   CI (99.9%): [5650.524, 13767.636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 5.000), stdev = 0.894
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce
[info] # Run progress: 83.82% complete, ETA 00:09:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 481987.177 ops/s
[info] # Warmup Iteration   2: 722739.024 ops/s
[info] # Warmup Iteration   3: 727340.707 ops/s
[info] Iteration   1: 727625.821 ops/s
[info]                  ·gc.alloc.rate:                   2776.173 MB/sec
[info]                  ·gc.alloc.rate.norm:              6008.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.180 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2667.681 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5773.210 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 728328.409 ops/s
[info]                  ·gc.alloc.rate:                   2780.305 MB/sec
[info]                  ·gc.alloc.rate.norm:              6008.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.405 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2693.682 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5820.816 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 723351.682 ops/s
[info]                  ·gc.alloc.rate:                   2760.519 MB/sec
[info]                  ·gc.alloc.rate.norm:              6008.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.272 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2707.721 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5893.091 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 720472.182 ops/s
[info]                  ·gc.alloc.rate:                   2749.139 MB/sec
[info]                  ·gc.alloc.rate.norm:              6008.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.182 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2714.638 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5932.601 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 722401.602 ops/s
[info]                  ·gc.alloc.rate:                   2757.011 MB/sec
[info]                  ·gc.alloc.rate.norm:              6008.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.272 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3059.426 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6667.015 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce":
[info]   724435.939 ±(99.9%) 13108.060 ops/s [Average]
[info]   (min, avg, max) = (720472.182, 724435.939, 728328.409), stdev = 3404.122
[info]   CI (99.9%): [711327.879, 737544.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.alloc.rate":
[info]   2764.629 ±(99.9%) 50.716 MB/sec [Average]
[info]   (min, avg, max) = (2749.139, 2764.629, 2780.305), stdev = 13.171
[info]   CI (99.9%): [2713.913, 2815.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   6008.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6008.001, 6008.001, 6008.001), stdev = 0.001
[info]   CI (99.9%): [6008.000, 6008.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.121 ±(99.9%) 0.164 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.121, 0.187), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.262 ±(99.9%) 0.354 B/op [Average]
[info]   (min, avg, max) = (0.180, 0.262, 0.405), stdev = 0.092
[info]   CI (99.9%): [≈ 0, 0.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2768.629 ±(99.9%) 629.775 MB/sec [Average]
[info]   (min, avg, max) = (2667.681, 2768.629, 3059.426), stdev = 163.550
[info]   CI (99.9%): [2138.855, 3398.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   6017.347 ±(99.9%) 1418.633 B/op [Average]
[info]   (min, avg, max) = (5773.210, 6017.347, 6667.015), stdev = 368.414
[info]   CI (99.9%): [4598.714, 7435.979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.count":
[info]   41.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.200, 9.000), stdev = 0.447
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.400, 8.000), stdev = 0.548
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala
[info] # Run progress: 84.19% complete, ETA 00:09:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3137642.316 ops/s
[info] # Warmup Iteration   2: 3810499.298 ops/s
[info] # Warmup Iteration   3: 3852416.984 ops/s
[info] Iteration   1: 3883497.772 ops/s
[info]                  ·gc.alloc.rate:                   2505.954 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.042 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2666.667 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1081.159 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 3901747.168 ops/s
[info]                  ·gc.alloc.rate:                   2517.800 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.076 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2353.438 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 949.676 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 3898943.699 ops/s
[info]                  ·gc.alloc.rate:                   2515.986 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.067 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2704.462 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1092.110 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 3883786.863 ops/s
[info]                  ·gc.alloc.rate:                   2506.374 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2374.688 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 962.619 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 3847321.983 ops/s
[info]                  ·gc.alloc.rate:                   2482.888 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.034 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2378.066 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 973.107 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala":
[info]   3883059.497 ±(99.9%) 83467.270 ops/s [Average]
[info]   (min, avg, max) = (3847321.983, 3883059.497, 3901747.168), stdev = 21676.185
[info]   CI (99.9%): [3799592.227, 3966526.767] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2505.800 ±(99.9%) 53.532 MB/sec [Average]
[info]   (min, avg, max) = (2482.888, 2505.800, 2517.800), stdev = 13.902
[info]   CI (99.9%): [2452.268, 2559.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1016.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1016.000, 1016.000, 1016.000), stdev = 0.001
[info]   CI (99.9%): [1016.000, 1016.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.117 ±(99.9%) 0.231 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.117, 0.187), stdev = 0.060
[info]   CI (99.9%): [≈ 0, 0.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.047 ±(99.9%) 0.093 B/op [Average]
[info]   (min, avg, max) = (0.017, 0.047, 0.076), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   2495.464 ±(99.9%) 671.193 MB/sec [Average]
[info]   (min, avg, max) = (2353.438, 2495.464, 2704.462), stdev = 174.307
[info]   CI (99.9%): [1824.271, 3166.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1011.734 ±(99.9%) 265.637 B/op [Average]
[info]   (min, avg, max) = (949.676, 1011.734, 1092.110), stdev = 68.985
[info]   CI (99.9%): [746.097, 1277.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.count":
[info]   37.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.400, 8.000), stdev = 0.548
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.600, 7.000), stdev = 0.894
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson
[info] # Run progress: 84.56% complete, ETA 00:08:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 65220.425 ops/s
[info] # Warmup Iteration   2: 243926.087 ops/s
[info] # Warmup Iteration   3: 255700.689 ops/s
[info] Iteration   1: 252031.096 ops/s
[info]                  ·gc.alloc.rate:                   1799.101 MB/sec
[info]                  ·gc.alloc.rate.norm:              11240.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.780 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1983.371 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12391.241 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 252194.978 ops/s
[info]                  ·gc.alloc.rate:                   1800.708 MB/sec
[info]                  ·gc.alloc.rate.norm:              11240.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.650 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1668.999 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10417.873 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 256344.138 ops/s
[info]                  ·gc.alloc.rate:                   1830.643 MB/sec
[info]                  ·gc.alloc.rate.norm:              11240.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.383 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1679.095 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10309.505 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 254128.200 ops/s
[info]                  ·gc.alloc.rate:                   1814.487 MB/sec
[info]                  ·gc.alloc.rate.norm:              11240.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.516 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2025.230 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12545.469 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 255613.240 ops/s
[info]                  ·gc.alloc.rate:                   1825.366 MB/sec
[info]                  ·gc.alloc.rate.norm:              11240.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.641 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1693.166 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10425.960 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson":
[info]   254062.330 ±(99.9%) 7513.500 ops/s [Average]
[info]   (min, avg, max) = (252031.096, 254062.330, 256344.138), stdev = 1951.232
[info]   CI (99.9%): [246548.831, 261575.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1814.061 ±(99.9%) 54.628 MB/sec [Average]
[info]   (min, avg, max) = (1799.101, 1814.061, 1830.643), stdev = 14.187
[info]   CI (99.9%): [1759.433, 1868.689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   11240.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11240.002, 11240.002, 11240.002), stdev = 0.001
[info]   CI (99.9%): [11240.001, 11240.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.096 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.125), stdev = 0.024
[info]   CI (99.9%): [0.004, 0.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.594 ±(99.9%) 0.579 B/op [Average]
[info]   (min, avg, max) = (0.383, 0.594, 0.780), stdev = 0.150
[info]   CI (99.9%): [0.015, 1.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1809.972 ±(99.9%) 686.261 MB/sec [Average]
[info]   (min, avg, max) = (1668.999, 1809.972, 2025.230), stdev = 178.220
[info]   CI (99.9%): [1123.711, 2496.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   11218.010 ±(99.9%) 4403.714 B/op [Average]
[info]   (min, avg, max) = (10309.505, 11218.010, 12545.469), stdev = 1143.630
[info]   CI (99.9%): [6814.296, 15621.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce
[info] # Run progress: 84.93% complete, ETA 00:08:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 561506.760 ops/s
[info] # Warmup Iteration   2: 823617.613 ops/s
[info] # Warmup Iteration   3: 823742.786 ops/s
[info] Iteration   1: 831427.670 ops/s
[info]                  ·gc.alloc.rate:                   1825.220 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.315 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1642.462 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3109.954 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 819244.446 ops/s
[info]                  ·gc.alloc.rate:                   1798.244 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.280 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1988.835 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3822.292 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 824577.934 ops/s
[info]                  ·gc.alloc.rate:                   1810.034 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.119 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1670.995 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3190.525 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 829253.530 ops/s
[info]                  ·gc.alloc.rate:                   1820.488 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.158 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2017.790 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3830.555 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 827895.711 ops/s
[info]                  ·gc.alloc.rate:                   1817.466 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.158 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1689.454 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3212.579 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce":
[info]   826479.858 ±(99.9%) 18280.143 ops/s [Average]
[info]   (min, avg, max) = (819244.446, 826479.858, 831427.670), stdev = 4747.295
[info]   CI (99.9%): [808199.715, 844760.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1814.291 ±(99.9%) 40.548 MB/sec [Average]
[info]   (min, avg, max) = (1798.244, 1814.291, 1825.220), stdev = 10.530
[info]   CI (99.9%): [1773.742, 1854.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   3456.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3456.000, 3456.001, 3456.001), stdev = 0.001
[info]   CI (99.9%): [3456.000, 3456.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.108 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.108, 0.166), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.206 ±(99.9%) 0.331 B/op [Average]
[info]   (min, avg, max) = (0.119, 0.206, 0.315), stdev = 0.086
[info]   CI (99.9%): [≈ 0, 0.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1801.907 ±(99.9%) 711.988 MB/sec [Average]
[info]   (min, avg, max) = (1642.462, 1801.907, 2017.790), stdev = 184.901
[info]   CI (99.9%): [1089.919, 2513.895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3433.181 ±(99.9%) 1390.152 B/op [Average]
[info]   (min, avg, max) = (3109.954, 3433.181, 3830.555), stdev = 361.018
[info]   CI (99.9%): [2043.029, 4823.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 0.837
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala
[info] # Run progress: 85.29% complete, ETA 00:08:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_11ae7560/target/5e31e36e/jackson-module-afterburner-2.9.4.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 581012.882 ops/s
[info] # Warmup Iteration   2: 1473196.137 ops/s
[info] # Warmup Iteration   3: 1474449.082 ops/s
[info] Iteration   1: 1459954.019 ops/s
[info]                  ·gc.alloc.rate:                   838.306 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.067 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      975.150 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1051.568 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1482408.592 ops/s
[info]                  ·gc.alloc.rate:                   851.254 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.155 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.310 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 693.792 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1478056.320 ops/s
[info]                  ·gc.alloc.rate:                   848.708 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.089 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      984.534 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1048.675 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1482390.817 ops/s
[info]                  ·gc.alloc.rate:                   851.150 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.066 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      659.873 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 700.846 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1484119.812 ops/s
[info]                  ·gc.alloc.rate:                   852.253 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.110 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      993.306 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1053.618 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala":
[info]   1477385.912 ±(99.9%) 38503.653 ops/s [Average]
[info]   (min, avg, max) = (1459954.019, 1477385.912, 1484119.812), stdev = 9999.277
[info]   CI (99.9%): [1438882.259, 1515889.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   848.334 ±(99.9%) 22.163 MB/sec [Average]
[info]   (min, avg, max) = (838.306, 848.334, 852.253), stdev = 5.756
[info]   CI (99.9%): [826.171, 870.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   904.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (904.000, 904.000, 904.000), stdev = 0.001
[info]   CI (99.9%): [904.000, 904.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.092, 0.146), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.097 ±(99.9%) 0.141 B/op [Average]
[info]   (min, avg, max) = (0.066, 0.097, 0.155), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   853.235 ±(99.9%) 691.728 MB/sec [Average]
[info]   (min, avg, max) = (653.310, 853.235, 993.306), stdev = 179.640
[info]   CI (99.9%): [161.507, 1544.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   909.700 ±(99.9%) 746.641 B/op [Average]
[info]   (min, avg, max) = (693.792, 909.700, 1053.618), stdev = 193.900
[info]   CI (99.9%): [163.059, 1656.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala
[info] # Run progress: 85.66% complete, ETA 00:08:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4310980.689 ops/s
[info] # Warmup Iteration   2: 4818007.462 ops/s
[info] # Warmup Iteration   3: 5025903.922 ops/s
[info] Iteration   1: 5038316.545 ops/s
[info]                  ·gc.alloc.rate:                   383.996 MB/sec
[info]                  ·gc.alloc.rate.norm:              120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.014 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.696 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 79.906 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 5040629.256 ops/s
[info]                  ·gc.alloc.rate:                   384.233 MB/sec
[info]                  ·gc.alloc.rate.norm:              120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.750 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.171 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      584.085 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 182.416 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 5048193.718 ops/s
[info]                  ·gc.alloc.rate:                   384.828 MB/sec
[info]                  ·gc.alloc.rate.norm:              120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.329 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 102.382 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 5035199.390 ops/s
[info]                  ·gc.alloc.rate:                   383.820 MB/sec
[info]                  ·gc.alloc.rate.norm:              120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      326.316 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 102.022 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 5035764.913 ops/s
[info]                  ·gc.alloc.rate:                   383.941 MB/sec
[info]                  ·gc.alloc.rate.norm:              120.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      326.390 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 102.013 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala":
[info]   5039620.764 ±(99.9%) 20250.664 ops/s [Average]
[info]   (min, avg, max) = (5035199.390, 5039620.764, 5048193.718), stdev = 5259.033
[info]   CI (99.9%): [5019370.101, 5059871.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   384.163 ±(99.9%) 1.543 MB/sec [Average]
[info]   (min, avg, max) = (383.820, 384.163, 384.828), stdev = 0.401
[info]   CI (99.9%): [382.620, 385.707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   120.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (120.000, 120.000, 120.000), stdev = 0.001
[info]   CI (99.9%): [120.000, 120.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.769 ±(99.9%) 6.416 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.769, 3.750), stdev = 1.666
[info]   CI (99.9%): [≈ 0, 7.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.240 ±(99.9%) 2.004 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.240, 1.171), stdev = 0.520
[info]   CI (99.9%): [≈ 0, 2.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   364.163 ±(99.9%) 488.114 MB/sec [Average]
[info]   (min, avg, max) = (255.696, 364.163, 584.085), stdev = 126.762
[info]   CI (99.9%): [≈ 0, 852.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   113.748 ±(99.9%) 152.392 B/op [Average]
[info]   (min, avg, max) = (79.906, 113.748, 182.416), stdev = 39.576
[info]   CI (99.9%): [≈ 0, 266.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 5.000), stdev = 1.789
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson
[info] # Run progress: 86.03% complete, ETA 00:08:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 192610.118 ops/s
[info] # Warmup Iteration   2: 548643.023 ops/s
[info] # Warmup Iteration   3: 550310.035 ops/s
[info] Iteration   1: 551021.874 ops/s
[info]                  ·gc.alloc.rate:                   1867.398 MB/sec
[info]                  ·gc.alloc.rate.norm:              5336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.297 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1987.251 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5678.474 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 546765.641 ops/s
[info]                  ·gc.alloc.rate:                   1853.293 MB/sec
[info]                  ·gc.alloc.rate.norm:              5336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.479 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1670.318 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4809.181 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 550541.087 ops/s
[info]                  ·gc.alloc.rate:                   1865.839 MB/sec
[info]                  ·gc.alloc.rate.norm:              5336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.238 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2017.609 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5770.039 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 551850.236 ops/s
[info]                  ·gc.alloc.rate:                   1869.986 MB/sec
[info]                  ·gc.alloc.rate.norm:              5336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.297 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1687.746 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4815.977 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 544730.742 ops/s
[info]                  ·gc.alloc.rate:                   1846.476 MB/sec
[info]                  ·gc.alloc.rate.norm:              5336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.361 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1693.589 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4894.186 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson":
[info]   548981.916 ±(99.9%) 11837.844 ops/s [Average]
[info]   (min, avg, max) = (544730.742, 548981.916, 551850.236), stdev = 3074.250
[info]   CI (99.9%): [537144.072, 560819.760] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1860.598 ±(99.9%) 39.206 MB/sec [Average]
[info]   (min, avg, max) = (1846.476, 1860.598, 1869.986), stdev = 10.182
[info]   CI (99.9%): [1821.392, 1899.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5336.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5336.001, 5336.001, 5336.001), stdev = 0.001
[info]   CI (99.9%): [5336.001, 5336.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.117 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.117, 0.166), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.334 ±(99.9%) 0.354 B/op [Average]
[info]   (min, avg, max) = (0.238, 0.334, 0.479), stdev = 0.092
[info]   CI (99.9%): [≈ 0, 0.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1811.303 ±(99.9%) 673.916 MB/sec [Average]
[info]   (min, avg, max) = (1670.318, 1811.303, 2017.609), stdev = 175.014
[info]   CI (99.9%): [1137.386, 2485.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   5193.571 ±(99.9%) 1874.012 B/op [Average]
[info]   (min, avg, max) = (4809.181, 5193.571, 5770.039), stdev = 486.675
[info]   CI (99.9%): [3319.560, 7067.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala
[info] # Run progress: 86.40% complete, ETA 00:07:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3411758.677 ops/s
[info] # Warmup Iteration   2: 3474129.584 ops/s
[info] # Warmup Iteration   3: 3560377.141 ops/s
[info] Iteration   1: 3566297.602 ops/s
[info]                  ·gc.alloc.rate:                   1685.178 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1650.364 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 728.630 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 3538214.181 ops/s
[info]                  ·gc.alloc.rate:                   1672.021 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.056 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1661.206 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 739.188 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 3572802.935 ops/s
[info]                  ·gc.alloc.rate:                   1688.375 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1672.761 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 737.120 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 3570526.046 ops/s
[info]                  ·gc.alloc.rate:                   1687.544 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.037 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1682.256 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 741.669 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 3568490.492 ops/s
[info]                  ·gc.alloc.rate:                   1686.474 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1688.176 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 744.751 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala":
[info]   3563266.251 ±(99.9%) 54719.159 ops/s [Average]
[info]   (min, avg, max) = (3538214.181, 3563266.251, 3572802.935), stdev = 14210.392
[info]   CI (99.9%): [3508547.092, 3617985.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1683.919 ±(99.9%) 26.022 MB/sec [Average]
[info]   (min, avg, max) = (1672.021, 1683.919, 1688.375), stdev = 6.758
[info]   CI (99.9%): [1657.897, 1709.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   744.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (744.000, 744.000, 744.000), stdev = 0.001
[info]   CI (99.9%): [744.000, 744.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.096 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.125), stdev = 0.024
[info]   CI (99.9%): [0.004, 0.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.042 ±(99.9%) 0.041 B/op [Average]
[info]   (min, avg, max) = (0.028, 0.042, 0.056), stdev = 0.011
[info]   CI (99.9%): [0.001, 0.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1670.953 ±(99.9%) 59.235 MB/sec [Average]
[info]   (min, avg, max) = (1650.364, 1670.953, 1688.176), stdev = 15.383
[info]   CI (99.9%): [1611.718, 1730.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   738.271 ±(99.9%) 23.474 B/op [Average]
[info]   (min, avg, max) = (728.630, 738.271, 744.751), stdev = 6.096
[info]   CI (99.9%): [714.797, 761.746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson
[info] # Run progress: 86.76% complete, ETA 00:07:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 110244.895 ops/s
[info] # Warmup Iteration   2: 311569.114 ops/s
[info] # Warmup Iteration   3: 311638.117 ops/s
[info] Iteration   1: 311461.964 ops/s
[info]                  ·gc.alloc.rate:                   1658.340 MB/sec
[info]                  ·gc.alloc.rate.norm:              8384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.631 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1651.498 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8349.414 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 311809.868 ops/s
[info]                  ·gc.alloc.rate:                   1660.525 MB/sec
[info]                  ·gc.alloc.rate.norm:              8384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.630 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1666.528 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8414.310 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 311361.441 ops/s
[info]                  ·gc.alloc.rate:                   1658.179 MB/sec
[info]                  ·gc.alloc.rate.norm:              8384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.316 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1677.497 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8481.674 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 311282.053 ops/s
[info]                  ·gc.alloc.rate:                   1657.751 MB/sec
[info]                  ·gc.alloc.rate.norm:              8384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.421 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1685.420 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8523.940 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 311490.019 ops/s
[info]                  ·gc.alloc.rate:                   1658.922 MB/sec
[info]                  ·gc.alloc.rate.norm:              8384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.526 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1691.141 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8546.830 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson":
[info]   311481.069 ±(99.9%) 776.056 ops/s [Average]
[info]   (min, avg, max) = (311282.053, 311481.069, 311809.868), stdev = 201.539
[info]   CI (99.9%): [310705.013, 312257.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1658.743 ±(99.9%) 4.162 MB/sec [Average]
[info]   (min, avg, max) = (1657.751, 1658.743, 1660.525), stdev = 1.081
[info]   CI (99.9%): [1654.581, 1662.906] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   8384.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8384.001, 8384.001, 8384.001), stdev = 0.001
[info]   CI (99.9%): [8384.001, 8384.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.100 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.100, 0.125), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.505 ±(99.9%) 0.527 B/op [Average]
[info]   (min, avg, max) = (0.316, 0.505, 0.631), stdev = 0.137
[info]   CI (99.9%): [≈ 0, 1.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1674.417 ±(99.9%) 60.815 MB/sec [Average]
[info]   (min, avg, max) = (1651.498, 1674.417, 1691.141), stdev = 15.794
[info]   CI (99.9%): [1613.601, 1735.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   8463.234 ±(99.9%) 312.603 B/op [Average]
[info]   (min, avg, max) = (8349.414, 8463.234, 8546.830), stdev = 81.182
[info]   CI (99.9%): [8150.631, 8775.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce
[info] # Run progress: 87.13% complete, ETA 00:07:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 265156.725 ops/s
[info] # Warmup Iteration   2: 460963.204 ops/s
[info] # Warmup Iteration   3: 469060.034 ops/s
[info] Iteration   1: 471468.050 ops/s
[info]                  ·gc.alloc.rate:                   1221.810 MB/sec
[info]                  ·gc.alloc.rate.norm:              4080.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.139 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      977.554 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3264.354 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 462915.907 ops/s
[info]                  ·gc.alloc.rate:                   1199.523 MB/sec
[info]                  ·gc.alloc.rate.norm:              4080.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.495 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1308.340 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4450.124 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 462765.737 ops/s
[info]                  ·gc.alloc.rate:                   1199.284 MB/sec
[info]                  ·gc.alloc.rate.norm:              4080.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.354 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1317.137 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4480.939 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 466897.811 ops/s
[info]                  ·gc.alloc.rate:                   1210.102 MB/sec
[info]                  ·gc.alloc.rate.norm:              4080.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.210 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      993.925 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3351.134 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 469474.652 ops/s
[info]                  ·gc.alloc.rate:                   1216.704 MB/sec
[info]                  ·gc.alloc.rate.norm:              4080.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.279 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1332.496 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4468.288 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce":
[info]   466704.431 ±(99.9%) 14946.974 ops/s [Average]
[info]   (min, avg, max) = (462765.737, 466704.431, 471468.050), stdev = 3881.682
[info]   CI (99.9%): [451757.458, 481651.405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1209.485 ±(99.9%) 38.875 MB/sec [Average]
[info]   (min, avg, max) = (1199.284, 1209.485, 1221.810), stdev = 10.096
[info]   CI (99.9%): [1170.610, 1248.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   4080.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4080.001, 4080.001, 4080.001), stdev = 0.001
[info]   CI (99.9%): [4080.001, 4080.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.087, 0.146), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.296 ±(99.9%) 0.529 B/op [Average]
[info]   (min, avg, max) = (0.139, 0.296, 0.495), stdev = 0.137
[info]   CI (99.9%): [≈ 0, 0.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1185.890 ±(99.9%) 704.698 MB/sec [Average]
[info]   (min, avg, max) = (977.554, 1185.890, 1332.496), stdev = 183.008
[info]   CI (99.9%): [481.192, 1890.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4002.968 ±(99.9%) 2447.026 B/op [Average]
[info]   (min, avg, max) = (3264.354, 4002.968, 4480.939), stdev = 635.485
[info]   CI (99.9%): [1555.941, 6449.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala
[info] # Run progress: 87.50% complete, ETA 00:07:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2426197.239 ops/s
[info] # Warmup Iteration   2: 2869930.199 ops/s
[info] # Warmup Iteration   3: 2890098.563 ops/s
[info] Iteration   1: 2869680.455 ops/s
[info]                  ·gc.alloc.rate:                   583.348 MB/sec
[info]                  ·gc.alloc.rate.norm:              320.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.770 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.068 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.680 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 360.227 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 2909201.642 ops/s
[info]                  ·gc.alloc.rate:                   591.294 MB/sec
[info]                  ·gc.alloc.rate.norm:              320.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.034 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.605 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 353.181 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 2827960.219 ops/s
[info]                  ·gc.alloc.rate:                   574.804 MB/sec
[info]                  ·gc.alloc.rate.norm:              320.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      326.292 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 181.651 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 2869252.809 ops/s
[info]                  ·gc.alloc.rate:                   583.221 MB/sec
[info]                  ·gc.alloc.rate.norm:              320.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.630 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 358.083 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 2871277.288 ops/s
[info]                  ·gc.alloc.rate:                   583.608 MB/sec
[info]                  ·gc.alloc.rate.norm:              320.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.034 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.922 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 358.006 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala":
[info]   2869474.483 ±(99.9%) 110685.468 ops/s [Average]
[info]   (min, avg, max) = (2827960.219, 2869474.483, 2909201.642), stdev = 28744.665
[info]   CI (99.9%): [2758789.014, 2980159.951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   583.255 ±(99.9%) 22.468 MB/sec [Average]
[info]   (min, avg, max) = (574.804, 583.255, 591.294), stdev = 5.835
[info]   CI (99.9%): [560.787, 605.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   320.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (320.000, 320.000, 320.000), stdev = 0.001
[info]   CI (99.9%): [320.000, 320.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.787 ±(99.9%) 6.420 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.787, 3.770), stdev = 1.667
[info]   CI (99.9%): [≈ 0, 7.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.432 ±(99.9%) 3.522 B/op [Average]
[info]   (min, avg, max) = (0.011, 0.432, 2.068), stdev = 0.915
[info]   CI (99.9%): [≈ 0, 3.954] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   588.226 ±(99.9%) 563.870 MB/sec [Average]
[info]   (min, avg, max) = (326.292, 588.226, 656.680), stdev = 146.435
[info]   CI (99.9%): [24.356, 1152.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   322.230 ±(99.9%) 302.769 B/op [Average]
[info]   (min, avg, max) = (181.651, 322.230, 360.227), stdev = 78.628
[info]   CI (99.9%): [19.461, 624.999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 4.000), stdev = 1.095
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson
[info] # Run progress: 87.87% complete, ETA 00:07:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 90080.982 ops/s
[info] # Warmup Iteration   2: 339663.451 ops/s
[info] # Warmup Iteration   3: 345773.977 ops/s
[info] Iteration   1: 345032.890 ops/s
[info]                  ·gc.alloc.rate:                   1323.554 MB/sec
[info]                  ·gc.alloc.rate.norm:              6040.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.190 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1311.643 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5985.647 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 345182.201 ops/s
[info]                  ·gc.alloc.rate:                   1324.542 MB/sec
[info]                  ·gc.alloc.rate.norm:              6040.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.570 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1322.835 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6032.216 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 344880.154 ops/s
[info]                  ·gc.alloc.rate:                   1323.317 MB/sec
[info]                  ·gc.alloc.rate.norm:              6040.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.380 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1331.365 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6076.737 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 340427.127 ops/s
[info]                  ·gc.alloc.rate:                   1306.042 MB/sec
[info]                  ·gc.alloc.rate.norm:              6040.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.289 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.425 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6189.759 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 341241.361 ops/s
[info]                  ·gc.alloc.rate:                   1309.184 MB/sec
[info]                  ·gc.alloc.rate.norm:              6040.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.288 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.759 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6204.128 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson":
[info]   343352.747 ±(99.9%) 8931.493 ops/s [Average]
[info]   (min, avg, max) = (340427.127, 343352.747, 345182.201), stdev = 2319.480
[info]   CI (99.9%): [334421.254, 352284.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1317.328 ±(99.9%) 34.461 MB/sec [Average]
[info]   (min, avg, max) = (1306.042, 1317.328, 1324.542), stdev = 8.949
[info]   CI (99.9%): [1282.867, 1351.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   6040.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6040.001, 6040.001, 6040.001), stdev = 0.001
[info]   CI (99.9%): [6040.001, 6040.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.125), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.343 ±(99.9%) 0.552 B/op [Average]
[info]   (min, avg, max) = (0.190, 0.343, 0.570), stdev = 0.143
[info]   CI (99.9%): [≈ 0, 0.895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1329.805 ±(99.9%) 50.161 MB/sec [Average]
[info]   (min, avg, max) = (1311.643, 1329.805, 1344.759), stdev = 13.027
[info]   CI (99.9%): [1279.644, 1379.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   6097.698 ±(99.9%) 370.769 B/op [Average]
[info]   (min, avg, max) = (5985.647, 6097.698, 6204.128), stdev = 96.288
[info]   CI (99.9%): [5726.928, 6468.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce
[info] # Run progress: 88.24% complete, ETA 00:06:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 312467.634 ops/s
[info] # Warmup Iteration   2: 662525.931 ops/s
[info] # Warmup Iteration   3: 693771.551 ops/s
[info] Iteration   1: 689684.321 ops/s
[info]                  ·gc.alloc.rate:                   2124.446 MB/sec
[info]                  ·gc.alloc.rate.norm:              4848.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.285 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1977.743 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4513.224 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 692562.225 ops/s
[info]                  ·gc.alloc.rate:                   2132.989 MB/sec
[info]                  ·gc.alloc.rate.norm:              4848.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.284 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2330.877 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5297.773 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 694082.030 ops/s
[info]                  ·gc.alloc.rate:                   2137.312 MB/sec
[info]                  ·gc.alloc.rate.norm:              4848.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.047 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2013.646 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4567.491 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 690934.967 ops/s
[info]                  ·gc.alloc.rate:                   2127.863 MB/sec
[info]                  ·gc.alloc.rate.norm:              4848.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.237 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2025.334 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4614.404 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 692230.949 ops/s
[info]                  ·gc.alloc.rate:                   2132.397 MB/sec
[info]                  ·gc.alloc.rate.norm:              4848.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.237 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2371.546 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5391.705 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce":
[info]   691898.898 ±(99.9%) 6428.915 ops/s [Average]
[info]   (min, avg, max) = (689684.321, 691898.898, 694082.030), stdev = 1669.569
[info]   CI (99.9%): [685469.983, 698327.814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate":
[info]   2131.002 ±(99.9%) 19.113 MB/sec [Average]
[info]   (min, avg, max) = (2124.446, 2131.002, 2137.312), stdev = 4.964
[info]   CI (99.9%): [2111.888, 2150.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4848.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4848.001, 4848.001, 4848.001), stdev = 0.001
[info]   CI (99.9%): [4848.001, 4848.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.096 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.096, 0.125), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.218 ±(99.9%) 0.379 B/op [Average]
[info]   (min, avg, max) = (0.047, 0.218, 0.285), stdev = 0.098
[info]   CI (99.9%): [≈ 0, 0.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2143.829 ±(99.9%) 734.189 MB/sec [Average]
[info]   (min, avg, max) = (1977.743, 2143.829, 2371.546), stdev = 190.667
[info]   CI (99.9%): [1409.640, 2878.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4876.919 ±(99.9%) 1655.167 B/op [Average]
[info]   (min, avg, max) = (4513.224, 4876.919, 5391.705), stdev = 429.842
[info]   CI (99.9%): [3221.752, 6532.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.count":
[info]   32.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala
[info] # Run progress: 88.60% complete, ETA 00:06:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 473216.135 ops/s
[info] # Warmup Iteration   2: 1539365.836 ops/s
[info] # Warmup Iteration   3: 1543107.918 ops/s
[info] Iteration   1: 1536839.588 ops/s
[info]                  ·gc.alloc.rate:                   1163.648 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.085 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1309.199 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1341.098 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1547150.559 ops/s
[info]                  ·gc.alloc.rate:                   1171.379 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.106 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      989.252 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1006.667 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 1558850.769 ops/s
[info]                  ·gc.alloc.rate:                   1180.484 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.063 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1328.132 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1341.088 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 1556347.035 ops/s
[info]                  ·gc.alloc.rate:                   1178.330 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.084 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1001.205 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1012.820 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1559534.514 ops/s
[info]                  ·gc.alloc.rate:                   1180.903 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.105 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1353.917 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala":
[info]   1551744.493 ±(99.9%) 37314.875 ops/s [Average]
[info]   (min, avg, max) = (1536839.588, 1551744.493, 1559534.514), stdev = 9690.555
[info]   CI (99.9%): [1514429.618, 1589059.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1174.949 ±(99.9%) 28.426 MB/sec [Average]
[info]   (min, avg, max) = (1163.648, 1174.949, 1180.903), stdev = 7.382
[info]   CI (99.9%): [1146.523, 1203.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1192.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1192.000, 1192.000, 1192.000), stdev = 0.001
[info]   CI (99.9%): [1192.000, 1192.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.104), stdev = 0.017
[info]   CI (99.9%): [0.020, 0.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.089 ±(99.9%) 0.068 B/op [Average]
[info]   (min, avg, max) = (0.063, 0.089, 0.106), stdev = 0.018
[info]   CI (99.9%): [0.021, 0.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1193.820 ±(99.9%) 699.649 MB/sec [Average]
[info]   (min, avg, max) = (989.252, 1193.820, 1341.312), stdev = 181.696
[info]   CI (99.9%): [494.172, 1893.469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1211.118 ±(99.9%) 708.195 B/op [Average]
[info]   (min, avg, max) = (1006.667, 1211.118, 1353.917), stdev = 183.916
[info]   CI (99.9%): [502.923, 1919.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala
[info] # Run progress: 88.97% complete, ETA 00:06:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6423192.456 ops/s
[info] # Warmup Iteration   2: 6750114.019 ops/s
[info] # Warmup Iteration   3: 7034238.521 ops/s
[info] Iteration   1: 7024222.363 ops/s
[info]                  ·gc.alloc.rate:                   214.157 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.008 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.720 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57.316 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 7029029.665 ops/s
[info]                  ·gc.alloc.rate:                   214.294 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.718 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57.279 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 7008519.640 ops/s
[info]                  ·gc.alloc.rate:                   213.747 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.020 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.799 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57.444 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 7008276.786 ops/s
[info]                  ·gc.alloc.rate:      213.688 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 7020682.995 ops/s
[info]                  ·gc.alloc.rate:                   214.059 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.716 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57.341 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala":
[info]   7018146.290 ±(99.9%) 36116.131 ops/s [Average]
[info]   (min, avg, max) = (7008276.786, 7018146.290, 7029029.665), stdev = 9379.244
[info]   CI (99.9%): [6982030.159, 7054262.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   213.989 ±(99.9%) 1.011 MB/sec [Average]
[info]   (min, avg, max) = (213.688, 213.989, 214.294), stdev = 0.263
[info]   CI (99.9%): [212.978, 215.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.006 ±(99.9%) 0.034 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.020), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.001 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.005), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   204.591 ±(99.9%) 440.397 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.591, 255.799), stdev = 114.370
[info]   CI (99.9%): [≈ 0, 644.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   45.876 ±(99.9%) 98.752 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 45.876, 57.444), stdev = 25.645
[info]   CI (99.9%): [≈ 0, 144.627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.095
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson
[info] # Run progress: 89.34% complete, ETA 00:06:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 43650.614 ops/s
[info] # Warmup Iteration   2: 238992.412 ops/s
[info] # Warmup Iteration   3: 240577.303 ops/s
[info] Iteration   1: 242131.231 ops/s
[info]                  ·gc.alloc.rate:                   1685.291 MB/sec
[info]                  ·gc.alloc.rate.norm:              10960.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.812 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1647.515 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10714.335 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 241515.162 ops/s
[info]                  ·gc.alloc.rate:                   1681.942 MB/sec
[info]                  ·gc.alloc.rate.norm:              10960.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.814 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1664.485 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10846.245 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 239563.729 ops/s
[info]                  ·gc.alloc.rate:                   1667.766 MB/sec
[info]                  ·gc.alloc.rate.norm:              10960.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.684 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1675.118 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11008.322 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 241762.679 ops/s
[info]                  ·gc.alloc.rate:                   1683.755 MB/sec
[info]                  ·gc.alloc.rate.norm:              10960.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.678 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1684.758 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10966.527 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 241938.110 ops/s
[info]                  ·gc.alloc.rate:                   1684.423 MB/sec
[info]                  ·gc.alloc.rate.norm:              10960.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.677 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1690.292 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10998.185 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson":
[info]   241382.182 ±(99.9%) 4010.665 ops/s [Average]
[info]   (min, avg, max) = (239563.729, 241382.182, 242131.231), stdev = 1041.557
[info]   CI (99.9%): [237371.517, 245392.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1680.635 ±(99.9%) 28.106 MB/sec [Average]
[info]   (min, avg, max) = (1667.766, 1680.635, 1685.291), stdev = 7.299
[info]   CI (99.9%): [1652.530, 1708.741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   10960.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10960.002, 10960.002, 10960.002), stdev = 0.001
[info]   CI (99.9%): [10960.001, 10960.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.112 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.104, 0.112, 0.125), stdev = 0.011
[info]   CI (99.9%): [0.069, 0.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.733 ±(99.9%) 0.282 B/op [Average]
[info]   (min, avg, max) = (0.677, 0.733, 0.814), stdev = 0.073
[info]   CI (99.9%): [0.451, 1.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1672.434 ±(99.9%) 65.634 MB/sec [Average]
[info]   (min, avg, max) = (1647.515, 1672.434, 1690.292), stdev = 17.045
[info]   CI (99.9%): [1606.800, 1738.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   10906.723 ±(99.9%) 483.001 B/op [Average]
[info]   (min, avg, max) = (10714.335, 10906.723, 11008.322), stdev = 125.434
[info]   CI (99.9%): [10423.721, 11389.724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce
[info] # Run progress: 89.71% complete, ETA 00:05:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 463176.244 ops/s
[info] # Warmup Iteration   2: 924714.800 ops/s
[info] # Warmup Iteration   3: 919934.769 ops/s
[info] Iteration   1: 931178.667 ops/s
[info]                  ·gc.alloc.rate:                   1499.793 MB/sec
[info]                  ·gc.alloc.rate.norm:              2536.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.070 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1633.635 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2762.314 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 946503.355 ops/s
[info]                  ·gc.alloc.rate:                   1524.816 MB/sec
[info]                  ·gc.alloc.rate.norm:              2536.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.138 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1645.382 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2736.519 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 948321.303 ops/s
[info]                  ·gc.alloc.rate:                   1527.687 MB/sec
[info]                  ·gc.alloc.rate.norm:              2536.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.138 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1326.670 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2202.308 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 945031.575 ops/s
[info]                  ·gc.alloc.rate:                   1522.687 MB/sec
[info]                  ·gc.alloc.rate.norm:              2536.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.104 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1669.900 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2781.180 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 946309.013 ops/s
[info]                  ·gc.alloc.rate:                   1524.485 MB/sec
[info]                  ·gc.alloc.rate.norm:              2536.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.173 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.620 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2233.467 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce":
[info]   943468.782 ±(99.9%) 26838.170 ops/s [Average]
[info]   (min, avg, max) = (931178.667, 943468.782, 948321.303), stdev = 6969.788
[info]   CI (99.9%): [916630.612, 970306.953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1519.893 ±(99.9%) 43.815 MB/sec [Average]
[info]   (min, avg, max) = (1499.793, 1519.893, 1527.687), stdev = 11.379
[info]   CI (99.9%): [1476.079, 1563.708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2536.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2536.000, 2536.000, 2536.000), stdev = 0.001
[info]   CI (99.9%): [2536.000, 2536.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.125 ±(99.9%) 0.150 B/op [Average]
[info]   (min, avg, max) = (0.070, 0.125, 0.173), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1523.641 ±(99.9%) 666.609 MB/sec [Average]
[info]   (min, avg, max) = (1326.670, 1523.641, 1669.900), stdev = 173.116
[info]   CI (99.9%): [857.032, 2190.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2543.158 ±(99.9%) 1145.786 B/op [Average]
[info]   (min, avg, max) = (2202.308, 2543.158, 2781.180), stdev = 297.557
[info]   CI (99.9%): [1397.372, 3688.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala
[info] # Run progress: 90.07% complete, ETA 00:05:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_11ae7560/target/5e31e36e/jackson-module-afterburner-2.9.4.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 788311.152 ops/s
[info] # Warmup Iteration   2: 2547075.266 ops/s
[info] # Warmup Iteration   3: 2568854.257 ops/s
[info] Iteration   1: 2502172.174 ops/s
[info]                  ·gc.alloc.rate:                   1029.832 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      978.471 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 615.682 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 2497426.774 ops/s
[info]                  ·gc.alloc.rate:                   1028.081 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.079 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      985.430 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 621.117 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 2513437.346 ops/s
[info]                  ·gc.alloc.rate:                   1034.588 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.091 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1322.628 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 828.411 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 2521481.464 ops/s
[info]                  ·gc.alloc.rate:                   1037.839 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      997.228 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 622.643 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2525314.525 ops/s
[info]                  ·gc.alloc.rate:                   1039.480 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.078 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1002.580 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 624.997 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala":
[info]   2511966.457 ±(99.9%) 46295.893 ops/s [Average]
[info]   (min, avg, max) = (2497426.774, 2511966.457, 2525314.525), stdev = 12022.896
[info]   CI (99.9%): [2465670.564, 2558262.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1033.964 ±(99.9%) 19.012 MB/sec [Average]
[info]   (min, avg, max) = (1028.081, 1033.964, 1039.480), stdev = 4.937
[info]   CI (99.9%): [1014.952, 1052.977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   648.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (648.000, 648.000, 648.000), stdev = 0.001
[info]   CI (99.9%): [648.000, 648.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.104 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.104, 0.146), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.065 ±(99.9%) 0.094 B/op [Average]
[info]   (min, avg, max) = (0.039, 0.065, 0.091), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1057.267 ±(99.9%) 572.379 MB/sec [Average]
[info]   (min, avg, max) = (978.471, 1057.267, 1322.628), stdev = 148.645
[info]   CI (99.9%): [484.889, 1629.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   662.570 ±(99.9%) 357.228 B/op [Average]
[info]   (min, avg, max) = (615.682, 662.570, 828.411), stdev = 92.771
[info]   CI (99.9%): [305.342, 1019.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 5.000), stdev = 0.894
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala
[info] # Run progress: 90.44% complete, ETA 00:05:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4206472.073 ops/s
[info] # Warmup Iteration   2: 5980446.808 ops/s
[info] # Warmup Iteration   3: 6025266.712 ops/s
[info] Iteration   1: 6088685.061 ops/s
[info]                  ·gc.alloc.rate:                   680.733 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.658 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 169.517 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 6023134.812 ops/s
[info]                  ·gc.alloc.rate:                   673.301 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.248 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 170.758 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 6032775.026 ops/s
[info]                  ·gc.alloc.rate:                   674.543 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.695 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 170.300 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 6093201.878 ops/s
[info]                  ·gc.alloc.rate:                   681.235 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.299 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 168.783 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 6067546.722 ops/s
[info]                  ·gc.alloc.rate:                   678.316 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.892 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 169.922 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala":
[info]   6061068.700 ±(99.9%) 122929.676 ops/s [Average]
[info]   (min, avg, max) = (6023134.812, 6061068.700, 6093201.878), stdev = 31924.446
[info]   CI (99.9%): [5938139.024, 6183998.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   677.625 ±(99.9%) 13.799 MB/sec [Average]
[info]   (min, avg, max) = (673.301, 677.625, 681.235), stdev = 3.584
[info]   CI (99.9%): [663.826, 691.425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   176.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (176.000, 176.000, 176.000), stdev = 0.001
[info]   CI (99.9%): [176.000, 176.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.058, 0.104), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.015 ±(99.9%) 0.035 B/op [Average]
[info]   (min, avg, max) = (0.005, 0.015, 0.027), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   653.958 ±(99.9%) 4.831 MB/sec [Average]
[info]   (min, avg, max) = (652.695, 653.958, 655.658), stdev = 1.255
[info]   CI (99.9%): [649.127, 658.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   169.856 ±(99.9%) 2.909 B/op [Average]
[info]   (min, avg, max) = (168.783, 169.856, 170.758), stdev = 0.755
[info]   CI (99.9%): [166.948, 172.765] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 90.81% complete, ETA 00:05:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4068218.287 ops/s
[info] # Warmup Iteration   2: 6059823.129 ops/s
[info] # Warmup Iteration   3: 6042009.811 ops/s
[info] Iteration   1: 6076492.036 ops/s
[info]                  ·gc.alloc.rate:                   370.509 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.705 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66.254 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 6116843.021 ops/s
[info]                  ·gc.alloc.rate:                   372.888 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.046 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.656 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65.819 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 6121693.913 ops/s
[info]                  ·gc.alloc.rate:                   373.270 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.711 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.954 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.633 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 84.520 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 5942784.865 ops/s
[info]                  ·gc.alloc.rate:                   362.381 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.640 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 173.689 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 6003738.914 ops/s
[info]                  ·gc.alloc.rate:                   366.111 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      326.967 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 85.736 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc":
[info]   6052310.550 ±(99.9%) 297761.575 ops/s [Average]
[info]   (min, avg, max) = (5942784.865, 6052310.550, 6121693.913), stdev = 77327.735
[info]   CI (99.9%): [5754548.975, 6350072.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   369.032 ±(99.9%) 18.039 MB/sec [Average]
[info]   (min, avg, max) = (362.381, 369.032, 373.270), stdev = 4.685
[info]   CI (99.9%): [350.993, 387.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   96.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (96.000, 96.000, 96.000), stdev = 0.001
[info]   CI (99.9%): [96.000, 96.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   0.764 ±(99.9%) 6.344 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.764, 3.711), stdev = 1.648
[info]   CI (99.9%): [≈ 0, 7.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   0.197 ±(99.9%) 1.631 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.197, 0.954), stdev = 0.424
[info]   CI (99.9%): [≈ 0, 1.828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   364.521 ±(99.9%) 641.861 MB/sec [Average]
[info]   (min, avg, max) = (255.656, 364.521, 655.640), stdev = 166.689
[info]   CI (99.9%): [≈ 0, 1006.381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   95.204 ±(99.9%) 172.907 B/op [Average]
[info]   (min, avg, max) = (65.819, 95.204, 173.689), stdev = 44.903
[info]   CI (99.9%): [≈ 0, 268.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 1.000
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson
[info] # Run progress: 91.18% complete, ETA 00:05:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 42168.497 ops/s
[info] # Warmup Iteration   2: 345611.931 ops/s
[info] # Warmup Iteration   3: 357058.133 ops/s
[info] Iteration   1: 355769.724 ops/s
[info]                  ·gc.alloc.rate:                   1961.861 MB/sec
[info]                  ·gc.alloc.rate.norm:              8680.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.460 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1984.830 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8781.624 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 359542.719 ops/s
[info]                  ·gc.alloc.rate:                   1982.617 MB/sec
[info]                  ·gc.alloc.rate.norm:              8680.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.547 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2004.093 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8774.024 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 361627.506 ops/s
[info]                  ·gc.alloc.rate:                   1994.480 MB/sec
[info]                  ·gc.alloc.rate.norm:              8680.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.362 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2018.485 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8784.472 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 358782.107 ops/s
[info]                  ·gc.alloc.rate:                   1978.247 MB/sec
[info]                  ·gc.alloc.rate.norm:              8680.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.457 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2027.231 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8894.929 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 356973.452 ops/s
[info]                  ·gc.alloc.rate:                   1968.677 MB/sec
[info]                  ·gc.alloc.rate.norm:              8680.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.459 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033.630 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8966.380 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson":
[info]   358539.102 ±(99.9%) 8765.027 ops/s [Average]
[info]   (min, avg, max) = (355769.724, 358539.102, 361627.506), stdev = 2276.250
[info]   CI (99.9%): [349774.074, 367304.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1977.176 ±(99.9%) 48.592 MB/sec [Average]
[info]   (min, avg, max) = (1961.861, 1977.176, 1994.480), stdev = 12.619
[info]   CI (99.9%): [1928.585, 2025.768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   8680.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8680.001, 8680.001, 8680.001), stdev = 0.001
[info]   CI (99.9%): [8680.001, 8680.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.104 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.104, 0.125), stdev = 0.015
[info]   CI (99.9%): [0.047, 0.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.457 ±(99.9%) 0.251 B/op [Average]
[info]   (min, avg, max) = (0.362, 0.457, 0.547), stdev = 0.065
[info]   CI (99.9%): [0.206, 0.708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   2013.654 ±(99.9%) 75.284 MB/sec [Average]
[info]   (min, avg, max) = (1984.830, 2013.654, 2033.630), stdev = 19.551
[info]   CI (99.9%): [1938.370, 2088.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   8840.286 ±(99.9%) 332.545 B/op [Average]
[info]   (min, avg, max) = (8774.024, 8840.286, 8966.380), stdev = 86.361
[info]   CI (99.9%): [8507.741, 9172.831] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 8.000), stdev = 0.837
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce
[info] # Run progress: 91.54% complete, ETA 00:04:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3025601.128 ops/s
[info] # Warmup Iteration   2: 4247493.118 ops/s
[info] # Warmup Iteration   3: 4282705.527 ops/s
[info] Iteration   1: 4244444.134 ops/s
[info]                  ·gc.alloc.rate:                   3192.785 MB/sec
[info]                  ·gc.alloc.rate.norm:              1184.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3356.159 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1244.585 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 4270869.640 ops/s
[info]                  ·gc.alloc.rate:                   3211.956 MB/sec
[info]                  ·gc.alloc.rate.norm:              1184.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.054 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3043.150 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1121.774 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 4289418.322 ops/s
[info]                  ·gc.alloc.rate:                   3225.530 MB/sec
[info]                  ·gc.alloc.rate.norm:              1184.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.061 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3393.003 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1245.475 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 4265519.389 ops/s
[info]                  ·gc.alloc.rate:                   3207.954 MB/sec
[info]                  ·gc.alloc.rate.norm:              1184.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.031 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3060.485 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1129.572 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 4239450.942 ops/s
[info]                  ·gc.alloc.rate:                   3188.483 MB/sec
[info]                  ·gc.alloc.rate.norm:              1184.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.229 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.085 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3402.869 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1263.609 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce":
[info]   4261940.486 ±(99.9%) 78431.098 ops/s [Average]
[info]   (min, avg, max) = (4239450.942, 4261940.486, 4289418.322), stdev = 20368.307
[info]   CI (99.9%): [4183509.388, 4340371.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   3205.341 ±(99.9%) 57.761 MB/sec [Average]
[info]   (min, avg, max) = (3188.483, 3205.341, 3225.530), stdev = 15.000
[info]   CI (99.9%): [3147.580, 3263.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   1184.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1184.000, 1184.000, 1184.000), stdev = 0.001
[info]   CI (99.9%): [1184.000, 1184.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.150 ±(99.9%) 0.207 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.150, 0.229), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.055 ±(99.9%) 0.077 B/op [Average]
[info]   (min, avg, max) = (0.031, 0.055, 0.085), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   3251.133 ±(99.9%) 704.218 MB/sec [Average]
[info]   (min, avg, max) = (3043.150, 3251.133, 3402.869), stdev = 182.883
[info]   CI (99.9%): [2546.915, 3955.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1201.003 ±(99.9%) 266.616 B/op [Average]
[info]   (min, avg, max) = (1121.774, 1201.003, 1263.609), stdev = 69.239
[info]   CI (99.9%): [934.388, 1467.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.count":
[info]   48.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.600, 10.000), stdev = 0.548
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.800, 10.000), stdev = 0.837
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala
[info] # Run progress: 91.91% complete, ETA 00:04:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1842335.056 ops/s
[info] # Warmup Iteration   2: 4150562.768 ops/s
[info] # Warmup Iteration   3: 4188056.983 ops/s
[info] Iteration   1: 4180956.952 ops/s
[info]                  ·gc.alloc.rate:                   2166.938 MB/sec
[info]                  ·gc.alloc.rate.norm:              816.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.031 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2325.535 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 875.723 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 4229643.867 ops/s
[info]                  ·gc.alloc.rate:                   2192.408 MB/sec
[info]                  ·gc.alloc.rate.norm:              816.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2011.595 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 748.703 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 4192319.669 ops/s
[info]                  ·gc.alloc.rate:                   2172.735 MB/sec
[info]                  ·gc.alloc.rate.norm:              816.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2361.022 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 886.714 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 4188822.905 ops/s
[info]                  ·gc.alloc.rate:                   2170.963 MB/sec
[info]                  ·gc.alloc.rate.norm:              816.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032.154 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 763.826 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 4174619.429 ops/s
[info]                  ·gc.alloc.rate:                   2163.952 MB/sec
[info]                  ·gc.alloc.rate.norm:              816.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.047 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2036.479 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 767.932 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala":
[info]   4193272.564 ±(99.9%) 82658.736 ops/s [Average]
[info]   (min, avg, max) = (4174619.429, 4193272.564, 4229643.867), stdev = 21466.211
[info]   CI (99.9%): [4110613.828, 4275931.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2173.399 ±(99.9%) 42.996 MB/sec [Average]
[info]   (min, avg, max) = (2163.952, 2173.399, 2192.408), stdev = 11.166
[info]   CI (99.9%): [2130.403, 2216.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   816.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (816.000, 816.000, 816.000), stdev = 0.001
[info]   CI (99.9%): [816.000, 816.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.108 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.108, 0.125), stdev = 0.017
[info]   CI (99.9%): [0.041, 0.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.041 ±(99.9%) 0.025 B/op [Average]
[info]   (min, avg, max) = (0.031, 0.041, 0.047), stdev = 0.006
[info]   CI (99.9%): [0.016, 0.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   2153.357 ±(99.9%) 670.325 MB/sec [Average]
[info]   (min, avg, max) = (2011.595, 2153.357, 2361.022), stdev = 174.081
[info]   CI (99.9%): [1483.032, 2823.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   808.579 ±(99.9%) 257.256 B/op [Average]
[info]   (min, avg, max) = (748.703, 808.579, 886.714), stdev = 66.809
[info]   CI (99.9%): [551.323, 1065.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   32.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala
[info] # Run progress: 92.28% complete, ETA 00:04:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5978619.514 ops/s
[info] # Warmup Iteration   2: 6568898.796 ops/s
[info] # Warmup Iteration   3: 6679136.607 ops/s
[info] Iteration   1: 6657771.918 ops/s
[info]                  ·gc.alloc.rate:                   710.662 MB/sec
[info]                  ·gc.alloc.rate.norm:              168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      662.747 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 156.673 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 6500830.000 ops/s
[info]                  ·gc.alloc.rate:                   693.820 MB/sec
[info]                  ·gc.alloc.rate.norm:              168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.032 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 159.819 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 6648968.267 ops/s
[info]                  ·gc.alloc.rate:                   709.434 MB/sec
[info]                  ·gc.alloc.rate.norm:              168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      988.784 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 234.152 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 6666908.521 ops/s
[info]                  ·gc.alloc.rate:                   711.476 MB/sec
[info]                  ·gc.alloc.rate.norm:              168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      659.960 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 155.836 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 6597372.795 ops/s
[info]                  ·gc.alloc.rate:                   704.061 MB/sec
[info]                  ·gc.alloc.rate.norm:              168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      661.331 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 157.804 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala":
[info]   6614370.300 ±(99.9%) 265536.028 ops/s [Average]
[info]   (min, avg, max) = (6500830.000, 6614370.300, 6666908.521), stdev = 68958.863
[info]   CI (99.9%): [6348834.272, 6879906.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   705.891 ±(99.9%) 28.268 MB/sec [Average]
[info]   (min, avg, max) = (693.820, 705.891, 711.476), stdev = 7.341
[info]   CI (99.9%): [677.623, 734.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   168.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (168.000, 168.000, 168.000), stdev = 0.001
[info]   CI (99.9%): [168.000, 168.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.104), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.016 ±(99.9%) 0.026 B/op [Average]
[info]   (min, avg, max) = (0.010, 0.016, 0.025), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   726.571 ±(99.9%) 564.450 MB/sec [Average]
[info]   (min, avg, max) = (659.960, 726.571, 988.784), stdev = 146.586
[info]   CI (99.9%): [162.121, 1291.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   172.857 ±(99.9%) 132.069 B/op [Average]
[info]   (min, avg, max) = (155.836, 172.857, 234.152), stdev = 34.298
[info]   CI (99.9%): [40.788, 304.925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce
[info] # Run progress: 92.65% complete, ETA 00:04:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1797111.149 ops/s
[info] # Warmup Iteration   2: 2744449.488 ops/s
[info] # Warmup Iteration   3: 2781345.873 ops/s
[info] Iteration   1: 2786216.323 ops/s
[info]                  ·gc.alloc.rate:                   1161.159 MB/sec
[info]                  ·gc.alloc.rate.norm:              656.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1305.443 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 737.514 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 2751751.820 ops/s
[info]                  ·gc.alloc.rate:                   1146.670 MB/sec
[info]                  ·gc.alloc.rate.norm:              656.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.048 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      982.648 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 562.164 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 2780911.588 ops/s
[info]                  ·gc.alloc.rate:                   1158.855 MB/sec
[info]                  ·gc.alloc.rate.norm:              656.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.035 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1316.636 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 745.316 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 2793759.705 ops/s
[info]                  ·gc.alloc.rate:                   1164.196 MB/sec
[info]                  ·gc.alloc.rate.norm:              656.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      992.643 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 559.334 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2762344.984 ops/s
[info]                  ·gc.alloc.rate:                   1151.263 MB/sec
[info]                  ·gc.alloc.rate.norm:              656.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.047 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1331.429 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 758.661 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce":
[info]   2774996.884 ±(99.9%) 67063.875 ops/s [Average]
[info]   (min, avg, max) = (2751751.820, 2774996.884, 2793759.705), stdev = 17416.275
[info]   CI (99.9%): [2707933.009, 2842060.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1156.429 ±(99.9%) 27.934 MB/sec [Average]
[info]   (min, avg, max) = (1146.670, 1156.429, 1164.196), stdev = 7.254
[info]   CI (99.9%): [1128.494, 1184.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   656.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (656.000, 656.000, 656.000), stdev = 0.001
[info]   CI (99.9%): [656.000, 656.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.062, 0.083), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.035 ±(99.9%) 0.046 B/op [Average]
[info]   (min, avg, max) = (0.023, 0.035, 0.048), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1185.760 ±(99.9%) 697.436 MB/sec [Average]
[info]   (min, avg, max) = (982.648, 1185.760, 1331.429), stdev = 181.122
[info]   CI (99.9%): [488.324, 1883.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   672.598 ±(99.9%) 394.259 B/op [Average]
[info]   (min, avg, max) = (559.334, 672.598, 758.661), stdev = 102.388
[info]   CI (99.9%): [278.339, 1066.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala
[info] # Run progress: 93.01% complete, ETA 00:04:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1058027.411 ops/s
[info] # Warmup Iteration   2: 2094152.499 ops/s
[info] # Warmup Iteration   3: 2143257.864 ops/s
[info] Iteration   1: 2144728.374 ops/s
[info]                  ·gc.alloc.rate:                   664.738 MB/sec
[info]                  ·gc.alloc.rate.norm:              488.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      643.905 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 472.707 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 2141900.180 ops/s
[info]                  ·gc.alloc.rate:                   664.125 MB/sec
[info]                  ·gc.alloc.rate.norm:              488.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.076 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      647.839 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 476.033 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 2136813.618 ops/s
[info]                  ·gc.alloc.rate:                   662.345 MB/sec
[info]                  ·gc.alloc.rate.norm:              488.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      651.249 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 479.825 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 2129048.943 ops/s
[info]                  ·gc.alloc.rate:                   659.918 MB/sec
[info]                  ·gc.alloc.rate.norm:              488.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.031 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.522 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 484.010 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 2143536.733 ops/s
[info]                  ·gc.alloc.rate:                   664.472 MB/sec
[info]                  ·gc.alloc.rate.norm:              488.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.061 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.283 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 482.720 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala":
[info]   2139205.569 ±(99.9%) 24761.150 ops/s [Average]
[info]   (min, avg, max) = (2129048.943, 2139205.569, 2144728.374), stdev = 6430.392
[info]   CI (99.9%): [2114444.419, 2163966.720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   663.120 ±(99.9%) 7.777 MB/sec [Average]
[info]   (min, avg, max) = (659.918, 663.120, 664.738), stdev = 2.020
[info]   CI (99.9%): [655.343, 670.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   488.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (488.000, 488.000, 488.000), stdev = 0.001
[info]   CI (99.9%): [488.000, 488.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.054, 0.104), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.040 ±(99.9%) 0.107 B/op [Average]
[info]   (min, avg, max) = (0.015, 0.040, 0.076), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   650.960 ±(99.9%) 20.400 MB/sec [Average]
[info]   (min, avg, max) = (643.905, 650.960, 657.283), stdev = 5.298
[info]   CI (99.9%): [630.560, 671.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   479.059 ±(99.9%) 18.063 B/op [Average]
[info]   (min, avg, max) = (472.707, 479.059, 484.010), stdev = 4.691
[info]   CI (99.9%): [460.996, 497.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala
[info] # Run progress: 93.38% complete, ETA 00:03:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6453371.979 ops/s
[info] # Warmup Iteration   2: 8771587.762 ops/s
[info] # Warmup Iteration   3: 8863562.240 ops/s
[info] Iteration   1: 8961322.896 ops/s
[info]                  ·gc.alloc.rate:                   865.145 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      980.172 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 172.209 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 8556720.899 ops/s
[info]                  ·gc.alloc.rate:                   826.164 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.991 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 120.139 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 8809328.992 ops/s
[info]                  ·gc.alloc.rate:                   850.731 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      981.487 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 175.362 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 8818635.885 ops/s
[info]                  ·gc.alloc.rate:                   851.494 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.000 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 117.102 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 8840900.544 ops/s
[info]                  ·gc.alloc.rate:                   853.728 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      988.054 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 175.916 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala":
[info]   8797381.843 ±(99.9%) 568810.315 ops/s [Average]
[info]   (min, avg, max) = (8556720.899, 8797381.843, 8961322.896), stdev = 147718.232
[info]   CI (99.9%): [8228571.529, 9366192.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   849.452 ±(99.9%) 54.887 MB/sec [Average]
[info]   (min, avg, max) = (826.164, 849.452, 865.145), stdev = 14.254
[info]   CI (99.9%): [794.565, 904.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   152.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (152.000, 152.000, 152.000), stdev = 0.001
[info]   CI (99.9%): [152.000, 152.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.096 ±(99.9%) 0.121 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.146), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.017 ±(99.9%) 0.021 B/op [Average]
[info]   (min, avg, max) = (0.011, 0.017, 0.026), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   851.741 ±(99.9%) 693.452 MB/sec [Average]
[info]   (min, avg, max) = (652.991, 851.741, 988.054), stdev = 180.087
[info]   CI (99.9%): [158.288, 1545.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   152.146 ±(99.9%) 118.043 B/op [Average]
[info]   (min, avg, max) = (117.102, 152.146, 175.916), stdev = 30.655
[info]   CI (99.9%): [34.103, 270.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 93.75% complete, ETA 00:03:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6131097.023 ops/s
[info] # Warmup Iteration   2: 8314464.868 ops/s
[info] # Warmup Iteration   3: 8504925.110 ops/s
[info] Iteration   1: 8499705.874 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 8337039.879 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 8497811.303 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 8500391.831 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 8494887.012 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   8465967.180 ±(99.9%) 277647.248 ops/s [Average]
[info]   (min, avg, max) = (8337039.879, 8465967.180, 8500391.831), stdev = 72104.109
[info]   CI (99.9%): [8188319.932, 8743614.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson
[info] # Run progress: 94.12% complete, ETA 00:03:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2579924.600 ops/s
[info] # Warmup Iteration   2: 3401452.468 ops/s
[info] # Warmup Iteration   3: 3525742.567 ops/s
[info] Iteration   1: 3531648.213 ops/s
[info]                  ·gc.alloc.rate:                   1130.581 MB/sec
[info]                  ·gc.alloc.rate.norm:              504.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1302.530 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 580.653 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 3488609.614 ops/s
[info]                  ·gc.alloc.rate:                   1116.506 MB/sec
[info]                  ·gc.alloc.rate.norm:              504.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.047 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      978.982 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 441.921 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 3472326.512 ops/s
[info]                  ·gc.alloc.rate:                   1111.550 MB/sec
[info]                  ·gc.alloc.rate.norm:              504.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1312.411 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 595.075 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 3534862.936 ops/s
[info]                  ·gc.alloc.rate:                   1131.675 MB/sec
[info]                  ·gc.alloc.rate.norm:              504.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      990.548 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 441.148 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 3537522.621 ops/s
[info]                  ·gc.alloc.rate:                   1132.501 MB/sec
[info]                  ·gc.alloc.rate.norm:              504.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      995.871 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 443.196 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson":
[info]   3512993.979 ±(99.9%) 116737.498 ops/s [Average]
[info]   (min, avg, max) = (3472326.512, 3512993.979, 3537522.621), stdev = 30316.357
[info]   CI (99.9%): [3396256.481, 3629731.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1124.563 ±(99.9%) 37.731 MB/sec [Average]
[info]   (min, avg, max) = (1111.550, 1124.563, 1132.501), stdev = 9.799
[info]   CI (99.9%): [1086.832, 1162.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   504.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (504.000, 504.000, 504.000), stdev = 0.001
[info]   CI (99.9%): [504.000, 504.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.062, 0.104), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.028 ±(99.9%) 0.045 B/op [Average]
[info]   (min, avg, max) = (0.019, 0.028, 0.047), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1116.069 ±(99.9%) 673.351 MB/sec [Average]
[info]   (min, avg, max) = (978.982, 1116.069, 1312.411), stdev = 174.867
[info]   CI (99.9%): [442.718, 1789.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   500.398 ±(99.9%) 308.093 B/op [Average]
[info]   (min, avg, max) = (441.148, 500.398, 595.075), stdev = 80.011
[info]   CI (99.9%): [192.306, 808.491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce
[info] # Run progress: 94.49% complete, ETA 00:03:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 709428.940 ops/s
[info] # Warmup Iteration   2: 964544.310 ops/s
[info] # Warmup Iteration   3: 970461.458 ops/s
[info] Iteration   1: 963402.081 ops/s
[info]                  ·gc.alloc.rate:                   1615.364 MB/sec
[info]                  ·gc.alloc.rate.norm:              2640.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.102 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1314.111 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2147.660 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 971638.477 ops/s
[info]                  ·gc.alloc.rate:                   1629.130 MB/sec
[info]                  ·gc.alloc.rate.norm:              2640.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.202 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1653.626 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2679.695 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 966353.371 ops/s
[info]                  ·gc.alloc.rate:                   1620.376 MB/sec
[info]                  ·gc.alloc.rate.norm:              2640.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.068 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1666.626 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2715.355 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 968961.899 ops/s
[info]                  ·gc.alloc.rate:                   1625.024 MB/sec
[info]                  ·gc.alloc.rate.norm:              2640.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.101 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1676.931 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2724.327 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 972658.511 ops/s
[info]                  ·gc.alloc.rate:                   1631.131 MB/sec
[info]                  ·gc.alloc.rate.norm:              2640.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.135 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1684.723 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2726.740 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce":
[info]   968602.868 ±(99.9%) 14650.231 ops/s [Average]
[info]   (min, avg, max) = (963402.081, 968602.868, 972658.511), stdev = 3804.618
[info]   CI (99.9%): [953952.637, 983253.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   1624.205 ±(99.9%) 24.785 MB/sec [Average]
[info]   (min, avg, max) = (1615.364, 1624.205, 1631.131), stdev = 6.437
[info]   CI (99.9%): [1599.420, 1648.990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2640.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2640.000, 2640.000, 2640.000), stdev = 0.001
[info]   CI (99.9%): [2640.000, 2640.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.125), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.122 ±(99.9%) 0.196 B/op [Average]
[info]   (min, avg, max) = (0.068, 0.122, 0.202), stdev = 0.051
[info]   CI (99.9%): [≈ 0, 0.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1599.203 ±(99.9%) 615.322 MB/sec [Average]
[info]   (min, avg, max) = (1314.111, 1599.203, 1684.723), stdev = 159.797
[info]   CI (99.9%): [983.881, 2214.526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2598.755 ±(99.9%) 973.730 B/op [Average]
[info]   (min, avg, max) = (2147.660, 2598.755, 2726.740), stdev = 252.875
[info]   CI (99.9%): [1625.025, 3572.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 5.000), stdev = 0.894
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala
[info] # Run progress: 94.85% complete, ETA 00:02:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 470191.946 ops/s
[info] # Warmup Iteration   2: 1081083.268 ops/s
[info] # Warmup Iteration   3: 1108391.436 ops/s
[info] Iteration   1: 1098452.852 ops/s
[info]                  ·gc.alloc.rate:                   809.200 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.119 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      645.832 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 925.810 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1106513.582 ops/s
[info]                  ·gc.alloc.rate:                   815.343 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.089 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      975.661 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1388.087 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1110009.502 ops/s
[info]                  ·gc.alloc.rate:                   817.846 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.256 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 927.970 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1102145.457 ops/s
[info]                  ·gc.alloc.rate:                   812.252 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.119 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      986.747 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1409.201 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1109796.592 ops/s
[info]                  ·gc.alloc.rate:                   817.765 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.089 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      661.267 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 938.008 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala":
[info]   1105383.597 ±(99.9%) 19317.723 ops/s [Average]
[info]   (min, avg, max) = (1098452.852, 1105383.597, 1110009.502), stdev = 5016.751
[info]   CI (99.9%): [1086065.874, 1124701.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   814.481 ±(99.9%) 14.371 MB/sec [Average]
[info]   (min, avg, max) = (809.200, 814.481, 817.846), stdev = 3.732
[info]   CI (99.9%): [800.111, 828.852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1160.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1160.000, 1160.000, 1160.000), stdev = 0.001
[info]   CI (99.9%): [1160.000, 1160.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.083), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.083 ±(99.9%) 0.188 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.083, 0.119), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   784.753 ±(99.9%) 691.040 MB/sec [Average]
[info]   (min, avg, max) = (645.832, 784.753, 986.747), stdev = 179.461
[info]   CI (99.9%): [93.712, 1475.793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1117.815 ±(99.9%) 987.730 B/op [Average]
[info]   (min, avg, max) = (925.810, 1117.815, 1409.201), stdev = 256.510
[info]   CI (99.9%): [130.085, 2105.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala
[info] # Run progress: 95.22% complete, ETA 00:02:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1792794.973 ops/s
[info] # Warmup Iteration   2: 1942801.361 ops/s
[info] # Warmup Iteration   3: 1960938.661 ops/s
[info] Iteration   1: 1954548.469 ops/s
[info]                  ·gc.alloc.rate:                   546.251 MB/sec
[info]                  ·gc.alloc.rate.norm:              440.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.119 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.513 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      332.272 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 267.642 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1969324.339 ops/s
[info]                  ·gc.alloc.rate:                   550.353 MB/sec
[info]                  ·gc.alloc.rate.norm:              440.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      662.567 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 529.714 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 1976112.120 ops/s
[info]                  ·gc.alloc.rate:                   552.241 MB/sec
[info]                  ·gc.alloc.rate.norm:              440.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.066 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      659.856 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 525.743 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1952074.972 ops/s
[info]                  ·gc.alloc.rate:                   545.758 MB/sec
[info]                  ·gc.alloc.rate.norm:              440.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.734 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 265.838 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1964664.970 ops/s
[info]                  ·gc.alloc.rate:                   549.125 MB/sec
[info]                  ·gc.alloc.rate.norm:              440.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.083 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      659.265 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 528.253 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala":
[info]   1963344.974 ±(99.9%) 38740.935 ops/s [Average]
[info]   (min, avg, max) = (1952074.972, 1963344.974, 1976112.120), stdev = 10060.898
[info]   CI (99.9%): [1924604.039, 2002085.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   548.746 ±(99.9%) 10.562 MB/sec [Average]
[info]   (min, avg, max) = (545.758, 548.746, 552.241), stdev = 2.743
[info]   CI (99.9%): [538.183, 559.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   440.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (440.000, 440.000, 440.000), stdev = 0.001
[info]   CI (99.9%): [440.000, 440.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.670 ±(99.9%) 5.275 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.670, 3.119), stdev = 1.370
[info]   CI (99.9%): [≈ 0, 5.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.539 ±(99.9%) 4.250 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.539, 2.513), stdev = 1.104
[info]   CI (99.9%): [≈ 0, 4.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   528.739 ±(99.9%) 695.095 MB/sec [Average]
[info]   (min, avg, max) = (329.734, 528.739, 662.567), stdev = 180.514
[info]   CI (99.9%): [≈ 0, 1223.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   423.438 ±(99.9%) 550.848 B/op [Average]
[info]   (min, avg, max) = (265.838, 423.438, 529.714), stdev = 143.054
[info]   CI (99.9%): [≈ 0, 974.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce
[info] # Run progress: 95.59% complete, ETA 00:02:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1078412.777 ops/s
[info] # Warmup Iteration   2: 1643272.739 ops/s
[info] # Warmup Iteration   3: 1694260.194 ops/s
[info] Iteration   1: 1693246.635 ops/s
[info]                  ·gc.alloc.rate:                   1376.789 MB/sec
[info]                  ·gc.alloc.rate.norm:              1280.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.058 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1306.710 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1214.848 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1693474.636 ops/s
[info]                  ·gc.alloc.rate:                   1377.385 MB/sec
[info]                  ·gc.alloc.rate.norm:              1280.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.116 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1315.069 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1222.091 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 1679427.460 ops/s
[info]                  ·gc.alloc.rate:                   1365.386 MB/sec
[info]                  ·gc.alloc.rate.norm:              1280.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.059 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1654.771 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1551.288 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1687056.835 ops/s
[info]                  ·gc.alloc.rate:                   1371.744 MB/sec
[info]                  ·gc.alloc.rate.norm:              1280.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.078 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1333.237 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1244.069 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1681151.213 ops/s
[info]                  ·gc.alloc.rate:                   1366.853 MB/sec
[info]                  ·gc.alloc.rate.norm:              1280.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.058 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.779 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1254.647 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce":
[info]   1686871.356 ±(99.9%) 25280.696 ops/s [Average]
[info]   (min, avg, max) = (1679427.460, 1686871.356, 1693474.636), stdev = 6565.316
[info]   CI (99.9%): [1661590.660, 1712152.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1371.631 ±(99.9%) 21.227 MB/sec [Average]
[info]   (min, avg, max) = (1365.386, 1371.631, 1377.385), stdev = 5.513
[info]   CI (99.9%): [1350.404, 1392.859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1280.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1280.000, 1280.000, 1280.000), stdev = 0.001
[info]   CI (99.9%): [1280.000, 1280.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.079, 0.125), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.074 ±(99.9%) 0.097 B/op [Average]
[info]   (min, avg, max) = (0.058, 0.074, 0.116), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1389.913 ±(99.9%) 572.438 MB/sec [Average]
[info]   (min, avg, max) = (1306.710, 1389.913, 1654.771), stdev = 148.660
[info]   CI (99.9%): [817.476, 1962.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1297.388 ±(99.9%) 550.042 B/op [Average]
[info]   (min, avg, max) = (1214.848, 1297.388, 1551.288), stdev = 142.844
[info]   CI (99.9%): [747.347, 1847.430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 5.000), stdev = 0.837
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala
[info] # Run progress: 95.96% complete, ETA 00:02:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 655518.493 ops/s
[info] # Warmup Iteration   2: 2603162.636 ops/s
[info] # Warmup Iteration   3: 2618441.377 ops/s
[info] Iteration   1: 2590649.299 ops/s
[info]                  ·gc.alloc.rate:                   1039.828 MB/sec
[info]                  ·gc.alloc.rate.norm:              632.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.063 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      972.132 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 590.855 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2603740.202 ops/s
[info]                  ·gc.alloc.rate:                   1045.305 MB/sec
[info]                  ·gc.alloc.rate.norm:              632.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.088 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      981.349 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 593.332 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 2578351.527 ops/s
[info]                  ·gc.alloc.rate:                   1035.092 MB/sec
[info]                  ·gc.alloc.rate.norm:              632.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.051 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1317.214 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 804.257 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 2598218.966 ops/s
[info]                  ·gc.alloc.rate:                   1043.272 MB/sec
[info]                  ·gc.alloc.rate.norm:              632.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.050 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      994.785 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 602.628 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2621657.975 ops/s
[info]                  ·gc.alloc.rate:                   1052.492 MB/sec
[info]                  ·gc.alloc.rate.norm:              632.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.062 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1000.619 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 600.851 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala":
[info]   2598523.594 ±(99.9%) 61833.182 ops/s [Average]
[info]   (min, avg, max) = (2578351.527, 2598523.594, 2621657.975), stdev = 16057.881
[info]   CI (99.9%): [2536690.412, 2660356.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1043.198 ±(99.9%) 24.947 MB/sec [Average]
[info]   (min, avg, max) = (1035.092, 1043.198, 1052.492), stdev = 6.479
[info]   CI (99.9%): [1018.251, 1068.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   632.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (632.000, 632.000, 632.000), stdev = 0.001
[info]   CI (99.9%): [632.000, 632.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.104 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.104, 0.146), stdev = 0.025
[info]   CI (99.9%): [0.006, 0.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.063 ±(99.9%) 0.059 B/op [Average]
[info]   (min, avg, max) = (0.050, 0.063, 0.088), stdev = 0.015
[info]   CI (99.9%): [0.004, 0.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1053.220 ±(99.9%) 569.892 MB/sec [Average]
[info]   (min, avg, max) = (972.132, 1053.220, 1317.214), stdev = 147.999
[info]   CI (99.9%): [483.328, 1623.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   638.385 ±(99.9%) 357.559 B/op [Average]
[info]   (min, avg, max) = (590.855, 638.385, 804.257), stdev = 92.857
[info]   CI (99.9%): [280.826, 995.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala
[info] # Run progress: 96.32% complete, ETA 00:02:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1954910.458 ops/s
[info] # Warmup Iteration   2: 2756711.709 ops/s
[info] # Warmup Iteration   3: 2792891.741 ops/s
[info] Iteration   1: 2795115.266 ops/s
[info]                  ·gc.alloc.rate:                   653.337 MB/sec
[info]                  ·gc.alloc.rate.norm:              368.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.732 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.102 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.206 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 370.179 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2808046.136 ops/s
[info]                  ·gc.alloc.rate:                   656.283 MB/sec
[info]                  ·gc.alloc.rate.norm:              368.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.035 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.860 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 366.642 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 2805853.522 ops/s
[info]                  ·gc.alloc.rate:                   655.835 MB/sec
[info]                  ·gc.alloc.rate.norm:              368.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.058 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.547 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 366.155 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 2801382.535 ops/s
[info]                  ·gc.alloc.rate:                   654.866 MB/sec
[info]                  ·gc.alloc.rate.norm:              368.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.620 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 366.738 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 2803342.660 ops/s
[info]                  ·gc.alloc.rate:                   655.275 MB/sec
[info]                  ·gc.alloc.rate.norm:              368.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.058 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.906 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 367.231 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala":
[info]   2802748.024 ±(99.9%) 19078.304 ops/s [Average]
[info]   (min, avg, max) = (2795115.266, 2802748.024, 2808046.136), stdev = 4954.575
[info]   CI (99.9%): [2783669.720, 2821826.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   655.119 ±(99.9%) 4.361 MB/sec [Average]
[info]   (min, avg, max) = (653.337, 655.119, 656.283), stdev = 1.133
[info]   CI (99.9%): [650.758, 659.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   368.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (368.000, 368.000, 368.000), stdev = 0.001
[info]   CI (99.9%): [368.000, 368.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.809 ±(99.9%) 6.294 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.809, 3.732), stdev = 1.634
[info]   CI (99.9%): [≈ 0, 7.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.455 ±(99.9%) 3.545 B/op [Average]
[info]   (min, avg, max) = (0.023, 0.455, 2.102), stdev = 0.921
[info]   CI (99.9%): [≈ 0, 4.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   654.028 ±(99.9%) 7.286 MB/sec [Average]
[info]   (min, avg, max) = (652.547, 654.028, 657.206), stdev = 1.892
[info]   CI (99.9%): [646.742, 661.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   367.389 ±(99.9%) 6.184 B/op [Average]
[info]   (min, avg, max) = (366.155, 367.389, 370.179), stdev = 1.606
[info]   CI (99.9%): [361.205, 373.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 96.69% complete, ETA 00:01:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2138990.616 ops/s
[info] # Warmup Iteration   2: 2840510.095 ops/s
[info] # Warmup Iteration   3: 2822142.414 ops/s
[info] Iteration   1: 2823899.464 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2827848.411 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2821238.541 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2816590.821 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2816933.021 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   2821302.052 ±(99.9%) 18355.249 ops/s [Average]
[info]   (min, avg, max) = (2816590.821, 2821302.052, 2827848.411), stdev = 4766.800
[info]   CI (99.9%): [2802946.803, 2839657.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson
[info] # Run progress: 97.06% complete, ETA 00:01:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1756085.806 ops/s
[info] # Warmup Iteration   2: 2404583.813 ops/s
[info] # Warmup Iteration   3: 2445980.837 ops/s
[info] Iteration   1: 2443845.255 ops/s
[info]                  ·gc.alloc.rate:                   1117.698 MB/sec
[info]                  ·gc.alloc.rate.norm:              720.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.040 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1301.310 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 838.280 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 2448589.214 ops/s
[info]                  ·gc.alloc.rate:                   1119.696 MB/sec
[info]                  ·gc.alloc.rate.norm:              720.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.080 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      979.136 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 629.616 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 2445013.125 ops/s
[info]                  ·gc.alloc.rate:                   1118.145 MB/sec
[info]                  ·gc.alloc.rate.norm:              720.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.067 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1312.499 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 845.149 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 2441086.154 ops/s
[info]                  ·gc.alloc.rate:                   1116.599 MB/sec
[info]                  ·gc.alloc.rate.norm:              720.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.040 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      990.690 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 638.812 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 2449884.134 ops/s
[info]                  ·gc.alloc.rate:                   1120.450 MB/sec
[info]                  ·gc.alloc.rate.norm:              720.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.067 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      995.860 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 639.939 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson":
[info]   2445683.576 ±(99.9%) 13756.642 ops/s [Average]
[info]   (min, avg, max) = (2441086.154, 2445683.576, 2449884.134), stdev = 3572.556
[info]   CI (99.9%): [2431926.934, 2459440.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1118.517 ±(99.9%) 5.969 MB/sec [Average]
[info]   (min, avg, max) = (1116.599, 1118.517, 1120.450), stdev = 1.550
[info]   CI (99.9%): [1112.548, 1124.487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   720.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (720.000, 720.000, 720.000), stdev = 0.001
[info]   CI (99.9%): [720.000, 720.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.107 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.092, 0.125), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.059 ±(99.9%) 0.069 B/op [Average]
[info]   (min, avg, max) = (0.040, 0.059, 0.080), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1115.899 ±(99.9%) 671.988 MB/sec [Average]
[info]   (min, avg, max) = (979.136, 1115.899, 1312.499), stdev = 174.513
[info]   CI (99.9%): [443.910, 1787.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   718.359 ±(99.9%) 433.986 B/op [Average]
[info]   (min, avg, max) = (629.616, 718.359, 845.149), stdev = 112.705
[info]   CI (99.9%): [284.373, 1152.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce
[info] # Run progress: 97.43% complete, ETA 00:01:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6096.466 ops/s
[info] # Warmup Iteration   2: 8909.763 ops/s
[info] # Warmup Iteration   3: 11308.037 ops/s
[info] Iteration   1: 11134.693 ops/s
[info]                  ·gc.alloc.rate:                   1625.896 MB/sec
[info]                  ·gc.alloc.rate.norm:              229768.040 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14.711 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1631.970 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 230626.462 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   2: 11445.084 ops/s
[info]                  ·gc.alloc.rate:                   1669.686 MB/sec
[info]                  ·gc.alloc.rate.norm:              229649.693 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22.901 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1645.365 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 226304.447 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   3: 12559.673 ops/s
[info]                  ·gc.alloc.rate:                   1828.166 MB/sec
[info]                  ·gc.alloc.rate.norm:              229064.139 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.144 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18.074 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1659.554 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 207937.528 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 12517.562 ops/s
[info]                  ·gc.alloc.rate:                   1821.914 MB/sec
[info]                  ·gc.alloc.rate.norm:              229120.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15.702 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2007.099 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 252408.599 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 12696.103 ops/s
[info]                  ·gc.alloc.rate:                   1847.736 MB/sec
[info]                  ·gc.alloc.rate.norm:              229120.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.126 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15.658 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1682.257 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 208600.572 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce":
[info]   12070.623 ±(99.9%) 2788.338 ops/s [Average]
[info]   (min, avg, max) = (11134.693, 12070.623, 12696.103), stdev = 724.123
[info]   CI (99.9%): [9282.285, 14858.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   1758.680 ±(99.9%) 396.024 MB/sec [Average]
[info]   (min, avg, max) = (1625.896, 1758.680, 1847.736), stdev = 102.846
[info]   CI (99.9%): [1362.656, 2154.703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   229344.387 ±(99.9%) 1294.271 B/op [Average]
[info]   (min, avg, max) = (229064.139, 229344.387, 229768.040), stdev = 336.118
[info]   CI (99.9%): [228050.116, 230638.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.133 ±(99.9%) 0.090 MB/sec [Average]
[info]   (min, avg, max) = (0.104, 0.133, 0.167), stdev = 0.023
[info]   CI (99.9%): [0.043, 0.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   17.409 ±(99.9%) 12.751 B/op [Average]
[info]   (min, avg, max) = (14.711, 17.409, 22.901), stdev = 3.311
[info]   CI (99.9%): [4.659, 30.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1725.249 ±(99.9%) 610.926 MB/sec [Average]
[info]   (min, avg, max) = (1631.970, 1725.249, 2007.099), stdev = 158.655
[info]   CI (99.9%): [1114.323, 2336.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   225175.522 ±(99.9%) 70596.731 B/op [Average]
[info]   (min, avg, max) = (207937.528, 225175.522, 252408.599), stdev = 18333.747
[info]   CI (99.9%): [154578.791, 295772.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 9.400, 17.000), stdev = 5.320
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala
[info] # Run progress: 97.79% complete, ETA 00:01:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5428.516 ops/s
[info] # Warmup Iteration   2: 15229.494 ops/s
[info] # Warmup Iteration   3: 15561.212 ops/s
[info] Iteration   1: 15157.942 ops/s
[info]                  ·gc.alloc.rate:                   213.966 MB/sec
[info]                  ·gc.alloc.rate.norm:              22224.029 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.680 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26556.733 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 15541.832 ops/s
[info]                  ·gc.alloc.rate:      219.502 MB/sec
[info]                  ·gc.alloc.rate.norm: 22229.676 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 15488.151 ops/s
[info]                  ·gc.alloc.rate:                   218.786 MB/sec
[info]                  ·gc.alloc.rate.norm:              22240.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.703 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25992.717 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 15494.838 ops/s
[info]                  ·gc.alloc.rate:                   218.860 MB/sec
[info]                  ·gc.alloc.rate.norm:              22240.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.229 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.674 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25980.977 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 15462.292 ops/s
[info]                  ·gc.alloc.rate:                   218.384 MB/sec
[info]                  ·gc.alloc.rate.norm:              22233.861 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.728 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74.160 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      322.331 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 32816.734 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala":
[info]   15429.011 ±(99.9%) 593.877 ops/s [Average]
[info]   (min, avg, max) = (15157.942, 15429.011, 15541.832), stdev = 154.228
[info]   CI (99.9%): [14835.134, 16022.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   217.900 ±(99.9%) 8.607 MB/sec [Average]
[info]   (min, avg, max) = (213.966, 217.900, 219.502), stdev = 2.235
[info]   CI (99.9%): [209.293, 226.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   22233.524 ±(99.9%) 26.515 B/op [Average]
[info]   (min, avg, max) = (22224.029, 22233.524, 22240.028), stdev = 6.886
[info]   CI (99.9%): [22207.009, 22260.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.154 ±(99.9%) 1.238 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.154, 0.728), stdev = 0.322
[info]   CI (99.9%): [≈ 0, 1.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   15.678 ±(99.9%) 126.084 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15.678, 74.160), stdev = 32.744
[info]   CI (99.9%): [≈ 0, 141.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   217.878 ±(99.9%) 481.983 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 217.878, 322.331), stdev = 125.169
[info]   CI (99.9%): [≈ 0, 699.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   22269.432 ±(99.9%) 49206.670 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 22269.432, 32816.734), stdev = 12778.816
[info]   CI (99.9%): [≈ 0, 71476.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 2.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala
[info] # Run progress: 98.16% complete, ETA 00:01:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18187.726 ops/s
[info] # Warmup Iteration   2: 22429.796 ops/s
[info] # Warmup Iteration   3: 37937.389 ops/s
[info] Iteration   1: 38316.647 ops/s
[info]                  ·gc.alloc.rate:                   354.845 MB/sec
[info]                  ·gc.alloc.rate.norm:              14576.031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.010 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.427 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.729 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10504.636 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 38390.958 ops/s
[info]                  ·gc.alloc.rate:                   355.500 MB/sec
[info]                  ·gc.alloc.rate.norm:              14576.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.755 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10486.306 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 38082.728 ops/s
[info]                  ·gc.alloc.rate:                   352.568 MB/sec
[info]                  ·gc.alloc.rate.norm:              14576.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.886 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.683 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10570.545 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 38092.198 ops/s
[info]                  ·gc.alloc.rate:                   352.690 MB/sec
[info]                  ·gc.alloc.rate.norm:              14576.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.325 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     137.402 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658.588 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27218.227 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 38081.102 ops/s
[info]                  ·gc.alloc.rate:                   352.593 MB/sec
[info]                  ·gc.alloc.rate.norm:              14576.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.634 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13544.221 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala":
[info]   38192.726 ±(99.9%) 575.403 ops/s [Average]
[info]   (min, avg, max) = (38081.102, 38192.726, 38390.958), stdev = 149.430
[info]   CI (99.9%): [37617.324, 38768.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   353.639 ±(99.9%) 5.466 MB/sec [Average]
[info]   (min, avg, max) = (352.568, 353.639, 355.500), stdev = 1.419
[info]   CI (99.9%): [348.173, 359.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   14576.015 ±(99.9%) 0.035 B/op [Average]
[info]   (min, avg, max) = (14576.011, 14576.015, 14576.031), stdev = 0.009
[info]   CI (99.9%): [14575.980, 14576.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.671 ±(99.9%) 5.712 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.671, 3.325), stdev = 1.483
[info]   CI (99.9%): [≈ 0, 6.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   27.743 ±(99.9%) 236.054 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 27.743, 137.402), stdev = 61.302
[info]   CI (99.9%): [≈ 0, 263.797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   350.678 ±(99.9%) 673.559 MB/sec [Average]
[info]   (min, avg, max) = (255.683, 350.678, 658.588), stdev = 174.921
[info]   CI (99.9%): [≈ 0, 1024.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   14464.787 ±(99.9%) 27912.116 B/op [Average]
[info]   (min, avg, max) = (10486.306, 14464.787, 27218.227), stdev = 7248.688
[info]   CI (99.9%): [≈ 0, 42376.903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson
[info] # Run progress: 98.53% complete, ETA 00:00:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 873.388 ops/s
[info] # Warmup Iteration   2: 3122.350 ops/s
[info] # Warmup Iteration   3: 2885.427 ops/s
[info] Iteration   1: 3301.937 ops/s
[info]                  ·gc.alloc.rate:                   1059.585 MB/sec
[info]                  ·gc.alloc.rate.norm:              505127.094 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39.683 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      976.582 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 465557.585 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 3615.392 ops/s
[info]                  ·gc.alloc.rate:                   1159.946 MB/sec
[info]                  ·gc.alloc.rate.norm:              505032.113 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36.248 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      985.383 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 429028.814 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 3586.435 ops/s
[info]                  ·gc.alloc.rate:                   1150.637 MB/sec
[info]                  ·gc.alloc.rate.norm:              505032.123 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36.541 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1322.052 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 580268.570 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 3617.980 ops/s
[info]                  ·gc.alloc.rate:                   1160.530 MB/sec
[info]                  ·gc.alloc.rate.norm:              505032.113 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18.109 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      996.381 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 433598.780 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 3617.762 ops/s
[info]                  ·gc.alloc.rate:                   1160.663 MB/sec
[info]                  ·gc.alloc.rate.norm:              505032.122 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27.163 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1336.429 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 581512.029 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson":
[info]   3547.901 ±(99.9%) 531.926 ops/s [Average]
[info]   (min, avg, max) = (3301.937, 3547.901, 3617.980), stdev = 138.139
[info]   CI (99.9%): [3015.975, 4079.827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1138.272 ±(99.9%) 170.160 MB/sec [Average]
[info]   (min, avg, max) = (1059.585, 1138.272, 1160.663), stdev = 44.190
[info]   CI (99.9%): [968.112, 1308.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   505051.113 ±(99.9%) 163.556 B/op [Average]
[info]   (min, avg, max) = (505032.113, 505051.113, 505127.094), stdev = 42.475
[info]   CI (99.9%): [504887.557, 505214.668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.083), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   31.549 ±(99.9%) 34.064 B/op [Average]
[info]   (min, avg, max) = (18.109, 31.549, 39.683), stdev = 8.846
[info]   CI (99.9%): [≈ 0, 65.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1123.365 ±(99.9%) 724.449 MB/sec [Average]
[info]   (min, avg, max) = (976.582, 1123.365, 1336.429), stdev = 188.137
[info]   CI (99.9%): [398.917, 1847.814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   497993.156 ±(99.9%) 296395.973 B/op [Average]
[info]   (min, avg, max) = (429028.814, 497993.156, 581512.029), stdev = 76973.093
[info]   CI (99.9%): [201597.182, 794389.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 1.095
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala
[info] # Run progress: 98.90% complete, ETA 00:00:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_11ae7560/target/5e31e36e/jackson-module-afterburner-2.9.4.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 19503.424 ops/s
[info] # Warmup Iteration   2: 49868.189 ops/s
[info] # Warmup Iteration   3: 50325.331 ops/s
[info] Iteration   1: 51054.789 ops/s
[info]                  ·gc.alloc.rate:                   667.923 MB/sec
[info]                  ·gc.alloc.rate.norm:              20604.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.925 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      646.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19928.386 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 50159.003 ops/s
[info]                  ·gc.alloc.rate:                   656.556 MB/sec
[info]                  ·gc.alloc.rate.norm:              20604.040 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.919 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      649.403 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20379.572 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 50795.766 ops/s
[info]                  ·gc.alloc.rate:                   664.859 MB/sec
[info]                  ·gc.alloc.rate.norm:              20603.993 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.935 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      651.997 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20205.407 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 50849.914 ops/s
[info]                  ·gc.alloc.rate:                   665.559 MB/sec
[info]                  ·gc.alloc.rate.norm:              20604.091 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.644 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.639 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20266.023 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 50875.099 ops/s
[info]                  ·gc.alloc.rate:                   665.889 MB/sec
[info]                  ·gc.alloc.rate.norm:              20603.910 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.864 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.298 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20338.092 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala":
[info]   50746.914 ±(99.9%) 1319.729 ops/s [Average]
[info]   (min, avg, max) = (50159.003, 50746.914, 51054.789), stdev = 342.729
[info]   CI (99.9%): [49427.186, 52066.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   664.157 ±(99.9%) 16.940 MB/sec [Average]
[info]   (min, avg, max) = (656.556, 664.157, 667.923), stdev = 4.399
[info]   CI (99.9%): [647.217, 681.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   20604.011 ±(99.9%) 0.258 B/op [Average]
[info]   (min, avg, max) = (20603.910, 20604.011, 20604.091), stdev = 0.067
[info]   CI (99.9%): [20603.753, 20604.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.079, 0.125), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2.457 ±(99.9%) 5.431 B/op [Average]
[info]   (min, avg, max) = (0.644, 2.457, 3.919), stdev = 1.410
[info]   CI (99.9%): [≈ 0, 7.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   651.872 ±(99.9%) 16.944 MB/sec [Average]
[info]   (min, avg, max) = (646.021, 651.872, 657.298), stdev = 4.400
[info]   CI (99.9%): [634.928, 668.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   20223.496 ±(99.9%) 685.366 B/op [Average]
[info]   (min, avg, max) = (19928.386, 20223.496, 20379.572), stdev = 177.987
[info]   CI (99.9%): [19538.130, 20908.862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala
[info] # Run progress: 99.26% complete, ETA 00:00:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 67924.973 ops/s
[info] # Warmup Iteration   2: 91501.143 ops/s
[info] # Warmup Iteration   3: 90787.016 ops/s
[info] Iteration   1: 91814.176 ops/s
[info]                  ·gc.alloc.rate:                   599.965 MB/sec
[info]                  ·gc.alloc.rate.norm:              10288.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.901 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66.893 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.877 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11246.773 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 92015.562 ops/s
[info]                  ·gc.alloc.rate:                   601.272 MB/sec
[info]                  ·gc.alloc.rate.norm:              10288.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.356 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.577 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11165.852 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 89281.300 ops/s
[info]                  ·gc.alloc.rate:                   583.638 MB/sec
[info]                  ·gc.alloc.rate.norm:              10288.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.466 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      650.756 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11471.128 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 91888.616 ops/s
[info]                  ·gc.alloc.rate:                   600.535 MB/sec
[info]                  ·gc.alloc.rate.norm:              10288.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      325.988 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5584.632 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 92623.797 ops/s
[info]                  ·gc.alloc.rate:                   605.317 MB/sec
[info]                  ·gc.alloc.rate.norm:              10288.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.769 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.641 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11092.329 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala":
[info]   91524.690 ±(99.9%) 4982.842 ops/s [Average]
[info]   (min, avg, max) = (89281.300, 91524.690, 92623.797), stdev = 1294.028
[info]   CI (99.9%): [86541.848, 96507.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   598.145 ±(99.9%) 32.257 MB/sec [Average]
[info]   (min, avg, max) = (583.638, 598.145, 605.317), stdev = 8.377
[info]   CI (99.9%): [565.888, 630.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   10288.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10288.004, 10288.005, 10288.005), stdev = 0.001
[info]   CI (99.9%): [10288.004, 10288.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.822 ±(99.9%) 6.630 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.822, 3.901), stdev = 1.722
[info]   CI (99.9%): [≈ 0, 7.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   14.097 ±(99.9%) 113.683 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14.097, 66.893), stdev = 29.523
[info]   CI (99.9%): [≈ 0, 127.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   587.568 ±(99.9%) 563.115 MB/sec [Average]
[info]   (min, avg, max) = (325.988, 587.568, 655.877), stdev = 146.239
[info]   CI (99.9%): [24.453, 1150.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   10112.143 ±(99.9%) 9761.144 B/op [Average]
[info]   (min, avg, max) = (5584.632, 10112.143, 11471.128), stdev = 2534.938
[info]   CI (99.9%): [350.999, 19873.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 99.63% complete, ETA 00:00:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 79397.279 ops/s
[info] # Warmup Iteration   2: 99088.788 ops/s
[info] # Warmup Iteration   3: 100758.038 ops/s
[info] Iteration   1: 100723.624 ops/s
[info]                  ·gc.alloc.rate:      12.283 MB/sec
[info]                  ·gc.alloc.rate.norm: 192.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 101366.155 ops/s
[info]                  ·gc.alloc.rate:      12.360 MB/sec
[info]                  ·gc.alloc.rate.norm: 192.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 100930.244 ops/s
[info]                  ·gc.alloc.rate:      12.309 MB/sec
[info]                  ·gc.alloc.rate.norm: 192.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 101032.697 ops/s
[info]                  ·gc.alloc.rate:      12.321 MB/sec
[info]                  ·gc.alloc.rate.norm: 192.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 101124.995 ops/s
[info]                  ·gc.alloc.rate:      12.333 MB/sec
[info]                  ·gc.alloc.rate.norm: 192.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   101035.543 ±(99.9%) 914.671 ops/s [Average]
[info]   (min, avg, max) = (100723.624, 101035.543, 101366.155), stdev = 237.537
[info]   CI (99.9%): [100120.872, 101950.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   12.321 ±(99.9%) 0.110 MB/sec [Average]
[info]   (min, avg, max) = (12.283, 12.321, 12.360), stdev = 0.028
[info]   CI (99.9%): [12.212, 12.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   192.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (192.004, 192.004, 192.004), stdev = 0.001
[info]   CI (99.9%): [192.004, 192.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # Run complete. Total time: 00:58:08
[info] Benchmark                                                                                 Mode  Cnt         Score         Error   Units
[info] AdtBenchmark.readCirce                                                                   thrpt    5    724500.234 ±   50063.353   ops/s
[info] AdtBenchmark.readCirce:·gc.alloc.rate                                                    thrpt    5      1914.589 ±     133.185  MB/sec
[info] AdtBenchmark.readCirce:·gc.alloc.rate.norm                                               thrpt    5      4160.001 ±       0.001    B/op
[info] AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           thrpt    5         0.096 ±       0.166  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      thrpt    5         0.209 ±       0.380    B/op
[info] AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       thrpt    5      1936.511 ±     573.915  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  thrpt    5      4208.224 ±    1252.759    B/op
[info] AdtBenchmark.readCirce:·gc.count                                                         thrpt    5        29.000                counts
[info] AdtBenchmark.readCirce:·gc.time                                                          thrpt    5        28.000                    ms
[info] AdtBenchmark.readJacksonScala                                                            thrpt    5   1672613.051 ±   72945.744   ops/s
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate                                             thrpt    5      1190.052 ±      51.913  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        thrpt    5      1120.000 ±       0.001    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    thrpt    5         0.108 ±       0.088  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               thrpt    5         0.102 ±       0.081    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                thrpt    5      1193.859 ±     699.870  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           thrpt    5      1123.905 ±     666.282    B/op
[info] AdtBenchmark.readJacksonScala:·gc.count                                                  thrpt    5        18.000                counts
[info] AdtBenchmark.readJacksonScala:·gc.time                                                   thrpt    5        22.000                    ms
[info] AdtBenchmark.readJsoniterScala                                                           thrpt    5   4050007.187 ±   49863.158   ops/s
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate                                            thrpt    5       267.547 ±       3.364  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       thrpt    5       104.000 ±       0.001    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   thrpt    5         0.636 ±       5.394  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              thrpt    5         0.248 ±       2.107    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               thrpt    5       219.895 ±     490.243  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          thrpt    5        85.481 ±     190.946    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.count                                                 thrpt    5         4.000                counts
[info] AdtBenchmark.readJsoniterScala:·gc.time                                                  thrpt    5         9.000                    ms
[info] AdtBenchmark.readPlayJson                                                                thrpt    5    173277.817 ±    5313.175   ops/s
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate                                                 thrpt    5      1467.753 ±      45.108  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate.norm                                            thrpt    5     13336.002 ±       0.001    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        thrpt    5         0.075 ±       0.209  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   thrpt    5         0.678 ±       1.876    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    thrpt    5      1532.424 ±     701.807  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               thrpt    5     13930.570 ±    6624.579    B/op
[info] AdtBenchmark.readPlayJson:·gc.count                                                      thrpt    5        23.000                counts
[info] AdtBenchmark.readPlayJson:·gc.time                                                       thrpt    5        26.000                    ms
[info] AdtBenchmark.writeJacksonScala                                                           thrpt    5   2085380.750 ±   89978.617   ops/s
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate                                            thrpt    5       741.822 ±      32.154  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       thrpt    5       560.000 ±       0.001    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   thrpt    5         0.075 ±       0.231  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              thrpt    5         0.056 ±       0.173    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               thrpt    5       720.284 ±     564.953  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          thrpt    5       544.781 ±     456.177    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.count                                                 thrpt    5        11.000                counts
[info] AdtBenchmark.writeJacksonScala:·gc.time                                                  thrpt    5        13.000                    ms
[info] AdtBenchmark.writeJsoniterScala                                                          thrpt    5  13855783.974 ±  373600.276   ops/s
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate                                           thrpt    5       704.095 ±      18.988  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      thrpt    5        80.000 ±       0.001    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  thrpt    5         0.087 ±       0.067  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             thrpt    5         0.010 ±       0.008    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              thrpt    5       719.526 ±     566.943  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         thrpt    5        81.699 ±      62.710    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.count                                                thrpt    5        11.000                counts
[info] AdtBenchmark.writeJsoniterScala:·gc.time                                                 thrpt    5        11.000                    ms
[info] AdtBenchmark.writePlayJson                                                               thrpt    5    334337.037 ±    5544.124   ops/s
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate                                                thrpt    5      1082.222 ±      17.443  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate.norm                                           thrpt    5      5096.001 ±       0.001    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       thrpt    5         0.104 ±       0.113  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  thrpt    5         0.490 ±       0.536    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   thrpt    5      1057.786 ±     553.811  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              thrpt    5      4980.705 ±    2594.982    B/op
[info] AdtBenchmark.writePlayJson:·gc.count                                                     thrpt    5        16.000                counts
[info] AdtBenchmark.writePlayJson:·gc.time                                                      thrpt    5        18.000                    ms
[info] AnyRefsBenchmark.readCirce                                                               thrpt    5   1597316.142 ±   30701.095   ops/s
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate                                                thrpt    5      2492.017 ±      48.659  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm                                           thrpt    5      2456.000 ±       0.001    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       thrpt    5         0.137 ±       0.184  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  thrpt    5         0.135 ±       0.181    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   thrpt    5      2491.833 ±     736.200  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              thrpt    5      2455.920 ±     729.731    B/op
[info] AnyRefsBenchmark.readCirce:·gc.count                                                     thrpt    5        37.000                counts
[info] AnyRefsBenchmark.readCirce:·gc.time                                                      thrpt    5        35.000                    ms
[info] AnyRefsBenchmark.readJacksonScala                                                        thrpt    5   2562533.790 ±   51667.248   ops/s
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate                                         thrpt    5      1796.978 ±      36.780  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    thrpt    5      1104.000 ±       0.001    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                thrpt    5         0.112 ±       0.122  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           thrpt    5         0.069 ±       0.075    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            thrpt    5      1744.288 ±     562.448  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       thrpt    5      1071.464 ±     333.866    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.count                                              thrpt    5        26.000                counts
[info] AnyRefsBenchmark.readJacksonScala:·gc.time                                               thrpt    5        31.000                    ms
[info] AnyRefsBenchmark.readJsoniterScala                                                       thrpt    5  11748377.263 ±  170748.050   ops/s
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate                                        thrpt    5      1492.547 ±      22.004  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   thrpt    5       200.000 ±       0.001    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               thrpt    5         0.087 ±       0.143  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          thrpt    5         0.012 ±       0.019    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           thrpt    5      1468.126 ±     704.916  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      thrpt    5       196.745 ±      95.126    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.count                                             thrpt    5        22.000                counts
[info] AnyRefsBenchmark.readJsoniterScala:·gc.time                                              thrpt    5        20.000                    ms
[info] AnyRefsBenchmark.readPlayJson                                                            thrpt    5    646840.499 ±    9505.224   ops/s
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate                                             thrpt    5      1709.221 ±      25.828  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm                                        thrpt    5      4160.001 ±       0.001    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    thrpt    5         0.125 ±       0.113  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               thrpt    5         0.304 ±       0.276    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                thrpt    5      1740.075 ±     515.802  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           thrpt    5      4235.631 ±    1289.869    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.count                                                  thrpt    5        26.000                counts
[info] AnyRefsBenchmark.readPlayJson:·gc.time                                                   thrpt    5        30.000                    ms
[info] AnyRefsBenchmark.writeCirce                                                              thrpt    5   2088959.451 ±  117859.960   ops/s
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate                                               thrpt    5      1911.213 ±     107.793  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm                                          thrpt    5      1440.000 ±       0.001    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                      thrpt    5         0.117 ±       0.107  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                 thrpt    5         0.088 ±       0.085    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                  thrpt    5      1938.279 ±     604.866  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                             thrpt    5      1460.366 ±     447.172    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.count                                                    thrpt    5        29.000                counts
[info] AnyRefsBenchmark.writeCirce:·gc.time                                                     thrpt    5        28.000                    ms
[info] AnyRefsBenchmark.writeJacksonScala                                                       thrpt    5   6680696.499 ±  170531.829   ops/s
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate                                        thrpt    5      1833.097 ±      46.771  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   thrpt    5       432.000 ±       0.001    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               thrpt    5         0.112 ±       0.184  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          thrpt    5         0.026 ±       0.044    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           thrpt    5      1809.785 ±     717.402  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      thrpt    5       426.566 ±     171.502    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.count                                             thrpt    5        27.000                counts
[info] AnyRefsBenchmark.writeJacksonScala:·gc.time                                              thrpt    5        31.000                    ms
[info] AnyRefsBenchmark.writeJsoniterScala                                                      thrpt    5  22767953.775 ±  307621.312   ops/s
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate                                       thrpt    5       694.132 ±       9.160  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  thrpt    5        48.000 ±       0.001    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              thrpt    5         0.058 ±       0.154  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         thrpt    5         0.004 ±       0.011    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          thrpt    5       653.917 ±       4.925  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     thrpt    5        45.219 ±       0.619    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.count                                            thrpt    5        10.000                counts
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.time                                             thrpt    5         8.000                    ms
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc                                              thrpt    5  22779323.405 ± 1027505.769   ops/s
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               thrpt    5        ≈ 10⁻⁴                MB/sec
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          thrpt    5        ≈ 10⁻⁵                  B/op
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    thrpt    5           ≈ 0                counts
[info] AnyRefsBenchmark.writePlayJson                                                           thrpt    5   1193404.755 ±   55114.963   ops/s
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate                                            thrpt    5      1776.858 ±      82.145  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm                                       thrpt    5      2344.000 ±       0.001    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   thrpt    5         0.108 ±       0.132  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              thrpt    5         0.143 ±       0.170    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               thrpt    5      1810.001 ±     697.677  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          thrpt    5      2386.946 ±     872.830    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.count                                                 thrpt    5        27.000                counts
[info] AnyRefsBenchmark.writePlayJson:·gc.time                                                  thrpt    5        33.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readCirce                                                    thrpt    5     16547.618 ±     160.981   ops/s
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate                                     thrpt    5      1201.957 ±      11.930  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate.norm                                thrpt    5    114340.842 ±      25.376    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space                            thrpt    5         0.092 ±       0.231  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                       thrpt    5         8.718 ±      21.988    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                        thrpt    5      1187.213 ±     676.871  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                   thrpt    5    112966.889 ±   65260.416    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.count                                          thrpt    5        18.000                counts
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.time                                           thrpt    5        17.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala                                             thrpt    5     19198.732 ±     308.208   ops/s
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate                              thrpt    5       679.186 ±      11.038  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate.norm                         thrpt    5     55680.588 ±      57.410    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                     thrpt    5         0.029 ±       0.091  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                thrpt    5         2.393 ±       7.525    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                 thrpt    5       655.760 ±      18.244  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5     53759.922 ±    1047.199    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.count                                   thrpt    5        10.000                counts
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.time                                    thrpt    5        13.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala                                            thrpt    5     20861.846 ±     167.782   ops/s
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate                             thrpt    5       386.957 ±       3.055  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                        thrpt    5     29200.021 ±       0.008    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                    thrpt    5         0.674 ±       5.646  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm               thrpt    5        50.868 ±     426.175    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                thrpt    5       365.480 ±     314.277  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5     27588.487 ±   23967.668    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.count                                  thrpt    5         6.000                counts
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.time                                   thrpt    5        10.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readPlayJson                                                 thrpt    5     17149.947 ±     115.337   ops/s
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate                                  thrpt    5       967.463 ±       6.573  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate.norm                             thrpt    5     88808.040 ±       0.127    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                         thrpt    5         0.046 ±       0.183  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                    thrpt    5         4.199 ±      16.738    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                     thrpt    5       978.057 ±      45.738  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                thrpt    5     89779.536 ±    3747.258    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.count                                       thrpt    5        15.000                counts
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.time                                        thrpt    5        16.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeCirce                                                   thrpt    5     13525.821 ±     473.353   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate                                    thrpt    5      1608.929 ±      57.038  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate.norm                               thrpt    5    187271.169 ±      47.003    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                           thrpt    5         0.058 ±       0.104  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                      thrpt    5         6.776 ±      12.169    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                       thrpt    5      1662.277 ±      72.177  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                  thrpt    5    193484.118 ±    7035.443    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.count                                         thrpt    5        25.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.time                                          thrpt    5        24.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala                                            thrpt    5     13104.936 ±     148.979   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate                             thrpt    5      1449.087 ±      15.966  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                        thrpt    5    174064.033 ±       0.574    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                    thrpt    5         0.037 ±       0.174  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm               thrpt    5         4.504 ±      20.866    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                thrpt    5      1401.779 ±     559.941  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5    168421.086 ±   69303.100    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.count                                  thrpt    5        21.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.time                                   thrpt    5        26.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala                                           thrpt    5     14783.811 ±     234.146   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate                            thrpt    5      1560.428 ±      24.690  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                       thrpt    5    166168.033 ±       0.031    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                   thrpt    5         0.100 ±       0.373  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm              thrpt    5        10.658 ±      40.002    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space               thrpt    5      1594.630 ±     554.079  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm          thrpt    5    169803.599 ±   58630.035    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.count                                 thrpt    5        24.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.time                                  thrpt    5        22.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc                                   thrpt    5     14465.992 ±     411.801   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                    thrpt    5      1499.262 ±      42.463  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm               thrpt    5    163136.225 ±       1.680    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space           thrpt    5         0.087 ±       0.067  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm      thrpt    5         9.505 ±       7.193    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space       thrpt    5      1527.008 ±     701.003  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm  thrpt    5    166095.591 ±   73764.769    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.count                         thrpt    5        23.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.time                          thrpt    5        22.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writePlayJson                                                thrpt    5      4438.563 ±     110.035   ops/s
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate                                 thrpt    5      1082.665 ±      26.656  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate.norm                            thrpt    5    383968.171 ±       1.303    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                        thrpt    5         0.054 ±       0.091  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                   thrpt    5        19.194 ±      32.388    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                    thrpt    5      1044.233 ±     559.702  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm               thrpt    5    370611.755 ±  209248.854    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.count                                      thrpt    5        16.000                counts
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.time                                       thrpt    5        17.000                    ms
[info] ArrayOfBigIntsBenchmark.readCirce                                                        thrpt    5      8430.864 ±     222.301   ops/s
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate                                         thrpt    5      1245.292 ±      32.780  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm                                    thrpt    5    232521.564 ±      13.041    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                thrpt    5         0.092 ±       0.166  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5        17.073 ±      30.852    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                            thrpt    5      1257.506 ±     548.320  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5    234834.386 ±  103490.899    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.count                                              thrpt    5        19.000                counts
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.time                                               thrpt    5        17.000                    ms
[info] ArrayOfBigIntsBenchmark.readJacksonScala                                                 thrpt    5     24439.883 ±     529.278   ops/s
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate                                  thrpt    5       903.929 ±      19.976  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                             thrpt    5     58227.700 ±      62.068    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                         thrpt    5         0.058 ±       0.132  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5         3.749 ±       8.433    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                     thrpt    5       925.598 ±     569.225  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5     59632.425 ±   36890.051    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count                                       thrpt    5        14.000                counts
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time                                        thrpt    5        16.000                    ms
[info] ArrayOfBigIntsBenchmark.readJsoniterScala                                                thrpt    5     28105.822 ±     626.581   ops/s
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                 thrpt    5       510.028 ±      11.437  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                            thrpt    5     28568.016 ±       0.008    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5         0.552 ±       4.536  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5        30.958 ±     254.080    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5       513.617 ±     655.278  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5     28801.843 ±   37141.903    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count                                      thrpt    5         8.000                counts
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time                                       thrpt    5        11.000                    ms
[info] ArrayOfBigIntsBenchmark.writeJacksonScala                                                thrpt    5     15423.768 ±     141.460   ops/s
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                 thrpt    5      1539.165 ±      14.550  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                            thrpt    5    157088.004 ±       0.210    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                        thrpt    5         0.087 ±       0.143  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5         8.926 ±      14.711    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                    thrpt    5      1539.780 ±     721.767  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5    157172.660 ±   74477.681    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count                                      thrpt    5        23.000                counts
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time                                       thrpt    5        27.000                    ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala                                               thrpt    5     18085.912 ±     444.518   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                thrpt    5      1580.020 ±      38.737  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                           thrpt    5    137528.024 ±       0.012    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5         0.112 ±       0.072  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5         9.786 ±       6.379    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5      1596.657 ±     594.500  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5    139037.446 ±   54280.476    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count                                     thrpt    5        24.000                counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time                                      thrpt    5        22.000                    ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc                                       thrpt    5     17551.043 ±     386.083   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                        thrpt    5      1532.507 ±      33.339  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                   thrpt    5    137440.025 ±       0.010    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space               thrpt    5         0.100 ±       0.104  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm          thrpt    5         8.952 ±       9.222    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space           thrpt    5      1527.869 ±     669.901  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm      thrpt    5    137030.862 ±   60272.182    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                             thrpt    5        23.000                counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time                              thrpt    5        21.000                    ms
[info] ArrayOfBooleansBenchmark.readCirce                                                       thrpt    5    369748.441 ±    7287.160   ops/s
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate                                        thrpt    5      1869.509 ±      36.427  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                   thrpt    5      7960.001 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                               thrpt    5         0.096 ±       0.091  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                          thrpt    5         0.408 ±       0.387    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                           thrpt    5      1872.961 ±     668.639  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                      thrpt    5      7975.552 ±    2886.475    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.count                                             thrpt    5        28.000                counts
[info] ArrayOfBooleansBenchmark.readCirce:·gc.time                                              thrpt    5        27.000                    ms
[info] ArrayOfBooleansBenchmark.readJacksonScala                                                thrpt    5    700293.366 ±   13100.789   ops/s
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                 thrpt    5       580.064 ±      10.869  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                            thrpt    5      1304.001 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                        thrpt    5         0.062 ±       0.170  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5         0.140 ±       0.382    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                    thrpt    5       588.081 ±     558.679  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5      1321.953 ±    1254.732    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.count                                      thrpt    5         9.000                counts
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.time                                       thrpt    5        10.000                    ms
[info] ArrayOfBooleansBenchmark.readJsoniterScala                                               thrpt    5   1787897.851 ±  100665.634   ops/s
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                thrpt    5       345.276 ±      19.609  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                           thrpt    5       304.000 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5         0.661 ±       5.614  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5         0.588 ±       4.995    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5       299.960 ±     155.600  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5       263.987 ±     132.252    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count                                     thrpt    5         5.000                counts
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time                                      thrpt    5        10.000                    ms
[info] ArrayOfBooleansBenchmark.readPlayJson                                                    thrpt    5    104988.254 ±    2246.269   ops/s
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                     thrpt    5      3812.640 ±      81.362  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                thrpt    5     57176.004 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                            thrpt    5         0.129 ±       0.119  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                       thrpt    5         1.933 ±       1.756    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                        thrpt    5      3804.038 ±     602.601  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                   thrpt    5     57046.555 ±    8880.721    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.count                                          thrpt    5        56.000                counts
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.time                                           thrpt    5        63.000                    ms
[info] ArrayOfBooleansBenchmark.writeCirce                                                      thrpt    5    317585.122 ±    5689.141   ops/s
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                       thrpt    5       777.903 ±      13.865  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                  thrpt    5      3856.001 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                              thrpt    5         0.054 ±       0.091  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                         thrpt    5         0.268 ±       0.456    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                          thrpt    5       719.007 ±     560.724  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                     thrpt    5      3563.455 ±    2759.756    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.count                                            thrpt    5        11.000                counts
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.time                                             thrpt    5        12.000                    ms
[info] ArrayOfBooleansBenchmark.writeJacksonScala                                               thrpt    5   1095867.502 ±   39947.161   ops/s
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                thrpt    5       774.044 ±      28.058  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                           thrpt    5      1112.000 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                       thrpt    5         0.079 ±       0.104  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5         0.114 ±       0.151    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                   thrpt    5       784.297 ±     681.476  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5      1127.064 ±     985.934    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count                                     thrpt    5        12.000                counts
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time                                      thrpt    5        14.000                    ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScala                                              thrpt    5   2332551.328 ±   56312.384   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                               thrpt    5      1078.823 ±      25.391  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                          thrpt    5       728.000 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                      thrpt    5         0.087 ±       0.088  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5         0.059 ±       0.059    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                  thrpt    5      1118.546 ±     688.200  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5       755.058 ±     471.852    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count                                    thrpt    5        17.000                counts
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time                                     thrpt    5        16.000                    ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc                                      thrpt    5   2564000.781 ±   12594.032   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                       thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                            thrpt    5           ≈ 0                counts
[info] ArrayOfBooleansBenchmark.writePlayJson                                                   thrpt    5    557569.407 ±    2511.022   ops/s
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                    thrpt    5       657.373 ±       3.152  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                               thrpt    5      1856.001 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                           thrpt    5         0.058 ±       0.154  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                      thrpt    5         0.165 ±       0.436    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                       thrpt    5       647.850 ±       5.135  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                  thrpt    5      1829.114 ±      10.239    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.count                                         thrpt    5        10.000                counts
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.time                                          thrpt    5        10.000                    ms
[info] ArrayOfBytesBenchmark.readCirce                                                          thrpt    5    177139.037 ±    4136.003   ops/s
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate                                           thrpt    5      2129.017 ±      49.851  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm                                      thrpt    5     18920.002 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  thrpt    5         0.100 ±       0.174  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             thrpt    5         0.888 ±       1.549    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              thrpt    5      2148.646 ±     685.831  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         thrpt    5     19093.324 ±    6010.154    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.count                                                thrpt    5        32.000                counts
[info] ArrayOfBytesBenchmark.readCirce:·gc.time                                                 thrpt    5        30.000                    ms
[info] ArrayOfBytesBenchmark.readJacksonScala                                                   thrpt    5    434269.755 ±   20691.858   ops/s
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate                                    thrpt    5       359.703 ±      17.066  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm                               thrpt    5      1304.001 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                           thrpt    5         0.029 ±       0.166  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5         0.105 ±       0.599    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                       thrpt    5       361.999 ±     321.579  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5      1311.348 ±    1136.090    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.count                                         thrpt    5         6.000                counts
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.time                                          thrpt    5         7.000                    ms
[info] ArrayOfBytesBenchmark.readJsoniterScala                                                  thrpt    5   1114600.164 ±    4616.784   ops/s
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate                                   thrpt    5       215.233 ±       0.912  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              thrpt    5       304.000 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          thrpt    5         0.002 ±       0.014  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5         0.003 ±       0.020    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      thrpt    5       204.586 ±     440.386  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5       289.088 ±     622.285    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.count                                        thrpt    5         4.000                counts
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.time                                         thrpt    5         9.000                    ms
[info] ArrayOfBytesBenchmark.readPlayJson                                                       thrpt    5     81090.223 ±    1696.866   ops/s
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate                                        thrpt    5      3345.452 ±      69.848  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm                                   thrpt    5     64952.005 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               thrpt    5         0.175 ±       0.251  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          thrpt    5         3.391 ±       4.848    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           thrpt    5      3324.112 ±     630.035  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5     64546.099 ±   12920.183    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.count                                             thrpt    5        49.000                counts
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.time                                              thrpt    5        51.000                    ms
[info] ArrayOfBytesBenchmark.writeCirce                                                         thrpt    5    324084.931 ±   11083.262   ops/s
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate                                          thrpt    5      1605.684 ±      54.937  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm                                     thrpt    5      7800.001 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 thrpt    5         0.087 ±       0.104  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5         0.425 ±       0.508    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             thrpt    5      1597.573 ±     595.493  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5      7760.174 ±    2866.187    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.count                                               thrpt    5        24.000                counts
[info] ArrayOfBytesBenchmark.writeCirce:·gc.time                                                thrpt    5        22.000                    ms
[info] ArrayOfBytesBenchmark.writeJsoniterScala                                                 thrpt    5   1888817.364 ±   35986.888   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate                                  thrpt    5       508.732 ±       9.782  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                             thrpt    5       424.000 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                         thrpt    5         0.780 ±       6.355  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5         0.647 ±       5.277    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                     thrpt    5       509.221 ±     651.139  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5       423.945 ±     536.709    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count                                       thrpt    5         8.000                counts
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time                                        thrpt    5        11.000                    ms
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc                                         thrpt    5   1858743.268 ±   23488.236   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                          thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                     thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count                               thrpt    5           ≈ 0                counts
[info] ArrayOfBytesBenchmark.writePlayJson                                                      thrpt    5     47171.107 ±     644.107   ops/s
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate                                       thrpt    5      1987.596 ±      27.462  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm                                  thrpt    5     66336.009 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                              thrpt    5         0.083 ±       0.098  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                         thrpt    5         2.780 ±       3.314    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                          thrpt    5      2000.900 ±      99.806  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5     66778.600 ±    2599.623    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.count                                            thrpt    5        30.000                counts
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.time                                             thrpt    5        30.000                    ms
[info] ArrayOfDoublesBenchmark.readCirce                                                        thrpt    5     26988.444 ±     386.280   ops/s
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate                                         thrpt    5      1580.638 ±      22.993  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm                                    thrpt    5     92192.016 ±       0.006    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                thrpt    5         0.100 ±       0.215  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5         5.826 ±      12.540    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                            thrpt    5      1596.157 ±     554.990  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5     93076.376 ±   31351.659    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.count                                              thrpt    5        24.000                counts
[info] ArrayOfDoublesBenchmark.readCirce:·gc.time                                               thrpt    5        23.000                    ms
[info] ArrayOfDoublesBenchmark.readJacksonScala                                                 thrpt    5     62424.984 ±    1006.537   ops/s
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate                                  thrpt    5      1030.004 ±      15.988  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm                             thrpt    5     25976.007 ±       0.001    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                         thrpt    5         0.071 ±       0.122  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5         1.785 ±       3.068    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                     thrpt    5       994.306 ±      32.651  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5     25075.958 ±     852.037    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.count                                       thrpt    5        15.000                counts
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.time                                        thrpt    5        17.000                    ms
[info] ArrayOfDoublesBenchmark.readJsoniterScala                                                thrpt    5     82150.761 ±    4662.339   ops/s
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate                                 thrpt    5       529.338 ±      30.193  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                            thrpt    5     10144.005 ±       0.001    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5         0.682 ±       5.466  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5        13.135 ±     105.469    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5       525.579 ±     691.823  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5     10036.307 ±   12800.640    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count                                      thrpt    5         8.000                counts
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time                                       thrpt    5        10.000                    ms
[info] ArrayOfDoublesBenchmark.readPlayJson                                                     thrpt    5     33671.731 ±     966.415   ops/s
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate                                      thrpt    5      1714.389 ±      48.658  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm                                 thrpt    5     80152.013 ±       0.006    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                             thrpt    5         0.125 ±       0.098  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                        thrpt    5         5.835 ±       4.513    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                         thrpt    5      1672.407 ±      64.326  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                    thrpt    5     78188.955 ±    1808.961    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.count                                           thrpt    5        25.000                counts
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.time                                            thrpt    5        26.000                    ms
[info] ArrayOfDoublesBenchmark.writeCirce                                                       thrpt    5     38564.662 ±     591.427   ops/s
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate                                        thrpt    5       593.071 ±      18.084  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm                                   thrpt    5     24208.293 ±     410.868    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                               thrpt    5         0.725 ±       5.796  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                          thrpt    5        29.744 ±     237.939    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                           thrpt    5       587.470 ±     562.076  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                      thrpt    5     23994.708 ±   23133.016    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.count                                             thrpt    5         9.000                counts
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.time                                              thrpt    5        10.000                    ms
[info] ArrayOfDoublesBenchmark.writeJacksonScala                                                thrpt    5     41775.832 ±    1673.827   ops/s
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate                                 thrpt    5       377.225 ±      15.133  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                            thrpt    5     14216.010 ±       0.002    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                        thrpt    5         0.029 ±       0.134  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5         1.102 ±       5.061    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                    thrpt    5       373.362 ±     595.517  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5     14072.389 ±   22432.392    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count                                      thrpt    5         6.000                counts
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time                                       thrpt    5         7.000                    ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScala                                               thrpt    5     46177.998 ±     588.874   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate                                thrpt    5       405.722 ±       5.166  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                           thrpt    5     13832.009 ±       0.001    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5         0.776 ±       6.298  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5        26.531 ±     215.487    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5       429.383 ±     569.909  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5     14637.004 ±   19401.555    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count                                     thrpt    5         7.000                counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time                                      thrpt    5        12.000                    ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc                                       thrpt    5     46757.976 ±     296.154   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                        thrpt    5       357.387 ±       2.488  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                   thrpt    5     12032.009 ±       0.001    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space               thrpt    5         0.762 ±       6.473  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm          thrpt    5        25.649 ±     217.842    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space           thrpt    5       364.164 ±     635.613  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm      thrpt    5     12252.894 ±   21287.430    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count                             thrpt    5         6.000                counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time                              thrpt    5        10.000                    ms
[info] ArrayOfDurationsBenchmark.readCirce                                                      thrpt    5     20190.991 ±     358.322   ops/s
[info] ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate                                       thrpt    5       757.129 ±      13.309  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate.norm                                  thrpt    5     59037.748 ±      16.326    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space                              thrpt    5         0.062 ±       0.150  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                         thrpt    5         4.862 ±      11.645    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                          thrpt    5       786.776 ±     691.341  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                     thrpt    5     61343.547 ±   53760.610    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.count                                            thrpt    5        12.000                counts
[info] ArrayOfDurationsBenchmark.readCirce:·gc.time                                             thrpt    5        12.000                    ms
[info] ArrayOfDurationsBenchmark.readJacksonScala                                               thrpt    5     20236.558 ±    1026.519   ops/s
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate                                thrpt    5       574.107 ±      28.622  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate.norm                           thrpt    5     44663.500 ±      57.467    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                       thrpt    5         0.046 ±       0.222  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5         3.597 ±      17.631    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                   thrpt    5       588.586 ±     558.473  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5     45864.867 ±   44368.751    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.count                                     thrpt    5         9.000                counts
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.time                                      thrpt    5        11.000                    ms
[info] ArrayOfDurationsBenchmark.readJsoniterScala                                              thrpt    5     81937.532 ±    1338.516   ops/s
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate                               thrpt    5       213.193 ±       3.479  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                          thrpt    5      4096.005 ±       0.001    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                      thrpt    5         0.001 ±       0.011  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5         0.025 ±       0.213    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                  thrpt    5       204.563 ±     440.337  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5      3931.547 ±    8463.331    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.count                                    thrpt    5         4.000                counts
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.time                                     thrpt    5         9.000                    ms
[info] ArrayOfDurationsBenchmark.readPlayJson                                                   thrpt    5     16629.203 ±     560.090   ops/s
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate                                    thrpt    5      1056.112 ±      35.453  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate.norm                               thrpt    5     99984.147 ±       1.029    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                           thrpt    5         0.062 ±       0.160  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                      thrpt    5         5.909 ±      15.211    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                       thrpt    5      1055.769 ±     553.096  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                  thrpt    5     99982.054 ±   53407.047    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.count                                         thrpt    5        16.000                counts
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.time                                          thrpt    5        17.000                    ms
[info] ArrayOfDurationsBenchmark.writeCirce                                                     thrpt    5     58482.858 ±    1573.287   ops/s
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate                                      thrpt    5      1070.750 ±      28.758  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate.norm                                 thrpt    5     28824.007 ±       0.001    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                             thrpt    5         0.083 ±       0.098  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                        thrpt    5         2.240 ±       2.621    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                         thrpt    5      1052.971 ±     565.161  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                    thrpt    5     28343.447 ±   15101.230    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.count                                           thrpt    5        16.000                counts
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.time                                            thrpt    5        17.000                    ms
[info] ArrayOfDurationsBenchmark.writeJsoniterScala                                             thrpt    5    250250.867 ±   10288.581   ops/s
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate                              thrpt    5       396.745 ±      16.252  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                         thrpt    5      2496.002 ±       0.001    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                     thrpt    5         0.772 ±       6.272  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                thrpt    5         4.932 ±      40.113    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                 thrpt    5       429.785 ±     570.037  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5      2705.368 ±    3611.224    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.count                                   thrpt    5         7.000                counts
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.time                                    thrpt    5        12.000                    ms
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc                                     thrpt    5    337887.488 ±    6507.165   ops/s
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                      thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                 thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.count                           thrpt    5           ≈ 0                counts
[info] ArrayOfDurationsBenchmark.writePlayJson                                                  thrpt    5     72808.378 ±    2364.835   ops/s
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate                                   thrpt    5      1135.086 ±      36.941  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate.norm                              thrpt    5     24544.006 ±       0.001    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                          thrpt    5         0.092 ±       0.146  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                     thrpt    5         1.978 ±       3.118    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                      thrpt    5      1177.615 ±     693.609  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                 thrpt    5     25473.462 ±   15269.211    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.count                                        thrpt    5        18.000                counts
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.time                                         thrpt    5        19.000                    ms
[info] ArrayOfFloatsBenchmark.readCirce                                                         thrpt    5     38191.098 ±     666.001   ops/s
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate                                          thrpt    5      1702.954 ±      29.962  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm                                     thrpt    5     70200.013 ±       0.014    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                 thrpt    5         0.071 ±       0.044  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5         2.918 ±       1.841    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                             thrpt    5      1667.808 ±      64.703  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5     68750.248 ±    1783.128    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.count                                               thrpt    5        25.000                counts
[info] ArrayOfFloatsBenchmark.readCirce:·gc.time                                                thrpt    5        23.000                    ms
[info] ArrayOfFloatsBenchmark.readJacksonScala                                                  thrpt    5    106337.317 ±    1958.457   ops/s
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate                                   thrpt    5      1172.636 ±      21.898  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm                              thrpt    5     17360.004 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                          thrpt    5         0.112 ±       0.091  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5         1.664 ±       1.362    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                      thrpt    5      1197.647 ±     700.606  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5     17733.099 ±   10450.156    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.count                                        thrpt    5        18.000                counts
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.time                                         thrpt    5        20.000                    ms
[info] ArrayOfFloatsBenchmark.readJsoniterScala                                                 thrpt    5    151336.648 ±    1715.480   ops/s
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate                                  thrpt    5        98.431 ±       1.142  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                             thrpt    5      1024.003 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                         thrpt    5         0.423 ±       3.606  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5         4.418 ±      37.631    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                     thrpt    5       102.276 ±     539.273  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5      1067.440 ±    5628.305    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count                                       thrpt    5         2.000                counts
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time                                        thrpt    5         5.000                    ms
[info] ArrayOfFloatsBenchmark.readPlayJson                                                      thrpt    5     39994.043 ±     939.538   ops/s
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate                                       thrpt    5      2083.267 ±      59.161  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm                                  thrpt    5     82004.045 ±     448.032    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                              thrpt    5         0.133 ±       0.269  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                         thrpt    5         5.236 ±      10.542    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                          thrpt    5      2085.391 ±     594.288  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5     82089.796 ±   23413.733    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.count                                            thrpt    5        31.000                counts
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.time                                             thrpt    5        31.000                    ms
[info] ArrayOfFloatsBenchmark.writeCirce                                                        thrpt    5     80055.569 ±    1274.656   ops/s
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate                                         thrpt    5       614.735 ±       9.448  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm                                    thrpt    5     12088.005 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                thrpt    5         0.722 ±       5.815  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5        14.291 ±     115.159    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                            thrpt    5       652.769 ±       5.411  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5     12836.155 ±     297.300    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.count                                              thrpt    5        10.000                counts
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.time                                               thrpt    5        12.000                    ms
[info] ArrayOfFloatsBenchmark.writeJacksonScala                                                 thrpt    5    103594.037 ±    1333.161   ops/s
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate                                  thrpt    5       342.182 ±       4.518  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                             thrpt    5      5200.004 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                         thrpt    5         0.021 ±       0.113  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5         0.315 ±       1.717    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                     thrpt    5       359.471 ±     326.947  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5      5464.458 ±    5013.694    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count                                       thrpt    5         6.000                counts
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time                                        thrpt    5         7.000                    ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScala                                                thrpt    5    117328.917 ±    2496.867   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate                                 thrpt    5       358.911 ±       7.643  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                            thrpt    5      4816.004 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5         0.758 ±       6.351  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5        10.150 ±      85.016    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5       364.265 ±     640.785  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5      4897.277 ±    8755.981    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count                                      thrpt    5         6.000                counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time                                       thrpt    5        11.000                    ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc                                        thrpt    5    117614.986 ±    1412.670   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                         thrpt    5       267.149 ±       3.214  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                    thrpt    5      3576.003 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                thrpt    5         0.751 ±       6.363  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm           thrpt    5        10.066 ±      85.238    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space            thrpt    5       219.148 ±     487.153  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm       thrpt    5      2935.440 ±    6525.688    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count                              thrpt    5         4.000                counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time                               thrpt    5        11.000                    ms
[info] ArrayOfInstantsBenchmark.readCirce                                                       thrpt    5      9989.312 ±     170.787   ops/s
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate                                        thrpt    5      1640.181 ±      27.839  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm                                   thrpt    5    258492.682 ±      27.234    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space                               thrpt    5         0.092 ±       0.122  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                          thrpt    5        14.435 ±      19.210    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                           thrpt    5      1665.314 ±      64.476  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                      thrpt    5    262459.521 ±   11853.896    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.count                                             thrpt    5        25.000                counts
[info] ArrayOfInstantsBenchmark.readCirce:·gc.time                                              thrpt    5        24.000                    ms
[info] ArrayOfInstantsBenchmark.readJacksonScala                                                thrpt    5     10478.153 ±     222.933   ops/s
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate                                 thrpt    5      1618.429 ±      34.553  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm                            thrpt    5    243146.041 ±      56.063    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                        thrpt    5         0.054 ±       0.134  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5         8.140 ±      20.199    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                    thrpt    5      1609.407 ±     575.656  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5    241729.520 ±   83506.374    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.count                                      thrpt    5        24.000                counts
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.time                                       thrpt    5        29.000                    ms
[info] ArrayOfInstantsBenchmark.readJsoniterScala                                               thrpt    5    120071.774 ±    4940.966   ops/s
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate                                thrpt    5       312.461 ±      12.961  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                           thrpt    5      4096.004 ±       0.001    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5         0.555 ±       4.529  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5         7.412 ±      60.547    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5       351.825 ±     363.694  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5      4611.998 ±    4748.453    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count                                     thrpt    5         6.000                counts
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time                                      thrpt    5        12.000                    ms
[info] ArrayOfInstantsBenchmark.readPlayJson                                                    thrpt    5      6020.082 ±      81.254   ops/s
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate                                     thrpt    5      1589.255 ±      21.595  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm                                thrpt    5    415600.071 ±       0.012    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                            thrpt    5         0.058 ±       0.119  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                       thrpt    5        15.228 ±      30.976    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                        thrpt    5      1608.223 ±     591.579  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                   thrpt    5    420617.932 ±  157054.070    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.count                                          thrpt    5        24.000                counts
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.time                                           thrpt    5        28.000                    ms
[info] ArrayOfInstantsBenchmark.writeCirce                                                      thrpt    5     25169.381 ±     207.212   ops/s
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate                                       thrpt    5      1414.361 ±      11.256  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm                                  thrpt    5     88463.715 ±      42.605    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                              thrpt    5         0.058 ±       0.119  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                         thrpt    5         3.646 ±       7.446    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                          thrpt    5      1392.191 ±     574.645  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                     thrpt    5     87076.295 ±   35908.608    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.count                                            thrpt    5        21.000                counts
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.time                                             thrpt    5        21.000                    ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScala                                              thrpt    5    272297.801 ±    2247.585   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate                               thrpt    5       600.482 ±       5.005  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                          thrpt    5      3472.002 ±       0.001    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                      thrpt    5         0.793 ±       6.341  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5         4.601 ±      36.781    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                  thrpt    5       588.634 ±     563.307  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5      3404.616 ±    3271.529    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count                                    thrpt    5         9.000                counts
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time                                     thrpt    5        10.000                    ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc                                      thrpt    5    296218.440 ±    2652.910   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                       thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count                            thrpt    5           ≈ 0                counts
[info] ArrayOfInstantsBenchmark.writePlayJson                                                   thrpt    5     28259.100 ±     306.914   ops/s
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate                                    thrpt    5      1486.142 ±      15.963  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm                               thrpt    5     82792.015 ±       0.006    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                           thrpt    5         0.083 ±       0.098  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                      thrpt    5         4.637 ±       5.481    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                       thrpt    5      1518.097 ±     699.466  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                  thrpt    5     84585.059 ±   39445.856    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.count                                         thrpt    5        23.000                counts
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.time                                          thrpt    5        23.000                    ms
[info] ArrayOfIntsBenchmark.readCirce                                                           thrpt    5    140144.906 ±    2544.585   ops/s
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate                                            thrpt    5      2282.337 ±      41.819  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                       thrpt    5     25640.003 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                   thrpt    5         0.112 ±       0.185  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                              thrpt    5         1.262 ±       2.067    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                               thrpt    5      2286.447 ±     542.552  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                          thrpt    5     25683.697 ±    5898.097    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.count                                                 thrpt    5        34.000                counts
[info] ArrayOfIntsBenchmark.readCirce:·gc.time                                                  thrpt    5        31.000                    ms
[info] ArrayOfIntsBenchmark.readJacksonScala                                                    thrpt    5    302144.767 ±    9394.852   ops/s
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                     thrpt    5       426.863 ±      13.547  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                thrpt    5      2224.001 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                            thrpt    5         0.050 ±       0.184  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                       thrpt    5         0.261 ±       0.964    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                        thrpt    5       441.662 ±     623.880  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                   thrpt    5      2301.823 ±    3267.767    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.count                                          thrpt    5         7.000                counts
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.time                                           thrpt    5         9.000                    ms
[info] ArrayOfIntsBenchmark.readJsoniterScala                                                   thrpt    5    740329.567 ±   28745.065   ops/s
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                    thrpt    5       481.561 ±      18.680  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                               thrpt    5      1024.001 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                           thrpt    5         0.675 ±       5.503  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5         1.433 ±      11.675    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                       thrpt    5       510.980 ±     650.394  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5      1085.258 ±    1365.202    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.count                                         thrpt    5         8.000                counts
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.time                                          thrpt    5        11.000                    ms
[info] ArrayOfIntsBenchmark.readPlayJson                                                        thrpt    5     69188.101 ±    3316.594   ops/s
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                         thrpt    5      2941.201 ±     146.189  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                    thrpt    5     66915.458 ±     313.637    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                thrpt    5         0.096 ±       0.072  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                           thrpt    5         2.177 ±       1.600    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                            thrpt    5      2912.646 ±     698.533  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                       thrpt    5     66298.616 ±   17944.598    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.count                                              thrpt    5        43.000                counts
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.time                                               thrpt    5        44.000                    ms
[info] ArrayOfIntsBenchmark.writeCirce                                                          thrpt    5    228175.822 ±    3229.986   ops/s
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate                                           thrpt    5      1604.796 ±      23.260  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                      thrpt    5     11072.002 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                  thrpt    5         0.092 ±       0.091  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                             thrpt    5         0.631 ±       0.623    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                              thrpt    5      1597.589 ±     573.965  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                         thrpt    5     11019.965 ±    3849.435    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.count                                                thrpt    5        24.000                counts
[info] ArrayOfIntsBenchmark.writeCirce:·gc.time                                                 thrpt    5        23.000                    ms
[info] ArrayOfIntsBenchmark.writeJacksonScala                                                   thrpt    5    857053.410 ±   17376.365   ops/s
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                    thrpt    5       675.121 ±      13.897  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                               thrpt    5      1240.000 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                           thrpt    5         0.062 ±       0.179  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5         0.114 ±       0.328    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                       thrpt    5       716.281 ±     551.503  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5      1314.919 ±     991.411    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.count                                         thrpt    5        11.000                counts
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.time                                          thrpt    5        13.000                    ms
[info] ArrayOfIntsBenchmark.writeJsoniterScala                                                  thrpt    5   1184124.681 ±   22514.987   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                   thrpt    5       643.861 ±      12.285  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                              thrpt    5       856.000 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                          thrpt    5         0.075 ±       0.201  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5         0.100 ±       0.269    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                      thrpt    5       588.353 ±     564.031  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5       781.946 ±     746.517    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count                                        thrpt    5         9.000                counts
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time                                         thrpt    5         9.000                    ms
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc                                          thrpt    5   1123149.644 ±    7578.923   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                           thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                      thrpt    5        ≈ 10⁻³                  B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                thrpt    5           ≈ 0                counts
[info] ArrayOfIntsBenchmark.writePlayJson                                                       thrpt    5     34394.090 ±     652.759   ops/s
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                        thrpt    5      1860.285 ±      34.952  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                   thrpt    5     85144.023 ±       0.093    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                               thrpt    5         0.079 ±       0.088  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                          thrpt    5         3.620 ±       4.030    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                           thrpt    5      1862.948 ±     701.951  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5     85292.649 ±   33321.467    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.count                                             thrpt    5        28.000                counts
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.time                                              thrpt    5        28.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readCirce                                                 thrpt    5     10527.905 ±     140.150   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate                                  thrpt    5      1347.366 ±      10.839  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                             thrpt    5    201456.819 ±    1667.999    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                         thrpt    5         0.067 ±       0.036  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                    thrpt    5         9.955 ±       5.249    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                     thrpt    5      1392.501 ±     594.814  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                thrpt    5    208201.433 ±   88776.213    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.count                                       thrpt    5        21.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.time                                        thrpt    5        22.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala                                          thrpt    5     11458.906 ±     138.381   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                           thrpt    5      1357.836 ±      16.475  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                      thrpt    5    186558.189 ±      63.824    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                  thrpt    5         0.046 ±       0.067  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm             thrpt    5         6.288 ±       9.201    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space              thrpt    5      1401.781 ±     598.255  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm         thrpt    5    192563.439 ±   80498.290    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.count                                thrpt    5        21.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.time                                 thrpt    5        26.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala                                         thrpt    5    147016.193 ±    2280.441   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                          thrpt    5       956.332 ±      14.716  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                     thrpt    5     10240.003 ±       0.001    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                 thrpt    5         0.071 ±       0.091  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm            thrpt    5         0.758 ±       0.974    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space             thrpt    5       994.468 ±      14.816  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm        thrpt    5     10648.570 ±     289.317    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.count                               thrpt    5        15.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.time                                thrpt    5        14.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson                                              thrpt    5      8938.628 ±      83.350   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate                               thrpt    5      1652.617 ±      15.643  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                          thrpt    5    291032.047 ±       0.008    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                      thrpt    5         0.058 ±       0.104  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                 thrpt    5        10.258 ±      18.332    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                  thrpt    5      1678.229 ±      53.533  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm             thrpt    5    295544.158 ±   10006.540    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.count                                    thrpt    5        25.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.time                                     thrpt    5        28.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeCirce                                                thrpt    5     23499.159 ±     495.248   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate                                 thrpt    5      1071.043 ±      22.580  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                            thrpt    5     71745.049 ±      47.777    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                        thrpt    5         0.058 ±       0.132  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                   thrpt    5         3.900 ±       8.827    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                    thrpt    5      1052.802 ±     564.770  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm               thrpt    5     70509.298 ±   37237.140    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.count                                      thrpt    5        16.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.time                                       thrpt    5        16.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala                                        thrpt    5    719445.431 ±    9660.768   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                         thrpt    5      1297.855 ±      17.595  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                    thrpt    5      2840.001 ±       0.001    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                thrpt    5         0.087 ±       0.067  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm           thrpt    5         0.191 ±       0.147    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space            thrpt    5      1321.999 ±      48.978  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm       thrpt    5      2892.842 ±     105.093    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.count                              thrpt    5        20.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.time                               thrpt    5        17.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc                                thrpt    5    552775.875 ±    2387.314   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                 thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm            thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                      thrpt    5           ≈ 0                counts
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson                                             thrpt    5     24506.498 ±     579.050   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate                              thrpt    5      1034.087 ±      24.072  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                         thrpt    5     66421.954 ±      31.464    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                     thrpt    5         0.067 ±       0.174  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                thrpt    5         4.273 ±      11.106    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                 thrpt    5      1043.115 ±     538.521  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm            thrpt    5     67039.674 ±   36124.409    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.count                                   thrpt    5        16.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.time                                    thrpt    5        17.000                    ms
[info] ArrayOfLocalDatesBenchmark.readCirce                                                     thrpt    5     28626.760 ±     273.979   ops/s
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate                                      thrpt    5      1553.149 ±      14.176  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm                                 thrpt    5     85415.350 ±      53.670    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space                             thrpt    5         0.083 ±       0.188  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                        thrpt    5         4.577 ±      10.315    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                         thrpt    5      1530.610 ±     719.651  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                    thrpt    5     84172.080 ±   39436.305    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.count                                           thrpt    5        23.000                counts
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.time                                            thrpt    5        22.000                    ms
[info] ArrayOfLocalDatesBenchmark.readJacksonScala                                              thrpt    5     31291.722 ±     389.323   ops/s
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate                               thrpt    5      1428.569 ±      17.393  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm                          thrpt    5     71862.228 ±      53.514    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                      thrpt    5         0.058 ±       0.132  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5         2.931 ±       6.632    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                  thrpt    5      1404.365 ±     582.984  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5     70642.737 ±   29209.718    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count                                    thrpt    5        21.000                counts
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time                                     thrpt    5        24.000                    ms
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala                                             thrpt    5    272633.784 ±    3964.357   ops/s
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate                              thrpt    5       709.378 ±       9.927  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                         thrpt    5      4096.002 ±       0.001    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                     thrpt    5         0.083 ±       0.127  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                thrpt    5         0.480 ±       0.727    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                 thrpt    5       726.780 ±     566.279  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5      4196.290 ±    3263.056    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count                                   thrpt    5        11.000                counts
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time                                    thrpt    5        11.000                    ms
[info] ArrayOfLocalDatesBenchmark.readPlayJson                                                  thrpt    5     18422.389 ±     255.007   ops/s
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate                                   thrpt    5      1872.005 ±      26.365  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm                              thrpt    5    159960.201 ±       1.528    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                          thrpt    5         0.075 ±       0.185  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                     thrpt    5         6.393 ±      15.691    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                      thrpt    5      1885.206 ±     740.910  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                 thrpt    5    161087.356 ±   63247.282    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count                                        thrpt    5        28.000                counts
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time                                         thrpt    5        30.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeCirce                                                    thrpt    5     53386.742 ±     676.017   ops/s
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate                                     thrpt    5      1408.285 ±      17.928  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm                                thrpt    5     41528.008 ±       0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                            thrpt    5         0.067 ±       0.104  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                       thrpt    5         1.962 ±       3.060    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                        thrpt    5      1392.615 ±     574.505  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                   thrpt    5     41062.908 ±   16772.657    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.count                                          thrpt    5        21.000                counts
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.time                                           thrpt    5        22.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala                                            thrpt    5   1127674.282 ±    5067.084   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate                             thrpt    5      1209.219 ±       5.242  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                        thrpt    5      1688.000 ±       0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                    thrpt    5         0.075 ±       0.091  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm               thrpt    5         0.105 ±       0.128    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                thrpt    5      1188.254 ±     706.897  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5      1658.870 ±     990.794    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count                                  thrpt    5        18.000                counts
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time                                   thrpt    5        17.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc                                    thrpt    5    723239.094 ±    2990.279   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                     thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count                          thrpt    5           ≈ 0                counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson                                                 thrpt    5     59225.551 ±    2106.672   ops/s
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate                                  thrpt    5      1376.333 ±      48.831  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm                             thrpt    5     36584.007 ±       0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                         thrpt    5         0.054 ±       0.108  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                    thrpt    5         1.434 ±       2.823    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                     thrpt    5      1381.784 ±     518.835  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                thrpt    5     36744.968 ±   14574.289    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count                                       thrpt    5        21.000                counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time                                        thrpt    5        21.000                    ms
[info] ArrayOfLocalTimesBenchmark.readCirce                                                     thrpt    5     16721.575 ±     625.677   ops/s
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate                                      thrpt    5      1470.470 ±      55.781  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm                                 thrpt    5    138428.796 ±      25.808    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                             thrpt    5         0.071 ±       0.044  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                        thrpt    5         6.658 ±       4.050    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                         thrpt    5      1461.419 ±     670.394  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                    thrpt    5    137677.555 ±   66998.248    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.count                                           thrpt    5        22.000                counts
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.time                                            thrpt    5        22.000                    ms
[info] ArrayOfLocalTimesBenchmark.readJacksonScala                                              thrpt    5     18068.299 ±     467.904   ops/s
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate                               thrpt    5      1400.930 ±      36.395  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                          thrpt    5    122049.413 ±      57.167    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                      thrpt    5         0.075 ±       0.134  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5         6.522 ±      11.678    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                  thrpt    5      1404.391 ±     608.999  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5    122309.034 ±   50861.521    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count                                    thrpt    5        21.000                counts
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time                                     thrpt    5        26.000                    ms
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala                                             thrpt    5    308065.873 ±   11039.917   ops/s
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate                              thrpt    5       801.513 ±      28.641  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                         thrpt    5      4096.001 ±       0.001    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                     thrpt    5         0.058 ±       0.174  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                thrpt    5         0.297 ±       0.881    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                 thrpt    5       793.629 ±     694.979  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5      4052.362 ±    3470.321    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count                                   thrpt    5        12.000                counts
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time                                    thrpt    5        12.000                    ms
[info] ArrayOfLocalTimesBenchmark.readPlayJson                                                  thrpt    5     13171.387 ±     215.793   ops/s
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate                                   thrpt    5      1801.074 ±      30.222  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                              thrpt    5    215256.221 ±       1.620    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                          thrpt    5         0.075 ±       0.091  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                     thrpt    5         8.953 ±      10.864    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                      thrpt    5      1815.478 ±     691.873  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                 thrpt    5    216998.118 ±   83603.349    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count                                        thrpt    5        27.000                counts
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time                                         thrpt    5        30.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeCirce                                                    thrpt    5     39168.185 ±    1497.145   ops/s
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate                                     thrpt    5      1287.999 ±      49.246  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                thrpt    5     51768.107 ±       0.828    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                            thrpt    5         0.075 ±       0.166  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                       thrpt    5         3.006 ±       6.616    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                        thrpt    5      1256.392 ±     556.684  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                   thrpt    5     50523.779 ±   23221.605    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.count                                          thrpt    5        19.000                counts
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.time                                           thrpt    5        18.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala                                            thrpt    5   1229776.772 ±    9228.076   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                             thrpt    5      1118.770 ±       8.121  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                        thrpt    5      1432.000 ±       0.001    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                    thrpt    5         0.100 ±       0.250  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm               thrpt    5         0.128 ±       0.318    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                thrpt    5      1119.961 ±     704.923  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5      1433.265 ±     894.185    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count                                  thrpt    5        17.000                counts
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time                                   thrpt    5        15.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc                                    thrpt    5   1369040.646 ±   20404.361   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                     thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                          thrpt    5           ≈ 0                counts
[info] ArrayOfLocalTimesBenchmark.writePlayJson                                                 thrpt    5     37947.124 ±     752.879   ops/s
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate                                  thrpt    5      1147.235 ±      22.968  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                             thrpt    5     47592.613 ±       5.182    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                         thrpt    5         0.083 ±       0.098  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                    thrpt    5         3.455 ±       4.088    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                     thrpt    5      1112.690 ±     690.222  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                thrpt    5     46159.444 ±   28623.581    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.count                                       thrpt    5        17.000                counts
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.time                                        thrpt    5        17.000                    ms
[info] ArrayOfLongsBenchmark.readCirce                                                          thrpt    5    129287.016 ±    1420.216   ops/s
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate                                           thrpt    5      2217.487 ±      25.552  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm                                      thrpt    5     27000.003 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  thrpt    5         0.100 ±       0.154  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             thrpt    5         1.215 ±       1.862    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              thrpt    5      2218.732 ±     693.269  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         thrpt    5     27016.973 ±    8536.966    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.count                                                thrpt    5        33.000                counts
[info] ArrayOfLongsBenchmark.readCirce:·gc.time                                                 thrpt    5        31.000                    ms
[info] ArrayOfLongsBenchmark.readJacksonScala                                                   thrpt    5    246790.239 ±    6847.494   ops/s
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate                                    thrpt    5       541.791 ±      15.211  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm                               thrpt    5      3456.002 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                           thrpt    5         0.054 ±       0.156  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5         0.344 ±       0.987    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                       thrpt    5       588.120 ±     561.709  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5      3750.264 ±    3567.984    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.count                                         thrpt    5         9.000                counts
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.time                                          thrpt    5        12.000                    ms
[info] ArrayOfLongsBenchmark.readJsoniterScala                                                  thrpt    5    498851.978 ±   31165.880   ops/s
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate                                   thrpt    5       628.695 ±      39.437  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              thrpt    5      1984.001 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          thrpt    5         0.071 ±       0.176  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5         0.222 ±       0.548    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      thrpt    5       591.003 ±     567.031  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5      1860.941 ±    1734.046    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.count                                        thrpt    5         9.000                counts
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.time                                         thrpt    5         9.000                    ms
[info] ArrayOfLongsBenchmark.readPlayJson                                                       thrpt    5     68442.517 ±    2057.033   ops/s
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate                                        thrpt    5      2964.690 ±      93.672  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm                                   thrpt    5     68196.383 ±     244.334    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               thrpt    5         0.171 ±       0.104  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          thrpt    5         3.924 ±       2.344    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           thrpt    5      2980.845 ±     575.550  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5     68580.872 ±   14223.491    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.count                                             thrpt    5        44.000                counts
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.time                                              thrpt    5        47.000                    ms
[info] ArrayOfLongsBenchmark.writeCirce                                                         thrpt    5    197657.773 ±    3197.794   ops/s
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate                                          thrpt    5      1700.451 ±      27.800  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm                                     thrpt    5     13544.002 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 thrpt    5         0.100 ±       0.207  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5         0.797 ±       1.659    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             thrpt    5      1667.059 ±      67.396  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5     13278.024 ±     485.835    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.count                                               thrpt    5        25.000                counts
[info] ArrayOfLongsBenchmark.writeCirce:·gc.time                                                thrpt    5        23.000                    ms
[info] ArrayOfLongsBenchmark.writeJacksonScala                                                  thrpt    5    490736.659 ±    8464.441   ops/s
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate                                   thrpt    5       503.752 ±       8.803  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                              thrpt    5      1616.001 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                          thrpt    5         0.037 ±       0.200  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5         0.121 ±       0.644    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                      thrpt    5       517.556 ±     681.634  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5      1661.311 ±    2199.178    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.count                                        thrpt    5         8.000                counts
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.time                                         thrpt    5         9.000                    ms
[info] ArrayOfLongsBenchmark.writeJsoniterScala                                                 thrpt    5    584557.159 ±   29991.715   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate                                  thrpt    5       457.526 ±      23.211  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                             thrpt    5      1232.001 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                         thrpt    5         0.759 ±       6.361  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5         2.026 ±      16.966    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                     thrpt    5       443.975 ±     623.053  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5      1192.983 ±    1638.080    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count                                       thrpt    5         7.000                counts
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time                                        thrpt    5        10.000                    ms
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc                                         thrpt    5    678475.647 ±    4821.506   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                          thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                     thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count                               thrpt    5           ≈ 0                counts
[info] ArrayOfLongsBenchmark.writePlayJson                                                      thrpt    5     30556.144 ±    1138.632   ops/s
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate                                       thrpt    5      1566.256 ±      57.826  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm                                  thrpt    5     80691.063 ±      26.261    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                              thrpt    5         0.092 ±       0.072  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                         thrpt    5         4.714 ±       3.618    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                          thrpt    5      1587.896 ±     570.456  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5     81778.847 ±   28005.716    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.count                                            thrpt    5        24.000                counts
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.time                                             thrpt    5        23.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readCirce                                                thrpt    5      8110.273 ±      93.224   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate                                 thrpt    5      1248.269 ±      14.397  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                            thrpt    5    242280.255 ±       1.753    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                        thrpt    5         0.067 ±       0.088  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                   thrpt    5        12.923 ±      16.974    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                    thrpt    5      1256.361 ±     572.635  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm               thrpt    5    243892.508 ±  112575.319    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.count                                      thrpt    5        19.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.time                                       thrpt    5        18.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala                                        thrpt    5     99007.787 ±    2529.217   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                         thrpt    5       958.933 ±      24.583  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                    thrpt    5     15248.004 ±       0.001    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                thrpt    5         0.079 ±       0.215  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm           thrpt    5         1.257 ±       3.408    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space            thrpt    5       993.535 ±      16.384  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm       thrpt    5     15798.806 ±     496.597    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.count                              thrpt    5        15.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.time                               thrpt    5        13.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson                                             thrpt    5      7597.588 ±      73.322   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate                              thrpt    5      1371.651 ±      14.145  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                         thrpt    5    284216.055 ±       0.009    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                     thrpt    5         0.033 ±       0.072  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                thrpt    5         6.905 ±      14.928    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                 thrpt    5      1336.146 ±      45.176  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm            thrpt    5    276857.104 ±    7600.798    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.count                                   thrpt    5        20.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.time                                    thrpt    5        23.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce                                               thrpt    5     18532.940 ±     216.619   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate                                thrpt    5       924.520 ±      10.952  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                           thrpt    5     78535.358 ±      62.996    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                       thrpt    5         0.071 ±       0.176  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                  thrpt    5         6.012 ±      14.927    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                   thrpt    5       918.478 ±     572.825  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm              thrpt    5     78021.245 ±   48629.569    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.count                                     thrpt    5        14.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.time                                      thrpt    5        15.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala                                       thrpt    5    442825.928 ±    7761.492   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                        thrpt    5      1003.607 ±      17.447  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                   thrpt    5      3568.001 ±       0.001    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space               thrpt    5         0.083 ±       0.127  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm          thrpt    5         0.296 ±       0.451    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space           thrpt    5       985.206 ±      23.634  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm      thrpt    5      3502.687 ±     129.629    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.count                             thrpt    5        15.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.time                              thrpt    5        14.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc                               thrpt    5    505135.794 ±    2724.350   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm           thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                     thrpt    5           ≈ 0                counts
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson                                            thrpt    5     19782.145 ±     458.994   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate                             thrpt    5       914.225 ±      29.669  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                        thrpt    5     72753.052 ±    1584.872    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                    thrpt    5         0.071 ±       0.166  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm               thrpt    5         5.629 ±      13.200    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                thrpt    5       910.705 ±     570.381  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm           thrpt    5     72476.239 ±   45475.484    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.count                                  thrpt    5        14.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.time                                   thrpt    5        14.000                    ms
[info] ArrayOfPeriodsBenchmark.readCirce                                                        thrpt    5     27788.276 ±    1184.468   ops/s
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate                                         thrpt    5      1001.835 ±      42.114  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate.norm                                    thrpt    5     56751.898 ±       1.006    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                thrpt    5         0.050 ±       0.134  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5         2.839 ±       7.738    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                            thrpt    5       985.838 ±      19.883  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5     55850.933 ±    2555.428    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.count                                              thrpt    5        15.000                counts
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.time                                               thrpt    5        16.000                    ms
[info] ArrayOfPeriodsBenchmark.readJacksonScala                                                 thrpt    5     27973.864 ±     895.432   ops/s
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate                                  thrpt    5       766.674 ±      24.506  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate.norm                             thrpt    5     43144.116 ±       0.873    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                         thrpt    5         0.042 ±       0.127  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5         2.354 ±       7.216    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                     thrpt    5       789.135 ±     699.538  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5     44443.302 ±   40129.073    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.count                                       thrpt    5        12.000                counts
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.time                                        thrpt    5        14.000                    ms
[info] ArrayOfPeriodsBenchmark.readJsoniterScala                                                thrpt    5    204807.921 ±    4448.461   ops/s
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate                                 thrpt    5       532.913 ±      11.390  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                            thrpt    5      4096.002 ±       0.001    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5         0.557 ±       4.347  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5         4.277 ±      33.389    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5       528.817 ±     696.654  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5      4068.071 ±    5397.778    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.count                                      thrpt    5         8.000                counts
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.time                                       thrpt    5         9.000                    ms
[info] ArrayOfPeriodsBenchmark.readPlayJson                                                     thrpt    5     22603.130 ±     285.986   ops/s
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate                                      thrpt    5      1413.549 ±      17.957  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate.norm                                 thrpt    5     98448.020 ±       0.007    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                             thrpt    5         0.062 ±       0.098  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                        thrpt    5         4.347 ±       6.818    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                         thrpt    5      1461.429 ±     681.470  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                    thrpt    5    101796.221 ±   47980.730    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.count                                           thrpt    5        22.000                counts
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.time                                            thrpt    5        24.000                    ms
[info] ArrayOfPeriodsBenchmark.writeCirce                                                       thrpt    5     83458.298 ±     471.422   ops/s
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate                                        thrpt    5      1287.329 ±       8.135  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate.norm                                   thrpt    5     24280.005 ±       0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                               thrpt    5         0.092 ±       0.156  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                          thrpt    5         1.728 ±       2.955    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                           thrpt    5      1256.465 ±     544.814  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                      thrpt    5     23697.725 ±   10267.720    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.count                                             thrpt    5        19.000                counts
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.time                                              thrpt    5        18.000                    ms
[info] ArrayOfPeriodsBenchmark.writeJacksonScala                                                thrpt    5    140746.096 ±    6271.719   ops/s
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate                                 thrpt    5      1190.780 ±      52.970  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                            thrpt    5     13320.003 ±       0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                        thrpt    5         0.075 ±       0.122  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5         0.841 ±       1.408    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                    thrpt    5      1193.205 ±     726.342  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5     13353.687 ±    8289.707    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.count                                      thrpt    5        18.000                counts
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.time                                       thrpt    5        21.000                    ms
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala                                               thrpt    5    419046.546 ±    3613.951   ops/s
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate                                thrpt    5       464.239 ±       3.919  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                           thrpt    5      1744.001 ±       0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5         0.766 ±       6.373  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5         2.878 ±      23.942    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5       443.902 ±     623.001  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5      1668.065 ±    2347.671    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.count                                     thrpt    5         7.000                counts
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.time                                      thrpt    5        10.000                    ms
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc                                       thrpt    5    546068.348 ±    2915.807   ops/s
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                        thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                   thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.count                             thrpt    5           ≈ 0                counts
[info] ArrayOfPeriodsBenchmark.writePlayJson                                                    thrpt    5    108682.107 ±    2117.781   ops/s
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate                                     thrpt    5      1325.614 ±      25.327  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate.norm                                thrpt    5     19200.004 ±       0.001    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                            thrpt    5         0.071 ±       0.185  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                       thrpt    5         1.025 ±       2.670    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                        thrpt    5      1314.915 ±      58.452  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                   thrpt    5     19045.755 ±    1043.538    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.count                                          thrpt    5        20.000                counts
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.time                                           thrpt    5        20.000                    ms
[info] ArrayOfShortsBenchmark.readCirce                                                         thrpt    5    156286.033 ±    5291.948   ops/s
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate                                          thrpt    5      2628.863 ±      89.007  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm                                     thrpt    5     26480.003 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                 thrpt    5         0.104 ±       0.098  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5         1.047 ±       0.981    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                             thrpt    5      2633.581 ±     600.069  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5     26536.298 ±    6624.639    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.count                                               thrpt    5        39.000                counts
[info] ArrayOfShortsBenchmark.readCirce:·gc.time                                                thrpt    5        37.000                    ms
[info] ArrayOfShortsBenchmark.readJacksonScala                                                  thrpt    5    377638.983 ±    4592.486   ops/s
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate                                   thrpt    5       385.728 ±       4.806  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm                              thrpt    5      1608.001 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                          thrpt    5         0.033 ±       0.156  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5         0.139 ±       0.652    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                      thrpt    5       376.313 ±     602.900  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5      1570.151 ±    2535.775    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.count                                        thrpt    5         6.000                counts
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.time                                         thrpt    5         6.000                    ms
[info] ArrayOfShortsBenchmark.readJsoniterScala                                                 thrpt    5    932402.176 ±    9013.621   ops/s
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate                                  thrpt    5       322.208 ±       3.253  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                             thrpt    5       544.000 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                         thrpt    5         0.663 ±       5.609  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5         1.121 ±       9.475    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                     thrpt    5       351.092 ±     366.268  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5       593.091 ±     625.618    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.count                                       thrpt    5         6.000                counts
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.time                                        thrpt    5        11.000                    ms
[info] ArrayOfShortsBenchmark.readPlayJson                                                      thrpt    5     76097.032 ±     274.673   ops/s
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate                                       thrpt    5      3264.685 ±      11.602  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm                                  thrpt    5     67544.006 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                              thrpt    5         0.137 ±       0.209  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                         thrpt    5         2.841 ±       4.311    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                          thrpt    5      3255.093 ±     704.643  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5     67343.686 ±   14419.886    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.count                                            thrpt    5        48.000                counts
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.time                                             thrpt    5        49.000                    ms
[info] ArrayOfShortsBenchmark.writeCirce                                                        thrpt    5    253502.632 ±    5750.214   ops/s
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate                                         thrpt    5      1726.156 ±      39.478  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm                                    thrpt    5     10720.002 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                thrpt    5         0.133 ±       0.209  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5         0.826 ±       1.289    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                            thrpt    5      1734.718 ±     627.466  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5     10771.429 ±    3782.291    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.count                                              thrpt    5        26.000                counts
[info] ArrayOfShortsBenchmark.writeCirce:·gc.time                                               thrpt    5        25.000                    ms
[info] ArrayOfShortsBenchmark.writeJacksonScala                                                 thrpt    5   1181186.409 ±   50998.298   ops/s
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate                                  thrpt    5       774.317 ±      33.464  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                             thrpt    5      1032.000 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                         thrpt    5         0.108 ±       0.215  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5         0.145 ±       0.293    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                     thrpt    5       784.464 ±     681.547  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5      1046.801 ±     936.125    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.count                                       thrpt    5        12.000                counts
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.time                                        thrpt    5        13.000                    ms
[info] ArrayOfShortsBenchmark.writeJsoniterScala                                                thrpt    5   1405182.646 ±  127630.580   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate                                 thrpt    5       578.421 ±      52.140  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                            thrpt    5       648.000 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5         0.776 ±       6.234  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5         0.860 ±       6.905    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5       588.711 ±     564.982  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5       660.524 ±     645.420    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count                                      thrpt    5         9.000                counts
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time                                       thrpt    5        10.000                    ms
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc                                        thrpt    5   1475404.365 ±    9145.696   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                         thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                    thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count                              thrpt    5           ≈ 0                counts
[info] ArrayOfShortsBenchmark.writePlayJson                                                     thrpt    5     41938.564 ±     742.912   ops/s
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate                                      thrpt    5      2050.687 ±      36.220  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm                                 thrpt    5     76984.010 ±       0.002    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                             thrpt    5         0.100 ±       0.222  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                        thrpt    5         3.750 ±       8.343    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                         thrpt    5      2003.366 ±      94.699  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                    thrpt    5     75211.299 ±    4616.951    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.count                                           thrpt    5        30.000                counts
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.time                                            thrpt    5        31.000                    ms
[info] ArrayOfUUIDsBenchmark.readCirce                                                          thrpt    5     41264.340 ±     412.729   ops/s
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate                                           thrpt    5       823.619 ±       8.192  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm                                      thrpt    5     31424.010 ±       0.003    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  thrpt    5         0.054 ±       0.146  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             thrpt    5         2.065 ±       5.565    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              thrpt    5       851.831 ±     692.387  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         thrpt    5     32507.601 ±   26564.464    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.count                                                thrpt    5        13.000                counts
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.time                                                 thrpt    5        13.000                    ms
[info] ArrayOfUUIDsBenchmark.readJacksonScala                                                   thrpt    5     83467.868 ±    1448.828   ops/s
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate                                    thrpt    5       878.007 ±      14.630  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm                               thrpt    5     16560.005 ±       0.001    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                           thrpt    5         0.092 ±       0.166  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5         1.727 ±       3.140    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                       thrpt    5       858.542 ±     704.188  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5     16201.950 ±   13465.348    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count                                         thrpt    5        13.000                counts
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time                                          thrpt    5        15.000                    ms
[info] ArrayOfUUIDsBenchmark.readJsoniterScala                                                  thrpt    5    241448.271 ±    9824.375   ops/s
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate                                   thrpt    5       785.271 ±      31.762  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              thrpt    5      5120.002 ±       0.001    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          thrpt    5         0.062 ±       0.150  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5         0.406 ±       0.969    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      thrpt    5       789.279 ±     692.164  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5      5155.844 ±    4725.791    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count                                        thrpt    5        12.000                counts
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time                                         thrpt    5        10.000                    ms
[info] ArrayOfUUIDsBenchmark.readPlayJson                                                       thrpt    5     25346.815 ±     559.514   ops/s
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate                                        thrpt    5      1190.929 ±      26.301  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm                                   thrpt    5     73960.017 ±       0.007    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               thrpt    5         0.067 ±       0.154  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          thrpt    5         4.144 ±       9.625    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           thrpt    5      1192.249 ±     687.634  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5     74006.105 ±   41562.422    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.count                                             thrpt    5        18.000                counts
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.time                                              thrpt    5        18.000                    ms
[info] ArrayOfUUIDsBenchmark.writeCirce                                                         thrpt    5     52275.293 ±    1904.165   ops/s
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate                                          thrpt    5      1107.791 ±      40.536  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm                                     thrpt    5     33360.008 ±       0.001    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 thrpt    5         0.067 ±       0.104  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5         2.002 ±       3.104    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             thrpt    5      1118.065 ±     673.352  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5     33693.204 ±   20999.914    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.count                                               thrpt    5        17.000                counts
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.time                                                thrpt    5        16.000                    ms
[info] ArrayOfUUIDsBenchmark.writeJacksonScala                                                  thrpt    5     87171.612 ±    1623.295   ops/s
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate                                   thrpt    5      1193.744 ±      22.470  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                              thrpt    5     21560.009 ±       0.074    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                          thrpt    5         0.075 ±       0.122  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5         1.352 ±       2.181    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                      thrpt    5      1197.244 ±     692.407  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5     21631.971 ±   12760.852    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count                                        thrpt    5        18.000                counts
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time                                         thrpt    5        22.000                    ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala                                                 thrpt    5    246248.089 ±    4042.993   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate                                  thrpt    5       784.568 ±      12.942  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                             thrpt    5      5016.002 ±       0.001    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                         thrpt    5         0.071 ±       0.072  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5         0.452 ±       0.453    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                     thrpt    5       785.210 ±     687.612  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5      5017.807 ±    4342.461    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count                                       thrpt    5        12.000                counts
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time                                        thrpt    5        12.000                    ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc                                         thrpt    5    274995.258 ±    1403.263   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                          thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                     thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count                               thrpt    5           ≈ 0                counts
[info] ArrayOfUUIDsBenchmark.writePlayJson                                                      thrpt    5     72137.820 ±    2342.762   ops/s
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate                                       thrpt    5      1069.601 ±      34.597  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm                                  thrpt    5     23344.006 ±       0.107    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                              thrpt    5         0.067 ±       0.132  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                         thrpt    5         1.449 ±       2.850    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                          thrpt    5      1044.359 ±     559.393  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5     22787.013 ±   11930.967    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.count                                            thrpt    5        16.000                counts
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.time                                             thrpt    5        17.000                    ms
[info] ArrayOfZoneIdsBenchmark.readCirce                                                        thrpt    5     71609.607 ±     783.276   ops/s
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate                                         thrpt    5      1438.515 ±      15.585  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm                                    thrpt    5     31624.006 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                thrpt    5         0.087 ±       0.207  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5         1.923 ±       4.572    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                            thrpt    5      1451.997 ±     718.467  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5     31929.296 ±   16137.270    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.count                                              thrpt    5        22.000                counts
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.time                                               thrpt    5        22.000                    ms
[info] ArrayOfZoneIdsBenchmark.readJacksonScala                                                 thrpt    5     86923.344 ±     871.782   ops/s
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate                                  thrpt    5       981.463 ±       9.933  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm                             thrpt    5     17776.005 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                         thrpt    5         0.062 ±       0.113  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5         1.132 ±       2.063    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                     thrpt    5       990.495 ±      35.661  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5     17939.400 ±     513.853    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count                                       thrpt    5        15.000                counts
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time                                        thrpt    5        16.000                    ms
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala                                                thrpt    5    109521.275 ±    3467.766   ops/s
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate                                 thrpt    5      1153.243 ±      36.805  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                            thrpt    5     16576.004 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5         0.050 ±       0.122  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5         0.717 ±       1.738    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5      1184.228 ±     695.407  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5     17025.997 ±   10116.219    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count                                      thrpt    5        18.000                counts
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time                                       thrpt    5        17.000                    ms
[info] ArrayOfZoneIdsBenchmark.readPlayJson                                                     thrpt    5     39201.952 ±     339.891   ops/s
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate                                      thrpt    5      1897.450 ±      17.065  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm                                 thrpt    5     76200.053 ±       0.364    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                             thrpt    5         0.075 ±       0.193  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                        thrpt    5         3.006 ±       7.727    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                         thrpt    5      1882.943 ±     680.678  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                    thrpt    5     75617.655 ±   27331.692    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count                                           thrpt    5        28.000                counts
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time                                            thrpt    5        32.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeCirce                                                       thrpt    5    113760.759 ±    3771.471   ops/s
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate                                        thrpt    5       783.392 ±      25.885  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm                                   thrpt    5     10840.004 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                               thrpt    5         0.079 ±       0.191  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                          thrpt    5         1.094 ±       2.641    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                           thrpt    5       778.167 ±     688.976  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                      thrpt    5     10767.261 ±    9513.877    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.count                                             thrpt    5        12.000                counts
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.time                                              thrpt    5        12.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala                                                thrpt    5    164364.972 ±    4271.651   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate                                 thrpt    5       243.890 ±       6.368  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                            thrpt    5      2336.003 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                        thrpt    5         0.037 ±       0.200  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5         0.360 ±       1.923    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                    thrpt    5       217.885 ±     481.973  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5      2093.331 ±    4635.203    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count                                      thrpt    5         4.000                counts
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time                                       thrpt    5         5.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala                                               thrpt    5    801313.023 ±   15897.948   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate                                thrpt    5       993.678 ±      20.124  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                           thrpt    5      1952.001 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5         0.092 ±       0.072  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5         0.180 ±       0.144    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5       982.730 ±      26.316  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5      1930.514 ±      50.781    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count                                     thrpt    5        15.000                counts
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time                                      thrpt    5        14.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc                                       thrpt    5    841804.170 ±   16637.016   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                        thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                   thrpt    5        ≈ 10⁻³                  B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count                             thrpt    5           ≈ 0                counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson                                                    thrpt    5    212992.966 ±    1621.395   ops/s
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate                                     thrpt    5       696.007 ±       5.278  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm                                thrpt    5      5144.002 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                            thrpt    5         0.037 ±       0.104  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                       thrpt    5         0.277 ±       0.773    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                        thrpt    5       708.146 ±     560.787  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                   thrpt    5      5234.291 ±    4161.310    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count                                          thrpt    5        11.000                counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time                                           thrpt    5        12.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala                                             thrpt    5    184109.624 ±     814.457   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate                              thrpt    5       978.634 ±       4.687  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate.norm                         thrpt    5      8368.002 ±       0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                     thrpt    5         0.071 ±       0.122  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                thrpt    5         0.605 ±       1.042    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                 thrpt    5       992.730 ±      34.265  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5      8488.477 ±     256.784    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.count                                   thrpt    5        15.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.time                                    thrpt    5        18.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala                                            thrpt    5    351685.700 ±   13637.369   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate                             thrpt    5       682.700 ±      26.417  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                        thrpt    5      3056.001 ±       0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                    thrpt    5         0.094 ±       0.205  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm               thrpt    5         0.422 ±       0.928    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                thrpt    5       728.337 ±     572.432  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5      3261.550 ±    2594.934    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.count                                  thrpt    5        11.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.time                                   thrpt    5        10.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala                                            thrpt    5    312235.025 ±    4080.660   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate                             thrpt    5       307.805 ±       3.967  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                        thrpt    5      1552.001 ±       0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                    thrpt    5         0.025 ±       0.132  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm               thrpt    5         0.126 ±       0.666    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                thrpt    5       295.257 ±     139.127  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5      1489.202 ±     718.634    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.count                                  thrpt    5         5.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.time                                   thrpt    5         6.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala                                           thrpt    5    875589.265 ±   37743.258   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate                            thrpt    5       649.608 ±      28.059  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                       thrpt    5      1168.000 ±       0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                   thrpt    5         0.062 ±       0.113  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm              thrpt    5         0.113 ±       0.206    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space               thrpt    5       653.958 ±       4.872  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm          thrpt    5      1175.955 ±      57.650    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.count                                 thrpt    5        10.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.time                                  thrpt    5         9.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc                                   thrpt    5    982148.777 ±    7013.818   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                    thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm               thrpt    5        ≈ 10⁻³                  B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.count                         thrpt    5           ≈ 0                counts
[info] ArrayOfZonedDateTimesBenchmark.readCirce                                                 thrpt    5      5396.293 ±     124.900   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate                                  thrpt    5      1064.938 ±      25.437  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                             thrpt    5    310624.078 ±       0.013    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                         thrpt    5         0.050 ±       0.146  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                    thrpt    5        14.576 ±      42.396    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                     thrpt    5      1109.116 ±     700.213  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                thrpt    5    323433.666 ±  201650.380    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.count                                       thrpt    5        17.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.time                                        thrpt    5        18.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala                                         thrpt    5     32364.707 ±     518.192   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                          thrpt    5       549.908 ±       8.763  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                     thrpt    5     26744.014 ±       0.007    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                 thrpt    5         0.853 ±       7.034  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm            thrpt    5        41.738 ±     344.169    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space             thrpt    5       572.800 ±     543.776  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm        thrpt    5     27868.640 ±   26565.669    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.count                               thrpt    5         9.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.time                                thrpt    5        12.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson                                              thrpt    5      4628.938 ±      59.850   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate                               thrpt    5      1175.326 ±      15.250  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                          thrpt    5    399728.091 ±       0.015    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                      thrpt    5         0.033 ±       0.122  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                 thrpt    5        11.340 ±      41.498    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                  thrpt    5      1193.809 ±     675.668  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm             thrpt    5    406079.702 ±  231757.901    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.count                                    thrpt    5        18.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.time                                     thrpt    5        22.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeCirce                                                thrpt    5     13938.600 ±     898.862   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate                                 thrpt    5       873.978 ±      57.383  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                            thrpt    5     98713.691 ±     119.868    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                        thrpt    5         0.067 ±       0.132  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                   thrpt    5         7.520 ±      14.760    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                    thrpt    5       908.300 ±     560.805  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm               thrpt    5    102683.140 ±   65301.666    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.count                                      thrpt    5        14.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.time                                       thrpt    5        14.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala                                        thrpt    5    264541.725 ±    4314.581   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                         thrpt    5       932.959 ±      14.966  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                    thrpt    5      5552.002 ±       0.001    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                thrpt    5         0.096 ±       0.072  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm           thrpt    5         0.569 ±       0.419    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space            thrpt    5       981.181 ±      22.765  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm       thrpt    5      5839.062 ±     171.822    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.count                              thrpt    5        15.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.time                               thrpt    5        15.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc                                thrpt    5    293979.225 ±    2286.778   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                 thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm            thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                      thrpt    5           ≈ 0                counts
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson                                             thrpt    5     15761.076 ±     193.338   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate                              thrpt    5       874.936 ±      10.587  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                         thrpt    5     87390.058 ±      17.195    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                     thrpt    5         0.075 ±       0.091  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                thrpt    5         7.482 ±       9.096    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                 thrpt    5       903.298 ±     558.766  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm            thrpt    5     90236.606 ±   56113.890    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.count                                   thrpt    5        14.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.time                                    thrpt    5        15.000                    ms
[info] ArraysBenchmark.readCirce                                                                thrpt    5    924784.481 ±   26810.321   ops/s
[info] ArraysBenchmark.readCirce:·gc.alloc.rate                                                 thrpt    5      2993.616 ±      88.444  MB/sec
[info] ArraysBenchmark.readCirce:·gc.alloc.rate.norm                                            thrpt    5      5096.000 ±       0.001    B/op
[info] ArraysBenchmark.readCirce:·gc.churn.PS_Eden_Space                                        thrpt    5         0.146 ±       0.212  MB/sec
[info] ArraysBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                   thrpt    5         0.248 ±       0.365    B/op
[info] ArraysBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                    thrpt    5      3042.930 ±      85.389  MB/sec
[info] ArraysBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                               thrpt    5      5180.121 ±     176.888    B/op
[info] ArraysBenchmark.readCirce:·gc.count                                                      thrpt    5        45.000                counts
[info] ArraysBenchmark.readCirce:·gc.time                                                       thrpt    5        41.000                    ms
[info] ArraysBenchmark.readJacksonScala                                                         thrpt    5   1790607.708 ±   29008.534   ops/s
[info] ArraysBenchmark.readJacksonScala:·gc.alloc.rate                                          thrpt    5      1683.340 ±      27.212  MB/sec
[info] ArraysBenchmark.readJacksonScala:·gc.alloc.rate.norm                                     thrpt    5      1480.000 ±       0.001    B/op
[info] ArraysBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                 thrpt    5         0.108 ±       0.119  MB/sec
[info] ArraysBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                            thrpt    5         0.095 ±       0.104    B/op
[info] ArraysBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                             thrpt    5      1674.708 ±      61.137  MB/sec
[info] ArraysBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                        thrpt    5      1472.440 ±      62.512    B/op
[info] ArraysBenchmark.readJacksonScala:·gc.count                                               thrpt    5        25.000                counts
[info] ArraysBenchmark.readJacksonScala:·gc.time                                                thrpt    5        29.000                    ms
[info] ArraysBenchmark.readJsoniterScala                                                        thrpt    5  10203210.809 ±  225667.915   ops/s
[info] ArraysBenchmark.readJsoniterScala:·gc.alloc.rate                                         thrpt    5      2540.645 ±      57.281  MB/sec
[info] ArraysBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                    thrpt    5       392.000 ±       0.001    B/op
[info] ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                thrpt    5         0.083 ±       0.127  MB/sec
[info] ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                           thrpt    5         0.013 ±       0.019    B/op
[info] ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                            thrpt    5      2566.752 ±     705.873  MB/sec
[info] ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       thrpt    5       396.035 ±     108.915    B/op
[info] ArraysBenchmark.readJsoniterScala:·gc.count                                              thrpt    5        38.000                counts
[info] ArraysBenchmark.readJsoniterScala:·gc.time                                               thrpt    5        34.000                    ms
[info] ArraysBenchmark.readPlayJson                                                             thrpt    5    321837.061 ±    6879.099   ops/s
[info] ArraysBenchmark.readPlayJson:·gc.alloc.rate                                              thrpt    5      1960.925 ±      41.659  MB/sec
[info] ArraysBenchmark.readPlayJson:·gc.alloc.rate.norm                                         thrpt    5      9592.001 ±       0.001    B/op
[info] ArraysBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                     thrpt    5         0.083 ±       0.150  MB/sec
[info] ArraysBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                thrpt    5         0.407 ±       0.736    B/op
[info] ArraysBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                 thrpt    5      1947.296 ±     558.522  MB/sec
[info] ArraysBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                            thrpt    5      9527.039 ±    2823.149    B/op
[info] ArraysBenchmark.readPlayJson:·gc.count                                                   thrpt    5        29.000                counts
[info] ArraysBenchmark.readPlayJson:·gc.time                                                    thrpt    5        33.000                    ms
[info] ArraysBenchmark.writeCirce                                                               thrpt    5   1062667.065 ±   20742.457   ops/s
[info] ArraysBenchmark.writeCirce:·gc.alloc.rate                                                thrpt    5      2338.206 ±      45.274  MB/sec
[info] ArraysBenchmark.writeCirce:·gc.alloc.rate.norm                                           thrpt    5      3464.000 ±       0.001    B/op
[info] ArraysBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                       thrpt    5         0.092 ±       0.072  MB/sec
[info] ArraysBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                  thrpt    5         0.136 ±       0.108    B/op
[info] ArraysBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                   thrpt    5      2285.645 ±     541.450  MB/sec
[info] ArraysBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                              thrpt    5      3385.745 ±     771.968    B/op
[info] ArraysBenchmark.writeCirce:·gc.count                                                     thrpt    5        34.000                counts
[info] ArraysBenchmark.writeCirce:·gc.time                                                      thrpt    5        33.000                    ms
[info] ArraysBenchmark.writeJacksonScala                                                        thrpt    5   3787900.395 ±  106666.287   ops/s
[info] ArraysBenchmark.writeJacksonScala:·gc.alloc.rate                                         thrpt    5      2155.740 ±      61.509  MB/sec
[info] ArraysBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                    thrpt    5       896.000 ±       0.001    B/op
[info] ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                thrpt    5         0.100 ±       0.132  MB/sec
[info] ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                           thrpt    5         0.041 ±       0.054    B/op
[info] ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                            thrpt    5      2154.109 ±     671.075  MB/sec
[info] ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                       thrpt    5       895.615 ±     295.071    B/op
[info] ArraysBenchmark.writeJacksonScala:·gc.count                                              thrpt    5        32.000                counts
[info] ArraysBenchmark.writeJacksonScala:·gc.time                                               thrpt    5        37.000                    ms
[info] ArraysBenchmark.writeJsoniterScala                                                       thrpt    5  20357334.126 ±  698839.249   ops/s
[info] ArraysBenchmark.writeJsoniterScala:·gc.alloc.rate                                        thrpt    5       931.112 ±      31.975  MB/sec
[info] ArraysBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                   thrpt    5        72.000 ±       0.001    B/op
[info] ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                               thrpt    5         0.087 ±       0.088  MB/sec
[info] ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                          thrpt    5         0.007 ±       0.007    B/op
[info] ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                           thrpt    5       918.235 ±     570.617  MB/sec
[info] ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      thrpt    5        71.018 ±      44.413    B/op
[info] ArraysBenchmark.writeJsoniterScala:·gc.count                                             thrpt    5        14.000                counts
[info] ArraysBenchmark.writeJsoniterScala:·gc.time                                              thrpt    5        13.000                    ms
[info] ArraysBenchmark.writePlayJson                                                            thrpt    5    465610.922 ±    9164.155   ops/s
[info] ArraysBenchmark.writePlayJson:·gc.alloc.rate                                             thrpt    5      1627.812 ±      31.956  MB/sec
[info] ArraysBenchmark.writePlayJson:·gc.alloc.rate.norm                                        thrpt    5      5504.001 ±       0.001    B/op
[info] ArraysBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                    thrpt    5         0.087 ±       0.104  MB/sec
[info] ArraysBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                               thrpt    5         0.296 ±       0.359    B/op
[info] ArraysBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                thrpt    5      1604.146 ±     557.956  MB/sec
[info] ArraysBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                           thrpt    5      5424.936 ±    1927.426    B/op
[info] ArraysBenchmark.writePlayJson:·gc.count                                                  thrpt    5        24.000                counts
[info] ArraysBenchmark.writePlayJson:·gc.time                                                   thrpt    5        28.000                    ms
[info] BitSetsBenchmark.readJacksonScala                                                        thrpt    5   2122033.702 ±   59073.492   ops/s
[info] BitSetsBenchmark.readJacksonScala:·gc.alloc.rate                                         thrpt    5      1347.950 ±      37.300  MB/sec
[info] BitSetsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    thrpt    5      1000.000 ±       0.001    B/op
[info] BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                thrpt    5         0.079 ±       0.132  MB/sec
[info] BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           thrpt    5         0.059 ±       0.098    B/op
[info] BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            thrpt    5      1332.127 ±      49.104  MB/sec
[info] BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       thrpt    5       988.339 ±      58.546    B/op
[info] BitSetsBenchmark.readJacksonScala:·gc.count                                              thrpt    5        20.000                counts
[info] BitSetsBenchmark.readJacksonScala:·gc.time                                               thrpt    5        24.000                    ms
[info] BitSetsBenchmark.readJsoniterScala                                                       thrpt    5   5352613.899 ±   46302.862   ops/s
[info] BitSetsBenchmark.readJsoniterScala:·gc.alloc.rate                                        thrpt    5       707.212 ±       6.089  MB/sec
[info] BitSetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   thrpt    5       208.000 ±       0.001    B/op
[info] BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               thrpt    5         0.071 ±       0.091  MB/sec
[info] BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          thrpt    5         0.021 ±       0.027    B/op
[info] BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           thrpt    5       722.588 ±     561.648  MB/sec
[info] BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      thrpt    5       212.521 ±     165.115    B/op
[info] BitSetsBenchmark.readJsoniterScala:·gc.count                                             thrpt    5        11.000                counts
[info] BitSetsBenchmark.readJsoniterScala:·gc.time                                              thrpt    5        10.000                    ms
[info] BitSetsBenchmark.readPlayJson                                                            thrpt    5    352548.134 ±    9743.820   ops/s
[info] BitSetsBenchmark.readPlayJson:·gc.alloc.rate                                             thrpt    5      1653.721 ±      45.677  MB/sec
[info] BitSetsBenchmark.readPlayJson:·gc.alloc.rate.norm                                        thrpt    5      7384.001 ±       0.001    B/op
[info] BitSetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    thrpt    5         0.083 ±       0.150  MB/sec
[info] BitSetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               thrpt    5         0.373 ±       0.680    B/op
[info] BitSetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                thrpt    5      1672.481 ±      64.322  MB/sec
[info] BitSetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           thrpt    5      7467.809 ±     227.703    B/op
[info] BitSetsBenchmark.readPlayJson:·gc.count                                                  thrpt    5        25.000                counts
[info] BitSetsBenchmark.readPlayJson:·gc.time                                                   thrpt    5        29.000                    ms
[info] BitSetsBenchmark.writeJacksonScala                                                       thrpt    5   2695154.597 ±   29221.414   ops/s
[info] BitSetsBenchmark.writeJacksonScala:·gc.alloc.rate                                        thrpt    5      1424.363 ±      15.471  MB/sec
[info] BitSetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   thrpt    5       832.000 ±       0.001    B/op
[info] BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               thrpt    5         0.087 ±       0.222  MB/sec
[info] BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          thrpt    5         0.051 ±       0.130    B/op
[info] BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           thrpt    5      1400.506 ±     580.392  MB/sec
[info] BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      thrpt    5       818.129 ±     342.035    B/op
[info] BitSetsBenchmark.writeJacksonScala:·gc.count                                             thrpt    5        21.000                counts
[info] BitSetsBenchmark.writeJacksonScala:·gc.time                                              thrpt    5        24.000                    ms
[info] BitSetsBenchmark.writeJsoniterScala                                                      thrpt    5   7265586.796 ±   66843.987   ops/s
[info] BitSetsBenchmark.writeJsoniterScala:·gc.alloc.rate                                       thrpt    5      1107.767 ±      10.662  MB/sec
[info] BitSetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  thrpt    5       240.000 ±       0.001    B/op
[info] BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              thrpt    5         0.092 ±       0.072  MB/sec
[info] BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         thrpt    5         0.020 ±       0.016    B/op
[info] BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          thrpt    5      1053.096 ±     564.941  MB/sec
[info] BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     thrpt    5       228.201 ±     124.219    B/op
[info] BitSetsBenchmark.writeJsoniterScala:·gc.count                                            thrpt    5        16.000                counts
[info] BitSetsBenchmark.writeJsoniterScala:·gc.time                                             thrpt    5        16.000                    ms
[info] BitSetsBenchmark.writePlayJson                                                           thrpt    5    718122.563 ±    4889.788   ops/s
[info] BitSetsBenchmark.writePlayJson:·gc.alloc.rate                                            thrpt    5      2080.018 ±      14.712  MB/sec
[info] BitSetsBenchmark.writePlayJson:·gc.alloc.rate.norm                                       thrpt    5      4560.001 ±       0.001    B/op
[info] BitSetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   thrpt    5         0.108 ±       0.132  MB/sec
[info] BitSetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              thrpt    5         0.237 ±       0.287    B/op
[info] BitSetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               thrpt    5      2086.443 ±     591.804  MB/sec
[info] BitSetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          thrpt    5      4574.325 ±    1313.557    B/op
[info] BitSetsBenchmark.writePlayJson:·gc.count                                                 thrpt    5        31.000                counts
[info] BitSetsBenchmark.writePlayJson:·gc.time                                                  thrpt    5        36.000                    ms
[info] ExtractFieldsBenchmark.readCirce                                                         thrpt    5    810420.849 ±   19386.130   ops/s
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate                                          thrpt    5      2643.827 ±      61.548  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm                                     thrpt    5      5136.001 ±       0.001    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                 thrpt    5         0.129 ±       0.191  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5         0.250 ±       0.368    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                             thrpt    5      2629.455 ±     649.107  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5      5106.728 ±    1158.736    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.count                                               thrpt    5        39.000                counts
[info] ExtractFieldsBenchmark.readCirce:·gc.time                                                thrpt    5        37.000                    ms
[info] ExtractFieldsBenchmark.readJacksonScala                                                  thrpt    5    988009.140 ±   12598.887   ops/s
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate                                   thrpt    5      1225.088 ±      15.465  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm                              thrpt    5      1952.000 ±       0.001    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                          thrpt    5         0.092 ±       0.146  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5         0.146 ±       0.233    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                      thrpt    5      1261.045 ±     570.205  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5      2009.078 ±     900.947    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.count                                        thrpt    5        19.000                counts
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.time                                         thrpt    5        23.000                    ms
[info] ExtractFieldsBenchmark.readJsoniterScala                                                 thrpt    5   8378667.138 ±  189960.154   ops/s
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate                                  thrpt    5       383.203 ±       8.675  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                             thrpt    5        72.000 ±       0.001    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                         thrpt    5         0.658 ±       5.471  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5         0.124 ±       1.036    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                     thrpt    5       367.333 ±     491.258  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5        69.111 ±      93.997    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.count                                       thrpt    5         6.000                counts
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.time                                        thrpt    5         9.000                    ms
[info] ExtractFieldsBenchmark.readPlayJson                                                      thrpt    5    322397.314 ±    4031.060   ops/s
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate                                       thrpt    5      1777.484 ±      21.895  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm                                  thrpt    5      8680.001 ±       0.001    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                              thrpt    5         0.108 ±       0.262  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                         thrpt    5         0.528 ±       1.275    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                          thrpt    5      1807.587 ±     696.322  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5      8827.147 ±    3403.931    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.count                                            thrpt    5        27.000                counts
[info] ExtractFieldsBenchmark.readPlayJson:·gc.time                                             thrpt    5        33.000                    ms
[info] GoogleMapsAPIBenchmark.readCirce                                                         thrpt    5      7770.079 ±     139.962   ops/s
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate                                          thrpt    5      1869.653 ±      33.777  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm                                     thrpt    5    378792.054 ±       0.014    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space                                 thrpt    5         0.097 ±       0.340  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5        19.761 ±      69.121    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space                             thrpt    5      1934.742 ±     573.129  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5    391923.425 ±  112704.679    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.count                                               thrpt    5        29.000                counts
[info] GoogleMapsAPIBenchmark.readCirce:·gc.time                                                thrpt    5        29.000                    ms
[info] GoogleMapsAPIBenchmark.readJacksonScala                                                  thrpt    5     14767.476 ±      53.451   ops/s
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate                                   thrpt    5       374.035 ±       1.317  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                              thrpt    5     39872.030 ±       0.011    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                          thrpt    5         0.087 ±       0.667  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5         9.328 ±      71.147    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                      thrpt    5       360.934 ±     323.746  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5     38479.670 ±   34624.287    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.count                                        thrpt    5         6.000                counts
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.time                                         thrpt    5         8.000                    ms
[info] GoogleMapsAPIBenchmark.readJsoniterScala                                                 thrpt    5     24103.504 ±    1437.845   ops/s
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                  thrpt    5       411.833 ±      24.375  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                             thrpt    5     26896.018 ±       0.007    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                         thrpt    5         0.678 ±       5.768  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5        44.067 ±     374.919    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                     thrpt    5       430.760 ±     571.417  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5     28083.165 ±   36423.427    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count                                       thrpt    5         7.000                counts
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time                                        thrpt    5        13.000                    ms
[info] GoogleMapsAPIBenchmark.readPlayJson                                                      thrpt    5      2383.479 ±      34.890   ops/s
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate                                       thrpt    5      1488.257 ±      21.999  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                  thrpt    5    982977.387 ±      10.415    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                              thrpt    5         0.029 ±       0.072  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                         thrpt    5        19.222 ±      47.237    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                          thrpt    5      1467.800 ±     718.808  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5    969400.359 ±  472131.616    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.count                                            thrpt    5        22.000                counts
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.time                                             thrpt    5        28.000                    ms
[info] GoogleMapsAPIBenchmark.writeCirce                                                        thrpt    5      7644.663 ±     177.629   ops/s
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate                                         thrpt    5      1644.496 ±      38.119  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm                                    thrpt    5    338568.054 ±       0.008    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                thrpt    5         0.087 ±       0.104  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5        17.980 ±      21.245    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                            thrpt    5      1595.144 ±     537.518  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5    328286.959 ±  104376.058    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.count                                              thrpt    5        24.000                counts
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.time                                               thrpt    5        24.000                    ms
[info] GoogleMapsAPIBenchmark.writeJacksonScala                                                 thrpt    5     43129.852 ±    1643.555   ops/s
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                  thrpt    5       624.824 ±      23.576  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                             thrpt    5     22807.868 ±       0.248    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                         thrpt    5         0.037 ±       0.174  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5         1.362 ±       6.318    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                     thrpt    5       586.908 ±     565.348  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5     21382.962 ±   20094.257    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count                                       thrpt    5         9.000                counts
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time                                        thrpt    5        12.000                    ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScala                                                thrpt    5     73238.658 ±    1013.357   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                 thrpt    5       551.960 ±       7.523  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                            thrpt    5     11864.006 ±       0.001    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5         0.792 ±       6.420  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5        17.049 ±     138.175    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5       522.251 ±     689.400  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5     11231.546 ±   14892.825    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count                                      thrpt    5         8.000                counts
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time                                       thrpt    5         9.000                    ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc                                        thrpt    5     74405.875 ±    2737.360   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                         thrpt    5         1.135 ±       0.042  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                    thrpt    5        24.005 ±       0.001    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                              thrpt    5           ≈ 0                counts
[info] GoogleMapsAPIBenchmark.writePlayJson                                                     thrpt    5      5546.165 ±     121.519   ops/s
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate                                      thrpt    5      1642.245 ±      37.205  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm                                 thrpt    5    466047.736 ±       0.482    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                             thrpt    5         0.042 ±       0.170  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                        thrpt    5        11.760 ±      47.988    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                         thrpt    5      1671.830 ±      60.094  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                    thrpt    5    474459.298 ±   21205.469    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.count                                           thrpt    5        25.000                counts
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.time                                            thrpt    5        31.000                    ms
[info] IntAndLongMapsBenchmark.readJsoniterScala                                                thrpt    5   5448193.071 ±   59728.888   ops/s
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.alloc.rate                                 thrpt    5      1633.402 ±      17.825  MB/sec
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                            thrpt    5       472.000 ±       0.001    B/op
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5         0.108 ±       0.143  MB/sec
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5         0.031 ±       0.041    B/op
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5      1668.588 ±      60.762  MB/sec
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5       482.163 ±      14.018    B/op
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.count                                      thrpt    5        25.000                counts
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.time                                       thrpt    5        23.000                    ms
[info] IntAndLongMapsBenchmark.readPlayJson                                                     thrpt    5    362865.220 ±    6976.801   ops/s
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.alloc.rate                                      thrpt    5      1956.498 ±      37.759  MB/sec
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.alloc.rate.norm                                 thrpt    5      8488.001 ±       0.001    B/op
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                             thrpt    5         0.104 ±       0.057  MB/sec
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                        thrpt    5         0.451 ±       0.244    B/op
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                         thrpt    5      1949.431 ±     597.300  MB/sec
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                    thrpt    5      8459.683 ±    2709.585    B/op
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.count                                           thrpt    5        29.000                counts
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.time                                            thrpt    5        34.000                    ms
[info] IntAndLongMapsBenchmark.writeJsoniterScala                                               thrpt    5   3375502.414 ±   30947.363   ops/s
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.alloc.rate                                thrpt    5       548.910 ±       5.049  MB/sec
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                           thrpt    5       256.000 ±       0.001    B/op
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5         0.788 ±       6.381  MB/sec
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5         0.366 ±       2.966    B/op
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5       522.882 ±     687.590  MB/sec
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5       243.937 ±     321.609    B/op
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.count                                     thrpt    5         8.000                counts
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.time                                      thrpt    5         9.000                    ms
[info] IntAndLongMapsBenchmark.writePlayJson                                                    thrpt    5    345041.469 ±    4023.096   ops/s
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.alloc.rate                                     thrpt    5      1341.261 ±      15.635  MB/sec
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.alloc.rate.norm                                thrpt    5      6120.001 ±       0.001    B/op
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                            thrpt    5         0.083 ±       0.160  MB/sec
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                       thrpt    5         0.379 ±       0.726    B/op
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                        thrpt    5      1330.235 ±      49.346  MB/sec
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                   thrpt    5      6069.707 ±     222.537    B/op
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.count                                          thrpt    5        20.000                counts
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.time                                           thrpt    5        24.000                    ms
[info] IterablesBenchmark.readCirce                                                             thrpt    5    619735.000 ±   12024.320   ops/s
[info] IterablesBenchmark.readCirce:·gc.alloc.rate                                              thrpt    5      2255.018 ±      43.210  MB/sec
[info] IterablesBenchmark.readCirce:·gc.alloc.rate.norm                                         thrpt    5      5728.001 ±       0.001    B/op
[info] IterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                     thrpt    5         0.108 ±       0.132  MB/sec
[info] IterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                thrpt    5         0.275 ±       0.331    B/op
[info] IterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                 thrpt    5      2283.430 ±     553.235  MB/sec
[info] IterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                            thrpt    5      5798.931 ±    1310.894    B/op
[info] IterablesBenchmark.readCirce:·gc.count                                                   thrpt    5        34.000                counts
[info] IterablesBenchmark.readCirce:·gc.time                                                    thrpt    5        31.000                    ms
[info] IterablesBenchmark.readJacksonScala                                                      thrpt    5    631308.671 ±   17073.493   ops/s
[info] IterablesBenchmark.readJacksonScala:·gc.alloc.rate                                       thrpt    5       734.648 ±      19.755  MB/sec
[info] IterablesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                  thrpt    5      1832.001 ±       0.001    B/op
[info] IterablesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                              thrpt    5         0.046 ±       0.154  MB/sec
[info] IterablesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                         thrpt    5         0.114 ±       0.387    B/op
[info] IterablesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                          thrpt    5       719.196 ±     554.242  MB/sec
[info] IterablesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                     thrpt    5      1793.737 ±    1388.399    B/op
[info] IterablesBenchmark.readJacksonScala:·gc.count                                            thrpt    5        11.000                counts
[info] IterablesBenchmark.readJacksonScala:·gc.time                                             thrpt    5        14.000                    ms
[info] IterablesBenchmark.readJsoniterScala                                                     thrpt    5   3889790.572 ±   95930.515   ops/s
[info] IterablesBenchmark.readJsoniterScala:·gc.alloc.rate                                      thrpt    5      1541.791 ±      37.812  MB/sec
[info] IterablesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                 thrpt    5       624.000 ±       0.001    B/op
[info] IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                             thrpt    5         0.121 ±       0.088  MB/sec
[info] IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                        thrpt    5         0.049 ±       0.036    B/op
[info] IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                         thrpt    5      1599.415 ±     574.995  MB/sec
[info] IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    thrpt    5       647.512 ±     240.689    B/op
[info] IterablesBenchmark.readJsoniterScala:·gc.count                                           thrpt    5        24.000                counts
[info] IterablesBenchmark.readJsoniterScala:·gc.time                                            thrpt    5        22.000                    ms
[info] IterablesBenchmark.readPlayJson                                                          thrpt    5    228525.473 ±    3465.976   ops/s
[info] IterablesBenchmark.readPlayJson:·gc.alloc.rate                                           thrpt    5      1589.855 ±      24.209  MB/sec
[info] IterablesBenchmark.readPlayJson:·gc.alloc.rate.norm                                      thrpt    5     10952.002 ±       0.001    B/op
[info] IterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                  thrpt    5         0.075 ±       0.072  MB/sec
[info] IterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                             thrpt    5         0.516 ±       0.499    B/op
[info] IterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                              thrpt    5      1536.681 ±     715.490  MB/sec
[info] IterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                         thrpt    5     10586.954 ±    4972.398    B/op
[info] IterablesBenchmark.readPlayJson:·gc.count                                                thrpt    5        23.000                counts
[info] IterablesBenchmark.readPlayJson:·gc.time                                                 thrpt    5        28.000                    ms
[info] IterablesBenchmark.writeCirce                                                            thrpt    5    864614.168 ±   24613.417   ops/s
[info] IterablesBenchmark.writeCirce:·gc.alloc.rate                                             thrpt    5      1985.929 ±      56.790  MB/sec
[info] IterablesBenchmark.writeCirce:·gc.alloc.rate.norm                                        thrpt    5      3616.000 ±       0.001    B/op
[info] IterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                    thrpt    5         0.100 ±       0.143  MB/sec
[info] IterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                               thrpt    5         0.182 ±       0.264    B/op
[info] IterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                thrpt    5      2007.313 ±      85.239  MB/sec
[info] IterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                           thrpt    5      3655.122 ±     195.000    B/op
[info] IterablesBenchmark.writeCirce:·gc.count                                                  thrpt    5        30.000                counts
[info] IterablesBenchmark.writeCirce:·gc.time                                                   thrpt    5        28.000                    ms
[info] IterablesBenchmark.writeJacksonScala                                                     thrpt    5   1477195.537 ±   20444.003   ops/s
[info] IterablesBenchmark.writeJacksonScala:·gc.alloc.rate                                      thrpt    5       998.474 ±      13.781  MB/sec
[info] IterablesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                 thrpt    5      1064.000 ±       0.001    B/op
[info] IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                             thrpt    5         0.092 ±       0.156  MB/sec
[info] IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                        thrpt    5         0.098 ±       0.167    B/op
[info] IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                         thrpt    5       988.433 ±      34.096  MB/sec
[info] IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                    thrpt    5      1053.310 ±      38.790    B/op
[info] IterablesBenchmark.writeJacksonScala:·gc.count                                           thrpt    5        15.000                counts
[info] IterablesBenchmark.writeJacksonScala:·gc.time                                            thrpt    5        17.000                    ms
[info] IterablesBenchmark.writeJsoniterScala                                                    thrpt    5   7511110.529 ±   78706.665   ops/s
[info] IterablesBenchmark.writeJsoniterScala:·gc.alloc.rate                                     thrpt    5       916.087 ±       9.660  MB/sec
[info] IterablesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                thrpt    5       192.000 ±       0.001    B/op
[info] IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                            thrpt    5         0.083 ±       0.098  MB/sec
[info] IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                       thrpt    5         0.017 ±       0.021    B/op
[info] IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                        thrpt    5       917.669 ±     570.592  MB/sec
[info] IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   thrpt    5       192.388 ±     120.906    B/op
[info] IterablesBenchmark.writeJsoniterScala:·gc.count                                          thrpt    5        14.000                counts
[info] IterablesBenchmark.writeJsoniterScala:·gc.time                                           thrpt    5        13.000                    ms
[info] IterablesBenchmark.writePlayJson                                                         thrpt    5    521738.757 ±   12571.719   ops/s
[info] IterablesBenchmark.writePlayJson:·gc.alloc.rate                                          thrpt    5      1800.251 ±      43.281  MB/sec
[info] IterablesBenchmark.writePlayJson:·gc.alloc.rate.norm                                     thrpt    5      5432.001 ±       0.001    B/op
[info] IterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                 thrpt    5         0.104 ±       0.127  MB/sec
[info] IterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                            thrpt    5         0.314 ±       0.377    B/op
[info] IterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                             thrpt    5      1743.912 ±     588.496  MB/sec
[info] IterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                        thrpt    5      5264.451 ±    1915.405    B/op
[info] IterablesBenchmark.writePlayJson:·gc.count                                               thrpt    5        26.000                counts
[info] IterablesBenchmark.writePlayJson:·gc.time                                                thrpt    5        31.000                    ms
[info] MapsBenchmark.readCirce                                                                  thrpt    5    647721.058 ±   20095.278   ops/s
[info] MapsBenchmark.readCirce:·gc.alloc.rate                                                   thrpt    5      2244.808 ±      68.414  MB/sec
[info] MapsBenchmark.readCirce:·gc.alloc.rate.norm                                              thrpt    5      5456.001 ±       0.001    B/op
[info] MapsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                          thrpt    5         0.087 ±       0.105  MB/sec
[info] MapsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                     thrpt    5         0.213 ±       0.255    B/op
[info] MapsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                      thrpt    5      2283.517 ±     575.750  MB/sec
[info] MapsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                 thrpt    5      5551.881 ±    1510.355    B/op
[info] MapsBenchmark.readCirce:·gc.count                                                        thrpt    5        34.000                counts
[info] MapsBenchmark.readCirce:·gc.time                                                         thrpt    5        30.000                    ms
[info] MapsBenchmark.readJsoniterScala                                                          thrpt    5   5560172.253 ±   20387.394   ops/s
[info] MapsBenchmark.readJsoniterScala:·gc.alloc.rate                                           thrpt    5      1384.432 ±       4.875  MB/sec
[info] MapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      thrpt    5       392.000 ±       0.001    B/op
[info] MapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  thrpt    5         0.087 ±       0.174  MB/sec
[info] MapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             thrpt    5         0.025 ±       0.049    B/op
[info] MapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                              thrpt    5      1395.253 ±     553.274  MB/sec
[info] MapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         thrpt    5       395.051 ±     155.951    B/op
[info] MapsBenchmark.readJsoniterScala:·gc.count                                                thrpt    5        21.000                counts
[info] MapsBenchmark.readJsoniterScala:·gc.time                                                 thrpt    5        19.000                    ms
[info] MapsBenchmark.readPlayJson                                                               thrpt    5    322033.176 ±    4771.390   ops/s
[info] MapsBenchmark.readPlayJson:·gc.alloc.rate                                                thrpt    5      1662.729 ±      24.972  MB/sec
[info] MapsBenchmark.readPlayJson:·gc.alloc.rate.norm                                           thrpt    5      8128.001 ±       0.001    B/op
[info] MapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       thrpt    5         0.112 ±       0.091  MB/sec
[info] MapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  thrpt    5         0.550 ±       0.455    B/op
[info] MapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   thrpt    5      1674.559 ±      61.261  MB/sec
[info] MapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              thrpt    5      8185.842 ±     278.329    B/op
[info] MapsBenchmark.readPlayJson:·gc.count                                                     thrpt    5        25.000                counts
[info] MapsBenchmark.readPlayJson:·gc.time                                                      thrpt    5        30.000                    ms
[info] MapsBenchmark.writeCirce                                                                 thrpt    5    462550.399 ±    6821.890   ops/s
[info] MapsBenchmark.writeCirce:·gc.alloc.rate                                                  thrpt    5      1219.900 ±      18.382  MB/sec
[info] MapsBenchmark.writeCirce:·gc.alloc.rate.norm                                             thrpt    5      4152.001 ±       0.001    B/op
[info] MapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                         thrpt    5         0.083 ±       0.253  MB/sec
[info] MapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                    thrpt    5         0.284 ±       0.869    B/op
[info] MapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                     thrpt    5      1185.779 ±     693.709  MB/sec
[info] MapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                thrpt    5      4036.532 ±    2379.522    B/op
[info] MapsBenchmark.writeCirce:·gc.count                                                       thrpt    5        18.000                counts
[info] MapsBenchmark.writeCirce:·gc.time                                                        thrpt    5        16.000                    ms
[info] MapsBenchmark.writeJsoniterScala                                                         thrpt    5   3172055.856 ±  123110.984   ops/s
[info] MapsBenchmark.writeJsoniterScala:·gc.alloc.rate                                          thrpt    5       531.979 ±      20.259  MB/sec
[info] MapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                     thrpt    5       264.000 ±       0.001    B/op
[info] MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                 thrpt    5         0.794 ±       6.342  MB/sec
[info] MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                            thrpt    5         0.395 ±       3.159    B/op
[info] MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                             thrpt    5       522.957 ±     687.717  MB/sec
[info] MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        thrpt    5       259.632 ±     342.600    B/op
[info] MapsBenchmark.writeJsoniterScala:·gc.count                                               thrpt    5         8.000                counts
[info] MapsBenchmark.writeJsoniterScala:·gc.time                                                thrpt    5         9.000                    ms
[info] MapsBenchmark.writePlayJson                                                              thrpt    5    323876.117 ±   10426.754   ops/s
[info] MapsBenchmark.writePlayJson:·gc.alloc.rate                                               thrpt    5      1193.283 ±      38.599  MB/sec
[info] MapsBenchmark.writePlayJson:·gc.alloc.rate.norm                                          thrpt    5      5800.001 ±       0.001    B/op
[info] MapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                      thrpt    5         0.075 ±       0.156  MB/sec
[info] MapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                 thrpt    5         0.363 ±       0.749    B/op
[info] MapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                  thrpt    5      1193.942 ±     691.097  MB/sec
[info] MapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                             thrpt    5      5808.095 ±    3498.007    B/op
[info] MapsBenchmark.writePlayJson:·gc.count                                                    thrpt    5        18.000                counts
[info] MapsBenchmark.writePlayJson:·gc.time                                                     thrpt    5        20.000                    ms
[info] MissingReqFieldBenchmark.readCirce                                                       thrpt    5   2050411.704 ±   53716.804   ops/s
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate                                        thrpt    5      3032.200 ±      78.576  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm                                   thrpt    5      2328.000 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space                               thrpt    5         0.133 ±       0.134  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                          thrpt    5         0.102 ±       0.101    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space                           thrpt    5      3041.277 ±     903.744  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                      thrpt    5      2334.660 ±     668.533    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.count                                             thrpt    5        45.000                counts
[info] MissingReqFieldBenchmark.readCirce:·gc.time                                              thrpt    5        41.000                    ms
[info] MissingReqFieldBenchmark.readJacksonScala                                                thrpt    5    302886.534 ±    3099.569   ops/s
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate                                 thrpt    5       546.407 ±       5.785  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm                            thrpt    5      2840.001 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                        thrpt    5         0.092 ±       0.352  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5         0.477 ±       1.835    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                    thrpt    5       572.295 ±     545.871  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5      2974.583 ±    2835.932    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.count                                      thrpt    5         9.000                counts
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.time                                       thrpt    5        11.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterScala                                               thrpt    5    700370.899 ±   51469.599   ops/s
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate                                thrpt    5       444.899 ±      32.517  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm                           thrpt    5      1000.001 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5         0.668 ±       5.481  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5         1.482 ±      12.147    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5       447.962 ±     760.728  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5      1008.562 ±    1725.651    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.count                                     thrpt    5         7.000                counts
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.time                                      thrpt    5        10.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterStackless                                           thrpt    5   3660516.619 ±   69659.500   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate                            thrpt    5      1190.504 ±      22.622  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm                       thrpt    5       512.000 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space                   thrpt    5         0.079 ±       0.067  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space.norm              thrpt    5         0.034 ±       0.028    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space               thrpt    5      1128.998 ±     700.284  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space.norm          thrpt    5       485.451 ±     297.872    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.count                                 thrpt    5        17.000                counts
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.time                                  thrpt    5        15.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump                                     thrpt    5   3982930.706 ±   65791.534   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate                      thrpt    5       344.092 ±       5.514  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm                 thrpt    5       136.000 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space             thrpt    5         0.652 ±       5.469  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space.norm        thrpt    5         0.258 ±       2.160    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space         thrpt    5       301.280 ±     160.047  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space.norm    thrpt    5       119.087 ±      63.501    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count                           thrpt    5         5.000                counts
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time                            thrpt    5         9.000                    ms
[info] MissingReqFieldBenchmark.readPlayJson                                                    thrpt    5    204340.648 ±    4671.411   ops/s
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate                                     thrpt    5      1302.197 ±      29.552  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm                                thrpt    5     10032.002 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                            thrpt    5         0.067 ±       0.143  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                       thrpt    5         0.514 ±       1.108    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                        thrpt    5      1260.803 ±     546.599  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                   thrpt    5      9709.080 ±    4058.556    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.count                                          thrpt    5        19.000                counts
[info] MissingReqFieldBenchmark.readPlayJson:·gc.time                                           thrpt    5        23.000                    ms
[info] MutableIterablesBenchmark.readCirce                                                      thrpt    5    724435.939 ±   13108.060   ops/s
[info] MutableIterablesBenchmark.readCirce:·gc.alloc.rate                                       thrpt    5      2764.629 ±      50.716  MB/sec
[info] MutableIterablesBenchmark.readCirce:·gc.alloc.rate.norm                                  thrpt    5      6008.001 ±       0.001    B/op
[info] MutableIterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space                              thrpt    5         0.121 ±       0.164  MB/sec
[info] MutableIterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                         thrpt    5         0.262 ±       0.354    B/op
[info] MutableIterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                          thrpt    5      2768.629 ±     629.775  MB/sec
[info] MutableIterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                     thrpt    5      6017.347 ±    1418.633    B/op
[info] MutableIterablesBenchmark.readCirce:·gc.count                                            thrpt    5        41.000                counts
[info] MutableIterablesBenchmark.readCirce:·gc.time                                             thrpt    5        37.000                    ms
[info] MutableIterablesBenchmark.readJsoniterScala                                              thrpt    5   3883059.497 ±   83467.270   ops/s
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.alloc.rate                               thrpt    5      2505.800 ±      53.532  MB/sec
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                          thrpt    5      1016.000 ±       0.001    B/op
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                      thrpt    5         0.117 ±       0.231  MB/sec
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5         0.047 ±       0.093    B/op
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                  thrpt    5      2495.464 ±     671.193  MB/sec
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5      1011.734 ±     265.637    B/op
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.count                                    thrpt    5        37.000                counts
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.time                                     thrpt    5        33.000                    ms
[info] MutableIterablesBenchmark.readPlayJson                                                   thrpt    5    254062.330 ±    7513.500   ops/s
[info] MutableIterablesBenchmark.readPlayJson:·gc.alloc.rate                                    thrpt    5      1814.061 ±      54.628  MB/sec
[info] MutableIterablesBenchmark.readPlayJson:·gc.alloc.rate.norm                               thrpt    5     11240.002 ±       0.001    B/op
[info] MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                           thrpt    5         0.096 ±       0.091  MB/sec
[info] MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                      thrpt    5         0.594 ±       0.579    B/op
[info] MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                       thrpt    5      1809.972 ±     686.261  MB/sec
[info] MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                  thrpt    5     11218.010 ±    4403.714    B/op
[info] MutableIterablesBenchmark.readPlayJson:·gc.count                                         thrpt    5        27.000                counts
[info] MutableIterablesBenchmark.readPlayJson:·gc.time                                          thrpt    5        32.000                    ms
[info] MutableIterablesBenchmark.writeCirce                                                     thrpt    5    826479.858 ±   18280.143   ops/s
[info] MutableIterablesBenchmark.writeCirce:·gc.alloc.rate                                      thrpt    5      1814.291 ±      40.548  MB/sec
[info] MutableIterablesBenchmark.writeCirce:·gc.alloc.rate.norm                                 thrpt    5      3456.001 ±       0.001    B/op
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                             thrpt    5         0.108 ±       0.174  MB/sec
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                        thrpt    5         0.206 ±       0.331    B/op
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                         thrpt    5      1801.907 ±     711.988  MB/sec
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                    thrpt    5      3433.181 ±    1390.152    B/op
[info] MutableIterablesBenchmark.writeCirce:·gc.count                                           thrpt    5        27.000                counts
[info] MutableIterablesBenchmark.writeCirce:·gc.time                                            thrpt    5        26.000                    ms
[info] MutableIterablesBenchmark.writeJacksonScala                                              thrpt    5   1477385.912 ±   38503.653   ops/s
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.alloc.rate                               thrpt    5       848.334 ±      22.163  MB/sec
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                          thrpt    5       904.000 ±       0.001    B/op
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                      thrpt    5         0.092 ±       0.134  MB/sec
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5         0.097 ±       0.141    B/op
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                  thrpt    5       853.235 ±     691.728  MB/sec
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5       909.700 ±     746.641    B/op
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.count                                    thrpt    5        13.000                counts
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.time                                     thrpt    5        16.000                    ms
[info] MutableIterablesBenchmark.writeJsoniterScala                                             thrpt    5   5039620.764 ±   20250.664   ops/s
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.alloc.rate                              thrpt    5       384.163 ±       1.543  MB/sec
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                         thrpt    5       120.000 ±       0.001    B/op
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                     thrpt    5         0.769 ±       6.416  MB/sec
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                thrpt    5         0.240 ±       2.004    B/op
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                 thrpt    5       364.163 ±     488.114  MB/sec
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5       113.748 ±     152.392    B/op
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.count                                   thrpt    5         6.000                counts
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.time                                    thrpt    5        11.000                    ms
[info] MutableIterablesBenchmark.writePlayJson                                                  thrpt    5    548981.916 ±   11837.844   ops/s
[info] MutableIterablesBenchmark.writePlayJson:·gc.alloc.rate                                   thrpt    5      1860.598 ±      39.206  MB/sec
[info] MutableIterablesBenchmark.writePlayJson:·gc.alloc.rate.norm                              thrpt    5      5336.001 ±       0.001    B/op
[info] MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                          thrpt    5         0.117 ±       0.122  MB/sec
[info] MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                     thrpt    5         0.334 ±       0.354    B/op
[info] MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                      thrpt    5      1811.303 ±     673.916  MB/sec
[info] MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                 thrpt    5      5193.571 ±    1874.012    B/op
[info] MutableIterablesBenchmark.writePlayJson:·gc.count                                        thrpt    5        27.000                counts
[info] MutableIterablesBenchmark.writePlayJson:·gc.time                                         thrpt    5        32.000                    ms
[info] MutableMapsBenchmark.readJsoniterScala                                                   thrpt    5   3563266.251 ±   54719.159   ops/s
[info] MutableMapsBenchmark.readJsoniterScala:·gc.alloc.rate                                    thrpt    5      1683.919 ±      26.022  MB/sec
[info] MutableMapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                               thrpt    5       744.000 ±       0.001    B/op
[info] MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                           thrpt    5         0.096 ±       0.091  MB/sec
[info] MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5         0.042 ±       0.041    B/op
[info] MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                       thrpt    5      1670.953 ±      59.235  MB/sec
[info] MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5       738.271 ±      23.474    B/op
[info] MutableMapsBenchmark.readJsoniterScala:·gc.count                                         thrpt    5        25.000                counts
[info] MutableMapsBenchmark.readJsoniterScala:·gc.time                                          thrpt    5        23.000                    ms
[info] MutableMapsBenchmark.readPlayJson                                                        thrpt    5    311481.069 ±     776.056   ops/s
[info] MutableMapsBenchmark.readPlayJson:·gc.alloc.rate                                         thrpt    5      1658.743 ±       4.162  MB/sec
[info] MutableMapsBenchmark.readPlayJson:·gc.alloc.rate.norm                                    thrpt    5      8384.001 ±       0.001    B/op
[info] MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                thrpt    5         0.100 ±       0.104  MB/sec
[info] MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                           thrpt    5         0.505 ±       0.527    B/op
[info] MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                            thrpt    5      1674.417 ±      60.815  MB/sec
[info] MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                       thrpt    5      8463.234 ±     312.603    B/op
[info] MutableMapsBenchmark.readPlayJson:·gc.count                                              thrpt    5        25.000                counts
[info] MutableMapsBenchmark.readPlayJson:·gc.time                                               thrpt    5        28.000                    ms
[info] MutableMapsBenchmark.writeCirce                                                          thrpt    5    466704.431 ±   14946.974   ops/s
[info] MutableMapsBenchmark.writeCirce:·gc.alloc.rate                                           thrpt    5      1209.485 ±      38.875  MB/sec
[info] MutableMapsBenchmark.writeCirce:·gc.alloc.rate.norm                                      thrpt    5      4080.001 ±       0.001    B/op
[info] MutableMapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                  thrpt    5         0.087 ±       0.154  MB/sec
[info] MutableMapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                             thrpt    5         0.296 ±       0.529    B/op
[info] MutableMapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                              thrpt    5      1185.890 ±     704.698  MB/sec
[info] MutableMapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                         thrpt    5      4002.968 ±    2447.026    B/op
[info] MutableMapsBenchmark.writeCirce:·gc.count                                                thrpt    5        18.000                counts
[info] MutableMapsBenchmark.writeCirce:·gc.time                                                 thrpt    5        17.000                    ms
[info] MutableMapsBenchmark.writeJsoniterScala                                                  thrpt    5   2869474.483 ±  110685.468   ops/s
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.alloc.rate                                   thrpt    5       583.255 ±      22.468  MB/sec
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                              thrpt    5       320.000 ±       0.001    B/op
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                          thrpt    5         0.787 ±       6.420  MB/sec
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5         0.432 ±       3.522    B/op
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                      thrpt    5       588.226 ±     563.870  MB/sec
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5       322.230 ±     302.769    B/op
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.count                                        thrpt    5         9.000                counts
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.time                                         thrpt    5        11.000                    ms
[info] MutableMapsBenchmark.writePlayJson                                                       thrpt    5    343352.747 ±    8931.493   ops/s
[info] MutableMapsBenchmark.writePlayJson:·gc.alloc.rate                                        thrpt    5      1317.328 ±      34.461  MB/sec
[info] MutableMapsBenchmark.writePlayJson:·gc.alloc.rate.norm                                   thrpt    5      6040.001 ±       0.001    B/op
[info] MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                               thrpt    5         0.075 ±       0.122  MB/sec
[info] MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                          thrpt    5         0.343 ±       0.552    B/op
[info] MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                           thrpt    5      1329.805 ±      50.161  MB/sec
[info] MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5      6097.698 ±     370.769    B/op
[info] MutableMapsBenchmark.writePlayJson:·gc.count                                             thrpt    5        20.000                counts
[info] MutableMapsBenchmark.writePlayJson:·gc.time                                              thrpt    5        23.000                    ms
[info] PrimitivesBenchmark.readCirce                                                            thrpt    5    691898.898 ±    6428.915   ops/s
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate                                             thrpt    5      2131.002 ±      19.113  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm                                        thrpt    5      4848.001 ±       0.001    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    thrpt    5         0.096 ±       0.166  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               thrpt    5         0.218 ±       0.379    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                thrpt    5      2143.829 ±     734.189  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           thrpt    5      4876.919 ±    1655.167    B/op
[info] PrimitivesBenchmark.readCirce:·gc.count                                                  thrpt    5        32.000                counts
[info] PrimitivesBenchmark.readCirce:·gc.time                                                   thrpt    5        29.000                    ms
[info] PrimitivesBenchmark.readJacksonScala                                                     thrpt    5   1551744.493 ±   37314.875   ops/s
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate                                      thrpt    5      1174.949 ±      28.426  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                 thrpt    5      1192.000 ±       0.001    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                             thrpt    5         0.087 ±       0.067  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                        thrpt    5         0.089 ±       0.068    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                         thrpt    5      1193.820 ±     699.649  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                    thrpt    5      1211.118 ±     708.195    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.count                                           thrpt    5        18.000                counts
[info] PrimitivesBenchmark.readJacksonScala:·gc.time                                            thrpt    5        21.000                    ms
[info] PrimitivesBenchmark.readJsoniterScala                                                    thrpt    5   7018146.290 ±   36116.131   ops/s
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate                                     thrpt    5       213.989 ±       1.011  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                thrpt    5        48.000 ±       0.001    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                            thrpt    5         0.006 ±       0.034  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                       thrpt    5         0.001 ±       0.008    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                        thrpt    5       204.591 ±     440.397  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   thrpt    5        45.876 ±      98.752    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.count                                          thrpt    5         4.000                counts
[info] PrimitivesBenchmark.readJsoniterScala:·gc.time                                           thrpt    5         9.000                    ms
[info] PrimitivesBenchmark.readPlayJson                                                         thrpt    5    241382.182 ±    4010.665   ops/s
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate                                          thrpt    5      1680.635 ±      28.106  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm                                     thrpt    5     10960.002 ±       0.001    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 thrpt    5         0.112 ±       0.044  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            thrpt    5         0.733 ±       0.282    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             thrpt    5      1672.434 ±      65.634  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        thrpt    5     10906.723 ±     483.001    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.count                                               thrpt    5        25.000                counts
[info] PrimitivesBenchmark.readPlayJson:·gc.time                                                thrpt    5        29.000                    ms
[info] PrimitivesBenchmark.writeCirce                                                           thrpt    5    943468.782 ±   26838.170   ops/s
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate                                            thrpt    5      1519.893 ±      43.815  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm                                       thrpt    5      2536.000 ±       0.001    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                   thrpt    5         0.075 ±       0.091  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                              thrpt    5         0.125 ±       0.150    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                               thrpt    5      1523.641 ±     666.609  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                          thrpt    5      2543.158 ±    1145.786    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.count                                                 thrpt    5        23.000                counts
[info] PrimitivesBenchmark.writeCirce:·gc.time                                                  thrpt    5        22.000                    ms
[info] PrimitivesBenchmark.writeJacksonScala                                                    thrpt    5   2511966.457 ±   46295.893   ops/s
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate                                     thrpt    5      1033.964 ±      19.012  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                thrpt    5       648.000 ±       0.001    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                            thrpt    5         0.104 ±       0.150  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                       thrpt    5         0.065 ±       0.094    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                        thrpt    5      1057.267 ±     572.379  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                   thrpt    5       662.570 ±     357.228    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.count                                          thrpt    5        16.000                counts
[info] PrimitivesBenchmark.writeJacksonScala:·gc.time                                           thrpt    5        18.000                    ms
[info] PrimitivesBenchmark.writeJsoniterScala                                                   thrpt    5   6061068.700 ±  122929.676   ops/s
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate                                    thrpt    5       677.625 ±      13.799  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                               thrpt    5       176.000 ±       0.001    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                           thrpt    5         0.058 ±       0.132  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5         0.015 ±       0.035    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                       thrpt    5       653.958 ±       4.831  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5       169.856 ±       2.909    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.count                                         thrpt    5        10.000                counts
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.time                                          thrpt    5        10.000                    ms
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc                                           thrpt    5   6052310.550 ±  297761.575   ops/s
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                            thrpt    5       369.032 ±      18.039  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                       thrpt    5        96.000 ±       0.001    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                   thrpt    5         0.764 ±       6.344  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm              thrpt    5         0.197 ±       1.631    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space               thrpt    5       364.521 ±     641.861  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm          thrpt    5        95.204 ±     172.907    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                 thrpt    5         6.000                counts
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time                                  thrpt    5        10.000                    ms
[info] PrimitivesBenchmark.writePlayJson                                                        thrpt    5    358539.102 ±    8765.027   ops/s
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate                                         thrpt    5      1977.176 ±      48.592  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm                                    thrpt    5      8680.001 ±       0.001    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                thrpt    5         0.104 ±       0.057  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                           thrpt    5         0.457 ±       0.251    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                            thrpt    5      2013.654 ±      75.284  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                       thrpt    5      8840.286 ±     332.545    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.count                                              thrpt    5        30.000                counts
[info] PrimitivesBenchmark.writePlayJson:·gc.time                                               thrpt    5        34.000                    ms
[info] StringOfAsciiCharsBenchmark.readCirce                                                    thrpt    5   4261940.486 ±   78431.098   ops/s
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                     thrpt    5      3205.341 ±      57.761  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                                thrpt    5      1184.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                            thrpt    5         0.150 ±       0.207  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                       thrpt    5         0.055 ±       0.077    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                        thrpt    5      3251.133 ±     704.218  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                   thrpt    5      1201.003 ±     266.616    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.count                                          thrpt    5        48.000                counts
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.time                                           thrpt    5        44.000                    ms
[info] StringOfAsciiCharsBenchmark.readJacksonScala                                             thrpt    5   4193272.564 ±   82658.736   ops/s
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                              thrpt    5      2173.399 ±      42.996  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                         thrpt    5       816.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                     thrpt    5         0.108 ±       0.067  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                thrpt    5         0.041 ±       0.025    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                 thrpt    5      2153.357 ±     670.325  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5       808.579 ±     257.256    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count                                   thrpt    5        32.000                counts
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time                                    thrpt    5        34.000                    ms
[info] StringOfAsciiCharsBenchmark.readJsoniterScala                                            thrpt    5   6614370.300 ±  265536.028   ops/s
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                             thrpt    5       705.891 ±      28.268  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                        thrpt    5       168.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                    thrpt    5         0.067 ±       0.105  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm               thrpt    5         0.016 ±       0.026    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                thrpt    5       726.571 ±     564.450  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5       172.857 ±     132.069    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count                                  thrpt    5        11.000                counts
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time                                   thrpt    5        11.000                    ms
[info] StringOfAsciiCharsBenchmark.writeCirce                                                   thrpt    5   2774996.884 ±   67063.875   ops/s
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                    thrpt    5      1156.429 ±      27.934  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                               thrpt    5       656.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                           thrpt    5         0.062 ±       0.080  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                      thrpt    5         0.035 ±       0.046    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                       thrpt    5      1185.760 ±     697.436  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                  thrpt    5       672.598 ±     394.259    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.count                                         thrpt    5        18.000                counts
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.time                                          thrpt    5        17.000                    ms
[info] StringOfAsciiCharsBenchmark.writeJacksonScala                                            thrpt    5   2139205.569 ±   24761.150   ops/s
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                             thrpt    5       663.120 ±       7.777  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                        thrpt    5       488.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                    thrpt    5         0.054 ±       0.146  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm               thrpt    5         0.040 ±       0.107    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                thrpt    5       650.960 ±      20.400  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5       479.059 ±      18.063    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count                                  thrpt    5        10.000                counts
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time                                   thrpt    5        11.000                    ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala                                           thrpt    5   8797381.843 ±  568810.315   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                            thrpt    5       849.452 ±      54.887  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                       thrpt    5       152.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                   thrpt    5         0.096 ±       0.121  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm              thrpt    5         0.017 ±       0.021    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space               thrpt    5       851.741 ±     693.452  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm          thrpt    5       152.146 ±     118.043    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count                                 thrpt    5        13.000                counts
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time                                  thrpt    5        13.000                    ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                   thrpt    5   8465967.180 ±  277647.248   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                    thrpt    5        ≈ 10⁻⁴                MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm               thrpt    5        ≈ 10⁻⁴                  B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                         thrpt    5           ≈ 0                counts
[info] StringOfAsciiCharsBenchmark.writePlayJson                                                thrpt    5   3512993.979 ±  116737.498   ops/s
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                                 thrpt    5      1124.563 ±      37.731  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                            thrpt    5       504.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                        thrpt    5         0.062 ±       0.098  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                   thrpt    5         0.028 ±       0.045    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                    thrpt    5      1116.069 ±     673.351  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm               thrpt    5       500.398 ±     308.093    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.count                                      thrpt    5        17.000                counts
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.time                                       thrpt    5        15.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readCirce                                                 thrpt    5    968602.868 ±   14650.231   ops/s
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                  thrpt    5      1624.205 ±      24.785  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                             thrpt    5      2640.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                         thrpt    5         0.075 ±       0.122  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                    thrpt    5         0.122 ±       0.196    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                     thrpt    5      1599.203 ±     615.322  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                thrpt    5      2598.755 ±     973.730    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.count                                       thrpt    5        24.000                counts
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.time                                        thrpt    5        22.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala                                          thrpt    5   1105383.597 ±   19317.723   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                           thrpt    5       814.481 ±      14.371  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                      thrpt    5      1160.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                  thrpt    5         0.058 ±       0.132  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm             thrpt    5         0.083 ±       0.188    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space              thrpt    5       784.753 ±     691.040  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm         thrpt    5      1117.815 ±     987.730    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count                                thrpt    5        12.000                counts
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time                                 thrpt    5        13.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala                                         thrpt    5   1963344.974 ±   38740.935   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                          thrpt    5       548.746 ±      10.562  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                     thrpt    5       440.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                 thrpt    5         0.670 ±       5.275  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm            thrpt    5         0.539 ±       4.250    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space             thrpt    5       528.739 ±     695.095  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm        thrpt    5       423.438 ±     550.848    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count                               thrpt    5         8.000                counts
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time                                thrpt    5         8.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeCirce                                                thrpt    5   1686871.356 ±   25280.696   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                 thrpt    5      1371.631 ±      21.227  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                            thrpt    5      1280.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                        thrpt    5         0.079 ±       0.105  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                   thrpt    5         0.074 ±       0.097    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                    thrpt    5      1389.913 ±     572.438  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm               thrpt    5      1297.388 ±     550.042    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count                                      thrpt    5        21.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time                                       thrpt    5        19.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala                                         thrpt    5   2598523.594 ±   61833.182   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                          thrpt    5      1043.198 ±      24.947  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                     thrpt    5       632.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                 thrpt    5         0.104 ±       0.098  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm            thrpt    5         0.063 ±       0.059    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space             thrpt    5      1053.220 ±     569.892  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm        thrpt    5       638.385 ±     357.559    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count                               thrpt    5        16.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time                                thrpt    5        17.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala                                        thrpt    5   2802748.024 ±   19078.304   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                         thrpt    5       655.119 ±       4.361  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                    thrpt    5       368.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                thrpt    5         0.809 ±       6.294  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm           thrpt    5         0.455 ±       3.545    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space            thrpt    5       654.028 ±       7.286  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm       thrpt    5       367.389 ±       6.184    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count                              thrpt    5        10.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time                               thrpt    5        11.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                thrpt    5   2821302.052 ±   18355.249   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                 thrpt    5        ≈ 10⁻⁴                MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm            thrpt    5        ≈ 10⁻⁴                  B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                      thrpt    5           ≈ 0                counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson                                             thrpt    5   2445683.576 ±   13756.642   ops/s
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                              thrpt    5      1118.517 ±       5.969  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                         thrpt    5       720.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                     thrpt    5         0.092 ±       0.107  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                thrpt    5         0.059 ±       0.069    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                 thrpt    5      1115.899 ±     671.988  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm            thrpt    5       718.359 ±     433.986    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count                                   thrpt    5        17.000                counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time                                    thrpt    5        16.000                    ms
[info] TwitterAPIBenchmark.readCirce                                                            thrpt    5     12070.623 ±    2788.338   ops/s
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate                                             thrpt    5      1758.680 ±     396.024  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm                                        thrpt    5    229344.387 ±    1294.271    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    thrpt    5         0.133 ±       0.090  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               thrpt    5        17.409 ±      12.751    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                thrpt    5      1725.249 ±     610.926  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           thrpt    5    225175.522 ±   70596.731    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.count                                                  thrpt    5        26.000                counts
[info] TwitterAPIBenchmark.readCirce:·gc.time                                                   thrpt    5        47.000                    ms
[info] TwitterAPIBenchmark.readJacksonScala                                                     thrpt    5     15429.011 ±     593.877   ops/s
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate                                      thrpt    5       217.900 ±       8.607  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                                 thrpt    5     22233.524 ±      26.515    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                             thrpt    5         0.154 ±       1.238  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                        thrpt    5        15.678 ±     126.084    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                         thrpt    5       217.878 ±     481.983  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                    thrpt    5     22269.432 ±   49206.670    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.count                                           thrpt    5         4.000                counts
[info] TwitterAPIBenchmark.readJacksonScala:·gc.time                                            thrpt    5         7.000                    ms
[info] TwitterAPIBenchmark.readJsoniterScala                                                    thrpt    5     38192.726 ±     575.403   ops/s
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                     thrpt    5       353.639 ±       5.466  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                thrpt    5     14576.015 ±       0.035    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                            thrpt    5         0.671 ±       5.712  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                       thrpt    5        27.743 ±     236.054    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                        thrpt    5       350.678 ±     673.559  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   thrpt    5     14464.787 ±   27912.116    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.count                                          thrpt    5         6.000                counts
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.time                                           thrpt    5        12.000                    ms
[info] TwitterAPIBenchmark.readPlayJson                                                         thrpt    5      3547.901 ±     531.926   ops/s
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate                                          thrpt    5      1138.272 ±     170.160  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                     thrpt    5    505051.113 ±     163.556    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 thrpt    5         0.071 ±       0.072  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            thrpt    5        31.549 ±      34.064    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             thrpt    5      1123.365 ±     724.449  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        thrpt    5    497993.156 ±  296395.973    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.count                                               thrpt    5        17.000                counts
[info] TwitterAPIBenchmark.readPlayJson:·gc.time                                                thrpt    5        24.000                    ms
[info] TwitterAPIBenchmark.writeJacksonScala                                                    thrpt    5     50746.914 ±    1319.729   ops/s
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                     thrpt    5       664.157 ±      16.940  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                thrpt    5     20604.011 ±       0.258    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                            thrpt    5         0.079 ±       0.174  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                       thrpt    5         2.457 ±       5.431    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                        thrpt    5       651.872 ±      16.944  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                   thrpt    5     20223.496 ±     685.366    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.count                                          thrpt    5        10.000                counts
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.time                                           thrpt    5        13.000                    ms
[info] TwitterAPIBenchmark.writeJsoniterScala                                                   thrpt    5     91524.690 ±    4982.842   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                    thrpt    5       598.145 ±      32.257  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                               thrpt    5     10288.005 ±       0.001    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                           thrpt    5         0.822 ±       6.630  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5        14.097 ±     113.683    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                       thrpt    5       587.568 ±     563.115  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5     10112.143 ±    9761.144    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.count                                         thrpt    5         9.000                counts
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.time                                          thrpt    5        11.000                    ms
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc                                           thrpt    5    101035.543 ±     914.671   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                            thrpt    5        12.321 ±       0.110  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                       thrpt    5       192.004 ±       0.001    B/op
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                                 thrpt    5           ≈ 0                counts
[info] Benchmark result is saved to jdk9.json
[success] Total time: 3537 s, completed Feb 10, 2018, 8:22:39 PM
