[info] Loading settings from idea.sbt,build.sbt ...
[info] Loading global plugins from /home/andriy/.sbt/1.0/plugins
[info] Loading settings from plugins.sbt ...
[info] Loading project definition from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/project
[info] Loading settings from release.sbt,build.sbt,version.sbt ...
[info] Set current project to jsoniter-scala (in build file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[success] Total time: 0 s, completed Feb 16, 2018, 4:29:47 PM
[info] Updating core...
[info] Done updating.
[info] Updating macros...
[info] Done updating.
[info] Updating benchmark...
[info] Done updating.
[info] Compiling 5 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/classes ...
[info] Non-compiled module 'compiler-bridge_2.12' for Scala 2.12.4. Compiling...
[info]   Compilation completed in 5.545s.
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:988:63: constructor String in class String is deprecated: see corresponding Javadoc for more information.
[warn]   private def toDouble: Double = java.lang.Double.parseDouble(new String(buf, 0, mark, head - mark))
[warn]                                                               ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:475:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos)
[warn]       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:483:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos + 1)
[warn]       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:975:14: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]       zoneId.getBytes(0, len, buf, pos)
[warn]              ^
[warn] four warnings found
[info] Done compiling.
[info] Compiling 1 Scala source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/classes ...
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/core_2.12-0.10.1-SNAPSHOT.jar ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/macros_2.12-0.10.1-SNAPSHOT.jar ...
[info] Compiling 46 Scala sources and 1 Java source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done packaging.
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:14:64: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("s", "bd");
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _bd: scala.math.BigDecimal = null;
[info]           var _os: Option[String] = None;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = JsoniterCodecs.this.stringCodec.decode(in, _s);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3138 => if (in.isCharBufEqualsTo(l, "bd"))
[info]                       {
[info]                         _bd = in.readBigDecimal(_bd);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556 => if (in.isCharBufEqualsTo(l, "os"))
[info]                       _os = Option(JsoniterCodecs.this.stringCodec.decode(in, null))
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs(s = _s, bd = _bd, os = _os)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("s");
[info]             JsoniterCodecs.this.stringCodec.encode(x.s, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("bd");
[info]             out.writeVal(x.bd)
[info]           };
[info]           {
[info]             val v = x.os;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("os");
[info]                 JsoniterCodecs.this.stringCodec.encode(v.get, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val anyRefsCodec: JsonCodec[AnyRefs] = make[AnyRefs](CodecMakerConfig())
[info]                                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:15:61: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Arrays':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Arrays] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays): com.github.plokhotnyuk.jsoniter_scala.macros.Arrays = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays, out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Array[Int]] = new Array[Array[Int]](0);
[info]       private val v1: Array[BigInt] = new Array[scala.math.BigInt](0);
[info]       private val v2: Array[Int] = new Array[Int](0);
[info]       private def d1(in: JsonReader, default: Array[Array[Int]]): Array[Array[Int]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Array[Int]](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Array[Int]](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, JsoniterCodecs.this.intArrayCodec.decode(in, v2));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Array[Int]](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays): com.github.plokhotnyuk.jsoniter_scala.macros.Arrays = if (in.isNextToken('{'))
[info]         {
[info]           var _aa: Array[Array[Int]] = v0;
[info]           var _a: Array[BigInt] = v1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3104 => if (in.isCharBufEqualsTo(l, "aa"))
[info]                       _aa = d1(in, _aa)
[info]                     else
[info]                       in.skip()
[info]                     case 97 => if (in.isCharBufEqualsTo(l, "a"))
[info]                       _a = JsoniterCodecs.this.bigIntArrayCodec.decode(in, _a)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Arrays(aa = _aa, a = _a)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: Array[Array[Int]], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               JsoniterCodecs.this.intArrayCodec.encode(x(i), out);
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.aa;
[info]             if (v.ne(null).&&(v.length.>(0)))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("aa");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.a;
[info]             if (v.ne(null).&&(v.length.>(0)))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("a");
[info]                 JsoniterCodecs.this.bigIntArrayCodec.encode(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val arraysCodec: JsonCodec[Arrays] = make[Arrays](CodecMakerConfig())
[info]                                                             ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:16:92: Generated JSON codec for type 'Array[BigDecimal]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[BigDecimal]] {
[info]       def nullValue: Array[BigDecimal] = v0;
[info]       def decode(in: JsonReader, default: Array[BigDecimal]): Array[BigDecimal] = d0(in, default);
[info]       def encode(x: Array[BigDecimal], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[BigDecimal] = new Array[scala.math.BigDecimal](0);
[info]       private def d0(in: JsonReader, default: Array[BigDecimal]): Array[BigDecimal] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigDecimal](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[scala.math.BigDecimal](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigDecimal(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[scala.math.BigDecimal](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[BigDecimal], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bigDecimalArrayCodec: JsonCodec[Array[BigDecimal]] = make[Array[BigDecimal]](CodecMakerConfig())
[info]                                                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:17:80: Generated JSON codec for type 'Array[BigInt]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[BigInt]] {
[info]       def nullValue: Array[BigInt] = v0;
[info]       def decode(in: JsonReader, default: Array[BigInt]): Array[BigInt] = d0(in, default);
[info]       def encode(x: Array[BigInt], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[BigInt] = new Array[scala.math.BigInt](0);
[info]       private def d0(in: JsonReader, default: Array[BigInt]): Array[BigInt] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigInt](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[scala.math.BigInt](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigInt(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[scala.math.BigInt](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[BigInt], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bigIntArrayCodec: JsonCodec[Array[BigInt]] = make[Array[BigInt]](CodecMakerConfig())
[info]                                                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:18:64: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.BitSets':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.BitSets] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets): com.github.plokhotnyuk.jsoniter_scala.macros.BitSets = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = BitSet.newBuilder;
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d2(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               BitSet.empty;
[info]             do 
[info]               x.add(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets): com.github.plokhotnyuk.jsoniter_scala.macros.BitSets = if (in.isNextToken('{'))
[info]         {
[info]           var _bs: scala.collection.immutable.BitSet = BitSet.empty;
[info]           var _mbs: scala.collection.mutable.BitSet = BitSet.empty;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3153 => if (in.isCharBufEqualsTo(l, "bs"))
[info]                       _bs = d1(in, _bs)
[info]                     else
[info]                       in.skip()
[info]                     case 107902 => if (in.isCharBufEqualsTo(l, "mbs"))
[info]                       _mbs = d2(in, _mbs)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.BitSets(bs = _bs, mbs = _mbs)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.bs;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("bs");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.mbs;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("mbs");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bitSetsCodec: JsonCodec[BitSets] = make[BitSets](CodecMakerConfig())
[info]                                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:19:83: Generated JSON codec for type 'Array[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[Boolean]] {
[info]       def nullValue: Array[Boolean] = v0;
[info]       def decode(in: JsonReader, default: Array[Boolean]): Array[Boolean] = d0(in, default);
[info]       def encode(x: Array[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Boolean] = new Array[Boolean](0);
[info]       private def d0(in: JsonReader, default: Array[Boolean]): Array[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Boolean](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Boolean](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBoolean());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Boolean](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[Boolean], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanArrayCodec: JsonCodec[Array[Boolean]] = make[Array[Boolean]](CodecMakerConfig())
[info]                                                                                   ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:20:74: Generated JSON codec for type 'Array[Byte]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[Byte]] {
[info]       def nullValue: Array[Byte] = v0;
[info]       def decode(in: JsonReader, default: Array[Byte]): Array[Byte] = d0(in, default);
[info]       def encode(x: Array[Byte], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Byte] = new Array[Byte](0);
[info]       private def d0(in: JsonReader, default: Array[Byte]): Array[Byte] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Byte](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Byte](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readByte());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Byte](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[Byte], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val byteArrayCodec: JsonCodec[Array[Byte]] = make[Array[Byte]](CodecMakerConfig())
[info]                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:21:80: Generated JSON codec for type 'Array[Double]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[Double]] {
[info]       def nullValue: Array[Double] = v0;
[info]       def decode(in: JsonReader, default: Array[Double]): Array[Double] = d0(in, default);
[info]       def encode(x: Array[Double], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Double] = new Array[Double](0);
[info]       private def d0(in: JsonReader, default: Array[Double]): Array[Double] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Double](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Double](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDouble());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Double](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[Double], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val doubleArrayCodec: JsonCodec[Array[Double]] = make[Array[Double]](CodecMakerConfig())
[info]                                                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:22:86: Generated JSON codec for type 'Array[java.time.Duration]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[java.time.Duration]] {
[info]       def nullValue: Array[java.time.Duration] = v0;
[info]       def decode(in: JsonReader, default: Array[java.time.Duration]): Array[java.time.Duration] = d0(in, default);
[info]       def encode(x: Array[java.time.Duration], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[java.time.Duration] = new Array[java.time.Duration](0);
[info]       private def d0(in: JsonReader, default: Array[java.time.Duration]): Array[java.time.Duration] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Duration](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.time.Duration](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDuration(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.time.Duration](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[java.time.Duration], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val durationArrayCodec: JsonCodec[Array[Duration]] = make[Array[Duration]](CodecMakerConfig())
[info]                                                                                      ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:23:77: Generated JSON codec for type 'Array[Float]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[Float]] {
[info]       def nullValue: Array[Float] = v0;
[info]       def decode(in: JsonReader, default: Array[Float]): Array[Float] = d0(in, default);
[info]       def encode(x: Array[Float], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Float] = new Array[Float](0);
[info]       private def d0(in: JsonReader, default: Array[Float]): Array[Float] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Float](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Float](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readFloat());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Float](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[Float], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val floatArrayCodec: JsonCodec[Array[Float]] = make[Array[Float]](CodecMakerConfig())
[info]                                                                             ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:24:83: Generated JSON codec for type 'Array[java.time.Instant]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[java.time.Instant]] {
[info]       def nullValue: Array[java.time.Instant] = v0;
[info]       def decode(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = d0(in, default);
[info]       def encode(x: Array[java.time.Instant], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[java.time.Instant] = new Array[java.time.Instant](0);
[info]       private def d0(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Instant](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.time.Instant](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInstant(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.time.Instant](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[java.time.Instant], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val instantArrayCodec: JsonCodec[Array[Instant]] = make[Array[Instant]](CodecMakerConfig())
[info]                                                                                   ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:25:89: Generated JSON codec for type 'Array[java.time.LocalDate]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[java.time.LocalDate]] {
[info]       def nullValue: Array[java.time.LocalDate] = v0;
[info]       def decode(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = d0(in, default);
[info]       def encode(x: Array[java.time.LocalDate], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[java.time.LocalDate] = new Array[java.time.LocalDate](0);
[info]       private def d0(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDate](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.time.LocalDate](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDate(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.time.LocalDate](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[java.time.LocalDate], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localDateArrayCodec: JsonCodec[Array[LocalDate]] = make[Array[LocalDate]](CodecMakerConfig())
[info]                                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:26:101: Generated JSON codec for type 'Array[java.time.LocalDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[java.time.LocalDateTime]] {
[info]       def nullValue: Array[java.time.LocalDateTime] = v0;
[info]       def decode(in: JsonReader, default: Array[java.time.LocalDateTime]): Array[java.time.LocalDateTime] = d0(in, default);
[info]       def encode(x: Array[java.time.LocalDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[java.time.LocalDateTime] = new Array[java.time.LocalDateTime](0);
[info]       private def d0(in: JsonReader, default: Array[java.time.LocalDateTime]): Array[java.time.LocalDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.time.LocalDateTime](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.time.LocalDateTime](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[java.time.LocalDateTime], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localDateTimeArrayCodec: JsonCodec[Array[LocalDateTime]] = make[Array[LocalDateTime]](CodecMakerConfig())
[info]                                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:27:104: Generated JSON codec for type 'Array[java.time.OffsetDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[java.time.OffsetDateTime]] {
[info]       def nullValue: Array[java.time.OffsetDateTime] = v0;
[info]       def decode(in: JsonReader, default: Array[java.time.OffsetDateTime]): Array[java.time.OffsetDateTime] = d0(in, default);
[info]       def encode(x: Array[java.time.OffsetDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[java.time.OffsetDateTime] = new Array[java.time.OffsetDateTime](0);
[info]       private def d0(in: JsonReader, default: Array[java.time.OffsetDateTime]): Array[java.time.OffsetDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.OffsetDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.time.OffsetDateTime](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readOffsetDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.time.OffsetDateTime](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[java.time.OffsetDateTime], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val offsetDateTimeArrayCodec: JsonCodec[Array[OffsetDateTime]] = make[Array[OffsetDateTime]](CodecMakerConfig())
[info]                                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:28:92: Generated JSON codec for type 'Array[java.time.OffsetTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[java.time.OffsetTime]] {
[info]       def nullValue: Array[java.time.OffsetTime] = v0;
[info]       def decode(in: JsonReader, default: Array[java.time.OffsetTime]): Array[java.time.OffsetTime] = d0(in, default);
[info]       def encode(x: Array[java.time.OffsetTime], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[java.time.OffsetTime] = new Array[java.time.OffsetTime](0);
[info]       private def d0(in: JsonReader, default: Array[java.time.OffsetTime]): Array[java.time.OffsetTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.OffsetTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.time.OffsetTime](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readOffsetTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.time.OffsetTime](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[java.time.OffsetTime], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val offsetTimeArrayCodec: JsonCodec[Array[OffsetTime]] = make[Array[OffsetTime]](CodecMakerConfig())
[info]                                                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:29:89: Generated JSON codec for type 'Array[java.time.LocalTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[java.time.LocalTime]] {
[info]       def nullValue: Array[java.time.LocalTime] = v0;
[info]       def decode(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = d0(in, default);
[info]       def encode(x: Array[java.time.LocalTime], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[java.time.LocalTime] = new Array[java.time.LocalTime](0);
[info]       private def d0(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.time.LocalTime](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.time.LocalTime](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[java.time.LocalTime], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localTimeArrayCodec: JsonCodec[Array[LocalTime]] = make[Array[LocalTime]](CodecMakerConfig())
[info]                                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:30:80: Generated JSON codec for type 'Array[java.time.Period]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[java.time.Period]] {
[info]       def nullValue: Array[java.time.Period] = v0;
[info]       def decode(in: JsonReader, default: Array[java.time.Period]): Array[java.time.Period] = d0(in, default);
[info]       def encode(x: Array[java.time.Period], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[java.time.Period] = new Array[java.time.Period](0);
[info]       private def d0(in: JsonReader, default: Array[java.time.Period]): Array[java.time.Period] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Period](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.time.Period](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readPeriod(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.time.Period](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[java.time.Period], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val periodArrayCodec: JsonCodec[Array[Period]] = make[Array[Period]](CodecMakerConfig())
[info]                                                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:31:101: Generated JSON codec for type 'Array[java.time.ZonedDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[java.time.ZonedDateTime]] {
[info]       def nullValue: Array[java.time.ZonedDateTime] = v0;
[info]       def decode(in: JsonReader, default: Array[java.time.ZonedDateTime]): Array[java.time.ZonedDateTime] = d0(in, default);
[info]       def encode(x: Array[java.time.ZonedDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[java.time.ZonedDateTime] = new Array[java.time.ZonedDateTime](0);
[info]       private def d0(in: JsonReader, default: Array[java.time.ZonedDateTime]): Array[java.time.ZonedDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZonedDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.time.ZonedDateTime](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZonedDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.time.ZonedDateTime](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[java.time.ZonedDateTime], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zonedDateTimeArrayCodec: JsonCodec[Array[ZonedDateTime]] = make[Array[ZonedDateTime]](CodecMakerConfig())
[info]                                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:32:92: Generated JSON codec for type 'Array[java.time.ZoneOffset]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[java.time.ZoneOffset]] {
[info]       def nullValue: Array[java.time.ZoneOffset] = v0;
[info]       def decode(in: JsonReader, default: Array[java.time.ZoneOffset]): Array[java.time.ZoneOffset] = d0(in, default);
[info]       def encode(x: Array[java.time.ZoneOffset], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[java.time.ZoneOffset] = new Array[java.time.ZoneOffset](0);
[info]       private def d0(in: JsonReader, default: Array[java.time.ZoneOffset]): Array[java.time.ZoneOffset] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneOffset](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.time.ZoneOffset](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneOffset(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.time.ZoneOffset](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[java.time.ZoneOffset], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zoneOffsetArrayCodec: JsonCodec[Array[ZoneOffset]] = make[Array[ZoneOffset]](CodecMakerConfig())
[info]                                                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:33:80: Generated JSON codec for type 'Array[java.time.ZoneId]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[java.time.ZoneId]] {
[info]       def nullValue: Array[java.time.ZoneId] = v0;
[info]       def decode(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = d0(in, default);
[info]       def encode(x: Array[java.time.ZoneId], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[java.time.ZoneId] = new Array[java.time.ZoneId](0);
[info]       private def d0(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneId](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.time.ZoneId](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneId(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.time.ZoneId](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[java.time.ZoneId], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zoneIdArrayCodec: JsonCodec[Array[ZoneId]] = make[Array[ZoneId]](CodecMakerConfig())
[info]                                                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:34:78: Generated JSON codec for type 'Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]] {
[info]       def nullValue: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = v0;
[info]       def decode(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = d0(in, default);
[info]       def encode(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](0);
[info]       private def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Suit): com.github.plokhotnyuk.jsoniter_scala.macros.Suit = {
[info]         val v = in.readString();
[info]         if (v.eq(null))
[info]           default
[info]         else
[info]           try {
[info]             Suit.valueOf(v)
[info]           } catch {
[info]             case ((_): IllegalArgumentException) => in.enumValueError(v)
[info]           }
[info]       };
[info]       private def d0(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, d1(in, null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Suit, out: JsonWriter): Unit = out.writeVal(if (x.ne(null))
[info]         x.name
[info]       else
[info]         null);
[info]       private def e0(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               e1(x(i), out);
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val javaEnumArrayCodec: JsonCodec[Array[Suit]] = make[Array[Suit]](CodecMakerConfig())
[info]                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:35:82: Generated JSON codec for type 'Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]] {
[info]       def nullValue: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = v0;
[info]       def decode(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = d0(in, default);
[info]       def encode(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](0);
[info]       private def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value): com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value = if (in.isNextToken('\"'))
[info]         {
[info]           in.rollbackToken();
[info]           val len = in.readStringAsCharBuf();
[info]           SuitEnum.values.iterator.find(((e) => in.isCharBufEqualsTo(len, e.toString))).getOrElse(in.enumValueError(len))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '\"');
[info]       private def d0(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, d1(in, null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value, out: JsonWriter): Unit = out.writeVal(if (x.ne(null))
[info]         x.toString
[info]       else
[info]         null);
[info]       private def e0(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               e1(x(i), out);
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val enumArrayCodec: JsonCodec[Array[SuitEnum]] = make[Array[SuitEnum]](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:36:71: Generated JSON codec for type 'Array[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[Int]] {
[info]       def nullValue: Array[Int] = v0;
[info]       def decode(in: JsonReader, default: Array[Int]): Array[Int] = d0(in, default);
[info]       def encode(x: Array[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Int] = new Array[Int](0);
[info]       private def d0(in: JsonReader, default: Array[Int]): Array[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Int](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Int](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInt());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Int](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[Int], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intArrayCodec: JsonCodec[Array[Int]] = make[Array[Int]](CodecMakerConfig())
[info]                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:37:77: Generated JSON codec for type 'Array[Short]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[Short]] {
[info]       def nullValue: Array[Short] = v0;
[info]       def decode(in: JsonReader, default: Array[Short]): Array[Short] = d0(in, default);
[info]       def encode(x: Array[Short], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Short] = new Array[Short](0);
[info]       private def d0(in: JsonReader, default: Array[Short]): Array[Short] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Short](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Short](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readShort());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Short](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[Short], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val shortArrayCodec: JsonCodec[Array[Short]] = make[Array[Short]](CodecMakerConfig())
[info]                                                                             ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:38:74: Generated JSON codec for type 'Array[Long]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[Long]] {
[info]       def nullValue: Array[Long] = v0;
[info]       def decode(in: JsonReader, default: Array[Long]): Array[Long] = d0(in, default);
[info]       def encode(x: Array[Long], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Long] = new Array[Long](0);
[info]       private def d0(in: JsonReader, default: Array[Long]): Array[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Long](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLong());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Long](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[Long], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val longArrayCodec: JsonCodec[Array[Long]] = make[Array[Long]](CodecMakerConfig())
[info]                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:39:74: Generated JSON codec for type 'Array[java.util.UUID]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[java.util.UUID]] {
[info]       def nullValue: Array[java.util.UUID] = v0;
[info]       def decode(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = d0(in, default);
[info]       def encode(x: Array[java.util.UUID], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[java.util.UUID] = new Array[java.util.UUID](0);
[info]       private def d0(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.util.UUID](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.util.UUID](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readUUID(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.util.UUID](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[java.util.UUID], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val uuidArrayCodec: JsonCodec[Array[UUID]] = make[Array[UUID]](CodecMakerConfig())
[info]                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:40:70: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Iterables':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Iterables] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables): com.github.plokhotnyuk.jsoniter_scala.macros.Iterables = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.immutable.Vector[String]): scala.collection.immutable.Vector[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Vector.newBuilder[String];
[info]             do 
[info]               x.+=(JsoniterCodecs.this.stringCodec.decode(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d2(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Set.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d4(in: JsonReader, default: scala.collection.immutable.HashSet[Long]): scala.collection.immutable.HashSet[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = HashSet.newBuilder[Long];
[info]             do 
[info]               x.+=(in.readLong())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d3(in: JsonReader, default: List[scala.collection.immutable.HashSet[Long]]): List[scala.collection.immutable.HashSet[Long]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = List.newBuilder[scala.collection.immutable.HashSet[Long]];
[info]             do 
[info]               x.+=(d4(in, HashSet.empty[Long]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables): com.github.plokhotnyuk.jsoniter_scala.macros.Iterables = if (in.isNextToken('{'))
[info]         {
[info]           var _l: scala.collection.immutable.Vector[String] = Vector.empty[String];
[info]           var _s: scala.collection.immutable.Set[Int] = Set.empty[Int];
[info]           var _ls: List[scala.collection.immutable.HashSet[Long]] = List.empty[scala.collection.immutable.HashSet[Long]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       _l = d1(in, _l)
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       _s = d2(in, _s)
[info]                     else
[info]                       in.skip()
[info]                     case 3463 => if (in.isCharBufEqualsTo(l, "ls"))
[info]                       _ls = d3(in, _ls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Iterables(l = _l, s = _s, ls = _ls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.immutable.Vector[String], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             JsoniterCodecs.this.stringCodec.encode(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e4(x: scala.collection.immutable.HashSet[Long], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: List[scala.collection.immutable.HashSet[Long]], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e4(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.l;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("l");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.s;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("s");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.ls;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("ls");
[info]                 e3(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val iterablesCodec: JsonCodec[Iterables] = make[Iterables](CodecMakerConfig())
[info]                                                                      ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:41:55: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Maps':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Maps] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Maps = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Maps): com.github.plokhotnyuk.jsoniter_scala.macros.Maps = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.Maps, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.immutable.HashMap[String,Double]): scala.collection.immutable.HashMap[String,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = HashMap.empty[String, Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsString(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d3(in: JsonReader, default: scala.collection.immutable.HashMap[Long,Double]): scala.collection.immutable.HashMap[Long,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = HashMap.empty[Long, Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsLong(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]]): scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = Map.empty[Int, scala.collection.immutable.HashMap[Long,Double]];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), d3(in, HashMap.empty[Long, Double]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Maps): com.github.plokhotnyuk.jsoniter_scala.macros.Maps = if (in.isNextToken('{'))
[info]         {
[info]           var _m: scala.collection.immutable.HashMap[String,Double] = HashMap.empty[String, Double];
[info]           var _mm: scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]] = Map.empty[Int, scala.collection.immutable.HashMap[Long,Double]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 109 => if (in.isCharBufEqualsTo(l, "m"))
[info]                       _m = d1(in, _m)
[info]                     else
[info]                       in.skip()
[info]                     case 3488 => if (in.isCharBufEqualsTo(l, "mm"))
[info]                       _mm = d2(in, _mm)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Maps(m = _m, mm = _mm)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.immutable.HashMap[String,Double], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             out.writeVal(kv._2)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: scala.collection.immutable.HashMap[Long,Double], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             out.writeVal(kv._2)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             e3(kv._2, out)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Maps, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.m;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("m");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.mm;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("mm");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mapsCodec: JsonCodec[Maps] = make[Maps](CodecMakerConfig())
[info]                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:42:90: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("s", "i");
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _i: Int = 0;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = JsoniterCodecs.this.stringCodec.decode(in, _s);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         _i = in.readInt();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields(s = _s, i = _i)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("s");
[info]             JsoniterCodecs.this.stringCodec.encode(x.s, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("i");
[info]             out.writeVal(x.i)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val missingReqFieldCodec: JsonCodec[MissingReqFields] = make[MissingReqFields](CodecMakerConfig())
[info]                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:43:91: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables): com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[String]): scala.collection.mutable.ArrayBuffer[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               ArrayBuffer.empty[String];
[info]             do 
[info]               x.+=(JsoniterCodecs.this.stringCodec.decode(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d2(in: JsonReader, default: scala.collection.mutable.TreeSet[Int]): scala.collection.mutable.TreeSet[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               TreeSet.empty[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d4(in: JsonReader, default: scala.collection.mutable.Set[Long]): scala.collection.mutable.Set[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               Set.empty[Long];
[info]             do 
[info]               x.+=(in.readLong())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d3(in: JsonReader, default: scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]]): scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = ResizableArray.newBuilder[scala.collection.mutable.Set[Long]];
[info]             do 
[info]               x.+=(d4(in, Set.empty[Long]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables): com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables = if (in.isNextToken('{'))
[info]         {
[info]           var _l: scala.collection.mutable.ArrayBuffer[String] = ArrayBuffer.empty[String];
[info]           var _s: scala.collection.mutable.TreeSet[Int] = TreeSet.empty[Int];
[info]           var _ls: scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]] = ResizableArray.empty[scala.collection.mutable.Set[Long]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       _l = d1(in, _l)
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       _s = d2(in, _s)
[info]                     else
[info]                       in.skip()
[info]                     case 3463 => if (in.isCharBufEqualsTo(l, "ls"))
[info]                       _ls = d3(in, _ls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables(l = _l, s = _s, ls = _ls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.mutable.ArrayBuffer[String], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             JsoniterCodecs.this.stringCodec.encode(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: scala.collection.mutable.TreeSet[Int], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e4(x: scala.collection.mutable.Set[Long], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e4(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.l;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("l");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.s;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("s");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.ls;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("ls");
[info]                 e3(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableIterablesCodec: JsonCodec[MutableIterables] = make[MutableIterables](CodecMakerConfig())
[info]                                                                                           ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:44:76: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps): com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.mutable.HashMap[String,Double]): scala.collection.mutable.HashMap[String,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               HashMap.empty[String, Double];
[info]             do 
[info]               x.update(in.readKeyAsString(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d3(in: JsonReader, default: scala.collection.mutable.OpenHashMap[Long,Double]): scala.collection.mutable.OpenHashMap[Long,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               OpenHashMap.empty[Long, Double];
[info]             do 
[info]               x.update(in.readKeyAsLong(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]]): scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               Map.empty[Int, scala.collection.mutable.OpenHashMap[Long,Double]];
[info]             do 
[info]               x.update(in.readKeyAsInt(), d3(in, OpenHashMap.empty[Long, Double]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps): com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps = if (in.isNextToken('{'))
[info]         {
[info]           var _m: scala.collection.mutable.HashMap[String,Double] = HashMap.empty[String, Double];
[info]           var _mm: scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]] = Map.empty[Int, scala.collection.mutable.OpenHashMap[Long,Double]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 109 => if (in.isCharBufEqualsTo(l, "m"))
[info]                       _m = d1(in, _m)
[info]                     else
[info]                       in.skip()
[info]                     case 3488 => if (in.isCharBufEqualsTo(l, "mm"))
[info]                       _mm = d2(in, _mm)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps(m = _m, mm = _mm)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.mutable.HashMap[String,Double], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             out.writeVal(kv._2)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: scala.collection.mutable.OpenHashMap[Long,Double], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             out.writeVal(kv._2)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             e3(kv._2, out)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.m;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("m");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.mm;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("mm");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableMapsCodec: JsonCodec[MutableMaps] = make[MutableMaps](CodecMakerConfig())
[info]                                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:45:85: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps): com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.immutable.IntMap[Double]): scala.collection.immutable.IntMap[Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = IntMap.empty[Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d3(in: JsonReader, default: scala.collection.immutable.LongMap[Double]): scala.collection.immutable.LongMap[Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = LongMap.empty[Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsLong(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]]): scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               LongMap.empty[scala.collection.immutable.LongMap[Double]];
[info]             do 
[info]               x.update(in.readKeyAsLong(), d3(in, LongMap.empty[Double]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps): com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps = if (in.isNextToken('{'))
[info]         {
[info]           var _m: scala.collection.immutable.IntMap[Double] = IntMap.empty[Double];
[info]           var _mm: scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]] = LongMap.empty[scala.collection.immutable.LongMap[Double]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 109 => if (in.isCharBufEqualsTo(l, "m"))
[info]                       _m = d1(in, _m)
[info]                     else
[info]                       in.skip()
[info]                     case 3488 => if (in.isCharBufEqualsTo(l, "mm"))
[info]                       _mm = d2(in, _mm)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps(m = _m, mm = _mm)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.immutable.IntMap[Double], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             out.writeVal(kv._2)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: scala.collection.immutable.LongMap[Double], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             out.writeVal(kv._2)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             e3(kv._2, out)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.m;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("m");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.mm;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("mm");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intAndLongMapsCodec: JsonCodec[IntAndLongMaps] = make[IntAndLongMaps](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:46:73: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Primitives':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Primitives] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("b", "s", "i", "l", "bl", "ch", "dbl", "f");
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = if (in.isNextToken('{'))
[info]         {
[info]           var _b: Byte = ((0): Byte);
[info]           var _s: Short = ((0): Short);
[info]           var _i: Int = 0;
[info]           var _l: Long = 0L;
[info]           var _bl: Boolean = false;
[info]           var _ch: Char = '\u0000';
[info]           var _dbl: Double = 0.0;
[info]           var _f: Float = 0.0F;
[info]           var req0 = 255;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         _b = in.readByte();
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readShort();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         _i = in.readInt();
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         _l = in.readLong();
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3146 => if (in.isCharBufEqualsTo(l, "bl"))
[info]                       {
[info]                         _bl = in.readBoolean();
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3173 => if (in.isCharBufEqualsTo(l, "ch"))
[info]                       {
[info]                         _ch = in.readChar();
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 99246 => if (in.isCharBufEqualsTo(l, "dbl"))
[info]                       {
[info]                         _dbl = in.readDouble();
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102 => if (in.isCharBufEqualsTo(l, "f"))
[info]                       {
[info]                         _f = in.readFloat();
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.Primitives(b = _b, s = _s, i = _i, l = _l, bl = _bl, ch = _ch, dbl = _dbl, f = _f)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("b");
[info]             out.writeVal(x.b)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("s");
[info]             out.writeVal(x.s)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("i");
[info]             out.writeVal(x.i)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("l");
[info]             out.writeVal(x.l)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("bl");
[info]             out.writeVal(x.bl)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("ch");
[info]             out.writeVal(x.ch)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("dbl");
[info]             out.writeVal(x.dbl)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("f");
[info]             out.writeVal(x.f)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val primitivesCodec: JsonCodec[Primitives] = make[Primitives](CodecMakerConfig())
[info]                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:47:82: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("s", "l");
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _l: Long = 0L;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = JsoniterCodecs.this.stringCodec.decode(in, _s);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         _l = in.readLong();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields(s = _s, l = _l)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("s");
[info]             JsoniterCodecs.this.stringCodec.encode(x.s, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("l");
[info]             out.writeVal(x.l)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val extractFieldsCodec: JsonCodec[ExtractFields] = make[ExtractFields](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:48:60: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("a");
[info]       private val r1: Array[String] = Array("b");
[info]       private val r2: Array[String] = Array("l", "r");
[info]       private def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.A): com.github.plokhotnyuk.jsoniter_scala.macros.A = if (in.isNextToken('{'))
[info]         {
[info]           var _a: Int = 0;
[info]           var req0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 97 => if (in.isCharBufEqualsTo(l, "a"))
[info]                       {
[info]                         _a = in.readInt();
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.A(a = _a)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.B): com.github.plokhotnyuk.jsoniter_scala.macros.B = if (in.isNextToken('{'))
[info]         {
[info]           var _b: String = null;
[info]           var req0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         _b = JsoniterCodecs.this.stringCodec.decode(in, _b);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.B(b = _b)
[info]           else
[info]             in.requiredKeyError(r1, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.C): com.github.plokhotnyuk.jsoniter_scala.macros.C = if (in.isNextToken('{'))
[info]         {
[info]           var _l: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var _r: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         _l = JsoniterCodecs.this.adtCodec.decode(in, _l);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 114 => if (in.isCharBufEqualsTo(l, "r"))
[info]                       {
[info]                         _r = JsoniterCodecs.this.adtCodec.decode(in, _r);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.C(l = _l, r = _r)
[info]           else
[info]             in.requiredKeyError(r2, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           {
[info]             in.scanToKey("type");
[info]             val l = in.readStringAsCharBuf();
[info]             (in.charBufToHashCode(l): @switch) match {
[info]               case 65 => if (in.isCharBufEqualsTo(l, "A"))
[info]                 {
[info]                   in.rollbackToMark();
[info]                   d1(in, null)
[info]                 }
[info]               else
[info]                 in.discriminatorValueError("type")
[info]               case 66 => if (in.isCharBufEqualsTo(l, "B"))
[info]                 {
[info]                   in.rollbackToMark();
[info]                   d2(in, null)
[info]                 }
[info]               else
[info]                 in.discriminatorValueError("type")
[info]               case 67 => if (in.isCharBufEqualsTo(l, "C"))
[info]                 {
[info]                   in.rollbackToMark();
[info]                   d3(in, null)
[info]                 }
[info]               else
[info]                 in.discriminatorValueError("type")
[info]               case _ => in.discriminatorValueError("type")
[info]             }
[info]           }
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.A, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("type");
[info]             out.writeNonEscapedAsciiVal("A")
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("a");
[info]             out.writeVal(x.a)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.B, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("type");
[info]             out.writeNonEscapedAsciiVal("B")
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("b");
[info]             JsoniterCodecs.this.stringCodec.encode(x.b, out)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.C, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("type");
[info]             out.writeNonEscapedAsciiVal("C")
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("l");
[info]             JsoniterCodecs.this.adtCodec.encode(x.l, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("r");
[info]             JsoniterCodecs.this.adtCodec.encode(x.r, out)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.A)) => e1(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.B)) => e2(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.C)) => e3(x, out)
[info]         case null => out.writeNull()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val adtCodec: JsonCodec[AdtBase] = make[AdtBase](CodecMakerConfig())
[info]                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:49:61: Generated JSON codec for type 'String':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[String] {
[info]       def nullValue: String = null;
[info]       def decode(in: JsonReader, default: String): String = in.readString(default);
[info]       def encode(x: String, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val stringCodec: JsonCodec[String] = make[String](CodecMakerConfig())
[info]                                                             ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:50:84: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("status");
[info]       private val r1: Array[String] = Array("distance", "duration", "status");
[info]       private val r2: Array[String] = Array("text", "value");
[info]       private def d1(in: JsonReader, default: Seq[String]): Seq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[String];
[info]             do 
[info]               x.+=(JsoniterCodecs.this.stringCodec.decode(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d6(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Value): com.github.plokhotnyuk.jsoniter_scala.macros.Value = if (in.isNextToken('{'))
[info]         {
[info]           var _text: String = null;
[info]           var _value: Int = 0;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         _text = JsoniterCodecs.this.stringCodec.decode(in, _text);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 111972721 => if (in.isCharBufEqualsTo(l, "value"))
[info]                       {
[info]                         _value = in.readInt();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.Value(text = _text, value = _value)
[info]           else
[info]             in.requiredKeyError(r2, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Elements): com.github.plokhotnyuk.jsoniter_scala.macros.Elements = if (in.isNextToken('{'))
[info]         {
[info]           var _distance: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _duration: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _status: String = null;
[info]           var req0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 288459765 => if (in.isCharBufEqualsTo(l, "distance"))
[info]                       {
[info]                         _distance = d6(in, _distance);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1992012396 => if (in.isCharBufEqualsTo(l, "duration"))
[info]                       {
[info]                         _duration = d6(in, _duration);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         _status = JsoniterCodecs.this.stringCodec.decode(in, _status);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.Elements(distance = _distance, duration = _duration, status = _status)
[info]           else
[info]             in.requiredKeyError(r1, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d4(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Rows): com.github.plokhotnyuk.jsoniter_scala.macros.Rows = if (in.isNextToken('{'))
[info]         {
[info]           var _elements: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -8339209 => if (in.isCharBufEqualsTo(l, "elements"))
[info]                       _elements = d4(in, _elements)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Rows(elements = _elements)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]             do 
[info]               x.+=(d3(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = if (in.isNextToken('{'))
[info]         {
[info]           var _destination_addresses: Seq[String] = Seq.empty[String];
[info]           var _origin_addresses: Seq[String] = Seq.empty[String];
[info]           var _rows: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]           var _status: String = null;
[info]           var req0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 715423921 => if (in.isCharBufEqualsTo(l, "destination_addresses"))
[info]                       _destination_addresses = d1(in, _destination_addresses)
[info]                     else
[info]                       in.skip()
[info]                     case 1780936137 => if (in.isCharBufEqualsTo(l, "origin_addresses"))
[info]                       _origin_addresses = d1(in, _origin_addresses)
[info]                     else
[info]                       in.skip()
[info]                     case 3506649 => if (in.isCharBufEqualsTo(l, "rows"))
[info]                       _rows = d2(in, _rows)
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         _status = JsoniterCodecs.this.stringCodec.decode(in, _status);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix(destination_addresses = _destination_addresses, origin_addresses = _origin_addresses, rows = _rows, status = _status)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: Seq[String], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             JsoniterCodecs.this.stringCodec.encode(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e6(x: com.github.plokhotnyuk.jsoniter_scala.macros.Value, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("text");
[info]             JsoniterCodecs.this.stringCodec.encode(x.text, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("value");
[info]             out.writeVal(x.value)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.Elements, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("distance");
[info]             e6(x.distance, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("duration");
[info]             e6(x.duration, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("status");
[info]             JsoniterCodecs.this.stringCodec.encode(x.status, out)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e4(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e5(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.Rows, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.elements;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("elements");
[info]                 e4(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e3(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.destination_addresses;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("destination_addresses");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.origin_addresses;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("origin_addresses");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.rows;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("rows");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("status");
[info]             JsoniterCodecs.this.stringCodec.encode(x.status, out)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val googleMapsAPICodec: JsonCodec[DistanceMatrix] = make[DistanceMatrix](CodecMakerConfig())
[info]                                                                                    ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:51:73: Generated JSON codec for type 'Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]] {
[info]       def nullValue: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]       def decode(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = d0(in, default);
[info]       def encode(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "user", "retweeted_status", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "possibly_sensitive", "lang");
[info]       private val r1: Array[String] = Array("screen_name", "name", "id", "id_str");
[info]       private val r2: Array[String] = Array("url", "expanded_url", "display_url");
[info]       private val r3: Array[String] = Array("id", "id_str", "name", "screen_name", "location", "description", "url", "entities", "protected", "followers_count", "friends_count", "listed_count", "created_at", "favourites_count", "utc_offset", "time_zone", "geo_enabled", "verified", "statuses_count", "lang", "contributors_enabled", "is_translator", "is_translation_enabled", "profile_background_color", "profile_background_image_url", "profile_background_image_url_https", "profile_background_tile", "profile_image_url", "profile_image_url_https", "profile_banner_url", "profile_link_color", "profile_sidebar_border_color", "profile_sidebar_fill_color", "profile_text_color", "profile_use_background_image", "has_extended_profile", "default_profile", "default_profile_image", "following", "follow_request_sent", "notifications", "translator_type");
[info]       private val r4: Array[String] = Array("url", "description");
[info]       private val r5: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "user", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "possibly_sensitive", "lang");
[info]       private def d3(in: JsonReader, default: Seq[String]): Seq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[String];
[info]             do 
[info]               x.+=(JsoniterCodecs.this.stringCodec.decode(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d6(in: JsonReader, default: Seq[Int]): Seq[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions): com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions = if (in.isNextToken('{'))
[info]         {
[info]           var _screen_name: String = null;
[info]           var _name: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var req0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         _screen_name = JsoniterCodecs.this.stringCodec.decode(in, _screen_name);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         _name = JsoniterCodecs.this.stringCodec.decode(in, _name);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = JsoniterCodecs.this.stringCodec.decode(in, _id_str);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       _indices = d6(in, _indices)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions(screen_name = _screen_name, name = _name, id = _id, id_str = _id_str, indices = _indices)
[info]           else
[info]             in.requiredKeyError(r1, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d4(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d8(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Urls): com.github.plokhotnyuk.jsoniter_scala.macros.Urls = if (in.isNextToken('{'))
[info]         {
[info]           var _url: String = null;
[info]           var _expanded_url: String = null;
[info]           var _display_url: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var req0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         _url = JsoniterCodecs.this.stringCodec.decode(in, _url);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -518939415 => if (in.isCharBufEqualsTo(l, "expanded_url"))
[info]                       {
[info]                         _expanded_url = JsoniterCodecs.this.stringCodec.decode(in, _expanded_url);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1714674802 => if (in.isCharBufEqualsTo(l, "display_url"))
[info]                       {
[info]                         _display_url = JsoniterCodecs.this.stringCodec.decode(in, _display_url);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       _indices = d6(in, _indices)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.Urls(url = _url, expanded_url = _expanded_url, display_url = _display_url, indices = _indices)
[info]           else
[info]             in.requiredKeyError(r2, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d7(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]             do 
[info]               x.+=(d8(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Entities): com.github.plokhotnyuk.jsoniter_scala.macros.Entities = if (in.isNextToken('{'))
[info]         {
[info]           var _hashtags: Seq[String] = Seq.empty[String];
[info]           var _symbols: Seq[String] = Seq.empty[String];
[info]           var _user_mentions: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 149143079 => if (in.isCharBufEqualsTo(l, "hashtags"))
[info]                       _hashtags = d3(in, _hashtags)
[info]                     else
[info]                       in.skip()
[info]                     case -1743438373 => if (in.isCharBufEqualsTo(l, "symbols"))
[info]                       _symbols = d3(in, _symbols)
[info]                     else
[info]                       in.skip()
[info]                     case -553518659 => if (in.isCharBufEqualsTo(l, "user_mentions"))
[info]                       _user_mentions = d4(in, _user_mentions)
[info]                     else
[info]                       in.skip()
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       _urls = d7(in, _urls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Entities(hashtags = _hashtags, symbols = _symbols, user_mentions = _user_mentions, urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d11(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Url): com.github.plokhotnyuk.jsoniter_scala.macros.Url = if (in.isNextToken('{'))
[info]         {
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       _urls = d7(in, _urls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Url(urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d10(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities): com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = if (in.isNextToken('{'))
[info]         {
[info]           var _url: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var _description: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         _url = d11(in, _url);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         _description = d11(in, _description);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities(url = _url, description = _description)
[info]           else
[info]             in.requiredKeyError(r4, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d9(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.User): com.github.plokhotnyuk.jsoniter_scala.macros.User = if (in.isNextToken('{'))
[info]         {
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _name: String = null;
[info]           var _screen_name: String = null;
[info]           var _location: String = null;
[info]           var _description: String = null;
[info]           var _url: String = null;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = null;
[info]           var _protected: Boolean = false;
[info]           var _followers_count: Int = 0;
[info]           var _friends_count: Int = 0;
[info]           var _listed_count: Int = 0;
[info]           var _created_at: String = null;
[info]           var _favourites_count: Int = 0;
[info]           var _utc_offset: Int = 0;
[info]           var _time_zone: String = null;
[info]           var _geo_enabled: Boolean = false;
[info]           var _verified: Boolean = false;
[info]           var _statuses_count: Int = 0;
[info]           var _lang: String = null;
[info]           var _contributors_enabled: Boolean = false;
[info]           var _is_translator: Boolean = false;
[info]           var _is_translation_enabled: Boolean = false;
[info]           var _profile_background_color: String = null;
[info]           var _profile_background_image_url: String = null;
[info]           var _profile_background_image_url_https: String = null;
[info]           var _profile_background_tile: Boolean = false;
[info]           var _profile_image_url: String = null;
[info]           var _profile_image_url_https: String = null;
[info]           var _profile_banner_url: String = null;
[info]           var _profile_link_color: String = null;
[info]           var _profile_sidebar_border_color: String = null;
[info]           var _profile_sidebar_fill_color: String = null;
[info]           var _profile_text_color: String = null;
[info]           var _profile_use_background_image: Boolean = false;
[info]           var _has_extended_profile: Boolean = false;
[info]           var _default_profile: Boolean = false;
[info]           var _default_profile_image: Boolean = false;
[info]           var _following: Boolean = false;
[info]           var _follow_request_sent: Boolean = false;
[info]           var _notifications: Boolean = false;
[info]           var _translator_type: String = null;
[info]           var req0 = -1;
[info]           var req1 = 1023;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = JsoniterCodecs.this.stringCodec.decode(in, _id_str);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         _name = JsoniterCodecs.this.stringCodec.decode(in, _name);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         _screen_name = JsoniterCodecs.this.stringCodec.decode(in, _screen_name);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1901043637 => if (in.isCharBufEqualsTo(l, "location"))
[info]                       {
[info]                         _location = JsoniterCodecs.this.stringCodec.decode(in, _location);
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         _description = JsoniterCodecs.this.stringCodec.decode(in, _description);
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         _url = JsoniterCodecs.this.stringCodec.decode(in, _url);
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         _entities = d10(in, _entities);
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -608539730 => if (in.isCharBufEqualsTo(l, "protected"))
[info]                       {
[info]                         _protected = in.readBoolean();
[info]                         req0.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -460163995 => if (in.isCharBufEqualsTo(l, "followers_count"))
[info]                       {
[info]                         _followers_count = in.readInt();
[info]                         req0.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1666926107 => if (in.isCharBufEqualsTo(l, "friends_count"))
[info]                       {
[info]                         _friends_count = in.readInt();
[info]                         req0.&=(-1025)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1974943731 => if (in.isCharBufEqualsTo(l, "listed_count"))
[info]                       {
[info]                         _listed_count = in.readInt();
[info]                         req0.&=(-2049)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         _created_at = JsoniterCodecs.this.stringCodec.decode(in, _created_at);
[info]                         req0.&=(-4097)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 226316666 => if (in.isCharBufEqualsTo(l, "favourites_count"))
[info]                       {
[info]                         _favourites_count = in.readInt();
[info]                         req0.&=(-8193)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1699658638 => if (in.isCharBufEqualsTo(l, "utc_offset"))
[info]                       {
[info]                         _utc_offset = in.readInt();
[info]                         req0.&=(-16385)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 36848094 => if (in.isCharBufEqualsTo(l, "time_zone"))
[info]                       {
[info]                         _time_zone = JsoniterCodecs.this.stringCodec.decode(in, _time_zone);
[info]                         req0.&=(-32769)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1085743021 => if (in.isCharBufEqualsTo(l, "geo_enabled"))
[info]                       {
[info]                         _geo_enabled = in.readBoolean();
[info]                         req0.&=(-65537)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1994383672 => if (in.isCharBufEqualsTo(l, "verified"))
[info]                       {
[info]                         _verified = in.readBoolean();
[info]                         req0.&=(-131073)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1824078800 => if (in.isCharBufEqualsTo(l, "statuses_count"))
[info]                       {
[info]                         _statuses_count = in.readInt();
[info]                         req0.&=(-262145)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         _lang = JsoniterCodecs.this.stringCodec.decode(in, _lang);
[info]                         req0.&=(-524289)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 647263482 => if (in.isCharBufEqualsTo(l, "contributors_enabled"))
[info]                       {
[info]                         _contributors_enabled = in.readBoolean();
[info]                         req0.&=(-1048577)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 583435343 => if (in.isCharBufEqualsTo(l, "is_translator"))
[info]                       {
[info]                         _is_translator = in.readBoolean();
[info]                         req0.&=(-2097153)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1690715422 => if (in.isCharBufEqualsTo(l, "is_translation_enabled"))
[info]                       {
[info]                         _is_translation_enabled = in.readBoolean();
[info]                         req0.&=(-4194305)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1592986856 => if (in.isCharBufEqualsTo(l, "profile_background_color"))
[info]                       {
[info]                         _profile_background_color = JsoniterCodecs.this.stringCodec.decode(in, _profile_background_color);
[info]                         req0.&=(-8388609)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1189803120 => if (in.isCharBufEqualsTo(l, "profile_background_image_url"))
[info]                       {
[info]                         _profile_background_image_url = JsoniterCodecs.this.stringCodec.decode(in, _profile_background_image_url);
[info]                         req0.&=(-16777217)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 594447228 => if (in.isCharBufEqualsTo(l, "profile_background_image_url_https"))
[info]                       {
[info]                         _profile_background_image_url_https = JsoniterCodecs.this.stringCodec.decode(in, _profile_background_image_url_https);
[info]                         req0.&=(-33554433)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1021718665 => if (in.isCharBufEqualsTo(l, "profile_background_tile"))
[info]                       {
[info]                         _profile_background_tile = in.readBoolean();
[info]                         req0.&=(-67108865)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -174080651 => if (in.isCharBufEqualsTo(l, "profile_image_url"))
[info]                       {
[info]                         _profile_image_url = JsoniterCodecs.this.stringCodec.decode(in, _profile_image_url);
[info]                         req0.&=(-134217729)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -782008927 => if (in.isCharBufEqualsTo(l, "profile_image_url_https"))
[info]                       {
[info]                         _profile_image_url_https = JsoniterCodecs.this.stringCodec.decode(in, _profile_image_url_https);
[info]                         req0.&=(-268435457)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -690137550 => if (in.isCharBufEqualsTo(l, "profile_banner_url"))
[info]                       {
[info]                         _profile_banner_url = JsoniterCodecs.this.stringCodec.decode(in, _profile_banner_url);
[info]                         req0.&=(-536870913)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1512257332 => if (in.isCharBufEqualsTo(l, "profile_link_color"))
[info]                       {
[info]                         _profile_link_color = JsoniterCodecs.this.stringCodec.decode(in, _profile_link_color);
[info]                         req0.&=(-1073741825)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1412739479 => if (in.isCharBufEqualsTo(l, "profile_sidebar_border_color"))
[info]                       {
[info]                         _profile_sidebar_border_color = JsoniterCodecs.this.stringCodec.decode(in, _profile_sidebar_border_color);
[info]                         req0.&=(2147483647)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 486184128 => if (in.isCharBufEqualsTo(l, "profile_sidebar_fill_color"))
[info]                       {
[info]                         _profile_sidebar_fill_color = JsoniterCodecs.this.stringCodec.decode(in, _profile_sidebar_fill_color);
[info]                         req1.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1774134745 => if (in.isCharBufEqualsTo(l, "profile_text_color"))
[info]                       {
[info]                         _profile_text_color = JsoniterCodecs.this.stringCodec.decode(in, _profile_text_color);
[info]                         req1.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -101767272 => if (in.isCharBufEqualsTo(l, "profile_use_background_image"))
[info]                       {
[info]                         _profile_use_background_image = in.readBoolean();
[info]                         req1.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 284519336 => if (in.isCharBufEqualsTo(l, "has_extended_profile"))
[info]                       {
[info]                         _has_extended_profile = in.readBoolean();
[info]                         req1.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -312724053 => if (in.isCharBufEqualsTo(l, "default_profile"))
[info]                       {
[info]                         _default_profile = in.readBoolean();
[info]                         req1.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 545330631 => if (in.isCharBufEqualsTo(l, "default_profile_image"))
[info]                       {
[info]                         _default_profile_image = in.readBoolean();
[info]                         req1.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 765915793 => if (in.isCharBufEqualsTo(l, "following"))
[info]                       {
[info]                         _following = in.readBoolean();
[info]                         req1.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 585125142 => if (in.isCharBufEqualsTo(l, "follow_request_sent"))
[info]                       {
[info]                         _follow_request_sent = in.readBoolean();
[info]                         req1.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1272354024 => if (in.isCharBufEqualsTo(l, "notifications"))
[info]                       {
[info]                         _notifications = in.readBoolean();
[info]                         req1.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -475640257 => if (in.isCharBufEqualsTo(l, "translator_type"))
[info]                       {
[info]                         _translator_type = JsoniterCodecs.this.stringCodec.decode(in, _translator_type);
[info]                         req1.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0).&&(req1.==(0)))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.User(id = _id, id_str = _id_str, name = _name, screen_name = _screen_name, location = _location, description = _description, url = _url, entities = _entities, `protected` = _protected, followers_count = _followers_count, friends_count = _friends_count, listed_count = _listed_count, created_at = _created_at, favourites_count = _favourites_count, utc_offset = _utc_offset, time_zone = _time_zone, geo_enabled = _geo_enabled, verified = _verified, statuses_count = _statuses_count, lang = _lang, contributors_enabled = _contributors_enabled, is_translator = _is_translator, is_translation_enabled = _is_translation_enabled, profile_background_color = _profile_background_color, profile_background_image_url = _profile_background_image_url, profile_background_image_url_https = _profile_background_image_url_https, profile_background_tile = _profile_background_tile, profile_image_url = _profile_image_url, profile_image_url_https = _profile_image_url_https, profile_banner_url = _profile_banner_url, profile_link_color = _profile_link_color, profile_sidebar_border_color = _profile_sidebar_border_color, profile_sidebar_fill_color = _profile_sidebar_fill_color, profile_text_color = _profile_text_color, profile_use_background_image = _profile_use_background_image, has_extended_profile = _has_extended_profile, default_profile = _default_profile, default_profile_image = _default_profile_image, following = _following, follow_request_sent = _follow_request_sent, notifications = _notifications, translator_type = _translator_type)
[info]           else
[info]             in.requiredKeyError(r3, Array(req0, req1))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d12(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus): com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var req0 = 32767;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         _created_at = JsoniterCodecs.this.stringCodec.decode(in, _created_at);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = JsoniterCodecs.this.stringCodec.decode(in, _id_str);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         _text = JsoniterCodecs.this.stringCodec.decode(in, _text);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         _truncated = in.readBoolean();
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         _entities = d2(in, _entities);
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         _source = JsoniterCodecs.this.stringCodec.decode(in, _source);
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       _in_reply_to_status_id = Option(JsoniterCodecs.this.stringCodec.decode(in, null))
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       _in_reply_to_status_id_str = Option(JsoniterCodecs.this.stringCodec.decode(in, null))
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       _in_reply_to_user_id = Option(JsoniterCodecs.this.stringCodec.decode(in, null))
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       _in_reply_to_user_id_str = Option(JsoniterCodecs.this.stringCodec.decode(in, null))
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       _in_reply_to_screen_name = Option(JsoniterCodecs.this.stringCodec.decode(in, null))
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         _user = d9(in, _user);
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       _geo = Option(JsoniterCodecs.this.stringCodec.decode(in, null))
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       _coordinates = Option(JsoniterCodecs.this.stringCodec.decode(in, null))
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       _place = Option(JsoniterCodecs.this.stringCodec.decode(in, null))
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       _contributors = Option(JsoniterCodecs.this.stringCodec.decode(in, null))
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         _is_quote_status = in.readBoolean();
[info]                         req0.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         _retweet_count = in.readInt();
[info]                         req0.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         _favorite_count = in.readInt();
[info]                         req0.&=(-1025)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         _favorited = in.readBoolean();
[info]                         req0.&=(-2049)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         _retweeted = in.readBoolean();
[info]                         req0.&=(-4097)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         _possibly_sensitive = in.readBoolean();
[info]                         req0.&=(-8193)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         _lang = JsoniterCodecs.this.stringCodec.decode(in, _lang);
[info]                         req0.&=(-16385)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]           else
[info]             in.requiredKeyError(r5, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet): com.github.plokhotnyuk.jsoniter_scala.macros.Tweet = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _retweeted_status: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = null;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var req0 = 65535;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         _created_at = JsoniterCodecs.this.stringCodec.decode(in, _created_at);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = JsoniterCodecs.this.stringCodec.decode(in, _id_str);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         _text = JsoniterCodecs.this.stringCodec.decode(in, _text);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         _truncated = in.readBoolean();
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         _entities = d2(in, _entities);
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         _source = JsoniterCodecs.this.stringCodec.decode(in, _source);
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       _in_reply_to_status_id = Option(JsoniterCodecs.this.stringCodec.decode(in, null))
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       _in_reply_to_status_id_str = Option(JsoniterCodecs.this.stringCodec.decode(in, null))
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       _in_reply_to_user_id = Option(JsoniterCodecs.this.stringCodec.decode(in, null))
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       _in_reply_to_user_id_str = Option(JsoniterCodecs.this.stringCodec.decode(in, null))
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       _in_reply_to_screen_name = Option(JsoniterCodecs.this.stringCodec.decode(in, null))
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         _user = d9(in, _user);
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       _geo = Option(JsoniterCodecs.this.stringCodec.decode(in, null))
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       _coordinates = Option(JsoniterCodecs.this.stringCodec.decode(in, null))
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       _place = Option(JsoniterCodecs.this.stringCodec.decode(in, null))
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       _contributors = Option(JsoniterCodecs.this.stringCodec.decode(in, null))
[info]                     else
[info]                       in.skip()
[info]                     case 364396852 => if (in.isCharBufEqualsTo(l, "retweeted_status"))
[info]                       {
[info]                         _retweeted_status = d12(in, _retweeted_status);
[info]                         req0.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         _is_quote_status = in.readBoolean();
[info]                         req0.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         _retweet_count = in.readInt();
[info]                         req0.&=(-1025)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         _favorite_count = in.readInt();
[info]                         req0.&=(-2049)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         _favorited = in.readBoolean();
[info]                         req0.&=(-4097)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         _retweeted = in.readBoolean();
[info]                         req0.&=(-8193)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         _possibly_sensitive = in.readBoolean();
[info]                         req0.&=(-16385)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         _lang = JsoniterCodecs.this.stringCodec.decode(in, _lang);
[info]                         req0.&=(-32769)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.Tweet(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, retweeted_status = _retweeted_status, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]             do 
[info]               x.+=(d1(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e3(x: Seq[String], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             JsoniterCodecs.this.stringCodec.encode(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e6(x: Seq[Int], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("screen_name");
[info]             JsoniterCodecs.this.stringCodec.encode(x.screen_name, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("name");
[info]             JsoniterCodecs.this.stringCodec.encode(x.name, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id");
[info]             out.writeVal(x.id)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id_str");
[info]             JsoniterCodecs.this.stringCodec.encode(x.id_str, out)
[info]           };
[info]           {
[info]             val v = x.indices;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("indices");
[info]                 e6(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e4(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e5(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e8(x: com.github.plokhotnyuk.jsoniter_scala.macros.Urls, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("url");
[info]             JsoniterCodecs.this.stringCodec.encode(x.url, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("expanded_url");
[info]             JsoniterCodecs.this.stringCodec.encode(x.expanded_url, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("display_url");
[info]             JsoniterCodecs.this.stringCodec.encode(x.display_url, out)
[info]           };
[info]           {
[info]             val v = x.indices;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("indices");
[info]                 e6(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e7(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e8(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.Entities, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.hashtags;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("hashtags");
[info]                 e3(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.symbols;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("symbols");
[info]                 e3(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.user_mentions;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("user_mentions");
[info]                 e4(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.urls;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("urls");
[info]                 e7(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e11(x: com.github.plokhotnyuk.jsoniter_scala.macros.Url, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.urls;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("urls");
[info]                 e7(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e10(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("url");
[info]             e11(x.url, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("description");
[info]             e11(x.description, out)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e9(x: com.github.plokhotnyuk.jsoniter_scala.macros.User, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("id");
[info]             out.writeVal(x.id)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id_str");
[info]             JsoniterCodecs.this.stringCodec.encode(x.id_str, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("name");
[info]             JsoniterCodecs.this.stringCodec.encode(x.name, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("screen_name");
[info]             JsoniterCodecs.this.stringCodec.encode(x.screen_name, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("location");
[info]             JsoniterCodecs.this.stringCodec.encode(x.location, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("description");
[info]             JsoniterCodecs.this.stringCodec.encode(x.description, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("url");
[info]             JsoniterCodecs.this.stringCodec.encode(x.url, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("entities");
[info]             e10(x.entities, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("protected");
[info]             out.writeVal(x.`protected`)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("followers_count");
[info]             out.writeVal(x.followers_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("friends_count");
[info]             out.writeVal(x.friends_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("listed_count");
[info]             out.writeVal(x.listed_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("created_at");
[info]             JsoniterCodecs.this.stringCodec.encode(x.created_at, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("favourites_count");
[info]             out.writeVal(x.favourites_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("utc_offset");
[info]             out.writeVal(x.utc_offset)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("time_zone");
[info]             JsoniterCodecs.this.stringCodec.encode(x.time_zone, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("geo_enabled");
[info]             out.writeVal(x.geo_enabled)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("verified");
[info]             out.writeVal(x.verified)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("statuses_count");
[info]             out.writeVal(x.statuses_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("lang");
[info]             JsoniterCodecs.this.stringCodec.encode(x.lang, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("contributors_enabled");
[info]             out.writeVal(x.contributors_enabled)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("is_translator");
[info]             out.writeVal(x.is_translator)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("is_translation_enabled");
[info]             out.writeVal(x.is_translation_enabled)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_background_color");
[info]             JsoniterCodecs.this.stringCodec.encode(x.profile_background_color, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_background_image_url");
[info]             JsoniterCodecs.this.stringCodec.encode(x.profile_background_image_url, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_background_image_url_https");
[info]             JsoniterCodecs.this.stringCodec.encode(x.profile_background_image_url_https, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_background_tile");
[info]             out.writeVal(x.profile_background_tile)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_image_url");
[info]             JsoniterCodecs.this.stringCodec.encode(x.profile_image_url, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_image_url_https");
[info]             JsoniterCodecs.this.stringCodec.encode(x.profile_image_url_https, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_banner_url");
[info]             JsoniterCodecs.this.stringCodec.encode(x.profile_banner_url, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_link_color");
[info]             JsoniterCodecs.this.stringCodec.encode(x.profile_link_color, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_sidebar_border_color");
[info]             JsoniterCodecs.this.stringCodec.encode(x.profile_sidebar_border_color, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_sidebar_fill_color");
[info]             JsoniterCodecs.this.stringCodec.encode(x.profile_sidebar_fill_color, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_text_color");
[info]             JsoniterCodecs.this.stringCodec.encode(x.profile_text_color, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_use_background_image");
[info]             out.writeVal(x.profile_use_background_image)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("has_extended_profile");
[info]             out.writeVal(x.has_extended_profile)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("default_profile");
[info]             out.writeVal(x.default_profile)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("default_profile_image");
[info]             out.writeVal(x.default_profile_image)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("following");
[info]             out.writeVal(x.following)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("follow_request_sent");
[info]             out.writeVal(x.follow_request_sent)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("notifications");
[info]             out.writeVal(x.notifications)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("translator_type");
[info]             JsoniterCodecs.this.stringCodec.encode(x.translator_type, out)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e12(x: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("created_at");
[info]             JsoniterCodecs.this.stringCodec.encode(x.created_at, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id");
[info]             out.writeVal(x.id)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id_str");
[info]             JsoniterCodecs.this.stringCodec.encode(x.id_str, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("text");
[info]             JsoniterCodecs.this.stringCodec.encode(x.text, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("truncated");
[info]             out.writeVal(x.truncated)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("entities");
[info]             e2(x.entities, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("source");
[info]             JsoniterCodecs.this.stringCodec.encode(x.source, out)
[info]           };
[info]           {
[info]             val v = x.in_reply_to_status_id;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]                 JsoniterCodecs.this.stringCodec.encode(v.get, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_status_id_str;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]                 JsoniterCodecs.this.stringCodec.encode(v.get, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_user_id;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]                 JsoniterCodecs.this.stringCodec.encode(v.get, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_user_id_str;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]                 JsoniterCodecs.this.stringCodec.encode(v.get, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_screen_name;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]                 JsoniterCodecs.this.stringCodec.encode(v.get, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("user");
[info]             e9(x.user, out)
[info]           };
[info]           {
[info]             val v = x.geo;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("geo");
[info]                 JsoniterCodecs.this.stringCodec.encode(v.get, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.coordinates;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("coordinates");
[info]                 JsoniterCodecs.this.stringCodec.encode(v.get, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.place;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("place");
[info]                 JsoniterCodecs.this.stringCodec.encode(v.get, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.contributors;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("contributors");
[info]                 JsoniterCodecs.this.stringCodec.encode(v.get, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("is_quote_status");
[info]             out.writeVal(x.is_quote_status)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("retweet_count");
[info]             out.writeVal(x.retweet_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("favorite_count");
[info]             out.writeVal(x.favorite_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("favorited");
[info]             out.writeVal(x.favorited)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("retweeted");
[info]             out.writeVal(x.retweeted)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]             out.writeVal(x.possibly_sensitive)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("lang");
[info]             JsoniterCodecs.this.stringCodec.encode(x.lang, out)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("created_at");
[info]             JsoniterCodecs.this.stringCodec.encode(x.created_at, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id");
[info]             out.writeVal(x.id)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id_str");
[info]             JsoniterCodecs.this.stringCodec.encode(x.id_str, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("text");
[info]             JsoniterCodecs.this.stringCodec.encode(x.text, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("truncated");
[info]             out.writeVal(x.truncated)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("entities");
[info]             e2(x.entities, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("source");
[info]             JsoniterCodecs.this.stringCodec.encode(x.source, out)
[info]           };
[info]           {
[info]             val v = x.in_reply_to_status_id;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]                 JsoniterCodecs.this.stringCodec.encode(v.get, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_status_id_str;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]                 JsoniterCodecs.this.stringCodec.encode(v.get, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_user_id;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]                 JsoniterCodecs.this.stringCodec.encode(v.get, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_user_id_str;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]                 JsoniterCodecs.this.stringCodec.encode(v.get, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_screen_name;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]                 JsoniterCodecs.this.stringCodec.encode(v.get, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("user");
[info]             e9(x.user, out)
[info]           };
[info]           {
[info]             val v = x.geo;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("geo");
[info]                 JsoniterCodecs.this.stringCodec.encode(v.get, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.coordinates;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("coordinates");
[info]                 JsoniterCodecs.this.stringCodec.encode(v.get, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.place;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("place");
[info]                 JsoniterCodecs.this.stringCodec.encode(v.get, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.contributors;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("contributors");
[info]                 JsoniterCodecs.this.stringCodec.encode(v.get, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("retweeted_status");
[info]             e12(x.retweeted_status, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("is_quote_status");
[info]             out.writeVal(x.is_quote_status)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("retweet_count");
[info]             out.writeVal(x.retweet_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("favorite_count");
[info]             out.writeVal(x.favorite_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("favorited");
[info]             out.writeVal(x.favorited)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("retweeted");
[info]             out.writeVal(x.retweeted)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]             out.writeVal(x.possibly_sensitive)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("lang");
[info]             JsoniterCodecs.this.stringCodec.encode(x.lang, out)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e1(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val twitterAPICodec: JsonCodec[Seq[Tweet]] = make[Seq[Tweet]](CodecMakerConfig())
[info]                                                                         ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:15:18: local val v1 in value arraysFormat is never used
[warn]     implicit val v1: Format[Array[BigInt]] = Format(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:21:18: local val v1 in value bitSetsFormat is never used
[warn]     implicit val v1: Reads[BitSet] = Reads[BitSet](js => JsSuccess(BitSet(js.as[Array[Int]]: _*)))
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:22:18: local val v2 in value bitSetsFormat is never used
[warn]     implicit val v2: Reads[mutable.BitSet] =
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:29:18: local val v1 in value mapsFormat is never used
[warn]     implicit val v1: OFormat[HashMap[String, Double]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:32:18: local val v2 in value mapsFormat is never used
[warn]     implicit val v2: OFormat[Map[Int, HashMap[Long, Double]]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:44:18: local val v1 in value mutableMapsFormat is never used
[warn]     implicit val v1: OFormat[mutable.HashMap[String, Double]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:47:18: local val v2 in value mutableMapsFormat is never used
[warn]     implicit val v2: OFormat[mutable.Map[Int, mutable.OpenHashMap[Long, Double]]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:64:18: local val v1 in value intAndLongMapsFormat is never used
[warn]     implicit val v1: OFormat[IntMap[Double]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:69:18: local val v2 in value intAndLongMapsFormat is never used
[warn]     implicit val v2: OFormat[mutable.LongMap[LongMap[Double]]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:81:18: local val v1 in value primitivesFormat is never used
[warn]     implicit val v1: Format[Char] = Format(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:88:23: local val v1 in value adtFormat is never used
[warn]     implicit lazy val v1: OFormat[A] = Json.format[A]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:89:23: local val v2 in value adtFormat is never used
[warn]     implicit lazy val v2: OFormat[B] = Json.format[B]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:90:23: local val v3 in value adtFormat is never used
[warn]     implicit lazy val v3: OFormat[C] = Json.format[C]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:95:18: local val v1 in value googleMapsAPIFormat is never used
[warn]     implicit val v1: OFormat[Value] = Json.format[Value]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:96:18: local val v2 in value googleMapsAPIFormat is never used
[warn]     implicit val v2: OFormat[Elements] = Json.format[Elements]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:97:18: local val v3 in value googleMapsAPIFormat is never used
[warn]     implicit val v3: OFormat[Rows] = Json.format[Rows]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:101:18: local val v1 in value twitterAPIFormat is never used
[warn]     implicit val v1: OFormat[Urls] = Json.format[Urls]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:102:18: local val v2 in value twitterAPIFormat is never used
[warn]     implicit val v2: OFormat[Url] = Json.format[Url]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:103:18: local val v3 in value twitterAPIFormat is never used
[warn]     implicit val v3: OFormat[UserEntities] = Json.format[UserEntities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:104:18: local val v4 in value twitterAPIFormat is never used
[warn]     implicit val v4: OFormat[UserMentions] = Json.format[UserMentions]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:105:18: local val v5 in value twitterAPIFormat is never used
[warn]     implicit val v5: OFormat[Entities] = Json.format[Entities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:106:18: local val v6 in value twitterAPIFormat is never used
[warn]     implicit val v6: Format[User] = Jsonx.formatCaseClass[User]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:107:18: local val v7 in value twitterAPIFormat is never used
[warn]     implicit val v7: Format[RetweetedStatus] = Jsonx.formatCaseClass[RetweetedStatus]
[warn]                  ^
[warn] 23 warnings found
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.10.1-SNAPSHOT.jar ...
Processing 330 classes from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes with "reflection" generator
[info] Compiling 40 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/test-classes ...
Writing out Java source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/src_managed/jmh and resources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/resource_managed/jmh
[info] Done packaging.
[info] Compiling 448 Java sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.10.1-SNAPSHOT-tests.jar ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.10.1-SNAPSHOT-jmh.jar ...
[info] Done packaging.
[info] Running (fork) org.openjdk.jmh.Main -prof gc -rf json -rff jdk9.json .*Benchmark.*
[error] WARNING: An illegal reflective access operation has occurred
[error] WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/tmp/sbt_6777d793/target/5f9f9839/jmh-core-1.20.jar) to field java.io.PrintStream.charOut
[error] WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[error] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[error] WARNING: All illegal access operations will be denied in a future release
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce
[info] # Run progress: 0.00% complete, ETA 00:38:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 388222.707 ops/s
[info] # Warmup Iteration   2: 676803.072 ops/s
[info] # Warmup Iteration   3: 707581.477 ops/s
[info] Iteration   1: 699034.090 ops/s
[info]                  ·gc.alloc.rate:                   1847.379 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.234 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1967.476 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4430.440 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 333201.743 ops/s
[info]                  ·gc.alloc.rate:                   879.226 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.393 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      988.299 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4676.077 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 40795.221 ops/s
[info]                  ·gc.alloc.rate:      107.645 MB/sec
[info]                  ·gc.alloc.rate.norm: 4160.010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 38371.847 ops/s
[info]                  ·gc.alloc.rate:      101.298 MB/sec
[info]                  ·gc.alloc.rate.norm: 4160.011 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 39532.415 ops/s
[info]                  ·gc.alloc.rate:                   104.400 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      331.726 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13218.236 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce":
[info]   230187.063 ±(99.9%) 1121722.882 ops/s [Average]
[info]   (min, avg, max) = (38371.847, 230187.063, 699034.090), stdev = 291307.870
[info]   CI (99.9%): [≈ 0, 1351909.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate":
[info]   607.989 ±(99.9%) 2964.207 MB/sec [Average]
[info]   (min, avg, max) = (101.298, 607.989, 1847.379), stdev = 769.795
[info]   CI (99.9%): [≈ 0, 3572.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4160.007 ±(99.9%) 0.020 B/op [Average]
[info]   (min, avg, max) = (4160.001, 4160.007, 4160.011), stdev = 0.005
[info]   CI (99.9%): [4159.987, 4160.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.199 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.104), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.125 ±(99.9%) 0.696 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.125, 0.393), stdev = 0.181
[info]   CI (99.9%): [≈ 0, 0.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   657.500 ±(99.9%) 3219.497 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 657.500, 1967.476), stdev = 836.093
[info]   CI (99.9%): [≈ 0, 3876.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4464.951 ±(99.9%) 20784.324 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4464.951, 13218.236), stdev = 5397.623
[info]   CI (99.9%): [≈ 0, 25249.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 6.000), stdev = 2.550
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.200, 7.000), stdev = 3.114
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala
[info] # Run progress: 0.34% complete, ETA 01:02:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.100 ops/s
[info] # Warmup Iteration   2: 899.155 ops/s
[info] # Warmup Iteration   3: 10669.138 ops/s
[info] Iteration   1: 45922.528 ops/s
[info]                  ·gc.alloc.rate:      32.799 MB/sec
[info]                  ·gc.alloc.rate.norm: 1127.865 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 84940.216 ops/s
[info]                  ·gc.alloc.rate:      60.377 MB/sec
[info]                  ·gc.alloc.rate.norm: 1120.020 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 85993.268 ops/s
[info]                  ·gc.alloc.rate:      61.168 MB/sec
[info]                  ·gc.alloc.rate.norm: 1120.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 83432.668 ops/s
[info]                  ·gc.alloc.rate:      59.313 MB/sec
[info]                  ·gc.alloc.rate.norm: 1120.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 88993.392 ops/s
[info]                  ·gc.alloc.rate:                   63.289 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.375 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4519.268 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala":
[info]   77856.415 ±(99.9%) 69185.491 ops/s [Average]
[info]   (min, avg, max) = (45922.528, 77856.415, 88993.392), stdev = 17967.252
[info]   CI (99.9%): [8670.924, 147041.905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   55.389 ±(99.9%) 48.951 MB/sec [Average]
[info]   (min, avg, max) = (32.799, 55.389, 63.289), stdev = 12.712
[info]   CI (99.9%): [6.439, 104.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1121.580 ±(99.9%) 13.528 B/op [Average]
[info]   (min, avg, max) = (1120.005, 1121.580, 1127.865), stdev = 3.513
[info]   CI (99.9%): [1108.052, 1135.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   51.075 ±(99.9%) 439.771 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 51.075, 255.375), stdev = 114.207
[info]   CI (99.9%): [≈ 0, 490.846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   903.854 ±(99.9%) 7782.451 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 903.854, 4519.268), stdev = 2021.078
[info]   CI (99.9%): [≈ 0, 8686.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.count":
[info]   1.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.200, 1.000), stdev = 0.447
[info]   CI (99.9%): [1.000, 1.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 14.000), stdev = 6.261
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala
[info] # Run progress: 0.68% complete, ETA 01:37:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 84713.902 ops/s
[info] # Warmup Iteration   2: 1026579.734 ops/s
[info] # Warmup Iteration   3: 1828027.614 ops/s
[info] Iteration   1: 1886580.495 ops/s
[info]                  ·gc.alloc.rate:                   124.658 MB/sec
[info]                  ·gc.alloc.rate.norm:              104.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.774 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 213.388 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2284256.857 ops/s
[info]                  ·gc.alloc.rate:      150.929 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2355679.550 ops/s
[info]                  ·gc.alloc.rate:                   155.656 MB/sec
[info]                  ·gc.alloc.rate.norm:              104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1.075 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.718 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.797 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 170.909 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 2406265.907 ops/s
[info]                  ·gc.alloc.rate:                   159.038 MB/sec
[info]                  ·gc.alloc.rate.norm:              104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.023 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.860 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 167.316 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 2342999.192 ops/s
[info]                  ·gc.alloc.rate:      154.819 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala":
[info]   2255156.400 ±(99.9%) 810810.612 ops/s [Average]
[info]   (min, avg, max) = (1886580.495, 2255156.400, 2406265.907), stdev = 210564.941
[info]   CI (99.9%): [1444345.788, 3065967.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   149.020 ±(99.9%) 53.605 MB/sec [Average]
[info]   (min, avg, max) = (124.658, 149.020, 159.038), stdev = 13.921
[info]   CI (99.9%): [95.415, 202.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   104.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (104.000, 104.000, 104.000), stdev = 0.001
[info]   CI (99.9%): [104.000, 104.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.220 ±(99.9%) 1.841 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.220, 1.075), stdev = 0.478
[info]   CI (99.9%): [≈ 0, 2.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.147 ±(99.9%) 1.230 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.147, 0.718), stdev = 0.319
[info]   CI (99.9%): [≈ 0, 1.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   153.486 ±(99.9%) 539.526 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 153.486, 255.860), stdev = 140.113
[info]   CI (99.9%): [≈ 0, 693.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   110.323 ±(99.9%) 394.026 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 110.323, 213.388), stdev = 102.327
[info]   CI (99.9%): [≈ 0, 504.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson
[info] # Run progress: 1.03% complete, ETA 01:39:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.990 ops/s
[info] # Warmup Iteration   2: 41131.530 ops/s
[info] # Warmup Iteration   3: 106140.903 ops/s
[info] Iteration   1: 118015.484 ops/s
[info]                  ·gc.alloc.rate:                   932.714 MB/sec
[info]                  ·gc.alloc.rate.norm:              12440.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.395 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.275 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      901.845 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12028.296 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 121891.271 ops/s
[info]                  ·gc.alloc.rate:                   963.576 MB/sec
[info]                  ·gc.alloc.rate.norm:              12440.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.538 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      977.657 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12621.788 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 123980.221 ops/s
[info]                  ·gc.alloc.rate:                   980.065 MB/sec
[info]                  ·gc.alloc.rate.norm:              12440.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.529 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      982.996 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12477.209 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 122551.547 ops/s
[info]                  ·gc.alloc.rate:                   968.932 MB/sec
[info]                  ·gc.alloc.rate.norm:              12440.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.267 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      989.832 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12708.327 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 115249.575 ops/s
[info]                  ·gc.alloc.rate:                   910.942 MB/sec
[info]                  ·gc.alloc.rate.norm:              12440.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.569 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      994.888 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13586.385 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson":
[info]   120337.620 ±(99.9%) 13865.574 ops/s [Average]
[info]   (min, avg, max) = (115249.575, 120337.620, 123980.221), stdev = 3600.846
[info]   CI (99.9%): [106472.045, 134203.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate":
[info]   951.246 ±(99.9%) 109.983 MB/sec [Average]
[info]   (min, avg, max) = (910.942, 951.246, 980.065), stdev = 28.562
[info]   CI (99.9%): [841.263, 1061.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   12440.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (12440.003, 12440.004, 12440.004), stdev = 0.001
[info]   CI (99.9%): [12440.003, 12440.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.108 ±(99.9%) 0.619 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.108, 0.395), stdev = 0.161
[info]   CI (99.9%): [≈ 0, 0.728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.435 ±(99.9%) 8.277 B/op [Average]
[info]   (min, avg, max) = (0.267, 1.435, 5.275), stdev = 2.150
[info]   CI (99.9%): [≈ 0, 9.713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   969.444 ±(99.9%) 147.683 MB/sec [Average]
[info]   (min, avg, max) = (901.845, 969.444, 994.888), stdev = 38.353
[info]   CI (99.9%): [821.760, 1117.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   12684.401 ±(99.9%) 2187.992 B/op [Average]
[info]   (min, avg, max) = (12028.296, 12684.401, 13586.385), stdev = 568.215
[info]   CI (99.9%): [10496.409, 14872.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala
[info] # Run progress: 1.37% complete, ETA 01:30:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_6777d793/target/5e31e36e/jackson-module-afterburner-2.9.4.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 18718.775 ops/s
[info] # Warmup Iteration   2: 1316659.232 ops/s
[info] # Warmup Iteration   3: 1620873.172 ops/s
[info] Iteration   1: 1660184.654 ops/s
[info]                  ·gc.alloc.rate:                   641.231 MB/sec
[info]                  ·gc.alloc.rate.norm:              608.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.522 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.495 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      578.761 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 548.767 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1671103.425 ops/s
[info]                  ·gc.alloc.rate:                   645.571 MB/sec
[info]                  ·gc.alloc.rate.norm:              608.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      647.833 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 610.130 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1630681.836 ops/s
[info]                  ·gc.alloc.rate:                   630.113 MB/sec
[info]                  ·gc.alloc.rate.norm:              608.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      651.657 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 628.789 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1672601.773 ops/s
[info]                  ·gc.alloc.rate:                   646.061 MB/sec
[info]                  ·gc.alloc.rate.norm:              608.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.734 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 616.162 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1697768.834 ops/s
[info]                  ·gc.alloc.rate:                   655.769 MB/sec
[info]                  ·gc.alloc.rate.norm:              608.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.368 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 609.483 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala":
[info]   1666468.104 ±(99.9%) 93511.652 ops/s [Average]
[info]   (min, avg, max) = (1630681.836, 1666468.104, 1697768.834), stdev = 24284.679
[info]   CI (99.9%): [1572956.452, 1759979.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   643.749 ±(99.9%) 35.784 MB/sec [Average]
[info]   (min, avg, max) = (630.113, 643.749, 655.769), stdev = 9.293
[info]   CI (99.9%): [607.965, 679.533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   608.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (608.000, 608.000, 608.000), stdev = 0.001
[info]   CI (99.9%): [608.000, 608.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.129 ±(99.9%) 0.846 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.129, 0.522), stdev = 0.220
[info]   CI (99.9%): [≈ 0, 0.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.123 ±(99.9%) 0.803 B/op [Average]
[info]   (min, avg, max) = (0.020, 0.123, 0.495), stdev = 0.208
[info]   CI (99.9%): [≈ 0, 0.925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   638.071 ±(99.9%) 128.400 MB/sec [Average]
[info]   (min, avg, max) = (578.761, 638.071, 657.368), stdev = 33.345
[info]   CI (99.9%): [509.670, 766.471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   602.666 ±(99.9%) 119.801 B/op [Average]
[info]   (min, avg, max) = (548.767, 602.666, 628.789), stdev = 31.112
[info]   CI (99.9%): [482.865, 722.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala
[info] # Run progress: 1.71% complete, ETA 01:24:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4209582.961 ops/s
[info] # Warmup Iteration   2: 5921813.412 ops/s
[info] # Warmup Iteration   3: 6940104.131 ops/s
[info] Iteration   1: 6896318.125 ops/s
[info]                  ·gc.alloc.rate:                   350.600 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.841 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 58.378 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 6994671.708 ops/s
[info]                  ·gc.alloc.rate:                   355.483 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.060 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.516 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 115.115 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 7105070.805 ops/s
[info]                  ·gc.alloc.rate:                   361.276 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.691 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.817 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.842 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 72.818 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 6681303.352 ops/s
[info]                  ·gc.alloc.rate:                   339.592 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.713 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 77.437 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 7296197.135 ops/s
[info]                  ·gc.alloc.rate:                   370.815 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      326.349 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70.407 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala":
[info]   6994712.225 ±(99.9%) 884346.906 ops/s [Average]
[info]   (min, avg, max) = (6681303.352, 6994712.225, 7296197.135), stdev = 229662.083
[info]   CI (99.9%): [6110365.319, 7879059.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   355.553 ±(99.9%) 44.945 MB/sec [Average]
[info]   (min, avg, max) = (339.592, 355.553, 370.815), stdev = 11.672
[info]   CI (99.9%): [310.608, 400.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   80.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (80.000, 80.000, 80.000), stdev = 0.001
[info]   CI (99.9%): [80.000, 80.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.767 ±(99.9%) 6.296 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.767, 3.691), stdev = 1.635
[info]   CI (99.9%): [≈ 0, 7.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.170 ±(99.9%) 1.394 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.170, 0.817), stdev = 0.362
[info]   CI (99.9%): [≈ 0, 1.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   350.252 ±(99.9%) 367.394 MB/sec [Average]
[info]   (min, avg, max) = (255.841, 350.252, 511.516), stdev = 95.411
[info]   CI (99.9%): [≈ 0, 717.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   78.831 ±(99.9%) 82.674 B/op [Average]
[info]   (min, avg, max) = (58.378, 78.831, 115.115), stdev = 21.470
[info]   CI (99.9%): [≈ 0, 161.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 5.000), stdev = 1.949
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson
[info] # Run progress: 2.05% complete, ETA 01:19:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9948.306 ops/s
[info] # Warmup Iteration   2: 233759.399 ops/s
[info] # Warmup Iteration   3: 289730.316 ops/s
[info] Iteration   1: 298864.148 ops/s
[info]                  ·gc.alloc.rate:                   944.707 MB/sec
[info]                  ·gc.alloc.rate.norm:              4976.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.658 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      974.678 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5133.871 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 298454.129 ops/s
[info]                  ·gc.alloc.rate:                   943.429 MB/sec
[info]                  ·gc.alloc.rate.norm:              4976.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.768 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      981.350 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5176.015 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 291660.365 ops/s
[info]                  ·gc.alloc.rate:                   922.040 MB/sec
[info]                  ·gc.alloc.rate.norm:              4976.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.562 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      986.808 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5325.540 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 289740.309 ops/s
[info]                  ·gc.alloc.rate:                   915.905 MB/sec
[info]                  ·gc.alloc.rate.norm:              4976.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.339 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      661.359 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3593.083 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 293107.667 ops/s
[info]                  ·gc.alloc.rate:                   926.873 MB/sec
[info]                  ·gc.alloc.rate.norm:              4976.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.447 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      997.065 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5352.834 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson":
[info]   294365.323 ±(99.9%) 15788.463 ops/s [Average]
[info]   (min, avg, max) = (289740.309, 294365.323, 298864.148), stdev = 4100.214
[info]   CI (99.9%): [278576.861, 310153.786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate":
[info]   930.591 ±(99.9%) 49.713 MB/sec [Average]
[info]   (min, avg, max) = (915.905, 930.591, 944.707), stdev = 12.910
[info]   CI (99.9%): [880.878, 980.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4976.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4976.001, 4976.001, 4976.002), stdev = 0.001
[info]   CI (99.9%): [4976.001, 4976.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.104 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.104, 0.146), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.555 ±(99.9%) 0.651 B/op [Average]
[info]   (min, avg, max) = (0.339, 0.555, 0.768), stdev = 0.169
[info]   CI (99.9%): [≈ 0, 1.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   920.252 ±(99.9%) 558.181 MB/sec [Average]
[info]   (min, avg, max) = (661.359, 920.252, 997.065), stdev = 144.958
[info]   CI (99.9%): [362.071, 1478.433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4916.269 ±(99.9%) 2871.075 B/op [Average]
[info]   (min, avg, max) = (3593.083, 4916.269, 5352.834), stdev = 745.609
[info]   CI (99.9%): [2045.194, 7787.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce
[info] # Run progress: 2.40% complete, ETA 01:16:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 555389.773 ops/s
[info] # Warmup Iteration   2: 1358558.412 ops/s
[info] # Warmup Iteration   3: 1435091.071 ops/s
[info] Iteration   1: 1443484.322 ops/s
[info]                  ·gc.alloc.rate:                   2252.406 MB/sec
[info]                  ·gc.alloc.rate.norm:              2456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.068 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2308.984 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2517.693 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 1454080.012 ops/s
[info]                  ·gc.alloc.rate:                   2268.661 MB/sec
[info]                  ·gc.alloc.rate.norm:              2456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.225 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2335.025 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2527.845 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 1477912.862 ops/s
[info]                  ·gc.alloc.rate:                   2306.050 MB/sec
[info]                  ·gc.alloc.rate.norm:              2456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.089 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2016.141 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2147.240 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 1467446.821 ops/s
[info]                  ·gc.alloc.rate:                   2289.806 MB/sec
[info]                  ·gc.alloc.rate.norm:              2456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.156 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2365.385 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2537.065 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 1399306.124 ops/s
[info]                  ·gc.alloc.rate:                   2184.092 MB/sec
[info]                  ·gc.alloc.rate.norm:              2456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.117 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2374.014 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2669.566 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce":
[info]   1448446.028 ±(99.9%) 117119.329 ops/s [Average]
[info]   (min, avg, max) = (1399306.124, 1448446.028, 1477912.862), stdev = 30415.518
[info]   CI (99.9%): [1331326.699, 1565565.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate":
[info]   2260.203 ±(99.9%) 181.669 MB/sec [Average]
[info]   (min, avg, max) = (2184.092, 2260.203, 2306.050), stdev = 47.179
[info]   CI (99.9%): [2078.534, 2441.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2456.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2456.000, 2456.000, 2456.000), stdev = 0.001
[info]   CI (99.9%): [2456.000, 2456.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.121 ±(99.9%) 0.222 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.121, 0.208), stdev = 0.058
[info]   CI (99.9%): [≈ 0, 0.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.131 ±(99.9%) 0.240 B/op [Average]
[info]   (min, avg, max) = (0.068, 0.131, 0.225), stdev = 0.062
[info]   CI (99.9%): [≈ 0, 0.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2279.910 ±(99.9%) 576.371 MB/sec [Average]
[info]   (min, avg, max) = (2016.141, 2279.910, 2374.014), stdev = 149.682
[info]   CI (99.9%): [1703.539, 2856.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2479.882 ±(99.9%) 754.644 B/op [Average]
[info]   (min, avg, max) = (2147.240, 2479.882, 2669.566), stdev = 195.979
[info]   CI (99.9%): [1725.237, 3234.526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.count":
[info]   34.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.600, 14.000), stdev = 3.647
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala
[info] # Run progress: 2.74% complete, ETA 01:14:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 379699.407 ops/s
[info] # Warmup Iteration   2: 2162835.930 ops/s
[info] # Warmup Iteration   3: 2444367.747 ops/s
[info] Iteration   1: 2451812.092 ops/s
[info]                  ·gc.alloc.rate:                   1719.548 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.134 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1976.056 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1268.686 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 2472586.977 ops/s
[info]                  ·gc.alloc.rate:                   1734.240 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.093 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1664.788 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1059.787 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 2486789.403 ops/s
[info]                  ·gc.alloc.rate:                   1744.785 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.066 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1676.661 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1060.895 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 2473056.230 ops/s
[info]                  ·gc.alloc.rate:                   1735.070 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.079 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1685.004 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1072.144 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 2482252.353 ops/s
[info]                  ·gc.alloc.rate:                   1741.071 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.092 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1690.517 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1071.944 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala":
[info]   2473299.411 ±(99.9%) 51819.662 ops/s [Average]
[info]   (min, avg, max) = (2451812.092, 2473299.411, 2486789.403), stdev = 13457.402
[info]   CI (99.9%): [2421479.749, 2525119.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1734.943 ±(99.9%) 37.132 MB/sec [Average]
[info]   (min, avg, max) = (1719.548, 1734.943, 1744.785), stdev = 9.643
[info]   CI (99.9%): [1697.811, 1772.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1104.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1104.000, 1104.000, 1104.000), stdev = 0.001
[info]   CI (99.9%): [1104.000, 1104.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.146 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (0.104, 0.146, 0.208), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.093 ±(99.9%) 0.098 B/op [Average]
[info]   (min, avg, max) = (0.066, 0.093, 0.134), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1738.605 ±(99.9%) 512.492 MB/sec [Average]
[info]   (min, avg, max) = (1664.788, 1738.605, 1976.056), stdev = 133.092
[info]   CI (99.9%): [1226.113, 2251.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1106.691 ±(99.9%) 349.436 B/op [Average]
[info]   (min, avg, max) = (1059.787, 1106.691, 1268.686), stdev = 90.748
[info]   CI (99.9%): [757.255, 1456.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 7.000), stdev = 0.837
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala
[info] # Run progress: 3.08% complete, ETA 01:12:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8714259.294 ops/s
[info] # Warmup Iteration   2: 11093474.459 ops/s
[info] # Warmup Iteration   3: 11605315.735 ops/s
[info] Iteration   1: 11552436.263 ops/s
[info]                  ·gc.alloc.rate:                   1468.257 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1651.026 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 224.896 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 11740553.858 ops/s
[info]                  ·gc.alloc.rate:                   1491.613 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1326.692 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 177.887 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 11649913.055 ops/s
[info]                  ·gc.alloc.rate:                   1480.134 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1333.349 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 180.166 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 11703565.022 ops/s
[info]                  ·gc.alloc.rate:                   1487.124 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1676.176 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 225.425 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 11658331.457 ops/s
[info]                  ·gc.alloc.rate:                   1481.593 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.688 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 181.789 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala":
[info]   11660959.931 ±(99.9%) 272667.437 ops/s [Average]
[info]   (min, avg, max) = (11552436.263, 11660959.931, 11740553.858), stdev = 70810.868
[info]   CI (99.9%): [11388292.494, 11933627.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1481.744 ±(99.9%) 33.946 MB/sec [Average]
[info]   (min, avg, max) = (1468.257, 1481.744, 1491.613), stdev = 8.816
[info]   CI (99.9%): [1447.798, 1515.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   200.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (200.000, 200.000, 200.000), stdev = 0.001
[info]   CI (99.9%): [200.000, 200.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.125), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.011 ±(99.9%) 0.017 B/op [Average]
[info]   (min, avg, max) = (0.006, 0.011, 0.017), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1466.786 ±(99.9%) 693.233 MB/sec [Average]
[info]   (min, avg, max) = (1326.692, 1466.786, 1676.176), stdev = 180.030
[info]   CI (99.9%): [773.553, 2160.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   198.033 ±(99.9%) 95.511 B/op [Average]
[info]   (min, avg, max) = (177.887, 198.033, 225.425), stdev = 24.804
[info]   CI (99.9%): [102.522, 293.543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 0.707
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson
[info] # Run progress: 3.42% complete, ETA 01:11:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 75288.750 ops/s
[info] # Warmup Iteration   2: 624052.190 ops/s
[info] # Warmup Iteration   3: 626301.859 ops/s
[info] Iteration   1: 641367.304 ops/s
[info]                  ·gc.alloc.rate:                   1714.406 MB/sec
[info]                  ·gc.alloc.rate.norm:              4208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.204 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1647.948 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4044.880 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 641041.200 ops/s
[info]                  ·gc.alloc.rate:                   1713.750 MB/sec
[info]                  ·gc.alloc.rate.norm:              4208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.460 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1664.169 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4086.257 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 632130.389 ops/s
[info]                  ·gc.alloc.rate:                   1690.526 MB/sec
[info]                  ·gc.alloc.rate.norm:              4208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.104 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1675.418 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4170.395 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 633665.396 ops/s
[info]                  ·gc.alloc.rate:                   1694.298 MB/sec
[info]                  ·gc.alloc.rate.norm:              4208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.310 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1684.805 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4184.423 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 636869.242 ops/s
[info]                  ·gc.alloc.rate:                   1702.884 MB/sec
[info]                  ·gc.alloc.rate.norm:              4208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.257 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1690.764 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4178.053 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson":
[info]   637014.706 ±(99.9%) 16137.524 ops/s [Average]
[info]   (min, avg, max) = (632130.389, 637014.706, 641367.304), stdev = 4190.864
[info]   CI (99.9%): [620877.183, 653152.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1703.173 ±(99.9%) 42.044 MB/sec [Average]
[info]   (min, avg, max) = (1690.526, 1703.173, 1714.406), stdev = 10.919
[info]   CI (99.9%): [1661.129, 1745.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   4208.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4208.001, 4208.001, 4208.001), stdev = 0.001
[info]   CI (99.9%): [4208.001, 4208.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.108 ±(99.9%) 0.207 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.108, 0.187), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.267 ±(99.9%) 0.509 B/op [Average]
[info]   (min, avg, max) = (0.104, 0.267, 0.460), stdev = 0.132
[info]   CI (99.9%): [≈ 0, 0.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1672.621 ±(99.9%) 65.733 MB/sec [Average]
[info]   (min, avg, max) = (1647.948, 1672.621, 1690.764), stdev = 17.071
[info]   CI (99.9%): [1606.888, 1738.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4132.801 ±(99.9%) 243.706 B/op [Average]
[info]   (min, avg, max) = (4044.880, 4132.801, 4184.423), stdev = 63.290
[info]   CI (99.9%): [3889.096, 4376.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 0.707
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce
[info] # Run progress: 3.77% complete, ETA 01:09:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1047185.001 ops/s
[info] # Warmup Iteration   2: 1857983.016 ops/s
[info] # Warmup Iteration   3: 1885467.484 ops/s
[info] Iteration   1: 1905866.484 ops/s
[info]                  ·gc.alloc.rate:                   1762.936 MB/sec
[info]                  ·gc.alloc.rate.norm:              1456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.069 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1638.901 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1353.560 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1968027.157 ops/s
[info]                  ·gc.alloc.rate:                   1820.208 MB/sec
[info]                  ·gc.alloc.rate.norm:              1456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.100 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1653.295 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1322.485 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 1952006.187 ops/s
[info]                  ·gc.alloc.rate:                   1805.603 MB/sec
[info]                  ·gc.alloc.rate.norm:              1456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.084 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2000.838 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1613.434 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 1966628.734 ops/s
[info]                  ·gc.alloc.rate:                   1819.157 MB/sec
[info]                  ·gc.alloc.rate.norm:              1456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1678.869 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1343.717 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1940242.050 ops/s
[info]                  ·gc.alloc.rate:                   1794.953 MB/sec
[info]                  ·gc.alloc.rate.norm:              1456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.101 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2024.479 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1642.183 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce":
[info]   1946554.122 ±(99.9%) 97967.155 ops/s [Average]
[info]   (min, avg, max) = (1905866.484, 1946554.122, 1968027.157), stdev = 25441.759
[info]   CI (99.9%): [1848586.967, 2044521.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1800.571 ±(99.9%) 90.395 MB/sec [Average]
[info]   (min, avg, max) = (1762.936, 1800.571, 1820.208), stdev = 23.475
[info]   CI (99.9%): [1710.176, 1890.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1456.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1456.000, 1456.000, 1456.000), stdev = 0.001
[info]   CI (99.9%): [1456.000, 1456.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.092, 0.125), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.074 ±(99.9%) 0.134 B/op [Average]
[info]   (min, avg, max) = (0.017, 0.074, 0.101), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1799.276 ±(99.9%) 752.779 MB/sec [Average]
[info]   (min, avg, max) = (1638.901, 1799.276, 2024.479), stdev = 195.494
[info]   CI (99.9%): [1046.497, 2552.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1455.076 ±(99.9%) 609.975 B/op [Average]
[info]   (min, avg, max) = (1322.485, 1455.076, 1642.183), stdev = 158.409
[info]   CI (99.9%): [845.101, 2065.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 10.000), stdev = 2.490
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala
[info] # Run progress: 4.11% complete, ETA 01:08:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_6777d793/target/5e31e36e/jackson-module-afterburner-2.9.4.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 2073419.224 ops/s
[info] # Warmup Iteration   2: 5988516.187 ops/s
[info] # Warmup Iteration   3: 5965669.851 ops/s
[info] Iteration   1: 5979582.860 ops/s
[info]                  ·gc.alloc.rate:                   1640.931 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1648.633 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 434.028 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 5930410.609 ops/s
[info]                  ·gc.alloc.rate:                   1627.590 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.044 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1330.464 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 353.136 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 5864072.054 ops/s
[info]                  ·gc.alloc.rate:                   1609.297 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1673.712 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 449.292 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 5948810.651 ops/s
[info]                  ·gc.alloc.rate:                   1632.637 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1682.824 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 445.280 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 5978094.385 ops/s
[info]                  ·gc.alloc.rate:                   1641.243 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1690.038 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 444.843 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala":
[info]   5940194.112 ±(99.9%) 182168.768 ops/s [Average]
[info]   (min, avg, max) = (5864072.054, 5940194.112, 5979582.860), stdev = 47308.651
[info]   CI (99.9%): [5758025.344, 6122362.880] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1630.339 ±(99.9%) 50.453 MB/sec [Average]
[info]   (min, avg, max) = (1609.297, 1630.339, 1641.243), stdev = 13.103
[info]   CI (99.9%): [1579.886, 1680.793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   432.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (432.000, 432.000, 432.000), stdev = 0.001
[info]   CI (99.9%): [432.000, 432.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.117 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.117, 0.167), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.031 ±(99.9%) 0.032 B/op [Average]
[info]   (min, avg, max) = (0.022, 0.031, 0.044), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1605.134 ±(99.9%) 594.308 MB/sec [Average]
[info]   (min, avg, max) = (1330.464, 1605.134, 1690.038), stdev = 154.340
[info]   CI (99.9%): [1010.826, 2199.442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   425.316 ±(99.9%) 156.894 B/op [Average]
[info]   (min, avg, max) = (353.136, 425.316, 449.292), stdev = 40.745
[info]   CI (99.9%): [268.422, 582.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala
[info] # Run progress: 4.45% complete, ETA 01:07:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14768617.950 ops/s
[info] # Warmup Iteration   2: 21029647.119 ops/s
[info] # Warmup Iteration   3: 21650553.850 ops/s
[info] Iteration   1: 21391410.943 ops/s
[info]                  ·gc.alloc.rate:                   652.334 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.782 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.278 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.409 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 48.373 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 21306495.666 ops/s
[info]                  ·gc.alloc.rate:                   649.874 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.232 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 48.322 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 20245584.966 ops/s
[info]                  ·gc.alloc.rate:                   617.350 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.724 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50.750 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 20026805.597 ops/s
[info]                  ·gc.alloc.rate:                   610.726 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.778 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51.305 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 20445847.283 ops/s
[info]                  ·gc.alloc.rate:                   623.491 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.080 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50.355 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala":
[info]   20683228.891 ±(99.9%) 2411466.388 ops/s [Average]
[info]   (min, avg, max) = (20026805.597, 20683228.891, 21391410.943), stdev = 626250.163
[info]   CI (99.9%): [18271762.503, 23094695.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   630.755 ±(99.9%) 73.689 MB/sec [Average]
[info]   (min, avg, max) = (610.726, 630.755, 652.334), stdev = 19.137
[info]   CI (99.9%): [557.066, 704.444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.810 ±(99.9%) 6.396 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.810, 3.782), stdev = 1.661
[info]   CI (99.9%): [≈ 0, 7.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.060 ±(99.9%) 0.470 B/op [Average]
[info]   (min, avg, max) = (0.005, 0.060, 0.278), stdev = 0.122
[info]   CI (99.9%): [≈ 0, 0.530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   654.244 ±(99.9%) 7.332 MB/sec [Average]
[info]   (min, avg, max) = (652.724, 654.244, 657.409), stdev = 1.904
[info]   CI (99.9%): [646.912, 661.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   49.821 ±(99.9%) 5.341 B/op [Average]
[info]   (min, avg, max) = (48.322, 49.821, 51.305), stdev = 1.387
[info]   CI (99.9%): [44.481, 55.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 4.000), stdev = 1.095
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 4.79% complete, ETA 01:06:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16354931.345 ops/s
[info] # Warmup Iteration   2: 20485809.304 ops/s
[info] # Warmup Iteration   3: 20947288.062 ops/s
[info] Iteration   1: 20949590.304 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 21843661.260 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 21773276.153 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 21812734.214 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 21943320.203 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc":
[info]   21664516.427 ±(99.9%) 1557894.784 ops/s [Average]
[info]   (min, avg, max) = (20949590.304, 21664516.427, 21943320.203), stdev = 404580.328
[info]   CI (99.9%): [20106621.643, 23222411.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson
[info] # Run progress: 5.14% complete, ETA 01:06:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 338924.155 ops/s
[info] # Warmup Iteration   2: 1270502.857 ops/s
[info] # Warmup Iteration   3: 1301051.570 ops/s
[info] Iteration   1: 1308343.691 ops/s
[info]                  ·gc.alloc.rate:                   2002.247 MB/sec
[info]                  ·gc.alloc.rate.norm:              2408.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.225 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1988.676 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2391.678 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 1302171.279 ops/s
[info]                  ·gc.alloc.rate:                   1992.109 MB/sec
[info]                  ·gc.alloc.rate.norm:              2408.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.176 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2006.902 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2425.882 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 1260718.987 ops/s
[info]                  ·gc.alloc.rate:                   1929.113 MB/sec
[info]                  ·gc.alloc.rate.norm:              2408.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.104 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2020.328 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2521.859 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 1266471.506 ops/s
[info]                  ·gc.alloc.rate:                   1937.279 MB/sec
[info]                  ·gc.alloc.rate.norm:              2408.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.078 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028.561 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2521.463 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 1267460.458 ops/s
[info]                  ·gc.alloc.rate:                   1939.110 MB/sec
[info]                  ·gc.alloc.rate.norm:              2408.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.129 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2034.268 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2526.169 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson":
[info]   1281033.184 ±(99.9%) 86137.683 ops/s [Average]
[info]   (min, avg, max) = (1260718.987, 1281033.184, 1308343.691), stdev = 22369.683
[info]   CI (99.9%): [1194895.501, 1367170.867] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1959.971 ±(99.9%) 132.309 MB/sec [Average]
[info]   (min, avg, max) = (1929.113, 1959.971, 2002.247), stdev = 34.360
[info]   CI (99.9%): [1827.663, 2092.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2408.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2408.000, 2408.000, 2408.000), stdev = 0.001
[info]   CI (99.9%): [2408.000, 2408.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.117 ±(99.9%) 0.193 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.117, 0.187), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.142 ±(99.9%) 0.227 B/op [Average]
[info]   (min, avg, max) = (0.078, 0.142, 0.225), stdev = 0.059
[info]   CI (99.9%): [≈ 0, 0.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   2015.747 ±(99.9%) 70.461 MB/sec [Average]
[info]   (min, avg, max) = (1988.676, 2015.747, 2034.268), stdev = 18.298
[info]   CI (99.9%): [1945.286, 2086.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2477.410 ±(99.9%) 245.800 B/op [Average]
[info]   (min, avg, max) = (2391.678, 2477.410, 2526.169), stdev = 63.834
[info]   CI (99.9%): [2231.610, 2723.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.000, 9.000), stdev = 1.225
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce
[info] # Run progress: 5.48% complete, ETA 01:05:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10232.092 ops/s
[info] # Warmup Iteration   2: 14750.071 ops/s
[info] # Warmup Iteration   3: 15683.264 ops/s
[info] Iteration   1: 15955.328 ops/s
[info]                  ·gc.alloc.rate:                   1158.998 MB/sec
[info]                  ·gc.alloc.rate.norm:              114344.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.053 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1305.994 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 128846.265 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 15893.343 ops/s
[info]                  ·gc.alloc.rate:                   1154.479 MB/sec
[info]                  ·gc.alloc.rate.norm:              114344.069 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.123 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      982.706 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 97331.020 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 16110.958 ops/s
[info]                  ·gc.alloc.rate:                   1170.265 MB/sec
[info]                  ·gc.alloc.rate.norm:              114344.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.135 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1317.075 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 128688.577 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 16092.532 ops/s
[info]                  ·gc.alloc.rate:                   1169.638 MB/sec
[info]                  ·gc.alloc.rate.norm:              114344.034 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.072 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      993.630 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 97137.423 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 15796.824 ops/s
[info]                  ·gc.alloc.rate:                   1147.631 MB/sec
[info]                  ·gc.alloc.rate.norm:              114344.046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.222 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1331.509 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 132664.774 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce":
[info]   15969.797 ±(99.9%) 512.890 ops/s [Average]
[info]   (min, avg, max) = (15796.824, 15969.797, 16110.958), stdev = 133.196
[info]   CI (99.9%): [15456.907, 16482.687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate":
[info]   1160.202 ±(99.9%) 37.657 MB/sec [Average]
[info]   (min, avg, max) = (1147.631, 1160.202, 1170.265), stdev = 9.779
[info]   CI (99.9%): [1122.546, 1197.859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   114344.040 ±(99.9%) 0.070 B/op [Average]
[info]   (min, avg, max) = (114344.025, 114344.040, 114344.069), stdev = 0.018
[info]   CI (99.9%): [114343.971, 114344.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.050, 0.083), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4.921 ±(99.9%) 8.948 B/op [Average]
[info]   (min, avg, max) = (2.053, 4.921, 8.135), stdev = 2.324
[info]   CI (99.9%): [≈ 0, 13.869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1186.183 ±(99.9%) 697.080 MB/sec [Average]
[info]   (min, avg, max) = (982.706, 1186.183, 1331.509), stdev = 181.029
[info]   CI (99.9%): [489.103, 1883.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   116933.611 ±(99.9%) 69517.473 B/op [Average]
[info]   (min, avg, max) = (97137.423, 116933.611, 132664.774), stdev = 18053.467
[info]   CI (99.9%): [47416.138, 186451.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.800, 5.000), stdev = 1.095
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala
[info] # Run progress: 5.82% complete, ETA 01:04:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10768.364 ops/s
[info] # Warmup Iteration   2: 20436.455 ops/s
[info] # Warmup Iteration   3: 20275.799 ops/s
[info] Iteration   1: 20213.393 ops/s
[info]                  ·gc.alloc.rate:                   714.946 MB/sec
[info]                  ·gc.alloc.rate.norm:              55680.370 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.242 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      649.320 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50569.402 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 20494.858 ops/s
[info]                  ·gc.alloc.rate:                   725.377 MB/sec
[info]                  ·gc.alloc.rate.norm:              55696.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.394 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      980.699 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 75300.218 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 20269.630 ops/s
[info]                  ·gc.alloc.rate:                   717.193 MB/sec
[info]                  ·gc.alloc.rate.norm:              55691.442 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.425 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51050.388 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 20591.859 ops/s
[info]                  ·gc.alloc.rate:                   728.242 MB/sec
[info]                  ·gc.alloc.rate.norm:              55664.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.591 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.073 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50453.429 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 20683.488 ops/s
[info]                  ·gc.alloc.rate:                   731.670 MB/sec
[info]                  ·gc.alloc.rate.norm:              55664.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.584 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      662.928 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50434.240 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala":
[info]   20450.646 ±(99.9%) 782.464 ops/s [Average]
[info]   (min, avg, max) = (20213.393, 20450.646, 20683.488), stdev = 203.203
[info]   CI (99.9%): [19668.181, 21233.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   723.486 ±(99.9%) 27.615 MB/sec [Average]
[info]   (min, avg, max) = (714.946, 723.486, 731.670), stdev = 7.171
[info]   CI (99.9%): [695.871, 751.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   55679.174 ±(99.9%) 57.600 B/op [Average]
[info]   (min, avg, max) = (55664.020, 55679.174, 55696.020), stdev = 14.958
[info]   CI (99.9%): [55621.575, 55736.774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.083), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2.562 ±(99.9%) 9.356 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.562, 6.394), stdev = 2.430
[info]   CI (99.9%): [≈ 0, 11.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   722.089 ±(99.9%) 557.019 MB/sec [Average]
[info]   (min, avg, max) = (649.320, 722.089, 980.699), stdev = 144.656
[info]   CI (99.9%): [165.070, 1279.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   55561.535 ±(99.9%) 42499.901 B/op [Average]
[info]   (min, avg, max) = (50434.240, 55561.535, 75300.218), stdev = 11037.089
[info]   CI (99.9%): [13061.634, 98061.436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala
[info] # Run progress: 6.16% complete, ETA 01:04:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16482.982 ops/s
[info] # Warmup Iteration   2: 18001.022 ops/s
[info] # Warmup Iteration   3: 18116.941 ops/s
[info] Iteration   1: 18191.815 ops/s
[info]                  ·gc.alloc.rate:                   337.462 MB/sec
[info]                  ·gc.alloc.rate.norm:              29200.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.019 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.659 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.739 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22128.665 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 18338.201 ops/s
[info]                  ·gc.alloc.rate:                   340.195 MB/sec
[info]                  ·gc.alloc.rate.norm:              29200.024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.772 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21953.720 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 18328.103 ops/s
[info]                  ·gc.alloc.rate:                   340.009 MB/sec
[info]                  ·gc.alloc.rate.norm:              29200.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.325 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     285.575 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.705 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28315.156 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 18218.070 ops/s
[info]                  ·gc.alloc.rate:                   337.961 MB/sec
[info]                  ·gc.alloc.rate.norm:              29200.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.597 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.698 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28486.094 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 17707.128 ops/s
[info]                  ·gc.alloc.rate:                   328.561 MB/sec
[info]                  ·gc.alloc.rate.norm:              29200.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.426 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29187.960 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala":
[info]   18156.663 ±(99.9%) 999.381 ops/s [Average]
[info]   (min, avg, max) = (17707.128, 18156.663, 18338.201), stdev = 259.536
[info]   CI (99.9%): [17157.282, 19156.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   336.838 ±(99.9%) 18.415 MB/sec [Average]
[info]   (min, avg, max) = (328.561, 336.838, 340.195), stdev = 4.782
[info]   CI (99.9%): [318.423, 355.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   29200.024 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (29200.022, 29200.024, 29200.028), stdev = 0.002
[info]   CI (99.9%): [29200.016, 29200.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.677 ±(99.9%) 5.701 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.677, 3.325), stdev = 1.480
[info]   CI (99.9%): [≈ 0, 6.378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   58.166 ±(99.9%) 489.548 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 58.166, 285.575), stdev = 127.134
[info]   CI (99.9%): [≈ 0, 547.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   299.868 ±(99.9%) 155.075 MB/sec [Average]
[info]   (min, avg, max) = (255.739, 299.868, 329.705), stdev = 40.272
[info]   CI (99.9%): [144.793, 454.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   26014.319 ±(99.9%) 14024.790 B/op [Average]
[info]   (min, avg, max) = (21953.720, 26014.319, 29187.960), stdev = 3642.193
[info]   CI (99.9%): [11989.529, 40039.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson
[info] # Run progress: 6.51% complete, ETA 01:03:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8051.986 ops/s
[info] # Warmup Iteration   2: 15967.402 ops/s
[info] # Warmup Iteration   3: 16656.393 ops/s
[info] Iteration   1: 16564.159 ops/s
[info]                  ·gc.alloc.rate:                   934.549 MB/sec
[info]                  ·gc.alloc.rate.norm:              88808.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.934 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      962.440 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 91458.461 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 16429.447 ops/s
[info]                  ·gc.alloc.rate:                   927.426 MB/sec
[info]                  ·gc.alloc.rate.norm:              88808.079 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.970 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      972.221 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 93097.571 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 16280.374 ops/s
[info]                  ·gc.alloc.rate:                   918.551 MB/sec
[info]                  ·gc.alloc.rate.norm:              88808.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.074 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      978.389 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 94593.352 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 16446.551 ops/s
[info]                  ·gc.alloc.rate:                   928.182 MB/sec
[info]                  ·gc.alloc.rate.norm:              88808.033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.929 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62854.638 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 16026.495 ops/s
[info]                  ·gc.alloc.rate:                   904.305 MB/sec
[info]                  ·gc.alloc.rate.norm:              88808.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.044 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      991.467 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 97367.771 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson":
[info]   16349.405 ±(99.9%) 796.161 ops/s [Average]
[info]   (min, avg, max) = (16026.495, 16349.405, 16564.159), stdev = 206.760
[info]   CI (99.9%): [15553.245, 17145.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   922.603 ±(99.9%) 45.084 MB/sec [Average]
[info]   (min, avg, max) = (904.305, 922.603, 934.549), stdev = 11.708
[info]   CI (99.9%): [877.519, 967.686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   88808.038 ±(99.9%) 0.091 B/op [Average]
[info]   (min, avg, max) = (88808.025, 88808.038, 88808.079), stdev = 0.024
[info]   CI (99.9%): [88807.946, 88808.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.204 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.125), stdev = 0.053
[info]   CI (99.9%): [≈ 0, 0.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   6.004 ±(99.9%) 19.663 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.004, 12.074), stdev = 5.106
[info]   CI (99.9%): [≈ 0, 25.668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   912.289 ±(99.9%) 551.174 MB/sec [Average]
[info]   (min, avg, max) = (656.929, 912.289, 991.467), stdev = 143.138
[info]   CI (99.9%): [361.115, 1463.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   87874.359 ±(99.9%) 54503.411 B/op [Average]
[info]   (min, avg, max) = (62854.638, 87874.359, 97367.771), stdev = 14154.363
[info]   CI (99.9%): [33370.948, 142377.769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce
[info] # Run progress: 6.85% complete, ETA 01:03:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7237.941 ops/s
[info] # Warmup Iteration   2: 13024.951 ops/s
[info] # Warmup Iteration   3: 13393.787 ops/s
[info] Iteration   1: 13424.210 ops/s
[info]                  ·gc.alloc.rate:                   1597.039 MB/sec
[info]                  ·gc.alloc.rate.norm:              187256.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.203 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1633.253 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 191502.186 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 13268.979 ops/s
[info]                  ·gc.alloc.rate:                   1578.361 MB/sec
[info]                  ·gc.alloc.rate.norm:              187256.031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.877 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1647.322 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 195437.626 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 13383.397 ops/s
[info]                  ·gc.alloc.rate:                   1592.733 MB/sec
[info]                  ·gc.alloc.rate.norm:              187278.089 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.792 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1661.171 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 195325.284 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 13181.571 ops/s
[info]                  ·gc.alloc.rate:                   1568.444 MB/sec
[info]                  ·gc.alloc.rate.norm:              187280.031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.942 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1337.500 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 159704.233 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 13071.826 ops/s
[info]                  ·gc.alloc.rate:                   1555.982 MB/sec
[info]                  ·gc.alloc.rate.norm:              187280.031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15.037 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1681.747 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 202417.271 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce":
[info]   13265.997 ±(99.9%) 556.857 ops/s [Average]
[info]   (min, avg, max) = (13071.826, 13265.997, 13424.210), stdev = 144.614
[info]   CI (99.9%): [12709.140, 13822.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1578.512 ±(99.9%) 65.418 MB/sec [Average]
[info]   (min, avg, max) = (1555.982, 1578.512, 1597.039), stdev = 16.989
[info]   CI (99.9%): [1513.094, 1643.929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   187270.043 ±(99.9%) 49.349 B/op [Average]
[info]   (min, avg, max) = (187256.030, 187270.043, 187280.031), stdev = 12.816
[info]   CI (99.9%): [187220.694, 187319.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.096 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.096, 0.125), stdev = 0.019
[info]   CI (99.9%): [0.024, 0.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   11.370 ±(99.9%) 8.802 B/op [Average]
[info]   (min, avg, max) = (9.792, 11.370, 15.037), stdev = 2.286
[info]   CI (99.9%): [2.568, 20.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1592.199 ±(99.9%) 552.576 MB/sec [Average]
[info]   (min, avg, max) = (1337.500, 1592.199, 1681.747), stdev = 143.502
[info]   CI (99.9%): [1039.623, 2144.775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   188877.320 ±(99.9%) 64603.176 B/op [Average]
[info]   (min, avg, max) = (159704.233, 188877.320, 202417.271), stdev = 16777.240
[info]   CI (99.9%): [124274.144, 253480.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala
[info] # Run progress: 7.19% complete, ETA 01:02:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4505.951 ops/s
[info] # Warmup Iteration   2: 11975.973 ops/s
[info] # Warmup Iteration   3: 12765.973 ops/s
[info] Iteration   1: 12754.747 ops/s
[info]                  ·gc.alloc.rate:                   1410.569 MB/sec
[info]                  ·gc.alloc.rate.norm:              174064.167 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.569 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1314.872 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 162255.156 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 12934.104 ops/s
[info]                  ·gc.alloc.rate:                   1430.346 MB/sec
[info]                  ·gc.alloc.rate.norm:              174064.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.066 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1325.517 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 161306.914 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 12915.660 ops/s
[info]                  ·gc.alloc.rate:                   1425.734 MB/sec
[info]                  ·gc.alloc.rate.norm:              174064.548 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.146 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1665.817 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 203375.690 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 12985.182 ops/s
[info]                  ·gc.alloc.rate:                   1436.060 MB/sec
[info]                  ·gc.alloc.rate.norm:              174064.052 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.569 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.468 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 162719.813 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 12968.235 ops/s
[info]                  ·gc.alloc.rate:                   1434.306 MB/sec
[info]                  ·gc.alloc.rate.norm:              174064.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15.158 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.915 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 163579.796 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala":
[info]   12911.586 ±(99.9%) 353.691 ops/s [Average]
[info]   (min, avg, max) = (12754.747, 12911.586, 12985.182), stdev = 91.852
[info]   CI (99.9%): [12557.895, 13265.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1427.403 ±(99.9%) 39.336 MB/sec [Average]
[info]   (min, avg, max) = (1410.569, 1427.403, 1436.060), stdev = 10.216
[info]   CI (99.9%): [1388.067, 1466.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   174064.162 ±(99.9%) 0.863 B/op [Average]
[info]   (min, avg, max) = (174064.011, 174064.162, 174064.548), stdev = 0.224
[info]   CI (99.9%): [174063.299, 174065.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.125), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   8.102 ±(99.9%) 18.675 B/op [Average]
[info]   (min, avg, max) = (2.569, 8.102, 15.158), stdev = 4.850
[info]   CI (99.9%): [≈ 0, 26.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1399.318 ±(99.9%) 575.906 MB/sec [Average]
[info]   (min, avg, max) = (1314.872, 1399.318, 1665.817), stdev = 149.561
[info]   CI (99.9%): [823.412, 1975.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   170647.474 ±(99.9%) 70520.764 B/op [Average]
[info]   (min, avg, max) = (161306.914, 170647.474, 203375.690), stdev = 18314.018
[info]   CI (99.9%): [100126.710, 241168.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 0.837
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala
[info] # Run progress: 7.53% complete, ETA 01:02:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10121.679 ops/s
[info] # Warmup Iteration   2: 14207.968 ops/s
[info] # Warmup Iteration   3: 14389.106 ops/s
[info] Iteration   1: 14648.143 ops/s
[info]                  ·gc.alloc.rate:                   1568.117 MB/sec
[info]                  ·gc.alloc.rate.norm:              168472.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.183 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1309.019 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 140635.577 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 14259.625 ops/s
[info]                  ·gc.alloc.rate:                   1525.951 MB/sec
[info]                  ·gc.alloc.rate.norm:              168472.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.893 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1648.191 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 181967.859 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 14150.973 ops/s
[info]                  ·gc.alloc.rate:                   1514.516 MB/sec
[info]                  ·gc.alloc.rate.norm:              168472.031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.315 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1660.975 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 184763.921 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 14439.177 ops/s
[info]                  ·gc.alloc.rate:                   1545.424 MB/sec
[info]                  ·gc.alloc.rate.norm:              168472.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.345 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1337.384 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 145792.869 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 14523.417 ops/s
[info]                  ·gc.alloc.rate:                   1554.364 MB/sec
[info]                  ·gc.alloc.rate.norm:              168472.035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.279 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1680.668 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 182161.747 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala":
[info]   14404.267 ±(99.9%) 770.056 ops/s [Average]
[info]   (min, avg, max) = (14150.973, 14404.267, 14648.143), stdev = 199.981
[info]   CI (99.9%): [13634.210, 15174.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1541.674 ±(99.9%) 83.015 MB/sec [Average]
[info]   (min, avg, max) = (1514.516, 1541.674, 1568.117), stdev = 21.559
[info]   CI (99.9%): [1458.660, 1624.689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   168472.031 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (168472.028, 168472.031, 168472.035), stdev = 0.003
[info]   CI (99.9%): [168472.020, 168472.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.079, 0.104), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   8.603 ±(99.9%) 15.378 B/op [Average]
[info]   (min, avg, max) = (2.315, 8.603, 11.345), stdev = 3.994
[info]   CI (99.9%): [≈ 0, 23.981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1527.248 ±(99.9%) 719.669 MB/sec [Average]
[info]   (min, avg, max) = (1309.019, 1527.248, 1680.668), stdev = 186.896
[info]   CI (99.9%): [807.578, 2246.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   167064.395 ±(99.9%) 84237.550 B/op [Average]
[info]   (min, avg, max) = (140635.577, 167064.395, 184763.921), stdev = 21876.224
[info]   CI (99.9%): [82826.844, 251301.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 6.000), stdev = 0.894
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 7.88% complete, ETA 01:01:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11610.655 ops/s
[info] # Warmup Iteration   2: 14605.604 ops/s
[info] # Warmup Iteration   3: 14863.301 ops/s
[info] Iteration   1: 14947.376 ops/s
[info]                  ·gc.alloc.rate:                   1527.268 MB/sec
[info]                  ·gc.alloc.rate.norm:              160832.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.575 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1637.354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 172424.861 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 14446.979 ops/s
[info]                  ·gc.alloc.rate:                   1476.048 MB/sec
[info]                  ·gc.alloc.rate.norm:              160832.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.071 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1319.394 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 143762.825 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 14463.748 ops/s
[info]                  ·gc.alloc.rate:                   1477.854 MB/sec
[info]                  ·gc.alloc.rate.norm:              160832.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.265 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1327.782 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 144499.949 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 14440.112 ops/s
[info]                  ·gc.alloc.rate:                   1475.540 MB/sec
[info]                  ·gc.alloc.rate.norm:              160832.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.538 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1670.624 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 182095.874 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 14562.711 ops/s
[info]                  ·gc.alloc.rate:                   1487.966 MB/sec
[info]                  ·gc.alloc.rate.norm:              160832.136 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.250 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.098 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 145281.591 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc":
[info]   14572.185 ±(99.9%) 829.759 ops/s [Average]
[info]   (min, avg, max) = (14440.112, 14572.185, 14947.376), stdev = 215.486
[info]   CI (99.9%): [13742.426, 15401.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1488.935 ±(99.9%) 84.772 MB/sec [Average]
[info]   (min, avg, max) = (1475.540, 1488.935, 1527.268), stdev = 22.015
[info]   CI (99.9%): [1404.164, 1573.707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   160832.050 ±(99.9%) 0.185 B/op [Average]
[info]   (min, avg, max) = (160832.027, 160832.050, 160832.136), stdev = 0.048
[info]   CI (99.9%): [160831.864, 160832.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.046, 0.083), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   4.940 ±(99.9%) 11.275 B/op [Average]
[info]   (min, avg, max) = (2.250, 4.940, 9.071), stdev = 2.928
[info]   CI (99.9%): [≈ 0, 16.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   1459.850 ±(99.9%) 684.781 MB/sec [Average]
[info]   (min, avg, max) = (1319.394, 1459.850, 1670.624), stdev = 177.835
[info]   CI (99.9%): [775.069, 2144.631] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   157613.020 ±(99.9%) 70337.402 B/op [Average]
[info]   (min, avg, max) = (143762.825, 157613.020, 182095.874), stdev = 18266.400
[info]   CI (99.9%): [87275.618, 227950.421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 0.837
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson
[info] # Run progress: 8.22% complete, ETA 01:01:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2920.443 ops/s
[info] # Warmup Iteration   2: 4291.450 ops/s
[info] # Warmup Iteration   3: 4370.364 ops/s
[info] Iteration   1: 4419.925 ops/s
[info]                  ·gc.alloc.rate:                   1090.017 MB/sec
[info]                  ·gc.alloc.rate.norm:              388047.725 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      970.039 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 345335.140 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 4456.672 ops/s
[info]                  ·gc.alloc.rate:                   1098.882 MB/sec
[info]                  ·gc.alloc.rate.norm:              388048.092 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36.752 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1297.854 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 458310.977 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 4481.416 ops/s
[info]                  ·gc.alloc.rate:                   1104.786 MB/sec
[info]                  ·gc.alloc.rate.norm:              388048.468 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29.238 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      978.573 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 343716.804 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 4459.432 ops/s
[info]                  ·gc.alloc.rate:                   1099.414 MB/sec
[info]                  ·gc.alloc.rate.norm:              388048.099 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.345 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      985.277 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 347762.428 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 4497.259 ops/s
[info]                  ·gc.alloc.rate:                   1108.845 MB/sec
[info]                  ·gc.alloc.rate.norm:              388047.715 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21.850 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1322.662 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 462874.402 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson":
[info]   4462.941 ±(99.9%) 112.612 ops/s [Average]
[info]   (min, avg, max) = (4419.925, 4462.941, 4497.259), stdev = 29.245
[info]   CI (99.9%): [4350.329, 4575.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1100.389 ±(99.9%) 27.339 MB/sec [Average]
[info]   (min, avg, max) = (1090.017, 1100.389, 1108.845), stdev = 7.100
[info]   CI (99.9%): [1073.049, 1127.728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   388048.020 ±(99.9%) 1.204 B/op [Average]
[info]   (min, avg, max) = (388047.715, 388048.020, 388048.468), stdev = 0.313
[info]   CI (99.9%): [388046.815, 388049.224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.104), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   19.037 ±(99.9%) 58.553 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 19.037, 36.752), stdev = 15.206
[info]   CI (99.9%): [≈ 0, 77.590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1110.881 ±(99.9%) 701.960 MB/sec [Average]
[info]   (min, avg, max) = (970.039, 1110.881, 1322.662), stdev = 182.297
[info]   CI (99.9%): [408.920, 1812.841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   391599.950 ±(99.9%) 242662.109 B/op [Average]
[info]   (min, avg, max) = (343716.804, 391599.950, 462874.402), stdev = 63018.579
[info]   CI (99.9%): [148937.841, 634262.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.600, 5.000), stdev = 1.140
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce
[info] # Run progress: 8.56% complete, ETA 01:01:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5184.418 ops/s
[info] # Warmup Iteration   2: 8128.127 ops/s
[info] # Warmup Iteration   3: 8413.571 ops/s
[info] Iteration   1: 8067.779 ops/s
[info]                  ·gc.alloc.rate:                   1192.239 MB/sec
[info]                  ·gc.alloc.rate.norm:              232520.051 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16.242 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      983.367 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 191784.161 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 8222.255 ops/s
[info]                  ·gc.alloc.rate:                   1214.511 MB/sec
[info]                  ·gc.alloc.rate.norm:              232520.054 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19.922 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1314.634 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 251688.840 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 8410.091 ops/s
[info]                  ·gc.alloc.rate:                   1242.350 MB/sec
[info]                  ·gc.alloc.rate.norm:              232520.049 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.686 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1322.040 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 247435.017 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 8133.946 ops/s
[info]                  ·gc.alloc.rate:                   1201.744 MB/sec
[info]                  ·gc.alloc.rate.norm:              232520.050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.053 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1329.878 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 257312.149 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 8170.915 ops/s
[info]                  ·gc.alloc.rate:                   1207.123 MB/sec
[info]                  ·gc.alloc.rate.norm:              232522.623 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1002.856 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 193175.620 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce":
[info]   8200.997 ±(99.9%) 499.546 ops/s [Average]
[info]   (min, avg, max) = (8067.779, 8200.997, 8410.091), stdev = 129.731
[info]   CI (99.9%): [7701.451, 8700.544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1211.593 ±(99.9%) 73.214 MB/sec [Average]
[info]   (min, avg, max) = (1192.239, 1211.593, 1242.350), stdev = 19.013
[info]   CI (99.9%): [1138.380, 1284.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   232520.565 ±(99.9%) 4.429 B/op [Average]
[info]   (min, avg, max) = (232520.049, 232520.565, 232522.623), stdev = 1.150
[info]   CI (99.9%): [232516.136, 232524.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.104), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   11.983 ±(99.9%) 24.374 B/op [Average]
[info]   (min, avg, max) = (4.010, 11.983, 19.922), stdev = 6.330
[info]   CI (99.9%): [≈ 0, 36.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1190.555 ±(99.9%) 694.858 MB/sec [Average]
[info]   (min, avg, max) = (983.367, 1190.555, 1329.878), stdev = 180.452
[info]   CI (99.9%): [495.697, 1885.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   228279.157 ±(99.9%) 126574.625 B/op [Average]
[info]   (min, avg, max) = (191784.161, 228279.157, 257312.149), stdev = 32871.028
[info]   CI (99.9%): [101704.533, 354853.782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala
[info] # Run progress: 8.90% complete, ETA 01:00:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15585.506 ops/s
[info] # Warmup Iteration   2: 23411.453 ops/s
[info] # Warmup Iteration   3: 23422.816 ops/s
[info] Iteration   1: 24542.817 ops/s
[info]                  ·gc.alloc.rate:                   908.161 MB/sec
[info]                  ·gc.alloc.rate.norm:              58248.828 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.335 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      980.732 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62903.453 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 24354.575 ops/s
[info]                  ·gc.alloc.rate:                   901.196 MB/sec
[info]                  ·gc.alloc.rate.norm:              58245.769 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.345 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.374 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 42487.151 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 23971.234 ops/s
[info]                  ·gc.alloc.rate:                   886.802 MB/sec
[info]                  ·gc.alloc.rate.norm:              58216.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.834 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      991.687 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65101.371 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 24833.403 ops/s
[info]                  ·gc.alloc.rate:                   918.558 MB/sec
[info]                  ·gc.alloc.rate.norm:              58216.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.958 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      996.877 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63179.691 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 24822.595 ops/s
[info]                  ·gc.alloc.rate:                   918.068 MB/sec
[info]                  ·gc.alloc.rate.norm:              58216.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.960 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1002.116 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63545.581 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala":
[info]   24504.925 ±(99.9%) 1385.268 ops/s [Average]
[info]   (min, avg, max) = (23971.234, 24504.925, 24833.403), stdev = 359.750
[info]   CI (99.9%): [23119.656, 25890.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   906.557 ±(99.9%) 50.870 MB/sec [Average]
[info]   (min, avg, max) = (886.802, 906.557, 918.558), stdev = 13.211
[info]   CI (99.9%): [855.687, 957.427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   58228.529 ±(99.9%) 66.106 B/op [Average]
[info]   (min, avg, max) = (58216.016, 58228.529, 58248.828), stdev = 17.167
[info]   CI (99.9%): [58162.424, 58294.635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.054, 0.104), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3.486 ±(99.9%) 8.794 B/op [Average]
[info]   (min, avg, max) = (1.335, 3.486, 6.834), stdev = 2.284
[info]   CI (99.9%): [≈ 0, 12.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   925.757 ±(99.9%) 578.518 MB/sec [Average]
[info]   (min, avg, max) = (657.374, 925.757, 1002.116), stdev = 150.239
[info]   CI (99.9%): [347.239, 1504.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   59443.449 ±(99.9%) 36646.254 B/op [Average]
[info]   (min, avg, max) = (42487.151, 59443.449, 65101.371), stdev = 9516.916
[info]   CI (99.9%): [22797.195, 96089.703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.400, 4.000), stdev = 0.894
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala
[info] # Run progress: 9.25% complete, ETA 01:00:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24382.114 ops/s
[info] # Warmup Iteration   2: 27039.148 ops/s
[info] # Warmup Iteration   3: 27220.714 ops/s
[info] Iteration   1: 27953.019 ops/s
[info]                  ·gc.alloc.rate:                   507.508 MB/sec
[info]                  ·gc.alloc.rate.norm:              28568.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.666 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     150.078 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      587.368 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33063.376 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 28141.635 ops/s
[info]                  ·gc.alloc.rate:                   510.765 MB/sec
[info]                  ·gc.alloc.rate.norm:              28568.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      331.373 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18534.305 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 27534.538 ops/s
[info]                  ·gc.alloc.rate:                   499.726 MB/sec
[info]                  ·gc.alloc.rate.norm:              28568.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.760 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.741 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37772.801 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 27859.990 ops/s
[info]                  ·gc.alloc.rate:                   505.676 MB/sec
[info]                  ·gc.alloc.rate.norm:              28568.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.176 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.703 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18626.467 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 27874.948 ops/s
[info]                  ·gc.alloc.rate:                   506.177 MB/sec
[info]                  ·gc.alloc.rate.norm:              28568.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      659.728 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37234.227 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala":
[info]   27872.826 ±(99.9%) 846.478 ops/s [Average]
[info]   (min, avg, max) = (27534.538, 27872.826, 28141.635), stdev = 219.828
[info]   CI (99.9%): [27026.348, 28719.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   505.971 ±(99.9%) 15.460 MB/sec [Average]
[info]   (min, avg, max) = (499.726, 505.971, 510.765), stdev = 4.015
[info]   CI (99.9%): [490.511, 521.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   28568.016 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (28568.014, 28568.016, 28568.019), stdev = 0.002
[info]   CI (99.9%): [28568.007, 28568.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.579 ±(99.9%) 4.497 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.579, 2.666), stdev = 1.168
[info]   CI (99.9%): [≈ 0, 5.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   32.613 ±(99.9%) 253.084 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 32.613, 150.078), stdev = 65.725
[info]   CI (99.9%): [≈ 0, 285.697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   513.783 ±(99.9%) 654.241 MB/sec [Average]
[info]   (min, avg, max) = (329.703, 513.783, 660.741), stdev = 169.904
[info]   CI (99.9%): [≈ 0, 1168.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   29046.235 ±(99.9%) 37452.626 B/op [Average]
[info]   (min, avg, max) = (18534.305, 29046.235, 37772.801), stdev = 9726.328
[info]   CI (99.9%): [≈ 0, 66498.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 5.000), stdev = 1.732
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala
[info] # Run progress: 9.59% complete, ETA 01:00:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8483.854 ops/s
[info] # Warmup Iteration   2: 14859.757 ops/s
[info] # Warmup Iteration   3: 15132.341 ops/s
[info] Iteration   1: 15132.368 ops/s
[info]                  ·gc.alloc.rate:                   1451.725 MB/sec
[info]                  ·gc.alloc.rate.norm:              150944.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21.613 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1649.319 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 171488.965 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 15289.386 ops/s
[info]                  ·gc.alloc.rate:                   1466.370 MB/sec
[info]                  ·gc.alloc.rate.norm:              150944.044 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.714 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1331.607 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 137071.895 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 15493.928 ops/s
[info]                  ·gc.alloc.rate:                   1485.843 MB/sec
[info]                  ·gc.alloc.rate.norm:              150944.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.458 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.434 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 136070.616 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 15419.493 ops/s
[info]                  ·gc.alloc.rate:                   1478.774 MB/sec
[info]                  ·gc.alloc.rate.norm:              150943.917 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.499 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1682.592 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 171748.345 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 15446.790 ops/s
[info]                  ·gc.alloc.rate:                   1481.149 MB/sec
[info]                  ·gc.alloc.rate.norm:              150944.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.605 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.586 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 137638.325 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala":
[info]   15356.393 ±(99.9%) 563.782 ops/s [Average]
[info]   (min, avg, max) = (15132.368, 15356.393, 15493.928), stdev = 146.412
[info]   CI (99.9%): [14792.611, 15920.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1472.772 ±(99.9%) 53.113 MB/sec [Average]
[info]   (min, avg, max) = (1451.725, 1472.772, 1485.843), stdev = 13.793
[info]   CI (99.9%): [1419.659, 1525.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   150944.003 ±(99.9%) 0.193 B/op [Average]
[info]   (min, avg, max) = (150943.917, 150944.003, 150944.044), stdev = 0.050
[info]   CI (99.9%): [150943.810, 150944.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.117 ±(99.9%) 0.201 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.117, 0.208), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   11.978 ±(99.9%) 21.163 B/op [Average]
[info]   (min, avg, max) = (8.458, 11.978, 21.613), stdev = 5.496
[info]   CI (99.9%): [≈ 0, 33.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1470.707 ±(99.9%) 688.308 MB/sec [Average]
[info]   (min, avg, max) = (1331.607, 1470.707, 1682.592), stdev = 178.751
[info]   CI (99.9%): [782.400, 2159.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   150803.629 ±(99.9%) 73200.519 B/op [Average]
[info]   (min, avg, max) = (136070.616, 150803.629, 171748.345), stdev = 19009.942
[info]   CI (99.9%): [77603.110, 224004.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 0.837
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala
[info] # Run progress: 9.93% complete, ETA 00:59:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14962.598 ops/s
[info] # Warmup Iteration   2: 17189.598 ops/s
[info] # Warmup Iteration   3: 17333.141 ops/s
[info] Iteration   1: 17255.413 ops/s
[info]                  ·gc.alloc.rate:                   1563.983 MB/sec
[info]                  ·gc.alloc.rate.norm:              142648.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.696 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1311.918 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 119657.595 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 16966.860 ops/s
[info]                  ·gc.alloc.rate:                   1537.503 MB/sec
[info]                  ·gc.alloc.rate.norm:              142648.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15.448 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1650.756 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 153155.496 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 17093.019 ops/s
[info]                  ·gc.alloc.rate:                   1548.975 MB/sec
[info]                  ·gc.alloc.rate.norm:              142648.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.667 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1664.038 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 153244.451 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 17497.902 ops/s
[info]                  ·gc.alloc.rate:                   1585.761 MB/sec
[info]                  ·gc.alloc.rate.norm:              142648.031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.617 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1674.791 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 150656.783 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 17192.014 ops/s
[info]                  ·gc.alloc.rate:                   1558.160 MB/sec
[info]                  ·gc.alloc.rate.norm:              142648.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.717 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.868 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 123304.488 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala":
[info]   17201.042 ±(99.9%) 764.510 ops/s [Average]
[info]   (min, avg, max) = (16966.860, 17201.042, 17497.902), stdev = 198.541
[info]   CI (99.9%): [16436.532, 17965.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1558.876 ±(99.9%) 69.532 MB/sec [Average]
[info]   (min, avg, max) = (1537.503, 1558.876, 1585.761), stdev = 18.057
[info]   CI (99.9%): [1489.344, 1628.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   142648.025 ±(99.9%) 0.013 B/op [Average]
[info]   (min, avg, max) = (142648.024, 142648.025, 142648.031), stdev = 0.003
[info]   CI (99.9%): [142648.013, 142648.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.167), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   8.029 ±(99.9%) 16.313 B/op [Average]
[info]   (min, avg, max) = (5.617, 8.029, 15.448), stdev = 4.236
[info]   CI (99.9%): [≈ 0, 24.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1529.674 ±(99.9%) 706.384 MB/sec [Average]
[info]   (min, avg, max) = (1311.918, 1529.674, 1674.791), stdev = 183.446
[info]   CI (99.9%): [823.290, 2236.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   140003.763 ±(99.9%) 65421.383 B/op [Average]
[info]   (min, avg, max) = (119657.595, 140003.763, 153244.451), stdev = 16989.725
[info]   CI (99.9%): [74582.380, 205425.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 10.000), stdev = 2.608
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 10.27% complete, ETA 00:59:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14765.763 ops/s
[info] # Warmup Iteration   2: 17310.034 ops/s
[info] # Warmup Iteration   3: 17266.672 ops/s
[info] Iteration   1: 17074.562 ops/s
[info]                  ·gc.alloc.rate:                   1490.877 MB/sec
[info]                  ·gc.alloc.rate.norm:              137440.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.594 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1638.758 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 151072.798 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 17867.028 ops/s
[info]                  ·gc.alloc.rate:                   1559.928 MB/sec
[info]                  ·gc.alloc.rate.norm:              137440.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1319.582 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 116263.966 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 17825.793 ops/s
[info]                  ·gc.alloc.rate:                   1556.489 MB/sec
[info]                  ·gc.alloc.rate.norm:              137440.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.676 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1661.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 146679.485 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 17613.346 ops/s
[info]                  ·gc.alloc.rate:                   1538.017 MB/sec
[info]                  ·gc.alloc.rate.norm:              137440.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.720 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1673.247 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 149524.461 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 17684.515 ops/s
[info]                  ·gc.alloc.rate:                   1544.334 MB/sec
[info]                  ·gc.alloc.rate.norm:              137440.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.558 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.629 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 119755.952 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   17613.049 ±(99.9%) 1225.026 ops/s [Average]
[info]   (min, avg, max) = (17074.562, 17613.049, 17867.028), stdev = 318.135
[info]   CI (99.9%): [16388.022, 18838.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1537.929 ±(99.9%) 106.910 MB/sec [Average]
[info]   (min, avg, max) = (1490.877, 1537.929, 1559.928), stdev = 27.764
[info]   CI (99.9%): [1431.019, 1644.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   137440.027 ±(99.9%) 0.021 B/op [Average]
[info]   (min, avg, max) = (137440.023, 137440.027, 137440.036), stdev = 0.005
[info]   CI (99.9%): [137440.007, 137440.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.125), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   6.710 ±(99.9%) 13.087 B/op [Average]
[info]   (min, avg, max) = (3.676, 6.710, 11.002), stdev = 3.399
[info]   CI (99.9%): [≈ 0, 19.797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   1527.668 ±(99.9%) 688.240 MB/sec [Average]
[info]   (min, avg, max) = (1319.582, 1527.668, 1673.247), stdev = 178.734
[info]   CI (99.9%): [839.428, 2215.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   136659.333 ±(99.9%) 66006.772 B/op [Average]
[info]   (min, avg, max) = (116263.966, 136659.333, 151072.798), stdev = 17141.749
[info]   CI (99.9%): [70652.561, 202666.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce
[info] # Run progress: 10.62% complete, ETA 00:59:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 300979.941 ops/s
[info] # Warmup Iteration   2: 367496.992 ops/s
[info] # Warmup Iteration   3: 369252.693 ops/s
[info] Iteration   1: 368852.943 ops/s
[info]                  ·gc.alloc.rate:                   1865.160 MB/sec
[info]                  ·gc.alloc.rate.norm:              7960.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.711 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1978.998 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8445.829 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 368791.845 ops/s
[info]                  ·gc.alloc.rate:                   1864.780 MB/sec
[info]                  ·gc.alloc.rate.norm:              7960.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.888 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1663.276 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7099.859 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 368917.256 ops/s
[info]                  ·gc.alloc.rate:                   1865.942 MB/sec
[info]                  ·gc.alloc.rate.norm:              7960.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.355 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2011.875 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8582.539 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 370705.351 ops/s
[info]                  ·gc.alloc.rate:                   1874.651 MB/sec
[info]                  ·gc.alloc.rate.norm:              7960.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.354 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1684.501 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7152.602 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 366031.677 ops/s
[info]                  ·gc.alloc.rate:                   1851.774 MB/sec
[info]                  ·gc.alloc.rate.norm:              7960.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.448 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.969 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8725.984 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce":
[info]   368659.814 ±(99.9%) 6446.907 ops/s [Average]
[info]   (min, avg, max) = (366031.677, 368659.814, 370705.351), stdev = 1674.241
[info]   CI (99.9%): [362212.908, 375106.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1864.461 ±(99.9%) 31.493 MB/sec [Average]
[info]   (min, avg, max) = (1851.774, 1864.461, 1874.651), stdev = 8.179
[info]   CI (99.9%): [1832.968, 1895.955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   7960.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7960.001, 7960.001, 7960.001), stdev = 0.001
[info]   CI (99.9%): [7960.001, 7960.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.129 ±(99.9%) 0.215 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.129, 0.208), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.551 ±(99.9%) 0.918 B/op [Average]
[info]   (min, avg, max) = (0.354, 0.551, 0.888), stdev = 0.238
[info]   CI (99.9%): [≈ 0, 1.469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1873.723 ±(99.9%) 706.555 MB/sec [Average]
[info]   (min, avg, max) = (1663.276, 1873.723, 2029.969), stdev = 183.490
[info]   CI (99.9%): [1167.169, 2580.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   8001.363 ±(99.9%) 3100.603 B/op [Average]
[info]   (min, avg, max) = (7099.859, 8001.363, 8725.984), stdev = 805.217
[info]   CI (99.9%): [4900.760, 11101.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 1.000
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala
[info] # Run progress: 10.96% complete, ETA 00:58:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 434620.832 ops/s
[info] # Warmup Iteration   2: 684837.722 ops/s
[info] # Warmup Iteration   3: 683713.716 ops/s
[info] Iteration   1: 687067.452 ops/s
[info]                  ·gc.alloc.rate:                   569.229 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.334 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      647.468 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1483.231 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 686063.992 ops/s
[info]                  ·gc.alloc.rate:                   568.349 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.096 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      651.407 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1494.567 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 688943.504 ops/s
[info]                  ·gc.alloc.rate:                   570.777 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.190 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.778 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1495.909 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 688472.698 ops/s
[info]                  ·gc.alloc.rate:                   570.540 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.802 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 751.494 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 701163.403 ops/s
[info]                  ·gc.alloc.rate:                   580.847 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.234 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658.722 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1478.830 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala":
[info]   690342.210 ±(99.9%) 23703.901 ops/s [Average]
[info]   (min, avg, max) = (686063.992, 690342.210, 701163.403), stdev = 6155.828
[info]   CI (99.9%): [666638.308, 714046.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   571.948 ±(99.9%) 19.529 MB/sec [Average]
[info]   (min, avg, max) = (568.349, 571.948, 580.847), stdev = 5.072
[info]   CI (99.9%): [552.419, 591.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1304.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1304.001, 1304.001, 1304.001), stdev = 0.001
[info]   CI (99.9%): [1304.001, 1304.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.217 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.075, 0.146), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.171 ±(99.9%) 0.494 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.171, 0.334), stdev = 0.128
[info]   CI (99.9%): [≈ 0, 0.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   588.235 ±(99.9%) 558.680 MB/sec [Average]
[info]   (min, avg, max) = (328.802, 588.235, 658.722), stdev = 145.087
[info]   CI (99.9%): [29.555, 1146.915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1340.806 ±(99.9%) 1268.849 B/op [Average]
[info]   (min, avg, max) = (751.494, 1340.806, 1495.909), stdev = 329.516
[info]   CI (99.9%): [71.957, 2609.655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala
[info] # Run progress: 11.30% complete, ETA 00:58:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1637896.830 ops/s
[info] # Warmup Iteration   2: 1719759.114 ops/s
[info] # Warmup Iteration   3: 1686894.231 ops/s
[info] Iteration   1: 1707739.340 ops/s
[info]                  ·gc.alloc.rate:                   329.784 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.737 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 235.743 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1683609.673 ops/s
[info]                  ·gc.alloc.rate:                   325.102 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.724 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 239.125 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1694756.962 ops/s
[info]                  ·gc.alloc.rate:                   327.410 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.308 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.071 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.141 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 306.536 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1693166.597 ops/s
[info]                  ·gc.alloc.rate:                   326.999 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.036 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 306.824 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1629849.429 ops/s
[info]                  ·gc.alloc.rate:                   314.803 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.392 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 317.123 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala":
[info]   1681824.400 ±(99.9%) 116669.832 ops/s [Average]
[info]   (min, avg, max) = (1629849.429, 1681824.400, 1707739.340), stdev = 30298.785
[info]   CI (99.9%): [1565154.568, 1798494.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   324.820 ±(99.9%) 22.495 MB/sec [Average]
[info]   (min, avg, max) = (314.803, 324.820, 329.784), stdev = 5.842
[info]   CI (99.9%): [302.324, 347.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   304.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (304.000, 304.000, 304.000), stdev = 0.001
[info]   CI (99.9%): [304.000, 304.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.670 ±(99.9%) 5.678 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.670, 3.308), stdev = 1.475
[info]   CI (99.9%): [≈ 0, 6.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.622 ±(99.9%) 5.272 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.622, 3.071), stdev = 1.369
[info]   CI (99.9%): [≈ 0, 5.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   300.006 ±(99.9%) 155.658 MB/sec [Average]
[info]   (min, avg, max) = (255.724, 300.006, 330.141), stdev = 40.424
[info]   CI (99.9%): [144.348, 455.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   281.070 ±(99.9%) 154.333 B/op [Average]
[info]   (min, avg, max) = (235.743, 281.070, 317.123), stdev = 40.080
[info]   CI (99.9%): [126.738, 435.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson
[info] # Run progress: 11.64% complete, ETA 00:58:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 60548.668 ops/s
[info] # Warmup Iteration   2: 104274.983 ops/s
[info] # Warmup Iteration   3: 105017.317 ops/s
[info] Iteration   1: 101256.366 ops/s
[info]                  ·gc.alloc.rate:                   3679.264 MB/sec
[info]                  ·gc.alloc.rate.norm:              57176.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.618 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3382.078 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52557.709 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 102273.531 ops/s
[info]                  ·gc.alloc.rate:                   3714.992 MB/sec
[info]                  ·gc.alloc.rate.norm:              57176.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.602 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3734.687 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57479.109 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 104009.266 ops/s
[info]                  ·gc.alloc.rate:                   3778.127 MB/sec
[info]                  ·gc.alloc.rate.norm:              57176.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.835 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3742.727 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 56640.281 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   4: 104676.422 ops/s
[info]                  ·gc.alloc.rate:                   3802.438 MB/sec
[info]                  ·gc.alloc.rate.norm:              57176.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.130 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4084.520 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61417.582 B/op
[info]                  ·gc.count:                        12.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   5: 105627.725 ops/s
[info]                  ·gc.alloc.rate:                   3837.274 MB/sec
[info]                  ·gc.alloc.rate.norm:              57176.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.171 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3744.431 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55792.636 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson":
[info]   103568.662 ±(99.9%) 6857.251 ops/s [Average]
[info]   (min, avg, max) = (101256.366, 103568.662, 105627.725), stdev = 1780.806
[info]   CI (99.9%): [96711.411, 110425.913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3762.419 ±(99.9%) 248.176 MB/sec [Average]
[info]   (min, avg, max) = (3679.264, 3762.419, 3837.274), stdev = 64.450
[info]   CI (99.9%): [3514.243, 4010.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   57176.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (57176.004, 57176.004, 57176.004), stdev = 0.001
[info]   CI (99.9%): [57176.003, 57176.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.150 ±(99.9%) 0.183 MB/sec [Average]
[info]   (min, avg, max) = (0.104, 0.150, 0.208), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2.271 ±(99.9%) 2.682 B/op [Average]
[info]   (min, avg, max) = (1.602, 2.271, 3.130), stdev = 0.696
[info]   CI (99.9%): [≈ 0, 4.953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   3737.689 ±(99.9%) 956.540 MB/sec [Average]
[info]   (min, avg, max) = (3382.078, 3737.689, 4084.520), stdev = 248.410
[info]   CI (99.9%): [2781.149, 4694.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   56777.463 ±(99.9%) 12300.688 B/op [Average]
[info]   (min, avg, max) = (52557.709, 56777.463, 61417.582), stdev = 3194.450
[info]   CI (99.9%): [44476.776, 69078.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   55.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (10.000, 11.000, 12.000), stdev = 0.707
[info]   CI (99.9%): [55.000, 55.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   58.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (10.000, 11.600, 13.000), stdev = 1.140
[info]   CI (99.9%): [58.000, 58.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce
[info] # Run progress: 11.99% complete, ETA 00:57:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 239012.969 ops/s
[info] # Warmup Iteration   2: 301260.487 ops/s
[info] # Warmup Iteration   3: 313353.946 ops/s
[info] Iteration   1: 313812.603 ops/s
[info]                  ·gc.alloc.rate:                   768.867 MB/sec
[info]                  ·gc.alloc.rate.norm:              3856.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.626 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      978.271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4906.195 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 313039.804 ops/s
[info]                  ·gc.alloc.rate:                   766.915 MB/sec
[info]                  ·gc.alloc.rate.norm:              3856.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.419 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      651.448 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3275.439 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 314700.983 ops/s
[info]                  ·gc.alloc.rate:                   771.182 MB/sec
[info]                  ·gc.alloc.rate.norm:              3856.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.312 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      651.609 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3258.123 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 315120.336 ops/s
[info]                  ·gc.alloc.rate:                   771.990 MB/sec
[info]                  ·gc.alloc.rate.norm:              3856.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      980.138 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4895.675 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 318594.238 ops/s
[info]                  ·gc.alloc.rate:                   780.552 MB/sec
[info]                  ·gc.alloc.rate.norm:              3856.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.309 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.138 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3241.383 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce":
[info]   315053.593 ±(99.9%) 8227.313 ops/s [Average]
[info]   (min, avg, max) = (313039.804, 315053.593, 318594.238), stdev = 2136.607
[info]   CI (99.9%): [306826.280, 323280.906] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   771.901 ±(99.9%) 20.140 MB/sec [Average]
[info]   (min, avg, max) = (766.915, 771.901, 780.552), stdev = 5.230
[info]   CI (99.9%): [751.762, 792.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   3856.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3856.001, 3856.001, 3856.001), stdev = 0.001
[info]   CI (99.9%): [3856.001, 3856.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.067, 0.125), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.333 ±(99.9%) 0.872 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.333, 0.626), stdev = 0.227
[info]   CI (99.9%): [≈ 0, 1.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   783.521 ±(99.9%) 687.898 MB/sec [Average]
[info]   (min, avg, max) = (651.448, 783.521, 980.138), stdev = 178.645
[info]   CI (99.9%): [95.623, 1471.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3915.363 ±(99.9%) 3464.763 B/op [Average]
[info]   (min, avg, max) = (3241.383, 3915.363, 4906.195), stdev = 899.788
[info]   CI (99.9%): [450.600, 7380.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 4.000), stdev = 0.894
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala
[info] # Run progress: 12.33% complete, ETA 00:57:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 715088.518 ops/s
[info] # Warmup Iteration   2: 1097893.149 ops/s
[info] # Warmup Iteration   3: 1055049.679 ops/s
[info] Iteration   1: 1097032.725 ops/s
[info]                  ·gc.alloc.rate:                   774.940 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.119 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      645.373 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 926.078 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1111105.952 ops/s
[info]                  ·gc.alloc.rate:                   784.965 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.118 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      975.487 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1381.899 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1110631.365 ops/s
[info]                  ·gc.alloc.rate:                   784.470 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.088 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.633 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 926.536 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1109884.778 ops/s
[info]                  ·gc.alloc.rate:                   784.073 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.118 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      986.432 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1398.993 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1112657.599 ops/s
[info]                  ·gc.alloc.rate:                   786.187 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.118 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      661.521 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 935.670 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala":
[info]   1108262.484 ±(99.9%) 24486.679 ops/s [Average]
[info]   (min, avg, max) = (1097032.725, 1108262.484, 1112657.599), stdev = 6359.113
[info]   CI (99.9%): [1083775.805, 1132749.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   782.927 ±(99.9%) 17.462 MB/sec [Average]
[info]   (min, avg, max) = (774.940, 782.927, 786.187), stdev = 4.535
[info]   CI (99.9%): [765.465, 800.389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1112.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1112.000, 1112.000, 1112.000), stdev = 0.001
[info]   CI (99.9%): [1112.000, 1112.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.079, 0.083), stdev = 0.009
[info]   CI (99.9%): [0.043, 0.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.112 ±(99.9%) 0.051 B/op [Average]
[info]   (min, avg, max) = (0.088, 0.112, 0.119), stdev = 0.013
[info]   CI (99.9%): [0.061, 0.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   784.489 ±(99.9%) 691.132 MB/sec [Average]
[info]   (min, avg, max) = (645.373, 784.489, 986.432), stdev = 179.485
[info]   CI (99.9%): [93.357, 1475.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1113.835 ±(99.9%) 972.717 B/op [Average]
[info]   (min, avg, max) = (926.078, 1113.835, 1398.993), stdev = 252.611
[info]   CI (99.9%): [141.118, 2086.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 4.000), stdev = 0.837
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala
[info] # Run progress: 12.67% complete, ETA 00:57:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2055065.560 ops/s
[info] # Warmup Iteration   2: 2300167.106 ops/s
[info] # Warmup Iteration   3: 2317797.853 ops/s
[info] Iteration   1: 2323019.371 ops/s
[info]                  ·gc.alloc.rate:                   1074.394 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1305.485 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 884.586 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2328134.827 ops/s
[info]                  ·gc.alloc.rate:                   1076.689 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.070 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      982.044 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 664.006 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 2345773.636 ops/s
[info]                  ·gc.alloc.rate:                   1084.918 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.056 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      985.417 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 661.233 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 2313883.516 ops/s
[info]                  ·gc.alloc.rate:                   1070.166 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1322.168 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 899.430 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2326254.972 ops/s
[info]                  ·gc.alloc.rate:                   1075.964 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.070 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      997.164 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 674.684 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala":
[info]   2327413.265 ±(99.9%) 44795.334 ops/s [Average]
[info]   (min, avg, max) = (2313883.516, 2327413.265, 2345773.636), stdev = 11633.206
[info]   CI (99.9%): [2282617.931, 2372208.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1076.426 ±(99.9%) 20.712 MB/sec [Average]
[info]   (min, avg, max) = (1070.166, 1076.426, 1084.918), stdev = 5.379
[info]   CI (99.9%): [1055.714, 1097.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   728.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (728.000, 728.000, 728.000), stdev = 0.001
[info]   CI (99.9%): [728.000, 728.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.071, 0.104), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.048 ±(99.9%) 0.098 B/op [Average]
[info]   (min, avg, max) = (0.014, 0.048, 0.070), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1118.456 ±(99.9%) 687.472 MB/sec [Average]
[info]   (min, avg, max) = (982.044, 1118.456, 1322.168), stdev = 178.534
[info]   CI (99.9%): [430.984, 1805.927] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   756.788 ±(99.9%) 476.140 B/op [Average]
[info]   (min, avg, max) = (661.233, 756.788, 899.430), stdev = 123.652
[info]   CI (99.9%): [280.648, 1232.927] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 13.01% complete, ETA 00:56:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2272072.129 ops/s
[info] # Warmup Iteration   2: 2467218.027 ops/s
[info] # Warmup Iteration   3: 2540988.147 ops/s
[info] Iteration   1: 2565472.457 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2446757.278 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2432240.533 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2430785.518 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2570495.201 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2489150.198 ±(99.9%) 278236.685 ops/s [Average]
[info]   (min, avg, max) = (2430785.518, 2489150.198, 2570495.201), stdev = 72257.183
[info]   CI (99.9%): [2210913.513, 2767386.882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson
[info] # Run progress: 13.36% complete, ETA 00:56:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 406710.863 ops/s
[info] # Warmup Iteration   2: 518637.236 ops/s
[info] # Warmup Iteration   3: 553300.554 ops/s
[info] Iteration   1: 562274.385 ops/s
[info]                  ·gc.alloc.rate:                   662.970 MB/sec
[info]                  ·gc.alloc.rate.norm:              1856.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.923 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.982 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      649.388 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1817.978 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 560800.228 ops/s
[info]                  ·gc.alloc.rate:                   661.326 MB/sec
[info]                  ·gc.alloc.rate.norm:              1856.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.175 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      647.481 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1817.144 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 562509.494 ops/s
[info]                  ·gc.alloc.rate:                   663.246 MB/sec
[info]                  ·gc.alloc.rate.norm:              1856.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.233 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      969.788 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2713.814 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 548788.642 ops/s
[info]                  ·gc.alloc.rate:                   647.217 MB/sec
[info]                  ·gc.alloc.rate.norm:              1856.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.239 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      648.127 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1858.612 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 558783.722 ops/s
[info]                  ·gc.alloc.rate:                   659.054 MB/sec
[info]                  ·gc.alloc.rate.norm:              1856.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      649.920 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1830.278 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson":
[info]   558631.294 ±(99.9%) 21945.112 ops/s [Average]
[info]   (min, avg, max) = (548788.642, 558631.294, 562509.494), stdev = 5699.076
[info]   CI (99.9%): [536686.183, 580576.406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   658.763 ±(99.9%) 25.671 MB/sec [Average]
[info]   (min, avg, max) = (647.217, 658.763, 663.246), stdev = 6.667
[info]   CI (99.9%): [633.092, 684.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   1856.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1856.001, 1856.001, 1856.001), stdev = 0.001
[info]   CI (99.9%): [1856.001, 1856.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.830 ±(99.9%) 6.658 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.830, 3.923), stdev = 1.729
[info]   CI (99.9%): [≈ 0, 7.489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2.326 ±(99.9%) 18.638 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.326, 10.982), stdev = 4.840
[info]   CI (99.9%): [≈ 0, 20.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   712.941 ±(99.9%) 552.896 MB/sec [Average]
[info]   (min, avg, max) = (647.481, 712.941, 969.788), stdev = 143.585
[info]   CI (99.9%): [160.045, 1265.837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2007.565 ±(99.9%) 1521.624 B/op [Average]
[info]   (min, avg, max) = (1817.144, 2007.565, 2713.814), stdev = 395.161
[info]   CI (99.9%): [485.941, 3529.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 4.000), stdev = 0.894
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce
[info] # Run progress: 13.70% complete, ETA 00:56:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 137251.950 ops/s
[info] # Warmup Iteration   2: 164572.105 ops/s
[info] # Warmup Iteration   3: 166159.812 ops/s
[info] Iteration   1: 163846.657 ops/s
[info]                  ·gc.alloc.rate:                   1969.372 MB/sec
[info]                  ·gc.alloc.rate.norm:              18920.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1982.081 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19042.100 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 165396.389 ops/s
[info]                  ·gc.alloc.rate:                   1988.311 MB/sec
[info]                  ·gc.alloc.rate.norm:              18920.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.990 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2001.117 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19041.853 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 167453.208 ops/s
[info]                  ·gc.alloc.rate:                   2012.819 MB/sec
[info]                  ·gc.alloc.rate.norm:              18920.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.978 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2014.223 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18933.196 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 168418.264 ops/s
[info]                  ·gc.alloc.rate:                   2024.312 MB/sec
[info]                  ·gc.alloc.rate.norm:              18920.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.973 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2025.429 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18930.443 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 163865.644 ops/s
[info]                  ·gc.alloc.rate:                   1969.767 MB/sec
[info]                  ·gc.alloc.rate.norm:              18920.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.600 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032.316 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19520.800 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce":
[info]   165796.032 ±(99.9%) 8010.012 ops/s [Average]
[info]   (min, avg, max) = (163846.657, 165796.032, 168418.264), stdev = 2080.175
[info]   CI (99.9%): [157786.020, 173806.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate":
[info]   1992.916 ±(99.9%) 96.135 MB/sec [Average]
[info]   (min, avg, max) = (1969.372, 1992.916, 2024.312), stdev = 24.966
[info]   CI (99.9%): [1896.781, 2089.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   18920.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (18920.002, 18920.002, 18920.003), stdev = 0.001
[info]   CI (99.9%): [18920.002, 18920.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.096 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.104), stdev = 0.019
[info]   CI (99.9%): [0.024, 0.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.908 ±(99.9%) 0.665 B/op [Average]
[info]   (min, avg, max) = (0.600, 0.908, 1.000), stdev = 0.173
[info]   CI (99.9%): [0.243, 1.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2011.033 ±(99.9%) 77.179 MB/sec [Average]
[info]   (min, avg, max) = (1982.081, 2011.033, 2032.316), stdev = 20.043
[info]   CI (99.9%): [1933.854, 2088.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   19093.678 ±(99.9%) 943.564 B/op [Average]
[info]   (min, avg, max) = (18930.443, 19093.678, 19520.800), stdev = 245.041
[info]   CI (99.9%): [18150.115, 20037.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala
[info] # Run progress: 14.04% complete, ETA 00:56:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 267856.398 ops/s
[info] # Warmup Iteration   2: 418724.654 ops/s
[info] # Warmup Iteration   3: 421055.709 ops/s
[info] Iteration   1: 442002.851 ops/s
[info]                  ·gc.alloc.rate:                   366.199 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.560 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1821.618 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 424499.040 ops/s
[info]                  ·gc.alloc.rate:                   351.708 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.232 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      323.749 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1200.340 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 424083.285 ops/s
[info]                  ·gc.alloc.rate:                   351.400 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.077 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      323.767 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1201.461 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 438256.233 ops/s
[info]                  ·gc.alloc.rate:                   363.067 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.075 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      325.706 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1169.813 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 423872.412 ops/s
[info]                  ·gc.alloc.rate:                   351.205 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      325.768 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1209.553 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala":
[info]   430542.764 ±(99.9%) 34093.764 ops/s [Average]
[info]   (min, avg, max) = (423872.412, 430542.764, 442002.851), stdev = 8854.042
[info]   CI (99.9%): [396449.000, 464636.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   356.716 ±(99.9%) 28.164 MB/sec [Average]
[info]   (min, avg, max) = (351.205, 356.716, 366.199), stdev = 7.314
[info]   CI (99.9%): [328.552, 384.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1304.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1304.001, 1304.001, 1304.001), stdev = 0.001
[info]   CI (99.9%): [1304.001, 1304.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.077 ±(99.9%) 0.364 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.077, 0.232), stdev = 0.095
[info]   CI (99.9%): [≈ 0, 0.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   362.110 ±(99.9%) 321.725 MB/sec [Average]
[info]   (min, avg, max) = (323.749, 362.110, 511.560), stdev = 83.551
[info]   CI (99.9%): [40.385, 683.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1320.557 ±(99.9%) 1080.145 B/op [Average]
[info]   (min, avg, max) = (1169.813, 1320.557, 1821.618), stdev = 280.510
[info]   CI (99.9%): [240.412, 2400.702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala
[info] # Run progress: 14.38% complete, ETA 00:55:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1022872.010 ops/s
[info] # Warmup Iteration   2: 1020356.400 ops/s
[info] # Warmup Iteration   3: 1082753.520 ops/s
[info] Iteration   1: 1088677.624 ops/s
[info]                  ·gc.alloc.rate:                   210.284 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.790 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 369.787 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1087283.576 ops/s
[info]                  ·gc.alloc.rate:                   209.988 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.767 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 370.276 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1087609.302 ops/s
[info]                  ·gc.alloc.rate:                   210.097 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.022 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.031 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.835 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 370.180 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1054239.429 ops/s
[info]                  ·gc.alloc.rate:      203.610 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1082459.762 ops/s
[info]                  ·gc.alloc.rate:                   209.053 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.004 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.767 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 371.932 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala":
[info]   1080053.939 ±(99.9%) 56326.643 ops/s [Average]
[info]   (min, avg, max) = (1054239.429, 1080053.939, 1088677.624), stdev = 14627.850
[info]   CI (99.9%): [1023727.295, 1136380.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   208.606 ±(99.9%) 10.909 MB/sec [Average]
[info]   (min, avg, max) = (203.610, 208.606, 210.284), stdev = 2.833
[info]   CI (99.9%): [197.697, 219.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   304.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (304.000, 304.000, 304.000), stdev = 0.001
[info]   CI (99.9%): [304.000, 304.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.005 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.022), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.007 ±(99.9%) 0.052 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.031), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   204.632 ±(99.9%) 440.485 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.632, 255.835), stdev = 114.393
[info]   CI (99.9%): [≈ 0, 645.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   296.435 ±(99.9%) 638.106 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 296.435, 371.932), stdev = 165.714
[info]   CI (99.9%): [≈ 0, 934.541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 3.000), stdev = 1.225
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson
[info] # Run progress: 14.73% complete, ETA 00:55:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 45826.017 ops/s
[info] # Warmup Iteration   2: 80900.931 ops/s
[info] # Warmup Iteration   3: 81447.978 ops/s
[info] Iteration   1: 81340.544 ops/s
[info]                  ·gc.alloc.rate:                   3356.184 MB/sec
[info]                  ·gc.alloc.rate.norm:              64952.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.611 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3370.667 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65232.298 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 80659.702 ops/s
[info]                  ·gc.alloc.rate:                   3328.990 MB/sec
[info]                  ·gc.alloc.rate.norm:              64952.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.250 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3390.898 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66159.905 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 79645.871 ops/s
[info]                  ·gc.alloc.rate:                   3286.572 MB/sec
[info]                  ·gc.alloc.rate.norm:              64952.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.057 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3057.564 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 60426.168 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 79049.677 ops/s
[info]                  ·gc.alloc.rate:                   3263.031 MB/sec
[info]                  ·gc.alloc.rate.norm:              64952.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.730 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3404.475 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 67767.507 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   5: 80722.086 ops/s
[info]                  ·gc.alloc.rate:                   3331.197 MB/sec
[info]                  ·gc.alloc.rate.norm:              64952.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.291 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.682 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3403.821 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66368.036 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson":
[info]   80283.576 ±(99.9%) 3539.723 ops/s [Average]
[info]   (min, avg, max) = (79049.677, 80283.576, 81340.544), stdev = 919.255
[info]   CI (99.9%): [76743.853, 83823.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3313.195 ±(99.9%) 144.679 MB/sec [Average]
[info]   (min, avg, max) = (3263.031, 3313.195, 3356.184), stdev = 37.573
[info]   CI (99.9%): [3168.516, 3457.874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   64952.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (64952.005, 64952.005, 64952.006), stdev = 0.001
[info]   CI (99.9%): [64952.004, 64952.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.167 ±(99.9%) 0.316 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.167, 0.291), stdev = 0.082
[info]   CI (99.9%): [≈ 0, 0.482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3.266 ±(99.9%) 6.165 B/op [Average]
[info]   (min, avg, max) = (1.611, 3.266, 5.682), stdev = 1.601
[info]   CI (99.9%): [≈ 0, 9.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   3325.485 ±(99.9%) 579.128 MB/sec [Average]
[info]   (min, avg, max) = (3057.564, 3325.485, 3404.475), stdev = 150.398
[info]   CI (99.9%): [2746.357, 3904.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   65190.783 ±(99.9%) 10834.604 B/op [Average]
[info]   (min, avg, max) = (60426.168, 65190.783, 67767.507), stdev = 2813.712
[info]   CI (99.9%): [54356.179, 76025.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.count":
[info]   49.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.800, 10.000), stdev = 0.447
[info]   CI (99.9%): [49.000, 49.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.time":
[info]   54.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (10.000, 10.800, 11.000), stdev = 0.447
[info]   CI (99.9%): [54.000, 54.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce
[info] # Run progress: 15.07% complete, ETA 00:55:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 236555.634 ops/s
[info] # Warmup Iteration   2: 294809.307 ops/s
[info] # Warmup Iteration   3: 302721.458 ops/s
[info] Iteration   1: 304291.623 ops/s
[info]                  ·gc.alloc.rate:                   1507.905 MB/sec
[info]                  ·gc.alloc.rate.norm:              7800.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.108 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1308.162 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6766.785 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 298857.565 ops/s
[info]                  ·gc.alloc.rate:                   1480.751 MB/sec
[info]                  ·gc.alloc.rate.norm:              7800.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.658 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1647.923 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8680.602 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 309018.228 ops/s
[info]                  ·gc.alloc.rate:                   1531.308 MB/sec
[info]                  ·gc.alloc.rate.norm:              7800.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.530 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1327.809 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6763.441 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 307348.697 ops/s
[info]                  ·gc.alloc.rate:                   1523.037 MB/sec
[info]                  ·gc.alloc.rate.norm:              7800.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.320 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1670.478 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8555.098 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 308943.527 ops/s
[info]                  ·gc.alloc.rate:                   1531.162 MB/sec
[info]                  ·gc.alloc.rate.norm:              7800.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.424 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.317 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6848.181 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce":
[info]   305691.928 ±(99.9%) 16455.750 ops/s [Average]
[info]   (min, avg, max) = (298857.565, 305691.928, 309018.228), stdev = 4273.506
[info]   CI (99.9%): [289236.177, 322147.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1514.833 ±(99.9%) 82.024 MB/sec [Average]
[info]   (min, avg, max) = (1480.751, 1514.833, 1531.308), stdev = 21.301
[info]   CI (99.9%): [1432.809, 1596.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   7800.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7800.001, 7800.001, 7800.001), stdev = 0.001
[info]   CI (99.9%): [7800.001, 7800.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.079, 0.125), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.408 ±(99.9%) 0.807 B/op [Average]
[info]   (min, avg, max) = (0.108, 0.408, 0.658), stdev = 0.209
[info]   CI (99.9%): [≈ 0, 1.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1459.738 ±(99.9%) 703.540 MB/sec [Average]
[info]   (min, avg, max) = (1308.162, 1459.738, 1670.478), stdev = 182.707
[info]   CI (99.9%): [756.198, 2163.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   7522.821 ±(99.9%) 3855.185 B/op [Average]
[info]   (min, avg, max) = (6763.441, 7522.821, 8680.602), stdev = 1001.179
[info]   CI (99.9%): [3667.637, 11378.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 1.000
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala
[info] # Run progress: 15.41% complete, ETA 00:54:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1702527.656 ops/s
[info] # Warmup Iteration   2: 1879960.690 ops/s
[info] # Warmup Iteration   3: 1892973.397 ops/s
[info] Iteration   1: 1887386.799 ops/s
[info]                  ·gc.alloc.rate:                   508.513 MB/sec
[info]                  ·gc.alloc.rate.norm:              424.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.719 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.101 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      584.266 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 487.163 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 1760360.488 ops/s
[info]                  ·gc.alloc.rate:                   474.106 MB/sec
[info]                  ·gc.alloc.rate.norm:              424.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.314 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 293.616 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 1889381.057 ops/s
[info]                  ·gc.alloc.rate:                   508.920 MB/sec
[info]                  ·gc.alloc.rate.norm:              424.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.069 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.715 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 543.801 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 1839677.932 ops/s
[info]                  ·gc.alloc.rate:                   495.566 MB/sec
[info]                  ·gc.alloc.rate.norm:              424.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.071 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.763 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 558.496 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1849221.823 ops/s
[info]                  ·gc.alloc.rate:                   498.069 MB/sec
[info]                  ·gc.alloc.rate.norm:              424.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      326.333 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 277.803 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala":
[info]   1845205.620 ±(99.9%) 201710.008 ops/s [Average]
[info]   (min, avg, max) = (1760360.488, 1845205.620, 1889381.057), stdev = 52383.448
[info]   CI (99.9%): [1643495.612, 2046915.627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   497.035 ±(99.9%) 54.523 MB/sec [Average]
[info]   (min, avg, max) = (474.106, 497.035, 508.920), stdev = 14.159
[info]   CI (99.9%): [442.512, 551.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   424.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (424.000, 424.000, 424.000), stdev = 0.001
[info]   CI (99.9%): [424.000, 424.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.781 ±(99.9%) 6.326 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.781, 3.719), stdev = 1.643
[info]   CI (99.9%): [≈ 0, 7.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.652 ±(99.9%) 5.273 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.652, 3.101), stdev = 1.369
[info]   CI (99.9%): [≈ 0, 5.926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   508.878 ±(99.9%) 647.209 MB/sec [Average]
[info]   (min, avg, max) = (326.333, 508.878, 652.763), stdev = 168.078
[info]   CI (99.9%): [≈ 0, 1156.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   432.176 ±(99.9%) 525.405 B/op [Average]
[info]   (min, avg, max) = (277.803, 432.176, 558.496), stdev = 136.446
[info]   CI (99.9%): [≈ 0, 957.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.800, 5.000), stdev = 2.049
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 15.75% complete, ETA 00:54:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1716046.510 ops/s
[info] # Warmup Iteration   2: 1865477.281 ops/s
[info] # Warmup Iteration   3: 1794051.884 ops/s
[info] Iteration   1: 1852209.752 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1854239.816 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1845515.434 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1851004.494 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1844264.938 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc":
[info]   1849446.887 ±(99.9%) 16711.601 ops/s [Average]
[info]   (min, avg, max) = (1844264.938, 1849446.887, 1854239.816), stdev = 4339.950
[info]   CI (99.9%): [1832735.286, 1866158.487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson
[info] # Run progress: 16.10% complete, ETA 00:54:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 30844.702 ops/s
[info] # Warmup Iteration   2: 45657.047 ops/s
[info] # Warmup Iteration   3: 46590.782 ops/s
[info] Iteration   1: 46720.414 ops/s
[info]                  ·gc.alloc.rate:                   2068.976 MB/sec
[info]                  ·gc.alloc.rate.norm:              69696.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.805 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1968.465 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66310.180 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 47361.608 ops/s
[info]                  ·gc.alloc.rate:                   2097.612 MB/sec
[info]                  ·gc.alloc.rate.norm:              69696.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.842 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1992.064 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66189.036 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 45698.080 ops/s
[info]                  ·gc.alloc.rate:                   2023.409 MB/sec
[info]                  ·gc.alloc.rate.norm:              69696.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.302 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2008.831 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69193.857 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 46461.932 ops/s
[info]                  ·gc.alloc.rate:                   2057.292 MB/sec
[info]                  ·gc.alloc.rate.norm:              69696.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.410 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2359.297 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 79927.180 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 46817.305 ops/s
[info]                  ·gc.alloc.rate:                   2073.081 MB/sec
[info]                  ·gc.alloc.rate.norm:              69696.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.099 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030.897 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68277.805 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson":
[info]   46611.868 ±(99.9%) 2337.174 ops/s [Average]
[info]   (min, avg, max) = (45698.080, 46611.868, 47361.608), stdev = 606.957
[info]   CI (99.9%): [44274.694, 48949.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2064.074 ±(99.9%) 104.209 MB/sec [Average]
[info]   (min, avg, max) = (2023.409, 2064.074, 2097.612), stdev = 27.063
[info]   CI (99.9%): [1959.865, 2168.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   69696.009 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (69696.009, 69696.009, 69696.009), stdev = 0.001
[info]   CI (99.9%): [69696.008, 69696.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.092, 0.146), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3.092 ±(99.9%) 5.588 B/op [Average]
[info]   (min, avg, max) = (1.410, 3.092, 4.842), stdev = 1.451
[info]   CI (99.9%): [≈ 0, 8.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   2071.911 ±(99.9%) 624.850 MB/sec [Average]
[info]   (min, avg, max) = (1968.465, 2071.911, 2359.297), stdev = 162.272
[info]   CI (99.9%): [1447.061, 2696.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   69979.611 ±(99.9%) 21977.436 B/op [Average]
[info]   (min, avg, max) = (66189.036, 69979.611, 79927.180), stdev = 5707.470
[info]   CI (99.9%): [48002.176, 91957.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 8.000), stdev = 0.894
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce
[info] # Run progress: 16.44% complete, ETA 00:54:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20630.408 ops/s
[info] # Warmup Iteration   2: 26659.044 ops/s
[info] # Warmup Iteration   3: 26965.563 ops/s
[info] Iteration   1: 26385.431 ops/s
[info]                  ·gc.alloc.rate:                   1545.477 MB/sec
[info]                  ·gc.alloc.rate.norm:              92192.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.967 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1640.297 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 97848.285 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 27094.071 ops/s
[info]                  ·gc.alloc.rate:                   1587.435 MB/sec
[info]                  ·gc.alloc.rate.norm:              92192.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.674 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1652.679 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 95981.135 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 26678.365 ops/s
[info]                  ·gc.alloc.rate:                   1562.531 MB/sec
[info]                  ·gc.alloc.rate.norm:              92192.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.456 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1665.768 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 98283.123 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 27193.766 ops/s
[info]                  ·gc.alloc.rate:                   1593.459 MB/sec
[info]                  ·gc.alloc.rate.norm:              92192.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.410 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1340.672 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 77566.635 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 27390.387 ops/s
[info]                  ·gc.alloc.rate:                   1604.378 MB/sec
[info]                  ·gc.alloc.rate.norm:              92192.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.588 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1682.518 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 96682.106 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce":
[info]   26948.404 ±(99.9%) 1571.975 ops/s [Average]
[info]   (min, avg, max) = (26385.431, 26948.404, 27390.387), stdev = 408.237
[info]   CI (99.9%): [25376.429, 28520.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate":
[info]   1578.656 ±(99.9%) 92.710 MB/sec [Average]
[info]   (min, avg, max) = (1545.477, 1578.656, 1604.378), stdev = 24.076
[info]   CI (99.9%): [1485.946, 1671.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   92192.016 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (92192.015, 92192.016, 92192.019), stdev = 0.002
[info]   CI (99.9%): [92192.010, 92192.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.200 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.167), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4.619 ±(99.9%) 11.599 B/op [Average]
[info]   (min, avg, max) = (2.410, 4.619, 9.674), stdev = 3.012
[info]   CI (99.9%): [≈ 0, 16.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1596.387 ±(99.9%) 553.741 MB/sec [Average]
[info]   (min, avg, max) = (1340.672, 1596.387, 1682.518), stdev = 143.805
[info]   CI (99.9%): [1042.646, 2150.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   93272.257 ±(99.9%) 33990.547 B/op [Average]
[info]   (min, avg, max) = (77566.635, 93272.257, 98283.123), stdev = 8827.237
[info]   CI (99.9%): [59281.710, 127262.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 7.000), stdev = 1.483
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala
[info] # Run progress: 16.78% complete, ETA 00:53:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37328.745 ops/s
[info] # Warmup Iteration   2: 61704.380 ops/s
[info] # Warmup Iteration   3: 61657.463 ops/s
[info] Iteration   1: 59579.458 ops/s
[info]                  ·gc.alloc.rate:                   983.219 MB/sec
[info]                  ·gc.alloc.rate.norm:              25976.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.650 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      983.434 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25981.682 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 60341.428 ops/s
[info]                  ·gc.alloc.rate:                   996.130 MB/sec
[info]                  ·gc.alloc.rate.norm:              25976.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.086 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      989.114 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25793.058 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 62440.154 ops/s
[info]                  ·gc.alloc.rate:                   1030.332 MB/sec
[info]                  ·gc.alloc.rate.norm:              25976.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.099 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      995.317 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25093.222 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 62034.701 ops/s
[info]                  ·gc.alloc.rate:                   1023.744 MB/sec
[info]                  ·gc.alloc.rate.norm:              25976.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.641 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1000.086 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25375.725 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 62380.014 ops/s
[info]                  ·gc.alloc.rate:                   1029.703 MB/sec
[info]                  ·gc.alloc.rate.norm:              25976.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.576 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1005.009 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25353.052 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala":
[info]   61355.151 ±(99.9%) 5046.431 ops/s [Average]
[info]   (min, avg, max) = (59579.458, 61355.151, 62440.154), stdev = 1310.542
[info]   CI (99.9%): [56308.720, 66401.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1012.626 ±(99.9%) 83.160 MB/sec [Average]
[info]   (min, avg, max) = (983.219, 1012.626, 1030.332), stdev = 21.597
[info]   CI (99.9%): [929.465, 1095.786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   25976.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (25976.007, 25976.007, 25976.007), stdev = 0.001
[info]   CI (99.9%): [25976.005, 25976.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.810 ±(99.9%) 2.260 B/op [Average]
[info]   (min, avg, max) = (1.086, 1.810, 2.641), stdev = 0.587
[info]   CI (99.9%): [≈ 0, 4.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   994.592 ±(99.9%) 32.997 MB/sec [Average]
[info]   (min, avg, max) = (983.434, 994.592, 1005.009), stdev = 8.569
[info]   CI (99.9%): [961.595, 1027.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   25519.348 ±(99.9%) 1386.413 B/op [Average]
[info]   (min, avg, max) = (25093.222, 25519.348, 25981.682), stdev = 360.047
[info]   CI (99.9%): [24132.935, 26905.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala
[info] # Run progress: 17.12% complete, ETA 00:53:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 69171.349 ops/s
[info] # Warmup Iteration   2: 78019.169 ops/s
[info] # Warmup Iteration   3: 78856.233 ops/s
[info] Iteration   1: 79224.246 ops/s
[info]                  ·gc.alloc.rate:                   510.602 MB/sec
[info]                  ·gc.alloc.rate.norm:              10144.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.299 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     65.542 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      585.842 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11638.787 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 79320.353 ops/s
[info]                  ·gc.alloc.rate:                   511.240 MB/sec
[info]                  ·gc.alloc.rate.norm:              10144.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.826 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658.481 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13065.565 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 78860.100 ops/s
[info]                  ·gc.alloc.rate:                   508.466 MB/sec
[info]                  ·gc.alloc.rate.norm:              10144.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.831 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.514 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6553.932 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 79257.703 ops/s
[info]                  ·gc.alloc.rate:                   510.852 MB/sec
[info]                  ·gc.alloc.rate.norm:              10144.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.827 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.499 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13016.258 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 79454.674 ops/s
[info]                  ·gc.alloc.rate:                   512.106 MB/sec
[info]                  ·gc.alloc.rate.norm:              10144.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.743 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6492.077 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala":
[info]   79223.415 ±(99.9%) 852.490 ops/s [Average]
[info]   (min, avg, max) = (78860.100, 79223.415, 79454.674), stdev = 221.389
[info]   CI (99.9%): [78370.925, 80075.905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   510.653 ±(99.9%) 5.195 MB/sec [Average]
[info]   (min, avg, max) = (508.466, 510.653, 512.106), stdev = 1.349
[info]   CI (99.9%): [505.458, 515.848] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   10144.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10144.005, 10144.005, 10144.006), stdev = 0.001
[info]   CI (99.9%): [10144.004, 10144.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.685 ±(99.9%) 5.628 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.685, 3.299), stdev = 1.462
[info]   CI (99.9%): [≈ 0, 6.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   13.605 ±(99.9%) 111.807 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13.605, 65.542), stdev = 29.036
[info]   CI (99.9%): [≈ 0, 125.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   511.216 ±(99.9%) 653.237 MB/sec [Average]
[info]   (min, avg, max) = (327.743, 511.216, 658.481), stdev = 169.644
[info]   CI (99.9%): [≈ 0, 1164.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   10153.324 ±(99.9%) 12950.490 B/op [Average]
[info]   (min, avg, max) = (6492.077, 10153.324, 13065.565), stdev = 3363.201
[info]   CI (99.9%): [≈ 0, 23103.814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 6.000), stdev = 2.074
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson
[info] # Run progress: 17.47% complete, ETA 00:53:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18208.314 ops/s
[info] # Warmup Iteration   2: 34233.415 ops/s
[info] # Warmup Iteration   3: 33688.775 ops/s
[info] Iteration   1: 33327.114 ops/s
[info]                  ·gc.alloc.rate:                   1696.746 MB/sec
[info]                  ·gc.alloc.rate.norm:              80152.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.864 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1647.841 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 77841.818 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 34115.905 ops/s
[info]                  ·gc.alloc.rate:                   1737.737 MB/sec
[info]                  ·gc.alloc.rate.norm:              80152.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.683 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1999.406 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 92221.340 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 33870.712 ops/s
[info]                  ·gc.alloc.rate:                   1724.682 MB/sec
[info]                  ·gc.alloc.rate.norm:              80152.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.771 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1677.713 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 77969.210 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 33879.188 ops/s
[info]                  ·gc.alloc.rate:                   1725.083 MB/sec
[info]                  ·gc.alloc.rate.norm:              80152.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.901 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1685.650 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78319.833 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 33592.672 ops/s
[info]                  ·gc.alloc.rate:                   1710.706 MB/sec
[info]                  ·gc.alloc.rate.norm:              80152.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.901 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1691.592 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 79256.466 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson":
[info]   33757.118 ±(99.9%) 1168.718 ops/s [Average]
[info]   (min, avg, max) = (33327.114, 33757.118, 34115.905), stdev = 303.512
[info]   CI (99.9%): [32588.400, 34925.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1718.991 ±(99.9%) 60.407 MB/sec [Average]
[info]   (min, avg, max) = (1696.746, 1718.991, 1737.737), stdev = 15.688
[info]   CI (99.9%): [1658.584, 1779.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   80152.013 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (80152.012, 80152.013, 80152.015), stdev = 0.001
[info]   CI (99.9%): [80152.007, 80152.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.125 ±(99.9%) 0.188 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.125, 0.167), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   5.824 ±(99.9%) 8.771 B/op [Average]
[info]   (min, avg, max) = (2.901, 5.824, 7.864), stdev = 2.278
[info]   CI (99.9%): [≈ 0, 14.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1740.440 ±(99.9%) 561.193 MB/sec [Average]
[info]   (min, avg, max) = (1647.841, 1740.440, 1999.406), stdev = 145.740
[info]   CI (99.9%): [1179.248, 2301.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   81121.734 ±(99.9%) 23987.641 B/op [Average]
[info]   (min, avg, max) = (77841.818, 81121.734, 92221.340), stdev = 6229.514
[info]   CI (99.9%): [57134.092, 105109.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 7.000), stdev = 0.894
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce
[info] # Run progress: 17.81% complete, ETA 00:53:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28808.173 ops/s
[info] # Warmup Iteration   2: 39161.578 ops/s
[info] # Warmup Iteration   3: 39515.596 ops/s
[info] Iteration   1: 39575.198 ops/s
[info]                  ·gc.alloc.rate:                   533.235 MB/sec
[info]                  ·gc.alloc.rate.norm:              21208.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.420 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     136.022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      582.480 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23166.584 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 39527.329 ops/s
[info]                  ·gc.alloc.rate:                   532.715 MB/sec
[info]                  ·gc.alloc.rate.norm:              21208.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.829 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.572 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25979.668 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 39822.523 ops/s
[info]                  ·gc.alloc.rate:                   536.521 MB/sec
[info]                  ·gc.alloc.rate.norm:              21208.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.468 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      325.692 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12874.201 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 38509.454 ops/s
[info]                  ·gc.alloc.rate:                   518.892 MB/sec
[info]                  ·gc.alloc.rate.norm:              21208.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.552 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      650.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26571.730 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 38154.167 ops/s
[info]                  ·gc.alloc.rate:                   514.091 MB/sec
[info]                  ·gc.alloc.rate.norm:              21208.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.859 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      651.434 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26873.882 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce":
[info]   39117.734 ±(99.9%) 2837.636 ops/s [Average]
[info]   (min, avg, max) = (38154.167, 39117.734, 39822.523), stdev = 736.925
[info]   CI (99.9%): [36280.099, 41955.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate":
[info]   527.091 ±(99.9%) 38.242 MB/sec [Average]
[info]   (min, avg, max) = (514.091, 527.091, 536.521), stdev = 9.931
[info]   CI (99.9%): [488.849, 565.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   21208.011 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (21208.010, 21208.011, 21208.012), stdev = 0.001
[info]   CI (99.9%): [21208.009, 21208.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.717 ±(99.9%) 5.818 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.717, 3.420), stdev = 1.511
[info]   CI (99.9%): [≈ 0, 6.536] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   28.546 ±(99.9%) 231.372 B/op [Average]
[info]   (min, avg, max) = (0.829, 28.546, 136.022), stdev = 60.087
[info]   CI (99.9%): [≈ 0, 259.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   572.461 ±(99.9%) 543.478 MB/sec [Average]
[info]   (min, avg, max) = (325.692, 572.461, 652.572), stdev = 141.140
[info]   CI (99.9%): [28.982, 1115.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   23093.213 ±(99.9%) 22712.170 B/op [Average]
[info]   (min, avg, max) = (12874.201, 23093.213, 26873.882), stdev = 5898.278
[info]   CI (99.9%): [381.043, 45805.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 5.000), stdev = 1.517
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala
[info] # Run progress: 18.15% complete, ETA 00:52:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25891.503 ops/s
[info] # Warmup Iteration   2: 40398.589 ops/s
[info] # Warmup Iteration   3: 40410.917 ops/s
[info] Iteration   1: 40556.658 ops/s
[info]                  ·gc.alloc.rate:                   366.373 MB/sec
[info]                  ·gc.alloc.rate.norm:              14216.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.808 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.827 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9926.613 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 40428.061 ops/s
[info]                  ·gc.alloc.rate:                   365.112 MB/sec
[info]                  ·gc.alloc.rate.norm:              14216.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      320.358 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12473.477 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 40298.261 ops/s
[info]                  ·gc.alloc.rate:                   364.077 MB/sec
[info]                  ·gc.alloc.rate.norm:              14216.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.252 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      320.489 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12514.020 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 40558.840 ops/s
[info]                  ·gc.alloc.rate:                   366.325 MB/sec
[info]                  ·gc.alloc.rate.norm:              14216.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      322.716 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12523.667 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 40689.248 ops/s
[info]                  ·gc.alloc.rate:                   367.527 MB/sec
[info]                  ·gc.alloc.rate.norm:              14216.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.805 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      322.740 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12483.661 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala":
[info]   40506.213 ±(99.9%) 571.687 ops/s [Average]
[info]   (min, avg, max) = (40298.261, 40506.213, 40689.248), stdev = 148.465
[info]   CI (99.9%): [39934.526, 41077.901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   365.883 ±(99.9%) 5.091 MB/sec [Average]
[info]   (min, avg, max) = (364.077, 365.883, 367.527), stdev = 1.322
[info]   CI (99.9%): [360.792, 370.973] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   14216.011 ±(99.9%) 0.003 B/op [Average]
[info]   (min, avg, max) = (14216.010, 14216.011, 14216.012), stdev = 0.001
[info]   CI (99.9%): [14216.008, 14216.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.083), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.973 ±(99.9%) 5.146 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.973, 3.252), stdev = 1.336
[info]   CI (99.9%): [≈ 0, 6.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   308.426 ±(99.9%) 113.310 MB/sec [Average]
[info]   (min, avg, max) = (255.827, 308.426, 322.740), stdev = 29.426
[info]   CI (99.9%): [195.116, 421.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   11984.288 ±(99.9%) 4430.020 B/op [Average]
[info]   (min, avg, max) = (9926.613, 11984.288, 12523.667), stdev = 1150.462
[info]   CI (99.9%): [7554.267, 16414.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala
[info] # Run progress: 18.49% complete, ETA 00:52:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37538.313 ops/s
[info] # Warmup Iteration   2: 46252.956 ops/s
[info] # Warmup Iteration   3: 45002.309 ops/s
[info] Iteration   1: 44926.768 ops/s
[info]                  ·gc.alloc.rate:                   394.775 MB/sec
[info]                  ·gc.alloc.rate.norm:              13832.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.005 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.188 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.528 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17922.780 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 45079.606 ops/s
[info]                  ·gc.alloc.rate:                   396.126 MB/sec
[info]                  ·gc.alloc.rate.norm:              13832.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.699 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     129.179 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.362 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11465.820 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 45202.002 ops/s
[info]                  ·gc.alloc.rate:                   397.250 MB/sec
[info]                  ·gc.alloc.rate.norm:              13832.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.450 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.391 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11434.372 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 45276.728 ops/s
[info]                  ·gc.alloc.rate:                   397.984 MB/sec
[info]                  ·gc.alloc.rate.norm:              13832.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.447 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      326.468 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11346.471 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 41572.153 ops/s
[info]                  ·gc.alloc.rate:                   365.335 MB/sec
[info]                  ·gc.alloc.rate.norm:              13832.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      326.392 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12357.551 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala":
[info]   44411.451 ±(99.9%) 6133.070 ops/s [Average]
[info]   (min, avg, max) = (41572.153, 44411.451, 45276.728), stdev = 1592.739
[info]   CI (99.9%): [38278.381, 50544.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   390.294 ±(99.9%) 53.927 MB/sec [Average]
[info]   (min, avg, max) = (365.335, 390.294, 397.984), stdev = 14.005
[info]   CI (99.9%): [336.366, 444.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   13832.010 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (13832.009, 13832.010, 13832.010), stdev = 0.001
[info]   CI (99.9%): [13832.008, 13832.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.758 ±(99.9%) 6.333 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.758, 3.699), stdev = 1.645
[info]   CI (99.9%): [≈ 0, 7.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   26.453 ±(99.9%) 221.142 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 26.453, 129.179), stdev = 57.430
[info]   CI (99.9%): [≈ 0, 247.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   364.228 ±(99.9%) 317.097 MB/sec [Average]
[info]   (min, avg, max) = (326.392, 364.228, 511.528), stdev = 82.349
[info]   CI (99.9%): [47.132, 681.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   12905.399 ±(99.9%) 10915.203 B/op [Average]
[info]   (min, avg, max) = (11346.471, 12905.399, 17922.780), stdev = 2834.644
[info]   CI (99.9%): [1990.196, 23820.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 5.000), stdev = 1.643
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 18.84% complete, ETA 00:52:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 38404.760 ops/s
[info] # Warmup Iteration   2: 46365.162 ops/s
[info] # Warmup Iteration   3: 46032.169 ops/s
[info] Iteration   1: 46482.340 ops/s
[info]                  ·gc.alloc.rate:                   355.310 MB/sec
[info]                  ·gc.alloc.rate.norm:              12032.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.765 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8661.071 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 46455.938 ops/s
[info]                  ·gc.alloc.rate:                   355.241 MB/sec
[info]                  ·gc.alloc.rate.norm:              12032.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.864 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8666.104 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 45023.347 ops/s
[info]                  ·gc.alloc.rate:                   344.168 MB/sec
[info]                  ·gc.alloc.rate.norm:              12032.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.774 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     131.921 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.380 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11480.079 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 46560.641 ops/s
[info]                  ·gc.alloc.rate:                   355.901 MB/sec
[info]                  ·gc.alloc.rate.norm:              12032.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.407 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.353 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11100.689 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 45473.461 ops/s
[info]                  ·gc.alloc.rate:                   347.580 MB/sec
[info]                  ·gc.alloc.rate.norm:              12032.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      326.349 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11297.074 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc":
[info]   45999.145 ±(99.9%) 2713.230 ops/s [Average]
[info]   (min, avg, max) = (45023.347, 45999.145, 46560.641), stdev = 704.617
[info]   CI (99.9%): [43285.916, 48712.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   351.640 ±(99.9%) 20.816 MB/sec [Average]
[info]   (min, avg, max) = (344.168, 351.640, 355.901), stdev = 5.406
[info]   CI (99.9%): [330.824, 372.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   12032.009 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (12032.009, 12032.009, 12032.009), stdev = 0.001
[info]   CI (99.9%): [12032.008, 12032.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   0.763 ±(99.9%) 6.481 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.763, 3.774), stdev = 1.683
[info]   CI (99.9%): [≈ 0, 7.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   26.666 ±(99.9%) 226.582 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 26.666, 131.921), stdev = 58.843
[info]   CI (99.9%): [≈ 0, 253.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   298.942 ±(99.9%) 151.634 MB/sec [Average]
[info]   (min, avg, max) = (255.765, 298.942, 328.380), stdev = 39.379
[info]   CI (99.9%): [147.308, 450.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   10241.003 ±(99.9%) 5568.858 B/op [Average]
[info]   (min, avg, max) = (8661.071, 10241.003, 11480.079), stdev = 1446.215
[info]   CI (99.9%): [4672.145, 15809.862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 1.000
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce
[info] # Run progress: 19.18% complete, ETA 00:52:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15461.522 ops/s
[info] # Warmup Iteration   2: 20040.624 ops/s
[info] # Warmup Iteration   3: 20042.353 ops/s
[info] Iteration   1: 19974.937 ops/s
[info]                  ·gc.alloc.rate:                   749.052 MB/sec
[info]                  ·gc.alloc.rate.norm:              59030.660 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.561 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      982.702 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 77443.883 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 20131.776 ops/s
[info]                  ·gc.alloc.rate:                   755.126 MB/sec
[info]                  ·gc.alloc.rate.norm:              59040.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.627 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.050 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51137.348 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 20099.195 ops/s
[info]                  ·gc.alloc.rate:                   753.835 MB/sec
[info]                  ·gc.alloc.rate.norm:              59030.086 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.260 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.780 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51273.452 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 20269.979 ops/s
[info]                  ·gc.alloc.rate:                   759.908 MB/sec
[info]                  ·gc.alloc.rate.norm:              59008.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      984.812 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 76472.136 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 20175.597 ops/s
[info]                  ·gc.alloc.rate:                   756.587 MB/sec
[info]                  ·gc.alloc.rate.norm:              59008.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.624 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658.905 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51389.577 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce":
[info]   20130.297 ±(99.9%) 415.930 ops/s [Average]
[info]   (min, avg, max) = (19974.937, 20130.297, 20269.979), stdev = 108.016
[info]   CI (99.9%): [19714.367, 20546.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate":
[info]   754.902 ±(99.9%) 15.319 MB/sec [Average]
[info]   (min, avg, max) = (749.052, 754.902, 759.908), stdev = 3.978
[info]   CI (99.9%): [739.583, 770.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   59023.362 ±(99.9%) 56.022 B/op [Average]
[info]   (min, avg, max) = (59008.020, 59023.362, 59040.020), stdev = 14.549
[info]   CI (99.9%): [58967.340, 59079.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.083), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2.614 ±(99.9%) 9.584 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.614, 6.561), stdev = 2.489
[info]   CI (99.9%): [≈ 0, 12.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   787.050 ±(99.9%) 691.495 MB/sec [Average]
[info]   (min, avg, max) = (654.050, 787.050, 984.812), stdev = 179.579
[info]   CI (99.9%): [95.555, 1478.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   61543.279 ±(99.9%) 54202.187 B/op [Average]
[info]   (min, avg, max) = (51137.348, 61543.279, 77443.883), stdev = 14076.136
[info]   CI (99.9%): [7341.093, 115745.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 4.000), stdev = 1.140
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala
[info] # Run progress: 19.52% complete, ETA 00:51:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11665.461 ops/s
[info] # Warmup Iteration   2: 19480.549 ops/s
[info] # Warmup Iteration   3: 20076.200 ops/s
[info] Iteration   1: 19900.471 ops/s
[info]                  ·gc.alloc.rate:                   564.632 MB/sec
[info]                  ·gc.alloc.rate.norm:              44663.644 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.938 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      647.282 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51201.440 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 20333.774 ops/s
[info]                  ·gc.alloc.rate:                   577.198 MB/sec
[info]                  ·gc.alloc.rate.norm:              44680.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.611 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.089 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50477.253 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 19635.583 ops/s
[info]                  ·gc.alloc.rate:                   557.325 MB/sec
[info]                  ·gc.alloc.rate.norm:              44678.898 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.669 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.348 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26242.431 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 20103.126 ops/s
[info]                  ·gc.alloc.rate:                   570.238 MB/sec
[info]                  ·gc.alloc.rate.norm:              44648.027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.725 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51419.701 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 20892.141 ops/s
[info]                  ·gc.alloc.rate:                   592.627 MB/sec
[info]                  ·gc.alloc.rate.norm:              44648.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.070 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 49729.078 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala":
[info]   20173.019 ±(99.9%) 1837.632 ops/s [Average]
[info]   (min, avg, max) = (19635.583, 20173.019, 20892.141), stdev = 477.227
[info]   CI (99.9%): [18335.387, 22010.651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   572.404 ±(99.9%) 51.821 MB/sec [Average]
[info]   (min, avg, max) = (557.325, 572.404, 592.627), stdev = 13.458
[info]   CI (99.9%): [520.583, 624.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   44663.722 ±(99.9%) 60.543 B/op [Average]
[info]   (min, avg, max) = (44648.020, 44663.722, 44680.020), stdev = 15.723
[info]   CI (99.9%): [44603.178, 44724.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.644 ±(99.9%) 7.764 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.644, 4.938), stdev = 2.016
[info]   CI (99.9%): [≈ 0, 9.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   588.703 ±(99.9%) 562.892 MB/sec [Average]
[info]   (min, avg, max) = (327.348, 588.703, 660.070), stdev = 146.181
[info]   CI (99.9%): [25.811, 1151.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   45813.981 ±(99.9%) 42206.662 B/op [Average]
[info]   (min, avg, max) = (26242.431, 45813.981, 51419.701), stdev = 10960.936
[info]   CI (99.9%): [3607.319, 88020.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala
[info] # Run progress: 19.86% complete, ETA 00:51:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 68366.664 ops/s
[info] # Warmup Iteration   2: 73005.962 ops/s
[info] # Warmup Iteration   3: 76015.561 ops/s
[info] Iteration   1: 76165.597 ops/s
[info]                  ·gc.alloc.rate:                   198.201 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.006 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.123 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.769 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5285.689 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 76547.002 ops/s
[info]                  ·gc.alloc.rate:      199.215 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 76085.612 ops/s
[info]                  ·gc.alloc.rate:                   197.986 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.767 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5291.384 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 75538.338 ops/s
[info]                  ·gc.alloc.rate:                   196.563 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.767 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5329.696 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 76236.062 ops/s
[info]                  ·gc.alloc.rate:                   198.366 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.007 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.137 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.744 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5280.767 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala":
[info]   76114.522 ±(99.9%) 1411.201 ops/s [Average]
[info]   (min, avg, max) = (75538.338, 76114.522, 76547.002), stdev = 366.484
[info]   CI (99.9%): [74703.321, 77525.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   198.066 ±(99.9%) 3.700 MB/sec [Average]
[info]   (min, avg, max) = (196.563, 198.066, 199.215), stdev = 0.961
[info]   CI (99.9%): [194.366, 201.766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.005, 4096.005, 4096.006), stdev = 0.001
[info]   CI (99.9%): [4096.005, 4096.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.003 ±(99.9%) 0.013 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.007), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.052 ±(99.9%) 0.274 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.052, 0.137), stdev = 0.071
[info]   CI (99.9%): [≈ 0, 0.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   204.609 ±(99.9%) 440.436 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.609, 255.769), stdev = 114.380
[info]   CI (99.9%): [≈ 0, 645.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4237.507 ±(99.9%) 9121.857 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4237.507, 5329.696), stdev = 2368.917
[info]   CI (99.9%): [≈ 0, 13359.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.095
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson
[info] # Run progress: 20.21% complete, ETA 00:51:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9673.604 ops/s
[info] # Warmup Iteration   2: 16778.354 ops/s
[info] # Warmup Iteration   3: 16710.912 ops/s
[info] Iteration   1: 16728.772 ops/s
[info]                  ·gc.alloc.rate:                   1062.619 MB/sec
[info]                  ·gc.alloc.rate.norm:              99984.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.834 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1304.102 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 122705.702 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 16876.594 ops/s
[info]                  ·gc.alloc.rate:                   1072.262 MB/sec
[info]                  ·gc.alloc.rate.norm:              99984.075 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.941 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      985.627 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 91905.699 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 16568.925 ops/s
[info]                  ·gc.alloc.rate:                   1052.768 MB/sec
[info]                  ·gc.alloc.rate.norm:              99984.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.932 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      991.084 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 94125.689 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 16730.240 ops/s
[info]                  ·gc.alloc.rate:                   1062.730 MB/sec
[info]                  ·gc.alloc.rate.norm:              99984.031 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      997.436 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 93841.066 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 16971.115 ops/s
[info]                  ·gc.alloc.rate:                   1078.148 MB/sec
[info]                  ·gc.alloc.rate.norm:              99984.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.722 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1002.203 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 92941.121 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson":
[info]   16775.129 ±(99.9%) 594.640 ops/s [Average]
[info]   (min, avg, max) = (16568.925, 16775.129, 16971.115), stdev = 154.426
[info]   CI (99.9%): [16180.489, 17369.769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1065.705 ±(99.9%) 37.706 MB/sec [Average]
[info]   (min, avg, max) = (1052.768, 1065.705, 1078.148), stdev = 9.792
[info]   CI (99.9%): [1027.999, 1103.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   99984.037 ±(99.9%) 0.083 B/op [Average]
[info]   (min, avg, max) = (99984.025, 99984.037, 99984.075), stdev = 0.022
[info]   CI (99.9%): [99983.954, 99984.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.083), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4.686 ±(99.9%) 13.637 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.686, 7.834), stdev = 3.542
[info]   CI (99.9%): [≈ 0, 18.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1056.090 ±(99.9%) 534.412 MB/sec [Average]
[info]   (min, avg, max) = (985.627, 1056.090, 1304.102), stdev = 138.785
[info]   CI (99.9%): [521.679, 1590.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   99103.856 ±(99.9%) 50914.447 B/op [Average]
[info]   (min, avg, max) = (91905.699, 99103.856, 122705.702), stdev = 13222.320
[info]   CI (99.9%): [48189.408, 150018.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce
[info] # Run progress: 20.55% complete, ETA 00:51:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 42037.586 ops/s
[info] # Warmup Iteration   2: 56626.366 ops/s
[info] # Warmup Iteration   3: 55990.955 ops/s
[info] Iteration   1: 58114.374 ops/s
[info]                  ·gc.alloc.rate:                   1064.117 MB/sec
[info]                  ·gc.alloc.rate.norm:              28824.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.819 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      979.065 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26520.194 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 59292.569 ops/s
[info]                  ·gc.alloc.rate:                   1085.932 MB/sec
[info]                  ·gc.alloc.rate.norm:              28824.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.105 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      981.270 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26045.976 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 58990.479 ops/s
[info]                  ·gc.alloc.rate:                   1080.213 MB/sec
[info]                  ·gc.alloc.rate.norm:              28824.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.222 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1314.771 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35082.865 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 59504.957 ops/s
[info]                  ·gc.alloc.rate:                   1089.574 MB/sec
[info]                  ·gc.alloc.rate.norm:              28824.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.202 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      991.361 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26225.852 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 59720.747 ops/s
[info]                  ·gc.alloc.rate:                   1093.954 MB/sec
[info]                  ·gc.alloc.rate.norm:              28824.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.646 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      996.344 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26252.141 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce":
[info]   59124.625 ±(99.9%) 2409.978 ops/s [Average]
[info]   (min, avg, max) = (58114.374, 59124.625, 59720.747), stdev = 625.864
[info]   CI (99.9%): [56714.647, 61534.603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1082.758 ±(99.9%) 44.568 MB/sec [Average]
[info]   (min, avg, max) = (1064.117, 1082.758, 1093.954), stdev = 11.574
[info]   CI (99.9%): [1038.190, 1127.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   28824.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (28824.007, 28824.007, 28824.007), stdev = 0.001
[info]   CI (99.9%): [28824.006, 28824.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1.999 ±(99.9%) 2.501 B/op [Average]
[info]   (min, avg, max) = (1.105, 1.999, 2.819), stdev = 0.649
[info]   CI (99.9%): [≈ 0, 4.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1052.562 ±(99.9%) 565.086 MB/sec [Average]
[info]   (min, avg, max) = (979.065, 1052.562, 1314.771), stdev = 146.751
[info]   CI (99.9%): [487.476, 1617.649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   28025.406 ±(99.9%) 15205.704 B/op [Average]
[info]   (min, avg, max) = (26045.976, 28025.406, 35082.865), stdev = 3948.873
[info]   CI (99.9%): [12819.702, 43231.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala
[info] # Run progress: 20.89% complete, ETA 00:50:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 231886.120 ops/s
[info] # Warmup Iteration   2: 247267.845 ops/s
[info] # Warmup Iteration   3: 251668.732 ops/s
[info] Iteration   1: 243081.103 ops/s
[info]                  ·gc.alloc.rate:                   385.463 MB/sec
[info]                  ·gc.alloc.rate.norm:              2496.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.038 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.246 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.544 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3312.423 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 252275.809 ops/s
[info]                  ·gc.alloc.rate:                   400.136 MB/sec
[info]                  ·gc.alloc.rate.norm:              2496.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.693 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23.036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.792 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2050.963 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 254017.322 ops/s
[info]                  ·gc.alloc.rate:                   402.786 MB/sec
[info]                  ·gc.alloc.rate.norm:              2496.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.387 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.698 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2036.891 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 250514.617 ops/s
[info]                  ·gc.alloc.rate:                   397.275 MB/sec
[info]                  ·gc.alloc.rate.norm:              2496.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.070 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2054.915 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 249038.235 ops/s
[info]                  ·gc.alloc.rate:                   395.013 MB/sec
[info]                  ·gc.alloc.rate.norm:              2496.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.658 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.587 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4129.876 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala":
[info]   249785.417 ±(99.9%) 16125.524 ops/s [Average]
[info]   (min, avg, max) = (243081.103, 249785.417, 254017.322), stdev = 4187.747
[info]   CI (99.9%): [233659.893, 265910.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   396.135 ±(99.9%) 25.594 MB/sec [Average]
[info]   (min, avg, max) = (385.463, 396.135, 402.786), stdev = 6.647
[info]   CI (99.9%): [370.541, 421.728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2496.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2496.002, 2496.002, 2496.002), stdev = 0.001
[info]   CI (99.9%): [2496.001, 2496.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.779 ±(99.9%) 6.273 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.779, 3.693), stdev = 1.629
[info]   CI (99.9%): [≈ 0, 7.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4.865 ±(99.9%) 39.124 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.865, 23.036), stdev = 10.160
[info]   CI (99.9%): [≈ 0, 43.989] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   429.938 ±(99.9%) 570.299 MB/sec [Average]
[info]   (min, avg, max) = (327.070, 429.938, 653.587), stdev = 148.105
[info]   CI (99.9%): [≈ 0, 1000.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2717.014 ±(99.9%) 3701.057 B/op [Average]
[info]   (min, avg, max) = (2036.891, 2717.014, 4129.876), stdev = 961.153
[info]   CI (99.9%): [≈ 0, 6418.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 5.000), stdev = 1.673
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 21.23% complete, ETA 00:50:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 298328.046 ops/s
[info] # Warmup Iteration   2: 330647.325 ops/s
[info] # Warmup Iteration   3: 327226.338 ops/s
[info] Iteration   1: 340414.360 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 326296.054 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 339251.674 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 338924.210 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 326690.954 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc":
[info]   334315.450 ±(99.9%) 27583.039 ops/s [Average]
[info]   (min, avg, max) = (326296.054, 334315.450, 340414.360), stdev = 7163.228
[info]   CI (99.9%): [306732.411, 361898.490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson
[info] # Run progress: 21.58% complete, ETA 00:50:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 54429.586 ops/s
[info] # Warmup Iteration   2: 74830.010 ops/s
[info] # Warmup Iteration   3: 76009.741 ops/s
[info] Iteration   1: 75108.526 ops/s
[info]                  ·gc.alloc.rate:                   1170.186 MB/sec
[info]                  ·gc.alloc.rate.norm:              24520.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.309 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      970.608 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20338.067 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 74067.636 ops/s
[info]                  ·gc.alloc.rate:                   1153.752 MB/sec
[info]                  ·gc.alloc.rate.norm:              24520.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.981 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1299.416 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27615.710 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 76207.279 ops/s
[info]                  ·gc.alloc.rate:                   1187.147 MB/sec
[info]                  ·gc.alloc.rate.norm:              24520.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.150 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1309.444 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27046.003 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 75344.173 ops/s
[info]                  ·gc.alloc.rate:                   1173.632 MB/sec
[info]                  ·gc.alloc.rate.norm:              24520.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.739 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      989.360 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20670.130 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 75618.550 ops/s
[info]                  ·gc.alloc.rate:                   1178.035 MB/sec
[info]                  ·gc.alloc.rate.norm:              24520.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.166 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1327.900 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27639.348 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson":
[info]   75269.233 ±(99.9%) 3030.307 ops/s [Average]
[info]   (min, avg, max) = (74067.636, 75269.233, 76207.279), stdev = 786.961
[info]   CI (99.9%): [72238.926, 78299.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1172.550 ±(99.9%) 47.289 MB/sec [Average]
[info]   (min, avg, max) = (1153.752, 1172.550, 1187.147), stdev = 12.281
[info]   CI (99.9%): [1125.262, 1219.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   24520.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (24520.005, 24520.006, 24520.006), stdev = 0.001
[info]   CI (99.9%): [24520.005, 24520.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.108 ±(99.9%) 0.183 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.108, 0.187), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2.269 ±(99.9%) 3.926 B/op [Average]
[info]   (min, avg, max) = (1.309, 2.269, 3.981), stdev = 1.020
[info]   CI (99.9%): [≈ 0, 6.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1179.346 ±(99.9%) 702.351 MB/sec [Average]
[info]   (min, avg, max) = (970.608, 1179.346, 1327.900), stdev = 182.398
[info]   CI (99.9%): [476.995, 1881.696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   24661.851 ±(99.9%) 14650.663 B/op [Average]
[info]   (min, avg, max) = (20338.067, 24661.851, 27639.348), stdev = 3804.731
[info]   CI (99.9%): [10011.189, 39312.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 1.000
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce
[info] # Run progress: 21.92% complete, ETA 00:50:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20099.414 ops/s
[info] # Warmup Iteration   2: 27343.262 ops/s
[info] # Warmup Iteration   3: 27585.179 ops/s
[info] Iteration   1: 27415.951 ops/s
[info]                  ·gc.alloc.rate:                   570.132 MB/sec
[info]                  ·gc.alloc.rate.norm:              32736.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.418 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     196.274 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      651.978 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37435.486 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 27942.606 ops/s
[info]                  ·gc.alloc.rate:                   581.186 MB/sec
[info]                  ·gc.alloc.rate.norm:              32736.026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      325.068 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18309.840 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 28040.348 ops/s
[info]                  ·gc.alloc.rate:                   583.143 MB/sec
[info]                  ·gc.alloc.rate.norm:              32736.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.337 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      650.045 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36491.716 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 27830.764 ops/s
[info]                  ·gc.alloc.rate:                   578.839 MB/sec
[info]                  ·gc.alloc.rate.norm:              32736.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.709 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      650.425 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36784.540 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 27972.825 ops/s
[info]                  ·gc.alloc.rate:                   581.783 MB/sec
[info]                  ·gc.alloc.rate.norm:              32736.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.342 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      651.414 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36654.061 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce":
[info]   27840.499 ±(99.9%) 959.211 ops/s [Average]
[info]   (min, avg, max) = (27415.951, 27840.499, 28040.348), stdev = 249.104
[info]   CI (99.9%): [26881.287, 28799.710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate":
[info]   579.017 ±(99.9%) 20.042 MB/sec [Average]
[info]   (min, avg, max) = (570.132, 579.017, 583.143), stdev = 5.205
[info]   CI (99.9%): [558.975, 599.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   32736.018 ±(99.9%) 0.018 B/op [Average]
[info]   (min, avg, max) = (32736.015, 32736.018, 32736.026), stdev = 0.005
[info]   CI (99.9%): [32736.000, 32736.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.717 ±(99.9%) 5.816 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.717, 3.418), stdev = 1.510
[info]   CI (99.9%): [≈ 0, 6.533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   41.132 ±(99.9%) 334.015 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 41.132, 196.274), stdev = 86.743
[info]   CI (99.9%): [≈ 0, 375.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   585.786 ±(99.9%) 561.223 MB/sec [Average]
[info]   (min, avg, max) = (325.068, 585.786, 651.978), stdev = 145.748
[info]   CI (99.9%): [24.563, 1147.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   33135.129 ±(99.9%) 31942.365 B/op [Average]
[info]   (min, avg, max) = (18309.840, 33135.129, 37435.486), stdev = 8295.331
[info]   CI (99.9%): [1192.764, 65077.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala
[info] # Run progress: 22.26% complete, ETA 00:49:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 108613.493 ops/s
[info] # Warmup Iteration   2: 125966.036 ops/s
[info] # Warmup Iteration   3: 122250.416 ops/s
[info] Iteration   1: 121825.196 ops/s
[info]                  ·gc.alloc.rate:                   475.468 MB/sec
[info]                  ·gc.alloc.rate.norm:              6144.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.272 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42.278 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      585.075 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7560.336 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 121645.128 ops/s
[info]                  ·gc.alloc.rate:                   474.773 MB/sec
[info]                  ·gc.alloc.rate.norm:              6144.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.336 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4261.908 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 122358.660 ops/s
[info]                  ·gc.alloc.rate:                   477.658 MB/sec
[info]                  ·gc.alloc.rate.norm:              6144.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.803 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.471 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8431.175 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 124735.742 ops/s
[info]                  ·gc.alloc.rate:                   486.904 MB/sec
[info]                  ·gc.alloc.rate.norm:              6144.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.525 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.715 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4135.267 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 123813.316 ops/s
[info]                  ·gc.alloc.rate:                   483.288 MB/sec
[info]                  ·gc.alloc.rate.norm:              6144.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.058 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.415 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8332.247 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala":
[info]   122875.609 ±(99.9%) 5174.811 ops/s [Average]
[info]   (min, avg, max) = (121645.128, 122875.609, 124735.742), stdev = 1343.882
[info]   CI (99.9%): [117700.797, 128050.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   479.618 ±(99.9%) 20.293 MB/sec [Average]
[info]   (min, avg, max) = (474.773, 479.618, 486.904), stdev = 5.270
[info]   CI (99.9%): [459.325, 499.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   6144.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6144.003, 6144.003, 6144.004), stdev = 0.001
[info]   CI (99.9%): [6144.003, 6144.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.692 ±(99.9%) 5.555 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.692, 3.272), stdev = 1.443
[info]   CI (99.9%): [≈ 0, 6.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   8.933 ±(99.9%) 71.793 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.933, 42.278), stdev = 18.644
[info]   CI (99.9%): [≈ 0, 80.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   510.602 ±(99.9%) 649.520 MB/sec [Average]
[info]   (min, avg, max) = (327.715, 510.602, 655.471), stdev = 168.678
[info]   CI (99.9%): [≈ 0, 1160.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   6544.187 ±(99.9%) 8348.470 B/op [Average]
[info]   (min, avg, max) = (4135.267, 6544.187, 8431.175), stdev = 2168.071
[info]   CI (99.9%): [≈ 0, 14892.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 5.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson
[info] # Run progress: 22.60% complete, ETA 00:49:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9888.715 ops/s
[info] # Warmup Iteration   2: 22551.094 ops/s
[info] # Warmup Iteration   3: 22591.048 ops/s
[info] Iteration   1: 22426.241 ops/s
[info]                  ·gc.alloc.rate:                   1238.532 MB/sec
[info]                  ·gc.alloc.rate.norm:              86920.130 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.461 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1312.213 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 92091.067 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 22068.169 ops/s
[info]                  ·gc.alloc.rate:                   1218.626 MB/sec
[info]                  ·gc.alloc.rate.norm:              86920.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.908 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1322.781 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 94349.037 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 22399.985 ops/s
[info]                  ·gc.alloc.rate:                   1236.916 MB/sec
[info]                  ·gc.alloc.rate.norm:              86920.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.388 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      998.048 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70134.402 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 22673.026 ops/s
[info]                  ·gc.alloc.rate:                   1252.025 MB/sec
[info]                  ·gc.alloc.rate.norm:              86920.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.445 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1337.431 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 92849.169 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 22592.723 ops/s
[info]                  ·gc.alloc.rate:                   1247.613 MB/sec
[info]                  ·gc.alloc.rate.norm:              86920.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.350 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.977 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 93633.628 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson":
[info]   22432.029 ±(99.9%) 897.614 ops/s [Average]
[info]   (min, avg, max) = (22068.169, 22432.029, 22673.026), stdev = 233.108
[info]   CI (99.9%): [21534.415, 23329.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1238.742 ±(99.9%) 49.581 MB/sec [Average]
[info]   (min, avg, max) = (1218.626, 1238.742, 1252.025), stdev = 12.876
[info]   CI (99.9%): [1189.161, 1288.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   86920.042 ±(99.9%) 0.190 B/op [Average]
[info]   (min, avg, max) = (86920.018, 86920.042, 86920.130), stdev = 0.049
[info]   CI (99.9%): [86919.852, 86920.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.164 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.058, 0.125), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4.110 ±(99.9%) 11.754 B/op [Average]
[info]   (min, avg, max) = (1.445, 4.110, 8.908), stdev = 3.053
[info]   CI (99.9%): [≈ 0, 15.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1262.890 ±(99.9%) 572.091 MB/sec [Average]
[info]   (min, avg, max) = (998.048, 1262.890, 1343.977), stdev = 148.570
[info]   CI (99.9%): [690.799, 1834.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   88611.461 ±(99.9%) 39906.193 B/op [Average]
[info]   (min, avg, max) = (70134.402, 88611.461, 94349.037), stdev = 10363.512
[info]   CI (99.9%): [48705.268, 128517.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 1.000
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce
[info] # Run progress: 22.95% complete, ETA 00:49:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 129416.548 ops/s
[info] # Warmup Iteration   2: 160316.361 ops/s
[info] # Warmup Iteration   3: 164882.333 ops/s
[info] Iteration   1: 165775.642 ops/s
[info]                  ·gc.alloc.rate:                   830.872 MB/sec
[info]                  ·gc.alloc.rate.norm:              7888.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.791 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      976.932 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9274.648 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 167959.437 ops/s
[info]                  ·gc.alloc.rate:                   841.674 MB/sec
[info]                  ·gc.alloc.rate.norm:              7888.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.780 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      651.059 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6101.598 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 165359.751 ops/s
[info]                  ·gc.alloc.rate:                   828.598 MB/sec
[info]                  ·gc.alloc.rate.norm:              7888.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.594 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      978.375 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9313.828 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 168405.310 ops/s
[info]                  ·gc.alloc.rate:                   844.046 MB/sec
[info]                  ·gc.alloc.rate.norm:              7888.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.584 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.825 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6119.645 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 167688.084 ops/s
[info]                  ·gc.alloc.rate:                   840.287 MB/sec
[info]                  ·gc.alloc.rate.norm:              7888.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.586 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      987.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9265.823 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce":
[info]   167037.645 ±(99.9%) 5290.698 ops/s [Average]
[info]   (min, avg, max) = (165359.751, 167037.645, 168405.310), stdev = 1373.977
[info]   CI (99.9%): [161746.947, 172328.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate":
[info]   837.095 ±(99.9%) 26.566 MB/sec [Average]
[info]   (min, avg, max) = (828.598, 837.095, 844.046), stdev = 6.899
[info]   CI (99.9%): [810.530, 863.661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   7888.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7888.002, 7888.003, 7888.003), stdev = 0.001
[info]   CI (99.9%): [7888.002, 7888.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.071, 0.083), stdev = 0.011
[info]   CI (99.9%): [0.027, 0.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.667 ±(99.9%) 0.417 B/op [Average]
[info]   (min, avg, max) = (0.584, 0.667, 0.791), stdev = 0.108
[info]   CI (99.9%): [0.250, 1.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   849.651 ±(99.9%) 691.638 MB/sec [Average]
[info]   (min, avg, max) = (651.059, 849.651, 987.062), stdev = 179.616
[info]   CI (99.9%): [158.012, 1541.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   8015.108 ±(99.9%) 6694.946 B/op [Average]
[info]   (min, avg, max) = (6101.598, 8015.108, 9313.828), stdev = 1738.656
[info]   CI (99.9%): [1320.162, 14710.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala
[info] # Run progress: 23.29% complete, ETA 00:49:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 476394.943 ops/s
[info] # Warmup Iteration   2: 501707.807 ops/s
[info] # Warmup Iteration   3: 529879.858 ops/s
[info] Iteration   1: 505117.355 ops/s
[info]                  ·gc.alloc.rate:                   387.643 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.010 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.513 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1594.016 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 489041.454 ops/s
[info]                  ·gc.alloc.rate:                   375.440 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.678 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.835 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.481 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1056.907 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 514456.670 ops/s
[info]                  ·gc.alloc.rate:                   394.791 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.127 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.348 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1004.695 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 532514.212 ops/s
[info]                  ·gc.alloc.rate:                   408.676 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      326.370 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 964.713 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 531247.511 ops/s
[info]                  ·gc.alloc.rate:                   407.733 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.370 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.789 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1934.034 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala":
[info]   514475.440 ±(99.9%) 70508.892 ops/s [Average]
[info]   (min, avg, max) = (489041.454, 514475.440, 532514.212), stdev = 18310.935
[info]   CI (99.9%): [443966.548, 584984.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   394.857 ±(99.9%) 53.971 MB/sec [Average]
[info]   (min, avg, max) = (375.440, 394.857, 408.676), stdev = 14.016
[info]   CI (99.9%): [340.885, 448.828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1208.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1208.001, 1208.001, 1208.001), stdev = 0.001
[info]   CI (99.9%): [1208.001, 1208.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.771 ±(99.9%) 6.261 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.771, 3.678), stdev = 1.626
[info]   CI (99.9%): [≈ 0, 7.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2.472 ±(99.9%) 20.160 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.472, 11.835), stdev = 5.236
[info]   CI (99.9%): [≈ 0, 22.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   429.500 ±(99.9%) 570.027 MB/sec [Average]
[info]   (min, avg, max) = (326.370, 429.500, 652.789), stdev = 148.034
[info]   CI (99.9%): [≈ 0, 999.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1310.873 ±(99.9%) 1663.560 B/op [Average]
[info]   (min, avg, max) = (964.713, 1310.873, 1934.034), stdev = 432.021
[info]   CI (99.9%): [≈ 0, 2974.433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 5.000), stdev = 1.673
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 23.63% complete, ETA 00:48:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 490212.516 ops/s
[info] # Warmup Iteration   2: 546653.056 ops/s
[info] # Warmup Iteration   3: 548445.993 ops/s
[info] Iteration   1: 549752.272 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 549675.344 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 549803.131 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 549796.971 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 550333.463 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc":
[info]   549872.236 ±(99.9%) 1012.083 ops/s [Average]
[info]   (min, avg, max) = (549675.344, 549872.236, 550333.463), stdev = 262.835
[info]   CI (99.9%): [548860.153, 550884.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson
[info] # Run progress: 23.97% complete, ETA 00:48:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 156519.023 ops/s
[info] # Warmup Iteration   2: 280852.593 ops/s
[info] # Warmup Iteration   3: 283438.451 ops/s
[info] Iteration   1: 285523.864 ops/s
[info]                  ·gc.alloc.rate:                   789.586 MB/sec
[info]                  ·gc.alloc.rate.norm:              4352.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.229 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.202 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3594.774 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 278503.168 ops/s
[info]                  ·gc.alloc.rate:                   770.001 MB/sec
[info]                  ·gc.alloc.rate.norm:              4352.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.706 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      983.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5556.447 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 280838.728 ops/s
[info]                  ·gc.alloc.rate:                   776.493 MB/sec
[info]                  ·gc.alloc.rate.norm:              4352.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.350 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.777 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3686.635 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 286707.333 ops/s
[info]                  ·gc.alloc.rate:                   792.844 MB/sec
[info]                  ·gc.alloc.rate.norm:              4352.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.686 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.201 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3623.913 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 285006.135 ops/s
[info]                  ·gc.alloc.rate:                   788.246 MB/sec
[info]                  ·gc.alloc.rate.norm:              4352.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.345 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      995.091 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5494.019 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson":
[info]   283315.845 ±(99.9%) 13412.820 ops/s [Average]
[info]   (min, avg, max) = (278503.168, 283315.845, 286707.333), stdev = 3483.267
[info]   CI (99.9%): [269903.025, 296728.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   783.434 ±(99.9%) 37.441 MB/sec [Average]
[info]   (min, avg, max) = (770.001, 783.434, 792.844), stdev = 9.723
[info]   CI (99.9%): [745.993, 820.875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4352.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4352.001, 4352.001, 4352.002), stdev = 0.001
[info]   CI (99.9%): [4352.001, 4352.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.125), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.463 ±(99.9%) 0.839 B/op [Average]
[info]   (min, avg, max) = (0.229, 0.463, 0.706), stdev = 0.218
[info]   CI (99.9%): [≈ 0, 1.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   789.675 ±(99.9%) 701.277 MB/sec [Average]
[info]   (min, avg, max) = (652.202, 789.675, 995.091), stdev = 182.119
[info]   CI (99.9%): [88.398, 1490.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4391.157 ±(99.9%) 3989.389 B/op [Average]
[info]   (min, avg, max) = (3594.774, 4391.157, 5556.447), stdev = 1036.032
[info]   CI (99.9%): [401.768, 8380.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 4.000), stdev = 0.837
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce
[info] # Run progress: 24.32% complete, ETA 00:48:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 30731.357 ops/s
[info] # Warmup Iteration   2: 38024.552 ops/s
[info] # Warmup Iteration   3: 37551.045 ops/s
[info] Iteration   1: 37631.504 ops/s
[info]                  ·gc.alloc.rate:                   1678.852 MB/sec
[info]                  ·gc.alloc.rate.norm:              70199.585 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.483 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1645.734 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68814.802 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 37374.123 ops/s
[info]                  ·gc.alloc.rate:                   1667.450 MB/sec
[info]                  ·gc.alloc.rate.norm:              70200.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.383 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1659.156 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69850.832 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 38463.603 ops/s
[info]                  ·gc.alloc.rate:                   1715.397 MB/sec
[info]                  ·gc.alloc.rate.norm:              70200.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.704 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1670.447 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68360.504 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 38307.631 ops/s
[info]                  ·gc.alloc.rate:                   1708.673 MB/sec
[info]                  ·gc.alloc.rate.norm:              70200.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.566 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1679.378 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68996.427 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 37800.685 ops/s
[info]                  ·gc.alloc.rate:                   1685.879 MB/sec
[info]                  ·gc.alloc.rate.norm:              70200.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.467 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1687.566 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70270.263 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce":
[info]   37915.510 ±(99.9%) 1765.751 ops/s [Average]
[info]   (min, avg, max) = (37374.123, 37915.510, 38463.603), stdev = 458.560
[info]   CI (99.9%): [36149.758, 39681.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate":
[info]   1691.250 ±(99.9%) 77.866 MB/sec [Average]
[info]   (min, avg, max) = (1667.450, 1691.250, 1715.397), stdev = 20.222
[info]   CI (99.9%): [1613.384, 1769.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   70199.926 ±(99.9%) 0.733 B/op [Average]
[info]   (min, avg, max) = (70199.585, 70199.926, 70200.012), stdev = 0.190
[info]   CI (99.9%): [70199.192, 70200.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3.120 ±(99.9%) 3.927 B/op [Average]
[info]   (min, avg, max) = (1.704, 3.120, 4.383), stdev = 1.020
[info]   CI (99.9%): [≈ 0, 7.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1668.456 ±(99.9%) 63.601 MB/sec [Average]
[info]   (min, avg, max) = (1645.734, 1668.456, 1687.566), stdev = 16.517
[info]   CI (99.9%): [1604.855, 1732.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   69258.566 ±(99.9%) 3011.432 B/op [Average]
[info]   (min, avg, max) = (68360.504, 69258.566, 70270.263), stdev = 782.059
[info]   CI (99.9%): [66247.134, 72269.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala
[info] # Run progress: 24.66% complete, ETA 00:48:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 63934.490 ops/s
[info] # Warmup Iteration   2: 105387.195 ops/s
[info] # Warmup Iteration   3: 105581.516 ops/s
[info] Iteration   1: 105532.973 ops/s
[info]                  ·gc.alloc.rate:                   1164.147 MB/sec
[info]                  ·gc.alloc.rate.norm:              17360.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.552 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1315.076 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19610.693 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 105357.959 ops/s
[info]                  ·gc.alloc.rate:                   1161.987 MB/sec
[info]                  ·gc.alloc.rate.norm:              17360.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.555 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      992.773 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14831.956 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 106618.403 ops/s
[info]                  ·gc.alloc.rate:                   1176.235 MB/sec
[info]                  ·gc.alloc.rate.norm:              17360.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.615 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1333.188 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19676.472 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 100962.079 ops/s
[info]                  ·gc.alloc.rate:                   1113.495 MB/sec
[info]                  ·gc.alloc.rate.norm:              17360.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.974 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1004.747 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15664.569 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 102531.747 ops/s
[info]                  ·gc.alloc.rate:                   1130.744 MB/sec
[info]                  ·gc.alloc.rate.norm:              17360.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.278 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1007.355 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15465.647 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala":
[info]   104200.632 ±(99.9%) 9078.369 ops/s [Average]
[info]   (min, avg, max) = (100962.079, 104200.632, 106618.403), stdev = 2357.624
[info]   CI (99.9%): [95122.262, 113279.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1149.322 ±(99.9%) 100.656 MB/sec [Average]
[info]   (min, avg, max) = (1113.495, 1149.322, 1176.235), stdev = 26.140
[info]   CI (99.9%): [1048.666, 1249.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   17360.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (17360.004, 17360.004, 17360.004), stdev = 0.001
[info]   CI (99.9%): [17360.003, 17360.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.104), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.195 ±(99.9%) 1.552 B/op [Average]
[info]   (min, avg, max) = (0.615, 1.195, 1.555), stdev = 0.403
[info]   CI (99.9%): [≈ 0, 2.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1130.628 ±(99.9%) 680.970 MB/sec [Average]
[info]   (min, avg, max) = (992.773, 1130.628, 1333.188), stdev = 176.846
[info]   CI (99.9%): [449.658, 1811.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   17049.867 ±(99.9%) 9194.257 B/op [Average]
[info]   (min, avg, max) = (14831.956, 17049.867, 19676.472), stdev = 2387.719
[info]   CI (99.9%): [7855.611, 26244.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 5.000), stdev = 0.837
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala
[info] # Run progress: 25.00% complete, ETA 00:48:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 152803.728 ops/s
[info] # Warmup Iteration   2: 158241.883 ops/s
[info] # Warmup Iteration   3: 150641.413 ops/s
[info] Iteration   1: 155954.167 ops/s
[info]                  ·gc.alloc.rate:      101.457 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 156415.010 ops/s
[info]                  ·gc.alloc.rate:                   101.743 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.119 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21.326 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.742 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2573.933 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 159359.446 ops/s
[info]                  ·gc.alloc.rate:      103.679 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 151695.610 ops/s
[info]                  ·gc.alloc.rate:      98.733 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 158765.756 ops/s
[info]                  ·gc.alloc.rate:                   103.284 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.024 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.238 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.770 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2535.823 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala":
[info]   156437.998 ±(99.9%) 11660.234 ops/s [Average]
[info]   (min, avg, max) = (151695.610, 156437.998, 159359.446), stdev = 3028.126
[info]   CI (99.9%): [144777.763, 168098.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   101.779 ±(99.9%) 7.520 MB/sec [Average]
[info]   (min, avg, max) = (98.733, 101.779, 103.679), stdev = 1.953
[info]   CI (99.9%): [94.260, 109.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1024.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1024.003, 1024.003, 1024.003), stdev = 0.001
[info]   CI (99.9%): [1024.002, 1024.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.429 ±(99.9%) 3.639 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.429, 2.119), stdev = 0.945
[info]   CI (99.9%): [≈ 0, 4.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4.313 ±(99.9%) 36.624 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.313, 21.326), stdev = 9.511
[info]   CI (99.9%): [≈ 0, 40.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   102.302 ±(99.9%) 539.411 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 102.302, 255.770), stdev = 140.083
[info]   CI (99.9%): [≈ 0, 641.713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1021.951 ±(99.9%) 5388.703 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1021.951, 2573.933), stdev = 1399.429
[info]   CI (99.9%): [≈ 0, 6410.654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 2.000), stdev = 1.095
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson
[info] # Run progress: 25.34% complete, ETA 00:47:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21370.506 ops/s
[info] # Warmup Iteration   2: 39710.596 ops/s
[info] # Warmup Iteration   3: 39853.257 ops/s
[info] Iteration   1: 39766.496 ops/s
[info]                  ·gc.alloc.rate:                   2076.777 MB/sec
[info]                  ·gc.alloc.rate.norm:              82214.598 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.119 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1991.856 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78852.789 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 38517.571 ops/s
[info]                  ·gc.alloc.rate:                   2006.036 MB/sec
[info]                  ·gc.alloc.rate.norm:              81952.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.954 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2010.739 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 82144.124 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 38153.360 ops/s
[info]                  ·gc.alloc.rate:                   1986.314 MB/sec
[info]                  ·gc.alloc.rate.norm:              81952.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.717 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2022.002 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 83424.443 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 38500.123 ops/s
[info]                  ·gc.alloc.rate:                   2004.554 MB/sec
[info]                  ·gc.alloc.rate.norm:              81952.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.255 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030.175 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 82999.446 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 39702.855 ops/s
[info]                  ·gc.alloc.rate:                   2067.229 MB/sec
[info]                  ·gc.alloc.rate.norm:              81952.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.126 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035.553 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 80696.254 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson":
[info]   38928.081 ±(99.9%) 2891.237 ops/s [Average]
[info]   (min, avg, max) = (38153.360, 38928.081, 39766.496), stdev = 750.845
[info]   CI (99.9%): [36036.844, 41819.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2028.182 ±(99.9%) 157.451 MB/sec [Average]
[info]   (min, avg, max) = (1986.314, 2028.182, 2076.777), stdev = 40.889
[info]   CI (99.9%): [1870.731, 2185.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   82004.528 ±(99.9%) 452.191 B/op [Average]
[info]   (min, avg, max) = (81952.011, 82004.528, 82214.598), stdev = 117.432
[info]   CI (99.9%): [81552.338, 82456.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.100 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.100, 0.146), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4.034 ±(99.9%) 5.813 B/op [Average]
[info]   (min, avg, max) = (1.717, 4.034, 5.954), stdev = 1.510
[info]   CI (99.9%): [≈ 0, 9.848] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   2018.065 ±(99.9%) 66.932 MB/sec [Average]
[info]   (min, avg, max) = (1991.856, 2018.065, 2035.553), stdev = 17.382
[info]   CI (99.9%): [1951.133, 2084.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   81623.411 ±(99.9%) 7189.549 B/op [Average]
[info]   (min, avg, max) = (78852.789, 81623.411, 83424.443), stdev = 1867.103
[info]   CI (99.9%): [74433.862, 88812.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce
[info] # Run progress: 25.68% complete, ETA 00:47:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 62841.826 ops/s
[info] # Warmup Iteration   2: 81953.021 ops/s
[info] # Warmup Iteration   3: 77742.757 ops/s
[info] Iteration   1: 77665.172 ops/s
[info]                  ·gc.alloc.rate:                   596.581 MB/sec
[info]                  ·gc.alloc.rate.norm:              12088.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.460 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70.110 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.577 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13242.869 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 80390.489 ops/s
[info]                  ·gc.alloc.rate:                   617.553 MB/sec
[info]                  ·gc.alloc.rate.norm:              12088.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.815 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      651.600 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12754.432 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 80519.101 ops/s
[info]                  ·gc.alloc.rate:                   618.592 MB/sec
[info]                  ·gc.alloc.rate.norm:              12088.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.221 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      651.658 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12734.159 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 79062.827 ops/s
[info]                  ·gc.alloc.rate:                   607.186 MB/sec
[info]                  ·gc.alloc.rate.norm:              12088.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.829 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      651.429 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12968.793 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 80745.503 ops/s
[info]                  ·gc.alloc.rate:                   620.113 MB/sec
[info]                  ·gc.alloc.rate.norm:              12088.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      326.378 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6362.167 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce":
[info]   79676.618 ±(99.9%) 5014.922 ops/s [Average]
[info]   (min, avg, max) = (77665.172, 79676.618, 80745.503), stdev = 1302.359
[info]   CI (99.9%): [74661.696, 84691.541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate":
[info]   612.005 ±(99.9%) 38.556 MB/sec [Average]
[info]   (min, avg, max) = (596.581, 612.005, 620.113), stdev = 10.013
[info]   CI (99.9%): [573.450, 650.561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   12088.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (12088.005, 12088.005, 12088.006), stdev = 0.001
[info]   CI (99.9%): [12088.004, 12088.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.721 ±(99.9%) 5.896 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.721, 3.460), stdev = 1.531
[info]   CI (99.9%): [≈ 0, 6.618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   14.595 ±(99.9%) 119.512 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14.595, 70.110), stdev = 31.037
[info]   CI (99.9%): [≈ 0, 134.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   586.928 ±(99.9%) 560.864 MB/sec [Average]
[info]   (min, avg, max) = (326.378, 586.928, 653.577), stdev = 145.655
[info]   CI (99.9%): [26.064, 1147.793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   11612.484 ±(99.9%) 11329.298 B/op [Average]
[info]   (min, avg, max) = (6362.167, 11612.484, 13242.869), stdev = 2942.183
[info]   CI (99.9%): [283.186, 22941.782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala
[info] # Run progress: 26.03% complete, ETA 00:47:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 67179.156 ops/s
[info] # Warmup Iteration   2: 98628.325 ops/s
[info] # Warmup Iteration   3: 94629.030 ops/s
[info] Iteration   1: 97060.431 ops/s
[info]                  ·gc.alloc.rate:                   320.602 MB/sec
[info]                  ·gc.alloc.rate.norm:              5200.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.730 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4147.814 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 96266.890 ops/s
[info]                  ·gc.alloc.rate:                   318.018 MB/sec
[info]                  ·gc.alloc.rate.norm:              5200.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.761 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4182.019 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 87170.602 ops/s
[info]                  ·gc.alloc.rate:                   287.986 MB/sec
[info]                  ·gc.alloc.rate.norm:              5200.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.376 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      320.376 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5784.865 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 99722.542 ops/s
[info]                  ·gc.alloc.rate:                   329.435 MB/sec
[info]                  ·gc.alloc.rate.norm:              5200.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.657 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      320.369 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5056.900 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 99415.154 ops/s
[info]                  ·gc.alloc.rate:                   328.412 MB/sec
[info]                  ·gc.alloc.rate.norm:              5200.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.330 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      322.681 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5109.269 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala":
[info]   95927.124 ±(99.9%) 19695.588 ops/s [Average]
[info]   (min, avg, max) = (87170.602, 95927.124, 99722.542), stdev = 5114.882
[info]   CI (99.9%): [76231.536, 115622.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   316.890 ±(99.9%) 65.024 MB/sec [Average]
[info]   (min, avg, max) = (287.986, 316.890, 329.435), stdev = 16.887
[info]   CI (99.9%): [251.866, 381.915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   5200.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5200.004, 5200.004, 5200.005), stdev = 0.001
[info]   CI (99.9%): [5200.003, 5200.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.017 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.272 ±(99.9%) 1.073 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.272, 0.657), stdev = 0.279
[info]   CI (99.9%): [≈ 0, 1.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   294.983 ±(99.9%) 137.975 MB/sec [Average]
[info]   (min, avg, max) = (255.730, 294.983, 322.681), stdev = 35.832
[info]   CI (99.9%): [157.009, 432.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4856.173 ±(99.9%) 2669.939 B/op [Average]
[info]   (min, avg, max) = (4147.814, 4856.173, 5784.865), stdev = 693.375
[info]   CI (99.9%): [2186.234, 7526.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala
[info] # Run progress: 26.37% complete, ETA 00:47:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 104573.428 ops/s
[info] # Warmup Iteration   2: 116915.577 ops/s
[info] # Warmup Iteration   3: 116670.577 ops/s
[info] Iteration   1: 118053.663 ops/s
[info]                  ·gc.alloc.rate:                   361.247 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.794 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3410.148 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 117654.632 ops/s
[info]                  ·gc.alloc.rate:                   359.937 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.737 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3421.798 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 116974.590 ops/s
[info]                  ·gc.alloc.rate:                   357.959 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.722 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50.074 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.423 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4418.623 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 116648.939 ops/s
[info]                  ·gc.alloc.rate:                   356.955 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.843 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.835 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8834.977 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 117576.244 ops/s
[info]                  ·gc.alloc.rate:                   359.731 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      326.364 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4369.290 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala":
[info]   117381.614 ±(99.9%) 2166.780 ops/s [Average]
[info]   (min, avg, max) = (116648.939, 117381.614, 118053.663), stdev = 562.706
[info]   CI (99.9%): [115214.834, 119548.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   359.166 ±(99.9%) 6.555 MB/sec [Average]
[info]   (min, avg, max) = (356.955, 359.166, 361.247), stdev = 1.702
[info]   CI (99.9%): [352.611, 365.720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   4816.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4816.003, 4816.004, 4816.004), stdev = 0.001
[info]   CI (99.9%): [4816.003, 4816.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.757 ±(99.9%) 6.383 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.757, 3.722), stdev = 1.658
[info]   CI (99.9%): [≈ 0, 7.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   10.183 ±(99.9%) 85.880 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.183, 50.074), stdev = 22.303
[info]   CI (99.9%): [≈ 0, 96.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   364.231 ±(99.9%) 640.574 MB/sec [Average]
[info]   (min, avg, max) = (255.737, 364.231, 654.835), stdev = 166.355
[info]   CI (99.9%): [≈ 0, 1004.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4890.967 ±(99.9%) 8696.352 B/op [Average]
[info]   (min, avg, max) = (3410.148, 4890.967, 8834.977), stdev = 2258.415
[info]   CI (99.9%): [≈ 0, 13587.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 3.000), stdev = 1.225
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 26.71% complete, ETA 00:46:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 104132.511 ops/s
[info] # Warmup Iteration   2: 115867.783 ops/s
[info] # Warmup Iteration   3: 115620.882 ops/s
[info] Iteration   1: 113782.933 ops/s
[info]                  ·gc.alloc.rate:                   258.504 MB/sec
[info]                  ·gc.alloc.rate.norm:              3576.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.029 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.400 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.777 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3538.284 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 113692.215 ops/s
[info]                  ·gc.alloc.rate:                   258.274 MB/sec
[info]                  ·gc.alloc.rate.norm:              3576.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.761 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3541.209 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 113861.913 ops/s
[info]                  ·gc.alloc.rate:                   258.672 MB/sec
[info]                  ·gc.alloc.rate.norm:              3576.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.041 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.566 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.777 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3535.985 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 114223.991 ops/s
[info]                  ·gc.alloc.rate:      259.519 MB/sec
[info]                  ·gc.alloc.rate.norm: 3576.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 113921.424 ops/s
[info]                  ·gc.alloc.rate:                   258.841 MB/sec
[info]                  ·gc.alloc.rate.norm:              3576.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.719 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51.383 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.407 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4537.099 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc":
[info]   113896.495 ±(99.9%) 778.976 ops/s [Average]
[info]   (min, avg, max) = (113692.215, 113896.495, 114223.991), stdev = 202.298
[info]   CI (99.9%): [113117.519, 114675.472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   258.762 ±(99.9%) 1.818 MB/sec [Average]
[info]   (min, avg, max) = (258.274, 258.762, 259.519), stdev = 0.472
[info]   CI (99.9%): [256.943, 260.580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   3576.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3576.004, 3576.004, 3576.004), stdev = 0.001
[info]   CI (99.9%): [3576.004, 3576.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   0.758 ±(99.9%) 6.375 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.758, 3.719), stdev = 1.656
[info]   CI (99.9%): [≈ 0, 7.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   10.470 ±(99.9%) 88.074 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.470, 51.383), stdev = 22.872
[info]   CI (99.9%): [≈ 0, 98.544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   219.144 ±(99.9%) 487.024 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 219.144, 328.407), stdev = 126.479
[info]   CI (99.9%): [≈ 0, 706.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   3030.515 ±(99.9%) 6732.560 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3030.515, 4537.099), stdev = 1748.425
[info]   CI (99.9%): [≈ 0, 9763.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 3.000), stdev = 1.225
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce
[info] # Run progress: 27.05% complete, ETA 00:46:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6002.046 ops/s
[info] # Warmup Iteration   2: 9320.372 ops/s
[info] # Warmup Iteration   3: 9460.638 ops/s
[info] Iteration   1: 9489.359 ops/s
[info]                  ·gc.alloc.rate:                   1558.686 MB/sec
[info]                  ·gc.alloc.rate.norm:              258488.046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13.807 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1640.844 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 272112.817 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 9883.156 ops/s
[info]                  ·gc.alloc.rate:                   1622.679 MB/sec
[info]                  ·gc.alloc.rate.norm:              258488.041 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19.890 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1653.122 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 263337.372 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 9813.282 ops/s
[info]                  ·gc.alloc.rate:                   1611.671 MB/sec
[info]                  ·gc.alloc.rate.norm:              258488.042 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1664.770 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 267004.453 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 9811.988 ops/s
[info]                  ·gc.alloc.rate:                   1611.314 MB/sec
[info]                  ·gc.alloc.rate.norm:              258491.873 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13.356 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1676.038 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 268875.230 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 9877.623 ops/s
[info]                  ·gc.alloc.rate:                   1622.197 MB/sec
[info]                  ·gc.alloc.rate.norm:              258504.045 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13.268 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1683.505 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 268273.696 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce":
[info]   9775.082 ±(99.9%) 628.768 ops/s [Average]
[info]   (min, avg, max) = (9489.359, 9775.082, 9883.156), stdev = 163.289
[info]   CI (99.9%): [9146.313, 10403.850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate":
[info]   1605.309 ±(99.9%) 102.552 MB/sec [Average]
[info]   (min, avg, max) = (1558.686, 1605.309, 1622.679), stdev = 26.632
[info]   CI (99.9%): [1502.757, 1707.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   258492.009 ±(99.9%) 26.682 B/op [Average]
[info]   (min, avg, max) = (258488.041, 258492.009, 258504.045), stdev = 6.929
[info]   CI (99.9%): [258465.327, 258518.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.125), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   14.067 ±(99.9%) 13.822 B/op [Average]
[info]   (min, avg, max) = (10.015, 14.067, 19.890), stdev = 3.589
[info]   CI (99.9%): [0.245, 27.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1663.656 ±(99.9%) 66.134 MB/sec [Average]
[info]   (min, avg, max) = (1640.844, 1663.656, 1683.505), stdev = 17.175
[info]   CI (99.9%): [1597.521, 1729.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   267920.714 ±(99.9%) 12246.014 B/op [Average]
[info]   (min, avg, max) = (263337.372, 267920.714, 272112.817), stdev = 3180.251
[info]   CI (99.9%): [255674.699, 280166.728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala
[info] # Run progress: 27.40% complete, ETA 00:46:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5164.206 ops/s
[info] # Warmup Iteration   2: 10382.902 ops/s
[info] # Warmup Iteration   3: 10508.553 ops/s
[info] Iteration   1: 10545.406 ops/s
[info]                  ·gc.alloc.rate:                   1629.392 MB/sec
[info]                  ·gc.alloc.rate.norm:              243136.039 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.319 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1657.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 247258.773 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 10695.563 ops/s
[info]                  ·gc.alloc.rate:                   1652.591 MB/sec
[info]                  ·gc.alloc.rate.norm:              243136.038 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15.315 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1670.530 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 245775.315 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 10666.574 ops/s
[info]                  ·gc.alloc.rate:                   1647.985 MB/sec
[info]                  ·gc.alloc.rate.norm:              243136.041 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.214 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1680.394 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 247917.608 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 10382.313 ops/s
[info]                  ·gc.alloc.rate:                   1603.836 MB/sec
[info]                  ·gc.alloc.rate.norm:              243159.633 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.311 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1686.597 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 255707.147 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 10687.784 ops/s
[info]                  ·gc.alloc.rate:                   1651.155 MB/sec
[info]                  ·gc.alloc.rate.norm:              243168.038 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.196 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.403 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 199317.720 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala":
[info]   10595.528 ±(99.9%) 514.960 ops/s [Average]
[info]   (min, avg, max) = (10382.313, 10595.528, 10695.563), stdev = 133.734
[info]   CI (99.9%): [10080.568, 11110.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1636.992 ±(99.9%) 79.891 MB/sec [Average]
[info]   (min, avg, max) = (1603.836, 1636.992, 1652.591), stdev = 20.747
[info]   CI (99.9%): [1557.101, 1716.882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   243147.158 ±(99.9%) 59.731 B/op [Average]
[info]   (min, avg, max) = (243136.038, 243147.158, 243168.038), stdev = 15.512
[info]   CI (99.9%): [243087.427, 243206.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.104), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   9.871 ±(99.9%) 12.699 B/op [Average]
[info]   (min, avg, max) = (6.311, 9.871, 15.315), stdev = 3.298
[info]   CI (99.9%): [≈ 0, 22.570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1609.589 ±(99.9%) 553.136 MB/sec [Average]
[info]   (min, avg, max) = (1353.403, 1609.589, 1686.597), stdev = 143.648
[info]   CI (99.9%): [1056.453, 2162.725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   239195.313 ±(99.9%) 87114.326 B/op [Average]
[info]   (min, avg, max) = (199317.720, 239195.313, 255707.147), stdev = 22623.314
[info]   CI (99.9%): [152080.987, 326309.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala
[info] # Run progress: 27.74% complete, ETA 00:46:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 101851.339 ops/s
[info] # Warmup Iteration   2: 107170.025 ops/s
[info] # Warmup Iteration   3: 106686.093 ops/s
[info] Iteration   1: 102831.959 ops/s
[info]                  ·gc.alloc.rate:                   267.575 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.752 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3915.032 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 105615.948 ops/s
[info]                  ·gc.alloc.rate:                   274.822 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.757 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3811.849 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 107222.115 ops/s
[info]                  ·gc.alloc.rate:                   279.013 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.048 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.700 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.768 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3754.762 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 107570.383 ops/s
[info]                  ·gc.alloc.rate:                   279.993 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.634 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38.527 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      331.461 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4848.923 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 106737.298 ops/s
[info]                  ·gc.alloc.rate:                   277.744 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.614 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      331.355 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4886.623 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala":
[info]   105995.540 ±(99.9%) 7378.571 ops/s [Average]
[info]   (min, avg, max) = (102831.959, 105995.540, 107570.383), stdev = 1916.191
[info]   CI (99.9%): [98616.969, 113374.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   275.829 ±(99.9%) 19.281 MB/sec [Average]
[info]   (min, avg, max) = (267.575, 275.829, 279.993), stdev = 5.007
[info]   CI (99.9%): [256.548, 295.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.004, 4096.004, 4096.004), stdev = 0.001
[info]   CI (99.9%): [4096.003, 4096.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.545 ±(99.9%) 4.498 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.545, 2.634), stdev = 1.168
[info]   CI (99.9%): [≈ 0, 5.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   7.968 ±(99.9%) 65.793 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.968, 38.527), stdev = 17.086
[info]   CI (99.9%): [≈ 0, 73.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   286.019 ±(99.9%) 159.550 MB/sec [Average]
[info]   (min, avg, max) = (255.752, 286.019, 331.461), stdev = 41.435
[info]   CI (99.9%): [126.469, 445.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4243.438 ±(99.9%) 2206.341 B/op [Average]
[info]   (min, avg, max) = (3754.762, 4243.438, 4886.623), stdev = 572.980
[info]   CI (99.9%): [2037.096, 6449.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson
[info] # Run progress: 28.08% complete, ETA 00:45:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2448.733 ops/s
[info] # Warmup Iteration   2: 5733.130 ops/s
[info] # Warmup Iteration   3: 5908.869 ops/s
[info] Iteration   1: 5946.461 ops/s
[info]                  ·gc.alloc.rate:                   1569.913 MB/sec
[info]                  ·gc.alloc.rate.norm:              415600.074 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.509 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1654.505 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 437993.792 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 5981.954 ops/s
[info]                  ·gc.alloc.rate:                   1580.045 MB/sec
[info]                  ·gc.alloc.rate.norm:              415600.068 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.477 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1335.280 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 351219.506 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 5945.506 ops/s
[info]                  ·gc.alloc.rate:                   1569.940 MB/sec
[info]                  ·gc.alloc.rate.norm:              415600.069 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22.040 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1677.790 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 444150.487 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 5928.554 ops/s
[info]                  ·gc.alloc.rate:                   1565.241 MB/sec
[info]                  ·gc.alloc.rate.norm:              415600.069 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.526 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1685.555 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 447545.676 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 5965.645 ops/s
[info]                  ·gc.alloc.rate:                   1575.127 MB/sec
[info]                  ·gc.alloc.rate.norm:              415600.068 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.491 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.449 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 356846.155 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson":
[info]   5953.624 ±(99.9%) 79.214 ops/s [Average]
[info]   (min, avg, max) = (5928.554, 5953.624, 5981.954), stdev = 20.572
[info]   CI (99.9%): [5874.410, 6032.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1572.053 ±(99.9%) 21.847 MB/sec [Average]
[info]   (min, avg, max) = (1565.241, 1572.053, 1580.045), stdev = 5.674
[info]   CI (99.9%): [1550.206, 1593.900] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   415600.070 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (415600.068, 415600.070, 415600.074), stdev = 0.002
[info]   CI (99.9%): [415600.060, 415600.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.033, 0.083), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   8.808 ±(99.9%) 28.482 B/op [Average]
[info]   (min, avg, max) = (5.477, 8.808, 22.040), stdev = 7.397
[info]   CI (99.9%): [≈ 0, 37.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1541.116 ±(99.9%) 695.153 MB/sec [Average]
[info]   (min, avg, max) = (1335.280, 1541.116, 1685.555), stdev = 180.529
[info]   CI (99.9%): [845.962, 2236.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   407551.123 ±(99.9%) 188741.253 B/op [Average]
[info]   (min, avg, max) = (351219.506, 407551.123, 447545.676), stdev = 49015.504
[info]   CI (99.9%): [218809.870, 596292.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce
[info] # Run progress: 28.42% complete, ETA 00:45:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16503.595 ops/s
[info] # Warmup Iteration   2: 24608.545 ops/s
[info] # Warmup Iteration   3: 24971.595 ops/s
[info] Iteration   1: 24960.432 ops/s
[info]                  ·gc.alloc.rate:                   1403.497 MB/sec
[info]                  ·gc.alloc.rate.norm:              88480.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.250 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1635.967 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 103135.524 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 24749.757 ops/s
[info]                  ·gc.alloc.rate:                   1391.070 MB/sec
[info]                  ·gc.alloc.rate.norm:              88472.309 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.295 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1317.081 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 83766.625 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 24385.688 ops/s
[info]                  ·gc.alloc.rate:                   1370.741 MB/sec
[info]                  ·gc.alloc.rate.norm:              88456.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.718 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1326.107 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 85575.667 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 24414.055 ops/s
[info]                  ·gc.alloc.rate:                   1372.667 MB/sec
[info]                  ·gc.alloc.rate.norm:              88456.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1334.389 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 85989.330 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 24621.120 ops/s
[info]                  ·gc.alloc.rate:                   1383.642 MB/sec
[info]                  ·gc.alloc.rate.norm:              88456.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.323 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.078 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 85734.905 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce":
[info]   24626.211 ±(99.9%) 923.060 ops/s [Average]
[info]   (min, avg, max) = (24385.688, 24626.211, 24960.432), stdev = 239.716
[info]   CI (99.9%): [23703.150, 25549.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1384.323 ±(99.9%) 52.160 MB/sec [Average]
[info]   (min, avg, max) = (1370.741, 1384.323, 1403.497), stdev = 13.546
[info]   CI (99.9%): [1332.164, 1436.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   88464.076 ±(99.9%) 43.764 B/op [Average]
[info]   (min, avg, max) = (88456.017, 88464.076, 88480.016), stdev = 11.365
[info]   CI (99.9%): [88420.311, 88507.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.083, 0.104), stdev = 0.015
[info]   CI (99.9%): [0.027, 0.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5.322 ±(99.9%) 3.670 B/op [Average]
[info]   (min, avg, max) = (4.026, 5.322, 6.718), stdev = 0.953
[info]   CI (99.9%): [1.652, 8.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1390.924 ±(99.9%) 528.609 MB/sec [Average]
[info]   (min, avg, max) = (1317.081, 1390.924, 1635.967), stdev = 137.278
[info]   CI (99.9%): [862.316, 1919.533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   88840.410 ±(99.9%) 30956.696 B/op [Average]
[info]   (min, avg, max) = (83766.625, 88840.410, 103135.524), stdev = 8039.356
[info]   CI (99.9%): [57883.715, 119797.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala
[info] # Run progress: 28.77% complete, ETA 00:45:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 316620.353 ops/s
[info] # Warmup Iteration   2: 349493.069 ops/s
[info] # Warmup Iteration   3: 344082.254 ops/s
[info] Iteration   1: 347403.090 ops/s
[info]                  ·gc.alloc.rate:                   766.282 MB/sec
[info]                  ·gc.alloc.rate.norm:              3472.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.283 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.051 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2963.486 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 345436.869 ops/s
[info]                  ·gc.alloc.rate:                   761.990 MB/sec
[info]                  ·gc.alloc.rate.norm:              3472.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.664 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.769 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2974.339 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 332645.796 ops/s
[info]                  ·gc.alloc.rate:                   733.671 MB/sec
[info]                  ·gc.alloc.rate.norm:              3472.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.394 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      979.682 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4636.216 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 337370.919 ops/s
[info]                  ·gc.alloc.rate:                   744.182 MB/sec
[info]                  ·gc.alloc.rate.norm:              3472.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.091 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3056.344 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 341560.563 ops/s
[info]                  ·gc.alloc.rate:                   753.371 MB/sec
[info]                  ·gc.alloc.rate.norm:              3472.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.576 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.709 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3026.521 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala":
[info]   340883.447 ±(99.9%) 23095.409 ops/s [Average]
[info]   (min, avg, max) = (332645.796, 340883.447, 347403.090), stdev = 5997.804
[info]   CI (99.9%): [317788.038, 363978.856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   751.899 ±(99.9%) 51.037 MB/sec [Average]
[info]   (min, avg, max) = (733.671, 751.899, 766.282), stdev = 13.254
[info]   CI (99.9%): [700.863, 802.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3472.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3472.001, 3472.001, 3472.001), stdev = 0.001
[info]   CI (99.9%): [3472.001, 3472.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.220 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.083, 0.146), stdev = 0.057
[info]   CI (99.9%): [≈ 0, 0.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.383 ±(99.9%) 1.006 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.383, 0.664), stdev = 0.261
[info]   CI (99.9%): [≈ 0, 1.389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   719.661 ±(99.9%) 559.744 MB/sec [Average]
[info]   (min, avg, max) = (652.769, 719.661, 979.682), stdev = 145.364
[info]   CI (99.9%): [159.917, 1279.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3331.381 ±(99.9%) 2812.556 B/op [Average]
[info]   (min, avg, max) = (2963.486, 3331.381, 4636.216), stdev = 730.412
[info]   CI (99.9%): [518.825, 6143.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.600, 6.000), stdev = 1.949
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 29.11% complete, ETA 00:45:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 344533.914 ops/s
[info] # Warmup Iteration   2: 375530.029 ops/s
[info] # Warmup Iteration   3: 367633.169 ops/s
[info] Iteration   1: 377051.217 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 382697.008 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 382414.742 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 382786.532 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 383397.886 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc":
[info]   381669.477 ±(99.9%) 10036.593 ops/s [Average]
[info]   (min, avg, max) = (377051.217, 381669.477, 383397.886), stdev = 2606.471
[info]   CI (99.9%): [371632.884, 391706.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson
[info] # Run progress: 29.45% complete, ETA 00:44:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17846.341 ops/s
[info] # Warmup Iteration   2: 27174.472 ops/s
[info] # Warmup Iteration   3: 27972.200 ops/s
[info] Iteration   1: 28035.336 ops/s
[info]                  ·gc.alloc.rate:                   1474.684 MB/sec
[info]                  ·gc.alloc.rate.norm:              82792.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.843 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1298.541 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 72902.957 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 28096.303 ops/s
[info]                  ·gc.alloc.rate:                   1477.718 MB/sec
[info]                  ·gc.alloc.rate.norm:              82792.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.162 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1634.666 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 91585.289 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 28193.868 ops/s
[info]                  ·gc.alloc.rate:                   1482.929 MB/sec
[info]                  ·gc.alloc.rate.norm:              82792.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.486 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1320.085 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 73700.402 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 28165.245 ops/s
[info]                  ·gc.alloc.rate:                   1481.699 MB/sec
[info]                  ·gc.alloc.rate.norm:              82792.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.816 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1664.365 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 92998.727 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 28036.719 ops/s
[info]                  ·gc.alloc.rate:                   1474.767 MB/sec
[info]                  ·gc.alloc.rate.norm:              82792.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.506 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.152 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 75178.734 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson":
[info]   28105.494 ±(99.9%) 279.779 ops/s [Average]
[info]   (min, avg, max) = (28035.336, 28105.494, 28193.868), stdev = 72.658
[info]   CI (99.9%): [27825.715, 28385.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1478.360 ±(99.9%) 14.771 MB/sec [Average]
[info]   (min, avg, max) = (1474.684, 1478.360, 1482.929), stdev = 3.836
[info]   CI (99.9%): [1463.588, 1493.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   82792.015 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (82792.014, 82792.015, 82792.018), stdev = 0.002
[info]   CI (99.9%): [82792.009, 82792.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.096 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.146), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   5.363 ±(99.9%) 7.517 B/op [Average]
[info]   (min, avg, max) = (3.486, 5.363, 8.162), stdev = 1.952
[info]   CI (99.9%): [≈ 0, 12.880] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1451.362 ±(99.9%) 699.900 MB/sec [Average]
[info]   (min, avg, max) = (1298.541, 1451.362, 1664.365), stdev = 181.762
[info]   CI (99.9%): [751.462, 2151.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   81273.222 ±(99.9%) 38907.605 B/op [Average]
[info]   (min, avg, max) = (72902.957, 81273.222, 92998.727), stdev = 10104.181
[info]   CI (99.9%): [42365.617, 120180.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce
[info] # Run progress: 29.79% complete, ETA 00:44:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 111241.747 ops/s
[info] # Warmup Iteration   2: 136473.922 ops/s
[info] # Warmup Iteration   3: 139393.707 ops/s
[info] Iteration   1: 138567.712 ops/s
[info]                  ·gc.alloc.rate:                   2256.809 MB/sec
[info]                  ·gc.alloc.rate.norm:              25640.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.892 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2321.918 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26379.723 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 136583.801 ops/s
[info]                  ·gc.alloc.rate:                   2224.778 MB/sec
[info]                  ·gc.alloc.rate.norm:              25640.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.720 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2344.820 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27023.453 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 138420.504 ops/s
[info]                  ·gc.alloc.rate:                   2255.271 MB/sec
[info]                  ·gc.alloc.rate.norm:              25640.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.183 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2022.665 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22995.520 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 137347.025 ops/s
[info]                  ·gc.alloc.rate:                   2237.358 MB/sec
[info]                  ·gc.alloc.rate.norm:              25640.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.193 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2369.328 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27152.367 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 136947.625 ops/s
[info]                  ·gc.alloc.rate:                   2230.886 MB/sec
[info]                  ·gc.alloc.rate.norm:              25640.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.675 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2375.368 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27300.566 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce":
[info]   137573.333 ±(99.9%) 3405.366 ops/s [Average]
[info]   (min, avg, max) = (136583.801, 137573.333, 138567.712), stdev = 884.363
[info]   CI (99.9%): [134167.968, 140978.699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   2241.021 ±(99.9%) 55.545 MB/sec [Average]
[info]   (min, avg, max) = (2224.778, 2241.021, 2256.809), stdev = 14.425
[info]   CI (99.9%): [2185.476, 2296.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   25640.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (25640.003, 25640.003, 25640.003), stdev = 0.001
[info]   CI (99.9%): [25640.003, 25640.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.117 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.117, 0.166), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1.332 ±(99.9%) 1.772 B/op [Average]
[info]   (min, avg, max) = (0.720, 1.332, 1.892), stdev = 0.460
[info]   CI (99.9%): [≈ 0, 3.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2286.820 ±(99.9%) 574.450 MB/sec [Average]
[info]   (min, avg, max) = (2022.665, 2286.820, 2375.368), stdev = 149.183
[info]   CI (99.9%): [1712.370, 2861.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   26170.326 ±(99.9%) 6966.611 B/op [Average]
[info]   (min, avg, max) = (22995.520, 26170.326, 27300.566), stdev = 1809.207
[info]   CI (99.9%): [19203.715, 33136.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.count":
[info]   34.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 0.707
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala
[info] # Run progress: 30.14% complete, ETA 00:44:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 186498.743 ops/s
[info] # Warmup Iteration   2: 301030.542 ops/s
[info] # Warmup Iteration   3: 302256.170 ops/s
[info] Iteration   1: 303000.520 ops/s
[info]                  ·gc.alloc.rate:                   428.154 MB/sec
[info]                  ·gc.alloc.rate.norm:              2224.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.788 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1328.665 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 301997.187 ops/s
[info]                  ·gc.alloc.rate:                   426.704 MB/sec
[info]                  ·gc.alloc.rate.norm:              2224.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.542 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      647.422 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3374.395 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 303009.739 ops/s
[info]                  ·gc.alloc.rate:                   428.097 MB/sec
[info]                  ·gc.alloc.rate.norm:              2224.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.108 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      325.681 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1691.944 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 306492.964 ops/s
[info]                  ·gc.alloc.rate:                   433.089 MB/sec
[info]                  ·gc.alloc.rate.norm:              2224.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.107 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      325.734 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1672.708 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 250227.077 ops/s
[info]                  ·gc.alloc.rate:                   353.702 MB/sec
[info]                  ·gc.alloc.rate.norm:              2224.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.510 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2059.309 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala":
[info]   292945.497 ±(99.9%) 92189.008 ops/s [Average]
[info]   (min, avg, max) = (250227.077, 292945.497, 306492.964), stdev = 23941.193
[info]   CI (99.9%): [200756.489, 385134.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   413.949 ±(99.9%) 130.023 MB/sec [Average]
[info]   (min, avg, max) = (353.702, 413.949, 433.089), stdev = 33.766
[info]   CI (99.9%): [283.927, 543.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2224.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2224.001, 2224.001, 2224.002), stdev = 0.001
[info]   CI (99.9%): [2224.001, 2224.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.104), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.151 ±(99.9%) 0.867 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.151, 0.542), stdev = 0.225
[info]   CI (99.9%): [≈ 0, 1.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   376.427 ±(99.9%) 595.077 MB/sec [Average]
[info]   (min, avg, max) = (255.788, 376.427, 647.422), stdev = 154.540
[info]   CI (99.9%): [≈ 0, 971.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2025.404 ±(99.9%) 3069.644 B/op [Average]
[info]   (min, avg, max) = (1328.665, 2025.404, 3374.395), stdev = 797.177
[info]   CI (99.9%): [≈ 0, 5095.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala
[info] # Run progress: 30.48% complete, ETA 00:44:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 686241.030 ops/s
[info] # Warmup Iteration   2: 718351.742 ops/s
[info] # Warmup Iteration   3: 707496.916 ops/s
[info] Iteration   1: 708734.415 ops/s
[info]                  ·gc.alloc.rate:                   461.098 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.240 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.195 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      585.509 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1300.291 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 742821.167 ops/s
[info]                  ·gc.alloc.rate:                   483.340 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.044 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.767 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 698.642 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 743790.395 ops/s
[info]                  ·gc.alloc.rate:                   483.866 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.220 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.726 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1389.823 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 745731.783 ops/s
[info]                  ·gc.alloc.rate:                   485.274 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.794 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 691.694 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 735395.328 ops/s
[info]                  ·gc.alloc.rate:                   478.562 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.805 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 701.420 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala":
[info]   735294.618 ±(99.9%) 59130.149 ops/s [Average]
[info]   (min, avg, max) = (708734.415, 735294.618, 745731.783), stdev = 15355.912
[info]   CI (99.9%): [676164.469, 794424.766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   478.428 ±(99.9%) 38.551 MB/sec [Average]
[info]   (min, avg, max) = (461.098, 478.428, 485.274), stdev = 10.012
[info]   CI (99.9%): [439.877, 516.979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1024.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1024.001, 1024.001, 1024.001), stdev = 0.001
[info]   CI (99.9%): [1024.000, 1024.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.673 ±(99.9%) 5.528 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.673, 3.240), stdev = 1.436
[info]   CI (99.9%): [≈ 0, 6.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.492 ±(99.9%) 12.281 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.492, 7.195), stdev = 3.189
[info]   CI (99.9%): [≈ 0, 13.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   445.520 ±(99.9%) 624.825 MB/sec [Average]
[info]   (min, avg, max) = (327.794, 445.520, 656.726), stdev = 162.265
[info]   CI (99.9%): [≈ 0, 1070.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   956.374 ±(99.9%) 1371.769 B/op [Average]
[info]   (min, avg, max) = (691.694, 956.374, 1389.823), stdev = 356.244
[info]   CI (99.9%): [≈ 0, 2328.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 5.000), stdev = 1.924
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson
[info] # Run progress: 30.82% complete, ETA 00:44:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 39082.396 ops/s
[info] # Warmup Iteration   2: 67991.125 ops/s
[info] # Warmup Iteration   3: 68341.475 ops/s
[info] Iteration   1: 67999.642 ops/s
[info]                  ·gc.alloc.rate:                   2888.464 MB/sec
[info]                  ·gc.alloc.rate.norm:              66856.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.336 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3020.907 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69921.513 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 68191.430 ops/s
[info]                  ·gc.alloc.rate:                   2897.587 MB/sec
[info]                  ·gc.alloc.rate.norm:              66856.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.844 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3043.907 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70232.037 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 68561.988 ops/s
[info]                  ·gc.alloc.rate:                   2913.420 MB/sec
[info]                  ·gc.alloc.rate.norm:              66856.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.301 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2715.968 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62324.950 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 69863.182 ops/s
[info]                  ·gc.alloc.rate:                   2974.171 MB/sec
[info]                  ·gc.alloc.rate.norm:              67009.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.345 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3058.616 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68911.611 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 70051.979 ops/s
[info]                  ·gc.alloc.rate:                   2989.608 MB/sec
[info]                  ·gc.alloc.rate.norm:              67161.858 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.742 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3063.884 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68830.479 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson":
[info]   68933.644 ±(99.9%) 3691.442 ops/s [Average]
[info]   (min, avg, max) = (67999.642, 68933.644, 70051.979), stdev = 958.656
[info]   CI (99.9%): [65242.202, 72625.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2932.650 ±(99.9%) 177.711 MB/sec [Average]
[info]   (min, avg, max) = (2888.464, 2932.650, 2989.608), stdev = 46.151
[info]   CI (99.9%): [2754.939, 3110.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   66947.780 ±(99.9%) 526.734 B/op [Average]
[info]   (min, avg, max) = (66856.006, 66947.780, 67161.858), stdev = 136.791
[info]   CI (99.9%): [66421.046, 67474.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.162 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.104, 0.162, 0.187), stdev = 0.034
[info]   CI (99.9%): [0.031, 0.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3.713 ±(99.9%) 3.119 B/op [Average]
[info]   (min, avg, max) = (2.345, 3.713, 4.336), stdev = 0.810
[info]   CI (99.9%): [0.595, 6.832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   2980.657 ±(99.9%) 573.362 MB/sec [Average]
[info]   (min, avg, max) = (2715.968, 2980.657, 3063.884), stdev = 148.900
[info]   CI (99.9%): [2407.294, 3554.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   68044.118 ±(99.9%) 12535.516 B/op [Average]
[info]   (min, avg, max) = (62324.950, 68044.118, 70232.037), stdev = 3255.434
[info]   CI (99.9%): [55508.602, 80579.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.count":
[info]   44.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.800, 9.000), stdev = 0.447
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 9.400, 10.000), stdev = 0.548
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce
[info] # Run progress: 31.16% complete, ETA 00:43:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 151318.114 ops/s
[info] # Warmup Iteration   2: 196386.188 ops/s
[info] # Warmup Iteration   3: 186889.283 ops/s
[info] Iteration   1: 191189.333 ops/s
[info]                  ·gc.alloc.rate:                   1342.009 MB/sec
[info]                  ·gc.alloc.rate.norm:              11048.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.343 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1305.892 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10750.675 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 194717.092 ops/s
[info]                  ·gc.alloc.rate:                   1366.623 MB/sec
[info]                  ·gc.alloc.rate.norm:              11048.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.178 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1314.784 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10628.933 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 196360.857 ops/s
[info]                  ·gc.alloc.rate:                   1378.478 MB/sec
[info]                  ·gc.alloc.rate.norm:              11048.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.167 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1323.675 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10608.773 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 196310.442 ops/s
[info]                  ·gc.alloc.rate:                   1378.379 MB/sec
[info]                  ·gc.alloc.rate.norm:              11048.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.501 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1332.606 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10681.118 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 196117.785 ops/s
[info]                  ·gc.alloc.rate:                   1376.675 MB/sec
[info]                  ·gc.alloc.rate.norm:              11048.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.668 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.303 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10748.087 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce":
[info]   194939.102 ±(99.9%) 8480.450 ops/s [Average]
[info]   (min, avg, max) = (191189.333, 194939.102, 196360.857), stdev = 2202.346
[info]   CI (99.9%): [186458.652, 203419.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1368.433 ±(99.9%) 59.942 MB/sec [Average]
[info]   (min, avg, max) = (1342.009, 1368.433, 1378.478), stdev = 15.567
[info]   CI (99.9%): [1308.491, 1428.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   11048.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11048.002, 11048.002, 11048.002), stdev = 0.001
[info]   CI (99.9%): [11048.002, 11048.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.071, 0.146), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.571 ±(99.9%) 1.489 B/op [Average]
[info]   (min, avg, max) = (0.167, 0.571, 1.178), stdev = 0.387
[info]   CI (99.9%): [≈ 0, 2.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1323.252 ±(99.9%) 51.604 MB/sec [Average]
[info]   (min, avg, max) = (1305.892, 1323.252, 1339.303), stdev = 13.401
[info]   CI (99.9%): [1271.648, 1374.856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   10683.517 ±(99.9%) 252.880 B/op [Average]
[info]   (min, avg, max) = (10608.773, 10683.517, 10750.675), stdev = 65.672
[info]   CI (99.9%): [10430.637, 10936.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala
[info] # Run progress: 31.51% complete, ETA 00:43:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 583512.846 ops/s
[info] # Warmup Iteration   2: 849798.913 ops/s
[info] # Warmup Iteration   3: 852633.282 ops/s
[info] Iteration   1: 831399.157 ops/s
[info]                  ·gc.alloc.rate:                   654.857 MB/sec
[info]                  ·gc.alloc.rate.norm:              1240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.276 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      643.314 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1218.142 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 816531.811 ops/s
[info]                  ·gc.alloc.rate:                   643.313 MB/sec
[info]                  ·gc.alloc.rate.norm:              1240.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.241 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      647.482 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1248.037 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 859573.886 ops/s
[info]                  ·gc.alloc.rate:                   677.260 MB/sec
[info]                  ·gc.alloc.rate.norm:              1240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.152 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      650.846 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1191.640 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 815281.381 ops/s
[info]                  ·gc.alloc.rate:                   642.255 MB/sec
[info]                  ·gc.alloc.rate.norm:              1240.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.121 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.740 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1262.175 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 836948.025 ops/s
[info]                  ·gc.alloc.rate:                   659.522 MB/sec
[info]                  ·gc.alloc.rate.norm:              1240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.157 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.232 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1235.695 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala":
[info]   831946.852 ±(99.9%) 69523.217 ops/s [Average]
[info]   (min, avg, max) = (815281.381, 831946.852, 859573.886), stdev = 18054.959
[info]   CI (99.9%): [762423.635, 901470.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   655.441 ±(99.9%) 54.932 MB/sec [Average]
[info]   (min, avg, max) = (642.255, 655.441, 677.260), stdev = 14.266
[info]   CI (99.9%): [600.510, 710.373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1240.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1240.000, 1240.000, 1240.001), stdev = 0.001
[info]   CI (99.9%): [1240.000, 1240.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.100 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.100, 0.146), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.189 ±(99.9%) 0.253 B/op [Average]
[info]   (min, avg, max) = (0.121, 0.189, 0.276), stdev = 0.066
[info]   CI (99.9%): [≈ 0, 0.442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   650.523 ±(99.9%) 20.798 MB/sec [Average]
[info]   (min, avg, max) = (643.314, 650.523, 657.232), stdev = 5.401
[info]   CI (99.9%): [629.725, 671.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1231.138 ±(99.9%) 105.430 B/op [Average]
[info]   (min, avg, max) = (1191.640, 1231.138, 1262.175), stdev = 27.380
[info]   CI (99.9%): [1125.708, 1336.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala
[info] # Run progress: 31.85% complete, ETA 00:43:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1031283.493 ops/s
[info] # Warmup Iteration   2: 1183503.012 ops/s
[info] # Warmup Iteration   3: 1192421.532 ops/s
[info] Iteration   1: 1191816.984 ops/s
[info]                  ·gc.alloc.rate:                   648.075 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.082 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.696 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 866.066 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1191700.134 ops/s
[info]                  ·gc.alloc.rate:                   648.051 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.165 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.390 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 863.052 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1188385.708 ops/s
[info]                  ·gc.alloc.rate:                   646.195 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.055 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.684 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 864.596 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1191878.071 ops/s
[info]                  ·gc.alloc.rate:                   648.283 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.110 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.538 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 862.939 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1198187.088 ops/s
[info]                  ·gc.alloc.rate:                   651.528 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.040 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 860.614 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala":
[info]   1192393.597 ±(99.9%) 13709.977 ops/s [Average]
[info]   (min, avg, max) = (1188385.708, 1192393.597, 1198187.088), stdev = 3560.437
[info]   CI (99.9%): [1178683.620, 1206103.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   648.426 ±(99.9%) 7.428 MB/sec [Average]
[info]   (min, avg, max) = (646.195, 648.426, 651.528), stdev = 1.929
[info]   CI (99.9%): [640.998, 655.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   856.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (856.000, 856.000, 856.000), stdev = 0.001
[info]   CI (99.9%): [856.000, 856.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.125), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.088 ±(99.9%) 0.204 B/op [Average]
[info]   (min, avg, max) = (0.027, 0.088, 0.165), stdev = 0.053
[info]   CI (99.9%): [≈ 0, 0.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   654.069 ±(99.9%) 4.814 MB/sec [Average]
[info]   (min, avg, max) = (652.684, 654.069, 655.696), stdev = 1.250
[info]   CI (99.9%): [649.255, 658.883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   863.454 ±(99.9%) 7.849 B/op [Average]
[info]   (min, avg, max) = (860.614, 863.454, 866.066), stdev = 2.038
[info]   CI (99.9%): [855.605, 871.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 32.19% complete, ETA 00:43:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 927891.597 ops/s
[info] # Warmup Iteration   2: 983048.819 ops/s
[info] # Warmup Iteration   3: 1043426.524 ops/s
[info] Iteration   1: 1044763.805 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1045146.259 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1032229.462 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1044404.618 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1045119.333 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   1042332.695 ±(99.9%) 21779.126 ops/s [Average]
[info]   (min, avg, max) = (1032229.462, 1042332.695, 1045146.259), stdev = 5655.970
[info]   CI (99.9%): [1020553.570, 1064111.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson
[info] # Run progress: 32.53% complete, ETA 00:42:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21323.560 ops/s
[info] # Warmup Iteration   2: 32718.410 ops/s
[info] # Warmup Iteration   3: 33884.154 ops/s
[info] Iteration   1: 33915.562 ops/s
[info]                  ·gc.alloc.rate:                   1840.926 MB/sec
[info]                  ·gc.alloc.rate.norm:              85432.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.864 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1632.306 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 75750.582 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 33792.746 ops/s
[info]                  ·gc.alloc.rate:                   1834.424 MB/sec
[info]                  ·gc.alloc.rate.norm:              85432.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.848 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1980.537 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 92236.714 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 34306.095 ops/s
[info]                  ·gc.alloc.rate:                   1861.940 MB/sec
[info]                  ·gc.alloc.rate.norm:              85432.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.820 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2000.778 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 91802.352 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 33834.258 ops/s
[info]                  ·gc.alloc.rate:                   1836.243 MB/sec
[info]                  ·gc.alloc.rate.norm:              85432.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.905 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1678.721 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78103.248 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 33732.835 ops/s
[info]                  ·gc.alloc.rate:                   1831.594 MB/sec
[info]                  ·gc.alloc.rate.norm:              85432.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.885 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1687.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78694.482 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson":
[info]   33916.299 ±(99.9%) 877.230 ops/s [Average]
[info]   (min, avg, max) = (33732.835, 33916.299, 34306.095), stdev = 227.814
[info]   CI (99.9%): [33039.069, 34793.530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1841.025 ±(99.9%) 46.879 MB/sec [Average]
[info]   (min, avg, max) = (1831.594, 1841.025, 1861.940), stdev = 12.174
[info]   CI (99.9%): [1794.146, 1887.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   85432.015 ±(99.9%) 0.020 B/op [Average]
[info]   (min, avg, max) = (85432.012, 85432.015, 85432.024), stdev = 0.005
[info]   CI (99.9%): [85431.995, 85432.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.083, 0.104), stdev = 0.015
[info]   CI (99.9%): [0.027, 0.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3.864 ±(99.9%) 2.647 B/op [Average]
[info]   (min, avg, max) = (2.905, 3.864, 4.848), stdev = 0.687
[info]   CI (99.9%): [1.218, 6.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1795.898 ±(99.9%) 689.865 MB/sec [Average]
[info]   (min, avg, max) = (1632.306, 1795.898, 2000.778), stdev = 179.156
[info]   CI (99.9%): [1106.033, 2485.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   83317.476 ±(99.9%) 30887.113 B/op [Average]
[info]   (min, avg, max) = (75750.582, 83317.476, 92236.714), stdev = 8021.285
[info]   CI (99.9%): [52430.363, 114204.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 7.000), stdev = 0.894
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala
[info] # Run progress: 32.88% complete, ETA 00:42:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 109286.930 ops/s
[info] # Warmup Iteration   2: 189281.287 ops/s
[info] # Warmup Iteration   3: 184014.576 ops/s
[info] Iteration   1: 190519.012 ops/s
[info]                  ·gc.alloc.rate:                   1013.043 MB/sec
[info]                  ·gc.alloc.rate.norm:              8368.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.344 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      983.658 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8125.275 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 194363.078 ops/s
[info]                  ·gc.alloc.rate:                   1033.413 MB/sec
[info]                  ·gc.alloc.rate.norm:              8368.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.506 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      988.919 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8007.712 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 194571.991 ops/s
[info]                  ·gc.alloc.rate:                   1034.322 MB/sec
[info]                  ·gc.alloc.rate.norm:              8368.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.674 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      995.366 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8052.830 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 189391.794 ops/s
[info]                  ·gc.alloc.rate:                   1006.829 MB/sec
[info]                  ·gc.alloc.rate.norm:              8368.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.346 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      999.432 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8306.523 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 182672.979 ops/s
[info]                  ·gc.alloc.rate:                   971.116 MB/sec
[info]                  ·gc.alloc.rate.norm:              8368.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.179 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1004.052 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8651.807 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala":
[info]   190303.771 ±(99.9%) 18647.089 ops/s [Average]
[info]   (min, avg, max) = (182672.979, 190303.771, 194571.991), stdev = 4842.590
[info]   CI (99.9%): [171656.682, 208950.859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1011.745 ±(99.9%) 99.220 MB/sec [Average]
[info]   (min, avg, max) = (971.116, 1011.745, 1034.322), stdev = 25.767
[info]   CI (99.9%): [912.524, 1110.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   8368.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8368.002, 8368.002, 8368.002), stdev = 0.001
[info]   CI (99.9%): [8368.002, 8368.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.050, 0.083), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.410 ±(99.9%) 0.721 B/op [Average]
[info]   (min, avg, max) = (0.179, 0.410, 0.674), stdev = 0.187
[info]   CI (99.9%): [≈ 0, 1.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   994.285 ±(99.9%) 31.329 MB/sec [Average]
[info]   (min, avg, max) = (983.658, 994.285, 1004.052), stdev = 8.136
[info]   CI (99.9%): [962.956, 1025.614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   8228.829 ±(99.9%) 1010.635 B/op [Average]
[info]   (min, avg, max) = (8007.712, 8228.829, 8651.807), stdev = 262.459
[info]   CI (99.9%): [7218.194, 9239.464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala
[info] # Run progress: 33.22% complete, ETA 00:42:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 252254.306 ops/s
[info] # Warmup Iteration   2: 267471.399 ops/s
[info] # Warmup Iteration   3: 273916.372 ops/s
[info] Iteration   1: 268813.656 ops/s
[info]                  ·gc.alloc.rate:                   699.793 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.488 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658.667 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3855.288 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 268012.738 ops/s
[info]                  ·gc.alloc.rate:                   697.474 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.733 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      983.848 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5777.763 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 272274.368 ops/s
[info]                  ·gc.alloc.rate:                   708.522 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.361 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.072 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3792.785 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 273471.682 ops/s
[info]                  ·gc.alloc.rate:                   711.723 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.240 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.489 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3783.881 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 272649.000 ops/s
[info]                  ·gc.alloc.rate:                   709.634 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.360 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658.872 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3803.006 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala":
[info]   271044.289 ±(99.9%) 9460.847 ops/s [Average]
[info]   (min, avg, max) = (268012.738, 271044.289, 273471.682), stdev = 2456.952
[info]   CI (99.9%): [261583.442, 280505.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   705.429 ±(99.9%) 24.498 MB/sec [Average]
[info]   (min, avg, max) = (697.474, 705.429, 711.723), stdev = 6.362
[info]   CI (99.9%): [680.931, 729.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.001, 4096.002, 4096.002), stdev = 0.001
[info]   CI (99.9%): [4096.001, 4096.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.125), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.436 ±(99.9%) 0.723 B/op [Average]
[info]   (min, avg, max) = (0.240, 0.436, 0.733), stdev = 0.188
[info]   CI (99.9%): [≈ 0, 1.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   722.990 ±(99.9%) 561.533 MB/sec [Average]
[info]   (min, avg, max) = (656.072, 722.990, 983.848), stdev = 145.828
[info]   CI (99.9%): [161.457, 1284.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4202.545 ±(99.9%) 3392.455 B/op [Average]
[info]   (min, avg, max) = (3783.881, 4202.545, 5777.763), stdev = 881.010
[info]   CI (99.9%): [810.089, 7595.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson
[info] # Run progress: 33.56% complete, ETA 00:42:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28677.869 ops/s
[info] # Warmup Iteration   2: 65974.272 ops/s
[info] # Warmup Iteration   3: 65884.732 ops/s
[info] Iteration   1: 67383.281 ops/s
[info]                  ·gc.alloc.rate:                   2756.018 MB/sec
[info]                  ·gc.alloc.rate.norm:              64384.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.945 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2681.995 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62654.730 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 65689.313 ops/s
[info]                  ·gc.alloc.rate:                   2686.863 MB/sec
[info]                  ·gc.alloc.rate.norm:              64384.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.489 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2702.217 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 64751.938 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 65304.619 ops/s
[info]                  ·gc.alloc.rate:                   2672.298 MB/sec
[info]                  ·gc.alloc.rate.norm:              64384.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.508 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2713.366 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65373.449 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 65024.247 ops/s
[info]                  ·gc.alloc.rate:                   2659.892 MB/sec
[info]                  ·gc.alloc.rate.norm:              64384.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2717.684 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65782.887 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   5: 66796.155 ops/s
[info]                  ·gc.alloc.rate:                   2732.133 MB/sec
[info]                  ·gc.alloc.rate.norm:              64384.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.962 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2721.286 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 64128.385 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson":
[info]   66039.523 ±(99.9%) 3884.999 ops/s [Average]
[info]   (min, avg, max) = (65024.247, 66039.523, 67383.281), stdev = 1008.922
[info]   CI (99.9%): [62154.524, 69924.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2701.441 ±(99.9%) 157.698 MB/sec [Average]
[info]   (min, avg, max) = (2659.892, 2701.441, 2756.018), stdev = 40.954
[info]   CI (99.9%): [2543.743, 2859.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   64384.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (64384.006, 64384.006, 64384.007), stdev = 0.001
[info]   CI (99.9%): [64384.005, 64384.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.108 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.108, 0.187), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2.584 ±(99.9%) 4.198 B/op [Average]
[info]   (min, avg, max) = (1.945, 2.584, 4.489), stdev = 1.090
[info]   CI (99.9%): [≈ 0, 6.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   2707.310 ±(99.9%) 61.079 MB/sec [Average]
[info]   (min, avg, max) = (2681.995, 2707.310, 2721.286), stdev = 15.862
[info]   CI (99.9%): [2646.231, 2768.388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   64538.278 ±(99.9%) 4719.191 B/op [Average]
[info]   (min, avg, max) = (62654.730, 64538.278, 65782.887), stdev = 1225.559
[info]   CI (99.9%): [59819.087, 69257.469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.count":
[info]   40.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.000, 8.000), stdev = 0.001
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.time":
[info]   48.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 9.600, 11.000), stdev = 0.894
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala
[info] # Run progress: 33.90% complete, ETA 00:42:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 315427.661 ops/s
[info] # Warmup Iteration   2: 509265.733 ops/s
[info] # Warmup Iteration   3: 513255.421 ops/s
[info] Iteration   1: 514041.870 ops/s
[info]                  ·gc.alloc.rate:                   519.815 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.319 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      322.971 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 989.142 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 509070.076 ops/s
[info]                  ·gc.alloc.rate:                   515.023 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.129 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      648.931 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2005.926 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 499659.625 ops/s
[info]                  ·gc.alloc.rate:                   505.518 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.262 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.280 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2057.340 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 495725.416 ops/s
[info]                  ·gc.alloc.rate:                   501.341 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.344 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1039.476 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 495916.087 ops/s
[info]                  ·gc.alloc.rate:                   501.595 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.264 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.438 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2086.628 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala":
[info]   502882.615 ±(99.9%) 31809.169 ops/s [Average]
[info]   (min, avg, max) = (495725.416, 502882.615, 514041.870), stdev = 8260.740
[info]   CI (99.9%): [471073.446, 534691.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   508.658 ±(99.9%) 32.118 MB/sec [Average]
[info]   (min, avg, max) = (501.341, 508.658, 519.815), stdev = 8.341
[info]   CI (99.9%): [476.541, 540.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1592.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1592.001, 1592.001, 1592.001), stdev = 0.001
[info]   CI (99.9%): [1592.001, 1592.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.160 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.104), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.195 ±(99.9%) 0.498 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.195, 0.319), stdev = 0.129
[info]   CI (99.9%): [≈ 0, 0.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   521.993 ±(99.9%) 692.027 MB/sec [Average]
[info]   (min, avg, max) = (322.971, 521.993, 657.438), stdev = 179.717
[info]   CI (99.9%): [≈ 0, 1214.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1635.702 ±(99.9%) 2188.189 B/op [Average]
[info]   (min, avg, max) = (989.142, 1635.702, 2086.628), stdev = 568.266
[info]   CI (99.9%): [≈ 0, 3823.891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.304
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala
[info] # Run progress: 34.25% complete, ETA 00:41:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 470688.096 ops/s
[info] # Warmup Iteration   2: 516976.510 ops/s
[info] # Warmup Iteration   3: 520288.584 ops/s
[info] Iteration   1: 534727.090 ops/s
[info]                  ·gc.alloc.rate:                   410.378 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.020 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.059 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.548 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1505.808 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 517019.401 ops/s
[info]                  ·gc.alloc.rate:                   396.745 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.695 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.250 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.343 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 999.733 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 532959.951 ops/s
[info]                  ·gc.alloc.rate:                   408.995 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.184 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.352 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 969.814 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 519485.717 ops/s
[info]                  ·gc.alloc.rate:                   398.692 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      326.379 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 988.899 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 515255.986 ops/s
[info]                  ·gc.alloc.rate:                   395.438 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.318 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.749 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1994.048 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala":
[info]   523889.629 ±(99.9%) 35545.822 ops/s [Average]
[info]   (min, avg, max) = (515255.986, 523889.629, 534727.090), stdev = 9231.137
[info]   CI (99.9%): [488343.808, 559435.451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   402.049 ±(99.9%) 27.278 MB/sec [Average]
[info]   (min, avg, max) = (395.438, 402.049, 410.378), stdev = 7.084
[info]   CI (99.9%): [374.772, 429.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1208.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1208.001, 1208.001, 1208.001), stdev = 0.001
[info]   CI (99.9%): [1208.001, 1208.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.776 ±(99.9%) 6.284 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.776, 3.695), stdev = 1.632
[info]   CI (99.9%): [≈ 0, 7.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2.362 ±(99.9%) 19.138 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.362, 11.250), stdev = 4.970
[info]   CI (99.9%): [≈ 0, 21.500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   429.474 ±(99.9%) 570.070 MB/sec [Average]
[info]   (min, avg, max) = (326.379, 429.474, 652.749), stdev = 148.045
[info]   CI (99.9%): [≈ 0, 999.544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1291.661 ±(99.9%) 1743.111 B/op [Average]
[info]   (min, avg, max) = (969.814, 1291.661, 1994.048), stdev = 452.680
[info]   CI (99.9%): [≈ 0, 3034.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 5.000), stdev = 1.643
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 34.59% complete, ETA 00:41:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 515805.812 ops/s
[info] # Warmup Iteration   2: 561018.126 ops/s
[info] # Warmup Iteration   3: 552994.723 ops/s
[info] Iteration   1: 560902.027 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 561411.204 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 561548.003 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 560292.646 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 559922.554 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc":
[info]   560815.287 ±(99.9%) 2702.070 ops/s [Average]
[info]   (min, avg, max) = (559922.554, 560815.287, 561548.003), stdev = 701.719
[info]   CI (99.9%): [558113.217, 563517.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson
[info] # Run progress: 34.93% complete, ETA 00:41:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 165962.759 ops/s
[info] # Warmup Iteration   2: 287917.624 ops/s
[info] # Warmup Iteration   3: 291059.206 ops/s
[info] Iteration   1: 290967.505 ops/s
[info]                  ·gc.alloc.rate:                   801.405 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.338 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      651.989 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3527.587 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 291255.740 ops/s
[info]                  ·gc.alloc.rate:                   802.269 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.675 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      983.381 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5314.855 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 280888.830 ops/s
[info]                  ·gc.alloc.rate:                   774.134 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.467 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658.719 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3689.554 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 292681.746 ops/s
[info]                  ·gc.alloc.rate:                   806.269 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.560 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      991.153 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5330.285 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 293190.081 ops/s
[info]                  ·gc.alloc.rate:                   807.744 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      664.137 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3565.113 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson":
[info]   289796.780 ±(99.9%) 19510.291 ops/s [Average]
[info]   (min, avg, max) = (280888.830, 289796.780, 293190.081), stdev = 5066.761
[info]   CI (99.9%): [270286.489, 309307.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   798.364 ±(99.9%) 53.150 MB/sec [Average]
[info]   (min, avg, max) = (774.134, 798.364, 807.744), stdev = 13.803
[info]   CI (99.9%): [745.214, 851.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4336.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4336.001, 4336.001, 4336.002), stdev = 0.001
[info]   CI (99.9%): [4336.001, 4336.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.075, 0.125), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.408 ±(99.9%) 0.999 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.408, 0.675), stdev = 0.259
[info]   CI (99.9%): [≈ 0, 1.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   789.876 ±(99.9%) 694.136 MB/sec [Average]
[info]   (min, avg, max) = (651.989, 789.876, 991.153), stdev = 180.265
[info]   CI (99.9%): [95.740, 1484.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4285.479 ±(99.9%) 3652.884 B/op [Average]
[info]   (min, avg, max) = (3527.587, 4285.479, 5330.285), stdev = 948.642
[info]   CI (99.9%): [632.595, 7938.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce
[info] # Run progress: 35.27% complete, ETA 00:41:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7493.859 ops/s
[info] # Warmup Iteration   2: 10592.080 ops/s
[info] # Warmup Iteration   3: 10701.238 ops/s
[info] Iteration   1: 10629.868 ops/s
[info]                  ·gc.alloc.rate:                   1359.204 MB/sec
[info]                  ·gc.alloc.rate.norm:              201248.041 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.164 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1310.881 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 194093.074 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 10675.870 ops/s
[info]                  ·gc.alloc.rate:                   1364.875 MB/sec
[info]                  ·gc.alloc.rate.norm:              201248.041 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.275 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1648.006 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 242995.066 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 10652.305 ops/s
[info]                  ·gc.alloc.rate:                   1361.948 MB/sec
[info]                  ·gc.alloc.rate.norm:              201248.038 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.227 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1327.466 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 196152.803 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 10314.997 ops/s
[info]                  ·gc.alloc.rate:                   1319.074 MB/sec
[info]                  ·gc.alloc.rate.norm:              201277.965 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.352 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1334.803 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 203678.037 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 10179.631 ops/s
[info]                  ·gc.alloc.rate:                   1302.329 MB/sec
[info]                  ·gc.alloc.rate.norm:              201280.040 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.858 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1340.401 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 207164.221 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce":
[info]   10490.534 ±(99.9%) 876.829 ops/s [Average]
[info]   (min, avg, max) = (10179.631, 10490.534, 10675.870), stdev = 227.710
[info]   CI (99.9%): [9613.705, 11367.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1341.486 ±(99.9%) 110.857 MB/sec [Average]
[info]   (min, avg, max) = (1302.329, 1341.486, 1364.875), stdev = 28.789
[info]   CI (99.9%): [1230.629, 1452.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   201260.425 ±(99.9%) 65.363 B/op [Average]
[info]   (min, avg, max) = (201248.038, 201260.425, 201280.040), stdev = 16.974
[info]   CI (99.9%): [201195.063, 201325.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.062, 0.083), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   9.375 ±(99.9%) 12.178 B/op [Average]
[info]   (min, avg, max) = (6.164, 9.375, 12.858), stdev = 3.163
[info]   CI (99.9%): [≈ 0, 21.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1392.311 ±(99.9%) 552.058 MB/sec [Average]
[info]   (min, avg, max) = (1310.881, 1392.311, 1648.006), stdev = 143.368
[info]   CI (99.9%): [840.253, 1944.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   208816.640 ±(99.9%) 76395.666 B/op [Average]
[info]   (min, avg, max) = (194093.074, 208816.640, 242995.066), stdev = 19839.712
[info]   CI (99.9%): [132420.974, 285212.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 0.707
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala
[info] # Run progress: 35.62% complete, ETA 00:40:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5993.245 ops/s
[info] # Warmup Iteration   2: 11054.455 ops/s
[info] # Warmup Iteration   3: 11341.143 ops/s
[info] Iteration   1: 11373.391 ops/s
[info]                  ·gc.alloc.rate:                   1347.849 MB/sec
[info]                  ·gc.alloc.rate.norm:              186544.039 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.880 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1318.001 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 182413.142 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 11402.127 ops/s
[info]                  ·gc.alloc.rate:                   1351.622 MB/sec
[info]                  ·gc.alloc.rate.norm:              186544.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17.240 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1328.439 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 183344.488 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 11388.103 ops/s
[info]                  ·gc.alloc.rate:                   1350.029 MB/sec
[info]                  ·gc.alloc.rate.norm:              186548.800 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.753 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1337.014 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 184750.420 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 11487.183 ops/s
[info]                  ·gc.alloc.rate:                   1362.297 MB/sec
[info]                  ·gc.alloc.rate.norm:              186576.171 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.704 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.457 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 183995.928 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 11067.218 ops/s
[info]                  ·gc.alloc.rate:                   1312.181 MB/sec
[info]                  ·gc.alloc.rate.norm:              186576.037 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.880 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.344 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 191717.961 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala":
[info]   11343.604 ±(99.9%) 618.794 ops/s [Average]
[info]   (min, avg, max) = (11067.218, 11343.604, 11487.183), stdev = 160.699
[info]   CI (99.9%): [10724.810, 11962.399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1344.795 ±(99.9%) 73.398 MB/sec [Average]
[info]   (min, avg, max) = (1312.181, 1344.795, 1362.297), stdev = 19.061
[info]   CI (99.9%): [1271.397, 1418.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   186557.816 ±(99.9%) 64.718 B/op [Average]
[info]   (min, avg, max) = (186544.036, 186557.816, 186576.171), stdev = 16.807
[info]   CI (99.9%): [186493.098, 186622.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.058, 0.125), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   8.092 ±(99.9%) 21.322 B/op [Average]
[info]   (min, avg, max) = (2.880, 8.092, 17.240), stdev = 5.537
[info]   CI (99.9%): [≈ 0, 29.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1335.051 ±(99.9%) 46.592 MB/sec [Average]
[info]   (min, avg, max) = (1318.001, 1335.051, 1348.344), stdev = 12.100
[info]   CI (99.9%): [1288.459, 1381.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   185244.388 ±(99.9%) 14322.037 B/op [Average]
[info]   (min, avg, max) = (182413.142, 185244.388, 191717.961), stdev = 3719.387
[info]   CI (99.9%): [170922.351, 199566.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala
[info] # Run progress: 35.96% complete, ETA 00:40:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 135667.144 ops/s
[info] # Warmup Iteration   2: 145834.083 ops/s
[info] # Warmup Iteration   3: 142607.016 ops/s
[info] Iteration   1: 141253.001 ops/s
[info]                  ·gc.alloc.rate:                   918.825 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.160 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      989.688 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11029.751 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 144091.647 ops/s
[info]                  ·gc.alloc.rate:                   937.478 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.364 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      990.553 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10819.738 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 145220.393 ops/s
[info]                  ·gc.alloc.rate:                   944.636 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.902 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      992.335 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10757.069 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 145711.106 ops/s
[info]                  ·gc.alloc.rate:                   948.070 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.349 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      996.917 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10767.595 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 146783.483 ops/s
[info]                  ·gc.alloc.rate:                   955.070 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.893 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      999.657 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10718.050 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala":
[info]   144611.926 ±(99.9%) 8133.695 ops/s [Average]
[info]   (min, avg, max) = (141253.001, 144611.926, 146783.483), stdev = 2112.295
[info]   CI (99.9%): [136478.232, 152745.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   940.816 ±(99.9%) 53.257 MB/sec [Average]
[info]   (min, avg, max) = (918.825, 940.816, 955.070), stdev = 13.831
[info]   CI (99.9%): [887.559, 994.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   10240.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10240.003, 10240.003, 10240.003), stdev = 0.001
[info]   CI (99.9%): [10240.002, 10240.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.104 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.104, 0.125), stdev = 0.021
[info]   CI (99.9%): [0.024, 0.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.134 ±(99.9%) 0.886 B/op [Average]
[info]   (min, avg, max) = (0.893, 1.134, 1.364), stdev = 0.230
[info]   CI (99.9%): [0.248, 2.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   993.830 ±(99.9%) 16.519 MB/sec [Average]
[info]   (min, avg, max) = (989.688, 993.830, 999.657), stdev = 4.290
[info]   CI (99.9%): [977.311, 1010.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   10818.441 ±(99.9%) 475.846 B/op [Average]
[info]   (min, avg, max) = (10718.050, 10818.441, 11029.751), stdev = 123.576
[info]   CI (99.9%): [10342.595, 11294.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson
[info] # Run progress: 36.30% complete, ETA 00:40:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4582.441 ops/s
[info] # Warmup Iteration   2: 8469.104 ops/s
[info] # Warmup Iteration   3: 8982.063 ops/s
[info] Iteration   1: 9005.272 ops/s
[info]                  ·gc.alloc.rate:                   1665.079 MB/sec
[info]                  ·gc.alloc.rate.norm:              291032.045 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21.828 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1658.824 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 289938.773 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 9000.349 ops/s
[info]                  ·gc.alloc.rate:                   1664.052 MB/sec
[info]                  ·gc.alloc.rate.norm:              291032.049 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.919 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1671.190 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 292280.514 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 8947.421 ops/s
[info]                  ·gc.alloc.rate:                   1654.159 MB/sec
[info]                  ·gc.alloc.rate.norm:              291032.046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.322 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1680.748 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 295710.148 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 8896.364 ops/s
[info]                  ·gc.alloc.rate:                   1644.984 MB/sec
[info]                  ·gc.alloc.rate.norm:              291032.046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.365 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1688.521 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 298734.565 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 8698.011 ops/s
[info]                  ·gc.alloc.rate:                   1608.253 MB/sec
[info]                  ·gc.alloc.rate.norm:              291033.705 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.766 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1693.040 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 306377.034 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson":
[info]   8909.484 ±(99.9%) 486.173 ops/s [Average]
[info]   (min, avg, max) = (8698.011, 8909.484, 9005.272), stdev = 126.258
[info]   CI (99.9%): [8423.311, 9395.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1647.305 ±(99.9%) 89.766 MB/sec [Average]
[info]   (min, avg, max) = (1608.253, 1647.305, 1665.079), stdev = 23.312
[info]   CI (99.9%): [1557.539, 1737.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   291032.378 ±(99.9%) 2.856 B/op [Average]
[info]   (min, avg, max) = (291032.045, 291032.378, 291033.705), stdev = 0.742
[info]   CI (99.9%): [291029.522, 291035.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.058, 0.125), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   10.240 ±(99.9%) 26.778 B/op [Average]
[info]   (min, avg, max) = (3.766, 10.240, 21.828), stdev = 6.954
[info]   CI (99.9%): [≈ 0, 37.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1678.465 ±(99.9%) 52.988 MB/sec [Average]
[info]   (min, avg, max) = (1658.824, 1678.465, 1693.040), stdev = 13.761
[info]   CI (99.9%): [1625.477, 1731.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   296608.207 ±(99.9%) 24653.757 B/op [Average]
[info]   (min, avg, max) = (289938.773, 296608.207, 306377.034), stdev = 6402.503
[info]   CI (99.9%): [271954.449, 321261.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce
[info] # Run progress: 36.64% complete, ETA 00:40:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16387.307 ops/s
[info] # Warmup Iteration   2: 23230.998 ops/s
[info] # Warmup Iteration   3: 23400.362 ops/s
[info] Iteration   1: 22994.039 ops/s
[info]                  ·gc.alloc.rate:                   1048.307 MB/sec
[info]                  ·gc.alloc.rate.norm:              71760.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.850 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      979.447 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 67046.309 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 22125.429 ops/s
[info]                  ·gc.alloc.rate:                   1008.690 MB/sec
[info]                  ·gc.alloc.rate.norm:              71760.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.923 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      981.395 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69818.199 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 22395.772 ops/s
[info]                  ·gc.alloc.rate:                   1020.825 MB/sec
[info]                  ·gc.alloc.rate.norm:              71735.701 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.388 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      985.515 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69254.417 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 23427.654 ops/s
[info]                  ·gc.alloc.rate:                   1067.840 MB/sec
[info]                  ·gc.alloc.rate.norm:              71736.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.797 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      990.246 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66523.333 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 23386.367 ops/s
[info]                  ·gc.alloc.rate:                   1065.798 MB/sec
[info]                  ·gc.alloc.rate.norm:              71736.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.802 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1328.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 89391.203 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce":
[info]   22865.852 ±(99.9%) 2255.333 ops/s [Average]
[info]   (min, avg, max) = (22125.429, 22865.852, 23427.654), stdev = 585.703
[info]   CI (99.9%): [20610.520, 25121.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1042.292 ±(99.9%) 102.447 MB/sec [Average]
[info]   (min, avg, max) = (1008.690, 1042.292, 1067.840), stdev = 26.605
[info]   CI (99.9%): [939.845, 1144.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   71745.556 ±(99.9%) 50.851 B/op [Average]
[info]   (min, avg, max) = (71735.701, 71745.556, 71760.025), stdev = 13.206
[info]   CI (99.9%): [71694.705, 71796.406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.054, 0.083), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3.752 ±(99.9%) 5.359 B/op [Average]
[info]   (min, avg, max) = (2.797, 3.752, 5.923), stdev = 1.392
[info]   CI (99.9%): [≈ 0, 9.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1052.941 ±(99.9%) 592.524 MB/sec [Average]
[info]   (min, avg, max) = (979.447, 1052.941, 1328.104), stdev = 153.877
[info]   CI (99.9%): [460.417, 1645.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   72406.692 ±(99.9%) 36957.075 B/op [Average]
[info]   (min, avg, max) = (66523.333, 72406.692, 89391.203), stdev = 9597.635
[info]   CI (99.9%): [35449.618, 109363.767] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala
[info] # Run progress: 36.99% complete, ETA 00:40:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 616152.947 ops/s
[info] # Warmup Iteration   2: 704020.979 ops/s
[info] # Warmup Iteration   3: 709886.766 ops/s
[info] Iteration   1: 713524.207 ops/s
[info]                  ·gc.alloc.rate:                   1287.745 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.276 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1307.244 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2883.004 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 712982.391 ops/s
[info]                  ·gc.alloc.rate:                   1286.448 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.414 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1313.523 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2899.771 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 718983.686 ops/s
[info]                  ·gc.alloc.rate:                   1297.238 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.137 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1322.138 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2894.512 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 707259.886 ops/s
[info]                  ·gc.alloc.rate:                   1276.144 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.185 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1330.198 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2960.295 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 722900.988 ops/s
[info]                  ·gc.alloc.rate:                   1304.331 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.181 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1337.482 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2912.183 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala":
[info]   715130.232 ±(99.9%) 23133.417 ops/s [Average]
[info]   (min, avg, max) = (707259.886, 715130.232, 722900.988), stdev = 6007.675
[info]   CI (99.9%): [691996.814, 738263.649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1290.381 ±(99.9%) 41.594 MB/sec [Average]
[info]   (min, avg, max) = (1276.144, 1290.381, 1304.331), stdev = 10.802
[info]   CI (99.9%): [1248.787, 1331.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2840.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2840.001, 2840.001, 2840.001), stdev = 0.001
[info]   CI (99.9%): [2840.000, 2840.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.108 ±(99.9%) 0.191 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.108, 0.187), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.238 ±(99.9%) 0.424 B/op [Average]
[info]   (min, avg, max) = (0.137, 0.238, 0.414), stdev = 0.110
[info]   CI (99.9%): [≈ 0, 0.662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1322.117 ±(99.9%) 47.022 MB/sec [Average]
[info]   (min, avg, max) = (1307.244, 1322.117, 1337.482), stdev = 12.211
[info]   CI (99.9%): [1275.095, 1369.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2909.953 ±(99.9%) 115.642 B/op [Average]
[info]   (min, avg, max) = (2883.004, 2909.953, 2960.295), stdev = 30.032
[info]   CI (99.9%): [2794.311, 3025.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 37.33% complete, ETA 00:39:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 541259.351 ops/s
[info] # Warmup Iteration   2: 580020.549 ops/s
[info] # Warmup Iteration   3: 565598.623 ops/s
[info] Iteration   1: 567173.466 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 567780.876 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 565486.480 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 568042.501 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 567769.651 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   567250.595 ±(99.9%) 3990.475 ops/s [Average]
[info]   (min, avg, max) = (565486.480, 567250.595, 568042.501), stdev = 1036.314
[info]   CI (99.9%): [563260.120, 571241.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson
[info] # Run progress: 37.67% complete, ETA 00:39:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17570.175 ops/s
[info] # Warmup Iteration   2: 23955.087 ops/s
[info] # Warmup Iteration   3: 24020.737 ops/s
[info] Iteration   1: 24814.961 ops/s
[info]                  ·gc.alloc.rate:                   1047.598 MB/sec
[info]                  ·gc.alloc.rate.norm:              66432.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.320 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      970.011 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61511.952 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 24814.751 ops/s
[info]                  ·gc.alloc.rate:                   1047.332 MB/sec
[info]                  ·gc.alloc.rate.norm:              66428.995 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.961 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      973.179 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61725.675 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 25216.567 ops/s
[info]                  ·gc.alloc.rate:                   1064.152 MB/sec
[info]                  ·gc.alloc.rate.norm:              66416.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.598 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      977.528 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61009.646 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 25224.326 ops/s
[info]                  ·gc.alloc.rate:                   1064.285 MB/sec
[info]                  ·gc.alloc.rate.norm:              66416.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.195 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1312.053 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 81877.788 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 24810.364 ops/s
[info]                  ·gc.alloc.rate:                   1046.784 MB/sec
[info]                  ·gc.alloc.rate.norm:              66416.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.641 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      990.665 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62855.402 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson":
[info]   24976.194 ±(99.9%) 858.677 ops/s [Average]
[info]   (min, avg, max) = (24810.364, 24976.194, 25224.326), stdev = 222.996
[info]   CI (99.9%): [24117.517, 25834.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1054.030 ±(99.9%) 35.832 MB/sec [Average]
[info]   (min, avg, max) = (1046.784, 1054.030, 1064.285), stdev = 9.305
[info]   CI (99.9%): [1018.199, 1089.862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   66421.813 ±(99.9%) 30.835 B/op [Average]
[info]   (min, avg, max) = (66416.016, 66421.813, 66432.018), stdev = 8.008
[info]   CI (99.9%): [66390.978, 66452.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.050, 0.083), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3.143 ±(99.9%) 5.696 B/op [Average]
[info]   (min, avg, max) = (1.320, 3.143, 5.195), stdev = 1.479
[info]   CI (99.9%): [≈ 0, 8.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1044.687 ±(99.9%) 576.322 MB/sec [Average]
[info]   (min, avg, max) = (970.011, 1044.687, 1312.053), stdev = 149.669
[info]   CI (99.9%): [468.365, 1621.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   65796.093 ±(99.9%) 34714.619 B/op [Average]
[info]   (min, avg, max) = (61009.646, 65796.093, 81877.788), stdev = 9015.276
[info]   CI (99.9%): [31081.474, 100510.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce
[info] # Run progress: 38.01% complete, ETA 00:39:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19297.896 ops/s
[info] # Warmup Iteration   2: 27526.050 ops/s
[info] # Warmup Iteration   3: 28065.416 ops/s
[info] Iteration   1: 28205.698 ops/s
[info]                  ·gc.alloc.rate:                   1531.447 MB/sec
[info]                  ·gc.alloc.rate.norm:              85440.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.323 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1641.974 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 91606.365 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 28533.551 ops/s
[info]                  ·gc.alloc.rate:                   1548.232 MB/sec
[info]                  ·gc.alloc.rate.norm:              85415.200 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.445 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1654.023 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 91251.612 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 28280.864 ops/s
[info]                  ·gc.alloc.rate:                   1534.525 MB/sec
[info]                  ·gc.alloc.rate.norm:              85408.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.317 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1331.425 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 74103.918 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 27969.839 ops/s
[info]                  ·gc.alloc.rate:                   1517.654 MB/sec
[info]                  ·gc.alloc.rate.norm:              85408.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.343 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1674.165 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 94215.907 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 28390.433 ops/s
[info]                  ·gc.alloc.rate:                   1540.655 MB/sec
[info]                  ·gc.alloc.rate.norm:              85408.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.308 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.601 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 74594.947 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce":
[info]   28276.077 ±(99.9%) 812.586 ops/s [Average]
[info]   (min, avg, max) = (27969.839, 28276.077, 28533.551), stdev = 211.026
[info]   CI (99.9%): [27463.491, 29088.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate":
[info]   1534.503 ±(99.9%) 43.886 MB/sec [Average]
[info]   (min, avg, max) = (1517.654, 1534.503, 1548.232), stdev = 11.397
[info]   CI (99.9%): [1490.617, 1578.389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   85415.852 ±(99.9%) 53.380 B/op [Average]
[info]   (min, avg, max) = (85408.014, 85415.852, 85440.018), stdev = 13.863
[info]   CI (99.9%): [85362.472, 85469.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.046, 0.062), stdev = 0.009
[info]   CI (99.9%): [0.010, 0.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2.547 ±(99.9%) 1.933 B/op [Average]
[info]   (min, avg, max) = (2.308, 2.547, 3.445), stdev = 0.502
[info]   CI (99.9%): [0.614, 4.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1529.438 ±(99.9%) 672.864 MB/sec [Average]
[info]   (min, avg, max) = (1331.425, 1529.438, 1674.165), stdev = 174.741
[info]   CI (99.9%): [856.574, 2202.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   85154.550 ±(99.9%) 38242.243 B/op [Average]
[info]   (min, avg, max) = (74103.918, 85154.550, 94215.907), stdev = 9931.389
[info]   CI (99.9%): [46912.307, 123396.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 6.000), stdev = 1.140
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala
[info] # Run progress: 38.36% complete, ETA 00:39:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17407.759 ops/s
[info] # Warmup Iteration   2: 30091.581 ops/s
[info] # Warmup Iteration   3: 31456.157 ops/s
[info] Iteration   1: 31021.666 ops/s
[info]                  ·gc.alloc.rate:                   1416.660 MB/sec
[info]                  ·gc.alloc.rate.norm:              71888.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.224 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1320.288 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66997.612 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 31615.471 ops/s
[info]                  ·gc.alloc.rate:                   1444.507 MB/sec
[info]                  ·gc.alloc.rate.norm:              71888.877 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.218 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1330.973 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66238.593 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 31045.209 ops/s
[info]                  ·gc.alloc.rate:                   1418.339 MB/sec
[info]                  ·gc.alloc.rate.norm:              71888.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.276 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1674.328 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 84862.693 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 30629.867 ops/s
[info]                  ·gc.alloc.rate:                   1399.252 MB/sec
[info]                  ·gc.alloc.rate.norm:              71888.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.279 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.820 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69142.897 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 30305.275 ops/s
[info]                  ·gc.alloc.rate:                   1384.624 MB/sec
[info]                  ·gc.alloc.rate.norm:              71888.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.162 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.651 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70124.169 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala":
[info]   30923.498 ±(99.9%) 1897.879 ops/s [Average]
[info]   (min, avg, max) = (30305.275, 30923.498, 31615.471), stdev = 492.873
[info]   CI (99.9%): [29025.619, 32821.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1412.677 ±(99.9%) 86.710 MB/sec [Average]
[info]   (min, avg, max) = (1384.624, 1412.677, 1444.507), stdev = 22.518
[info]   CI (99.9%): [1325.967, 1499.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   71888.187 ±(99.9%) 1.485 B/op [Average]
[info]   (min, avg, max) = (71888.013, 71888.187, 71888.877), stdev = 0.386
[info]   CI (99.9%): [71886.702, 71889.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.087, 0.125), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   4.432 ±(99.9%) 5.814 B/op [Average]
[info]   (min, avg, max) = (2.162, 4.432, 6.218), stdev = 1.510
[info]   CI (99.9%): [≈ 0, 10.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1404.412 ±(99.9%) 582.861 MB/sec [Average]
[info]   (min, avg, max) = (1320.288, 1404.412, 1674.328), stdev = 151.367
[info]   CI (99.9%): [821.551, 1987.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   71473.193 ±(99.9%) 29449.290 B/op [Average]
[info]   (min, avg, max) = (66238.593, 71473.193, 84862.693), stdev = 7647.887
[info]   CI (99.9%): [42023.903, 100922.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala
[info] # Run progress: 38.70% complete, ETA 00:38:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 252186.994 ops/s
[info] # Warmup Iteration   2: 269600.526 ops/s
[info] # Warmup Iteration   3: 268440.955 ops/s
[info] Iteration   1: 269673.678 ops/s
[info]                  ·gc.alloc.rate:                   701.694 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.607 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      661.684 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3862.448 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 270623.359 ops/s
[info]                  ·gc.alloc.rate:                   704.169 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.484 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      989.714 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5756.958 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 270731.022 ops/s
[info]                  ·gc.alloc.rate:                   704.485 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.363 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.076 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3837.803 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 271482.453 ops/s
[info]                  ·gc.alloc.rate:                   706.813 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.362 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      661.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3830.993 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 270413.976 ops/s
[info]                  ·gc.alloc.rate:                   703.931 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.606 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      662.341 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3854.004 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala":
[info]   270584.898 ±(99.9%) 2501.417 ops/s [Average]
[info]   (min, avg, max) = (269673.678, 270584.898, 271482.453), stdev = 649.610
[info]   CI (99.9%): [268083.481, 273086.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   704.218 ±(99.9%) 7.011 MB/sec [Average]
[info]   (min, avg, max) = (701.694, 704.218, 706.813), stdev = 1.821
[info]   CI (99.9%): [697.207, 711.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.002, 4096.002, 4096.002), stdev = 0.001
[info]   CI (99.9%): [4096.001, 4096.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.083, 0.104), stdev = 0.021
[info]   CI (99.9%): [0.003, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.485 ±(99.9%) 0.470 B/op [Average]
[info]   (min, avg, max) = (0.362, 0.485, 0.607), stdev = 0.122
[info]   CI (99.9%): [0.015, 0.954] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   726.980 ±(99.9%) 565.564 MB/sec [Average]
[info]   (min, avg, max) = (660.076, 726.980, 989.714), stdev = 146.875
[info]   CI (99.9%): [161.416, 1292.544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4228.441 ±(99.9%) 3290.600 B/op [Average]
[info]   (min, avg, max) = (3830.993, 4228.441, 5756.958), stdev = 854.558
[info]   CI (99.9%): [937.841, 7519.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson
[info] # Run progress: 39.04% complete, ETA 00:38:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9074.965 ops/s
[info] # Warmup Iteration   2: 17906.507 ops/s
[info] # Warmup Iteration   3: 17953.572 ops/s
[info] Iteration   1: 17694.678 ops/s
[info]                  ·gc.alloc.rate:                   1797.966 MB/sec
[info]                  ·gc.alloc.rate.norm:              159960.074 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.703 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1639.824 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 145890.638 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 17951.662 ops/s
[info]                  ·gc.alloc.rate:                   1824.380 MB/sec
[info]                  ·gc.alloc.rate.norm:              159960.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.125 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1991.542 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 174616.666 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 17389.991 ops/s
[info]                  ·gc.alloc.rate:                   1767.341 MB/sec
[info]                  ·gc.alloc.rate.norm:              159960.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.652 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1673.460 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 151462.987 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 17115.605 ops/s
[info]                  ·gc.alloc.rate:                   1739.335 MB/sec
[info]                  ·gc.alloc.rate.norm:              159960.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.742 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1682.723 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 154753.623 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 17846.242 ops/s
[info]                  ·gc.alloc.rate:                   1814.181 MB/sec
[info]                  ·gc.alloc.rate.norm:              159960.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.343 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028.368 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 178845.358 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson":
[info]   17599.635 ±(99.9%) 1322.749 ops/s [Average]
[info]   (min, avg, max) = (17115.605, 17599.635, 17951.662), stdev = 343.514
[info]   CI (99.9%): [16276.886, 18922.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1788.641 ±(99.9%) 134.789 MB/sec [Average]
[info]   (min, avg, max) = (1739.335, 1788.641, 1824.380), stdev = 35.004
[info]   CI (99.9%): [1653.851, 1923.430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   159960.035 ±(99.9%) 0.084 B/op [Average]
[info]   (min, avg, max) = (159960.023, 159960.035, 159960.074), stdev = 0.022
[info]   CI (99.9%): [159959.951, 159960.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   6.313 ±(99.9%) 7.831 B/op [Average]
[info]   (min, avg, max) = (3.703, 6.313, 9.125), stdev = 2.034
[info]   CI (99.9%): [≈ 0, 14.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1803.184 ±(99.9%) 731.146 MB/sec [Average]
[info]   (min, avg, max) = (1639.824, 1803.184, 2028.368), stdev = 189.876
[info]   CI (99.9%): [1072.037, 2534.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   161113.854 ±(99.9%) 56529.441 B/op [Average]
[info]   (min, avg, max) = (145890.638, 161113.854, 178845.358), stdev = 14680.516
[info]   CI (99.9%): [104584.413, 217643.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 1.000
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce
[info] # Run progress: 39.38% complete, ETA 00:38:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 39104.063 ops/s
[info] # Warmup Iteration   2: 51749.085 ops/s
[info] # Warmup Iteration   3: 50795.417 ops/s
[info] Iteration   1: 51841.014 ops/s
[info]                  ·gc.alloc.rate:                   1367.681 MB/sec
[info]                  ·gc.alloc.rate.norm:              41528.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.264 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1635.472 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 49659.171 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 53611.055 ops/s
[info]                  ·gc.alloc.rate:                   1414.762 MB/sec
[info]                  ·gc.alloc.rate.norm:              41528.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.667 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1317.517 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38673.537 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 53216.014 ops/s
[info]                  ·gc.alloc.rate:                   1404.367 MB/sec
[info]                  ·gc.alloc.rate.norm:              41528.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.463 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1326.179 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39215.950 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 53523.939 ops/s
[info]                  ·gc.alloc.rate:                   1412.217 MB/sec
[info]                  ·gc.alloc.rate.norm:              41528.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.224 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1333.913 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39225.373 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 51247.973 ops/s
[info]                  ·gc.alloc.rate:                   1352.435 MB/sec
[info]                  ·gc.alloc.rate.norm:              41528.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.196 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.448 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 41190.623 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce":
[info]   52687.999 ±(99.9%) 4138.630 ops/s [Average]
[info]   (min, avg, max) = (51247.973, 52687.999, 53611.055), stdev = 1074.789
[info]   CI (99.9%): [48549.370, 56826.629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1390.292 ±(99.9%) 109.286 MB/sec [Average]
[info]   (min, avg, max) = (1352.435, 1390.292, 1414.762), stdev = 28.381
[info]   CI (99.9%): [1281.007, 1499.578] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   41528.008 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (41528.008, 41528.008, 41528.008), stdev = 0.001
[info]   CI (99.9%): [41528.006, 41528.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.125), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2.363 ±(99.9%) 4.266 B/op [Average]
[info]   (min, avg, max) = (1.224, 2.363, 3.667), stdev = 1.108
[info]   CI (99.9%): [≈ 0, 6.629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1390.906 ±(99.9%) 527.561 MB/sec [Average]
[info]   (min, avg, max) = (1317.517, 1390.906, 1635.472), stdev = 137.006
[info]   CI (99.9%): [863.344, 1918.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   41592.931 ±(99.9%) 17751.042 B/op [Average]
[info]   (min, avg, max) = (38673.537, 41592.931, 49659.171), stdev = 4609.889
[info]   CI (99.9%): [23841.889, 59343.973] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 0.707
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala
[info] # Run progress: 39.73% complete, ETA 00:38:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 895417.456 ops/s
[info] # Warmup Iteration   2: 1045081.581 ops/s
[info] # Warmup Iteration   3: 1018610.075 ops/s
[info] Iteration   1: 1036319.559 ops/s
[info]                  ·gc.alloc.rate:                   1111.377 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.095 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      979.164 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1487.191 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1062336.993 ops/s
[info]                  ·gc.alloc.rate:                   1139.185 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.247 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1310.082 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1941.230 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 1064050.550 ops/s
[info]                  ·gc.alloc.rate:                   1141.020 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.123 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      987.376 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1460.702 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1060554.970 ops/s
[info]                  ·gc.alloc.rate:                   1137.420 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.124 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      992.185 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1472.464 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1048698.699 ops/s
[info]                  ·gc.alloc.rate:                   1124.802 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.187 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1330.954 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1997.373 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala":
[info]   1054392.154 ±(99.9%) 45292.948 ops/s [Average]
[info]   (min, avg, max) = (1036319.559, 1054392.154, 1064050.550), stdev = 11762.435
[info]   CI (99.9%): [1009099.206, 1099685.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1130.761 ±(99.9%) 48.394 MB/sec [Average]
[info]   (min, avg, max) = (1111.377, 1130.761, 1141.020), stdev = 12.568
[info]   CI (99.9%): [1082.366, 1179.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1688.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1688.000, 1688.000, 1688.000), stdev = 0.001
[info]   CI (99.9%): [1688.000, 1688.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.104 ±(99.9%) 0.160 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.104, 0.167), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.155 ±(99.9%) 0.236 B/op [Average]
[info]   (min, avg, max) = (0.095, 0.155, 0.247), stdev = 0.061
[info]   CI (99.9%): [≈ 0, 0.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1119.952 ±(99.9%) 705.817 MB/sec [Average]
[info]   (min, avg, max) = (979.164, 1119.952, 1330.954), stdev = 183.298
[info]   CI (99.9%): [414.135, 1825.769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1671.792 ±(99.9%) 1049.200 B/op [Average]
[info]   (min, avg, max) = (1460.702, 1671.792, 1997.373), stdev = 272.474
[info]   CI (99.9%): [622.592, 2720.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.600, 5.000), stdev = 1.342
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 40.07% complete, ETA 00:38:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 662393.750 ops/s
[info] # Warmup Iteration   2: 727457.151 ops/s
[info] # Warmup Iteration   3: 730909.601 ops/s
[info] Iteration   1: 725875.072 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 729949.970 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 729996.732 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 730156.879 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 730287.281 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc":
[info]   729253.187 ±(99.9%) 7289.838 ops/s [Average]
[info]   (min, avg, max) = (725875.072, 729253.187, 730287.281), stdev = 1893.148
[info]   CI (99.9%): [721963.349, 736543.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson
[info] # Run progress: 40.41% complete, ETA 00:37:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 40458.072 ops/s
[info] # Warmup Iteration   2: 54246.262 ops/s
[info] # Warmup Iteration   3: 53905.223 ops/s
[info] Iteration   1: 53947.645 ops/s
[info]                  ·gc.alloc.rate:                   1325.439 MB/sec
[info]                  ·gc.alloc.rate.norm:              38672.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.215 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1296.824 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37837.120 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 56025.111 ops/s
[info]                  ·gc.alloc.rate:                   1376.367 MB/sec
[info]                  ·gc.alloc.rate.norm:              38672.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.754 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1632.047 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 45855.902 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 55272.416 ops/s
[info]                  ·gc.alloc.rate:                   1357.878 MB/sec
[info]                  ·gc.alloc.rate.norm:              38672.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.186 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1317.414 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37519.597 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 53925.379 ops/s
[info]                  ·gc.alloc.rate:                   1324.860 MB/sec
[info]                  ·gc.alloc.rate.norm:              38672.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.430 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1327.783 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38757.301 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 56101.471 ops/s
[info]                  ·gc.alloc.rate:                   1378.876 MB/sec
[info]                  ·gc.alloc.rate.norm:              38672.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.920 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1336.345 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37479.177 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson":
[info]   55054.404 ±(99.9%) 4122.961 ops/s [Average]
[info]   (min, avg, max) = (53925.379, 55054.404, 56101.471), stdev = 1070.720
[info]   CI (99.9%): [50931.443, 59177.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1352.684 ±(99.9%) 101.703 MB/sec [Average]
[info]   (min, avg, max) = (1324.860, 1352.684, 1378.876), stdev = 26.412
[info]   CI (99.9%): [1250.981, 1454.387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   38672.008 ±(99.9%) 0.003 B/op [Average]
[info]   (min, avg, max) = (38672.007, 38672.008, 38672.009), stdev = 0.001
[info]   CI (99.9%): [38672.005, 38672.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.104), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.901 ±(99.9%) 2.935 B/op [Average]
[info]   (min, avg, max) = (1.186, 1.901, 2.920), stdev = 0.762
[info]   CI (99.9%): [≈ 0, 4.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1382.082 ±(99.9%) 541.059 MB/sec [Average]
[info]   (min, avg, max) = (1296.824, 1382.082, 1632.047), stdev = 140.511
[info]   CI (99.9%): [841.023, 1923.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   39489.819 ±(99.9%) 13846.193 B/op [Average]
[info]   (min, avg, max) = (37479.177, 39489.819, 45855.902), stdev = 3595.812
[info]   CI (99.9%): [25643.626, 53336.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 6.000), stdev = 1.140
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce
[info] # Run progress: 40.75% complete, ETA 00:37:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11858.267 ops/s
[info] # Warmup Iteration   2: 16651.081 ops/s
[info] # Warmup Iteration   3: 16672.460 ops/s
[info] Iteration   1: 16792.601 ops/s
[info]                  ·gc.alloc.rate:                   1498.346 MB/sec
[info]                  ·gc.alloc.rate.norm:              140449.120 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.902 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1640.740 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 153796.557 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 16172.756 ops/s
[info]                  ·gc.alloc.rate:                   1443.428 MB/sec
[info]                  ·gc.alloc.rate.norm:              140480.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.129 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1321.451 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 128608.728 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 16046.917 ops/s
[info]                  ·gc.alloc.rate:                   1432.181 MB/sec
[info]                  ·gc.alloc.rate.norm:              140480.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.166 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1663.465 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 163166.265 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 15985.959 ops/s
[info]                  ·gc.alloc.rate:                   1426.735 MB/sec
[info]                  ·gc.alloc.rate.norm:              140478.709 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.198 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.775 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 131817.985 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 16539.289 ops/s
[info]                  ·gc.alloc.rate:                   1476.130 MB/sec
[info]                  ·gc.alloc.rate.norm:              140480.048 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.962 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.135 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 127918.412 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce":
[info]   16307.504 ±(99.9%) 1331.812 ops/s [Average]
[info]   (min, avg, max) = (15985.959, 16307.504, 16792.601), stdev = 345.867
[info]   CI (99.9%): [14975.693, 17639.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1455.364 ±(99.9%) 118.344 MB/sec [Average]
[info]   (min, avg, max) = (1426.735, 1455.364, 1498.346), stdev = 30.733
[info]   CI (99.9%): [1337.020, 1573.708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   140473.586 ±(99.9%) 52.711 B/op [Average]
[info]   (min, avg, max) = (140449.120, 140473.586, 140480.048), stdev = 13.689
[info]   CI (99.9%): [140420.875, 140526.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.104), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   6.871 ±(99.9%) 10.777 B/op [Average]
[info]   (min, avg, max) = (3.902, 6.871, 10.129), stdev = 2.799
[info]   CI (99.9%): [≈ 0, 17.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1461.713 ±(99.9%) 670.738 MB/sec [Average]
[info]   (min, avg, max) = (1321.451, 1461.713, 1663.465), stdev = 174.188
[info]   CI (99.9%): [790.976, 2132.451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   141061.589 ±(99.9%) 62803.790 B/op [Average]
[info]   (min, avg, max) = (127918.412, 141061.589, 163166.265), stdev = 16309.945
[info]   CI (99.9%): [78257.799, 203865.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala
[info] # Run progress: 41.10% complete, ETA 00:37:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9379.733 ops/s
[info] # Warmup Iteration   2: 17509.832 ops/s
[info] # Warmup Iteration   3: 17384.991 ops/s
[info] Iteration   1: 17575.308 ops/s
[info]                  ·gc.alloc.rate:                   1362.366 MB/sec
[info]                  ·gc.alloc.rate.norm:              122032.790 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.592 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1317.193 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 117986.423 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 17599.922 ops/s
[info]                  ·gc.alloc.rate:                   1364.910 MB/sec
[info]                  ·gc.alloc.rate.norm:              122064.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.308 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1328.173 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 118778.648 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 17793.922 ops/s
[info]                  ·gc.alloc.rate:                   1380.180 MB/sec
[info]                  ·gc.alloc.rate.norm:              122064.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.524 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1672.482 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 147915.382 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 17758.467 ops/s
[info]                  ·gc.alloc.rate:                   1377.272 MB/sec
[info]                  ·gc.alloc.rate.norm:              122054.985 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.535 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.957 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 119191.248 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 17393.805 ops/s
[info]                  ·gc.alloc.rate:                   1348.876 MB/sec
[info]                  ·gc.alloc.rate.norm:              122032.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.418 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.448 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 122083.732 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala":
[info]   17624.285 ±(99.9%) 617.590 ops/s [Average]
[info]   (min, avg, max) = (17393.805, 17624.285, 17793.922), stdev = 160.386
[info]   CI (99.9%): [17006.695, 18241.875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1366.721 ±(99.9%) 48.446 MB/sec [Average]
[info]   (min, avg, max) = (1348.876, 1366.721, 1380.180), stdev = 12.581
[info]   CI (99.9%): [1318.275, 1415.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   122049.569 ±(99.9%) 61.985 B/op [Average]
[info]   (min, avg, max) = (122032.025, 122049.569, 122064.023), stdev = 16.097
[info]   CI (99.9%): [121987.584, 122111.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.079, 0.104), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   7.075 ±(99.9%) 8.043 B/op [Average]
[info]   (min, avg, max) = (5.524, 7.075, 9.418), stdev = 2.089
[info]   CI (99.9%): [≈ 0, 15.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1402.451 ±(99.9%) 583.401 MB/sec [Average]
[info]   (min, avg, max) = (1317.193, 1402.451, 1672.482), stdev = 151.507
[info]   CI (99.9%): [819.050, 1985.851] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   125191.087 ±(99.9%) 49277.481 B/op [Average]
[info]   (min, avg, max) = (117986.423, 125191.087, 147915.382), stdev = 12797.205
[info]   CI (99.9%): [75913.606, 174468.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala
[info] # Run progress: 41.44% complete, ETA 00:37:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 286612.299 ops/s
[info] # Warmup Iteration   2: 302146.982 ops/s
[info] # Warmup Iteration   3: 301912.156 ops/s
[info] Iteration   1: 300922.789 ops/s
[info]                  ·gc.alloc.rate:                   783.103 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.218 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.743 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3456.002 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 299524.370 ops/s
[info]                  ·gc.alloc.rate:                   779.359 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.547 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      989.713 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5201.541 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 293571.828 ops/s
[info]                  ·gc.alloc.rate:                   764.030 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.558 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.805 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3542.607 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 296695.935 ops/s
[info]                  ·gc.alloc.rate:                   772.090 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      661.419 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3508.881 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 305100.246 ops/s
[info]                  ·gc.alloc.rate:                   793.965 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.107 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      995.144 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5133.863 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala":
[info]   299163.034 ±(99.9%) 16765.338 ops/s [Average]
[info]   (min, avg, max) = (293571.828, 299163.034, 305100.246), stdev = 4353.905
[info]   CI (99.9%): [282397.695, 315928.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   778.509 ±(99.9%) 43.547 MB/sec [Average]
[info]   (min, avg, max) = (764.030, 778.509, 793.965), stdev = 11.309
[info]   CI (99.9%): [734.963, 822.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.001, 4096.001, 4096.001), stdev = 0.001
[info]   CI (99.9%): [4096.001, 4096.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.104), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.286 ±(99.9%) 0.983 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.286, 0.558), stdev = 0.255
[info]   CI (99.9%): [≈ 0, 1.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   793.565 ±(99.9%) 699.074 MB/sec [Average]
[info]   (min, avg, max) = (660.743, 793.565, 995.144), stdev = 181.547
[info]   CI (99.9%): [94.491, 1492.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4168.579 ±(99.9%) 3515.277 B/op [Average]
[info]   (min, avg, max) = (3456.002, 4168.579, 5201.541), stdev = 912.906
[info]   CI (99.9%): [653.302, 7683.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson
[info] # Run progress: 41.78% complete, ETA 00:36:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6681.951 ops/s
[info] # Warmup Iteration   2: 12122.476 ops/s
[info] # Warmup Iteration   3: 12357.106 ops/s
[info] Iteration   1: 12406.924 ops/s
[info]                  ·gc.alloc.rate:                   1696.802 MB/sec
[info]                  ·gc.alloc.rate.norm:              215256.035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.921 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1992.143 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 252722.870 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 12118.380 ops/s
[info]                  ·gc.alloc.rate:                   1657.501 MB/sec
[info]                  ·gc.alloc.rate.norm:              215256.034 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.110 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1673.988 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 217397.202 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 12046.394 ops/s
[info]                  ·gc.alloc.rate:                   1647.519 MB/sec
[info]                  ·gc.alloc.rate.norm:              215257.912 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.462 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 175792.474 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 12175.989 ops/s
[info]                  ·gc.alloc.rate:                   1665.178 MB/sec
[info]                  ·gc.alloc.rate.norm:              215256.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.762 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1688.386 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 218256.028 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 12282.762 ops/s
[info]                  ·gc.alloc.rate:                   1679.717 MB/sec
[info]                  ·gc.alloc.rate.norm:              215256.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13.337 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1693.094 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 216970.305 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson":
[info]   12206.090 ±(99.9%) 545.634 ops/s [Average]
[info]   (min, avg, max) = (12046.394, 12206.090, 12406.924), stdev = 141.699
[info]   CI (99.9%): [11660.456, 12751.724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1669.343 ±(99.9%) 74.456 MB/sec [Average]
[info]   (min, avg, max) = (1647.519, 1669.343, 1696.802), stdev = 19.336
[info]   CI (99.9%): [1594.888, 1743.799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   215256.410 ±(99.9%) 3.233 B/op [Average]
[info]   (min, avg, max) = (215256.033, 215256.410, 215257.912), stdev = 0.840
[info]   CI (99.9%): [215253.177, 215259.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.104), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   8.026 ±(99.9%) 19.265 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.026, 13.337), stdev = 5.003
[info]   CI (99.9%): [≈ 0, 27.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1678.615 ±(99.9%) 881.488 MB/sec [Average]
[info]   (min, avg, max) = (1345.462, 1678.615, 1992.143), stdev = 228.920
[info]   CI (99.9%): [797.126, 2560.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   216227.776 ±(99.9%) 104977.520 B/op [Average]
[info]   (min, avg, max) = (175792.474, 216227.776, 252722.870), stdev = 27262.329
[info]   CI (99.9%): [111250.256, 321205.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 7.000), stdev = 1.095
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce
[info] # Run progress: 42.12% complete, ETA 00:36:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29244.655 ops/s
[info] # Warmup Iteration   2: 40208.545 ops/s
[info] # Warmup Iteration   3: 40171.592 ops/s
[info] Iteration   1: 41876.747 ops/s
[info]                  ·gc.alloc.rate:                   1377.567 MB/sec
[info]                  ·gc.alloc.rate.norm:              51768.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.129 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1307.714 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 49143.003 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 41829.076 ops/s
[info]                  ·gc.alloc.rate:                   1375.601 MB/sec
[info]                  ·gc.alloc.rate.norm:              51768.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.699 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1314.704 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 49476.265 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 41564.114 ops/s
[info]                  ·gc.alloc.rate:                   1367.132 MB/sec
[info]                  ·gc.alloc.rate.norm:              51768.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.518 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1656.370 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62720.333 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 41641.814 ops/s
[info]                  ·gc.alloc.rate:                   1369.768 MB/sec
[info]                  ·gc.alloc.rate.norm:              51768.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.360 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1334.024 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50417.149 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 41179.248 ops/s
[info]                  ·gc.alloc.rate:                   1355.015 MB/sec
[info]                  ·gc.alloc.rate.norm:              51768.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.569 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.790 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51262.754 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce":
[info]   41618.200 ±(99.9%) 1067.603 ops/s [Average]
[info]   (min, avg, max) = (41179.248, 41618.200, 41876.747), stdev = 277.253
[info]   CI (99.9%): [40550.597, 42685.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1369.016 ±(99.9%) 34.259 MB/sec [Average]
[info]   (min, avg, max) = (1355.015, 1369.016, 1377.567), stdev = 8.897
[info]   CI (99.9%): [1334.757, 1403.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   51768.011 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (51768.010, 51768.011, 51768.014), stdev = 0.002
[info]   CI (99.9%): [51768.004, 51768.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.112 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.112, 0.146), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4.255 ±(99.9%) 5.572 B/op [Average]
[info]   (min, avg, max) = (2.360, 4.255, 5.569), stdev = 1.447
[info]   CI (99.9%): [≈ 0, 9.828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1390.920 ±(99.9%) 573.884 MB/sec [Average]
[info]   (min, avg, max) = (1307.714, 1390.920, 1656.370), stdev = 149.036
[info]   CI (99.9%): [817.036, 1964.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   52603.901 ±(99.9%) 22009.611 B/op [Average]
[info]   (min, avg, max) = (49143.003, 52603.901, 62720.333), stdev = 5715.826
[info]   CI (99.9%): [30594.290, 74613.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala
[info] # Run progress: 42.47% complete, ETA 00:36:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1114977.864 ops/s
[info] # Warmup Iteration   2: 1289160.559 ops/s
[info] # Warmup Iteration   3: 1300176.716 ops/s
[info] Iteration   1: 1310445.000 ops/s
[info]                  ·gc.alloc.rate:                   1192.348 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.075 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1306.290 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1568.843 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1288246.516 ops/s
[info]                  ·gc.alloc.rate:                   1171.929 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.127 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1311.747 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1602.846 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 1308261.239 ops/s
[info]                  ·gc.alloc.rate:                   1190.179 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.075 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      988.782 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1189.684 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1314760.642 ops/s
[info]                  ·gc.alloc.rate:                   1196.198 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.100 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1326.302 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1587.751 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1316024.896 ops/s
[info]                  ·gc.alloc.rate:                   1197.330 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.124 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1000.157 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1196.182 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala":
[info]   1307547.658 ±(99.9%) 43280.303 ops/s [Average]
[info]   (min, avg, max) = (1288246.516, 1307547.658, 1316024.896), stdev = 11239.757
[info]   CI (99.9%): [1264267.355, 1350827.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1189.597 ±(99.9%) 39.618 MB/sec [Average]
[info]   (min, avg, max) = (1171.929, 1189.597, 1197.330), stdev = 10.289
[info]   CI (99.9%): [1149.979, 1229.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1432.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1432.000, 1432.000, 1432.000), stdev = 0.001
[info]   CI (99.9%): [1432.000, 1432.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.083, 0.104), stdev = 0.021
[info]   CI (99.9%): [0.003, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.100 ±(99.9%) 0.098 B/op [Average]
[info]   (min, avg, max) = (0.075, 0.100, 0.127), stdev = 0.025
[info]   CI (99.9%): [0.002, 0.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1186.656 ±(99.9%) 676.324 MB/sec [Average]
[info]   (min, avg, max) = (988.782, 1186.656, 1326.302), stdev = 175.639
[info]   CI (99.9%): [510.331, 1862.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1429.061 ±(99.9%) 831.366 B/op [Average]
[info]   (min, avg, max) = (1189.684, 1429.061, 1602.846), stdev = 215.903
[info]   CI (99.9%): [597.696, 2260.427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 42.81% complete, ETA 00:36:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1186755.797 ops/s
[info] # Warmup Iteration   2: 1327481.126 ops/s
[info] # Warmup Iteration   3: 1321531.692 ops/s
[info] Iteration   1: 1311765.149 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1321875.178 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1324706.408 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1325069.283 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1326634.825 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   1322010.169 ±(99.9%) 23023.018 ops/s [Average]
[info]   (min, avg, max) = (1311765.149, 1322010.169, 1326634.825), stdev = 5979.005
[info]   CI (99.9%): [1298987.151, 1345033.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson
[info] # Run progress: 43.15% complete, ETA 00:36:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28246.737 ops/s
[info] # Warmup Iteration   2: 38217.835 ops/s
[info] # Warmup Iteration   3: 40498.319 ops/s
[info] Iteration   1: 38843.160 ops/s
[info]                  ·gc.alloc.rate:                   1174.989 MB/sec
[info]                  ·gc.alloc.rate.norm:              47593.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.061 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1295.709 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52482.781 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 40256.399 ops/s
[info]                  ·gc.alloc.rate:                   1217.299 MB/sec
[info]                  ·gc.alloc.rate.norm:              47592.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.069 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      975.567 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38141.164 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 40983.291 ops/s
[info]                  ·gc.alloc.rate:                   1239.163 MB/sec
[info]                  ·gc.alloc.rate.norm:              47592.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.198 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1309.547 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50295.219 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 40886.740 ops/s
[info]                  ·gc.alloc.rate:                   1236.305 MB/sec
[info]                  ·gc.alloc.rate.norm:              47592.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1320.252 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50823.575 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 39825.864 ops/s
[info]                  ·gc.alloc.rate:                   1204.115 MB/sec
[info]                  ·gc.alloc.rate.norm:              47592.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.645 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1330.120 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52572.275 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson":
[info]   40159.091 ±(99.9%) 3368.466 ops/s [Average]
[info]   (min, avg, max) = (38843.160, 40159.091, 40983.291), stdev = 874.780
[info]   CI (99.9%): [36790.624, 43527.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1214.374 ±(99.9%) 101.156 MB/sec [Average]
[info]   (min, avg, max) = (1174.989, 1214.374, 1239.163), stdev = 26.270
[info]   CI (99.9%): [1113.218, 1315.530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   47592.211 ±(99.9%) 1.724 B/op [Average]
[info]   (min, avg, max) = (47592.010, 47592.211, 47593.012), stdev = 0.448
[info]   CI (99.9%): [47590.486, 47593.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.092, 0.125), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3.596 ±(99.9%) 4.909 B/op [Average]
[info]   (min, avg, max) = (1.645, 3.596, 5.061), stdev = 1.275
[info]   CI (99.9%): [≈ 0, 8.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1246.239 ±(99.9%) 584.717 MB/sec [Average]
[info]   (min, avg, max) = (975.567, 1246.239, 1330.120), stdev = 151.849
[info]   CI (99.9%): [661.523, 1830.956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   48863.003 ±(99.9%) 23399.942 B/op [Average]
[info]   (min, avg, max) = (38141.164, 48863.003, 52572.275), stdev = 6076.891
[info]   CI (99.9%): [25463.061, 72262.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 5.000), stdev = 0.837
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce
[info] # Run progress: 43.49% complete, ETA 00:35:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 101895.178 ops/s
[info] # Warmup Iteration   2: 130399.796 ops/s
[info] # Warmup Iteration   3: 130924.597 ops/s
[info] Iteration   1: 130101.107 ops/s
[info]                  ·gc.alloc.rate:                   2231.454 MB/sec
[info]                  ·gc.alloc.rate.norm:              27000.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.511 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2322.057 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28096.283 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 131011.627 ops/s
[info]                  ·gc.alloc.rate:                   2248.147 MB/sec
[info]                  ·gc.alloc.rate.norm:              27000.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.748 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2342.238 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28130.032 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 130959.519 ops/s
[info]                  ·gc.alloc.rate:                   2247.259 MB/sec
[info]                  ·gc.alloc.rate.norm:              27000.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.501 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2022.954 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24305.060 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 130828.081 ops/s
[info]                  ·gc.alloc.rate:                   2244.308 MB/sec
[info]                  ·gc.alloc.rate.norm:              27000.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.751 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2369.366 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28504.496 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 129521.288 ops/s
[info]                  ·gc.alloc.rate:                   2221.756 MB/sec
[info]                  ·gc.alloc.rate.norm:              27000.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.771 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2036.185 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24744.846 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce":
[info]   130484.324 ±(99.9%) 2507.595 ops/s [Average]
[info]   (min, avg, max) = (129521.288, 130484.324, 131011.627), stdev = 651.215
[info]   CI (99.9%): [127976.729, 132991.920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate":
[info]   2238.585 ±(99.9%) 44.470 MB/sec [Average]
[info]   (min, avg, max) = (2221.756, 2238.585, 2248.147), stdev = 11.549
[info]   CI (99.9%): [2194.115, 2283.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   27000.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (27000.003, 27000.003, 27000.004), stdev = 0.001
[info]   CI (99.9%): [27000.002, 27000.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.121 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.121, 0.146), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1.456 ±(99.9%) 1.595 B/op [Average]
[info]   (min, avg, max) = (0.751, 1.456, 1.771), stdev = 0.414
[info]   CI (99.9%): [≈ 0, 3.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2218.560 ±(99.9%) 667.709 MB/sec [Average]
[info]   (min, avg, max) = (2022.954, 2218.560, 2369.366), stdev = 173.402
[info]   CI (99.9%): [1550.851, 2886.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   26756.143 ±(99.9%) 7889.923 B/op [Average]
[info]   (min, avg, max) = (24305.060, 26756.143, 28504.496), stdev = 2048.988
[info]   CI (99.9%): [18866.220, 34646.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.count":
[info]   33.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 7.000), stdev = 1.095
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala
[info] # Run progress: 43.84% complete, ETA 00:35:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 158457.714 ops/s
[info] # Warmup Iteration   2: 244344.378 ops/s
[info] # Warmup Iteration   3: 242657.924 ops/s
[info] Iteration   1: 253937.242 ops/s
[info]                  ·gc.alloc.rate:                   557.484 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.645 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      647.334 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4013.008 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 255449.398 ops/s
[info]                  ·gc.alloc.rate:                   561.031 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      325.785 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2006.864 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 254399.387 ops/s
[info]                  ·gc.alloc.rate:                   558.514 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.773 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.014 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4040.751 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 257249.311 ops/s
[info]                  ·gc.alloc.rate:                   564.887 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.255 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.147 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4014.332 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 256888.579 ops/s
[info]                  ·gc.alloc.rate:                   564.008 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.255 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658.708 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4036.281 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala":
[info]   255584.783 ±(99.9%) 5648.917 ops/s [Average]
[info]   (min, avg, max) = (253937.242, 255584.783, 257249.311), stdev = 1467.006
[info]   CI (99.9%): [249935.866, 261233.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   561.185 ±(99.9%) 12.556 MB/sec [Average]
[info]   (min, avg, max) = (557.484, 561.185, 564.887), stdev = 3.261
[info]   CI (99.9%): [548.629, 573.741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3456.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3456.002, 3456.002, 3456.002), stdev = 0.001
[info]   CI (99.9%): [3456.001, 3456.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.196 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.125), stdev = 0.051
[info]   CI (99.9%): [≈ 0, 0.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.386 ±(99.9%) 1.218 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.386, 0.773), stdev = 0.316
[info]   CI (99.9%): [≈ 0, 1.603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   588.197 ±(99.9%) 565.099 MB/sec [Average]
[info]   (min, avg, max) = (325.785, 588.197, 658.708), stdev = 146.754
[info]   CI (99.9%): [23.099, 1153.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3622.247 ±(99.9%) 3477.570 B/op [Average]
[info]   (min, avg, max) = (2006.864, 3622.247, 4040.751), stdev = 903.114
[info]   CI (99.9%): [144.678, 7099.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala
[info] # Run progress: 44.18% complete, ETA 00:35:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 463314.626 ops/s
[info] # Warmup Iteration   2: 501435.911 ops/s
[info] # Warmup Iteration   3: 504239.443 ops/s
[info] Iteration   1: 507160.547 ops/s
[info]                  ·gc.alloc.rate:                   639.180 MB/sec
[info]                  ·gc.alloc.rate.norm:              1984.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.258 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658.347 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2043.494 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 494149.752 ops/s
[info]                  ·gc.alloc.rate:                   623.003 MB/sec
[info]                  ·gc.alloc.rate.norm:              1984.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.450 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1045.973 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 487709.681 ops/s
[info]                  ·gc.alloc.rate:                   614.707 MB/sec
[info]                  ·gc.alloc.rate.norm:              1984.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.336 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.385 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2115.291 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 488107.104 ops/s
[info]                  ·gc.alloc.rate:                   615.359 MB/sec
[info]                  ·gc.alloc.rate.norm:              1984.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.268 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.206 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2115.697 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 487120.421 ops/s
[info]                  ·gc.alloc.rate:                   613.946 MB/sec
[info]                  ·gc.alloc.rate.norm:              1984.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.336 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.692 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2122.136 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala":
[info]   492849.501 ±(99.9%) 32686.678 ops/s [Average]
[info]   (min, avg, max) = (487120.421, 492849.501, 507160.547), stdev = 8488.626
[info]   CI (99.9%): [460162.823, 525536.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   621.239 ±(99.9%) 41.088 MB/sec [Average]
[info]   (min, avg, max) = (613.946, 621.239, 639.180), stdev = 10.670
[info]   CI (99.9%): [580.151, 662.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1984.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1984.001, 1984.001, 1984.001), stdev = 0.001
[info]   CI (99.9%): [1984.001, 1984.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.075, 0.104), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.240 ±(99.9%) 0.535 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.240, 0.336), stdev = 0.139
[info]   CI (99.9%): [≈ 0, 0.775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   591.016 ±(99.9%) 565.209 MB/sec [Average]
[info]   (min, avg, max) = (328.450, 591.016, 658.347), stdev = 146.783
[info]   CI (99.9%): [25.807, 1156.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1888.518 ±(99.9%) 1817.889 B/op [Average]
[info]   (min, avg, max) = (1045.973, 1888.518, 2122.136), stdev = 472.100
[info]   CI (99.9%): [70.629, 3706.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson
[info] # Run progress: 44.52% complete, ETA 00:35:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 38732.430 ops/s
[info] # Warmup Iteration   2: 67900.244 ops/s
[info] # Warmup Iteration   3: 66098.841 ops/s
[info] Iteration   1: 68451.121 ops/s
[info]                  ·gc.alloc.rate:                   2965.158 MB/sec
[info]                  ·gc.alloc.rate.norm:              68168.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.350 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2687.198 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61777.793 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 67121.984 ops/s
[info]                  ·gc.alloc.rate:                   2907.431 MB/sec
[info]                  ·gc.alloc.rate.norm:              68168.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.393 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3043.784 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 71364.958 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 68194.588 ops/s
[info]                  ·gc.alloc.rate:                   2960.065 MB/sec
[info]                  ·gc.alloc.rate.norm:              68324.358 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.324 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3054.523 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70504.648 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 68441.199 ops/s
[info]                  ·gc.alloc.rate:                   2964.756 MB/sec
[info]                  ·gc.alloc.rate.norm:              68168.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.308 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2718.872 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62514.443 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 67909.152 ops/s
[info]                  ·gc.alloc.rate:                   2941.128 MB/sec
[info]                  ·gc.alloc.rate.norm:              68168.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.895 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3063.366 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 71001.193 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson":
[info]   68023.609 ±(99.9%) 2119.962 ops/s [Average]
[info]   (min, avg, max) = (67121.984, 68023.609, 68451.121), stdev = 550.547
[info]   CI (99.9%): [65903.647, 70143.570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2947.707 ±(99.9%) 94.584 MB/sec [Average]
[info]   (min, avg, max) = (2907.431, 2947.707, 2965.158), stdev = 24.563
[info]   CI (99.9%): [2853.124, 3042.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   68199.276 ±(99.9%) 269.247 B/op [Average]
[info]   (min, avg, max) = (68168.006, 68199.276, 68324.358), stdev = 69.923
[info]   CI (99.9%): [67930.030, 68468.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.167 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (0.125, 0.167, 0.187), stdev = 0.029
[info]   CI (99.9%): [0.053, 0.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3.854 ±(99.9%) 2.648 B/op [Average]
[info]   (min, avg, max) = (2.895, 3.854, 4.393), stdev = 0.688
[info]   CI (99.9%): [1.206, 6.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   2913.549 ±(99.9%) 741.722 MB/sec [Average]
[info]   (min, avg, max) = (2687.198, 2913.549, 3063.366), stdev = 192.623
[info]   CI (99.9%): [2171.827, 3655.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   67432.607 ±(99.9%) 18646.908 B/op [Average]
[info]   (min, avg, max) = (61777.793, 67432.607, 71364.958), stdev = 4842.543
[info]   CI (99.9%): [48785.699, 86079.515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.count":
[info]   43.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.600, 9.000), stdev = 0.548
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.time":
[info]   49.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 9.800, 11.000), stdev = 1.304
[info]   CI (99.9%): [49.000, 49.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce
[info] # Run progress: 44.86% complete, ETA 00:34:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 133429.957 ops/s
[info] # Warmup Iteration   2: 168631.615 ops/s
[info] # Warmup Iteration   3: 171677.857 ops/s
[info] Iteration   1: 172742.289 ops/s
[info]                  ·gc.alloc.rate:                   1486.649 MB/sec
[info]                  ·gc.alloc.rate.norm:              13544.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.328 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1307.746 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11914.119 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 173660.886 ops/s
[info]                  ·gc.alloc.rate:                   1494.016 MB/sec
[info]                  ·gc.alloc.rate.norm:              13544.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.321 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1647.205 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14932.740 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 171595.403 ops/s
[info]                  ·gc.alloc.rate:                   1476.954 MB/sec
[info]                  ·gc.alloc.rate.norm:              13544.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.573 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1328.176 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12179.672 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 174069.919 ops/s
[info]                  ·gc.alloc.rate:                   1498.231 MB/sec
[info]                  ·gc.alloc.rate.norm:              13544.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.753 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1670.967 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15105.537 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 174508.505 ops/s
[info]                  ·gc.alloc.rate:                   1501.775 MB/sec
[info]                  ·gc.alloc.rate.norm:              13544.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.751 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.324 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12124.002 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce":
[info]   173315.400 ±(99.9%) 4473.632 ops/s [Average]
[info]   (min, avg, max) = (171595.403, 173315.400, 174508.505), stdev = 1161.788
[info]   CI (99.9%): [168841.769, 177789.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1491.525 ±(99.9%) 38.135 MB/sec [Average]
[info]   (min, avg, max) = (1476.954, 1491.525, 1501.775), stdev = 9.904
[info]   CI (99.9%): [1453.390, 1529.660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   13544.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (13544.002, 13544.002, 13544.003), stdev = 0.001
[info]   CI (99.9%): [13544.002, 13544.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.104 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.104, 0.146), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.945 ±(99.9%) 1.362 B/op [Average]
[info]   (min, avg, max) = (0.573, 0.945, 1.328), stdev = 0.354
[info]   CI (99.9%): [≈ 0, 2.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1459.684 ±(99.9%) 703.447 MB/sec [Average]
[info]   (min, avg, max) = (1307.746, 1459.684, 1670.967), stdev = 182.683
[info]   CI (99.9%): [756.236, 2163.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   13251.214 ±(99.9%) 6230.633 B/op [Average]
[info]   (min, avg, max) = (11914.119, 13251.214, 15105.537), stdev = 1618.076
[info]   CI (99.9%): [7020.581, 19481.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala
[info] # Run progress: 45.21% complete, ETA 00:34:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 321697.914 ops/s
[info] # Warmup Iteration   2: 491951.855 ops/s
[info] # Warmup Iteration   3: 492715.284 ops/s
[info] Iteration   1: 493148.313 ops/s
[info]                  ·gc.alloc.rate:                   506.568 MB/sec
[info]                  ·gc.alloc.rate.norm:              1616.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.133 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      639.999 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2041.658 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 494116.741 ops/s
[info]                  ·gc.alloc.rate:                   507.261 MB/sec
[info]                  ·gc.alloc.rate.norm:              1616.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      322.698 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1028.030 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 483867.285 ops/s
[info]                  ·gc.alloc.rate:                   496.843 MB/sec
[info]                  ·gc.alloc.rate.norm:              1616.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.203 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      647.514 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2106.066 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 491845.727 ops/s
[info]                  ·gc.alloc.rate:                   504.949 MB/sec
[info]                  ·gc.alloc.rate.norm:              1616.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      324.701 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1039.148 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 490433.474 ops/s
[info]                  ·gc.alloc.rate:                   503.561 MB/sec
[info]                  ·gc.alloc.rate.norm:              1616.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.267 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2092.766 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala":
[info]   490682.308 ±(99.9%) 15610.136 ops/s [Average]
[info]   (min, avg, max) = (483867.285, 490682.308, 494116.741), stdev = 4053.903
[info]   CI (99.9%): [475072.172, 506292.444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   503.836 ±(99.9%) 16.041 MB/sec [Average]
[info]   (min, avg, max) = (496.843, 503.836, 507.261), stdev = 4.166
[info]   CI (99.9%): [487.795, 519.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1616.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1616.001, 1616.001, 1616.001), stdev = 0.001
[info]   CI (99.9%): [1616.001, 1616.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.083), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.121 ±(99.9%) 0.462 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.121, 0.267), stdev = 0.120
[info]   CI (99.9%): [≈ 0, 0.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   517.407 ±(99.9%) 681.120 MB/sec [Average]
[info]   (min, avg, max) = (322.698, 517.407, 652.125), stdev = 176.885
[info]   CI (99.9%): [≈ 0, 1198.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1661.534 ±(99.9%) 2209.306 B/op [Average]
[info]   (min, avg, max) = (1028.030, 1661.534, 2106.066), stdev = 573.750
[info]   CI (99.9%): [≈ 0, 3870.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 1.000
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala
[info] # Run progress: 45.55% complete, ETA 00:34:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 587476.998 ops/s
[info] # Warmup Iteration   2: 637717.296 ops/s
[info] # Warmup Iteration   3: 576881.650 ops/s
[info] Iteration   1: 594453.073 ops/s
[info]                  ·gc.alloc.rate:                   465.261 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.717 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.843 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      584.445 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1547.600 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 593338.237 ops/s
[info]                  ·gc.alloc.rate:                   464.448 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.055 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.735 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 872.008 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 592901.102 ops/s
[info]                  ·gc.alloc.rate:                   464.046 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.166 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.056 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1736.460 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 592296.421 ops/s
[info]                  ·gc.alloc.rate:                   463.599 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.111 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      326.381 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 867.347 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 568694.829 ops/s
[info]                  ·gc.alloc.rate:                   445.260 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      326.469 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 903.315 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala":
[info]   588336.733 ±(99.9%) 42389.524 ops/s [Average]
[info]   (min, avg, max) = (568694.829, 588336.733, 594453.073), stdev = 11008.425
[info]   CI (99.9%): [545947.208, 630726.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   460.523 ±(99.9%) 32.938 MB/sec [Average]
[info]   (min, avg, max) = (445.260, 460.523, 465.261), stdev = 8.554
[info]   CI (99.9%): [427.584, 493.461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1232.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1232.001, 1232.001, 1232.001), stdev = 0.001
[info]   CI (99.9%): [1232.001, 1232.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.768 ±(99.9%) 6.348 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.768, 3.717), stdev = 1.649
[info]   CI (99.9%): [≈ 0, 7.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2.035 ±(99.9%) 16.809 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.035, 9.843), stdev = 4.365
[info]   CI (99.9%): [≈ 0, 18.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   444.017 ±(99.9%) 623.228 MB/sec [Average]
[info]   (min, avg, max) = (326.381, 444.017, 654.056), stdev = 161.850
[info]   CI (99.9%): [≈ 0, 1067.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1185.346 ±(99.9%) 1626.641 B/op [Average]
[info]   (min, avg, max) = (867.347, 1185.346, 1736.460), stdev = 422.433
[info]   CI (99.9%): [≈ 0, 2811.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 5.000), stdev = 2.000
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 45.89% complete, ETA 00:34:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 585216.945 ops/s
[info] # Warmup Iteration   2: 628259.757 ops/s
[info] # Warmup Iteration   3: 649178.534 ops/s
[info] Iteration   1: 651326.100 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 665886.650 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 665525.208 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 666437.214 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 665984.586 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc":
[info]   663031.951 ±(99.9%) 25228.803 ops/s [Average]
[info]   (min, avg, max) = (651326.100, 663031.951, 666437.214), stdev = 6551.840
[info]   CI (99.9%): [637803.148, 688260.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson
[info] # Run progress: 46.23% complete, ETA 00:34:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19040.585 ops/s
[info] # Warmup Iteration   2: 28309.898 ops/s
[info] # Warmup Iteration   3: 27948.953 ops/s
[info] Iteration   1: 27549.437 ops/s
[info]                  ·gc.alloc.rate:                   1661.193 MB/sec
[info]                  ·gc.alloc.rate.norm:              94912.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.135 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1628.460 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 93041.855 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 28006.897 ops/s
[info]                  ·gc.alloc.rate:                   1688.925 MB/sec
[info]                  ·gc.alloc.rate.norm:              94900.427 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.679 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1645.880 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 92481.775 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 28475.385 ops/s
[info]                  ·gc.alloc.rate:                   1717.389 MB/sec
[info]                  ·gc.alloc.rate.norm:              94896.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.753 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1661.519 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 91808.851 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 28403.201 ops/s
[info]                  ·gc.alloc.rate:                   1712.350 MB/sec
[info]                  ·gc.alloc.rate.norm:              94896.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.614 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1673.165 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 92724.431 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 27986.049 ops/s
[info]                  ·gc.alloc.rate:                   1687.942 MB/sec
[info]                  ·gc.alloc.rate.norm:              94896.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.854 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2020.726 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 113605.099 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson":
[info]   28084.194 ±(99.9%) 1436.100 ops/s [Average]
[info]   (min, avg, max) = (27549.437, 28084.194, 28475.385), stdev = 372.950
[info]   CI (99.9%): [26648.094, 29520.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1693.560 ±(99.9%) 86.566 MB/sec [Average]
[info]   (min, avg, max) = (1661.193, 1693.560, 1717.389), stdev = 22.481
[info]   CI (99.9%): [1606.994, 1780.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   94900.098 ±(99.9%) 26.694 B/op [Average]
[info]   (min, avg, max) = (94896.014, 94900.098, 94912.019), stdev = 6.932
[info]   CI (99.9%): [94873.404, 94926.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.100 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.100, 0.125), stdev = 0.017
[info]   CI (99.9%): [0.033, 0.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   5.607 ±(99.9%) 3.976 B/op [Average]
[info]   (min, avg, max) = (4.614, 5.607, 7.135), stdev = 1.032
[info]   CI (99.9%): [1.631, 9.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1725.950 ±(99.9%) 637.820 MB/sec [Average]
[info]   (min, avg, max) = (1628.460, 1725.950, 2020.726), stdev = 165.640
[info]   CI (99.9%): [1088.130, 2363.770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   96732.402 ±(99.9%) 36361.634 B/op [Average]
[info]   (min, avg, max) = (91808.851, 96732.402, 113605.099), stdev = 9443.001
[info]   CI (99.9%): [60370.769, 133094.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 7.000), stdev = 0.894
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce
[info] # Run progress: 46.58% complete, ETA 00:33:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5188.208 ops/s
[info] # Warmup Iteration   2: 7889.434 ops/s
[info] # Warmup Iteration   3: 8007.600 ops/s
[info] Iteration   1: 8040.581 ops/s
[info]                  ·gc.alloc.rate:                   1238.066 MB/sec
[info]                  ·gc.alloc.rate.norm:              242280.055 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.222 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1310.093 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 256375.072 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 7959.316 ops/s
[info]                  ·gc.alloc.rate:                   1225.254 MB/sec
[info]                  ·gc.alloc.rate.norm:              242280.051 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.348 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      985.498 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 194871.020 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 7964.959 ops/s
[info]                  ·gc.alloc.rate:                   1226.070 MB/sec
[info]                  ·gc.alloc.rate.norm:              242280.051 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20.565 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1321.431 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 261123.984 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 7891.654 ops/s
[info]                  ·gc.alloc.rate:                   1214.871 MB/sec
[info]                  ·gc.alloc.rate.norm:              242280.052 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16.606 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1329.630 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 265166.311 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 7996.206 ops/s
[info]                  ·gc.alloc.rate:                   1230.836 MB/sec
[info]                  ·gc.alloc.rate.norm:              242280.055 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1002.059 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 197247.136 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce":
[info]   7970.543 ±(99.9%) 210.421 ops/s [Average]
[info]   (min, avg, max) = (7891.654, 7970.543, 8040.581), stdev = 54.646
[info]   CI (99.9%): [7760.122, 8180.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1227.019 ±(99.9%) 32.685 MB/sec [Average]
[info]   (min, avg, max) = (1214.871, 1227.019, 1238.066), stdev = 8.488
[info]   CI (99.9%): [1194.335, 1259.704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   242280.053 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (242280.051, 242280.053, 242280.055), stdev = 0.002
[info]   CI (99.9%): [242280.045, 242280.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.104), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   12.348 ±(99.9%) 29.711 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 12.348, 20.565), stdev = 7.716
[info]   CI (99.9%): [≈ 0, 42.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1189.742 ±(99.9%) 689.726 MB/sec [Average]
[info]   (min, avg, max) = (985.498, 1189.742, 1329.630), stdev = 179.120
[info]   CI (99.9%): [500.016, 1879.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   234956.705 ±(99.9%) 137292.697 B/op [Average]
[info]   (min, avg, max) = (194871.020, 234956.705, 265166.311), stdev = 35654.477
[info]   CI (99.9%): [97664.008, 372249.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala
[info] # Run progress: 46.92% complete, ETA 00:33:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 93756.960 ops/s
[info] # Warmup Iteration   2: 100601.150 ops/s
[info] # Warmup Iteration   3: 98803.435 ops/s
[info] Iteration   1: 100913.827 ops/s
[info]                  ·gc.alloc.rate:                   977.430 MB/sec
[info]                  ·gc.alloc.rate.norm:              15248.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.649 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      989.283 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15432.916 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 99451.907 ops/s
[info]                  ·gc.alloc.rate:                   963.314 MB/sec
[info]                  ·gc.alloc.rate.norm:              15248.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.647 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.334 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10452.237 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 102651.925 ops/s
[info]                  ·gc.alloc.rate:                   994.324 MB/sec
[info]                  ·gc.alloc.rate.norm:              15248.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.277 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      992.352 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15217.772 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 102831.200 ops/s
[info]                  ·gc.alloc.rate:                   996.182 MB/sec
[info]                  ·gc.alloc.rate.norm:              15248.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.274 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      996.797 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15257.409 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 102963.071 ops/s
[info]                  ·gc.alloc.rate:                   997.509 MB/sec
[info]                  ·gc.alloc.rate.norm:              15248.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.591 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      999.538 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15279.026 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala":
[info]   101762.386 ±(99.9%) 5913.482 ops/s [Average]
[info]   (min, avg, max) = (99451.907, 101762.386, 102963.071), stdev = 1535.712
[info]   CI (99.9%): [95848.904, 107675.868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   985.752 ±(99.9%) 57.542 MB/sec [Average]
[info]   (min, avg, max) = (963.314, 985.752, 997.509), stdev = 14.943
[info]   CI (99.9%): [928.210, 1043.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   15248.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (15248.004, 15248.004, 15248.004), stdev = 0.001
[info]   CI (99.9%): [15248.004, 15248.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.104), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.288 ±(99.9%) 1.527 B/op [Average]
[info]   (min, avg, max) = (0.649, 1.288, 1.647), stdev = 0.397
[info]   CI (99.9%): [≈ 0, 2.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   927.661 ±(99.9%) 575.642 MB/sec [Average]
[info]   (min, avg, max) = (660.334, 927.661, 999.538), stdev = 149.492
[info]   CI (99.9%): [352.019, 1503.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   14327.872 ±(99.9%) 8348.513 B/op [Average]
[info]   (min, avg, max) = (10452.237, 14327.872, 15432.916), stdev = 2168.082
[info]   CI (99.9%): [5979.359, 22676.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 4.000), stdev = 0.837
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson
[info] # Run progress: 47.26% complete, ETA 00:33:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3501.840 ops/s
[info] # Warmup Iteration   2: 7444.943 ops/s
[info] # Warmup Iteration   3: 7667.655 ops/s
[info] Iteration   1: 7662.922 ops/s
[info]                  ·gc.alloc.rate:                   1383.427 MB/sec
[info]                  ·gc.alloc.rate.norm:              284216.057 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.275 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1319.773 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 271138.634 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 7675.773 ops/s
[info]                  ·gc.alloc.rate:                   1386.223 MB/sec
[info]                  ·gc.alloc.rate.norm:              284216.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.803 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1330.859 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 272864.659 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 7668.067 ops/s
[info]                  ·gc.alloc.rate:                   1384.598 MB/sec
[info]                  ·gc.alloc.rate.norm:              284216.057 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.272 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.011 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 274653.088 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 7637.998 ops/s
[info]                  ·gc.alloc.rate:                   1379.243 MB/sec
[info]                  ·gc.alloc.rate.norm:              284216.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.289 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.064 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 276966.802 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 7537.394 ops/s
[info]                  ·gc.alloc.rate:                   1360.947 MB/sec
[info]                  ·gc.alloc.rate.norm:              284216.054 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.331 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 281790.022 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson":
[info]   7636.431 ±(99.9%) 220.037 ops/s [Average]
[info]   (min, avg, max) = (7537.394, 7636.431, 7675.773), stdev = 57.143
[info]   CI (99.9%): [7416.394, 7856.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1378.888 ±(99.9%) 39.878 MB/sec [Average]
[info]   (min, avg, max) = (1360.947, 1378.888, 1386.223), stdev = 10.356
[info]   CI (99.9%): [1339.009, 1418.766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   284216.055 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (284216.053, 284216.055, 284216.057), stdev = 0.002
[info]   CI (99.9%): [284216.047, 284216.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.062), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   5.128 ±(99.9%) 17.996 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.128, 12.803), stdev = 4.674
[info]   CI (99.9%): [≈ 0, 23.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1336.407 ±(99.9%) 44.562 MB/sec [Average]
[info]   (min, avg, max) = (1319.773, 1336.407, 1349.331), stdev = 11.573
[info]   CI (99.9%): [1291.846, 1380.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   275482.641 ±(99.9%) 15923.027 B/op [Average]
[info]   (min, avg, max) = (271138.634, 275482.641, 281790.022), stdev = 4135.159
[info]   CI (99.9%): [259559.614, 291405.668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce
[info] # Run progress: 47.60% complete, ETA 00:33:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13354.343 ops/s
[info] # Warmup Iteration   2: 18487.171 ops/s
[info] # Warmup Iteration   3: 18652.202 ops/s
[info] Iteration   1: 18551.156 ops/s
[info]                  ·gc.alloc.rate:                   925.248 MB/sec
[info]                  ·gc.alloc.rate.norm:              78514.293 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.532 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      979.015 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 83076.788 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 18537.943 ops/s
[info]                  ·gc.alloc.rate:                   925.403 MB/sec
[info]                  ·gc.alloc.rate.norm:              78552.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14.139 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.930 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55423.358 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 18639.535 ops/s
[info]                  ·gc.alloc.rate:                   930.211 MB/sec
[info]                  ·gc.alloc.rate.norm:              78552.027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      982.094 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 82933.289 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 18567.880 ops/s
[info]                  ·gc.alloc.rate:                   926.713 MB/sec
[info]                  ·gc.alloc.rate.norm:              78530.119 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.822 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      987.079 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 83645.560 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 18633.488 ops/s
[info]                  ·gc.alloc.rate:                   929.602 MB/sec
[info]                  ·gc.alloc.rate.norm:              78528.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.517 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      991.444 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 83752.167 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce":
[info]   18586.000 ±(99.9%) 182.377 ops/s [Average]
[info]   (min, avg, max) = (18537.943, 18586.000, 18639.535), stdev = 47.363
[info]   CI (99.9%): [18403.623, 18768.378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   927.436 ±(99.9%) 8.996 MB/sec [Average]
[info]   (min, avg, max) = (925.248, 927.436, 930.211), stdev = 2.336
[info]   CI (99.9%): [918.439, 936.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   78535.297 ±(99.9%) 63.290 B/op [Average]
[info]   (min, avg, max) = (78514.293, 78535.297, 78552.027), stdev = 16.436
[info]   CI (99.9%): [78472.008, 78598.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.251 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.071, 0.167), stdev = 0.065
[info]   CI (99.9%): [≈ 0, 0.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   6.002 ±(99.9%) 21.306 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.002, 14.139), stdev = 5.533
[info]   CI (99.9%): [≈ 0, 27.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   918.512 ±(99.9%) 571.978 MB/sec [Average]
[info]   (min, avg, max) = (652.930, 918.512, 991.444), stdev = 148.541
[info]   CI (99.9%): [346.534, 1490.491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   77766.232 ±(99.9%) 48113.885 B/op [Average]
[info]   (min, avg, max) = (55423.358, 77766.232, 83752.167), stdev = 12495.023
[info]   CI (99.9%): [29652.347, 125880.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala
[info] # Run progress: 47.95% complete, ETA 00:32:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 443560.170 ops/s
[info] # Warmup Iteration   2: 495076.025 ops/s
[info] # Warmup Iteration   3: 487298.436 ops/s
[info] Iteration   1: 485905.035 ops/s
[info]                  ·gc.alloc.rate:                   1101.346 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.270 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      979.048 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3171.795 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 482070.241 ops/s
[info]                  ·gc.alloc.rate:                   1092.904 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.680 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1310.350 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4277.896 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 484066.180 ops/s
[info]                  ·gc.alloc.rate:                   1097.433 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.271 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      987.572 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3210.817 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 485377.846 ops/s
[info]                  ·gc.alloc.rate:                   1100.277 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.202 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      992.136 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3217.319 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 486363.862 ops/s
[info]                  ·gc.alloc.rate:                   1102.487 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.202 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1330.126 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4304.713 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala":
[info]   484756.633 ±(99.9%) 6664.325 ops/s [Average]
[info]   (min, avg, max) = (482070.241, 484756.633, 486363.862), stdev = 1730.704
[info]   CI (99.9%): [478092.308, 491420.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1098.889 ±(99.9%) 14.769 MB/sec [Average]
[info]   (min, avg, max) = (1092.904, 1098.889, 1102.487), stdev = 3.836
[info]   CI (99.9%): [1084.120, 1113.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3568.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3568.001, 3568.001, 3568.001), stdev = 0.001
[info]   CI (99.9%): [3568.001, 3568.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.100 ±(99.9%) 0.236 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.100, 0.208), stdev = 0.061
[info]   CI (99.9%): [≈ 0, 0.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.325 ±(99.9%) 0.775 B/op [Average]
[info]   (min, avg, max) = (0.202, 0.325, 0.680), stdev = 0.201
[info]   CI (99.9%): [≈ 0, 1.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1119.846 ±(99.9%) 705.152 MB/sec [Average]
[info]   (min, avg, max) = (979.048, 1119.846, 1330.126), stdev = 183.126
[info]   CI (99.9%): [414.695, 1824.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3636.508 ±(99.9%) 2302.968 B/op [Average]
[info]   (min, avg, max) = (3171.795, 3636.508, 4304.713), stdev = 598.073
[info]   CI (99.9%): [1333.540, 5939.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 48.29% complete, ETA 00:32:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 506719.233 ops/s
[info] # Warmup Iteration   2: 570898.808 ops/s
[info] # Warmup Iteration   3: 560798.263 ops/s
[info] Iteration   1: 561953.500 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 562174.648 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 562559.614 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 561926.692 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 563779.017 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   562478.694 ±(99.9%) 2964.225 ops/s [Average]
[info]   (min, avg, max) = (561926.692, 562478.694, 563779.017), stdev = 769.800
[info]   CI (99.9%): [559514.469, 565442.919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson
[info] # Run progress: 48.63% complete, ETA 00:32:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13439.933 ops/s
[info] # Warmup Iteration   2: 19294.573 ops/s
[info] # Warmup Iteration   3: 19639.389 ops/s
[info] Iteration   1: 19800.697 ops/s
[info]                  ·gc.alloc.rate:                   924.491 MB/sec
[info]                  ·gc.alloc.rate.norm:              73491.927 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.309 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      646.707 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51409.608 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 19735.691 ops/s
[info]                  ·gc.alloc.rate:                   909.563 MB/sec
[info]                  ·gc.alloc.rate.norm:              72552.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.640 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      970.326 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 77398.816 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 19519.352 ops/s
[info]                  ·gc.alloc.rate:                   900.963 MB/sec
[info]                  ·gc.alloc.rate.norm:              72659.835 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.678 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      974.672 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78604.260 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 19556.831 ops/s
[info]                  ·gc.alloc.rate:                   901.268 MB/sec
[info]                  ·gc.alloc.rate.norm:              72536.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.701 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      978.815 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78777.220 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 18943.948 ops/s
[info]                  ·gc.alloc.rate:                   872.999 MB/sec
[info]                  ·gc.alloc.rate.norm:              72536.023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.044 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54509.571 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson":
[info]   19511.304 ±(99.9%) 1303.158 ops/s [Average]
[info]   (min, avg, max) = (18943.948, 19511.304, 19800.697), stdev = 338.426
[info]   CI (99.9%): [18208.146, 20814.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   901.857 ±(99.9%) 72.184 MB/sec [Average]
[info]   (min, avg, max) = (872.999, 901.857, 924.491), stdev = 18.746
[info]   CI (99.9%): [829.673, 974.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   72755.166 ±(99.9%) 1598.388 B/op [Average]
[info]   (min, avg, max) = (72536.022, 72755.166, 73491.927), stdev = 415.096
[info]   CI (99.9%): [71156.778, 74353.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.083), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3.666 ±(99.9%) 11.484 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.666, 6.701), stdev = 2.982
[info]   CI (99.9%): [≈ 0, 15.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   845.313 ±(99.9%) 681.935 MB/sec [Average]
[info]   (min, avg, max) = (646.707, 845.313, 978.815), stdev = 177.096
[info]   CI (99.9%): [163.378, 1527.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   68139.895 ±(99.9%) 53566.577 B/op [Average]
[info]   (min, avg, max) = (51409.608, 68139.895, 78777.220), stdev = 13911.070
[info]   CI (99.9%): [14573.319, 121706.472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 4.000), stdev = 0.837
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce
[info] # Run progress: 48.97% complete, ETA 00:32:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9753.902 ops/s
[info] # Warmup Iteration   2: 13016.636 ops/s
[info] # Warmup Iteration   3: 13342.500 ops/s
[info] Iteration   1: 13435.431 ops/s
[info]                  ·gc.alloc.rate:                   1349.277 MB/sec
[info]                  ·gc.alloc.rate.norm:              158096.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17.068 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1310.504 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 153552.911 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 13610.493 ops/s
[info]                  ·gc.alloc.rate:                   1366.972 MB/sec
[info]                  ·gc.alloc.rate.norm:              158098.094 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1317.363 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 152360.488 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 13543.903 ops/s
[info]                  ·gc.alloc.rate:                   1360.760 MB/sec
[info]                  ·gc.alloc.rate.norm:              158112.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.419 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1325.642 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 154031.611 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 13671.423 ops/s
[info]                  ·gc.alloc.rate:                   1373.390 MB/sec
[info]                  ·gc.alloc.rate.norm:              158112.035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.189 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1668.224 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 192054.892 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 13589.145 ops/s
[info]                  ·gc.alloc.rate:                   1365.408 MB/sec
[info]                  ·gc.alloc.rate.norm:              158112.038 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.232 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.756 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 155373.165 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce":
[info]   13570.079 ±(99.9%) 339.440 ops/s [Average]
[info]   (min, avg, max) = (13435.431, 13570.079, 13671.423), stdev = 88.152
[info]   CI (99.9%): [13230.639, 13909.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1363.161 ±(99.9%) 34.588 MB/sec [Average]
[info]   (min, avg, max) = (1349.277, 1363.161, 1373.390), stdev = 8.982
[info]   CI (99.9%): [1328.574, 1397.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   158106.046 ±(99.9%) 31.699 B/op [Average]
[info]   (min, avg, max) = (158096.033, 158106.046, 158112.038), stdev = 8.232
[info]   CI (99.9%): [158074.347, 158137.745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.183 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.079, 0.146), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   9.189 ±(99.9%) 21.426 B/op [Average]
[info]   (min, avg, max) = (2.419, 9.189, 17.068), stdev = 5.564
[info]   CI (99.9%): [≈ 0, 30.615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1392.698 ±(99.9%) 594.788 MB/sec [Average]
[info]   (min, avg, max) = (1310.504, 1392.698, 1668.224), stdev = 154.465
[info]   CI (99.9%): [797.910, 1987.486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   161474.614 ±(99.9%) 65957.384 B/op [Average]
[info]   (min, avg, max) = (152360.488, 161474.614, 192054.892), stdev = 17128.923
[info]   CI (99.9%): [95517.230, 227431.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 0.707
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala
[info] # Run progress: 49.32% complete, ETA 00:32:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7756.379 ops/s
[info] # Warmup Iteration   2: 13654.453 ops/s
[info] # Warmup Iteration   3: 13587.363 ops/s
[info] Iteration   1: 14060.958 ops/s
[info]                  ·gc.alloc.rate:                   1286.653 MB/sec
[info]                  ·gc.alloc.rate.norm:              144056.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.990 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      989.292 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 110762.970 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 13600.806 ops/s
[info]                  ·gc.alloc.rate:                   1245.162 MB/sec
[info]                  ·gc.alloc.rate.norm:              144058.218 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.226 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1326.455 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 153463.306 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 13582.004 ops/s
[info]                  ·gc.alloc.rate:                   1243.437 MB/sec
[info]                  ·gc.alloc.rate.norm:              144089.089 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.236 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1335.510 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 154758.548 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 13967.402 ops/s
[info]                  ·gc.alloc.rate:                   1279.015 MB/sec
[info]                  ·gc.alloc.rate.norm:              144088.031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.728 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.204 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 151206.611 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 13383.741 ops/s
[info]                  ·gc.alloc.rate:                   1225.166 MB/sec
[info]                  ·gc.alloc.rate.norm:              144088.038 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.895 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1010.344 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 118823.470 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala":
[info]   13718.982 ±(99.9%) 1095.533 ops/s [Average]
[info]   (min, avg, max) = (13383.741, 13718.982, 14060.958), stdev = 284.506
[info]   CI (99.9%): [12623.449, 14814.515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1255.887 ±(99.9%) 99.954 MB/sec [Average]
[info]   (min, avg, max) = (1225.166, 1255.887, 1286.653), stdev = 25.958
[info]   CI (99.9%): [1155.932, 1355.841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   144075.881 ±(99.9%) 66.024 B/op [Average]
[info]   (min, avg, max) = (144056.029, 144075.881, 144089.089), stdev = 17.146
[info]   CI (99.9%): [144009.857, 144141.905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.104), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   7.615 ±(99.9%) 9.626 B/op [Average]
[info]   (min, avg, max) = (4.895, 7.615, 11.728), stdev = 2.500
[info]   CI (99.9%): [≈ 0, 17.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1200.761 ±(99.9%) 707.251 MB/sec [Average]
[info]   (min, avg, max) = (989.292, 1200.761, 1342.204), stdev = 183.671
[info]   CI (99.9%): [493.510, 1908.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   137802.981 ±(99.9%) 81770.180 B/op [Average]
[info]   (min, avg, max) = (110762.970, 137802.981, 154758.548), stdev = 21235.456
[info]   CI (99.9%): [56032.801, 219573.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 1.095
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala
[info] # Run progress: 49.66% complete, ETA 00:31:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 158538.781 ops/s
[info] # Warmup Iteration   2: 179595.229 ops/s
[info] # Warmup Iteration   3: 180030.619 ops/s
[info] Iteration   1: 180941.795 ops/s
[info]                  ·gc.alloc.rate:                   1046.356 MB/sec
[info]                  ·gc.alloc.rate.norm:              9104.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.724 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      989.271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8607.329 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 179190.354 ops/s
[info]                  ·gc.alloc.rate:                   1036.518 MB/sec
[info]                  ·gc.alloc.rate.norm:              9104.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.097 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      990.899 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8703.320 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 180618.127 ops/s
[info]                  ·gc.alloc.rate:                   1045.008 MB/sec
[info]                  ·gc.alloc.rate.norm:              9104.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.088 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1326.577 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11557.003 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 182784.659 ops/s
[info]                  ·gc.alloc.rate:                   1057.148 MB/sec
[info]                  ·gc.alloc.rate.norm:              9104.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.717 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      998.756 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8601.138 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 180709.425 ops/s
[info]                  ·gc.alloc.rate:                   1045.668 MB/sec
[info]                  ·gc.alloc.rate.norm:              9104.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.363 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1002.573 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8728.802 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala":
[info]   180848.872 ±(99.9%) 4938.470 ops/s [Average]
[info]   (min, avg, max) = (179190.354, 180848.872, 182784.659), stdev = 1282.505
[info]   CI (99.9%): [175910.402, 185787.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1046.140 ±(99.9%) 28.251 MB/sec [Average]
[info]   (min, avg, max) = (1036.518, 1046.140, 1057.148), stdev = 7.337
[info]   CI (99.9%): [1017.888, 1074.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   9104.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (9104.002, 9104.002, 9104.002), stdev = 0.001
[info]   CI (99.9%): [9104.002, 9104.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.092, 0.125), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.798 ±(99.9%) 1.179 B/op [Average]
[info]   (min, avg, max) = (0.363, 0.798, 1.097), stdev = 0.306
[info]   CI (99.9%): [≈ 0, 1.977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1061.615 ±(99.9%) 570.742 MB/sec [Average]
[info]   (min, avg, max) = (989.271, 1061.615, 1326.577), stdev = 148.220
[info]   CI (99.9%): [490.873, 1632.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   9239.518 ±(99.9%) 4993.332 B/op [Average]
[info]   (min, avg, max) = (8601.138, 9239.518, 11557.003), stdev = 1296.752
[info]   CI (99.9%): [4246.186, 14232.850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce
[info] # Run progress: 50.00% complete, ETA 00:31:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20855.639 ops/s
[info] # Warmup Iteration   2: 28452.025 ops/s
[info] # Warmup Iteration   3: 28835.631 ops/s
[info] Iteration   1: 28144.121 ops/s
[info]                  ·gc.alloc.rate:                   1048.384 MB/sec
[info]                  ·gc.alloc.rate.norm:              58640.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.328 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      978.995 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54758.845 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 27668.283 ops/s
[info]                  ·gc.alloc.rate:                   1030.225 MB/sec
[info]                  ·gc.alloc.rate.norm:              58617.363 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.552 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      980.963 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55814.420 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 28103.079 ops/s
[info]                  ·gc.alloc.rate:                   1047.036 MB/sec
[info]                  ·gc.alloc.rate.norm:              58616.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.663 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      985.894 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55193.119 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 28328.365 ops/s
[info]                  ·gc.alloc.rate:                   1054.928 MB/sec
[info]                  ·gc.alloc.rate.norm:              58616.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.157 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1321.511 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 73428.448 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 28813.870 ops/s
[info]                  ·gc.alloc.rate:                   1073.357 MB/sec
[info]                  ·gc.alloc.rate.norm:              58616.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.685 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      997.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54451.870 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce":
[info]   28211.544 ±(99.9%) 1596.842 ops/s [Average]
[info]   (min, avg, max) = (27668.283, 28211.544, 28813.870), stdev = 414.695
[info]   CI (99.9%): [26614.702, 29808.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1050.786 ±(99.9%) 59.938 MB/sec [Average]
[info]   (min, avg, max) = (1030.225, 1050.786, 1073.357), stdev = 15.566
[info]   CI (99.9%): [990.848, 1110.724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   58621.085 ±(99.9%) 40.817 B/op [Average]
[info]   (min, avg, max) = (58616.014, 58621.085, 58640.018), stdev = 10.600
[info]   CI (99.9%): [58580.268, 58661.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.104), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3.477 ±(99.9%) 6.940 B/op [Average]
[info]   (min, avg, max) = (1.157, 3.477, 5.685), stdev = 1.802
[info]   CI (99.9%): [≈ 0, 10.417] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1052.893 ±(99.9%) 578.853 MB/sec [Average]
[info]   (min, avg, max) = (978.995, 1052.893, 1321.511), stdev = 150.326
[info]   CI (99.9%): [474.040, 1631.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   58729.340 ±(99.9%) 31702.224 B/op [Average]
[info]   (min, avg, max) = (54451.870, 58729.340, 73428.448), stdev = 8232.967
[info]   CI (99.9%): [27027.117, 90431.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala
[info] # Run progress: 50.34% complete, ETA 00:31:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 671016.835 ops/s
[info] # Warmup Iteration   2: 754355.396 ops/s
[info] # Warmup Iteration   3: 747150.865 ops/s
[info] Iteration   1: 764700.809 ops/s
[info]                  ·gc.alloc.rate:                   1049.252 MB/sec
[info]                  ·gc.alloc.rate.norm:              2160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.171 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      979.034 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2015.448 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 762014.872 ops/s
[info]                  ·gc.alloc.rate:                   1045.603 MB/sec
[info]                  ·gc.alloc.rate.norm:              2160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.301 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1308.419 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2702.923 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 759299.274 ops/s
[info]                  ·gc.alloc.rate:                   1041.909 MB/sec
[info]                  ·gc.alloc.rate.norm:              2160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.173 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      985.427 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2042.908 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 764917.655 ops/s
[info]                  ·gc.alloc.rate:                   1049.608 MB/sec
[info]                  ·gc.alloc.rate.norm:              2160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.171 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      991.049 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2039.492 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 759900.682 ops/s
[info]                  ·gc.alloc.rate:                   1042.864 MB/sec
[info]                  ·gc.alloc.rate.norm:              2160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.172 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      995.126 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2061.125 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala":
[info]   762166.658 ±(99.9%) 10072.486 ops/s [Average]
[info]   (min, avg, max) = (759299.274, 762166.658, 764917.655), stdev = 2615.793
[info]   CI (99.9%): [752094.172, 772239.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1045.847 ±(99.9%) 13.643 MB/sec [Average]
[info]   (min, avg, max) = (1041.909, 1045.847, 1049.608), stdev = 3.543
[info]   CI (99.9%): [1032.204, 1059.490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2160.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2160.001, 2160.001, 2160.001), stdev = 0.001
[info]   CI (99.9%): [2160.000, 2160.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.096 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.096, 0.146), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.198 ±(99.9%) 0.222 B/op [Average]
[info]   (min, avg, max) = (0.171, 0.198, 0.301), stdev = 0.058
[info]   CI (99.9%): [≈ 0, 0.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1051.811 ±(99.9%) 552.859 MB/sec [Average]
[info]   (min, avg, max) = (979.034, 1051.811, 1308.419), stdev = 143.576
[info]   CI (99.9%): [498.952, 1604.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2172.379 ±(99.9%) 1143.751 B/op [Average]
[info]   (min, avg, max) = (2015.448, 2172.379, 2702.923), stdev = 297.028
[info]   CI (99.9%): [1028.629, 3316.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 50.68% complete, ETA 00:31:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 775383.587 ops/s
[info] # Warmup Iteration   2: 848644.550 ops/s
[info] # Warmup Iteration   3: 853461.098 ops/s
[info] Iteration   1: 852265.416 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 849736.095 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 851829.589 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 856083.210 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 824254.797 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   846833.821 ±(99.9%) 49396.672 ops/s [Average]
[info]   (min, avg, max) = (824254.797, 846833.821, 856083.210), stdev = 12828.159
[info]   CI (99.9%): [797437.150, 896230.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce
[info] # Run progress: 51.03% complete, ETA 00:30:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11498.302 ops/s
[info] # Warmup Iteration   2: 26472.549 ops/s
[info] # Warmup Iteration   3: 27770.941 ops/s
[info] Iteration   1: 28308.294 ops/s
[info]                  ·gc.alloc.rate:                   1020.892 MB/sec
[info]                  ·gc.alloc.rate.norm:              56752.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.157 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      981.365 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54554.692 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 27425.056 ops/s
[info]                  ·gc.alloc.rate:                   989.097 MB/sec
[info]                  ·gc.alloc.rate.norm:              56751.435 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.168 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      982.050 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 56347.103 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 27041.871 ops/s
[info]                  ·gc.alloc.rate:                   975.149 MB/sec
[info]                  ·gc.alloc.rate.norm:              56752.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.423 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      984.900 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57319.467 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 27930.790 ops/s
[info]                  ·gc.alloc.rate:                   1006.944 MB/sec
[info]                  ·gc.alloc.rate.norm:              56752.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.346 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      988.644 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55720.614 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 28185.776 ops/s
[info]                  ·gc.alloc.rate:                   1016.301 MB/sec
[info]                  ·gc.alloc.rate.norm:              56752.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.325 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      993.468 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55476.964 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce":
[info]   27778.357 ±(99.9%) 2053.239 ops/s [Average]
[info]   (min, avg, max) = (27041.871, 27778.357, 28308.294), stdev = 533.220
[info]   CI (99.9%): [25725.119, 29831.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate":
[info]   1001.677 ±(99.9%) 73.888 MB/sec [Average]
[info]   (min, avg, max) = (975.149, 1001.677, 1020.892), stdev = 19.189
[info]   CI (99.9%): [927.789, 1075.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   56751.899 ±(99.9%) 0.999 B/op [Average]
[info]   (min, avg, max) = (56751.435, 56751.899, 56752.016), stdev = 0.259
[info]   CI (99.9%): [56750.900, 56752.898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.054, 0.125), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3.084 ±(99.9%) 9.019 B/op [Average]
[info]   (min, avg, max) = (1.157, 3.084, 7.168), stdev = 2.342
[info]   CI (99.9%): [≈ 0, 12.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   986.086 ±(99.9%) 19.351 MB/sec [Average]
[info]   (min, avg, max) = (981.365, 986.086, 993.468), stdev = 5.025
[info]   CI (99.9%): [966.735, 1005.436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   55883.768 ±(99.9%) 3961.890 B/op [Average]
[info]   (min, avg, max) = (54554.692, 55883.768, 57319.467), stdev = 1028.890
[info]   CI (99.9%): [51921.878, 59845.658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 4.000), stdev = 0.837
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala
[info] # Run progress: 51.37% complete, ETA 00:30:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7333.069 ops/s
[info] # Warmup Iteration   2: 27137.343 ops/s
[info] # Warmup Iteration   3: 26917.562 ops/s
[info] Iteration   1: 27214.429 ops/s
[info]                  ·gc.alloc.rate:                   745.925 MB/sec
[info]                  ·gc.alloc.rate.norm:              43144.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.408 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      649.725 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37579.848 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 27996.715 ops/s
[info]                  ·gc.alloc.rate:                   767.356 MB/sec
[info]                  ·gc.alloc.rate.norm:              43144.994 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.374 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36736.297 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 28092.330 ops/s
[info]                  ·gc.alloc.rate:                   770.171 MB/sec
[info]                  ·gc.alloc.rate.norm:              43144.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.499 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      986.349 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55254.014 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 28079.784 ops/s
[info]                  ·gc.alloc.rate:                   769.672 MB/sec
[info]                  ·gc.alloc.rate.norm:              43144.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      661.417 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37075.772 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 27501.058 ops/s
[info]                  ·gc.alloc.rate:                   753.945 MB/sec
[info]                  ·gc.alloc.rate.norm:              43144.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.574 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      663.515 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37969.232 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala":
[info]   27776.863 ±(99.9%) 1530.620 ops/s [Average]
[info]   (min, avg, max) = (27214.429, 27776.863, 28092.330), stdev = 397.497
[info]   CI (99.9%): [26246.243, 29307.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   761.414 ±(99.9%) 42.001 MB/sec [Average]
[info]   (min, avg, max) = (745.925, 761.414, 770.171), stdev = 10.908
[info]   CI (99.9%): [719.413, 803.415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   43144.211 ±(99.9%) 1.685 B/op [Average]
[info]   (min, avg, max) = (43144.015, 43144.211, 43144.994), stdev = 0.438
[info]   CI (99.9%): [43142.526, 43145.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.062), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.896 ±(99.9%) 6.898 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.896, 3.574), stdev = 1.791
[info]   CI (99.9%): [≈ 0, 8.794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   722.876 ±(99.9%) 567.563 MB/sec [Average]
[info]   (min, avg, max) = (649.725, 722.876, 986.349), stdev = 147.394
[info]   CI (99.9%): [155.313, 1290.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   40923.033 ±(99.9%) 30901.808 B/op [Average]
[info]   (min, avg, max) = (36736.297, 40923.033, 55254.014), stdev = 8025.101
[info]   CI (99.9%): [10021.225, 71824.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 4.000), stdev = 0.894
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala
[info] # Run progress: 51.71% complete, ETA 00:30:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 185497.897 ops/s
[info] # Warmup Iteration   2: 201726.597 ops/s
[info] # Warmup Iteration   3: 196044.557 ops/s
[info] Iteration   1: 196191.040 ops/s
[info]                  ·gc.alloc.rate:                   510.509 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.612 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20.955 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      331.345 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2658.499 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 195280.379 ops/s
[info]                  ·gc.alloc.rate:                   508.123 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.839 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      661.676 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5333.799 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 200125.584 ops/s
[info]                  ·gc.alloc.rate:                   520.723 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.164 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.339 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2598.442 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 204498.448 ops/s
[info]                  ·gc.alloc.rate:                   532.194 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.481 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      659.459 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5075.491 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 204930.708 ops/s
[info]                  ·gc.alloc.rate:                   533.275 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.639 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.075 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5069.934 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala":
[info]   200205.232 ±(99.9%) 17342.448 ops/s [Average]
[info]   (min, avg, max) = (195280.379, 200205.232, 204930.708), stdev = 4503.779
[info]   CI (99.9%): [182862.783, 217547.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   520.965 ±(99.9%) 45.232 MB/sec [Average]
[info]   (min, avg, max) = (508.123, 520.965, 533.275), stdev = 11.747
[info]   CI (99.9%): [475.733, 566.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.002, 4096.002, 4096.002), stdev = 0.001
[info]   CI (99.9%): [4096.002, 4096.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.576 ±(99.9%) 4.383 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.576, 2.612), stdev = 1.138
[info]   CI (99.9%): [≈ 0, 4.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4.616 ±(99.9%) 35.185 B/op [Average]
[info]   (min, avg, max) = (0.164, 4.616, 20.955), stdev = 9.137
[info]   CI (99.9%): [≈ 0, 39.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   528.579 ±(99.9%) 695.082 MB/sec [Average]
[info]   (min, avg, max) = (330.339, 528.579, 661.676), stdev = 180.511
[info]   CI (99.9%): [≈ 0, 1223.661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4147.233 ±(99.9%) 5355.048 B/op [Average]
[info]   (min, avg, max) = (2598.442, 4147.233, 5333.799), stdev = 1390.689
[info]   CI (99.9%): [≈ 0, 9502.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson
[info] # Run progress: 52.05% complete, ETA 00:30:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5278.448 ops/s
[info] # Warmup Iteration   2: 21933.359 ops/s
[info] # Warmup Iteration   3: 22654.692 ops/s
[info] Iteration   1: 22614.857 ops/s
[info]                  ·gc.alloc.rate:                   1415.178 MB/sec
[info]                  ·gc.alloc.rate.norm:              98480.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.795 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1635.131 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 113786.188 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 22323.315 ops/s
[info]                  ·gc.alloc.rate:                   1397.129 MB/sec
[info]                  ·gc.alloc.rate.norm:              98480.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.338 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1320.570 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 93083.604 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 22185.088 ops/s
[info]                  ·gc.alloc.rate:                   1388.315 MB/sec
[info]                  ·gc.alloc.rate.norm:              98480.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.477 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1331.060 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 94418.624 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 22745.897 ops/s
[info]                  ·gc.alloc.rate:                   1423.612 MB/sec
[info]                  ·gc.alloc.rate.norm:              98480.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.761 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.180 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 92639.346 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 22513.010 ops/s
[info]                  ·gc.alloc.rate:                   1408.934 MB/sec
[info]                  ·gc.alloc.rate.norm:              98480.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.732 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1682.927 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 117631.255 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson":
[info]   22476.434 ±(99.9%) 864.118 ops/s [Average]
[info]   (min, avg, max) = (22185.088, 22476.434, 22745.897), stdev = 224.409
[info]   CI (99.9%): [21612.316, 23340.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1406.634 ±(99.9%) 54.199 MB/sec [Average]
[info]   (min, avg, max) = (1388.315, 1406.634, 1423.612), stdev = 14.075
[info]   CI (99.9%): [1352.434, 1460.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   98480.020 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (98480.018, 98480.020, 98480.023), stdev = 0.002
[info]   CI (99.9%): [98480.012, 98480.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.083, 0.125), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   5.820 ±(99.9%) 10.484 B/op [Average]
[info]   (min, avg, max) = (1.477, 5.820, 8.732), stdev = 2.723
[info]   CI (99.9%): [≈ 0, 16.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1461.774 ±(99.9%) 696.890 MB/sec [Average]
[info]   (min, avg, max) = (1320.570, 1461.774, 1682.927), stdev = 180.980
[info]   CI (99.9%): [764.884, 2158.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   102311.804 ±(99.9%) 47449.148 B/op [Average]
[info]   (min, avg, max) = (92639.346, 102311.804, 117631.255), stdev = 12322.393
[info]   CI (99.9%): [54862.655, 149760.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 6.000), stdev = 1.140
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce
[info] # Run progress: 52.40% complete, ETA 00:30:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 63481.844 ops/s
[info] # Warmup Iteration   2: 81424.506 ops/s
[info] # Warmup Iteration   3: 83761.763 ops/s
[info] Iteration   1: 83392.260 ops/s
[info]                  ·gc.alloc.rate:                   1286.566 MB/sec
[info]                  ·gc.alloc.rate.norm:              24280.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.786 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1307.725 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24679.328 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 83858.961 ops/s
[info]                  ·gc.alloc.rate:                   1293.570 MB/sec
[info]                  ·gc.alloc.rate.norm:              24280.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.735 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1314.835 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24679.142 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 83846.363 ops/s
[info]                  ·gc.alloc.rate:                   1293.336 MB/sec
[info]                  ·gc.alloc.rate.norm:              24280.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.344 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1323.428 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24844.928 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 83868.935 ops/s
[info]                  ·gc.alloc.rate:                   1293.875 MB/sec
[info]                  ·gc.alloc.rate.norm:              24280.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.563 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      998.886 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18744.438 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 81645.800 ops/s
[info]                  ·gc.alloc.rate:                   1259.486 MB/sec
[info]                  ·gc.alloc.rate.norm:              24280.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.605 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1337.215 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25778.446 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce":
[info]   83322.464 ±(99.9%) 3691.905 ops/s [Average]
[info]   (min, avg, max) = (81645.800, 83322.464, 83868.935), stdev = 958.776
[info]   CI (99.9%): [79630.559, 87014.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1285.367 ±(99.9%) 56.933 MB/sec [Average]
[info]   (min, avg, max) = (1259.486, 1285.367, 1293.875), stdev = 14.785
[info]   CI (99.9%): [1228.433, 1342.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   24280.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (24280.005, 24280.005, 24280.005), stdev = 0.001
[info]   CI (99.9%): [24280.004, 24280.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.096 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.096, 0.146), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1.807 ±(99.9%) 2.916 B/op [Average]
[info]   (min, avg, max) = (0.786, 1.807, 2.735), stdev = 0.757
[info]   CI (99.9%): [≈ 0, 4.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1256.418 ±(99.9%) 555.968 MB/sec [Average]
[info]   (min, avg, max) = (998.886, 1256.418, 1337.215), stdev = 144.383
[info]   CI (99.9%): [700.450, 1812.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   23745.256 ±(99.9%) 10907.582 B/op [Average]
[info]   (min, avg, max) = (18744.438, 23745.256, 25778.446), stdev = 2832.664
[info]   CI (99.9%): [12837.674, 34652.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala
[info] # Run progress: 52.74% complete, ETA 00:29:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 91050.204 ops/s
[info] # Warmup Iteration   2: 137592.579 ops/s
[info] # Warmup Iteration   3: 142498.889 ops/s
[info] Iteration   1: 141830.035 ops/s
[info]                  ·gc.alloc.rate:                   1199.999 MB/sec
[info]                  ·gc.alloc.rate.norm:              13320.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.462 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1304.622 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14481.317 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 139864.537 ops/s
[info]                  ·gc.alloc.rate:                   1183.679 MB/sec
[info]                  ·gc.alloc.rate.norm:              13320.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.405 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1317.594 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14826.954 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 134341.928 ops/s
[info]                  ·gc.alloc.rate:                   1136.753 MB/sec
[info]                  ·gc.alloc.rate.norm:              13320.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.732 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      994.711 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11655.614 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 141640.081 ops/s
[info]                  ·gc.alloc.rate:                   1198.552 MB/sec
[info]                  ·gc.alloc.rate.norm:              13320.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.694 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1334.112 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14826.538 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 139441.164 ops/s
[info]                  ·gc.alloc.rate:                   1179.875 MB/sec
[info]                  ·gc.alloc.rate.norm:              13320.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.175 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1005.664 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11353.270 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala":
[info]   139423.549 ±(99.9%) 11667.172 ops/s [Average]
[info]   (min, avg, max) = (134341.928, 139423.549, 141830.035), stdev = 3029.928
[info]   CI (99.9%): [127756.377, 151090.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1179.772 ±(99.9%) 98.696 MB/sec [Average]
[info]   (min, avg, max) = (1136.753, 1179.772, 1199.999), stdev = 25.631
[info]   CI (99.9%): [1081.076, 1278.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   13320.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (13320.003, 13320.003, 13320.003), stdev = 0.001
[info]   CI (99.9%): [13320.003, 13320.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.125), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.894 ±(99.9%) 1.483 B/op [Average]
[info]   (min, avg, max) = (0.462, 0.894, 1.405), stdev = 0.385
[info]   CI (99.9%): [≈ 0, 2.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1191.340 ±(99.9%) 673.300 MB/sec [Average]
[info]   (min, avg, max) = (994.711, 1191.340, 1334.112), stdev = 174.854
[info]   CI (99.9%): [518.040, 1864.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   13428.739 ±(99.9%) 6798.408 B/op [Average]
[info]   (min, avg, max) = (11353.270, 13428.739, 14826.954), stdev = 1765.525
[info]   CI (99.9%): [6630.331, 20227.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 0.837
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala
[info] # Run progress: 53.08% complete, ETA 00:29:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 410823.104 ops/s
[info] # Warmup Iteration   2: 457116.395 ops/s
[info] # Warmup Iteration   3: 420998.446 ops/s
[info] Iteration   1: 415482.028 ops/s
[info]                  ·gc.alloc.rate:                   460.346 MB/sec
[info]                  ·gc.alloc.rate.norm:              1744.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.727 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14.119 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      584.463 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2214.214 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 410695.511 ops/s
[info]                  ·gc.alloc.rate:                   454.953 MB/sec
[info]                  ·gc.alloc.rate.norm:              1744.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.080 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.640 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1259.795 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 409624.189 ops/s
[info]                  ·gc.alloc.rate:                   453.838 MB/sec
[info]                  ·gc.alloc.rate.norm:              1744.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.080 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.054 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2513.386 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 420311.448 ops/s
[info]                  ·gc.alloc.rate:                   465.777 MB/sec
[info]                  ·gc.alloc.rate.norm:              1744.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.156 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      326.431 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1222.247 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 410465.223 ops/s
[info]                  ·gc.alloc.rate:                   454.973 MB/sec
[info]                  ·gc.alloc.rate.norm:              1744.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      326.506 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1251.561 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala":
[info]   413315.680 ±(99.9%) 17461.230 ops/s [Average]
[info]   (min, avg, max) = (409624.189, 413315.680, 420311.448), stdev = 4534.626
[info]   CI (99.9%): [395854.450, 430776.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   457.978 ±(99.9%) 19.421 MB/sec [Average]
[info]   (min, avg, max) = (453.838, 457.978, 465.777), stdev = 5.044
[info]   CI (99.9%): [438.556, 477.399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1744.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1744.001, 1744.001, 1744.001), stdev = 0.001
[info]   CI (99.9%): [1744.001, 1744.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.762 ±(99.9%) 6.382 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.762, 3.727), stdev = 1.657
[info]   CI (99.9%): [≈ 0, 7.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2.887 ±(99.9%) 24.179 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.887, 14.119), stdev = 6.279
[info]   CI (99.9%): [≈ 0, 27.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   444.019 ±(99.9%) 623.246 MB/sec [Average]
[info]   (min, avg, max) = (326.431, 444.019, 654.054), stdev = 161.855
[info]   CI (99.9%): [≈ 0, 1067.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1692.241 ±(99.9%) 2396.107 B/op [Average]
[info]   (min, avg, max) = (1222.247, 1692.241, 2513.386), stdev = 622.261
[info]   CI (99.9%): [≈ 0, 4088.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 6.000), stdev = 2.168
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 53.42% complete, ETA 00:29:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 481158.863 ops/s
[info] # Warmup Iteration   2: 530647.227 ops/s
[info] # Warmup Iteration   3: 536545.117 ops/s
[info] Iteration   1: 475665.370 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 535312.989 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 535339.373 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 529501.284 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 535587.658 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc":
[info]   522281.335 ±(99.9%) 100828.257 ops/s [Average]
[info]   (min, avg, max) = (475665.370, 522281.335, 535587.658), stdev = 26184.778
[info]   CI (99.9%): [421453.078, 623109.592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson
[info] # Run progress: 53.77% complete, ETA 00:29:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 77436.237 ops/s
[info] # Warmup Iteration   2: 106919.698 ops/s
[info] # Warmup Iteration   3: 106308.808 ops/s
[info] Iteration   1: 104385.270 ops/s
[info]                  ·gc.alloc.rate:                   1273.311 MB/sec
[info]                  ·gc.alloc.rate.norm:              19200.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.255 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1296.161 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19544.547 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 107463.551 ops/s
[info]                  ·gc.alloc.rate:                   1311.282 MB/sec
[info]                  ·gc.alloc.rate.norm:              19200.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.439 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1304.619 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19102.446 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 107445.884 ops/s
[info]                  ·gc.alloc.rate:                   1310.576 MB/sec
[info]                  ·gc.alloc.rate.norm:              19200.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.305 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1314.792 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19261.770 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 106231.489 ops/s
[info]                  ·gc.alloc.rate:                   1295.935 MB/sec
[info]                  ·gc.alloc.rate.norm:              19200.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.159 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1325.618 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19639.766 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 108974.470 ops/s
[info]                  ·gc.alloc.rate:                   1329.262 MB/sec
[info]                  ·gc.alloc.rate.norm:              19200.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.105 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1334.147 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19270.554 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson":
[info]   106900.133 ±(99.9%) 6582.738 ops/s [Average]
[info]   (min, avg, max) = (104385.270, 106900.133, 108974.470), stdev = 1709.516
[info]   CI (99.9%): [100317.395, 113482.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1304.073 ±(99.9%) 80.341 MB/sec [Average]
[info]   (min, avg, max) = (1273.311, 1304.073, 1329.262), stdev = 20.864
[info]   CI (99.9%): [1223.733, 1384.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   19200.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (19200.004, 19200.004, 19200.004), stdev = 0.001
[info]   CI (99.9%): [19200.003, 19200.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.112 ±(99.9%) 0.231 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.112, 0.167), stdev = 0.060
[info]   CI (99.9%): [≈ 0, 0.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.653 ±(99.9%) 3.364 B/op [Average]
[info]   (min, avg, max) = (0.305, 1.653, 2.439), stdev = 0.874
[info]   CI (99.9%): [≈ 0, 5.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1315.067 ±(99.9%) 59.093 MB/sec [Average]
[info]   (min, avg, max) = (1296.161, 1315.067, 1334.147), stdev = 15.346
[info]   CI (99.9%): [1255.974, 1374.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   19363.817 ±(99.9%) 852.893 B/op [Average]
[info]   (min, avg, max) = (19102.446, 19363.817, 19639.766), stdev = 221.494
[info]   CI (99.9%): [18510.924, 20216.710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce
[info] # Run progress: 54.11% complete, ETA 00:29:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 124275.482 ops/s
[info] # Warmup Iteration   2: 157437.818 ops/s
[info] # Warmup Iteration   3: 158776.089 ops/s
[info] Iteration   1: 158240.325 ops/s
[info]                  ·gc.alloc.rate:                   2663.749 MB/sec
[info]                  ·gc.alloc.rate.norm:              26496.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.449 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2671.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26568.201 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 157480.109 ops/s
[info]                  ·gc.alloc.rate:                   2651.313 MB/sec
[info]                  ·gc.alloc.rate.norm:              26496.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.081 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2356.991 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23554.679 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 156974.444 ops/s
[info]                  ·gc.alloc.rate:                   2642.242 MB/sec
[info]                  ·gc.alloc.rate.norm:              26496.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.044 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2706.841 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27143.794 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   4: 155408.151 ops/s
[info]                  ·gc.alloc.rate:                   2616.139 MB/sec
[info]                  ·gc.alloc.rate.norm:              26496.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.265 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2715.149 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27498.766 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 157439.832 ops/s
[info]                  ·gc.alloc.rate:                   2650.138 MB/sec
[info]                  ·gc.alloc.rate.norm:              26496.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.457 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2718.271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27177.189 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce":
[info]   157108.572 ±(99.9%) 4056.019 ops/s [Average]
[info]   (min, avg, max) = (155408.151, 157108.572, 158240.325), stdev = 1053.335
[info]   CI (99.9%): [153052.553, 161164.591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate":
[info]   2644.716 ±(99.9%) 68.287 MB/sec [Average]
[info]   (min, avg, max) = (2616.139, 2644.716, 2663.749), stdev = 17.734
[info]   CI (99.9%): [2576.429, 2713.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   26496.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (26496.003, 26496.003, 26496.003), stdev = 0.001
[info]   CI (99.9%): [26496.002, 26496.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.146 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (0.104, 0.146, 0.208), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1.459 ±(99.9%) 1.487 B/op [Average]
[info]   (min, avg, max) = (1.044, 1.459, 2.081), stdev = 0.386
[info]   CI (99.9%): [≈ 0, 2.946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2633.652 ±(99.9%) 599.934 MB/sec [Average]
[info]   (min, avg, max) = (2356.991, 2633.652, 2718.271), stdev = 155.801
[info]   CI (99.9%): [2033.718, 3233.586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   26388.526 ±(99.9%) 6235.198 B/op [Average]
[info]   (min, avg, max) = (23554.679, 26388.526, 27498.766), stdev = 1619.261
[info]   CI (99.9%): [20153.328, 32623.724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.count":
[info]   39.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.800, 8.000), stdev = 0.447
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 8.400, 15.000), stdev = 3.715
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala
[info] # Run progress: 54.45% complete, ETA 00:28:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 234700.902 ops/s
[info] # Warmup Iteration   2: 372999.077 ops/s
[info] # Warmup Iteration   3: 373108.959 ops/s
[info] Iteration   1: 372995.087 ops/s
[info]                  ·gc.alloc.rate:                   380.987 MB/sec
[info]                  ·gc.alloc.rate.norm:              1608.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.730 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1079.340 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 373798.548 ops/s
[info]                  ·gc.alloc.rate:                   381.843 MB/sec
[info]                  ·gc.alloc.rate.norm:              1608.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.263 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      323.685 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1363.091 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 377252.592 ops/s
[info]                  ·gc.alloc.rate:                   385.360 MB/sec
[info]                  ·gc.alloc.rate.norm:              1608.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.087 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      323.682 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1350.635 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 376175.738 ops/s
[info]                  ·gc.alloc.rate:                   384.288 MB/sec
[info]                  ·gc.alloc.rate.norm:              1608.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.174 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      651.410 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2725.739 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 375007.304 ops/s
[info]                  ·gc.alloc.rate:                   383.295 MB/sec
[info]                  ·gc.alloc.rate.norm:              1608.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.548 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1374.132 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala":
[info]   375045.854 ±(99.9%) 6644.241 ops/s [Average]
[info]   (min, avg, max) = (372995.087, 375045.854, 377252.592), stdev = 1725.488
[info]   CI (99.9%): [368401.613, 381690.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   383.154 ±(99.9%) 6.830 MB/sec [Average]
[info]   (min, avg, max) = (380.987, 383.154, 385.360), stdev = 1.774
[info]   CI (99.9%): [376.324, 389.985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1608.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1608.001, 1608.001, 1608.001), stdev = 0.001
[info]   CI (99.9%): [1608.001, 1608.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.105 ±(99.9%) 0.440 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.105, 0.263), stdev = 0.114
[info]   CI (99.9%): [≈ 0, 0.544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   376.411 ±(99.9%) 603.139 MB/sec [Average]
[info]   (min, avg, max) = (255.730, 376.411, 651.410), stdev = 156.633
[info]   CI (99.9%): [≈ 0, 979.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1578.587 ±(99.9%) 2514.302 B/op [Average]
[info]   (min, avg, max) = (1079.340, 1578.587, 2725.739), stdev = 652.956
[info]   CI (99.9%): [≈ 0, 4092.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 3.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala
[info] # Run progress: 54.79% complete, ETA 00:28:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 839334.188 ops/s
[info] # Warmup Iteration   2: 923417.073 ops/s
[info] # Warmup Iteration   3: 933401.903 ops/s
[info] Iteration   1: 902107.327 ops/s
[info]                  ·gc.alloc.rate:                   311.805 MB/sec
[info]                  ·gc.alloc.rate.norm:              544.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.579 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 892.543 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 933040.589 ops/s
[info]                  ·gc.alloc.rate:                   322.432 MB/sec
[info]                  ·gc.alloc.rate.norm:              544.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.742 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 431.482 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 932161.427 ops/s
[info]                  ·gc.alloc.rate:                   322.308 MB/sec
[info]                  ·gc.alloc.rate.norm:              544.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.264 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.509 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.855 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 556.737 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 933022.485 ops/s
[info]                  ·gc.alloc.rate:                   322.456 MB/sec
[info]                  ·gc.alloc.rate.norm:              544.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.105 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.701 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 556.222 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 933729.841 ops/s
[info]                  ·gc.alloc.rate:                   322.792 MB/sec
[info]                  ·gc.alloc.rate.norm:              544.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.463 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 553.556 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala":
[info]   926812.334 ±(99.9%) 53222.503 ops/s [Average]
[info]   (min, avg, max) = (902107.327, 926812.334, 933729.841), stdev = 13821.715
[info]   CI (99.9%): [873589.831, 980034.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   320.359 ±(99.9%) 18.426 MB/sec [Average]
[info]   (min, avg, max) = (311.805, 320.359, 322.792), stdev = 4.785
[info]   CI (99.9%): [301.933, 338.785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   544.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (544.000, 544.000, 544.000), stdev = 0.001
[info]   CI (99.9%): [544.000, 544.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.665 ±(99.9%) 5.595 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.665, 3.264), stdev = 1.453
[info]   CI (99.9%): [≈ 0, 6.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.123 ±(99.9%) 9.444 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.123, 5.509), stdev = 2.452
[info]   CI (99.9%): [≈ 0, 10.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   351.068 ±(99.9%) 366.663 MB/sec [Average]
[info]   (min, avg, max) = (255.742, 351.068, 511.579), stdev = 95.221
[info]   CI (99.9%): [≈ 0, 717.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   598.108 ±(99.9%) 666.692 B/op [Average]
[info]   (min, avg, max) = (431.482, 598.108, 892.543), stdev = 173.138
[info]   CI (99.9%): [≈ 0, 1264.800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 4.000), stdev = 1.304
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson
[info] # Run progress: 55.14% complete, ETA 00:28:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 43324.361 ops/s
[info] # Warmup Iteration   2: 76599.752 ops/s
[info] # Warmup Iteration   3: 75747.139 ops/s
[info] Iteration   1: 75257.814 ops/s
[info]                  ·gc.alloc.rate:                   3228.652 MB/sec
[info]                  ·gc.alloc.rate.norm:              67512.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.047 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3367.414 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70413.543 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 75428.444 ops/s
[info]                  ·gc.alloc.rate:                   3237.534 MB/sec
[info]                  ·gc.alloc.rate.norm:              67512.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.904 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3386.844 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70625.551 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 75745.694 ops/s
[info]                  ·gc.alloc.rate:                   3248.680 MB/sec
[info]                  ·gc.alloc.rate.norm:              67512.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3057.103 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63530.767 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 76263.626 ops/s
[info]                  ·gc.alloc.rate:                   3271.334 MB/sec
[info]                  ·gc.alloc.rate.norm:              67512.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.437 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3401.946 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70207.507 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   5: 77471.218 ops/s
[info]                  ·gc.alloc.rate:                   3322.828 MB/sec
[info]                  ·gc.alloc.rate.norm:              67512.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.806 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3063.299 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62238.985 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson":
[info]   76033.359 ±(99.9%) 3428.265 ops/s [Average]
[info]   (min, avg, max) = (75257.814, 76033.359, 77471.218), stdev = 890.309
[info]   CI (99.9%): [72605.094, 79461.624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3261.806 ±(99.9%) 145.041 MB/sec [Average]
[info]   (min, avg, max) = (3228.652, 3261.806, 3322.828), stdev = 37.667
[info]   CI (99.9%): [3116.765, 3406.846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   67512.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (67512.005, 67512.006, 67512.006), stdev = 0.001
[info]   CI (99.9%): [67512.005, 67512.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.167 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (0.146, 0.167, 0.187), stdev = 0.021
[info]   CI (99.9%): [0.086, 0.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3.445 ±(99.9%) 1.580 B/op [Average]
[info]   (min, avg, max) = (3.028, 3.445, 3.904), stdev = 0.410
[info]   CI (99.9%): [1.864, 5.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   3255.321 ±(99.9%) 687.545 MB/sec [Average]
[info]   (min, avg, max) = (3057.103, 3255.321, 3401.946), stdev = 178.553
[info]   CI (99.9%): [2567.776, 3942.866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   67403.271 ±(99.9%) 15989.994 B/op [Average]
[info]   (min, avg, max) = (62238.985, 67403.271, 70625.551), stdev = 4152.551
[info]   CI (99.9%): [51413.276, 83393.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.count":
[info]   48.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.600, 10.000), stdev = 0.548
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.time":
[info]   49.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 9.800, 11.000), stdev = 1.304
[info]   CI (99.9%): [49.000, 49.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce
[info] # Run progress: 55.48% complete, ETA 00:28:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 188608.788 ops/s
[info] # Warmup Iteration   2: 245604.255 ops/s
[info] # Warmup Iteration   3: 252311.061 ops/s
[info] Iteration   1: 251882.821 ops/s
[info]                  ·gc.alloc.rate:                   1715.907 MB/sec
[info]                  ·gc.alloc.rate.norm:              10720.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.520 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1969.415 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12303.771 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 252359.417 ops/s
[info]                  ·gc.alloc.rate:                   1718.559 MB/sec
[info]                  ·gc.alloc.rate.norm:              10720.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1655.378 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10325.897 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 251579.823 ops/s
[info]                  ·gc.alloc.rate:                   1713.921 MB/sec
[info]                  ·gc.alloc.rate.norm:              10720.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.260 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1669.308 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10440.962 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 253349.185 ops/s
[info]                  ·gc.alloc.rate:                   1725.491 MB/sec
[info]                  ·gc.alloc.rate.norm:              10720.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.517 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1678.909 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10430.596 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 252479.539 ops/s
[info]                  ·gc.alloc.rate:                   1719.750 MB/sec
[info]                  ·gc.alloc.rate.norm:              10720.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.779 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1686.742 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10514.246 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce":
[info]   252330.157 ±(99.9%) 2600.753 ops/s [Average]
[info]   (min, avg, max) = (251579.823, 252330.157, 253349.185), stdev = 675.407
[info]   CI (99.9%): [249729.404, 254930.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1718.726 ±(99.9%) 16.991 MB/sec [Average]
[info]   (min, avg, max) = (1713.921, 1718.726, 1725.491), stdev = 4.413
[info]   CI (99.9%): [1701.734, 1735.717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   10720.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10720.002, 10720.002, 10720.002), stdev = 0.001
[info]   CI (99.9%): [10720.001, 10720.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.100 ±(99.9%) 0.183 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.100, 0.167), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.623 ±(99.9%) 1.139 B/op [Average]
[info]   (min, avg, max) = (0.260, 0.623, 1.039), stdev = 0.296
[info]   CI (99.9%): [≈ 0, 1.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1731.950 ±(99.9%) 513.141 MB/sec [Average]
[info]   (min, avg, max) = (1655.378, 1731.950, 1969.415), stdev = 133.261
[info]   CI (99.9%): [1218.810, 2245.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   10803.095 ±(99.9%) 3240.653 B/op [Average]
[info]   (min, avg, max) = (10325.897, 10803.095, 12303.771), stdev = 841.587
[info]   CI (99.9%): [7562.442, 14043.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala
[info] # Run progress: 55.82% complete, ETA 00:27:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 676008.839 ops/s
[info] # Warmup Iteration   2: 1024549.015 ops/s
[info] # Warmup Iteration   3: 981053.642 ops/s
[info] Iteration   1: 1036176.030 ops/s
[info]                  ·gc.alloc.rate:                   679.308 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.221 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      643.364 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 977.395 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 983914.578 ops/s
[info]                  ·gc.alloc.rate:                   645.058 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.067 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      647.370 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1035.698 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1001373.445 ops/s
[info]                  ·gc.alloc.rate:                   656.526 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.098 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      650.749 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1022.920 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1005155.167 ops/s
[info]                  ·gc.alloc.rate:                   659.092 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.130 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.836 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1023.770 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 979998.309 ops/s
[info]                  ·gc.alloc.rate:                   642.539 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.134 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.086 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1055.366 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala":
[info]   1001323.506 ±(99.9%) 85827.418 ops/s [Average]
[info]   (min, avg, max) = (979998.309, 1001323.506, 1036176.030), stdev = 22289.108
[info]   CI (99.9%): [915496.088, 1087150.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   656.505 ±(99.9%) 56.223 MB/sec [Average]
[info]   (min, avg, max) = (642.539, 656.505, 679.308), stdev = 14.601
[info]   CI (99.9%): [600.282, 712.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1032.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1032.000, 1032.000, 1032.000), stdev = 0.001
[info]   CI (99.9%): [1032.000, 1032.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.146), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.130 ±(99.9%) 0.223 B/op [Average]
[info]   (min, avg, max) = (0.067, 0.130, 0.221), stdev = 0.058
[info]   CI (99.9%): [≈ 0, 0.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   650.481 ±(99.9%) 20.673 MB/sec [Average]
[info]   (min, avg, max) = (643.364, 650.481, 657.086), stdev = 5.369
[info]   CI (99.9%): [629.808, 671.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1023.030 ±(99.9%) 110.420 B/op [Average]
[info]   (min, avg, max) = (977.395, 1023.030, 1055.366), stdev = 28.676
[info]   CI (99.9%): [912.610, 1133.450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala
[info] # Run progress: 56.16% complete, ETA 00:27:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1096291.698 ops/s
[info] # Warmup Iteration   2: 1226823.648 ops/s
[info] # Warmup Iteration   3: 1215615.894 ops/s
[info] Iteration   1: 1242627.255 ops/s
[info]                  ·gc.alloc.rate:                   511.714 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.706 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.693 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      584.314 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 739.936 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 1203703.776 ops/s
[info]                  ·gc.alloc.rate:                   495.660 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.109 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.921 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 856.210 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1183574.324 ops/s
[info]                  ·gc.alloc.rate:                   487.270 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      326.388 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 434.050 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1184021.718 ops/s
[info]                  ·gc.alloc.rate:                   487.709 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.055 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.127 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 867.785 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1229304.927 ops/s
[info]                  ·gc.alloc.rate:                   506.039 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      326.350 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 417.902 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala":
[info]   1208646.400 ±(99.9%) 102619.601 ops/s [Average]
[info]   (min, avg, max) = (1183574.324, 1208646.400, 1242627.255), stdev = 26649.985
[info]   CI (99.9%): [1106026.799, 1311266.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   497.678 ±(99.9%) 42.125 MB/sec [Average]
[info]   (min, avg, max) = (487.270, 497.678, 511.714), stdev = 10.940
[info]   CI (99.9%): [455.554, 539.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   648.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (648.000, 648.000, 648.000), stdev = 0.001
[info]   CI (99.9%): [648.000, 648.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.770 ±(99.9%) 6.320 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.770, 3.706), stdev = 1.641
[info]   CI (99.9%): [≈ 0, 7.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.977 ±(99.9%) 8.000 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.977, 4.693), stdev = 2.078
[info]   CI (99.9%): [≈ 0, 8.977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   509.020 ±(99.9%) 651.334 MB/sec [Average]
[info]   (min, avg, max) = (326.350, 509.020, 654.921), stdev = 169.149
[info]   CI (99.9%): [≈ 0, 1160.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   663.177 ±(99.9%) 856.016 B/op [Average]
[info]   (min, avg, max) = (417.902, 663.177, 867.785), stdev = 222.305
[info]   CI (99.9%): [≈ 0, 1519.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 6.000), stdev = 2.074
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 56.51% complete, ETA 00:27:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1097557.112 ops/s
[info] # Warmup Iteration   2: 1310916.749 ops/s
[info] # Warmup Iteration   3: 1262702.425 ops/s
[info] Iteration   1: 1305437.022 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1305486.977 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1302574.776 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1120889.764 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1305249.271 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc":
[info]   1267927.562 ±(99.9%) 316544.962 ops/s [Average]
[info]   (min, avg, max) = (1120889.764, 1267927.562, 1305486.977), stdev = 82205.721
[info]   CI (99.9%): [951382.600, 1584472.524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson
[info] # Run progress: 56.85% complete, ETA 00:27:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26256.116 ops/s
[info] # Warmup Iteration   2: 41162.247 ops/s
[info] # Warmup Iteration   3: 40924.812 ops/s
[info] Iteration   1: 41420.047 ops/s
[info]                  ·gc.alloc.rate:                   2025.650 MB/sec
[info]                  ·gc.alloc.rate.norm:              76984.871 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.746 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2293.433 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 87161.962 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 41470.252 ops/s
[info]                  ·gc.alloc.rate:                   2027.998 MB/sec
[info]                  ·gc.alloc.rate.norm:              76984.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.950 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1991.272 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 75589.899 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 41051.357 ops/s
[info]                  ·gc.alloc.rate:                   2007.735 MB/sec
[info]                  ·gc.alloc.rate.norm:              76984.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.788 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2008.763 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 77023.435 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 40944.112 ops/s
[info]                  ·gc.alloc.rate:                   2002.544 MB/sec
[info]                  ·gc.alloc.rate.norm:              76984.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.801 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2021.460 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 77711.178 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 41376.063 ops/s
[info]                  ·gc.alloc.rate:                   2024.245 MB/sec
[info]                  ·gc.alloc.rate.norm:              76984.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.167 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.413 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 77180.545 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson":
[info]   41252.366 ±(99.9%) 915.931 ops/s [Average]
[info]   (min, avg, max) = (40944.112, 41252.366, 41470.252), stdev = 237.864
[info]   CI (99.9%): [40336.436, 42168.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2017.634 ±(99.9%) 44.784 MB/sec [Average]
[info]   (min, avg, max) = (2002.544, 2017.634, 2027.998), stdev = 11.630
[info]   CI (99.9%): [1972.850, 2062.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   76984.182 ±(99.9%) 1.483 B/op [Average]
[info]   (min, avg, max) = (76984.010, 76984.182, 76984.871), stdev = 0.385
[info]   CI (99.9%): [76982.700, 76985.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.112 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.112, 0.125), stdev = 0.019
[info]   CI (99.9%): [0.041, 0.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4.291 ±(99.9%) 2.786 B/op [Average]
[info]   (min, avg, max) = (3.167, 4.291, 4.801), stdev = 0.723
[info]   CI (99.9%): [1.505, 7.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   2068.868 ±(99.9%) 486.567 MB/sec [Average]
[info]   (min, avg, max) = (1991.272, 2068.868, 2293.433), stdev = 126.360
[info]   CI (99.9%): [1582.301, 2555.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   78933.404 ±(99.9%) 17968.787 B/op [Average]
[info]   (min, avg, max) = (75589.899, 78933.404, 87161.962), stdev = 4666.437
[info]   CI (99.9%): [60964.617, 96902.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce
[info] # Run progress: 57.19% complete, ETA 00:27:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 33018.796 ops/s
[info] # Warmup Iteration   2: 39289.177 ops/s
[info] # Warmup Iteration   3: 40258.251 ops/s
[info] Iteration   1: 41403.960 ops/s
[info]                  ·gc.alloc.rate:                   826.492 MB/sec
[info]                  ·gc.alloc.rate.norm:              31424.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.374 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.992 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24865.413 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 41268.700 ops/s
[info]                  ·gc.alloc.rate:                   823.859 MB/sec
[info]                  ·gc.alloc.rate.norm:              31424.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.382 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      979.397 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37356.600 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 41414.629 ops/s
[info]                  ·gc.alloc.rate:                   826.902 MB/sec
[info]                  ·gc.alloc.rate.norm:              31424.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.582 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.143 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24858.810 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 41142.481 ops/s
[info]                  ·gc.alloc.rate:                   821.546 MB/sec
[info]                  ·gc.alloc.rate.norm:              31424.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.185 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      984.300 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37649.357 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 41569.807 ops/s
[info]                  ·gc.alloc.rate:                   830.044 MB/sec
[info]                  ·gc.alloc.rate.norm:              31424.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.576 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658.844 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24942.677 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce":
[info]   41359.915 ±(99.9%) 622.644 ops/s [Average]
[info]   (min, avg, max) = (41142.481, 41359.915, 41569.807), stdev = 161.699
[info]   CI (99.9%): [40737.271, 41982.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate":
[info]   825.768 ±(99.9%) 12.412 MB/sec [Average]
[info]   (min, avg, max) = (821.546, 825.768, 830.044), stdev = 3.223
[info]   CI (99.9%): [813.356, 838.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   31424.010 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (31424.010, 31424.010, 31424.011), stdev = 0.001
[info]   CI (99.9%): [31424.008, 31424.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.058, 0.083), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2.220 ±(99.9%) 2.585 B/op [Average]
[info]   (min, avg, max) = (1.576, 2.220, 3.185), stdev = 0.671
[info]   CI (99.9%): [≈ 0, 4.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   786.135 ±(99.9%) 688.033 MB/sec [Average]
[info]   (min, avg, max) = (653.992, 786.135, 984.300), stdev = 178.680
[info]   CI (99.9%): [98.102, 1474.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   29934.571 ±(99.9%) 26607.305 B/op [Average]
[info]   (min, avg, max) = (24858.810, 29934.571, 37649.357), stdev = 6909.833
[info]   CI (99.9%): [3327.266, 56541.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala
[info] # Run progress: 57.53% complete, ETA 00:26:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 51316.036 ops/s
[info] # Warmup Iteration   2: 82218.899 ops/s
[info] # Warmup Iteration   3: 82325.836 ops/s
[info] Iteration   1: 79303.091 ops/s
[info]                  ·gc.alloc.rate:                   834.266 MB/sec
[info]                  ·gc.alloc.rate.norm:              16560.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.413 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.351 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12968.885 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 83311.468 ops/s
[info]                  ·gc.alloc.rate:                   876.696 MB/sec
[info]                  ·gc.alloc.rate.norm:              16560.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.393 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      984.996 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18605.696 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 83573.896 ops/s
[info]                  ·gc.alloc.rate:                   879.581 MB/sec
[info]                  ·gc.alloc.rate.norm:              16560.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.392 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      991.815 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18673.048 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 79490.114 ops/s
[info]                  ·gc.alloc.rate:                   836.631 MB/sec
[info]                  ·gc.alloc.rate.norm:              16560.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.412 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      664.323 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13149.405 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 81461.894 ops/s
[info]                  ·gc.alloc.rate:                   857.311 MB/sec
[info]                  ·gc.alloc.rate.norm:              16560.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.804 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1000.424 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19324.409 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala":
[info]   81428.092 ±(99.9%) 7802.689 ops/s [Average]
[info]   (min, avg, max) = (79303.091, 81428.092, 83573.896), stdev = 2026.334
[info]   CI (99.9%): [73625.403, 89230.782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   856.897 ±(99.9%) 82.355 MB/sec [Average]
[info]   (min, avg, max) = (834.266, 856.897, 879.581), stdev = 21.387
[info]   CI (99.9%): [774.542, 939.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   16560.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16560.005, 16560.005, 16560.006), stdev = 0.001
[info]   CI (99.9%): [16560.004, 16560.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.025, 0.042), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.483 ±(99.9%) 0.693 B/op [Average]
[info]   (min, avg, max) = (0.392, 0.483, 0.804), stdev = 0.180
[info]   CI (99.9%): [≈ 0, 1.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   858.982 ±(99.9%) 704.011 MB/sec [Average]
[info]   (min, avg, max) = (653.351, 858.982, 1000.424), stdev = 182.829
[info]   CI (99.9%): [154.971, 1562.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   16544.288 ±(99.9%) 12300.808 B/op [Average]
[info]   (min, avg, max) = (12968.885, 16544.288, 19324.409), stdev = 3194.481
[info]   CI (99.9%): [4243.480, 28845.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala
[info] # Run progress: 57.88% complete, ETA 00:26:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 219470.503 ops/s
[info] # Warmup Iteration   2: 231503.904 ops/s
[info] # Warmup Iteration   3: 240837.529 ops/s
[info] Iteration   1: 239574.104 ops/s
[info]                  ·gc.alloc.rate:                   779.282 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.684 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.719 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4314.749 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 233845.920 ops/s
[info]                  ·gc.alloc.rate:                   760.832 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.560 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      984.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6622.085 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 241985.617 ops/s
[info]                  ·gc.alloc.rate:                   787.231 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.406 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.178 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4274.163 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 240943.966 ops/s
[info]                  ·gc.alloc.rate:                   783.735 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658.066 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4299.030 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 241752.366 ops/s
[info]                  ·gc.alloc.rate:                   786.394 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.678 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      989.461 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6442.121 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala":
[info]   239620.395 ±(99.9%) 12949.579 ops/s [Average]
[info]   (min, avg, max) = (233845.920, 239620.395, 241985.617), stdev = 3362.964
[info]   CI (99.9%): [226670.816, 252569.973] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   779.495 ±(99.9%) 41.907 MB/sec [Average]
[info]   (min, avg, max) = (760.832, 779.495, 787.231), stdev = 10.883
[info]   CI (99.9%): [737.588, 821.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   5120.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5120.002, 5120.002, 5120.002), stdev = 0.001
[info]   CI (99.9%): [5120.002, 5120.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.071, 0.104), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.466 ±(99.9%) 1.092 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.466, 0.684), stdev = 0.284
[info]   CI (99.9%): [≈ 0, 1.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   789.093 ±(99.9%) 694.837 MB/sec [Average]
[info]   (min, avg, max) = (656.719, 789.093, 989.461), stdev = 180.447
[info]   CI (99.9%): [94.256, 1483.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5190.430 ±(99.9%) 4722.859 B/op [Average]
[info]   (min, avg, max) = (4274.163, 5190.430, 6622.085), stdev = 1226.511
[info]   CI (99.9%): [467.571, 9913.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson
[info] # Run progress: 58.22% complete, ETA 00:26:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13689.417 ops/s
[info] # Warmup Iteration   2: 24510.022 ops/s
[info] # Warmup Iteration   3: 24375.055 ops/s
[info] Iteration   1: 24330.358 ops/s
[info]                  ·gc.alloc.rate:                   1111.464 MB/sec
[info]                  ·gc.alloc.rate.norm:              71896.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.040 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      978.878 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63319.599 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 24460.185 ops/s
[info]                  ·gc.alloc.rate:                   1117.149 MB/sec
[info]                  ·gc.alloc.rate.norm:              71896.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.358 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      985.357 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63414.331 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 23288.197 ops/s
[info]                  ·gc.alloc.rate:                   1064.133 MB/sec
[info]                  ·gc.alloc.rate.norm:              71896.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.814 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1323.258 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 89403.337 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 24446.366 ops/s
[info]                  ·gc.alloc.rate:                   1116.728 MB/sec
[info]                  ·gc.alloc.rate.norm:              71896.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      998.832 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 64305.743 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 24695.425 ops/s
[info]                  ·gc.alloc.rate:                   1128.048 MB/sec
[info]                  ·gc.alloc.rate.norm:              71896.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.980 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1003.115 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63933.419 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson":
[info]   24244.106 ±(99.9%) 2120.031 ops/s [Average]
[info]   (min, avg, max) = (23288.197, 24244.106, 24695.425), stdev = 550.565
[info]   CI (99.9%): [22124.075, 26364.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1107.504 ±(99.9%) 96.206 MB/sec [Average]
[info]   (min, avg, max) = (1064.133, 1107.504, 1128.048), stdev = 24.985
[info]   CI (99.9%): [1011.298, 1203.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   71896.018 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (71896.017, 71896.018, 71896.022), stdev = 0.002
[info]   CI (99.9%): [71896.009, 71896.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.062, 0.083), stdev = 0.015
[info]   CI (99.9%): [0.006, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4.042 ±(99.9%) 3.468 B/op [Average]
[info]   (min, avg, max) = (2.814, 4.042, 5.358), stdev = 0.901
[info]   CI (99.9%): [0.574, 7.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1057.888 ±(99.9%) 572.480 MB/sec [Average]
[info]   (min, avg, max) = (978.878, 1057.888, 1323.258), stdev = 148.671
[info]   CI (99.9%): [485.408, 1630.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   68875.286 ±(99.9%) 44215.024 B/op [Average]
[info]   (min, avg, max) = (63319.599, 68875.286, 89403.337), stdev = 11482.501
[info]   CI (99.9%): [24660.261, 113090.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce
[info] # Run progress: 58.56% complete, ETA 00:26:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 41404.265 ops/s
[info] # Warmup Iteration   2: 51172.026 ops/s
[info] # Warmup Iteration   3: 51730.422 ops/s
[info] Iteration   1: 51304.298 ops/s
[info]                  ·gc.alloc.rate:                   1087.432 MB/sec
[info]                  ·gc.alloc.rate.norm:              33360.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.554 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1302.944 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39971.442 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 51793.652 ops/s
[info]                  ·gc.alloc.rate:                   1097.940 MB/sec
[info]                  ·gc.alloc.rate.norm:              33360.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.530 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      980.316 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29786.101 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 51598.761 ops/s
[info]                  ·gc.alloc.rate:                   1093.577 MB/sec
[info]                  ·gc.alloc.rate.norm:              33360.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.270 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      984.753 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30040.296 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 51582.780 ops/s
[info]                  ·gc.alloc.rate:                   1093.208 MB/sec
[info]                  ·gc.alloc.rate.norm:              33360.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.905 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1320.764 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 40304.049 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 51800.408 ops/s
[info]                  ·gc.alloc.rate:                   1098.259 MB/sec
[info]                  ·gc.alloc.rate.norm:              33360.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.897 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      997.459 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30298.177 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce":
[info]   51615.980 ±(99.9%) 779.995 ops/s [Average]
[info]   (min, avg, max) = (51304.298, 51615.980, 51800.408), stdev = 202.562
[info]   CI (99.9%): [50835.985, 52395.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1094.083 ±(99.9%) 16.958 MB/sec [Average]
[info]   (min, avg, max) = (1087.432, 1094.083, 1098.259), stdev = 4.404
[info]   CI (99.9%): [1077.125, 1111.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   33360.008 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (33360.008, 33360.008, 33360.008), stdev = 0.001
[info]   CI (99.9%): [33360.007, 33360.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.083), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2.031 ±(99.9%) 2.052 B/op [Average]
[info]   (min, avg, max) = (1.270, 2.031, 2.554), stdev = 0.533
[info]   CI (99.9%): [≈ 0, 4.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1117.247 ±(99.9%) 684.928 MB/sec [Average]
[info]   (min, avg, max) = (980.316, 1117.247, 1320.764), stdev = 177.874
[info]   CI (99.9%): [432.319, 1802.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   34080.013 ±(99.9%) 21310.004 B/op [Average]
[info]   (min, avg, max) = (29786.101, 34080.013, 40304.049), stdev = 5534.140
[info]   CI (99.9%): [12770.009, 55390.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala
[info] # Run progress: 58.90% complete, ETA 00:25:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 55015.709 ops/s
[info] # Warmup Iteration   2: 88601.713 ops/s
[info] # Warmup Iteration   3: 88753.214 ops/s
[info] Iteration   1: 88627.543 ops/s
[info]                  ·gc.alloc.rate:                   1213.747 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.479 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1314.580 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23351.109 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 88673.800 ops/s
[info]                  ·gc.alloc.rate:                   1214.498 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.217 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1325.397 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23528.699 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 87120.202 ops/s
[info]                  ·gc.alloc.rate:                   1193.213 MB/sec
[info]                  ·gc.alloc.rate.norm:              21559.982 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.504 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      999.385 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18057.732 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 89115.758 ops/s
[info]                  ·gc.alloc.rate:                   1221.070 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.103 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.966 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23659.344 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 86684.479 ops/s
[info]                  ·gc.alloc.rate:                   1187.346 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.512 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.459 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24431.054 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala":
[info]   88044.356 ±(99.9%) 4123.757 ops/s [Average]
[info]   (min, avg, max) = (86684.479, 88044.356, 89115.758), stdev = 1070.927
[info]   CI (99.9%): [83920.599, 92168.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1205.975 ±(99.9%) 56.815 MB/sec [Average]
[info]   (min, avg, max) = (1187.346, 1205.975, 1221.070), stdev = 14.755
[info]   CI (99.9%): [1149.159, 1262.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   21560.005 ±(99.9%) 0.062 B/op [Average]
[info]   (min, avg, max) = (21559.982, 21560.005, 21560.027), stdev = 0.016
[info]   CI (99.9%): [21559.943, 21560.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.125), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.563 ±(99.9%) 1.555 B/op [Average]
[info]   (min, avg, max) = (1.103, 1.563, 2.217), stdev = 0.404
[info]   CI (99.9%): [0.008, 3.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1264.957 ±(99.9%) 573.574 MB/sec [Average]
[info]   (min, avg, max) = (999.385, 1264.957, 1345.459), stdev = 148.955
[info]   CI (99.9%): [691.383, 1838.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   22605.588 ±(99.9%) 9917.493 B/op [Average]
[info]   (min, avg, max) = (18057.732, 22605.588, 24431.054), stdev = 2575.541
[info]   CI (99.9%): [12688.095, 32523.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 5.000), stdev = 0.894
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala
[info] # Run progress: 59.25% complete, ETA 00:25:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 227255.976 ops/s
[info] # Warmup Iteration   2: 249331.209 ops/s
[info] # Warmup Iteration   3: 240796.707 ops/s
[info] Iteration   1: 245766.008 ops/s
[info]                  ·gc.alloc.rate:                   783.131 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.267 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.032 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4189.117 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 246336.804 ops/s
[info]                  ·gc.alloc.rate:                   784.993 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.532 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      979.128 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6256.496 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 245397.855 ops/s
[info]                  ·gc.alloc.rate:                   782.025 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.267 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.425 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4191.142 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 244646.629 ops/s
[info]                  ·gc.alloc.rate:                   779.718 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.536 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      983.271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6325.475 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 247896.782 ops/s
[info]                  ·gc.alloc.rate:                   789.955 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.529 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.410 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4174.375 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala":
[info]   246008.816 ±(99.9%) 4700.222 ops/s [Average]
[info]   (min, avg, max) = (244646.629, 246008.816, 247896.782), stdev = 1220.633
[info]   CI (99.9%): [241308.594, 250709.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   783.965 ±(99.9%) 14.843 MB/sec [Average]
[info]   (min, avg, max) = (779.718, 783.965, 789.955), stdev = 3.855
[info]   CI (99.9%): [769.122, 798.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5016.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5016.002, 5016.002, 5016.002), stdev = 0.001
[info]   CI (99.9%): [5016.001, 5016.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.083), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.426 ±(99.9%) 0.560 B/op [Average]
[info]   (min, avg, max) = (0.267, 0.426, 0.536), stdev = 0.145
[info]   CI (99.9%): [≈ 0, 0.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   785.453 ±(99.9%) 688.123 MB/sec [Average]
[info]   (min, avg, max) = (653.425, 785.453, 983.271), stdev = 178.703
[info]   CI (99.9%): [97.330, 1473.576] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5027.321 ±(99.9%) 4443.021 B/op [Average]
[info]   (min, avg, max) = (4174.375, 5027.321, 6325.475), stdev = 1153.838
[info]   CI (99.9%): [584.300, 9470.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 4.000), stdev = 0.894
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 59.59% complete, ETA 00:25:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 253009.419 ops/s
[info] # Warmup Iteration   2: 268637.477 ops/s
[info] # Warmup Iteration   3: 275634.252 ops/s
[info] Iteration   1: 275525.247 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 274206.877 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 267542.209 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 268432.835 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 275941.604 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc":
[info]   272329.754 ±(99.9%) 15508.918 ops/s [Average]
[info]   (min, avg, max) = (267542.209, 272329.754, 275941.604), stdev = 4027.617
[info]   CI (99.9%): [256820.836, 287838.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson
[info] # Run progress: 59.93% complete, ETA 00:25:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 53085.337 ops/s
[info] # Warmup Iteration   2: 71322.146 ops/s
[info] # Warmup Iteration   3: 73234.961 ops/s
[info] Iteration   1: 72790.255 ops/s
[info]                  ·gc.alloc.rate:                   1079.951 MB/sec
[info]                  ·gc.alloc.rate.norm:              23344.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.350 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      970.194 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20971.520 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 73422.930 ops/s
[info]                  ·gc.alloc.rate:                   1088.749 MB/sec
[info]                  ·gc.alloc.rate.norm:              23344.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.677 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1298.310 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27837.227 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 71695.635 ops/s
[info]                  ·gc.alloc.rate:                   1063.457 MB/sec
[info]                  ·gc.alloc.rate.norm:              23343.978 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.371 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      978.933 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21488.592 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 71641.013 ops/s
[info]                  ·gc.alloc.rate:                   1062.556 MB/sec
[info]                  ·gc.alloc.rate.norm:              23344.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.915 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      985.487 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21650.825 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 71719.957 ops/s
[info]                  ·gc.alloc.rate:                   1063.718 MB/sec
[info]                  ·gc.alloc.rate.norm:              23344.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.284 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      990.821 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21744.226 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson":
[info]   72253.958 ±(99.9%) 3120.384 ops/s [Average]
[info]   (min, avg, max) = (71641.013, 72253.958, 73422.930), stdev = 810.354
[info]   CI (99.9%): [69133.573, 75374.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1071.686 ±(99.9%) 46.129 MB/sec [Average]
[info]   (min, avg, max) = (1062.556, 1071.686, 1088.749), stdev = 11.980
[info]   CI (99.9%): [1025.557, 1117.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   23344.000 ±(99.9%) 0.049 B/op [Average]
[info]   (min, avg, max) = (23343.978, 23344.000, 23344.007), stdev = 0.013
[info]   CI (99.9%): [23343.952, 23344.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.125), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.719 ±(99.9%) 2.818 B/op [Average]
[info]   (min, avg, max) = (0.915, 1.719, 2.677), stdev = 0.732
[info]   CI (99.9%): [≈ 0, 4.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1044.749 ±(99.9%) 546.615 MB/sec [Average]
[info]   (min, avg, max) = (970.194, 1044.749, 1298.310), stdev = 141.954
[info]   CI (99.9%): [498.134, 1591.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   22738.478 ±(99.9%) 11035.492 B/op [Average]
[info]   (min, avg, max) = (20971.520, 22738.478, 27837.227), stdev = 2865.882
[info]   CI (99.9%): [11702.986, 33773.970] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce
[info] # Run progress: 60.27% complete, ETA 00:25:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 53875.586 ops/s
[info] # Warmup Iteration   2: 76725.867 ops/s
[info] # Warmup Iteration   3: 77231.049 ops/s
[info] Iteration   1: 77918.748 ops/s
[info]                  ·gc.alloc.rate:                   1464.057 MB/sec
[info]                  ·gc.alloc.rate.norm:              29576.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.523 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1625.500 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 32837.378 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 77708.521 ops/s
[info]                  ·gc.alloc.rate:                   1460.119 MB/sec
[info]                  ·gc.alloc.rate.norm:              29576.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.108 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1310.114 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26537.518 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 77678.008 ops/s
[info]                  ·gc.alloc.rate:                   1459.848 MB/sec
[info]                  ·gc.alloc.rate.norm:              29576.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.687 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1320.352 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26749.870 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 77488.069 ops/s
[info]                  ·gc.alloc.rate:                   1456.197 MB/sec
[info]                  ·gc.alloc.rate.norm:              29576.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.691 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1664.380 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33804.301 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 78131.174 ops/s
[info]                  ·gc.alloc.rate:                   1468.302 MB/sec
[info]                  ·gc.alloc.rate.norm:              29576.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.258 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.337 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26978.258 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce":
[info]   77784.904 ±(99.9%) 949.457 ops/s [Average]
[info]   (min, avg, max) = (77488.069, 77784.904, 78131.174), stdev = 246.571
[info]   CI (99.9%): [76835.447, 78734.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate":
[info]   1461.705 ±(99.9%) 17.788 MB/sec [Average]
[info]   (min, avg, max) = (1456.197, 1461.705, 1468.302), stdev = 4.620
[info]   CI (99.9%): [1443.916, 1479.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   29576.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (29576.005, 29576.005, 29576.006), stdev = 0.001
[info]   CI (99.9%): [29576.005, 29576.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.092, 0.125), stdev = 0.024
[info]   CI (99.9%): [≈ 10⁻⁴, 0.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1.853 ±(99.9%) 1.848 B/op [Average]
[info]   (min, avg, max) = (1.258, 1.853, 2.523), stdev = 0.480
[info]   CI (99.9%): [0.005, 3.702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1451.937 ±(99.9%) 681.693 MB/sec [Average]
[info]   (min, avg, max) = (1310.114, 1451.937, 1664.380), stdev = 177.033
[info]   CI (99.9%): [770.244, 2133.629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   29381.465 ±(99.9%) 13922.826 B/op [Average]
[info]   (min, avg, max) = (26537.518, 29381.465, 33804.301), stdev = 3615.714
[info]   CI (99.9%): [15458.639, 43304.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala
[info] # Run progress: 60.62% complete, ETA 00:24:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 51381.398 ops/s
[info] # Warmup Iteration   2: 86830.171 ops/s
[info] # Warmup Iteration   3: 89108.754 ops/s
[info] Iteration   1: 89488.023 ops/s
[info]                  ·gc.alloc.rate:                   1010.545 MB/sec
[info]                  ·gc.alloc.rate.norm:              17776.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.732 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      981.383 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17263.041 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 87980.501 ops/s
[info]                  ·gc.alloc.rate:                   993.780 MB/sec
[info]                  ·gc.alloc.rate.norm:              17776.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.745 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      986.972 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17654.219 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 89149.116 ops/s
[info]                  ·gc.alloc.rate:                   1006.728 MB/sec
[info]                  ·gc.alloc.rate.norm:              17776.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.205 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      993.382 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17540.360 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 88327.385 ops/s
[info]                  ·gc.alloc.rate:                   997.426 MB/sec
[info]                  ·gc.alloc.rate.norm:              17776.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      998.701 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17798.729 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 89066.547 ops/s
[info]                  ·gc.alloc.rate:                   1005.775 MB/sec
[info]                  ·gc.alloc.rate.norm:              17776.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1003.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17727.186 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala":
[info]   88802.314 ±(99.9%) 2405.668 ops/s [Average]
[info]   (min, avg, max) = (87980.501, 88802.314, 89488.023), stdev = 624.744
[info]   CI (99.9%): [86396.646, 91207.983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1002.851 ±(99.9%) 26.850 MB/sec [Average]
[info]   (min, avg, max) = (993.780, 1002.851, 1010.545), stdev = 6.973
[info]   CI (99.9%): [976.001, 1029.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   17776.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (17776.005, 17776.005, 17776.005), stdev = 0.001
[info]   CI (99.9%): [17776.004, 17776.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.196 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.125), stdev = 0.051
[info]   CI (99.9%): [≈ 0, 0.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.736 ±(99.9%) 3.466 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.736, 2.205), stdev = 0.900
[info]   CI (99.9%): [≈ 0, 4.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   992.690 ±(99.9%) 33.553 MB/sec [Average]
[info]   (min, avg, max) = (981.383, 992.690, 1003.013), stdev = 8.714
[info]   CI (99.9%): [959.137, 1026.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   17596.707 ±(99.9%) 806.921 B/op [Average]
[info]   (min, avg, max) = (17263.041, 17596.707, 17798.729), stdev = 209.555
[info]   CI (99.9%): [16789.786, 18403.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala
[info] # Run progress: 60.96% complete, ETA 00:24:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 92954.701 ops/s
[info] # Warmup Iteration   2: 108293.560 ops/s
[info] # Warmup Iteration   3: 106516.663 ops/s
[info] Iteration   1: 107496.443 ops/s
[info]                  ·gc.alloc.rate:                   1132.051 MB/sec
[info]                  ·gc.alloc.rate.norm:              16576.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.610 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      977.155 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14307.941 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 105753.456 ops/s
[info]                  ·gc.alloc.rate:                   1113.642 MB/sec
[info]                  ·gc.alloc.rate.norm:              16576.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.929 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1306.816 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19451.304 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 107047.765 ops/s
[info]                  ·gc.alloc.rate:                   1127.279 MB/sec
[info]                  ·gc.alloc.rate.norm:              16576.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.306 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      985.442 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14490.372 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 105867.408 ops/s
[info]                  ·gc.alloc.rate:                   1114.890 MB/sec
[info]                  ·gc.alloc.rate.norm:              16576.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.928 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1322.155 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19657.582 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 108392.845 ops/s
[info]                  ·gc.alloc.rate:                   1141.705 MB/sec
[info]                  ·gc.alloc.rate.norm:              16576.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.814 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      996.969 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14474.624 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala":
[info]   106911.584 ±(99.9%) 4299.250 ops/s [Average]
[info]   (min, avg, max) = (105753.456, 106911.584, 108392.845), stdev = 1116.501
[info]   CI (99.9%): [102612.334, 111210.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1125.914 ±(99.9%) 45.603 MB/sec [Average]
[info]   (min, avg, max) = (1113.642, 1125.914, 1141.705), stdev = 11.843
[info]   CI (99.9%): [1080.311, 1171.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   16576.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16576.004, 16576.004, 16576.004), stdev = 0.001
[info]   CI (99.9%): [16576.003, 16576.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.125), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.917 ±(99.9%) 2.171 B/op [Average]
[info]   (min, avg, max) = (0.306, 0.917, 1.814), stdev = 0.564
[info]   CI (99.9%): [≈ 0, 3.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1117.707 ±(99.9%) 692.549 MB/sec [Average]
[info]   (min, avg, max) = (977.155, 1117.707, 1322.155), stdev = 179.853
[info]   CI (99.9%): [425.159, 1810.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   16476.364 ±(99.9%) 10827.023 B/op [Average]
[info]   (min, avg, max) = (14307.941, 16476.364, 19657.582), stdev = 2811.743
[info]   CI (99.9%): [5649.342, 27303.387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson
[info] # Run progress: 61.30% complete, ETA 00:24:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18280.335 ops/s
[info] # Warmup Iteration   2: 37812.359 ops/s
[info] # Warmup Iteration   3: 37904.142 ops/s
[info] Iteration   1: 38008.515 ops/s
[info]                  ·gc.alloc.rate:                   1840.068 MB/sec
[info]                  ·gc.alloc.rate.norm:              76200.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.586 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1660.861 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68778.752 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 37487.643 ops/s
[info]                  ·gc.alloc.rate:                   1815.062 MB/sec
[info]                  ·gc.alloc.rate.norm:              76200.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.496 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2009.120 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 84346.968 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 37692.608 ops/s
[info]                  ·gc.alloc.rate:                   1824.924 MB/sec
[info]                  ·gc.alloc.rate.norm:              76200.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.869 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1683.691 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70302.823 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 37146.446 ops/s
[info]                  ·gc.alloc.rate:                   1798.270 MB/sec
[info]                  ·gc.alloc.rate.norm:              76200.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.882 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1689.857 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 71606.076 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 37504.598 ops/s
[info]                  ·gc.alloc.rate:                   1816.029 MB/sec
[info]                  ·gc.alloc.rate.norm:              76200.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.494 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033.317 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 85317.354 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson":
[info]   37567.962 ±(99.9%) 1214.274 ops/s [Average]
[info]   (min, avg, max) = (37146.446, 37567.962, 38008.515), stdev = 315.343
[info]   CI (99.9%): [36353.688, 38782.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1818.871 ±(99.9%) 58.807 MB/sec [Average]
[info]   (min, avg, max) = (1798.270, 1818.871, 1840.068), stdev = 15.272
[info]   CI (99.9%): [1760.064, 1877.677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   76200.012 ±(99.9%) 0.004 B/op [Average]
[info]   (min, avg, max) = (76200.011, 76200.012, 76200.013), stdev = 0.001
[info]   CI (99.9%): [76200.008, 76200.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.054, 0.083), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2.265 ±(99.9%) 5.090 B/op [Average]
[info]   (min, avg, max) = (0.869, 2.265, 3.496), stdev = 1.322
[info]   CI (99.9%): [≈ 0, 7.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1815.369 ±(99.9%) 725.533 MB/sec [Average]
[info]   (min, avg, max) = (1660.861, 1815.369, 2033.317), stdev = 188.419
[info]   CI (99.9%): [1089.836, 2540.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   76070.395 ±(99.9%) 31067.025 B/op [Average]
[info]   (min, avg, max) = (68778.752, 76070.395, 85317.354), stdev = 8068.008
[info]   CI (99.9%): [45003.369, 107137.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.400, 8.000), stdev = 1.140
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce
[info] # Run progress: 61.64% complete, ETA 00:24:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 85085.581 ops/s
[info] # Warmup Iteration   2: 112619.661 ops/s
[info] # Warmup Iteration   3: 114264.089 ops/s
[info] Iteration   1: 115810.781 ops/s
[info]                  ·gc.alloc.rate:                   797.429 MB/sec
[info]                  ·gc.alloc.rate.norm:              10840.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.566 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      645.994 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8781.437 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 113896.426 ops/s
[info]                  ·gc.alloc.rate:                   784.299 MB/sec
[info]                  ·gc.alloc.rate.norm:              10840.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.726 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      969.040 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13393.362 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 115791.939 ops/s
[info]                  ·gc.alloc.rate:                   797.385 MB/sec
[info]                  ·gc.alloc.rate.norm:              10840.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.566 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      647.058 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8796.384 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 114285.947 ops/s
[info]                  ·gc.alloc.rate:                   787.075 MB/sec
[info]                  ·gc.alloc.rate.norm:              10840.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      649.443 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8944.468 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 113756.790 ops/s
[info]                  ·gc.alloc.rate:                   783.465 MB/sec
[info]                  ·gc.alloc.rate.norm:              10840.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.440 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      978.869 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13543.600 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce":
[info]   114708.377 ±(99.9%) 3913.962 ops/s [Average]
[info]   (min, avg, max) = (113756.790, 114708.377, 115810.781), stdev = 1016.444
[info]   CI (99.9%): [110794.414, 118622.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate":
[info]   789.931 ±(99.9%) 26.780 MB/sec [Average]
[info]   (min, avg, max) = (783.465, 789.931, 797.429), stdev = 6.955
[info]   CI (99.9%): [763.151, 816.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   10840.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10840.004, 10840.004, 10840.004), stdev = 0.001
[info]   CI (99.9%): [10840.003, 10840.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.196 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.125), stdev = 0.051
[info]   CI (99.9%): [≈ 0, 0.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.860 ±(99.9%) 2.722 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.860, 1.726), stdev = 0.707
[info]   CI (99.9%): [≈ 0, 3.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   778.081 ±(99.9%) 688.671 MB/sec [Average]
[info]   (min, avg, max) = (645.994, 778.081, 978.869), stdev = 178.846
[info]   CI (99.9%): [89.409, 1466.752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   10691.850 ±(99.9%) 9765.475 B/op [Average]
[info]   (min, avg, max) = (8781.437, 10691.850, 13543.600), stdev = 2536.063
[info]   CI (99.9%): [926.375, 20457.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala
[info] # Run progress: 61.99% complete, ETA 00:23:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 109400.634 ops/s
[info] # Warmup Iteration   2: 162130.546 ops/s
[info] # Warmup Iteration   3: 163997.546 ops/s
[info] Iteration   1: 164094.692 ops/s
[info]                  ·gc.alloc.rate:                   243.502 MB/sec
[info]                  ·gc.alloc.rate.norm:              2336.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.737 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2453.377 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 163731.761 ops/s
[info]                  ·gc.alloc.rate:                   243.014 MB/sec
[info]                  ·gc.alloc.rate.norm:              2336.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.787 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2458.786 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 164253.781 ops/s
[info]                  ·gc.alloc.rate:                   243.764 MB/sec
[info]                  ·gc.alloc.rate.norm:              2336.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.399 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.768 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2451.033 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 164276.426 ops/s
[info]                  ·gc.alloc.rate:                   243.810 MB/sec
[info]                  ·gc.alloc.rate.norm:              2336.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.197 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      322.389 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3088.890 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 163546.224 ops/s
[info]                  ·gc.alloc.rate:      242.707 MB/sec
[info]                  ·gc.alloc.rate.norm: 2336.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala":
[info]   163980.577 ±(99.9%) 1256.279 ops/s [Average]
[info]   (min, avg, max) = (163546.224, 163980.577, 164276.426), stdev = 326.252
[info]   CI (99.9%): [162724.298, 165236.856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   243.360 ±(99.9%) 1.858 MB/sec [Average]
[info]   (min, avg, max) = (242.707, 243.360, 243.810), stdev = 0.483
[info]   CI (99.9%): [241.501, 245.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   2336.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2336.002, 2336.003, 2336.003), stdev = 0.001
[info]   CI (99.9%): [2336.002, 2336.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.209 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.125), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.319 ±(99.9%) 2.003 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.319, 1.197), stdev = 0.520
[info]   CI (99.9%): [≈ 0, 2.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   217.936 ±(99.9%) 482.098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 217.936, 322.389), stdev = 125.199
[info]   CI (99.9%): [≈ 0, 700.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2090.417 ±(99.9%) 4622.485 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2090.417, 3088.890), stdev = 1200.445
[info]   CI (99.9%): [≈ 0, 6712.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala
[info] # Run progress: 62.33% complete, ETA 00:23:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 736466.664 ops/s
[info] # Warmup Iteration   2: 781657.536 ops/s
[info] # Warmup Iteration   3: 793759.842 ops/s
[info] Iteration   1: 807266.205 ops/s
[info]                  ·gc.alloc.rate:                   1000.970 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.162 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      976.961 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1905.180 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 796146.856 ops/s
[info]                  ·gc.alloc.rate:                   987.665 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.206 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      978.129 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1933.155 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 808029.610 ops/s
[info]                  ·gc.alloc.rate:                   1001.969 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.203 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      982.032 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1913.159 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 788465.112 ops/s
[info]                  ·gc.alloc.rate:                   977.852 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.166 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      986.819 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1969.900 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 808567.720 ops/s
[info]                  ·gc.alloc.rate:                   1003.089 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.162 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      992.457 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1931.312 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala":
[info]   801695.100 ±(99.9%) 34667.117 ops/s [Average]
[info]   (min, avg, max) = (788465.112, 801695.100, 808567.720), stdev = 9002.940
[info]   CI (99.9%): [767027.984, 836362.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   994.309 ±(99.9%) 42.840 MB/sec [Average]
[info]   (min, avg, max) = (977.852, 994.309, 1003.089), stdev = 11.125
[info]   CI (99.9%): [951.469, 1037.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1952.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1952.001, 1952.001, 1952.001), stdev = 0.001
[info]   CI (99.9%): [1952.000, 1952.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.092, 0.104), stdev = 0.011
[info]   CI (99.9%): [0.048, 0.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.180 ±(99.9%) 0.086 B/op [Average]
[info]   (min, avg, max) = (0.162, 0.180, 0.206), stdev = 0.022
[info]   CI (99.9%): [0.094, 0.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   983.280 ±(99.9%) 24.714 MB/sec [Average]
[info]   (min, avg, max) = (976.961, 983.280, 992.457), stdev = 6.418
[info]   CI (99.9%): [958.566, 1007.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1930.541 ±(99.9%) 96.303 B/op [Average]
[info]   (min, avg, max) = (1905.180, 1930.541, 1969.900), stdev = 25.010
[info]   CI (99.9%): [1834.238, 2026.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 62.67% complete, ETA 00:23:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 758327.959 ops/s
[info] # Warmup Iteration   2: 799283.515 ops/s
[info] # Warmup Iteration   3: 778407.856 ops/s
[info] Iteration   1: 823936.211 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 820536.937 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 822129.441 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 819200.707 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 822044.377 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc":
[info]   821569.535 ±(99.9%) 6893.011 ops/s [Average]
[info]   (min, avg, max) = (819200.707, 821569.535, 823936.211), stdev = 1790.093
[info]   CI (99.9%): [814676.524, 828462.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson
[info] # Run progress: 63.01% complete, ETA 00:23:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 154055.356 ops/s
[info] # Warmup Iteration   2: 196295.613 ops/s
[info] # Warmup Iteration   3: 196444.016 ops/s
[info] Iteration   1: 202908.390 ops/s
[info]                  ·gc.alloc.rate:                   663.131 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4.686 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36.349 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      967.800 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7507.359 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 207481.616 ops/s
[info]                  ·gc.alloc.rate:                   678.099 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.632 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      642.124 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4871.105 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 206593.698 ops/s
[info]                  ·gc.alloc.rate:                   675.329 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.317 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      642.574 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4894.505 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 201843.419 ops/s
[info]                  ·gc.alloc.rate:                   659.542 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      643.333 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5017.582 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 208394.269 ops/s
[info]                  ·gc.alloc.rate:                   681.028 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.472 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      645.403 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4874.922 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson":
[info]   205444.278 ±(99.9%) 11155.454 ops/s [Average]
[info]   (min, avg, max) = (201843.419, 205444.278, 208394.269), stdev = 2897.036
[info]   CI (99.9%): [194288.824, 216599.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   671.426 ±(99.9%) 36.631 MB/sec [Average]
[info]   (min, avg, max) = (659.542, 671.426, 681.028), stdev = 9.513
[info]   CI (99.9%): [634.795, 708.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5144.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5144.002, 5144.002, 5144.002), stdev = 0.001
[info]   CI (99.9%): [5144.002, 5144.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.975 ±(99.9%) 7.990 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.975, 4.686), stdev = 2.075
[info]   CI (99.9%): [≈ 0, 8.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   7.554 ±(99.9%) 61.991 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.554, 36.349), stdev = 16.099
[info]   CI (99.9%): [≈ 0, 69.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   708.247 ±(99.9%) 558.729 MB/sec [Average]
[info]   (min, avg, max) = (642.124, 708.247, 967.800), stdev = 145.100
[info]   CI (99.9%): [149.518, 1266.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   5433.094 ±(99.9%) 4471.015 B/op [Average]
[info]   (min, avg, max) = (4871.105, 5433.094, 7507.359), stdev = 1161.108
[info]   CI (99.9%): [962.079, 9904.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 5.000), stdev = 1.304
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala
[info] # Run progress: 63.36% complete, ETA 00:23:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 119572.406 ops/s
[info] # Warmup Iteration   2: 182008.224 ops/s
[info] # Warmup Iteration   3: 185904.122 ops/s
[info] Iteration   1: 184112.446 ops/s
[info]                  ·gc.alloc.rate:                   978.652 MB/sec
[info]                  ·gc.alloc.rate.norm:              8368.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.712 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      983.334 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8408.038 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 182174.463 ops/s
[info]                  ·gc.alloc.rate:                   968.503 MB/sec
[info]                  ·gc.alloc.rate.norm:              8368.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.540 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      988.816 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8543.513 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 183276.490 ops/s
[info]                  ·gc.alloc.rate:                   974.288 MB/sec
[info]                  ·gc.alloc.rate.norm:              8368.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.715 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      995.381 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8549.169 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 180839.841 ops/s
[info]                  ·gc.alloc.rate:                   961.350 MB/sec
[info]                  ·gc.alloc.rate.norm:              8368.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.181 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      666.388 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5800.525 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 178600.394 ops/s
[info]                  ·gc.alloc.rate:                   949.808 MB/sec
[info]                  ·gc.alloc.rate.norm:              8368.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.550 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1003.385 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8840.024 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala":
[info]   181800.727 ±(99.9%) 8353.996 ops/s [Average]
[info]   (min, avg, max) = (178600.394, 181800.727, 184112.446), stdev = 2169.506
[info]   CI (99.9%): [173446.730, 190154.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   966.520 ±(99.9%) 43.797 MB/sec [Average]
[info]   (min, avg, max) = (949.808, 966.520, 978.652), stdev = 11.374
[info]   CI (99.9%): [922.724, 1010.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   8368.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8368.002, 8368.002, 8368.002), stdev = 0.001
[info]   CI (99.9%): [8368.002, 8368.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.083), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.540 ±(99.9%) 0.837 B/op [Average]
[info]   (min, avg, max) = (0.181, 0.540, 0.715), stdev = 0.217
[info]   CI (99.9%): [≈ 0, 1.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   927.461 ±(99.9%) 562.718 MB/sec [Average]
[info]   (min, avg, max) = (666.388, 927.461, 1003.385), stdev = 146.136
[info]   CI (99.9%): [364.743, 1490.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   8028.254 ±(99.9%) 4833.605 B/op [Average]
[info]   (min, avg, max) = (5800.525, 8028.254, 8840.024), stdev = 1255.272
[info]   CI (99.9%): [3194.649, 12861.859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala
[info] # Run progress: 63.70% complete, ETA 00:22:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 325995.283 ops/s
[info] # Warmup Iteration   2: 350603.938 ops/s
[info] # Warmup Iteration   3: 341269.142 ops/s
[info] Iteration   1: 338728.992 ops/s
[info]                  ·gc.alloc.rate:                   657.828 MB/sec
[info]                  ·gc.alloc.rate.norm:              3056.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.159 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.739 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      663.291 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3081.380 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 354434.680 ops/s
[info]                  ·gc.alloc.rate:                   688.410 MB/sec
[info]                  ·gc.alloc.rate.norm:              3056.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.462 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      661.681 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2937.345 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 356328.845 ops/s
[info]                  ·gc.alloc.rate:                   691.929 MB/sec
[info]                  ·gc.alloc.rate.norm:              3056.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.092 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      661.200 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2920.279 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 343843.924 ops/s
[info]                  ·gc.alloc.rate:                   667.612 MB/sec
[info]                  ·gc.alloc.rate.norm:              3056.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.095 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      661.774 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3029.280 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 347616.925 ops/s
[info]                  ·gc.alloc.rate:                   674.847 MB/sec
[info]                  ·gc.alloc.rate.norm:              3056.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      662.684 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3000.921 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala":
[info]   348190.673 ±(99.9%) 28162.682 ops/s [Average]
[info]   (min, avg, max) = (338728.992, 348190.673, 356328.845), stdev = 7313.759
[info]   CI (99.9%): [320027.991, 376353.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   676.125 ±(99.9%) 54.781 MB/sec [Average]
[info]   (min, avg, max) = (657.828, 676.125, 691.929), stdev = 14.227
[info]   CI (99.9%): [621.344, 730.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3056.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3056.001, 3056.001, 3056.001), stdev = 0.001
[info]   CI (99.9%): [3056.001, 3056.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.061 ±(99.9%) 0.261 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.061, 0.159), stdev = 0.068
[info]   CI (99.9%): [≈ 0, 0.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.278 ±(99.9%) 1.204 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.278, 0.739), stdev = 0.313
[info]   CI (99.9%): [≈ 0, 1.482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   662.126 ±(99.9%) 3.249 MB/sec [Average]
[info]   (min, avg, max) = (661.200, 662.126, 663.291), stdev = 0.844
[info]   CI (99.9%): [658.877, 665.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2993.841 ±(99.9%) 255.221 B/op [Average]
[info]   (min, avg, max) = (2920.279, 2993.841, 3081.380), stdev = 66.280
[info]   CI (99.9%): [2738.620, 3249.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala
[info] # Run progress: 64.04% complete, ETA 00:22:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 200253.339 ops/s
[info] # Warmup Iteration   2: 277238.335 ops/s
[info] # Warmup Iteration   3: 294656.386 ops/s
[info] Iteration   1: 294849.953 ops/s
[info]                  ·gc.alloc.rate:                   290.739 MB/sec
[info]                  ·gc.alloc.rate.norm:              1552.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.779 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1365.380 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 291143.937 ops/s
[info]                  ·gc.alloc.rate:                   287.073 MB/sec
[info]                  ·gc.alloc.rate.norm:              1552.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.774 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1382.790 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 284690.248 ops/s
[info]                  ·gc.alloc.rate:                   280.689 MB/sec
[info]                  ·gc.alloc.rate.norm:              1552.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.230 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      320.706 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1773.265 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 286658.700 ops/s
[info]                  ·gc.alloc.rate:                   282.658 MB/sec
[info]                  ·gc.alloc.rate.norm:              1552.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.114 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      320.740 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1761.099 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 286442.023 ops/s
[info]                  ·gc.alloc.rate:                   282.454 MB/sec
[info]                  ·gc.alloc.rate.norm:              1552.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      322.749 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1773.407 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala":
[info]   288756.972 ±(99.9%) 16007.058 ops/s [Average]
[info]   (min, avg, max) = (284690.248, 288756.972, 294849.953), stdev = 4156.982
[info]   CI (99.9%): [272749.915, 304764.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   284.723 ±(99.9%) 15.806 MB/sec [Average]
[info]   (min, avg, max) = (280.689, 284.723, 290.739), stdev = 4.105
[info]   CI (99.9%): [268.916, 300.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1552.002 ±(99.9%) 0.003 B/op [Average]
[info]   (min, avg, max) = (1552.001, 1552.002, 1552.003), stdev = 0.001
[info]   CI (99.9%): [1551.999, 1552.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.069 ±(99.9%) 0.396 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.069, 0.230), stdev = 0.103
[info]   CI (99.9%): [≈ 0, 0.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   295.150 ±(99.9%) 138.438 MB/sec [Average]
[info]   (min, avg, max) = (255.774, 295.150, 322.749), stdev = 35.952
[info]   CI (99.9%): [156.712, 433.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1611.188 ±(99.9%) 834.011 B/op [Average]
[info]   (min, avg, max) = (1365.380, 1611.188, 1773.407), stdev = 216.590
[info]   CI (99.9%): [777.178, 2445.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala
[info] # Run progress: 64.38% complete, ETA 00:22:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1026369.786 ops/s
[info] # Warmup Iteration   2: 1152778.919 ops/s
[info] # Warmup Iteration   3: 1188240.511 ops/s
[info] Iteration   1: 1197136.438 ops/s
[info]                  ·gc.alloc.rate:                   888.267 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.082 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.364 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 859.122 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1186516.920 ops/s
[info]                  ·gc.alloc.rate:                   880.532 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.138 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      979.214 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1298.900 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1184254.447 ops/s
[info]                  ·gc.alloc.rate:                   878.806 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.111 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      982.153 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1305.357 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1198004.998 ops/s
[info]                  ·gc.alloc.rate:                   889.128 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.055 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.861 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 862.884 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1154726.460 ops/s
[info]                  ·gc.alloc.rate:                   857.136 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.142 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      989.106 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1347.833 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala":
[info]   1184127.852 ±(99.9%) 67577.540 ops/s [Average]
[info]   (min, avg, max) = (1154726.460, 1184127.852, 1198004.998), stdev = 17549.673
[info]   CI (99.9%): [1116550.312, 1251705.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   878.774 ±(99.9%) 49.784 MB/sec [Average]
[info]   (min, avg, max) = (857.136, 878.774, 889.128), stdev = 12.929
[info]   CI (99.9%): [828.990, 928.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1168.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1168.000, 1168.000, 1168.000), stdev = 0.001
[info]   CI (99.9%): [1168.000, 1168.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.104), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.105 ±(99.9%) 0.143 B/op [Average]
[info]   (min, avg, max) = (0.055, 0.105, 0.142), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   852.140 ±(99.9%) 692.732 MB/sec [Average]
[info]   (min, avg, max) = (653.364, 852.140, 989.106), stdev = 179.900
[info]   CI (99.9%): [159.408, 1544.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1134.819 ±(99.9%) 965.234 B/op [Average]
[info]   (min, avg, max) = (859.122, 1134.819, 1347.833), stdev = 250.668
[info]   CI (99.9%): [169.585, 2100.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 64.73% complete, ETA 00:22:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1020438.030 ops/s
[info] # Warmup Iteration   2: 924619.878 ops/s
[info] # Warmup Iteration   3: 1095510.339 ops/s
[info] Iteration   1: 1128571.952 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1128262.439 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1117436.851 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1118300.734 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1125218.639 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc":
[info]   1123558.123 ±(99.9%) 20659.026 ops/s [Average]
[info]   (min, avg, max) = (1117436.851, 1123558.123, 1128571.952), stdev = 5365.083
[info]   CI (99.9%): [1102899.097, 1144217.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce
[info] # Run progress: 65.07% complete, ETA 00:22:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2977.971 ops/s
[info] # Warmup Iteration   2: 4914.283 ops/s
[info] # Warmup Iteration   3: 4938.554 ops/s
[info] Iteration   1: 5097.928 ops/s
[info]                  ·gc.alloc.rate:                   1006.335 MB/sec
[info]                  ·gc.alloc.rate.norm:              310624.086 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19.279 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      970.027 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 299416.877 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 5024.016 ops/s
[info]                  ·gc.alloc.rate:                   991.694 MB/sec
[info]                  ·gc.alloc.rate.norm:              310624.081 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.521 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      971.990 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 304452.216 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 5087.066 ops/s
[info]                  ·gc.alloc.rate:                   1003.911 MB/sec
[info]                  ·gc.alloc.rate.norm:              310624.080 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.440 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      975.111 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 301712.906 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 5096.515 ops/s
[info]                  ·gc.alloc.rate:                   1005.858 MB/sec
[info]                  ·gc.alloc.rate.norm:              310624.086 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19.283 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      981.413 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 303075.076 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 5075.832 ops/s
[info]                  ·gc.alloc.rate:                   1001.731 MB/sec
[info]                  ·gc.alloc.rate.norm:              310624.080 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25.817 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      986.758 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 305980.962 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce":
[info]   5076.271 ±(99.9%) 117.527 ops/s [Average]
[info]   (min, avg, max) = (5024.016, 5076.271, 5097.928), stdev = 30.521
[info]   CI (99.9%): [4958.745, 5193.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1001.906 ±(99.9%) 23.069 MB/sec [Average]
[info]   (min, avg, max) = (991.694, 1001.906, 1006.335), stdev = 5.991
[info]   CI (99.9%): [978.837, 1024.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   310624.083 ±(99.9%) 0.012 B/op [Average]
[info]   (min, avg, max) = (310624.080, 310624.083, 310624.086), stdev = 0.003
[info]   CI (99.9%): [310624.071, 310624.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.050, 0.083), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   15.468 ±(99.9%) 33.221 B/op [Average]
[info]   (min, avg, max) = (6.440, 15.468, 25.817), stdev = 8.627
[info]   CI (99.9%): [≈ 0, 48.689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   977.060 ±(99.9%) 26.676 MB/sec [Average]
[info]   (min, avg, max) = (970.027, 977.060, 986.758), stdev = 6.928
[info]   CI (99.9%): [950.384, 1003.735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   302927.607 ±(99.9%) 9716.656 B/op [Average]
[info]   (min, avg, max) = (299416.877, 302927.607, 305980.962), stdev = 2523.385
[info]   CI (99.9%): [293210.952, 312644.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala
[info] # Run progress: 65.41% complete, ETA 00:21:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21634.622 ops/s
[info] # Warmup Iteration   2: 32250.357 ops/s
[info] # Warmup Iteration   3: 31695.346 ops/s
[info] Iteration   1: 32893.235 ops/s
[info]                  ·gc.alloc.rate:                   558.899 MB/sec
[info]                  ·gc.alloc.rate.norm:              26744.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4.110 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     196.647 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      583.780 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27934.618 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 32385.557 ops/s
[info]                  ·gc.alloc.rate:                   550.410 MB/sec
[info]                  ·gc.alloc.rate.norm:              26744.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.942 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31774.540 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 32846.750 ops/s
[info]                  ·gc.alloc.rate:                   558.260 MB/sec
[info]                  ·gc.alloc.rate.norm:              26744.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.990 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      650.962 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31185.010 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 31801.765 ops/s
[info]                  ·gc.alloc.rate:                   540.382 MB/sec
[info]                  ·gc.alloc.rate.norm:              26744.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.060 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      325.066 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16087.814 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 32525.912 ops/s
[info]                  ·gc.alloc.rate:                   552.733 MB/sec
[info]                  ·gc.alloc.rate.norm:              26744.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      650.837 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31490.801 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala":
[info]   32490.644 ±(99.9%) 1695.740 ops/s [Average]
[info]   (min, avg, max) = (31801.765, 32490.644, 32893.235), stdev = 440.378
[info]   CI (99.9%): [30794.904, 34186.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   552.137 ±(99.9%) 28.862 MB/sec [Average]
[info]   (min, avg, max) = (540.382, 552.137, 558.899), stdev = 7.495
[info]   CI (99.9%): [523.275, 580.999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   26744.013 ±(99.9%) 0.005 B/op [Average]
[info]   (min, avg, max) = (26744.012, 26744.013, 26744.016), stdev = 0.001
[info]   CI (99.9%): [26744.008, 26744.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.864 ±(99.9%) 6.988 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.864, 4.110), stdev = 1.815
[info]   CI (99.9%): [≈ 0, 7.851] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   41.346 ±(99.9%) 334.324 B/op [Average]
[info]   (min, avg, max) = (1.012, 41.346, 196.647), stdev = 86.823
[info]   CI (99.9%): [≈ 0, 375.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   572.918 ±(99.9%) 545.501 MB/sec [Average]
[info]   (min, avg, max) = (325.066, 572.918, 653.942), stdev = 141.665
[info]   CI (99.9%): [27.416, 1118.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   27694.556 ±(99.9%) 25688.089 B/op [Average]
[info]   (min, avg, max) = (16087.814, 27694.556, 31774.540), stdev = 6671.115
[info]   CI (99.9%): [2006.467, 53382.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 5.000), stdev = 1.643
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson
[info] # Run progress: 65.75% complete, ETA 00:21:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1981.753 ops/s
[info] # Warmup Iteration   2: 4497.753 ops/s
[info] # Warmup Iteration   3: 4607.910 ops/s
[info] Iteration   1: 4630.840 ops/s
[info]                  ·gc.alloc.rate:                   1175.906 MB/sec
[info]                  ·gc.alloc.rate.norm:              399728.088 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.073 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1308.968 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 444960.159 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 4648.672 ops/s
[info]                  ·gc.alloc.rate:                   1180.548 MB/sec
[info]                  ·gc.alloc.rate.norm:              399728.088 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28.188 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1321.319 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 447392.427 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 4603.283 ops/s
[info]                  ·gc.alloc.rate:                   1169.037 MB/sec
[info]                  ·gc.alloc.rate.norm:              399728.089 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      997.242 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 340986.441 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 4649.687 ops/s
[info]                  ·gc.alloc.rate:                   1180.917 MB/sec
[info]                  ·gc.alloc.rate.norm:              399728.095 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1337.100 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 452594.350 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 4658.633 ops/s
[info]                  ·gc.alloc.rate:                   1183.135 MB/sec
[info]                  ·gc.alloc.rate.norm:              399728.088 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14.064 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1007.014 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 340224.659 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson":
[info]   4638.223 ±(99.9%) 84.637 ops/s [Average]
[info]   (min, avg, max) = (4603.283, 4638.223, 4658.633), stdev = 21.980
[info]   CI (99.9%): [4553.586, 4722.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1177.909 ±(99.9%) 21.616 MB/sec [Average]
[info]   (min, avg, max) = (1169.037, 1177.909, 1183.135), stdev = 5.614
[info]   CI (99.9%): [1156.293, 1199.524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   399728.089 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (399728.088, 399728.089, 399728.095), stdev = 0.003
[info]   CI (99.9%): [399728.078, 399728.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.083), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   9.865 ±(99.9%) 45.389 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.865, 28.188), stdev = 11.787
[info]   CI (99.9%): [≈ 0, 55.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1194.329 ±(99.9%) 676.833 MB/sec [Average]
[info]   (min, avg, max) = (997.242, 1194.329, 1337.100), stdev = 175.771
[info]   CI (99.9%): [517.496, 1871.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   405231.607 ±(99.9%) 227420.108 B/op [Average]
[info]   (min, avg, max) = (340224.659, 405231.607, 452594.350), stdev = 59060.280
[info]   CI (99.9%): [177811.499, 632651.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce
[info] # Run progress: 66.10% complete, ETA 00:21:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10088.241 ops/s
[info] # Warmup Iteration   2: 13950.104 ops/s
[info] # Warmup Iteration   3: 14185.782 ops/s
[info] Iteration   1: 14101.642 ops/s
[info]                  ·gc.alloc.rate:                   883.870 MB/sec
[info]                  ·gc.alloc.rate.norm:              98672.031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.969 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      968.245 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 108091.422 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 14032.761 ops/s
[info]                  ·gc.alloc.rate:                   879.886 MB/sec
[info]                  ·gc.alloc.rate.norm:              98694.528 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16.342 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      968.399 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 108622.792 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 14150.355 ops/s
[info]                  ·gc.alloc.rate:                   887.975 MB/sec
[info]                  ·gc.alloc.rate.norm:              98736.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.261 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      972.480 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 108132.316 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 14171.439 ops/s
[info]                  ·gc.alloc.rate:                   888.966 MB/sec
[info]                  ·gc.alloc.rate.norm:              98736.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.247 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      650.746 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 72277.321 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 14027.798 ops/s
[info]                  ·gc.alloc.rate:                   880.217 MB/sec
[info]                  ·gc.alloc.rate.norm:              98736.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.336 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      981.096 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 110051.900 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce":
[info]   14096.799 ±(99.9%) 253.417 ops/s [Average]
[info]   (min, avg, max) = (14027.798, 14096.799, 14171.439), stdev = 65.812
[info]   CI (99.9%): [13843.382, 14350.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   884.183 ±(99.9%) 16.285 MB/sec [Average]
[info]   (min, avg, max) = (879.886, 884.183, 888.966), stdev = 4.229
[info]   CI (99.9%): [867.898, 900.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   98714.931 ±(99.9%) 115.397 B/op [Average]
[info]   (min, avg, max) = (98672.031, 98714.931, 98736.036), stdev = 29.968
[info]   CI (99.9%): [98599.534, 98830.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.079, 0.146), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   8.831 ±(99.9%) 19.486 B/op [Average]
[info]   (min, avg, max) = (2.336, 8.831, 16.342), stdev = 5.060
[info]   CI (99.9%): [≈ 0, 28.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   908.193 ±(99.9%) 554.538 MB/sec [Average]
[info]   (min, avg, max) = (650.746, 908.193, 981.096), stdev = 144.012
[info]   CI (99.9%): [353.655, 1462.732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   101435.150 ±(99.9%) 62838.909 B/op [Average]
[info]   (min, avg, max) = (72277.321, 101435.150, 110051.900), stdev = 16319.065
[info]   CI (99.9%): [38596.241, 164274.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala
[info] # Run progress: 66.44% complete, ETA 00:21:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 249318.559 ops/s
[info] # Warmup Iteration   2: 282860.823 ops/s
[info] # Warmup Iteration   3: 283504.332 ops/s
[info] Iteration   1: 284012.331 ops/s
[info]                  ·gc.alloc.rate:                   1001.921 MB/sec
[info]                  ·gc.alloc.rate.norm:              5552.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.461 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      975.594 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5406.116 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 279965.824 ops/s
[info]                  ·gc.alloc.rate:                   987.352 MB/sec
[info]                  ·gc.alloc.rate.norm:              5552.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.585 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      977.298 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5495.465 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 279581.789 ops/s
[info]                  ·gc.alloc.rate:                   986.143 MB/sec
[info]                  ·gc.alloc.rate.norm:              5552.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.586 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      981.452 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5525.591 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 285747.237 ops/s
[info]                  ·gc.alloc.rate:                   1008.163 MB/sec
[info]                  ·gc.alloc.rate.norm:              5552.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.344 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      986.400 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5432.152 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 280570.849 ops/s
[info]                  ·gc.alloc.rate:                   990.083 MB/sec
[info]                  ·gc.alloc.rate.norm:              5552.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.467 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      991.917 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5562.286 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala":
[info]   281975.606 ±(99.9%) 10565.857 ops/s [Average]
[info]   (min, avg, max) = (279581.789, 281975.606, 285747.237), stdev = 2743.920
[info]   CI (99.9%): [271409.749, 292541.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   994.732 ±(99.9%) 37.626 MB/sec [Average]
[info]   (min, avg, max) = (986.143, 994.732, 1008.163), stdev = 9.771
[info]   CI (99.9%): [957.106, 1032.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5552.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5552.001, 5552.001, 5552.002), stdev = 0.001
[info]   CI (99.9%): [5552.001, 5552.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.104), stdev = 0.017
[info]   CI (99.9%): [0.020, 0.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.489 ±(99.9%) 0.389 B/op [Average]
[info]   (min, avg, max) = (0.344, 0.489, 0.586), stdev = 0.101
[info]   CI (99.9%): [0.099, 0.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   982.532 ±(99.9%) 25.812 MB/sec [Average]
[info]   (min, avg, max) = (975.594, 982.532, 991.917), stdev = 6.703
[info]   CI (99.9%): [956.721, 1008.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5484.322 ±(99.9%) 249.132 B/op [Average]
[info]   (min, avg, max) = (5406.116, 5484.322, 5562.286), stdev = 64.699
[info]   CI (99.9%): [5235.191, 5733.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 5.000), stdev = 1.304
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 66.78% complete, ETA 00:20:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 283688.843 ops/s
[info] # Warmup Iteration   2: 310655.869 ops/s
[info] # Warmup Iteration   3: 315057.061 ops/s
[info] Iteration   1: 315447.449 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 316591.677 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 315762.699 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 314189.271 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 316098.450 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   315617.909 ±(99.9%) 3481.679 ops/s [Average]
[info]   (min, avg, max) = (314189.271, 315617.909, 316591.677), stdev = 904.181
[info]   CI (99.9%): [312136.230, 319099.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson
[info] # Run progress: 67.12% complete, ETA 00:20:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10016.048 ops/s
[info] # Warmup Iteration   2: 15105.391 ops/s
[info] # Warmup Iteration   3: 14860.156 ops/s
[info] Iteration   1: 14944.652 ops/s
[info]                  ·gc.alloc.rate:                   849.389 MB/sec
[info]                  ·gc.alloc.rate.norm:              89464.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.576 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      962.372 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 101364.217 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 14947.250 ops/s
[info]                  ·gc.alloc.rate:                   838.494 MB/sec
[info]                  ·gc.alloc.rate.norm:              88293.610 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13.151 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      641.440 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 67543.725 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 15055.308 ops/s
[info]                  ·gc.alloc.rate:                   835.939 MB/sec
[info]                  ·gc.alloc.rate.norm:              87391.897 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.352 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      965.171 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 100902.286 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 15338.936 ops/s
[info]                  ·gc.alloc.rate:                   852.036 MB/sec
[info]                  ·gc.alloc.rate.norm:              87392.031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.679 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      647.028 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66364.704 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 15661.327 ops/s
[info]                  ·gc.alloc.rate:                   870.848 MB/sec
[info]                  ·gc.alloc.rate.norm:              87521.988 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.368 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      975.465 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 98036.233 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson":
[info]   15189.494 ±(99.9%) 1189.336 ops/s [Average]
[info]   (min, avg, max) = (14944.652, 15189.494, 15661.327), stdev = 308.867
[info]   CI (99.9%): [14000.159, 16378.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   849.341 ±(99.9%) 53.323 MB/sec [Average]
[info]   (min, avg, max) = (835.939, 849.341, 870.848), stdev = 13.848
[info]   CI (99.9%): [796.018, 902.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   88012.707 ±(99.9%) 3442.309 B/op [Average]
[info]   (min, avg, max) = (87391.897, 88012.707, 89464.010), stdev = 893.957
[info]   CI (99.9%): [84570.398, 91455.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.125), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   8.625 ±(99.9%) 13.231 B/op [Average]
[info]   (min, avg, max) = (4.352, 8.625, 13.151), stdev = 3.436
[info]   CI (99.9%): [≈ 0, 21.856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   838.295 ±(99.9%) 682.454 MB/sec [Average]
[info]   (min, avg, max) = (641.440, 838.295, 975.465), stdev = 177.231
[info]   CI (99.9%): [155.842, 1520.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   86842.233 ±(99.9%) 70099.710 B/op [Average]
[info]   (min, avg, max) = (66364.704, 86842.233, 101364.217), stdev = 18204.672
[info]   CI (99.9%): [16742.523, 156941.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 4.000), stdev = 0.837
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce
[info] # Run progress: 67.47% complete, ETA 00:20:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 586493.506 ops/s
[info] # Warmup Iteration   2: 912207.735 ops/s
[info] # Warmup Iteration   3: 926345.760 ops/s
[info] Iteration   1: 935231.088 ops/s
[info]                  ·gc.alloc.rate:                   3028.182 MB/sec
[info]                  ·gc.alloc.rate.norm:              5096.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.140 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3008.680 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5063.183 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 928378.320 ops/s
[info]                  ·gc.alloc.rate:                   3006.447 MB/sec
[info]                  ·gc.alloc.rate.norm:              5096.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.247 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3037.351 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5148.382 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 927560.603 ops/s
[info]                  ·gc.alloc.rate:                   3003.757 MB/sec
[info]                  ·gc.alloc.rate.norm:              5096.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.283 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3051.338 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5176.724 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 913795.871 ops/s
[info]                  ·gc.alloc.rate:                   2958.408 MB/sec
[info]                  ·gc.alloc.rate.norm:              5096.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3057.901 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5267.381 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 932995.964 ops/s
[info]                  ·gc.alloc.rate:                   3020.689 MB/sec
[info]                  ·gc.alloc.rate.norm:              5096.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.176 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2722.994 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4593.778 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce":
[info]   927592.369 ±(99.9%) 32131.020 ops/s [Average]
[info]   (min, avg, max) = (913795.871, 927592.369, 935231.088), stdev = 8344.324
[info]   CI (99.9%): [895461.349, 959723.389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.alloc.rate":
[info]   3003.497 ±(99.9%) 104.513 MB/sec [Average]
[info]   (min, avg, max) = (2958.408, 3003.497, 3028.182), stdev = 27.142
[info]   CI (99.9%): [2898.984, 3108.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5096.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5096.000, 5096.000, 5096.000), stdev = 0.001
[info]   CI (99.9%): [5096.000, 5096.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.104 ±(99.9%) 0.220 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.104, 0.167), stdev = 0.057
[info]   CI (99.9%): [≈ 0, 0.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.176 ±(99.9%) 0.372 B/op [Average]
[info]   (min, avg, max) = (0.036, 0.176, 0.283), stdev = 0.097
[info]   CI (99.9%): [≈ 0, 0.548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2975.653 ±(99.9%) 548.724 MB/sec [Average]
[info]   (min, avg, max) = (2722.994, 2975.653, 3057.901), stdev = 142.502
[info]   CI (99.9%): [2426.929, 3524.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5049.890 ±(99.9%) 1021.155 B/op [Average]
[info]   (min, avg, max) = (4593.778, 5049.890, 5267.381), stdev = 265.191
[info]   CI (99.9%): [4028.735, 6071.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.count":
[info]   44.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.800, 9.000), stdev = 0.447
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 8.000, 9.000), stdev = 0.707
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala
[info] # Run progress: 67.81% complete, ETA 00:20:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 770075.059 ops/s
[info] # Warmup Iteration   2: 1819741.732 ops/s
[info] # Warmup Iteration   3: 1804905.208 ops/s
[info] Iteration   1: 1823588.083 ops/s
[info]                  ·gc.alloc.rate:                   1714.498 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.126 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1984.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1712.650 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 1761561.156 ops/s
[info]                  ·gc.alloc.rate:                   1656.315 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.130 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1669.868 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1492.110 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 1770450.508 ops/s
[info]                  ·gc.alloc.rate:                   1664.750 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.074 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.492 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1194.395 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 1811625.493 ops/s
[info]                  ·gc.alloc.rate:                   1703.218 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.090 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2023.615 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1758.407 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 1811315.496 ops/s
[info]                  ·gc.alloc.rate:                   1703.688 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.145 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1692.736 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1470.487 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala":
[info]   1795708.147 ±(99.9%) 106819.934 ops/s [Average]
[info]   (min, avg, max) = (1761561.156, 1795708.147, 1823588.083), stdev = 27740.798
[info]   CI (99.9%): [1688888.213, 1902528.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1688.494 ±(99.9%) 100.469 MB/sec [Average]
[info]   (min, avg, max) = (1656.315, 1688.494, 1714.498), stdev = 26.092
[info]   CI (99.9%): [1588.024, 1788.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1480.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1480.000, 1480.000, 1480.000), stdev = 0.001
[info]   CI (99.9%): [1480.000, 1480.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.129 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.129, 0.167), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.113 ±(99.9%) 0.114 B/op [Average]
[info]   (min, avg, max) = (0.074, 0.113, 0.145), stdev = 0.030
[info]   CI (99.9%): [≈ 0, 0.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1742.744 ±(99.9%) 1062.092 MB/sec [Average]
[info]   (min, avg, max) = (1343.492, 1742.744, 2023.615), stdev = 275.822
[info]   CI (99.9%): [680.652, 2804.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1525.610 ±(99.9%) 867.555 B/op [Average]
[info]   (min, avg, max) = (1194.395, 1525.610, 1758.407), stdev = 225.301
[info]   CI (99.9%): [658.055, 2393.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 0.837
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.400, 8.000), stdev = 1.140
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala
[info] # Run progress: 68.15% complete, ETA 00:20:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8672417.607 ops/s
[info] # Warmup Iteration   2: 9280391.408 ops/s
[info] # Warmup Iteration   3: 9471073.689 ops/s
[info] Iteration   1: 9317834.006 ops/s
[info]                  ·gc.alloc.rate:                   2320.420 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2335.749 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 394.590 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 9198693.399 ops/s
[info]                  ·gc.alloc.rate:                   2290.421 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2352.783 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 402.673 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 9460126.771 ops/s
[info]                  ·gc.alloc.rate:                   2356.583 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2366.744 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 393.690 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 9549845.309 ops/s
[info]                  ·gc.alloc.rate:                   2378.287 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2373.526 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 391.215 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 9624424.594 ops/s
[info]                  ·gc.alloc.rate:                   2397.818 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2378.814 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 388.893 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala":
[info]   9430184.816 ±(99.9%) 664599.352 ops/s [Average]
[info]   (min, avg, max) = (9198693.399, 9430184.816, 9624424.594), stdev = 172594.341
[info]   CI (99.9%): [8765585.463, 10094784.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2348.706 ±(99.9%) 167.251 MB/sec [Average]
[info]   (min, avg, max) = (2290.421, 2348.706, 2397.818), stdev = 43.435
[info]   CI (99.9%): [2181.455, 2515.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   392.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (392.000, 392.000, 392.000), stdev = 0.001
[info]   CI (99.9%): [392.000, 392.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.146), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.014 ±(99.9%) 0.026 B/op [Average]
[info]   (min, avg, max) = (0.007, 0.014, 0.025), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   2361.523 ±(99.9%) 67.000 MB/sec [Average]
[info]   (min, avg, max) = (2335.749, 2361.523, 2378.814), stdev = 17.400
[info]   CI (99.9%): [2294.523, 2428.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   394.212 ±(99.9%) 20.126 B/op [Average]
[info]   (min, avg, max) = (388.893, 394.212, 402.673), stdev = 5.227
[info]   CI (99.9%): [374.086, 414.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.count":
[info]   35.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.000, 7.000), stdev = 0.001
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson
[info] # Run progress: 68.49% complete, ETA 00:19:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 75222.989 ops/s
[info] # Warmup Iteration   2: 320170.328 ops/s
[info] # Warmup Iteration   3: 324143.371 ops/s
[info] Iteration   1: 326185.157 ops/s
[info]                  ·gc.alloc.rate:                   1987.465 MB/sec
[info]                  ·gc.alloc.rate.norm:              9592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.603 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1987.659 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9592.937 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 323154.382 ops/s
[info]                  ·gc.alloc.rate:                   1969.605 MB/sec
[info]                  ·gc.alloc.rate.norm:              9592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.608 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2007.220 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9775.185 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 323089.986 ops/s
[info]                  ·gc.alloc.rate:                   1968.811 MB/sec
[info]                  ·gc.alloc.rate.norm:              9592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.608 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2019.871 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9840.764 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 325176.913 ops/s
[info]                  ·gc.alloc.rate:                   1981.292 MB/sec
[info]                  ·gc.alloc.rate.norm:              9592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.504 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028.578 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9820.929 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 324203.410 ops/s
[info]                  ·gc.alloc.rate:                   1975.816 MB/sec
[info]                  ·gc.alloc.rate.norm:              9592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.404 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2034.328 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9876.057 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson":
[info]   324361.970 ±(99.9%) 5126.383 ops/s [Average]
[info]   (min, avg, max) = (323089.986, 324361.970, 326185.157), stdev = 1331.305
[info]   CI (99.9%): [319235.587, 329488.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1976.598 ±(99.9%) 30.459 MB/sec [Average]
[info]   (min, avg, max) = (1968.811, 1976.598, 1987.465), stdev = 7.910
[info]   CI (99.9%): [1946.139, 2007.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   9592.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (9592.001, 9592.001, 9592.001), stdev = 0.001
[info]   CI (99.9%): [9592.001, 9592.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.112 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.112, 0.125), stdev = 0.019
[info]   CI (99.9%): [0.041, 0.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.545 ±(99.9%) 0.349 B/op [Average]
[info]   (min, avg, max) = (0.404, 0.545, 0.608), stdev = 0.091
[info]   CI (99.9%): [0.196, 0.895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   2015.531 ±(99.9%) 71.737 MB/sec [Average]
[info]   (min, avg, max) = (1987.659, 2015.531, 2034.328), stdev = 18.630
[info]   CI (99.9%): [1943.794, 2087.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   9781.175 ±(99.9%) 428.804 B/op [Average]
[info]   (min, avg, max) = (9592.937, 9781.175, 9876.057), stdev = 111.359
[info]   CI (99.9%): [9352.371, 10209.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.200, 8.000), stdev = 0.447
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce
[info] # Run progress: 68.84% complete, ETA 00:19:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 524362.153 ops/s
[info] # Warmup Iteration   2: 1014779.220 ops/s
[info] # Warmup Iteration   3: 1035124.483 ops/s
[info] Iteration   1: 1019934.294 ops/s
[info]                  ·gc.alloc.rate:                   2245.209 MB/sec
[info]                  ·gc.alloc.rate.norm:              3464.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.193 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2310.897 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3565.347 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 1030781.681 ops/s
[info]                  ·gc.alloc.rate:                   2269.152 MB/sec
[info]                  ·gc.alloc.rate.norm:              3464.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.254 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2336.243 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3566.419 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 1027114.592 ops/s
[info]                  ·gc.alloc.rate:                   2260.346 MB/sec
[info]                  ·gc.alloc.rate.norm:              3464.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.128 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2355.527 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3609.866 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 1035224.016 ops/s
[info]                  ·gc.alloc.rate:                   2278.568 MB/sec
[info]                  ·gc.alloc.rate.norm:              3464.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.158 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028.540 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3083.895 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 990207.584 ops/s
[info]                  ·gc.alloc.rate:                   2179.414 MB/sec
[info]                  ·gc.alloc.rate.norm:              3464.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.232 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2374.542 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3774.141 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce":
[info]   1020652.434 ±(99.9%) 68992.556 ops/s [Average]
[info]   (min, avg, max) = (990207.584, 1020652.434, 1035224.016), stdev = 17917.148
[info]   CI (99.9%): [951659.878, 1089644.990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.alloc.rate":
[info]   2246.538 ±(99.9%) 152.032 MB/sec [Average]
[info]   (min, avg, max) = (2179.414, 2246.538, 2278.568), stdev = 39.482
[info]   CI (99.9%): [2094.505, 2398.570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   3464.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3464.000, 3464.000, 3464.000), stdev = 0.001
[info]   CI (99.9%): [3464.000, 3464.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.125 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.125, 0.167), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.193 ±(99.9%) 0.199 B/op [Average]
[info]   (min, avg, max) = (0.128, 0.193, 0.254), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   2281.150 ±(99.9%) 551.281 MB/sec [Average]
[info]   (min, avg, max) = (2028.540, 2281.150, 2374.542), stdev = 143.166
[info]   CI (99.9%): [1729.869, 2832.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3519.934 ±(99.9%) 994.969 B/op [Average]
[info]   (min, avg, max) = (3083.895, 3519.934, 3774.141), stdev = 258.390
[info]   CI (99.9%): [2524.965, 4514.903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.count":
[info]   34.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala
[info] # Run progress: 69.18% complete, ETA 00:19:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_6777d793/target/5e31e36e/jackson-module-afterburner-2.9.4.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 1312221.561 ops/s
[info] # Warmup Iteration   2: 3540118.594 ops/s
[info] # Warmup Iteration   3: 3528959.210 ops/s
[info] Iteration   1: 3562808.074 ops/s
[info]                  ·gc.alloc.rate:                   2028.197 MB/sec
[info]                  ·gc.alloc.rate.norm:              896.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1990.306 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 879.261 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 3615622.057 ops/s
[info]                  ·gc.alloc.rate:                   2058.972 MB/sec
[info]                  ·gc.alloc.rate.norm:              896.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.054 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2345.514 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1020.694 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 3577254.052 ops/s
[info]                  ·gc.alloc.rate:                   2036.282 MB/sec
[info]                  ·gc.alloc.rate.norm:              896.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.055 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2022.883 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 890.104 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 3618979.203 ops/s
[info]                  ·gc.alloc.rate:                   2060.048 MB/sec
[info]                  ·gc.alloc.rate.norm:              896.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.054 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030.886 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 883.316 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 3649614.857 ops/s
[info]                  ·gc.alloc.rate:                   2077.895 MB/sec
[info]                  ·gc.alloc.rate.norm:              896.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.045 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035.903 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 877.893 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala":
[info]   3604855.649 ±(99.9%) 134064.133 ops/s [Average]
[info]   (min, avg, max) = (3562808.074, 3604855.649, 3649614.857), stdev = 34816.030
[info]   CI (99.9%): [3470791.516, 3738919.782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   2052.279 ±(99.9%) 76.944 MB/sec [Average]
[info]   (min, avg, max) = (2028.197, 2052.279, 2077.895), stdev = 19.982
[info]   CI (99.9%): [1975.335, 2129.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   896.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (896.000, 896.000, 896.000), stdev = 0.001
[info]   CI (99.9%): [896.000, 896.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.117 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.104, 0.117, 0.125), stdev = 0.011
[info]   CI (99.9%): [0.073, 0.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.051 ±(99.9%) 0.019 B/op [Average]
[info]   (min, avg, max) = (0.045, 0.051, 0.055), stdev = 0.005
[info]   CI (99.9%): [0.032, 0.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   2085.099 ±(99.9%) 564.719 MB/sec [Average]
[info]   (min, avg, max) = (1990.306, 2085.099, 2345.514), stdev = 146.656
[info]   CI (99.9%): [1520.380, 2649.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   910.254 ±(99.9%) 238.432 B/op [Average]
[info]   (min, avg, max) = (877.893, 910.254, 1020.694), stdev = 61.920
[info]   CI (99.9%): [671.821, 1148.686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.400, 9.000), stdev = 0.894
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala
[info] # Run progress: 69.52% complete, ETA 00:19:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11168642.117 ops/s
[info] # Warmup Iteration   2: 12889434.646 ops/s
[info] # Warmup Iteration   3: 12800540.626 ops/s
[info] Iteration   1: 12985614.494 ops/s
[info]                  ·gc.alloc.rate:                   791.971 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.091 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 79.287 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 13122605.059 ops/s
[info]                  ·gc.alloc.rate:                   800.240 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      979.023 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 117.448 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 13673381.139 ops/s
[info]                  ·gc.alloc.rate:                   833.889 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.378 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 75.219 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 13683407.950 ops/s
[info]                  ·gc.alloc.rate:                   834.878 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      983.508 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 113.091 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 13362214.128 ops/s
[info]                  ·gc.alloc.rate:                   814.941 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.386 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 77.440 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala":
[info]   13365444.554 ±(99.9%) 1216428.705 ops/s [Average]
[info]   (min, avg, max) = (12985614.494, 13365444.554, 13683407.950), stdev = 315902.672
[info]   CI (99.9%): [12149015.849, 14581873.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   815.184 ±(99.9%) 74.568 MB/sec [Average]
[info]   (min, avg, max) = (791.971, 815.184, 834.878), stdev = 19.365
[info]   CI (99.9%): [740.616, 889.751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   96.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (96.000, 96.000, 96.000), stdev = 0.001
[info]   CI (99.9%): [96.000, 96.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.096 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.096, 0.125), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.011 ±(99.9%) 0.018 B/op [Average]
[info]   (min, avg, max) = (0.005, 0.011, 0.015), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   785.477 ±(99.9%) 688.275 MB/sec [Average]
[info]   (min, avg, max) = (653.378, 785.477, 983.508), stdev = 178.743
[info]   CI (99.9%): [97.202, 1473.752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   92.497 ±(99.9%) 80.459 B/op [Average]
[info]   (min, avg, max) = (75.219, 92.497, 117.448), stdev = 20.895
[info]   CI (99.9%): [12.038, 172.955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson
[info] # Run progress: 69.86% complete, ETA 00:19:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 130625.401 ops/s
[info] # Warmup Iteration   2: 521441.668 ops/s
[info] # Warmup Iteration   3: 520547.568 ops/s
[info] Iteration   1: 521901.514 ops/s
[info]                  ·gc.alloc.rate:                   1803.498 MB/sec
[info]                  ·gc.alloc.rate.norm:              5440.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.314 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1983.961 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5984.344 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 520089.133 ops/s
[info]                  ·gc.alloc.rate:                   1798.083 MB/sec
[info]                  ·gc.alloc.rate.norm:              5440.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.378 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1669.433 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5050.777 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 528597.131 ops/s
[info]                  ·gc.alloc.rate:                   1827.247 MB/sec
[info]                  ·gc.alloc.rate.norm:              5440.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.124 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1679.182 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4999.188 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 517559.838 ops/s
[info]                  ·gc.alloc.rate:                   1788.616 MB/sec
[info]                  ·gc.alloc.rate.norm:              5440.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.317 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2024.107 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6156.238 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 525010.521 ops/s
[info]                  ·gc.alloc.rate:                   1814.524 MB/sec
[info]                  ·gc.alloc.rate.norm:              5440.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.250 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1693.186 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5076.225 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson":
[info]   522631.627 ±(99.9%) 16558.526 ops/s [Average]
[info]   (min, avg, max) = (517559.838, 522631.627, 528597.131), stdev = 4300.197
[info]   CI (99.9%): [506073.101, 539190.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1806.394 ±(99.9%) 57.582 MB/sec [Average]
[info]   (min, avg, max) = (1788.616, 1806.394, 1827.247), stdev = 14.954
[info]   CI (99.9%): [1748.812, 1863.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5440.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5440.001, 5440.001, 5440.001), stdev = 0.001
[info]   CI (99.9%): [5440.001, 5440.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.092, 0.125), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.276 ±(99.9%) 0.372 B/op [Average]
[info]   (min, avg, max) = (0.124, 0.276, 0.378), stdev = 0.097
[info]   CI (99.9%): [≈ 0, 0.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1809.974 ±(99.9%) 685.107 MB/sec [Average]
[info]   (min, avg, max) = (1669.433, 1809.974, 2024.107), stdev = 177.920
[info]   CI (99.9%): [1124.867, 2495.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   5453.354 ±(99.9%) 2183.825 B/op [Average]
[info]   (min, avg, max) = (4999.188, 5453.354, 6156.238), stdev = 567.132
[info]   CI (99.9%): [3269.530, 7637.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 8.000), stdev = 1.304
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala
[info] # Run progress: 70.21% complete, ETA 00:18:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1017959.655 ops/s
[info] # Warmup Iteration   2: 2007239.024 ops/s
[info] # Warmup Iteration   3: 2134841.616 ops/s
[info] Iteration   1: 2106591.829 ops/s
[info]                  ·gc.alloc.rate:                   1338.248 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.047 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1314.726 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 982.424 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 2122185.993 ops/s
[info]                  ·gc.alloc.rate:                   1348.497 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.077 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1325.759 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 983.138 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 2137003.725 ops/s
[info]                  ·gc.alloc.rate:                   1358.084 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.031 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1334.590 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 982.701 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 2049463.972 ops/s
[info]                  ·gc.alloc.rate:                   1302.127 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.048 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1340.946 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1029.812 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 2038603.054 ops/s
[info]                  ·gc.alloc.rate:                   1295.157 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.096 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.874 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1039.931 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala":
[info]   2090769.715 ±(99.9%) 170066.321 ops/s [Average]
[info]   (min, avg, max) = (2038603.054, 2090769.715, 2137003.725), stdev = 44165.684
[info]   CI (99.9%): [1920703.394, 2260836.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1328.423 ±(99.9%) 108.526 MB/sec [Average]
[info]   (min, avg, max) = (1295.157, 1328.423, 1358.084), stdev = 28.184
[info]   CI (99.9%): [1219.896, 1436.949] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1000.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1000.000, 1000.000, 1000.000), stdev = 0.001
[info]   CI (99.9%): [1000.000, 1000.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.125), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.060 ±(99.9%) 0.102 B/op [Average]
[info]   (min, avg, max) = (0.031, 0.060, 0.096), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1332.579 ±(99.9%) 48.844 MB/sec [Average]
[info]   (min, avg, max) = (1314.726, 1332.579, 1346.874), stdev = 12.685
[info]   CI (99.9%): [1283.735, 1381.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1003.601 ±(99.9%) 110.783 B/op [Average]
[info]   (min, avg, max) = (982.424, 1003.601, 1039.931), stdev = 28.770
[info]   CI (99.9%): [892.818, 1114.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala
[info] # Run progress: 70.55% complete, ETA 00:18:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8629128.430 ops/s
[info] # Warmup Iteration   2: 5009364.143 ops/s
[info] # Warmup Iteration   3: 5074949.324 ops/s
[info] Iteration   1: 5251851.686 ops/s
[info]                  ·gc.alloc.rate:                   693.933 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.009 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 196.633 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 5185375.011 ops/s
[info]                  ·gc.alloc.rate:                   685.166 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.032 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.711 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 199.058 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 5257780.178 ops/s
[info]                  ·gc.alloc.rate:                   694.855 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.474 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 196.511 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 5235231.409 ops/s
[info]                  ·gc.alloc.rate:                   692.085 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658.004 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 197.757 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 5089865.723 ops/s
[info]                  ·gc.alloc.rate:                   672.565 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      659.394 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 203.927 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala":
[info]   5204020.801 ±(99.9%) 269070.296 ops/s [Average]
[info]   (min, avg, max) = (5089865.723, 5204020.801, 5257780.178), stdev = 69876.701
[info]   CI (99.9%): [4934950.506, 5473091.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   687.721 ±(99.9%) 35.748 MB/sec [Average]
[info]   (min, avg, max) = (672.565, 687.721, 694.855), stdev = 9.284
[info]   CI (99.9%): [651.973, 723.469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   208.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (208.000, 208.000, 208.000), stdev = 0.001
[info]   CI (99.9%): [208.000, 208.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.067, 0.104), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.020 ±(99.9%) 0.047 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.032), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   657.119 ±(99.9%) 5.963 MB/sec [Average]
[info]   (min, avg, max) = (655.711, 657.119, 659.394), stdev = 1.549
[info]   CI (99.9%): [651.156, 663.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   198.777 ±(99.9%) 11.770 B/op [Average]
[info]   (min, avg, max) = (196.511, 198.777, 203.927), stdev = 3.057
[info]   CI (99.9%): [187.008, 210.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson
[info] # Run progress: 70.89% complete, ETA 00:18:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 114000.116 ops/s
[info] # Warmup Iteration   2: 400718.941 ops/s
[info] # Warmup Iteration   3: 402208.829 ops/s
[info] Iteration   1: 392119.062 ops/s
[info]                  ·gc.alloc.rate:                   1779.465 MB/sec
[info]                  ·gc.alloc.rate.norm:              7144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.418 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1654.640 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6642.869 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 401990.793 ops/s
[info]                  ·gc.alloc.rate:                   1825.242 MB/sec
[info]                  ·gc.alloc.rate.norm:              7144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.571 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1669.556 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6534.642 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 393938.952 ops/s
[info]                  ·gc.alloc.rate:                   1787.825 MB/sec
[info]                  ·gc.alloc.rate.norm:              7144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.416 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2015.704 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8054.587 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 392554.192 ops/s
[info]                  ·gc.alloc.rate:                   1781.697 MB/sec
[info]                  ·gc.alloc.rate.norm:              7144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.334 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1687.813 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6767.557 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 396225.850 ops/s
[info]                  ·gc.alloc.rate:                   1798.362 MB/sec
[info]                  ·gc.alloc.rate.norm:              7144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.331 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1693.172 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6726.136 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson":
[info]   395365.770 ±(99.9%) 15535.876 ops/s [Average]
[info]   (min, avg, max) = (392119.062, 395365.770, 401990.793), stdev = 4034.618
[info]   CI (99.9%): [379829.894, 410901.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1794.518 ±(99.9%) 71.898 MB/sec [Average]
[info]   (min, avg, max) = (1779.465, 1794.518, 1825.242), stdev = 18.672
[info]   CI (99.9%): [1722.620, 1866.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   7144.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7144.001, 7144.001, 7144.001), stdev = 0.001
[info]   CI (99.9%): [7144.001, 7144.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.104 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.104, 0.146), stdev = 0.026
[info]   CI (99.9%): [0.006, 0.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.414 ±(99.9%) 0.375 B/op [Average]
[info]   (min, avg, max) = (0.331, 0.414, 0.571), stdev = 0.097
[info]   CI (99.9%): [0.039, 0.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1744.177 ±(99.9%) 587.431 MB/sec [Average]
[info]   (min, avg, max) = (1654.640, 1744.177, 2015.704), stdev = 152.554
[info]   CI (99.9%): [1156.746, 2331.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   6945.158 ±(99.9%) 2412.611 B/op [Average]
[info]   (min, avg, max) = (6534.642, 6945.158, 8054.587), stdev = 626.548
[info]   CI (99.9%): [4532.547, 9357.769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 8.000), stdev = 0.894
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala
[info] # Run progress: 71.23% complete, ETA 00:18:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_6777d793/target/5e31e36e/jackson-module-afterburner-2.9.4.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 1496047.237 ops/s
[info] # Warmup Iteration   2: 2663694.797 ops/s
[info] # Warmup Iteration   3: 2636846.956 ops/s
[info] Iteration   1: 2672679.987 ops/s
[info]                  ·gc.alloc.rate:                   1412.517 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.098 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1317.263 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 775.894 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 2615460.998 ops/s
[info]                  ·gc.alloc.rate:                   1382.360 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.088 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1326.052 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 798.110 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 2667948.190 ops/s
[info]                  ·gc.alloc.rate:                   1410.316 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.037 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1334.902 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 787.511 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 2664272.775 ops/s
[info]                  ·gc.alloc.rate:                   1408.321 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.074 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1677.555 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 991.057 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 2644721.405 ops/s
[info]                  ·gc.alloc.rate:                   1397.904 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.050 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.093 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 802.354 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala":
[info]   2653016.671 ±(99.9%) 90623.909 ops/s [Average]
[info]   (min, avg, max) = (2615460.998, 2653016.671, 2672679.987), stdev = 23534.741
[info]   CI (99.9%): [2562392.762, 2743640.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1402.284 ±(99.9%) 48.010 MB/sec [Average]
[info]   (min, avg, max) = (1382.360, 1402.284, 1412.517), stdev = 12.468
[info]   CI (99.9%): [1354.274, 1450.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   832.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (832.000, 832.000, 832.000), stdev = 0.001
[info]   CI (99.9%): [832.000, 832.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.117 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.117, 0.166), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.069 ±(99.9%) 0.099 B/op [Average]
[info]   (min, avg, max) = (0.037, 0.069, 0.098), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1400.773 ±(99.9%) 597.408 MB/sec [Average]
[info]   (min, avg, max) = (1317.263, 1400.773, 1677.555), stdev = 155.145
[info]   CI (99.9%): [803.365, 1998.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   830.985 ±(99.9%) 346.818 B/op [Average]
[info]   (min, avg, max) = (775.894, 830.985, 991.057), stdev = 90.067
[info]   CI (99.9%): [484.167, 1177.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala
[info] # Run progress: 71.58% complete, ETA 00:17:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5920003.325 ops/s
[info] # Warmup Iteration   2: 6755619.514 ops/s
[info] # Warmup Iteration   3: 7045548.819 ops/s
[info] Iteration   1: 6734368.382 ops/s
[info]                  ·gc.alloc.rate:                   1027.055 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      979.317 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 228.845 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 6945723.576 ops/s
[info]                  ·gc.alloc.rate:                   1058.919 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1307.983 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 296.450 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 6783720.035 ops/s
[info]                  ·gc.alloc.rate:                   1034.328 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      985.105 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 228.578 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 6901959.530 ops/s
[info]                  ·gc.alloc.rate:                   1052.523 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      991.256 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 226.030 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 6986892.599 ops/s
[info]                  ·gc.alloc.rate:                   1065.558 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      995.329 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 224.182 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala":
[info]   6870532.824 ±(99.9%) 414092.401 ops/s [Average]
[info]   (min, avg, max) = (6734368.382, 6870532.824, 6986892.599), stdev = 107538.482
[info]   CI (99.9%): [6456440.423, 7284625.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1047.677 ±(99.9%) 63.069 MB/sec [Average]
[info]   (min, avg, max) = (1027.055, 1047.677, 1065.558), stdev = 16.379
[info]   CI (99.9%): [984.608, 1110.745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   240.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (240.000, 240.000, 240.000), stdev = 0.001
[info]   CI (99.9%): [240.000, 240.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.125), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.017 ±(99.9%) 0.027 B/op [Average]
[info]   (min, avg, max) = (0.009, 0.017, 0.028), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1051.798 ±(99.9%) 551.954 MB/sec [Average]
[info]   (min, avg, max) = (979.317, 1051.798, 1307.983), stdev = 143.341
[info]   CI (99.9%): [499.844, 1603.752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   240.817 ±(99.9%) 119.981 B/op [Average]
[info]   (min, avg, max) = (224.182, 240.817, 296.450), stdev = 31.159
[info]   CI (99.9%): [120.836, 360.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 4.000), stdev = 0.837
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson
[info] # Run progress: 71.92% complete, ETA 00:17:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 271896.271 ops/s
[info] # Warmup Iteration   2: 727809.080 ops/s
[info] # Warmup Iteration   3: 738647.463 ops/s
[info] Iteration   1: 738837.212 ops/s
[info]                  ·gc.alloc.rate:                   2147.701 MB/sec
[info]                  ·gc.alloc.rate.norm:              4576.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.089 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2328.714 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4961.676 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 740737.334 ops/s
[info]                  ·gc.alloc.rate:                   2153.888 MB/sec
[info]                  ·gc.alloc.rate.norm:              4576.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.265 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2013.919 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4278.631 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 735662.333 ops/s
[info]                  ·gc.alloc.rate:                   2138.731 MB/sec
[info]                  ·gc.alloc.rate.norm:              4576.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.178 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2024.258 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4331.074 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 733071.649 ops/s
[info]                  ·gc.alloc.rate:                   2131.059 MB/sec
[info]                  ·gc.alloc.rate.norm:              4576.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.223 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2371.148 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5091.542 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 736325.331 ops/s
[info]                  ·gc.alloc.rate:                   2140.634 MB/sec
[info]                  ·gc.alloc.rate.norm:              4576.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.222 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2036.843 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4354.128 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson":
[info]   736926.772 ±(99.9%) 11389.166 ops/s [Average]
[info]   (min, avg, max) = (733071.649, 736926.772, 740737.334), stdev = 2957.730
[info]   CI (99.9%): [725537.606, 748315.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2142.403 ±(99.9%) 33.640 MB/sec [Average]
[info]   (min, avg, max) = (2131.059, 2142.403, 2153.888), stdev = 8.736
[info]   CI (99.9%): [2108.763, 2176.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4576.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4576.001, 4576.001, 4576.001), stdev = 0.001
[info]   CI (99.9%): [4576.000, 4576.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.092, 0.125), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.196 ±(99.9%) 0.259 B/op [Average]
[info]   (min, avg, max) = (0.089, 0.196, 0.265), stdev = 0.067
[info]   CI (99.9%): [≈ 0, 0.455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   2154.976 ±(99.9%) 688.434 MB/sec [Average]
[info]   (min, avg, max) = (2013.919, 2154.976, 2371.148), stdev = 178.784
[info]   CI (99.9%): [1466.543, 2843.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4603.410 ±(99.9%) 1501.772 B/op [Average]
[info]   (min, avg, max) = (4278.631, 4603.410, 5091.542), stdev = 390.006
[info]   CI (99.9%): [3101.638, 6105.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.count":
[info]   32.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.200, 8.000), stdev = 0.837
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce
[info] # Run progress: 72.26% complete, ETA 00:17:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 461202.705 ops/s
[info] # Warmup Iteration   2: 792287.459 ops/s
[info] # Warmup Iteration   3: 806725.132 ops/s
[info] Iteration   1: 806947.930 ops/s
[info]                  ·gc.alloc.rate:                   2624.723 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.203 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2658.220 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5185.342 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 784545.211 ops/s
[info]                  ·gc.alloc.rate:                   2551.858 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.376 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2685.165 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5387.466 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 802230.254 ops/s
[info]                  ·gc.alloc.rate:                   2609.822 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.123 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2704.320 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5305.389 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 792295.900 ops/s
[info]                  ·gc.alloc.rate:                   2577.671 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.083 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2374.730 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4716.901 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 806899.322 ops/s
[info]                  ·gc.alloc.rate:                   2624.628 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.284 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2717.525 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5301.219 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce":
[info]   798583.723 ±(99.9%) 37974.401 ops/s [Average]
[info]   (min, avg, max) = (784545.211, 798583.723, 806947.930), stdev = 9861.831
[info]   CI (99.9%): [760609.322, 836558.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate":
[info]   2597.740 ±(99.9%) 123.355 MB/sec [Average]
[info]   (min, avg, max) = (2551.858, 2597.740, 2624.723), stdev = 32.035
[info]   CI (99.9%): [2474.385, 2721.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5120.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5120.001, 5120.001, 5120.001), stdev = 0.001
[info]   CI (99.9%): [5120.000, 5120.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.108 ±(99.9%) 0.229 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.108, 0.187), stdev = 0.060
[info]   CI (99.9%): [≈ 0, 0.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.214 ±(99.9%) 0.459 B/op [Average]
[info]   (min, avg, max) = (0.083, 0.214, 0.376), stdev = 0.119
[info]   CI (99.9%): [≈ 0, 0.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2627.992 ±(99.9%) 551.887 MB/sec [Average]
[info]   (min, avg, max) = (2374.730, 2627.992, 2717.525), stdev = 143.323
[info]   CI (99.9%): [2076.105, 3179.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5179.264 ±(99.9%) 1033.137 B/op [Average]
[info]   (min, avg, max) = (4716.901, 5179.264, 5387.466), stdev = 268.302
[info]   CI (99.9%): [4146.127, 6212.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.count":
[info]   39.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.800, 8.000), stdev = 0.447
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.200, 8.000), stdev = 0.837
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala
[info] # Run progress: 72.60% complete, ETA 00:17:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 254532.724 ops/s
[info] # Warmup Iteration   2: 1000134.037 ops/s
[info] # Warmup Iteration   3: 1002328.550 ops/s
[info] Iteration   1: 998701.481 ops/s
[info]                  ·gc.alloc.rate:                   1238.316 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.164 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1309.244 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2063.806 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 998114.350 ops/s
[info]                  ·gc.alloc.rate:                   1238.049 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.164 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1320.435 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2081.896 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 1001919.471 ops/s
[info]                  ·gc.alloc.rate:                   1242.497 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.131 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1330.800 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2090.727 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 1002689.536 ops/s
[info]                  ·gc.alloc.rate:                   1243.388 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.163 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1003.044 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1574.683 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 996230.513 ops/s
[info]                  ·gc.alloc.rate:                   1235.640 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.230 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.671 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2122.662 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala":
[info]   999531.070 ±(99.9%) 10416.216 ops/s [Average]
[info]   (min, avg, max) = (996230.513, 999531.070, 1002689.536), stdev = 2705.058
[info]   CI (99.9%): [989114.854, 1009947.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1239.578 ±(99.9%) 12.547 MB/sec [Average]
[info]   (min, avg, max) = (1235.640, 1239.578, 1243.388), stdev = 3.258
[info]   CI (99.9%): [1227.031, 1252.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1952.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1952.000, 1952.000, 1952.000), stdev = 0.001
[info]   CI (99.9%): [1952.000, 1952.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.108 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.108, 0.146), stdev = 0.023
[info]   CI (99.9%): [0.020, 0.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.171 ±(99.9%) 0.140 B/op [Average]
[info]   (min, avg, max) = (0.131, 0.171, 0.230), stdev = 0.036
[info]   CI (99.9%): [0.031, 0.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1261.438 ±(99.9%) 558.366 MB/sec [Average]
[info]   (min, avg, max) = (1003.044, 1261.438, 1343.671), stdev = 145.006
[info]   CI (99.9%): [703.072, 1819.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1986.755 ±(99.9%) 890.807 B/op [Average]
[info]   (min, avg, max) = (1574.683, 1986.755, 2122.662), stdev = 231.340
[info]   CI (99.9%): [1095.947, 2877.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 5.000), stdev = 0.894
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala
[info] # Run progress: 72.95% complete, ETA 00:17:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6825118.685 ops/s
[info] # Warmup Iteration   2: 8023134.978 ops/s
[info] # Warmup Iteration   3: 8113354.235 ops/s
[info] Iteration   1: 8141445.415 ops/s
[info]                  ·gc.alloc.rate:                   372.430 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.776 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 49.448 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 8143200.899 ops/s
[info]                  ·gc.alloc.rate:                   372.524 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.010 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.793 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 49.439 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 8084696.590 ops/s
[info]                  ·gc.alloc.rate:                   369.921 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.616 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      664.947 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 129.423 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 8282612.260 ops/s
[info]                  ·gc.alloc.rate:                   378.876 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.378 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62.784 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 8341280.775 ops/s
[info]                  ·gc.alloc.rate:                   381.557 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.366 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62.340 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala":
[info]   8198647.188 ±(99.9%) 416179.379 ops/s [Average]
[info]   (min, avg, max) = (8084696.590, 8198647.188, 8341280.775), stdev = 108080.463
[info]   CI (99.9%): [7782467.809, 8614826.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   375.062 ±(99.9%) 18.917 MB/sec [Average]
[info]   (min, avg, max) = (369.921, 375.062, 381.557), stdev = 4.913
[info]   CI (99.9%): [356.145, 393.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   72.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (72.000, 72.000, 72.000), stdev = 0.001
[info]   CI (99.9%): [72.000, 72.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.640 ±(99.9%) 5.441 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.640, 3.167), stdev = 1.413
[info]   CI (99.9%): [≈ 0, 6.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.124 ±(99.9%) 1.059 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.124, 0.616), stdev = 0.275
[info]   CI (99.9%): [≈ 0, 1.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   367.452 ±(99.9%) 656.284 MB/sec [Average]
[info]   (min, avg, max) = (255.776, 367.452, 664.947), stdev = 170.435
[info]   CI (99.9%): [≈ 0, 1023.737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   70.687 ±(99.9%) 128.934 B/op [Average]
[info]   (min, avg, max) = (49.439, 70.687, 129.423), stdev = 33.484
[info]   CI (99.9%): [≈ 0, 199.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.304
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson
[info] # Run progress: 73.29% complete, ETA 00:16:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 42551.451 ops/s
[info] # Warmup Iteration   2: 322850.045 ops/s
[info] # Warmup Iteration   3: 326531.194 ops/s
[info] Iteration   1: 326851.934 ops/s
[info]                  ·gc.alloc.rate:                   1793.855 MB/sec
[info]                  ·gc.alloc.rate.norm:              8640.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.902 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1979.982 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9536.475 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 334194.731 ops/s
[info]                  ·gc.alloc.rate:                   1834.389 MB/sec
[info]                  ·gc.alloc.rate.norm:              8640.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.686 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1666.877 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7851.018 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 332502.020 ops/s
[info]                  ·gc.alloc.rate:                   1825.066 MB/sec
[info]                  ·gc.alloc.rate.norm:              8640.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.394 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2014.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9535.118 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 323990.829 ops/s
[info]                  ·gc.alloc.rate:                   1778.435 MB/sec
[info]                  ·gc.alloc.rate.norm:              8640.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.404 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1687.499 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8198.219 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 325475.896 ops/s
[info]                  ·gc.alloc.rate:                   1786.425 MB/sec
[info]                  ·gc.alloc.rate.norm:              8640.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.403 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1691.979 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8183.217 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson":
[info]   328603.082 ±(99.9%) 17283.659 ops/s [Average]
[info]   (min, avg, max) = (323990.829, 328603.082, 334194.731), stdev = 4488.511
[info]   CI (99.9%): [311319.423, 345886.742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1803.634 ±(99.9%) 94.948 MB/sec [Average]
[info]   (min, avg, max) = (1778.435, 1803.634, 1834.389), stdev = 24.658
[info]   CI (99.9%): [1708.686, 1898.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   8640.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8640.001, 8640.001, 8640.001), stdev = 0.001
[info]   CI (99.9%): [8640.001, 8640.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.117 ±(99.9%) 0.184 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.117, 0.187), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.558 ±(99.9%) 0.881 B/op [Average]
[info]   (min, avg, max) = (0.394, 0.558, 0.902), stdev = 0.229
[info]   CI (99.9%): [≈ 0, 1.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1808.097 ±(99.9%) 666.870 MB/sec [Average]
[info]   (min, avg, max) = (1666.877, 1808.097, 2014.146), stdev = 173.184
[info]   CI (99.9%): [1141.227, 2474.967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   8660.809 ±(99.9%) 3121.784 B/op [Average]
[info]   (min, avg, max) = (7851.018, 8660.809, 9536.475), stdev = 810.717
[info]   CI (99.9%): [5539.025, 11782.594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce
[info] # Run progress: 73.63% complete, ETA 00:16:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5262.481 ops/s
[info] # Warmup Iteration   2: 7252.615 ops/s
[info] # Warmup Iteration   3: 7425.556 ops/s
[info] Iteration   1: 7623.675 ops/s
[info]                  ·gc.alloc.rate:                   1834.732 MB/sec
[info]                  ·gc.alloc.rate.norm:              378792.058 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.004 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.872 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1638.910 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 338363.442 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 7581.726 ops/s
[info]                  ·gc.alloc.rate:                   1824.416 MB/sec
[info]                  ·gc.alloc.rate.norm:              378792.054 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.046 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.519 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1986.713 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 412488.752 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 7521.640 ops/s
[info]                  ·gc.alloc.rate:                   1810.054 MB/sec
[info]                  ·gc.alloc.rate.norm:              378792.054 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.355 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1669.204 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 349316.287 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 7460.092 ops/s
[info]                  ·gc.alloc.rate:                   1795.347 MB/sec
[info]                  ·gc.alloc.rate.norm:              378792.055 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13.174 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2016.066 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 425360.433 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 7527.732 ops/s
[info]                  ·gc.alloc.rate:                   1811.500 MB/sec
[info]                  ·gc.alloc.rate.norm:              378792.058 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.067 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13.940 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1687.411 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 352844.640 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce":
[info]   7542.973 ±(99.9%) 240.251 ops/s [Average]
[info]   (min, avg, max) = (7460.092, 7542.973, 7623.675), stdev = 62.393
[info]   CI (99.9%): [7302.722, 7783.224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   1815.210 ±(99.9%) 57.783 MB/sec [Average]
[info]   (min, avg, max) = (1795.347, 1815.210, 1834.732), stdev = 15.006
[info]   CI (99.9%): [1757.427, 1872.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   378792.056 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (378792.054, 378792.056, 378792.058), stdev = 0.002
[info]   CI (99.9%): [378792.048, 378792.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.040 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (0.004, 0.040, 0.067), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   8.372 ±(99.9%) 21.762 B/op [Average]
[info]   (min, avg, max) = (0.872, 8.372, 13.940), stdev = 5.652
[info]   CI (99.9%): [≈ 0, 30.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1799.661 ±(99.9%) 713.355 MB/sec [Average]
[info]   (min, avg, max) = (1638.910, 1799.661, 2016.066), stdev = 185.256
[info]   CI (99.9%): [1086.306, 2513.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   375674.711 ±(99.9%) 154410.990 B/op [Average]
[info]   (min, avg, max) = (338363.442, 375674.711, 425360.433), stdev = 40100.044
[info]   CI (99.9%): [221263.721, 530085.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 7.000), stdev = 0.894
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala
[info] # Run progress: 73.97% complete, ETA 00:16:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7208.871 ops/s
[info] # Warmup Iteration   2: 13947.038 ops/s
[info] # Warmup Iteration   3: 13817.149 ops/s
[info] Iteration   1: 13826.952 ops/s
[info]                  ·gc.alloc.rate:                   350.223 MB/sec
[info]                  ·gc.alloc.rate.norm:              39872.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.739 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.464 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 58228.949 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 14632.758 ops/s
[info]                  ·gc.alloc.rate:                   370.731 MB/sec
[info]                  ·gc.alloc.rate.norm:              39872.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.396 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42.541 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      322.436 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34677.881 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 14458.840 ops/s
[info]                  ·gc.alloc.rate:                   366.316 MB/sec
[info]                  ·gc.alloc.rate.norm:              39872.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.266 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      322.407 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35092.711 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 13649.406 ops/s
[info]                  ·gc.alloc.rate:                   345.922 MB/sec
[info]                  ·gc.alloc.rate.norm:              39872.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.201 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      324.521 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37405.253 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 13773.556 ops/s
[info]                  ·gc.alloc.rate:                   348.913 MB/sec
[info]                  ·gc.alloc.rate.norm:              39872.037 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      324.357 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37065.872 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala":
[info]   14068.303 ±(99.9%) 1713.136 ops/s [Average]
[info]   (min, avg, max) = (13649.406, 14068.303, 14632.758), stdev = 444.896
[info]   CI (99.9%): [12355.167, 15781.438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   356.421 ±(99.9%) 43.381 MB/sec [Average]
[info]   (min, avg, max) = (345.922, 356.421, 370.731), stdev = 11.266
[info]   CI (99.9%): [313.040, 399.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   39872.031 ±(99.9%) 0.014 B/op [Average]
[info]   (min, avg, max) = (39872.028, 39872.031, 39872.037), stdev = 0.004
[info]   CI (99.9%): [39872.017, 39872.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.104 ±(99.9%) 0.634 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.104, 0.396), stdev = 0.165
[info]   CI (99.9%): [≈ 0, 0.738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   11.349 ±(99.9%) 67.939 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.349, 42.541), stdev = 17.643
[info]   CI (99.9%): [≈ 0, 79.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   361.037 ±(99.9%) 323.829 MB/sec [Average]
[info]   (min, avg, max) = (322.407, 361.037, 511.464), stdev = 84.097
[info]   CI (99.9%): [37.208, 684.866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   40494.133 ±(99.9%) 38449.698 B/op [Average]
[info]   (min, avg, max) = (34677.881, 40494.133, 58228.949), stdev = 9985.264
[info]   CI (99.9%): [2044.435, 78943.831] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 3.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala
[info] # Run progress: 74.32% complete, ETA 00:16:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19658.811 ops/s
[info] # Warmup Iteration   2: 22965.937 ops/s
[info] # Warmup Iteration   3: 24030.517 ops/s
[info] Iteration   1: 23586.702 ops/s
[info]                  ·gc.alloc.rate:                   402.985 MB/sec
[info]                  ·gc.alloc.rate.norm:              26896.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.026 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.741 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.487 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34137.616 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 23569.786 ops/s
[info]                  ·gc.alloc.rate:                   402.780 MB/sec
[info]                  ·gc.alloc.rate.norm:              26896.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.337 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     222.818 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.739 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22018.628 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 23796.626 ops/s
[info]                  ·gc.alloc.rate:                   406.651 MB/sec
[info]                  ·gc.alloc.rate.norm:              26896.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.718 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21807.702 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 23731.441 ops/s
[info]                  ·gc.alloc.rate:                   405.660 MB/sec
[info]                  ·gc.alloc.rate.norm:              26896.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.817 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21734.892 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 23807.497 ops/s
[info]                  ·gc.alloc.rate:                   406.907 MB/sec
[info]                  ·gc.alloc.rate.norm:              26896.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.505 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.578 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 43332.862 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala":
[info]   23698.410 ±(99.9%) 437.604 ops/s [Average]
[info]   (min, avg, max) = (23569.786, 23698.410, 23807.497), stdev = 113.644
[info]   CI (99.9%): [23260.807, 24136.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   404.996 ±(99.9%) 7.649 MB/sec [Average]
[info]   (min, avg, max) = (402.780, 404.996, 406.907), stdev = 1.986
[info]   CI (99.9%): [397.347, 412.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   26896.019 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (26896.017, 26896.019, 26896.022), stdev = 0.002
[info]   CI (99.9%): [26896.011, 26896.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.689 ±(99.9%) 5.701 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.689, 3.337), stdev = 1.480
[info]   CI (99.9%): [≈ 0, 6.390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   46.013 ±(99.9%) 380.685 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 46.013, 222.818), stdev = 98.863
[info]   CI (99.9%): [≈ 0, 426.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   430.868 ±(99.9%) 571.376 MB/sec [Average]
[info]   (min, avg, max) = (327.817, 430.868, 655.578), stdev = 148.385
[info]   CI (99.9%): [≈ 0, 1002.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   28606.340 ±(99.9%) 37743.270 B/op [Average]
[info]   (min, avg, max) = (21734.892, 28606.340, 43332.862), stdev = 9801.807
[info]   CI (99.9%): [≈ 0, 66349.610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 5.000), stdev = 1.643
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson
[info] # Run progress: 74.66% complete, ETA 00:15:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 856.581 ops/s
[info] # Warmup Iteration   2: 2362.346 ops/s
[info] # Warmup Iteration   3: 2379.867 ops/s
[info] Iteration   1: 2401.687 ops/s
[info]                  ·gc.alloc.rate:                   1499.829 MB/sec
[info]                  ·gc.alloc.rate.norm:              982982.156 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27.273 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1315.283 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 862031.581 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 2388.358 ops/s
[info]                  ·gc.alloc.rate:                   1491.721 MB/sec
[info]                  ·gc.alloc.rate.norm:              982976.171 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27.432 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1658.547 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1092906.756 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 2414.988 ops/s
[info]                  ·gc.alloc.rate:                   1508.232 MB/sec
[info]                  ·gc.alloc.rate.norm:              982976.169 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1336.520 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 871064.583 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 2379.290 ops/s
[info]                  ·gc.alloc.rate:                   1486.570 MB/sec
[info]                  ·gc.alloc.rate.norm:              982976.185 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1680.058 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1110917.808 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 2361.147 ops/s
[info]                  ·gc.alloc.rate:                   1474.516 MB/sec
[info]                  ·gc.alloc.rate.norm:              982976.173 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13.873 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.834 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 899191.655 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson":
[info]   2389.094 ±(99.9%) 79.542 ops/s [Average]
[info]   (min, avg, max) = (2361.147, 2389.094, 2414.988), stdev = 20.657
[info]   CI (99.9%): [2309.552, 2468.636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1492.174 ±(99.9%) 49.459 MB/sec [Average]
[info]   (min, avg, max) = (1474.516, 1492.174, 1508.232), stdev = 12.844
[info]   CI (99.9%): [1442.715, 1541.632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   982977.371 ±(99.9%) 10.300 B/op [Average]
[info]   (min, avg, max) = (982976.169, 982977.371, 982982.156), stdev = 2.675
[info]   CI (99.9%): [982967.070, 982987.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.042), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   13.716 ±(99.9%) 52.664 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13.716, 27.432), stdev = 13.677
[info]   CI (99.9%): [≈ 0, 66.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1467.849 ±(99.9%) 710.249 MB/sec [Average]
[info]   (min, avg, max) = (1315.283, 1467.849, 1680.058), stdev = 184.449
[info]   CI (99.9%): [757.600, 2178.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   967222.476 ±(99.9%) 477015.931 B/op [Average]
[info]   (min, avg, max) = (862031.581, 967222.476, 1110917.808), stdev = 123879.522
[info]   CI (99.9%): [490206.545, 1444238.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 7.000), stdev = 1.517
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce
[info] # Run progress: 75.00% complete, ETA 00:15:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5483.292 ops/s
[info] # Warmup Iteration   2: 7514.719 ops/s
[info] # Warmup Iteration   3: 7725.289 ops/s
[info] Iteration   1: 7708.333 ops/s
[info]                  ·gc.alloc.rate:                   1657.992 MB/sec
[info]                  ·gc.alloc.rate.norm:              338568.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1635.059 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 333885.095 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 7588.712 ops/s
[info]                  ·gc.alloc.rate:                   1632.276 MB/sec
[info]                  ·gc.alloc.rate.norm:              338568.058 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34.534 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1650.583 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 342365.382 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 7701.542 ops/s
[info]                  ·gc.alloc.rate:                   1656.519 MB/sec
[info]                  ·gc.alloc.rate.norm:              338568.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.507 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1663.181 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 339929.720 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 7693.011 ops/s
[info]                  ·gc.alloc.rate:                   1654.720 MB/sec
[info]                  ·gc.alloc.rate.norm:              338568.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.517 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1675.972 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 342916.375 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 7686.278 ops/s
[info]                  ·gc.alloc.rate:                   1653.839 MB/sec
[info]                  ·gc.alloc.rate.norm:              338568.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.152 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31.023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1683.934 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 344728.907 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce":
[info]   7675.575 ±(99.9%) 189.730 ops/s [Average]
[info]   (min, avg, max) = (7588.712, 7675.575, 7708.333), stdev = 49.272
[info]   CI (99.9%): [7485.845, 7865.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate":
[info]   1651.069 ±(99.9%) 40.925 MB/sec [Average]
[info]   (min, avg, max) = (1632.276, 1651.069, 1657.992), stdev = 10.628
[info]   CI (99.9%): [1610.145, 1691.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   338568.054 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (338568.053, 338568.054, 338568.058), stdev = 0.002
[info]   CI (99.9%): [338568.045, 338568.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.114 ±(99.9%) 0.254 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.114, 0.167), stdev = 0.066
[info]   CI (99.9%): [≈ 0, 0.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   23.316 ±(99.9%) 52.294 B/op [Average]
[info]   (min, avg, max) = (8.507, 23.316, 34.534), stdev = 13.581
[info]   CI (99.9%): [≈ 0, 75.610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1661.746 ±(99.9%) 75.396 MB/sec [Average]
[info]   (min, avg, max) = (1635.059, 1661.746, 1683.934), stdev = 19.580
[info]   CI (99.9%): [1586.350, 1737.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   340765.096 ±(99.9%) 16215.394 B/op [Average]
[info]   (min, avg, max) = (333885.095, 340765.096, 344728.907), stdev = 4211.086
[info]   CI (99.9%): [324549.702, 356980.489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala
[info] # Run progress: 75.34% complete, ETA 00:15:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_6777d793/target/5e31e36e/jackson-module-afterburner-2.9.4.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 23768.279 ops/s
[info] # Warmup Iteration   2: 41343.898 ops/s
[info] # Warmup Iteration   3: 41350.583 ops/s
[info] Iteration   1: 41123.868 ops/s
[info]                  ·gc.alloc.rate:                   595.774 MB/sec
[info]                  ·gc.alloc.rate.norm:              22807.814 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.625 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23.926 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      644.636 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24678.375 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 40448.387 ops/s
[info]                  ·gc.alloc.rate:                   586.094 MB/sec
[info]                  ·gc.alloc.rate.norm:              22807.971 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.810 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      649.417 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25272.201 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 41087.311 ops/s
[info]                  ·gc.alloc.rate:                   595.321 MB/sec
[info]                  ·gc.alloc.rate.norm:              22807.869 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.392 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.019 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24980.068 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 40608.855 ops/s
[info]                  ·gc.alloc.rate:                   588.543 MB/sec
[info]                  ·gc.alloc.rate.norm:              22807.777 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.420 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.849 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25377.310 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 40715.394 ops/s
[info]                  ·gc.alloc.rate:                   589.993 MB/sec
[info]                  ·gc.alloc.rate.norm:              22807.839 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.805 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.432 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25414.874 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala":
[info]   40796.763 ±(99.9%) 1146.676 ops/s [Average]
[info]   (min, avg, max) = (40448.387, 40796.763, 41123.868), stdev = 297.788
[info]   CI (99.9%): [39650.087, 41943.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   591.145 ±(99.9%) 16.391 MB/sec [Average]
[info]   (min, avg, max) = (586.094, 591.145, 595.774), stdev = 4.257
[info]   CI (99.9%): [574.754, 607.536] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   22807.854 ±(99.9%) 0.283 B/op [Average]
[info]   (min, avg, max) = (22807.777, 22807.854, 22807.971), stdev = 0.073
[info]   CI (99.9%): [22807.571, 22808.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.158 ±(99.9%) 1.008 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.158, 0.625), stdev = 0.262
[info]   CI (99.9%): [≈ 0, 1.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   6.071 ±(99.9%) 38.558 B/op [Average]
[info]   (min, avg, max) = (0.805, 6.071, 23.926), stdev = 10.013
[info]   CI (99.9%): [≈ 0, 44.629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   651.670 ±(99.9%) 19.058 MB/sec [Average]
[info]   (min, avg, max) = (644.636, 651.670, 657.432), stdev = 4.949
[info]   CI (99.9%): [632.612, 670.729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   25144.566 ±(99.9%) 1199.153 B/op [Average]
[info]   (min, avg, max) = (24678.375, 25144.566, 25414.874), stdev = 311.416
[info]   CI (99.9%): [23945.412, 26343.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala
[info] # Run progress: 75.68% complete, ETA 00:15:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 61617.953 ops/s
[info] # Warmup Iteration   2: 70393.329 ops/s
[info] # Warmup Iteration   3: 69780.054 ops/s
[info] Iteration   1: 71385.547 ops/s
[info]                  ·gc.alloc.rate:                   538.293 MB/sec
[info]                  ·gc.alloc.rate.norm:              11864.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.803 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83.826 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.181 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7233.129 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 71480.715 ops/s
[info]                  ·gc.alloc.rate:                   538.760 MB/sec
[info]                  ·gc.alloc.rate.norm:              11864.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.458 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.357 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14409.560 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 70221.842 ops/s
[info]                  ·gc.alloc.rate:                   529.369 MB/sec
[info]                  ·gc.alloc.rate.norm:              11864.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.799 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.191 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14616.641 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 71529.576 ops/s
[info]                  ·gc.alloc.rate:                   539.230 MB/sec
[info]                  ·gc.alloc.rate.norm:              11864.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      325.768 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7167.470 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 71777.432 ops/s
[info]                  ·gc.alloc.rate:                   541.165 MB/sec
[info]                  ·gc.alloc.rate.norm:              11864.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.826 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      651.597 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14285.020 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala":
[info]   71279.022 ±(99.9%) 2342.925 ops/s [Average]
[info]   (min, avg, max) = (70221.842, 71279.022, 71777.432), stdev = 608.450
[info]   CI (99.9%): [68936.097, 73621.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   537.363 ±(99.9%) 17.715 MB/sec [Average]
[info]   (min, avg, max) = (529.369, 537.363, 541.165), stdev = 4.600
[info]   CI (99.9%): [519.649, 555.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   11864.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11864.006, 11864.006, 11864.006), stdev = 0.001
[info]   CI (99.9%): [11864.005, 11864.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.806 ±(99.9%) 6.454 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.806, 3.803), stdev = 1.676
[info]   CI (99.9%): [≈ 0, 7.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   17.782 ±(99.9%) 142.228 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17.782, 83.826), stdev = 36.936
[info]   CI (99.9%): [≈ 0, 160.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   522.419 ±(99.9%) 687.034 MB/sec [Average]
[info]   (min, avg, max) = (325.768, 522.419, 654.357), stdev = 178.420
[info]   CI (99.9%): [≈ 0, 1209.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   11542.364 ±(99.9%) 15270.044 B/op [Average]
[info]   (min, avg, max) = (7167.470, 11542.364, 14616.641), stdev = 3965.582
[info]   CI (99.9%): [≈ 0, 26812.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 76.03% complete, ETA 00:15:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 65955.023 ops/s
[info] # Warmup Iteration   2: 76931.535 ops/s
[info] # Warmup Iteration   3: 77215.428 ops/s
[info] Iteration   1: 77234.182 ops/s
[info]                  ·gc.alloc.rate:      1.178 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 77113.205 ops/s
[info]                  ·gc.alloc.rate:      1.176 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 76989.875 ops/s
[info]                  ·gc.alloc.rate:      1.174 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 77042.647 ops/s
[info]                  ·gc.alloc.rate:      1.175 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 77045.821 ops/s
[info]                  ·gc.alloc.rate:      1.175 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   77085.146 ±(99.9%) 362.391 ops/s [Average]
[info]   (min, avg, max) = (76989.875, 77085.146, 77234.182), stdev = 94.112
[info]   CI (99.9%): [76722.755, 77447.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1.176 ±(99.9%) 0.006 MB/sec [Average]
[info]   (min, avg, max) = (1.174, 1.176, 1.178), stdev = 0.001
[info]   CI (99.9%): [1.170, 1.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   24.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (24.005, 24.005, 24.005), stdev = 0.001
[info]   CI (99.9%): [24.005, 24.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson
[info] # Run progress: 76.37% complete, ETA 00:14:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2096.646 ops/s
[info] # Warmup Iteration   2: 5289.495 ops/s
[info] # Warmup Iteration   3: 5389.875 ops/s
[info] Iteration   1: 5422.878 ops/s
[info]                  ·gc.alloc.rate:                   1677.565 MB/sec
[info]                  ·gc.alloc.rate.norm:              486903.211 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18.124 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1650.177 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 478954.100 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 5315.954 ops/s
[info]                  ·gc.alloc.rate:                   1644.449 MB/sec
[info]                  ·gc.alloc.rate.norm:              486904.939 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.326 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1663.470 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 492536.874 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 5320.120 ops/s
[info]                  ·gc.alloc.rate:                   1645.732 MB/sec
[info]                  ·gc.alloc.rate.norm:              486903.684 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1675.510 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 495713.762 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 5410.642 ops/s
[info]                  ·gc.alloc.rate:                   1674.187 MB/sec
[info]                  ·gc.alloc.rate.norm:              486904.211 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.055 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1683.812 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 489703.591 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 5334.693 ops/s
[info]                  ·gc.alloc.rate:                   1650.439 MB/sec
[info]                  ·gc.alloc.rate.norm:              486903.586 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.141 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1689.901 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 498545.223 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson":
[info]   5360.857 ±(99.9%) 199.023 ops/s [Average]
[info]   (min, avg, max) = (5315.954, 5360.857, 5422.878), stdev = 51.686
[info]   CI (99.9%): [5161.835, 5559.880] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1658.475 ±(99.9%) 61.939 MB/sec [Average]
[info]   (min, avg, max) = (1644.449, 1658.475, 1677.565), stdev = 16.085
[info]   CI (99.9%): [1596.535, 1720.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   486903.926 ±(99.9%) 2.578 B/op [Average]
[info]   (min, avg, max) = (486903.211, 486903.926, 486904.939), stdev = 0.669
[info]   CI (99.9%): [486901.349, 486906.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.062), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   8.529 ±(99.9%) 26.612 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.529, 18.124), stdev = 6.911
[info]   CI (99.9%): [≈ 0, 35.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1672.574 ±(99.9%) 61.478 MB/sec [Average]
[info]   (min, avg, max) = (1650.177, 1672.574, 1689.901), stdev = 15.966
[info]   CI (99.9%): [1611.096, 1734.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   491090.710 ±(99.9%) 29087.987 B/op [Average]
[info]   (min, avg, max) = (478954.100, 491090.710, 498545.223), stdev = 7554.058
[info]   CI (99.9%): [462002.723, 520178.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 0.707
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala
[info] # Run progress: 76.71% complete, ETA 00:14:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4795243.126 ops/s
[info] # Warmup Iteration   2: 5338192.831 ops/s
[info] # Warmup Iteration   3: 5611962.565 ops/s
[info] Iteration   1: 5672992.172 ops/s
[info]                  ·gc.alloc.rate:                   1700.972 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.029 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1978.415 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 548.987 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 5613167.212 ops/s
[info]                  ·gc.alloc.rate:                   1683.494 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.041 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1661.846 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 465.931 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 5639250.061 ops/s
[info]                  ·gc.alloc.rate:                   1691.378 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1673.202 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 466.928 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 5613761.067 ops/s
[info]                  ·gc.alloc.rate:                   1683.584 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1681.082 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 471.299 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 5715138.294 ops/s
[info]                  ·gc.alloc.rate:                   1713.669 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1688.414 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 465.044 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala":
[info]   5650861.761 ±(99.9%) 167330.306 ops/s [Average]
[info]   (min, avg, max) = (5613167.212, 5650861.761, 5715138.294), stdev = 43455.149
[info]   CI (99.9%): [5483531.455, 5818192.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1694.619 ±(99.9%) 49.436 MB/sec [Average]
[info]   (min, avg, max) = (1683.494, 1694.619, 1713.669), stdev = 12.838
[info]   CI (99.9%): [1645.183, 1744.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   472.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (472.000, 472.000, 472.000), stdev = 0.001
[info]   CI (99.9%): [472.000, 472.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.092, 0.146), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.026 ±(99.9%) 0.041 B/op [Average]
[info]   (min, avg, max) = (0.012, 0.026, 0.041), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1736.592 ±(99.9%) 521.923 MB/sec [Average]
[info]   (min, avg, max) = (1661.846, 1736.592, 1978.415), stdev = 135.542
[info]   CI (99.9%): [1214.669, 2258.515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   483.638 ±(99.9%) 140.974 B/op [Average]
[info]   (min, avg, max) = (465.044, 483.638, 548.987), stdev = 36.611
[info]   CI (99.9%): [342.664, 624.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson
[info] # Run progress: 77.05% complete, ETA 00:14:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 116166.554 ops/s
[info] # Warmup Iteration   2: 355786.529 ops/s
[info] # Warmup Iteration   3: 352079.444 ops/s
[info] Iteration   1: 351930.557 ops/s
[info]                  ·gc.alloc.rate:                   1897.490 MB/sec
[info]                  ·gc.alloc.rate.norm:              8488.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.559 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1987.661 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8891.362 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 347831.366 ops/s
[info]                  ·gc.alloc.rate:                   1875.643 MB/sec
[info]                  ·gc.alloc.rate.norm:              8488.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.659 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2006.871 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9081.855 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 358779.417 ops/s
[info]                  ·gc.alloc.rate:                   1934.954 MB/sec
[info]                  ·gc.alloc.rate.norm:              8488.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.183 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1682.726 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7381.560 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 346169.307 ops/s
[info]                  ·gc.alloc.rate:                   1866.614 MB/sec
[info]                  ·gc.alloc.rate.norm:              8488.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.473 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028.040 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9222.051 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 346991.503 ops/s
[info]                  ·gc.alloc.rate:                   1871.105 MB/sec
[info]                  ·gc.alloc.rate.norm:              8488.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.661 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033.457 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9224.486 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson":
[info]   350340.430 ±(99.9%) 20069.021 ops/s [Average]
[info]   (min, avg, max) = (346169.307, 350340.430, 358779.417), stdev = 5211.861
[info]   CI (99.9%): [330271.409, 370409.451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1889.161 ±(99.9%) 108.631 MB/sec [Average]
[info]   (min, avg, max) = (1866.614, 1889.161, 1934.954), stdev = 28.211
[info]   CI (99.9%): [1780.530, 1997.793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   8488.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8488.001, 8488.001, 8488.001), stdev = 0.001
[info]   CI (99.9%): [8488.001, 8488.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.112 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.112, 0.146), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.507 ±(99.9%) 0.760 B/op [Average]
[info]   (min, avg, max) = (0.183, 0.507, 0.661), stdev = 0.197
[info]   CI (99.9%): [≈ 0, 1.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1947.751 ±(99.9%) 574.760 MB/sec [Average]
[info]   (min, avg, max) = (1682.726, 1947.751, 2033.457), stdev = 149.263
[info]   CI (99.9%): [1372.991, 2522.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   8760.263 ±(99.9%) 3013.718 B/op [Average]
[info]   (min, avg, max) = (7381.560, 8760.263, 9224.486), stdev = 782.653
[info]   CI (99.9%): [5746.545, 11773.981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.400, 10.000), stdev = 1.517
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala
[info] # Run progress: 77.40% complete, ETA 00:14:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2865231.267 ops/s
[info] # Warmup Iteration   2: 3240910.503 ops/s
[info] # Warmup Iteration   3: 3392616.884 ops/s
[info] Iteration   1: 3393957.219 ops/s
[info]                  ·gc.alloc.rate:                   552.164 MB/sec
[info]                  ·gc.alloc.rate.norm:              256.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.745 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.736 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.464 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 152.286 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 3392480.928 ops/s
[info]                  ·gc.alloc.rate:                   551.879 MB/sec
[info]                  ·gc.alloc.rate.norm:              256.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.915 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 303.796 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 3359009.199 ops/s
[info]                  ·gc.alloc.rate:                   546.448 MB/sec
[info]                  ·gc.alloc.rate.norm:              256.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 305.577 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 3357855.261 ops/s
[info]                  ·gc.alloc.rate:                   546.380 MB/sec
[info]                  ·gc.alloc.rate.norm:              256.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      325.870 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 152.683 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 3401623.937 ops/s
[info]                  ·gc.alloc.rate:                   553.330 MB/sec
[info]                  ·gc.alloc.rate.norm:              256.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.048 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.192 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 301.739 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala":
[info]   3380985.309 ±(99.9%) 80411.209 ops/s [Average]
[info]   (min, avg, max) = (3357855.261, 3380985.309, 3401623.937), stdev = 20882.536
[info]   CI (99.9%): [3300574.100, 3461396.518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   550.040 ±(99.9%) 12.918 MB/sec [Average]
[info]   (min, avg, max) = (546.380, 550.040, 553.330), stdev = 3.355
[info]   CI (99.9%): [537.122, 562.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   256.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (256.000, 256.000, 256.000), stdev = 0.001
[info]   CI (99.9%): [256.000, 256.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.795 ±(99.9%) 6.353 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.795, 3.745), stdev = 1.650
[info]   CI (99.9%): [≈ 0, 7.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.369 ±(99.9%) 2.945 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.369, 1.736), stdev = 0.765
[info]   CI (99.9%): [≈ 0, 3.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   522.743 ±(99.9%) 687.497 MB/sec [Average]
[info]   (min, avg, max) = (325.870, 522.743, 654.915), stdev = 178.541
[info]   CI (99.9%): [≈ 0, 1210.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   243.216 ±(99.9%) 318.977 B/op [Average]
[info]   (min, avg, max) = (152.286, 243.216, 305.577), stdev = 82.837
[info]   CI (99.9%): [≈ 0, 562.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson
[info] # Run progress: 77.74% complete, ETA 00:14:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 78818.721 ops/s
[info] # Warmup Iteration   2: 325058.715 ops/s
[info] # Warmup Iteration   3: 329438.943 ops/s
[info] Iteration   1: 326713.724 ops/s
[info]                  ·gc.alloc.rate:                   1270.107 MB/sec
[info]                  ·gc.alloc.rate.norm:              6120.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.201 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      982.971 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4736.440 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 327957.568 ops/s
[info]                  ·gc.alloc.rate:                   1275.078 MB/sec
[info]                  ·gc.alloc.rate.norm:              6120.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.699 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1320.084 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6336.019 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 326234.721 ops/s
[info]                  ·gc.alloc.rate:                   1268.529 MB/sec
[info]                  ·gc.alloc.rate.norm:              6120.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.402 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1329.549 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6414.390 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 329553.159 ops/s
[info]                  ·gc.alloc.rate:                   1281.328 MB/sec
[info]                  ·gc.alloc.rate.norm:              6120.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.099 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1337.462 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6388.111 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 325862.399 ops/s
[info]                  ·gc.alloc.rate:                   1266.881 MB/sec
[info]                  ·gc.alloc.rate.norm:              6120.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.603 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.352 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6489.414 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson":
[info]   327264.314 ±(99.9%) 5791.344 ops/s [Average]
[info]   (min, avg, max) = (325862.399, 327264.314, 329553.159), stdev = 1503.994
[info]   CI (99.9%): [321472.970, 333055.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1272.385 ±(99.9%) 22.583 MB/sec [Average]
[info]   (min, avg, max) = (1266.881, 1272.385, 1281.328), stdev = 5.865
[info]   CI (99.9%): [1249.801, 1294.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   6120.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6120.001, 6120.001, 6120.001), stdev = 0.001
[info]   CI (99.9%): [6120.001, 6120.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.204 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.083, 0.146), stdev = 0.053
[info]   CI (99.9%): [≈ 0, 0.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.401 ±(99.9%) 0.984 B/op [Average]
[info]   (min, avg, max) = (0.099, 0.401, 0.699), stdev = 0.255
[info]   CI (99.9%): [≈ 0, 1.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1262.684 ±(99.9%) 603.040 MB/sec [Average]
[info]   (min, avg, max) = (982.971, 1262.684, 1343.352), stdev = 156.608
[info]   CI (99.9%): [659.643, 1865.724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   6072.875 ±(99.9%) 2884.652 B/op [Average]
[info]   (min, avg, max) = (4736.440, 6072.875, 6489.414), stdev = 749.135
[info]   CI (99.9%): [3188.222, 8957.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 5.000), stdev = 0.894
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce
[info] # Run progress: 78.08% complete, ETA 00:13:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 444126.661 ops/s
[info] # Warmup Iteration   2: 611961.845 ops/s
[info] # Warmup Iteration   3: 618151.406 ops/s
[info] Iteration   1: 623712.192 ops/s
[info]                  ·gc.alloc.rate:                   2253.734 MB/sec
[info]                  ·gc.alloc.rate.norm:              5688.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.210 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1986.734 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5014.142 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 620419.433 ops/s
[info]                  ·gc.alloc.rate:                   2241.683 MB/sec
[info]                  ·gc.alloc.rate.norm:              5688.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.370 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2340.240 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5938.078 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 623664.016 ops/s
[info]                  ·gc.alloc.rate:                   2253.527 MB/sec
[info]                  ·gc.alloc.rate.norm:              5688.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.210 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2357.694 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5950.922 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 620154.272 ops/s
[info]                  ·gc.alloc.rate:                   2241.109 MB/sec
[info]                  ·gc.alloc.rate.norm:              5688.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.423 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030.259 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5152.857 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 600286.764 ops/s
[info]                  ·gc.alloc.rate:                   2169.233 MB/sec
[info]                  ·gc.alloc.rate.norm:              5688.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.327 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2375.180 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6228.020 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce":
[info]   617647.335 ±(99.9%) 37941.138 ops/s [Average]
[info]   (min, avg, max) = (600286.764, 617647.335, 623712.192), stdev = 9853.193
[info]   CI (99.9%): [579706.198, 655588.473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.alloc.rate":
[info]   2231.857 ±(99.9%) 136.848 MB/sec [Average]
[info]   (min, avg, max) = (2169.233, 2231.857, 2253.734), stdev = 35.539
[info]   CI (99.9%): [2095.010, 2368.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5688.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5688.001, 5688.001, 5688.001), stdev = 0.001
[info]   CI (99.9%): [5688.001, 5688.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.121 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.121, 0.167), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.308 ±(99.9%) 0.368 B/op [Average]
[info]   (min, avg, max) = (0.210, 0.308, 0.423), stdev = 0.096
[info]   CI (99.9%): [≈ 0, 0.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2218.021 ±(99.9%) 740.419 MB/sec [Average]
[info]   (min, avg, max) = (1986.734, 2218.021, 2375.180), stdev = 192.285
[info]   CI (99.9%): [1477.602, 2958.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5656.804 ±(99.9%) 2072.638 B/op [Average]
[info]   (min, avg, max) = (5014.142, 5656.804, 6228.020), stdev = 538.257
[info]   CI (99.9%): [3584.166, 7729.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.count":
[info]   33.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala
[info] # Run progress: 78.42% complete, ETA 00:13:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 260187.818 ops/s
[info] # Warmup Iteration   2: 627408.587 ops/s
[info] # Warmup Iteration   3: 622541.984 ops/s
[info] Iteration   1: 621835.603 ops/s
[info]                  ·gc.alloc.rate:                   723.685 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      647.696 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1639.636 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 627421.752 ops/s
[info]                  ·gc.alloc.rate:                   730.432 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.313 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      977.037 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2450.514 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 633525.680 ops/s
[info]                  ·gc.alloc.rate:                   737.380 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.772 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1626.761 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 628409.516 ops/s
[info]                  ·gc.alloc.rate:                   731.447 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.453 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1646.674 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 624639.250 ops/s
[info]                  ·gc.alloc.rate:                   726.985 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.157 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.052 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1663.330 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala":
[info]   627166.360 ±(99.9%) 16878.702 ops/s [Average]
[info]   (min, avg, max) = (621835.603, 627166.360, 633525.680), stdev = 4383.345
[info]   CI (99.9%): [610287.658, 644045.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   729.986 ±(99.9%) 19.797 MB/sec [Average]
[info]   (min, avg, max) = (723.685, 729.986, 737.380), stdev = 5.141
[info]   CI (99.9%): [710.189, 749.782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1832.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1832.001, 1832.001, 1832.001), stdev = 0.001
[info]   CI (99.9%): [1832.001, 1832.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.215 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.125), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.094 ±(99.9%) 0.540 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.094, 0.313), stdev = 0.140
[info]   CI (99.9%): [≈ 0, 0.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   719.402 ±(99.9%) 554.863 MB/sec [Average]
[info]   (min, avg, max) = (647.696, 719.402, 977.037), stdev = 144.096
[info]   CI (99.9%): [164.539, 1274.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1805.383 ±(99.9%) 1389.623 B/op [Average]
[info]   (min, avg, max) = (1626.761, 1805.383, 2450.514), stdev = 360.881
[info]   CI (99.9%): [415.760, 3195.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala
[info] # Run progress: 78.77% complete, ETA 00:13:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3306016.626 ops/s
[info] # Warmup Iteration   2: 3810705.408 ops/s
[info] # Warmup Iteration   3: 3797097.818 ops/s
[info] Iteration   1: 3835883.014 ops/s
[info]                  ·gc.alloc.rate:                   1520.519 MB/sec
[info]                  ·gc.alloc.rate.norm:              624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.051 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1646.027 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 675.507 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 3781951.605 ops/s
[info]                  ·gc.alloc.rate:                   1499.337 MB/sec
[info]                  ·gc.alloc.rate.norm:              624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.043 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1324.851 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 551.382 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 3856063.218 ops/s
[info]                  ·gc.alloc.rate:                   1529.337 MB/sec
[info]                  ·gc.alloc.rate.norm:              624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.034 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1666.899 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 680.128 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 3815468.208 ops/s
[info]                  ·gc.alloc.rate:                   1513.310 MB/sec
[info]                  ·gc.alloc.rate.norm:              624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.034 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.439 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 553.131 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 3784044.157 ops/s
[info]                  ·gc.alloc.rate:                   1500.030 MB/sec
[info]                  ·gc.alloc.rate.norm:              624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.078 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1684.014 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 700.536 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala":
[info]   3814682.040 ±(99.9%) 124365.405 ops/s [Average]
[info]   (min, avg, max) = (3781951.605, 3814682.040, 3856063.218), stdev = 32297.301
[info]   CI (99.9%): [3690316.636, 3939047.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1512.507 ±(99.9%) 50.104 MB/sec [Average]
[info]   (min, avg, max) = (1499.337, 1512.507, 1529.337), stdev = 13.012
[info]   CI (99.9%): [1462.403, 1562.610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   624.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (624.000, 624.000, 624.000), stdev = 0.001
[info]   CI (99.9%): [624.000, 624.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.117 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.117, 0.187), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.048 ±(99.9%) 0.070 B/op [Average]
[info]   (min, avg, max) = (0.034, 0.048, 0.078), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1532.646 ±(99.9%) 703.548 MB/sec [Average]
[info]   (min, avg, max) = (1324.851, 1532.646, 1684.014), stdev = 182.709
[info]   CI (99.9%): [829.098, 2236.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   632.137 ±(99.9%) 283.134 B/op [Average]
[info]   (min, avg, max) = (551.382, 632.137, 700.536), stdev = 73.529
[info]   CI (99.9%): [349.003, 915.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson
[info] # Run progress: 79.11% complete, ETA 00:13:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 50697.236 ops/s
[info] # Warmup Iteration   2: 235866.797 ops/s
[info] # Warmup Iteration   3: 240627.678 ops/s
[info] Iteration   1: 242155.116 ops/s
[info]                  ·gc.alloc.rate:                   1679.225 MB/sec
[info]                  ·gc.alloc.rate.norm:              10912.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.541 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1648.697 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10713.628 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 237907.655 ops/s
[info]                  ·gc.alloc.rate:                   1649.361 MB/sec
[info]                  ·gc.alloc.rate.norm:              10912.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.826 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1664.317 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11010.945 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 241445.926 ops/s
[info]                  ·gc.alloc.rate:                   1674.135 MB/sec
[info]                  ·gc.alloc.rate.norm:              10912.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.271 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1675.174 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10918.777 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 237343.444 ops/s
[info]                  ·gc.alloc.rate:                   1645.365 MB/sec
[info]                  ·gc.alloc.rate.norm:              10912.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.414 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1684.545 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11171.841 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 235549.230 ops/s
[info]                  ·gc.alloc.rate:                   1633.536 MB/sec
[info]                  ·gc.alloc.rate.norm:              10912.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.556 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1691.139 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11296.787 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson":
[info]   238880.274 ±(99.9%) 10841.947 ops/s [Average]
[info]   (min, avg, max) = (235549.230, 238880.274, 242155.116), stdev = 2815.619
[info]   CI (99.9%): [228038.327, 249722.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1656.324 ±(99.9%) 75.298 MB/sec [Average]
[info]   (min, avg, max) = (1633.536, 1656.324, 1679.225), stdev = 19.555
[info]   CI (99.9%): [1581.026, 1731.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   10912.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10912.002, 10912.002, 10912.002), stdev = 0.001
[info]   CI (99.9%): [10912.001, 10912.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.125), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.522 ±(99.9%) 0.791 B/op [Average]
[info]   (min, avg, max) = (0.271, 0.522, 0.826), stdev = 0.205
[info]   CI (99.9%): [≈ 0, 1.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1672.774 ±(99.9%) 64.800 MB/sec [Average]
[info]   (min, avg, max) = (1648.697, 1672.774, 1691.139), stdev = 16.828
[info]   CI (99.9%): [1607.974, 1737.575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   11022.395 ±(99.9%) 869.236 B/op [Average]
[info]   (min, avg, max) = (10713.628, 11022.395, 11296.787), stdev = 225.738
[info]   CI (99.9%): [10153.159, 11891.632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.400, 9.000), stdev = 1.517
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce
[info] # Run progress: 79.45% complete, ETA 00:12:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 564238.899 ops/s
[info] # Warmup Iteration   2: 819211.401 ops/s
[info] # Warmup Iteration   3: 832794.250 ops/s
[info] Iteration   1: 828769.383 ops/s
[info]                  ·gc.alloc.rate:                   1903.848 MB/sec
[info]                  ·gc.alloc.rate.norm:              3616.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.158 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1644.122 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3122.701 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 869408.957 ops/s
[info]                  ·gc.alloc.rate:                   1997.114 MB/sec
[info]                  ·gc.alloc.rate.norm:              3616.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.301 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1991.377 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3605.612 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 868844.878 ops/s
[info]                  ·gc.alloc.rate:                   1996.382 MB/sec
[info]                  ·gc.alloc.rate.norm:              3616.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.226 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2009.329 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3639.452 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 870684.830 ops/s
[info]                  ·gc.alloc.rate:                   2000.225 MB/sec
[info]                  ·gc.alloc.rate.norm:              3616.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.151 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2021.506 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3654.473 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 866931.648 ops/s
[info]                  ·gc.alloc.rate:                   1991.797 MB/sec
[info]                  ·gc.alloc.rate.norm:              3616.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.151 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.735 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3684.875 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce":
[info]   860927.939 ±(99.9%) 69418.998 ops/s [Average]
[info]   (min, avg, max) = (828769.383, 860927.939, 870684.830), stdev = 18027.893
[info]   CI (99.9%): [791508.941, 930346.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1977.873 ±(99.9%) 159.768 MB/sec [Average]
[info]   (min, avg, max) = (1903.848, 1977.873, 2000.225), stdev = 41.491
[info]   CI (99.9%): [1818.106, 2137.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   3616.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3616.000, 3616.000, 3616.001), stdev = 0.001
[info]   CI (99.9%): [3616.000, 3616.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.108 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.108, 0.167), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.198 ±(99.9%) 0.255 B/op [Average]
[info]   (min, avg, max) = (0.151, 0.198, 0.301), stdev = 0.066
[info]   CI (99.9%): [≈ 0, 0.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1939.214 ±(99.9%) 637.635 MB/sec [Average]
[info]   (min, avg, max) = (1644.122, 1939.214, 2029.735), stdev = 165.592
[info]   CI (99.9%): [1301.579, 2576.848] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3541.422 ±(99.9%) 908.003 B/op [Average]
[info]   (min, avg, max) = (3122.701, 3541.422, 3684.875), stdev = 235.805
[info]   CI (99.9%): [2633.420, 4449.425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 6.000), stdev = 0.894
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala
[info] # Run progress: 79.79% complete, ETA 00:12:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_6777d793/target/5e31e36e/jackson-module-afterburner-2.9.4.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 514692.282 ops/s
[info] # Warmup Iteration   2: 1465163.765 ops/s
[info] # Warmup Iteration   3: 1512645.696 ops/s
[info] Iteration   1: 1533923.113 ops/s
[info]                  ·gc.alloc.rate:                   1037.144 MB/sec
[info]                  ·gc.alloc.rate.norm:              1064.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.064 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      977.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1002.307 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1535379.921 ops/s
[info]                  ·gc.alloc.rate:                   1037.877 MB/sec
[info]                  ·gc.alloc.rate.norm:              1064.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.149 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      983.475 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1008.229 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1538156.068 ops/s
[info]                  ·gc.alloc.rate:                   1039.686 MB/sec
[info]                  ·gc.alloc.rate.norm:              1064.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.128 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      988.752 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1011.875 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1523022.415 ops/s
[info]                  ·gc.alloc.rate:                   1029.515 MB/sec
[info]                  ·gc.alloc.rate.norm:              1064.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.129 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1326.851 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1371.297 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 1512776.346 ops/s
[info]                  ·gc.alloc.rate:                   1023.108 MB/sec
[info]                  ·gc.alloc.rate.norm:              1064.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.152 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1001.620 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1041.654 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala":
[info]   1528651.573 ±(99.9%) 40710.681 ops/s [Average]
[info]   (min, avg, max) = (1512776.346, 1528651.573, 1538156.068), stdev = 10572.434
[info]   CI (99.9%): [1487940.892, 1569362.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1033.466 ±(99.9%) 26.857 MB/sec [Average]
[info]   (min, avg, max) = (1023.108, 1033.466, 1039.686), stdev = 6.975
[info]   CI (99.9%): [1006.609, 1060.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1064.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1064.000, 1064.000, 1064.000), stdev = 0.001
[info]   CI (99.9%): [1064.000, 1064.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.121 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.121, 0.146), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.124 ±(99.9%) 0.137 B/op [Average]
[info]   (min, avg, max) = (0.064, 0.124, 0.152), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1055.541 ±(99.9%) 585.052 MB/sec [Average]
[info]   (min, avg, max) = (977.008, 1055.541, 1326.851), stdev = 151.936
[info]   CI (99.9%): [470.489, 1640.594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1087.072 ±(99.9%) 614.605 B/op [Average]
[info]   (min, avg, max) = (1002.307, 1087.072, 1371.297), stdev = 159.611
[info]   CI (99.9%): [472.468, 1701.677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 5.000), stdev = 0.837
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala
[info] # Run progress: 80.14% complete, ETA 00:12:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5531803.592 ops/s
[info] # Warmup Iteration   2: 6330956.611 ops/s
[info] # Warmup Iteration   3: 6873447.065 ops/s
[info] Iteration   1: 6904228.763 ops/s
[info]                  ·gc.alloc.rate:                   771.995 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      981.118 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 223.676 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 6708504.076 ops/s
[info]                  ·gc.alloc.rate:                   750.179 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.840 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 153.163 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 6731729.752 ops/s
[info]                  ·gc.alloc.rate:                   752.709 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.785 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 152.636 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 6723902.507 ops/s
[info]                  ·gc.alloc.rate:                   751.887 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      981.245 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 229.688 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 6722725.892 ops/s
[info]                  ·gc.alloc.rate:                   751.664 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.414 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 153.698 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala":
[info]   6758218.198 ±(99.9%) 315949.308 ops/s [Average]
[info]   (min, avg, max) = (6708504.076, 6758218.198, 6904228.763), stdev = 82051.032
[info]   CI (99.9%): [6442268.891, 7074167.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   755.687 ±(99.9%) 35.281 MB/sec [Average]
[info]   (min, avg, max) = (750.179, 755.687, 771.995), stdev = 9.162
[info]   CI (99.9%): [720.406, 790.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   176.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (176.000, 176.000, 176.000), stdev = 0.001
[info]   CI (99.9%): [176.000, 176.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.075, 0.104), stdev = 0.019
[info]   CI (99.9%): [0.003, 0.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.017 ±(99.9%) 0.016 B/op [Average]
[info]   (min, avg, max) = (0.015, 0.017, 0.024), stdev = 0.004
[info]   CI (99.9%): [0.002, 0.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   784.880 ±(99.9%) 690.049 MB/sec [Average]
[info]   (min, avg, max) = (652.785, 784.880, 981.245), stdev = 179.203
[info]   CI (99.9%): [94.832, 1474.929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   182.572 ±(99.9%) 155.275 B/op [Average]
[info]   (min, avg, max) = (152.636, 182.572, 229.688), stdev = 40.324
[info]   CI (99.9%): [27.297, 337.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson
[info] # Run progress: 80.48% complete, ETA 00:12:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 174979.150 ops/s
[info] # Warmup Iteration   2: 546689.648 ops/s
[info] # Warmup Iteration   3: 545339.666 ops/s
[info] Iteration   1: 548992.213 ops/s
[info]                  ·gc.alloc.rate:                   1893.816 MB/sec
[info]                  ·gc.alloc.rate.norm:              5432.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.418 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1987.142 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5699.686 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 546355.301 ops/s
[info]                  ·gc.alloc.rate:                   1886.093 MB/sec
[info]                  ·gc.alloc.rate.norm:              5432.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.420 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2006.912 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5779.964 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 539728.105 ops/s
[info]                  ·gc.alloc.rate:                   1862.438 MB/sec
[info]                  ·gc.alloc.rate.norm:              5432.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.182 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1682.376 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4906.832 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 549409.360 ops/s
[info]                  ·gc.alloc.rate:                   1896.687 MB/sec
[info]                  ·gc.alloc.rate.norm:              5432.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.298 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2027.620 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5806.986 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 548302.044 ops/s
[info]                  ·gc.alloc.rate:                   1892.192 MB/sec
[info]                  ·gc.alloc.rate.norm:              5432.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.299 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1694.516 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4864.522 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson":
[info]   546557.404 ±(99.9%) 15376.789 ops/s [Average]
[info]   (min, avg, max) = (539728.105, 546557.404, 549409.360), stdev = 3993.303
[info]   CI (99.9%): [531180.616, 561934.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1886.245 ±(99.9%) 53.375 MB/sec [Average]
[info]   (min, avg, max) = (1862.438, 1886.245, 1896.687), stdev = 13.861
[info]   CI (99.9%): [1832.871, 1939.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5432.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5432.001, 5432.001, 5432.001), stdev = 0.001
[info]   CI (99.9%): [5432.001, 5432.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.112 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.112, 0.146), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.323 ±(99.9%) 0.382 B/op [Average]
[info]   (min, avg, max) = (0.182, 0.323, 0.420), stdev = 0.099
[info]   CI (99.9%): [≈ 0, 0.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1879.713 ±(99.9%) 674.789 MB/sec [Average]
[info]   (min, avg, max) = (1682.376, 1879.713, 2027.620), stdev = 175.240
[info]   CI (99.9%): [1204.925, 2554.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   5411.598 ±(99.9%) 1855.815 B/op [Average]
[info]   (min, avg, max) = (4864.522, 5411.598, 5806.986), stdev = 481.949
[info]   CI (99.9%): [3555.783, 7267.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce
[info] # Run progress: 80.82% complete, ETA 00:12:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 407858.797 ops/s
[info] # Warmup Iteration   2: 636903.486 ops/s
[info] # Warmup Iteration   3: 650314.557 ops/s
[info] Iteration   1: 647716.518 ops/s
[info]                  ·gc.alloc.rate:                   2251.790 MB/sec
[info]                  ·gc.alloc.rate.norm:              5472.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.152 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2315.686 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5627.271 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 646808.229 ops/s
[info]                  ·gc.alloc.rate:                   2248.471 MB/sec
[info]                  ·gc.alloc.rate.norm:              5472.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.203 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2340.560 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5696.113 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 648605.643 ops/s
[info]                  ·gc.alloc.rate:                   2254.735 MB/sec
[info]                  ·gc.alloc.rate.norm:              5472.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.303 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2020.198 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4902.804 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 636703.074 ops/s
[info]                  ·gc.alloc.rate:                   2213.597 MB/sec
[info]                  ·gc.alloc.rate.norm:              5472.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.154 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2368.154 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5854.066 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 647670.135 ops/s
[info]                  ·gc.alloc.rate:                   2252.587 MB/sec
[info]                  ·gc.alloc.rate.norm:              5472.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.253 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2373.296 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5765.227 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce":
[info]   645500.720 ±(99.9%) 19095.158 ops/s [Average]
[info]   (min, avg, max) = (636703.074, 645500.720, 648605.643), stdev = 4958.952
[info]   CI (99.9%): [626405.562, 664595.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.alloc.rate":
[info]   2244.236 ±(99.9%) 66.521 MB/sec [Average]
[info]   (min, avg, max) = (2213.597, 2244.236, 2254.735), stdev = 17.275
[info]   CI (99.9%): [2177.715, 2310.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5472.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5472.001, 5472.001, 5472.001), stdev = 0.001
[info]   CI (99.9%): [5472.001, 5472.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.125), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.213 ±(99.9%) 0.251 B/op [Average]
[info]   (min, avg, max) = (0.152, 0.213, 0.303), stdev = 0.065
[info]   CI (99.9%): [≈ 0, 0.464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2283.579 ±(99.9%) 573.893 MB/sec [Average]
[info]   (min, avg, max) = (2020.198, 2283.579, 2373.296), stdev = 149.038
[info]   CI (99.9%): [1709.686, 2857.471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5569.096 ±(99.9%) 1470.244 B/op [Average]
[info]   (min, avg, max) = (4902.804, 5569.096, 5854.066), stdev = 381.818
[info]   CI (99.9%): [4098.853, 7039.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.count":
[info]   34.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 7.000), stdev = 0.837
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala
[info] # Run progress: 81.16% complete, ETA 00:11:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4682466.796 ops/s
[info] # Warmup Iteration   2: 4927192.679 ops/s
[info] # Warmup Iteration   3: 4951226.290 ops/s
[info] Iteration   1: 4982531.874 ops/s
[info]                  ·gc.alloc.rate:                   1241.118 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1313.128 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 414.744 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 4997410.384 ops/s
[info]                  ·gc.alloc.rate:                   1244.993 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1319.275 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 415.389 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 5028553.164 ops/s
[info]                  ·gc.alloc.rate:                   1252.416 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      994.150 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 311.164 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 4874904.389 ops/s
[info]                  ·gc.alloc.rate:                   1214.111 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1332.210 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 430.131 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 5040022.405 ops/s
[info]                  ·gc.alloc.rate:                   1255.535 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.181 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 418.116 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala":
[info]   4984684.443 ±(99.9%) 252540.293 ops/s [Average]
[info]   (min, avg, max) = (4874904.389, 4984684.443, 5040022.405), stdev = 65583.912
[info]   CI (99.9%): [4732144.150, 5237224.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1241.635 ±(99.9%) 63.231 MB/sec [Average]
[info]   (min, avg, max) = (1214.111, 1241.635, 1255.535), stdev = 16.421
[info]   CI (99.9%): [1178.404, 1304.865] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   392.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (392.000, 392.000, 392.000), stdev = 0.001
[info]   CI (99.9%): [392.000, 392.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.188 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.167), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.026 ±(99.9%) 0.059 B/op [Average]
[info]   (min, avg, max) = (0.013, 0.026, 0.052), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1259.589 ±(99.9%) 572.748 MB/sec [Average]
[info]   (min, avg, max) = (994.150, 1259.589, 1339.181), stdev = 148.741
[info]   CI (99.9%): [686.841, 1832.337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   397.909 ±(99.9%) 188.251 B/op [Average]
[info]   (min, avg, max) = (311.164, 397.909, 430.131), stdev = 48.888
[info]   CI (99.9%): [209.658, 586.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson
[info] # Run progress: 81.51% complete, ETA 00:11:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 120021.401 ops/s
[info] # Warmup Iteration   2: 361161.281 ops/s
[info] # Warmup Iteration   3: 355950.177 ops/s
[info] Iteration   1: 355856.497 ops/s
[info]                  ·gc.alloc.rate:                   1850.826 MB/sec
[info]                  ·gc.alloc.rate.norm:              8184.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.552 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1988.571 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8793.081 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 362254.473 ops/s
[info]                  ·gc.alloc.rate:                   1884.014 MB/sec
[info]                  ·gc.alloc.rate.norm:              8184.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.633 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1671.661 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7261.559 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 360263.550 ops/s
[info]                  ·gc.alloc.rate:                   1873.121 MB/sec
[info]                  ·gc.alloc.rate.norm:              8184.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.182 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2018.109 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8817.481 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 358210.486 ops/s
[info]                  ·gc.alloc.rate:                   1862.409 MB/sec
[info]                  ·gc.alloc.rate.norm:              8184.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.457 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1689.761 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7425.334 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 359491.269 ops/s
[info]                  ·gc.alloc.rate:                   1869.885 MB/sec
[info]                  ·gc.alloc.rate.norm:              8184.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.729 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033.659 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8900.794 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson":
[info]   359215.255 ±(99.9%) 9173.663 ops/s [Average]
[info]   (min, avg, max) = (355856.497, 359215.255, 362254.473), stdev = 2382.371
[info]   CI (99.9%): [350041.592, 368388.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1868.051 ±(99.9%) 47.646 MB/sec [Average]
[info]   (min, avg, max) = (1850.826, 1868.051, 1884.014), stdev = 12.374
[info]   CI (99.9%): [1820.405, 1915.697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   8184.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8184.001, 8184.001, 8184.001), stdev = 0.001
[info]   CI (99.9%): [8184.001, 8184.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.117 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.117, 0.167), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.511 ±(99.9%) 0.806 B/op [Average]
[info]   (min, avg, max) = (0.182, 0.511, 0.729), stdev = 0.209
[info]   CI (99.9%): [≈ 0, 1.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1880.352 ±(99.9%) 704.962 MB/sec [Average]
[info]   (min, avg, max) = (1671.661, 1880.352, 2033.659), stdev = 183.076
[info]   CI (99.9%): [1175.390, 2585.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   8239.650 ±(99.9%) 3161.904 B/op [Average]
[info]   (min, avg, max) = (7261.559, 8239.650, 8900.794), stdev = 821.136
[info]   CI (99.9%): [5077.746, 11401.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.600, 8.000), stdev = 1.140
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce
[info] # Run progress: 81.85% complete, ETA 00:11:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 231434.108 ops/s
[info] # Warmup Iteration   2: 452496.743 ops/s
[info] # Warmup Iteration   3: 466065.315 ops/s
[info] Iteration   1: 464420.972 ops/s
[info]                  ·gc.alloc.rate:                   1201.885 MB/sec
[info]                  ·gc.alloc.rate.norm:              4072.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.071 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1301.294 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4408.798 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 456357.056 ops/s
[info]                  ·gc.alloc.rate:                   1180.863 MB/sec
[info]                  ·gc.alloc.rate.norm:              4072.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.144 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      979.669 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3378.220 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 455488.160 ops/s
[info]                  ·gc.alloc.rate:                   1178.372 MB/sec
[info]                  ·gc.alloc.rate.norm:              4072.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.360 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1314.195 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4541.353 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 453458.503 ops/s
[info]                  ·gc.alloc.rate:                   1173.631 MB/sec
[info]                  ·gc.alloc.rate.norm:              4072.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1323.423 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4591.716 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 459538.072 ops/s
[info]                  ·gc.alloc.rate:                   1188.895 MB/sec
[info]                  ·gc.alloc.rate.norm:              4072.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.214 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      997.505 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3416.482 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce":
[info]   457852.553 ±(99.9%) 16463.433 ops/s [Average]
[info]   (min, avg, max) = (453458.503, 457852.553, 464420.972), stdev = 4275.501
[info]   CI (99.9%): [441389.120, 474315.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1184.729 ±(99.9%) 42.629 MB/sec [Average]
[info]   (min, avg, max) = (1173.631, 1184.729, 1201.885), stdev = 11.071
[info]   CI (99.9%): [1142.100, 1227.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   4072.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4072.001, 4072.001, 4072.001), stdev = 0.001
[info]   CI (99.9%): [4072.001, 4072.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.104), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.158 ±(99.9%) 0.533 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.158, 0.360), stdev = 0.138
[info]   CI (99.9%): [≈ 0, 0.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1183.217 ±(99.9%) 685.251 MB/sec [Average]
[info]   (min, avg, max) = (979.669, 1183.217, 1323.423), stdev = 177.958
[info]   CI (99.9%): [497.966, 1868.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4067.314 ±(99.9%) 2369.597 B/op [Average]
[info]   (min, avg, max) = (3378.220, 4067.314, 4591.716), stdev = 615.377
[info]   CI (99.9%): [1697.717, 6436.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.600, 5.000), stdev = 1.342
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala
[info] # Run progress: 82.19% complete, ETA 00:11:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2845591.456 ops/s
[info] # Warmup Iteration   2: 3244268.562 ops/s
[info] # Warmup Iteration   3: 3242675.860 ops/s
[info] Iteration   1: 3406506.002 ops/s
[info]                  ·gc.alloc.rate:                   623.477 MB/sec
[info]                  ·gc.alloc.rate.norm:              288.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.714 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.716 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.947 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 303.461 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 3380268.488 ops/s
[info]                  ·gc.alloc.rate:                   618.466 MB/sec
[info]                  ·gc.alloc.rate.norm:              288.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.029 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.744 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 303.962 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 3266308.157 ops/s
[info]                  ·gc.alloc.rate:                   597.585 MB/sec
[info]                  ·gc.alloc.rate.norm:              288.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.040 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.698 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 314.561 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 3406635.432 ops/s
[info]                  ·gc.alloc.rate:                   623.532 MB/sec
[info]                  ·gc.alloc.rate.norm:              288.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.029 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.968 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 301.596 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 3409685.327 ops/s
[info]                  ·gc.alloc.rate:                   623.842 MB/sec
[info]                  ·gc.alloc.rate.norm:              288.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.029 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.388 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 301.640 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala":
[info]   3373880.681 ±(99.9%) 236053.501 ops/s [Average]
[info]   (min, avg, max) = (3266308.157, 3373880.681, 3409685.327), stdev = 61302.345
[info]   CI (99.9%): [3137827.180, 3609934.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   617.380 ±(99.9%) 43.471 MB/sec [Average]
[info]   (min, avg, max) = (597.585, 617.380, 623.842), stdev = 11.289
[info]   CI (99.9%): [573.910, 660.851] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   288.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (288.000, 288.000, 288.000), stdev = 0.001
[info]   CI (99.9%): [288.000, 288.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.797 ±(99.9%) 6.280 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.797, 3.714), stdev = 1.631
[info]   CI (99.9%): [≈ 0, 7.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.369 ±(99.9%) 2.900 B/op [Average]
[info]   (min, avg, max) = (0.029, 0.369, 1.716), stdev = 0.753
[info]   CI (99.9%): [≈ 0, 3.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   653.749 ±(99.9%) 6.963 MB/sec [Average]
[info]   (min, avg, max) = (652.698, 653.749, 656.947), stdev = 1.808
[info]   CI (99.9%): [646.786, 660.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   305.044 ±(99.9%) 20.890 B/op [Average]
[info]   (min, avg, max) = (301.596, 305.044, 314.561), stdev = 5.425
[info]   CI (99.9%): [284.154, 325.934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 4.000), stdev = 1.095
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson
[info] # Run progress: 82.53% complete, ETA 00:10:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 88107.408 ops/s
[info] # Warmup Iteration   2: 325895.121 ops/s
[info] # Warmup Iteration   3: 326911.360 ops/s
[info] Iteration   1: 321068.499 ops/s
[info]                  ·gc.alloc.rate:                   1173.039 MB/sec
[info]                  ·gc.alloc.rate.norm:              5752.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.306 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1309.922 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6423.205 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 324950.715 ops/s
[info]                  ·gc.alloc.rate:                   1187.548 MB/sec
[info]                  ·gc.alloc.rate.norm:              5752.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.403 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      989.512 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4792.799 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 317815.716 ops/s
[info]                  ·gc.alloc.rate:                   1161.460 MB/sec
[info]                  ·gc.alloc.rate.norm:              5752.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.412 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1327.925 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6576.404 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 324885.786 ops/s
[info]                  ·gc.alloc.rate:                   1187.205 MB/sec
[info]                  ·gc.alloc.rate.norm:              5752.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.303 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1001.105 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4850.350 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 325554.772 ops/s
[info]                  ·gc.alloc.rate:                   1190.153 MB/sec
[info]                  ·gc.alloc.rate.norm:              5752.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.201 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.365 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6482.810 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson":
[info]   322855.098 ±(99.9%) 12827.739 ops/s [Average]
[info]   (min, avg, max) = (317815.716, 322855.098, 325554.772), stdev = 3331.323
[info]   CI (99.9%): [310027.359, 335682.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1179.881 ±(99.9%) 47.320 MB/sec [Average]
[info]   (min, avg, max) = (1161.460, 1179.881, 1190.153), stdev = 12.289
[info]   CI (99.9%): [1132.561, 1227.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5752.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5752.001, 5752.001, 5752.001), stdev = 0.001
[info]   CI (99.9%): [5752.001, 5752.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.083), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.325 ±(99.9%) 0.333 B/op [Average]
[info]   (min, avg, max) = (0.201, 0.325, 0.412), stdev = 0.087
[info]   CI (99.9%): [≈ 0, 0.658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1193.966 ±(99.9%) 699.806 MB/sec [Average]
[info]   (min, avg, max) = (989.512, 1193.966, 1341.365), stdev = 181.737
[info]   CI (99.9%): [494.160, 1893.772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   5825.114 ±(99.9%) 3534.711 B/op [Average]
[info]   (min, avg, max) = (4792.799, 5825.114, 6576.404), stdev = 917.953
[info]   CI (99.9%): [2290.403, 9359.825] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 0.837
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce
[info] # Run progress: 82.88% complete, ETA 00:10:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1035944.707 ops/s
[info] # Warmup Iteration   2: 2028213.156 ops/s
[info] # Warmup Iteration   3: 2075029.742 ops/s
[info] Iteration   1: 2080564.658 ops/s
[info]                  ·gc.alloc.rate:                   3014.138 MB/sec
[info]                  ·gc.alloc.rate.norm:              2280.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.063 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3005.011 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2273.096 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 2091754.887 ops/s
[info]                  ·gc.alloc.rate:                   3030.291 MB/sec
[info]                  ·gc.alloc.rate.norm:              2280.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.063 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3034.324 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2283.035 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 2069202.379 ops/s
[info]                  ·gc.alloc.rate:                   2997.282 MB/sec
[info]                  ·gc.alloc.rate.norm:              2280.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.127 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3049.969 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2320.078 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 2039308.499 ops/s
[info]                  ·gc.alloc.rate:                   2953.863 MB/sec
[info]                  ·gc.alloc.rate.norm:              2280.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.064 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2717.554 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2097.600 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 2056741.822 ops/s
[info]                  ·gc.alloc.rate:                   2979.318 MB/sec
[info]                  ·gc.alloc.rate.norm:              2280.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.080 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3062.696 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2343.807 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce":
[info]   2067514.449 ±(99.9%) 78735.570 ops/s [Average]
[info]   (min, avg, max) = (2039308.499, 2067514.449, 2091754.887), stdev = 20447.378
[info]   CI (99.9%): [1988778.879, 2146250.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate":
[info]   2994.979 ±(99.9%) 114.797 MB/sec [Average]
[info]   (min, avg, max) = (2953.863, 2994.979, 3030.291), stdev = 29.813
[info]   CI (99.9%): [2880.181, 3109.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2280.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2280.000, 2280.000, 2280.000), stdev = 0.001
[info]   CI (99.9%): [2280.000, 2280.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.104 ±(99.9%) 0.139 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.104, 0.167), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.079 ±(99.9%) 0.106 B/op [Average]
[info]   (min, avg, max) = (0.063, 0.079, 0.127), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2973.911 ±(99.9%) 558.023 MB/sec [Average]
[info]   (min, avg, max) = (2717.554, 2973.911, 3062.696), stdev = 144.917
[info]   CI (99.9%): [2415.888, 3531.934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2263.523 ±(99.9%) 373.566 B/op [Average]
[info]   (min, avg, max) = (2097.600, 2263.523, 2343.807), stdev = 97.014
[info]   CI (99.9%): [1889.957, 2637.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.count":
[info]   44.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.800, 9.000), stdev = 0.447
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 8.200, 9.000), stdev = 0.837
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala
[info] # Run progress: 83.22% complete, ETA 00:10:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 31923.890 ops/s
[info] # Warmup Iteration   2: 252191.831 ops/s
[info] # Warmup Iteration   3: 268106.598 ops/s
[info] Iteration   1: 280800.983 ops/s
[info]                  ·gc.alloc.rate:                   505.242 MB/sec
[info]                  ·gc.alloc.rate.norm:              2832.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.117 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.787 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1433.746 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 278613.673 ops/s
[info]                  ·gc.alloc.rate:                   501.356 MB/sec
[info]                  ·gc.alloc.rate.norm:              2832.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.058 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      646.184 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3650.087 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 278448.928 ops/s
[info]                  ·gc.alloc.rate:                   500.967 MB/sec
[info]                  ·gc.alloc.rate.norm:              2832.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      325.362 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1839.297 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 274941.235 ops/s
[info]                  ·gc.alloc.rate:                   494.671 MB/sec
[info]                  ·gc.alloc.rate.norm:              2832.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.596 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.079 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3733.161 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 274611.319 ops/s
[info]                  ·gc.alloc.rate:                   494.288 MB/sec
[info]                  ·gc.alloc.rate.norm:              2832.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      326.843 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1872.634 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala":
[info]   277483.228 ±(99.9%) 10174.661 ops/s [Average]
[info]   (min, avg, max) = (274611.319, 277483.228, 280800.983), stdev = 2642.327
[info]   CI (99.9%): [267308.567, 287657.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   499.305 ±(99.9%) 18.149 MB/sec [Average]
[info]   (min, avg, max) = (494.288, 499.305, 505.242), stdev = 4.713
[info]   CI (99.9%): [481.155, 517.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2832.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2832.001, 2832.001, 2832.002), stdev = 0.001
[info]   CI (99.9%): [2832.001, 2832.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.316 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.187), stdev = 0.082
[info]   CI (99.9%): [≈ 0, 0.378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.354 ±(99.9%) 1.787 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.354, 1.058), stdev = 0.464
[info]   CI (99.9%): [≈ 0, 2.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   441.251 ±(99.9%) 739.089 MB/sec [Average]
[info]   (min, avg, max) = (255.787, 441.251, 652.079), stdev = 191.939
[info]   CI (99.9%): [≈ 0, 1180.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2505.785 ±(99.9%) 4222.664 B/op [Average]
[info]   (min, avg, max) = (1433.746, 2505.785, 3733.161), stdev = 1096.612
[info]   CI (99.9%): [≈ 0, 6728.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala
[info] # Run progress: 83.56% complete, ETA 00:10:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 641895.141 ops/s
[info] # Warmup Iteration   2: 698954.139 ops/s
[info] # Warmup Iteration   3: 700142.743 ops/s
[info] Iteration   1: 679530.062 ops/s
[info]                  ·gc.alloc.rate:                   431.841 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.858 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 592.482 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 657426.778 ops/s
[info]                  ·gc.alloc.rate:                   417.890 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.269 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.823 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      664.228 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1589.481 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 661626.554 ops/s
[info]                  ·gc.alloc.rate:                   420.361 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.397 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 785.984 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 672648.321 ops/s
[info]                  ·gc.alloc.rate:                   427.407 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.097 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.431 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 773.108 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 679692.460 ops/s
[info]                  ·gc.alloc.rate:                   432.044 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.894 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 763.567 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala":
[info]   670184.835 ±(99.9%) 39448.393 ops/s [Average]
[info]   (min, avg, max) = (657426.778, 670184.835, 679692.460), stdev = 10244.622
[info]   CI (99.9%): [630736.442, 709633.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   425.909 ±(99.9%) 25.116 MB/sec [Average]
[info]   (min, avg, max) = (417.890, 425.909, 432.044), stdev = 6.522
[info]   CI (99.9%): [400.793, 451.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1000.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1000.001, 1000.001, 1000.001), stdev = 0.001
[info]   CI (99.9%): [1000.001, 1000.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.662 ±(99.9%) 5.612 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.662, 3.269), stdev = 1.457
[info]   CI (99.9%): [≈ 0, 6.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.584 ±(99.9%) 13.430 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.584, 7.823), stdev = 3.488
[info]   CI (99.9%): [≈ 0, 15.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   382.162 ±(99.9%) 619.706 MB/sec [Average]
[info]   (min, avg, max) = (255.858, 382.162, 664.228), stdev = 160.936
[info]   CI (99.9%): [≈ 0, 1001.868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   900.924 ±(99.9%) 1513.139 B/op [Average]
[info]   (min, avg, max) = (592.482, 900.924, 1589.481), stdev = 392.957
[info]   CI (99.9%): [≈ 0, 2414.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 4.000), stdev = 1.483
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless
[info] # Run progress: 83.90% complete, ETA 00:10:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3269286.791 ops/s
[info] # Warmup Iteration   2: 3633437.407 ops/s
[info] # Warmup Iteration   3: 3726704.702 ops/s
[info] Iteration   1: 3772691.543 ops/s
[info]                  ·gc.alloc.rate:                   1227.158 MB/sec
[info]                  ·gc.alloc.rate.norm:              512.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1319.114 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 550.366 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 3713200.965 ops/s
[info]                  ·gc.alloc.rate:                   1207.672 MB/sec
[info]                  ·gc.alloc.rate.norm:              512.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.035 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1322.687 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 560.761 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 3615310.173 ops/s
[info]                  ·gc.alloc.rate:                   1175.926 MB/sec
[info]                  ·gc.alloc.rate.norm:              512.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      995.405 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 433.401 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 3676351.735 ops/s
[info]                  ·gc.alloc.rate:                   1196.119 MB/sec
[info]                  ·gc.alloc.rate.norm:              512.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1333.825 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 570.945 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 3744248.154 ops/s
[info]                  ·gc.alloc.rate:                   1217.934 MB/sec
[info]                  ·gc.alloc.rate.norm:              512.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1340.115 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 563.363 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless":
[info]   3704360.514 ±(99.9%) 236217.171 ops/s [Average]
[info]   (min, avg, max) = (3615310.173, 3704360.514, 3772691.543), stdev = 61344.849
[info]   CI (99.9%): [3468143.343, 3940577.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate":
[info]   1204.962 ±(99.9%) 76.762 MB/sec [Average]
[info]   (min, avg, max) = (1175.926, 1204.962, 1227.158), stdev = 19.935
[info]   CI (99.9%): [1128.200, 1281.724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm":
[info]   512.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (512.000, 512.000, 512.000), stdev = 0.001
[info]   CI (99.9%): [512.000, 512.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.071, 0.083), stdev = 0.011
[info]   CI (99.9%): [0.027, 0.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space.norm":
[info]   0.030 ±(99.9%) 0.020 B/op [Average]
[info]   (min, avg, max) = (0.026, 0.030, 0.036), stdev = 0.005
[info]   CI (99.9%): [0.010, 0.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space":
[info]   1262.229 ±(99.9%) 575.275 MB/sec [Average]
[info]   (min, avg, max) = (995.405, 1262.229, 1340.115), stdev = 149.397
[info]   CI (99.9%): [686.954, 1837.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space.norm":
[info]   535.767 ±(99.9%) 222.170 B/op [Average]
[info]   (min, avg, max) = (433.401, 535.767, 570.945), stdev = 57.697
[info]   CI (99.9%): [313.598, 757.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump
[info] # Run progress: 84.25% complete, ETA 00:09:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6198489.716 ops/s
[info] # Warmup Iteration   2: 6516028.943 ops/s
[info] # Warmup Iteration   3: 6430266.863 ops/s
[info] Iteration   1: 6468842.463 ops/s
[info]                  ·gc.alloc.rate:                   559.062 MB/sec
[info]                  ·gc.alloc.rate.norm:              136.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.151 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.767 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      664.224 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 161.582 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 6450340.102 ops/s
[info]                  ·gc.alloc.rate:                   557.271 MB/sec
[info]                  ·gc.alloc.rate.norm:              136.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.336 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 80.617 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 6472828.278 ops/s
[info]                  ·gc.alloc.rate:                   559.383 MB/sec
[info]                  ·gc.alloc.rate.norm:              136.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.204 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 160.512 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 6726158.895 ops/s
[info]                  ·gc.alloc.rate:                   581.428 MB/sec
[info]                  ·gc.alloc.rate.norm:              136.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      659.718 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 154.313 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 6664979.076 ops/s
[info]                  ·gc.alloc.rate:                   575.867 MB/sec
[info]                  ·gc.alloc.rate.norm:              136.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      659.759 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 155.812 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump":
[info]   6556629.763 ±(99.9%) 496518.442 ops/s [Average]
[info]   (min, avg, max) = (6450340.102, 6556629.763, 6726158.895), stdev = 128944.263
[info]   CI (99.9%): [6060111.321, 7053148.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate":
[info]   566.602 ±(99.9%) 43.124 MB/sec [Average]
[info]   (min, avg, max) = (557.271, 566.602, 581.428), stdev = 11.199
[info]   CI (99.9%): [523.478, 609.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm":
[info]   136.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (136.000, 136.000, 136.000), stdev = 0.001
[info]   CI (99.9%): [136.000, 136.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space":
[info]   0.676 ±(99.9%) 5.331 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.676, 3.151), stdev = 1.384
[info]   CI (99.9%): [≈ 0, 6.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space.norm":
[info]   0.164 ±(99.9%) 1.297 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.164, 0.767), stdev = 0.337
[info]   CI (99.9%): [≈ 0, 1.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space":
[info]   594.848 ±(99.9%) 569.428 MB/sec [Average]
[info]   (min, avg, max) = (330.336, 594.848, 664.224), stdev = 147.879
[info]   CI (99.9%): [25.420, 1164.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space.norm":
[info]   142.567 ±(99.9%) 133.872 B/op [Average]
[info]   (min, avg, max) = (80.617, 142.567, 161.582), stdev = 34.766
[info]   CI (99.9%): [8.695, 276.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson
[info] # Run progress: 84.59% complete, ETA 00:09:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18003.684 ops/s
[info] # Warmup Iteration   2: 192195.196 ops/s
[info] # Warmup Iteration   3: 203370.973 ops/s
[info] Iteration   1: 203452.372 ops/s
[info]                  ·gc.alloc.rate:                   1294.448 MB/sec
[info]                  ·gc.alloc.rate.norm:              10016.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.322 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1309.319 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10131.070 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 206541.339 ops/s
[info]                  ·gc.alloc.rate:                   1314.624 MB/sec
[info]                  ·gc.alloc.rate.norm:              10016.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.635 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1320.528 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10060.985 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 206646.046 ops/s
[info]                  ·gc.alloc.rate:                   1314.890 MB/sec
[info]                  ·gc.alloc.rate.norm:              10016.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.476 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1330.109 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10131.929 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 205292.776 ops/s
[info]                  ·gc.alloc.rate:                   1306.310 MB/sec
[info]                  ·gc.alloc.rate.norm:              10016.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.638 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1337.445 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10254.722 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 204539.096 ops/s
[info]                  ·gc.alloc.rate:                   1301.496 MB/sec
[info]                  ·gc.alloc.rate.norm:              10016.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.641 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.081 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10343.726 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson":
[info]   205294.326 ±(99.9%) 5218.069 ops/s [Average]
[info]   (min, avg, max) = (203452.372, 205294.326, 206646.046), stdev = 1355.116
[info]   CI (99.9%): [200076.257, 210512.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1306.354 ±(99.9%) 33.713 MB/sec [Average]
[info]   (min, avg, max) = (1294.448, 1306.354, 1314.890), stdev = 8.755
[info]   CI (99.9%): [1272.641, 1340.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   10016.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10016.002, 10016.002, 10016.002), stdev = 0.001
[info]   CI (99.9%): [10016.002, 10016.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.083), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.542 ±(99.9%) 0.546 B/op [Average]
[info]   (min, avg, max) = (0.322, 0.542, 0.641), stdev = 0.142
[info]   CI (99.9%): [≈ 0, 1.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1328.296 ±(99.9%) 52.959 MB/sec [Average]
[info]   (min, avg, max) = (1309.319, 1328.296, 1344.081), stdev = 13.753
[info]   CI (99.9%): [1275.338, 1381.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   10184.486 ±(99.9%) 435.474 B/op [Average]
[info]   (min, avg, max) = (10060.985, 10184.486, 10343.726), stdev = 113.091
[info]   CI (99.9%): [9749.012, 10619.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce
[info] # Run progress: 84.93% complete, ETA 00:09:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 477699.207 ops/s
[info] # Warmup Iteration   2: 720529.092 ops/s
[info] # Warmup Iteration   3: 727973.187 ops/s
[info] Iteration   1: 727918.400 ops/s
[info]                  ·gc.alloc.rate:                   2782.344 MB/sec
[info]                  ·gc.alloc.rate.norm:              6016.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.135 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2669.150 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5771.251 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 713823.518 ops/s
[info]                  ·gc.alloc.rate:                   2728.337 MB/sec
[info]                  ·gc.alloc.rate.norm:              6016.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.367 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2693.684 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5939.592 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 695174.942 ops/s
[info]                  ·gc.alloc.rate:                   2657.041 MB/sec
[info]                  ·gc.alloc.rate.norm:              6016.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.189 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2708.163 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6131.750 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 701526.478 ops/s
[info]                  ·gc.alloc.rate:                   2681.354 MB/sec
[info]                  ·gc.alloc.rate.norm:              6016.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.187 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2715.673 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6093.001 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 717772.598 ops/s
[info]                  ·gc.alloc.rate:                   2743.393 MB/sec
[info]                  ·gc.alloc.rate.norm:              6016.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.274 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2719.613 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5963.852 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce":
[info]   711243.187 ±(99.9%) 50204.666 ops/s [Average]
[info]   (min, avg, max) = (695174.942, 711243.187, 727918.400), stdev = 13037.992
[info]   CI (99.9%): [661038.521, 761447.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.alloc.rate":
[info]   2718.494 ±(99.9%) 192.047 MB/sec [Average]
[info]   (min, avg, max) = (2657.041, 2718.494, 2782.344), stdev = 49.874
[info]   CI (99.9%): [2526.447, 2910.541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   6016.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6016.001, 6016.001, 6016.001), stdev = 0.001
[info]   CI (99.9%): [6016.001, 6016.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.104 ±(99.9%) 0.160 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.104, 0.167), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.230 ±(99.9%) 0.352 B/op [Average]
[info]   (min, avg, max) = (0.135, 0.230, 0.367), stdev = 0.091
[info]   CI (99.9%): [≈ 0, 0.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2701.257 ±(99.9%) 78.930 MB/sec [Average]
[info]   (min, avg, max) = (2669.150, 2701.257, 2719.613), stdev = 20.498
[info]   CI (99.9%): [2622.327, 2780.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5979.889 ±(99.9%) 548.858 B/op [Average]
[info]   (min, avg, max) = (5771.251, 5979.889, 6131.750), stdev = 142.537
[info]   CI (99.9%): [5431.031, 6528.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.count":
[info]   40.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.000, 8.000), stdev = 0.001
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.200, 8.000), stdev = 0.447
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala
[info] # Run progress: 85.27% complete, ETA 00:09:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3203610.808 ops/s
[info] # Warmup Iteration   2: 3781749.442 ops/s
[info] # Warmup Iteration   3: 3812763.407 ops/s
[info] Iteration   1: 3842140.194 ops/s
[info]                  ·gc.alloc.rate:                   2480.977 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.051 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2668.649 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1092.855 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 3793611.400 ops/s
[info]                  ·gc.alloc.rate:                   2448.344 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.043 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2353.305 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 976.561 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 3729418.330 ops/s
[info]                  ·gc.alloc.rate:                   2407.204 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.044 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2366.170 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 998.681 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 3783709.487 ops/s
[info]                  ·gc.alloc.rate:                   2442.229 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.061 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2374.480 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 987.816 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 3775067.400 ops/s
[info]                  ·gc.alloc.rate:                   2436.559 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.035 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2377.766 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 991.485 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala":
[info]   3784789.362 ±(99.9%) 155565.301 ops/s [Average]
[info]   (min, avg, max) = (3729418.330, 3784789.362, 3842140.194), stdev = 40399.815
[info]   CI (99.9%): [3629224.061, 3940354.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2443.062 ±(99.9%) 101.773 MB/sec [Average]
[info]   (min, avg, max) = (2407.204, 2443.062, 2480.977), stdev = 26.430
[info]   CI (99.9%): [2341.289, 2544.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1016.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1016.000, 1016.000, 1016.000), stdev = 0.001
[info]   CI (99.9%): [1016.000, 1016.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.112 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.112, 0.146), stdev = 0.024
[info]   CI (99.9%): [0.021, 0.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.047 ±(99.9%) 0.037 B/op [Average]
[info]   (min, avg, max) = (0.035, 0.047, 0.061), stdev = 0.010
[info]   CI (99.9%): [0.009, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   2428.074 ±(99.9%) 519.130 MB/sec [Average]
[info]   (min, avg, max) = (2353.305, 2428.074, 2668.649), stdev = 134.816
[info]   CI (99.9%): [1908.944, 2947.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1009.480 ±(99.9%) 182.091 B/op [Average]
[info]   (min, avg, max) = (976.561, 1009.480, 1092.855), stdev = 47.288
[info]   CI (99.9%): [827.389, 1191.570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.count":
[info]   36.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.200, 8.000), stdev = 0.447
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson
[info] # Run progress: 85.62% complete, ETA 00:09:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 57902.718 ops/s
[info] # Warmup Iteration   2: 253540.241 ops/s
[info] # Warmup Iteration   3: 253079.562 ops/s
[info] Iteration   1: 257445.762 ops/s
[info]                  ·gc.alloc.rate:                   1841.125 MB/sec
[info]                  ·gc.alloc.rate.norm:              11256.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.764 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1984.309 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12131.376 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 261659.597 ops/s
[info]                  ·gc.alloc.rate:                   1870.992 MB/sec
[info]                  ·gc.alloc.rate.norm:              11256.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.751 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1668.675 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10038.850 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 260416.540 ops/s
[info]                  ·gc.alloc.rate:                   1862.186 MB/sec
[info]                  ·gc.alloc.rate.norm:              11256.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.503 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2015.774 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12184.365 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 259966.208 ops/s
[info]                  ·gc.alloc.rate:                   1858.819 MB/sec
[info]                  ·gc.alloc.rate.norm:              11256.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.504 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1686.966 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10215.354 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 262487.913 ops/s
[info]                  ·gc.alloc.rate:                   1877.037 MB/sec
[info]                  ·gc.alloc.rate.norm:              11256.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.624 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032.179 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12186.335 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson":
[info]   260395.204 ±(99.9%) 7422.315 ops/s [Average]
[info]   (min, avg, max) = (257445.762, 260395.204, 262487.913), stdev = 1927.552
[info]   CI (99.9%): [252972.888, 267817.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1862.032 ±(99.9%) 52.828 MB/sec [Average]
[info]   (min, avg, max) = (1841.125, 1862.032, 1877.037), stdev = 13.719
[info]   CI (99.9%): [1809.204, 1914.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   11256.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11256.002, 11256.002, 11256.002), stdev = 0.001
[info]   CI (99.9%): [11256.001, 11256.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.104 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.104, 0.125), stdev = 0.021
[info]   CI (99.9%): [0.024, 0.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.629 ±(99.9%) 0.489 B/op [Average]
[info]   (min, avg, max) = (0.503, 0.629, 0.764), stdev = 0.127
[info]   CI (99.9%): [0.140, 1.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1877.580 ±(99.9%) 705.741 MB/sec [Average]
[info]   (min, avg, max) = (1668.675, 1877.580, 2032.179), stdev = 183.279
[info]   CI (99.9%): [1171.839, 2583.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   11351.256 ±(99.9%) 4310.614 B/op [Average]
[info]   (min, avg, max) = (10038.850, 11351.256, 12186.335), stdev = 1119.453
[info]   CI (99.9%): [7040.642, 15661.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.400, 7.000), stdev = 0.894
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce
[info] # Run progress: 85.96% complete, ETA 00:08:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 504611.135 ops/s
[info] # Warmup Iteration   2: 791909.696 ops/s
[info] # Warmup Iteration   3: 826414.792 ops/s
[info] Iteration   1: 822228.138 ops/s
[info]                  ·gc.alloc.rate:                   1805.873 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.199 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1967.462 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3765.242 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 812319.740 ops/s
[info]                  ·gc.alloc.rate:                   1783.571 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.323 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1654.898 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3206.672 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 825401.406 ops/s
[info]                  ·gc.alloc.rate:                   1812.253 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.198 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2002.894 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3819.558 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 821496.547 ops/s
[info]                  ·gc.alloc.rate:                   1803.687 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.120 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1680.479 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3219.924 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 824159.441 ops/s
[info]                  ·gc.alloc.rate:                   1809.373 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.199 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1686.994 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3222.250 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce":
[info]   821121.055 ±(99.9%) 19858.178 ops/s [Average]
[info]   (min, avg, max) = (812319.740, 821121.055, 825401.406), stdev = 5157.106
[info]   CI (99.9%): [801262.877, 840979.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1802.951 ±(99.9%) 43.583 MB/sec [Average]
[info]   (min, avg, max) = (1783.571, 1802.951, 1812.253), stdev = 11.318
[info]   CI (99.9%): [1759.369, 1846.534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   3456.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3456.000, 3456.001, 3456.001), stdev = 0.001
[info]   CI (99.9%): [3456.000, 3456.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.108 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.108, 0.167), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.208 ±(99.9%) 0.280 B/op [Average]
[info]   (min, avg, max) = (0.120, 0.208, 0.323), stdev = 0.073
[info]   CI (99.9%): [≈ 0, 0.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1798.545 ±(99.9%) 659.431 MB/sec [Average]
[info]   (min, avg, max) = (1654.898, 1798.545, 2002.894), stdev = 171.252
[info]   CI (99.9%): [1139.114, 2457.977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3446.729 ±(99.9%) 1217.544 B/op [Average]
[info]   (min, avg, max) = (3206.672, 3446.729, 3819.558), stdev = 316.192
[info]   CI (99.9%): [2229.185, 4664.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 1.095
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala
[info] # Run progress: 86.30% complete, ETA 00:08:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_6777d793/target/5e31e36e/jackson-module-afterburner-2.9.4.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 647909.265 ops/s
[info] # Warmup Iteration   2: 1533927.055 ops/s
[info] # Warmup Iteration   3: 1597595.758 ops/s
[info] Iteration   1: 1561039.266 ops/s
[info]                  ·gc.alloc.rate:                   849.005 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.147 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      975.533 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 983.572 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1530868.450 ops/s
[info]                  ·gc.alloc.rate:                   832.545 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.107 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.440 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 671.849 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1598269.827 ops/s
[info]                  ·gc.alloc.rate:                   869.192 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.082 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      984.840 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 969.893 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1575250.280 ops/s
[info]                  ·gc.alloc.rate:                   856.812 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.083 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 659.582 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1602576.066 ops/s
[info]                  ·gc.alloc.rate:                   871.547 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.082 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      993.472 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 975.751 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala":
[info]   1573600.778 ±(99.9%) 112835.917 ops/s [Average]
[info]   (min, avg, max) = (1530868.450, 1573600.778, 1602576.066), stdev = 29303.129
[info]   CI (99.9%): [1460764.861, 1686436.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   855.820 ±(99.9%) 61.348 MB/sec [Average]
[info]   (min, avg, max) = (832.545, 855.820, 871.547), stdev = 15.932
[info]   CI (99.9%): [794.473, 917.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   856.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (856.000, 856.000, 856.000), stdev = 0.001
[info]   CI (99.9%): [856.000, 856.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.100 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.100, 0.146), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.100 ±(99.9%) 0.109 B/op [Average]
[info]   (min, avg, max) = (0.082, 0.100, 0.147), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   853.499 ±(99.9%) 691.833 MB/sec [Average]
[info]   (min, avg, max) = (653.440, 853.499, 993.472), stdev = 179.667
[info]   CI (99.9%): [161.666, 1545.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   852.129 ±(99.9%) 655.750 B/op [Average]
[info]   (min, avg, max) = (659.582, 852.129, 983.572), stdev = 170.296
[info]   CI (99.9%): [196.380, 1507.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala
[info] # Run progress: 86.64% complete, ETA 00:08:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3928882.127 ops/s
[info] # Warmup Iteration   2: 4738714.648 ops/s
[info] # Warmup Iteration   3: 4803960.588 ops/s
[info] Iteration   1: 4854127.920 ops/s
[info]                  ·gc.alloc.rate:                   370.077 MB/sec
[info]                  ·gc.alloc.rate.norm:              120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.031 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.779 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 82.938 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 4833210.502 ops/s
[info]                  ·gc.alloc.rate:                   368.477 MB/sec
[info]                  ·gc.alloc.rate.norm:              120.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.783 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 83.299 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 4764852.403 ops/s
[info]                  ·gc.alloc.rate:                   363.310 MB/sec
[info]                  ·gc.alloc.rate.norm:              120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.722 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.229 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.429 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 108.479 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 4838901.357 ops/s
[info]                  ·gc.alloc.rate:                   368.965 MB/sec
[info]                  ·gc.alloc.rate.norm:              120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.863 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 212.984 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 4833573.043 ops/s
[info]                  ·gc.alloc.rate:                   368.542 MB/sec
[info]                  ·gc.alloc.rate.norm:              120.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      326.415 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 106.283 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala":
[info]   4824933.045 ±(99.9%) 133394.441 ops/s [Average]
[info]   (min, avg, max) = (4764852.403, 4824933.045, 4854127.920), stdev = 34642.113
[info]   CI (99.9%): [4691538.604, 4958327.486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   367.874 ±(99.9%) 10.130 MB/sec [Average]
[info]   (min, avg, max) = (363.310, 367.874, 370.077), stdev = 2.631
[info]   CI (99.9%): [357.744, 378.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   120.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (120.000, 120.000, 120.000), stdev = 0.001
[info]   CI (99.9%): [120.000, 120.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.763 ±(99.9%) 6.371 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.763, 3.722), stdev = 1.654
[info]   CI (99.9%): [≈ 0, 7.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.252 ±(99.9%) 2.104 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.252, 1.229), stdev = 0.546
[info]   CI (99.9%): [≈ 0, 2.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   364.253 ±(99.9%) 640.590 MB/sec [Average]
[info]   (min, avg, max) = (255.779, 364.253, 654.863), stdev = 166.359
[info]   CI (99.9%): [≈ 0, 1004.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   118.797 ±(99.9%) 208.079 B/op [Average]
[info]   (min, avg, max) = (82.938, 118.797, 212.984), stdev = 54.037
[info]   CI (99.9%): [≈ 0, 326.875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson
[info] # Run progress: 86.99% complete, ETA 00:08:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 167917.314 ops/s
[info] # Warmup Iteration   2: 519487.620 ops/s
[info] # Warmup Iteration   3: 518359.926 ops/s
[info] Iteration   1: 511974.007 ops/s
[info]                  ·gc.alloc.rate:                   1745.946 MB/sec
[info]                  ·gc.alloc.rate.norm:              5368.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.384 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1984.155 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6100.384 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 519221.315 ops/s
[info]                  ·gc.alloc.rate:                   1771.301 MB/sec
[info]                  ·gc.alloc.rate.norm:              5368.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.505 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1668.713 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5057.103 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 517317.158 ops/s
[info]                  ·gc.alloc.rate:                   1764.231 MB/sec
[info]                  ·gc.alloc.rate.norm:              5368.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.253 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1678.123 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5106.004 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 520316.542 ops/s
[info]                  ·gc.alloc.rate:                   1774.384 MB/sec
[info]                  ·gc.alloc.rate.norm:              5368.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.315 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2023.448 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6121.489 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 505346.442 ops/s
[info]                  ·gc.alloc.rate:                   1723.566 MB/sec
[info]                  ·gc.alloc.rate.norm:              5368.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.259 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1692.648 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5271.707 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson":
[info]   514835.093 ±(99.9%) 23866.708 ops/s [Average]
[info]   (min, avg, max) = (505346.442, 514835.093, 520316.542), stdev = 6198.108
[info]   CI (99.9%): [490968.385, 538701.800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1755.886 ±(99.9%) 81.521 MB/sec [Average]
[info]   (min, avg, max) = (1723.566, 1755.886, 1774.384), stdev = 21.171
[info]   CI (99.9%): [1674.365, 1837.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5368.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5368.001, 5368.001, 5368.001), stdev = 0.001
[info]   CI (99.9%): [5368.001, 5368.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.112 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.112, 0.167), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.343 ±(99.9%) 0.402 B/op [Average]
[info]   (min, avg, max) = (0.253, 0.343, 0.505), stdev = 0.105
[info]   CI (99.9%): [≈ 0, 0.746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1809.417 ±(99.9%) 686.164 MB/sec [Average]
[info]   (min, avg, max) = (1668.713, 1809.417, 2023.448), stdev = 178.195
[info]   CI (99.9%): [1123.254, 2495.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   5531.337 ±(99.9%) 2060.462 B/op [Average]
[info]   (min, avg, max) = (5057.103, 5531.337, 6121.489), stdev = 535.095
[info]   CI (99.9%): [3470.876, 7591.799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.400, 8.000), stdev = 1.140
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala
[info] # Run progress: 87.33% complete, ETA 00:07:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2939968.721 ops/s
[info] # Warmup Iteration   2: 3451763.994 ops/s
[info] # Warmup Iteration   3: 3529114.814 ops/s
[info] Iteration   1: 3531329.197 ops/s
[info]                  ·gc.alloc.rate:                   1669.406 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.056 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1647.764 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 734.355 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 3490456.799 ops/s
[info]                  ·gc.alloc.rate:                   1649.663 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.075 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1659.661 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 748.509 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 3527320.118 ops/s
[info]                  ·gc.alloc.rate:                   1667.147 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.037 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1670.353 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 745.431 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 3427453.496 ops/s
[info]                  ·gc.alloc.rate:                   1620.133 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.029 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1680.946 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 771.927 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 3541431.746 ops/s
[info]                  ·gc.alloc.rate:                   1673.864 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1686.792 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 749.746 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala":
[info]   3503598.271 ±(99.9%) 179930.863 ops/s [Average]
[info]   (min, avg, max) = (3427453.496, 3503598.271, 3541431.746), stdev = 46727.474
[info]   CI (99.9%): [3323667.409, 3683529.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1656.042 ±(99.9%) 85.014 MB/sec [Average]
[info]   (min, avg, max) = (1620.133, 1656.042, 1673.864), stdev = 22.078
[info]   CI (99.9%): [1571.029, 1741.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   744.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (744.000, 744.000, 744.000), stdev = 0.001
[info]   CI (99.9%): [744.000, 744.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.100 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.100, 0.166), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.045 ±(99.9%) 0.078 B/op [Average]
[info]   (min, avg, max) = (0.028, 0.045, 0.075), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1669.103 ±(99.9%) 60.861 MB/sec [Average]
[info]   (min, avg, max) = (1647.764, 1669.103, 1686.792), stdev = 15.805
[info]   CI (99.9%): [1608.243, 1729.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   749.994 ±(99.9%) 52.682 B/op [Average]
[info]   (min, avg, max) = (734.355, 749.994, 771.927), stdev = 13.681
[info]   CI (99.9%): [697.311, 802.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson
[info] # Run progress: 87.67% complete, ETA 00:07:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 104196.070 ops/s
[info] # Warmup Iteration   2: 302002.470 ops/s
[info] # Warmup Iteration   3: 307624.050 ops/s
[info] Iteration   1: 309570.920 ops/s
[info]                  ·gc.alloc.rate:                   1648.964 MB/sec
[info]                  ·gc.alloc.rate.norm:              8384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.317 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1648.237 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8380.304 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 310368.070 ops/s
[info]                  ·gc.alloc.rate:                   1653.463 MB/sec
[info]                  ·gc.alloc.rate.norm:              8384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.422 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1664.500 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8439.967 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 308856.814 ops/s
[info]                  ·gc.alloc.rate:                   1645.175 MB/sec
[info]                  ·gc.alloc.rate.norm:              8384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.212 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1675.641 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8539.263 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 308104.678 ops/s
[info]                  ·gc.alloc.rate:                   1641.029 MB/sec
[info]                  ·gc.alloc.rate.norm:              8384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.319 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1684.458 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8605.875 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 307849.156 ops/s
[info]                  ·gc.alloc.rate:                   1640.314 MB/sec
[info]                  ·gc.alloc.rate.norm:              8384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.319 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1691.076 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8643.457 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson":
[info]   308949.928 ±(99.9%) 4007.064 ops/s [Average]
[info]   (min, avg, max) = (307849.156, 308949.928, 310368.070), stdev = 1040.622
[info]   CI (99.9%): [304942.864, 312956.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1645.789 ±(99.9%) 21.264 MB/sec [Average]
[info]   (min, avg, max) = (1640.314, 1645.789, 1653.463), stdev = 5.522
[info]   CI (99.9%): [1624.525, 1667.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   8384.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8384.001, 8384.001, 8384.001), stdev = 0.001
[info]   CI (99.9%): [8384.001, 8384.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.062, 0.083), stdev = 0.015
[info]   CI (99.9%): [0.006, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.318 ±(99.9%) 0.286 B/op [Average]
[info]   (min, avg, max) = (0.212, 0.318, 0.422), stdev = 0.074
[info]   CI (99.9%): [0.032, 0.604] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1672.782 ±(99.9%) 65.297 MB/sec [Average]
[info]   (min, avg, max) = (1648.237, 1672.782, 1691.076), stdev = 16.957
[info]   CI (99.9%): [1607.485, 1738.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   8521.773 ±(99.9%) 425.717 B/op [Average]
[info]   (min, avg, max) = (8380.304, 8521.773, 8643.457), stdev = 110.557
[info]   CI (99.9%): [8096.056, 8947.490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce
[info] # Run progress: 88.01% complete, ETA 00:07:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 244913.007 ops/s
[info] # Warmup Iteration   2: 453898.057 ops/s
[info] # Warmup Iteration   3: 464403.635 ops/s
[info] Iteration   1: 448250.635 ops/s
[info]                  ·gc.alloc.rate:                   1145.917 MB/sec
[info]                  ·gc.alloc.rate.norm:              4024.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.146 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1301.457 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4570.192 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 449981.949 ops/s
[info]                  ·gc.alloc.rate:                   1150.155 MB/sec
[info]                  ·gc.alloc.rate.norm:              4024.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.364 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      979.940 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3428.478 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 450267.255 ops/s
[info]                  ·gc.alloc.rate:                   1151.413 MB/sec
[info]                  ·gc.alloc.rate.norm:              4024.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.437 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1314.526 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4594.054 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 451467.792 ops/s
[info]                  ·gc.alloc.rate:                   1154.138 MB/sec
[info]                  ·gc.alloc.rate.norm:              4024.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.218 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      990.755 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3454.351 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 449995.848 ops/s
[info]                  ·gc.alloc.rate:                   1150.415 MB/sec
[info]                  ·gc.alloc.rate.norm:              4024.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.146 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1330.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4652.820 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce":
[info]   449992.696 ±(99.9%) 4426.647 ops/s [Average]
[info]   (min, avg, max) = (448250.635, 449992.696, 451467.792), stdev = 1149.586
[info]   CI (99.9%): [445566.049, 454419.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1150.408 ±(99.9%) 11.415 MB/sec [Average]
[info]   (min, avg, max) = (1145.917, 1150.408, 1154.138), stdev = 2.964
[info]   CI (99.9%): [1138.993, 1161.823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   4024.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4024.001, 4024.001, 4024.001), stdev = 0.001
[info]   CI (99.9%): [4024.001, 4024.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.125), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.262 ±(99.9%) 0.509 B/op [Average]
[info]   (min, avg, max) = (0.146, 0.262, 0.437), stdev = 0.132
[info]   CI (99.9%): [≈ 0, 0.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1183.373 ±(99.9%) 697.344 MB/sec [Average]
[info]   (min, avg, max) = (979.940, 1183.373, 1330.187), stdev = 181.098
[info]   CI (99.9%): [486.029, 1880.717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4139.979 ±(99.9%) 2458.534 B/op [Average]
[info]   (min, avg, max) = (3428.478, 4139.979, 4652.820), stdev = 638.473
[info]   CI (99.9%): [1681.445, 6598.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.600, 5.000), stdev = 1.140
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala
[info] # Run progress: 88.36% complete, ETA 00:07:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2333845.562 ops/s
[info] # Warmup Iteration   2: 2889131.356 ops/s
[info] # Warmup Iteration   3: 2908201.886 ops/s
[info] Iteration   1: 2891880.920 ops/s
[info]                  ·gc.alloc.rate:                   587.997 MB/sec
[info]                  ·gc.alloc.rate.norm:              320.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.727 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.831 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 357.461 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2881939.743 ops/s
[info]                  ·gc.alloc.rate:                   585.841 MB/sec
[info]                  ·gc.alloc.rate.norm:              320.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.685 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 356.512 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 2896687.494 ops/s
[info]                  ·gc.alloc.rate:                   588.869 MB/sec
[info]                  ·gc.alloc.rate.norm:              320.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      326.361 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 177.349 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 2819765.109 ops/s
[info]                  ·gc.alloc.rate:                   573.497 MB/sec
[info]                  ·gc.alloc.rate.norm:              320.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 364.373 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 2884203.183 ops/s
[info]                  ·gc.alloc.rate:                   586.539 MB/sec
[info]                  ·gc.alloc.rate.norm:              320.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.045 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.279 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 356.412 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala":
[info]   2874895.290 ±(99.9%) 120836.155 ops/s [Average]
[info]   (min, avg, max) = (2819765.109, 2874895.290, 2896687.494), stdev = 31380.766
[info]   CI (99.9%): [2754059.134, 2995731.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   584.549 ±(99.9%) 24.227 MB/sec [Average]
[info]   (min, avg, max) = (573.497, 584.549, 588.869), stdev = 6.292
[info]   CI (99.9%): [560.322, 608.775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   320.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (320.000, 320.000, 320.000), stdev = 0.001
[info]   CI (99.9%): [320.000, 320.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.783 ±(99.9%) 6.339 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.783, 3.727), stdev = 1.646
[info]   CI (99.9%): [≈ 0, 7.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.426 ±(99.9%) 3.449 B/op [Average]
[info]   (min, avg, max) = (0.012, 0.426, 2.028), stdev = 0.896
[info]   CI (99.9%): [≈ 0, 3.876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   588.435 ±(99.9%) 564.173 MB/sec [Average]
[info]   (min, avg, max) = (326.361, 588.435, 656.831), stdev = 146.514
[info]   CI (99.9%): [24.263, 1152.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   322.421 ±(99.9%) 312.539 B/op [Average]
[info]   (min, avg, max) = (177.349, 322.421, 364.373), stdev = 81.165
[info]   CI (99.9%): [9.883, 634.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson
[info] # Run progress: 88.70% complete, ETA 00:07:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 75774.489 ops/s
[info] # Warmup Iteration   2: 331974.471 ops/s
[info] # Warmup Iteration   3: 341285.271 ops/s
[info] Iteration   1: 341697.100 ops/s
[info]                  ·gc.alloc.rate:                   1310.948 MB/sec
[info]                  ·gc.alloc.rate.norm:              6040.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.192 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1303.913 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6007.590 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 346625.849 ops/s
[info]                  ·gc.alloc.rate:                   1330.567 MB/sec
[info]                  ·gc.alloc.rate.norm:              6040.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.567 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1315.299 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5970.690 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 342631.219 ops/s
[info]                  ·gc.alloc.rate:                   1314.825 MB/sec
[info]                  ·gc.alloc.rate.norm:              6040.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.191 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1325.594 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6089.469 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 347694.810 ops/s
[info]                  ·gc.alloc.rate:                   1334.459 MB/sec
[info]                  ·gc.alloc.rate.norm:              6040.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.188 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1334.457 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6039.990 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 346534.347 ops/s
[info]                  ·gc.alloc.rate:                   1329.686 MB/sec
[info]                  ·gc.alloc.rate.norm:              6040.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.567 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.434 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6093.364 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson":
[info]   345036.665 ±(99.9%) 10327.545 ops/s [Average]
[info]   (min, avg, max) = (341697.100, 345036.665, 347694.810), stdev = 2682.031
[info]   CI (99.9%): [334709.120, 355364.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1324.097 ±(99.9%) 40.356 MB/sec [Average]
[info]   (min, avg, max) = (1310.948, 1324.097, 1334.459), stdev = 10.480
[info]   CI (99.9%): [1283.742, 1364.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   6040.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6040.001, 6040.001, 6040.001), stdev = 0.001
[info]   CI (99.9%): [6040.001, 6040.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.176 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.125), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.341 ±(99.9%) 0.795 B/op [Average]
[info]   (min, avg, max) = (0.188, 0.341, 0.567), stdev = 0.206
[info]   CI (99.9%): [≈ 0, 1.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1324.139 ±(99.9%) 57.596 MB/sec [Average]
[info]   (min, avg, max) = (1303.913, 1324.139, 1341.434), stdev = 14.958
[info]   CI (99.9%): [1266.543, 1381.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   6040.221 ±(99.9%) 203.292 B/op [Average]
[info]   (min, avg, max) = (5970.690, 6040.221, 6093.364), stdev = 52.794
[info]   CI (99.9%): [5836.928, 6243.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce
[info] # Run progress: 89.04% complete, ETA 00:06:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 268454.011 ops/s
[info] # Warmup Iteration   2: 633046.251 ops/s
[info] # Warmup Iteration   3: 671688.561 ops/s
[info] Iteration   1: 663692.603 ops/s
[info]                  ·gc.alloc.rate:                   2017.151 MB/sec
[info]                  ·gc.alloc.rate.norm:              4784.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.346 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1974.831 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4683.632 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 666542.381 ops/s
[info]                  ·gc.alloc.rate:                   2026.509 MB/sec
[info]                  ·gc.alloc.rate.norm:              4784.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.246 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1994.878 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4709.329 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 664550.674 ops/s
[info]                  ·gc.alloc.rate:                   2019.760 MB/sec
[info]                  ·gc.alloc.rate.norm:              4784.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.197 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2010.172 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4761.292 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 656603.307 ops/s
[info]                  ·gc.alloc.rate:                   1996.343 MB/sec
[info]                  ·gc.alloc.rate.norm:              4784.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.299 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2022.820 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4847.452 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 658484.667 ops/s
[info]                  ·gc.alloc.rate:                   2001.383 MB/sec
[info]                  ·gc.alloc.rate.norm:              4784.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.348 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030.265 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4853.037 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce":
[info]   661974.726 ±(99.9%) 16278.108 ops/s [Average]
[info]   (min, avg, max) = (656603.307, 661974.726, 666542.381), stdev = 4227.373
[info]   CI (99.9%): [645696.618, 678252.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate":
[info]   2012.229 ±(99.9%) 49.269 MB/sec [Average]
[info]   (min, avg, max) = (1996.343, 2012.229, 2026.509), stdev = 12.795
[info]   CI (99.9%): [1962.960, 2061.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4784.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4784.001, 4784.001, 4784.001), stdev = 0.001
[info]   CI (99.9%): [4784.001, 4784.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.121 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.121, 0.146), stdev = 0.027
[info]   CI (99.9%): [0.016, 0.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.287 ±(99.9%) 0.252 B/op [Average]
[info]   (min, avg, max) = (0.197, 0.287, 0.348), stdev = 0.065
[info]   CI (99.9%): [0.035, 0.539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2006.593 ±(99.9%) 85.727 MB/sec [Average]
[info]   (min, avg, max) = (1974.831, 2006.593, 2030.265), stdev = 22.263
[info]   CI (99.9%): [1920.866, 2092.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4770.948 ±(99.9%) 298.925 B/op [Average]
[info]   (min, avg, max) = (4683.632, 4770.948, 4853.037), stdev = 77.630
[info]   CI (99.9%): [4472.023, 5069.873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala
[info] # Run progress: 89.38% complete, ETA 00:06:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 470985.749 ops/s
[info] # Warmup Iteration   2: 1540063.728 ops/s
[info] # Warmup Iteration   3: 1556782.922 ops/s
[info] Iteration   1: 1518981.958 ops/s
[info]                  ·gc.alloc.rate:                   1150.451 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.065 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1309.652 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1356.951 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 1538499.957 ops/s
[info]                  ·gc.alloc.rate:                   1165.028 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.149 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      989.396 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1012.302 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 1544331.423 ops/s
[info]                  ·gc.alloc.rate:                   1169.466 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.064 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1328.135 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1353.727 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1547305.344 ops/s
[info]                  ·gc.alloc.rate:                   1171.724 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.042 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1001.434 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1018.763 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1542950.785 ops/s
[info]                  ·gc.alloc.rate:                   1168.404 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.106 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.431 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1368.522 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala":
[info]   1538413.893 ±(99.9%) 43576.377 ops/s [Average]
[info]   (min, avg, max) = (1518981.958, 1538413.893, 1547305.344), stdev = 11316.647
[info]   CI (99.9%): [1494837.517, 1581990.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1165.015 ±(99.9%) 32.698 MB/sec [Average]
[info]   (min, avg, max) = (1150.451, 1165.015, 1171.724), stdev = 8.492
[info]   CI (99.9%): [1132.316, 1197.713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1192.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1192.000, 1192.000, 1192.000), stdev = 0.001
[info]   CI (99.9%): [1192.000, 1192.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.160 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.146), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.085 ±(99.9%) 0.164 B/op [Average]
[info]   (min, avg, max) = (0.042, 0.085, 0.149), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1194.009 ±(99.9%) 699.631 MB/sec [Average]
[info]   (min, avg, max) = (989.396, 1194.009, 1341.431), stdev = 181.692
[info]   CI (99.9%): [494.378, 1893.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1222.053 ±(99.9%) 726.311 B/op [Average]
[info]   (min, avg, max) = (1012.302, 1222.053, 1368.522), stdev = 188.621
[info]   CI (99.9%): [495.742, 1948.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala
[info] # Run progress: 89.73% complete, ETA 00:06:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6391475.023 ops/s
[info] # Warmup Iteration   2: 6549916.746 ops/s
[info] # Warmup Iteration   3: 6598792.837 ops/s
[info] Iteration   1: 6944782.872 ops/s
[info]                  ·gc.alloc.rate:                   211.774 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.757 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57.969 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 6866427.376 ops/s
[info]                  ·gc.alloc.rate:                   209.377 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.006 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.745 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 58.630 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 6887870.835 ops/s
[info]                  ·gc.alloc.rate:      210.049 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 6930867.240 ops/s
[info]                  ·gc.alloc.rate:                   211.349 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.017 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.760 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 58.086 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 6909022.224 ops/s
[info]                  ·gc.alloc.rate:                   210.744 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.039 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.835 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 58.270 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala":
[info]   6907794.109 ±(99.9%) 121923.051 ops/s [Average]
[info]   (min, avg, max) = (6866427.376, 6907794.109, 6944782.872), stdev = 31663.029
[info]   CI (99.9%): [6785871.058, 7029717.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   210.658 ±(99.9%) 3.724 MB/sec [Average]
[info]   (min, avg, max) = (209.377, 210.658, 211.774), stdev = 0.967
[info]   CI (99.9%): [206.935, 214.382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.012 ±(99.9%) 0.062 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.039), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.003 ±(99.9%) 0.014 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.009), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   204.620 ±(99.9%) 440.459 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.620, 255.835), stdev = 114.386
[info]   CI (99.9%): [≈ 0, 645.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   46.591 ±(99.9%) 100.296 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 46.591, 58.630), stdev = 26.046
[info]   CI (99.9%): [≈ 0, 146.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.095
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson
[info] # Run progress: 90.07% complete, ETA 00:06:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 41848.388 ops/s
[info] # Warmup Iteration   2: 235265.220 ops/s
[info] # Warmup Iteration   3: 238289.162 ops/s
[info] Iteration   1: 241103.384 ops/s
[info]                  ·gc.alloc.rate:                   1678.523 MB/sec
[info]                  ·gc.alloc.rate.norm:              10960.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.815 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1647.956 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10760.413 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 239805.616 ops/s
[info]                  ·gc.alloc.rate:                   1669.736 MB/sec
[info]                  ·gc.alloc.rate.norm:              10960.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.683 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1664.173 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10923.486 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 238124.596 ops/s
[info]                  ·gc.alloc.rate:                   1658.576 MB/sec
[info]                  ·gc.alloc.rate.norm:              10960.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.550 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1675.982 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11075.019 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 237415.205 ops/s
[info]                  ·gc.alloc.rate:                   1653.165 MB/sec
[info]                  ·gc.alloc.rate.norm:              10960.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.414 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1684.536 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11167.983 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 240469.140 ops/s
[info]                  ·gc.alloc.rate:                   1674.349 MB/sec
[info]                  ·gc.alloc.rate.norm:              10960.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.545 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1690.424 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11065.224 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson":
[info]   239383.588 ±(99.9%) 6019.156 ops/s [Average]
[info]   (min, avg, max) = (237415.205, 239383.588, 241103.384), stdev = 1563.156
[info]   CI (99.9%): [233364.432, 245402.744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1666.870 ±(99.9%) 41.138 MB/sec [Average]
[info]   (min, avg, max) = (1653.165, 1666.870, 1678.523), stdev = 10.683
[info]   CI (99.9%): [1625.732, 1708.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   10960.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10960.002, 10960.002, 10960.002), stdev = 0.001
[info]   CI (99.9%): [10960.001, 10960.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.092, 0.125), stdev = 0.024
[info]   CI (99.9%): [≈ 10⁻⁴, 0.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.602 ±(99.9%) 0.588 B/op [Average]
[info]   (min, avg, max) = (0.414, 0.602, 0.815), stdev = 0.153
[info]   CI (99.9%): [0.013, 1.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1672.614 ±(99.9%) 65.290 MB/sec [Average]
[info]   (min, avg, max) = (1647.956, 1672.614, 1690.424), stdev = 16.955
[info]   CI (99.9%): [1607.325, 1737.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   10998.425 ±(99.9%) 612.919 B/op [Average]
[info]   (min, avg, max) = (10760.413, 10998.425, 11167.983), stdev = 159.173
[info]   CI (99.9%): [10385.506, 11611.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce
[info] # Run progress: 90.41% complete, ETA 00:06:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 452337.666 ops/s
[info] # Warmup Iteration   2: 916659.861 ops/s
[info] # Warmup Iteration   3: 937597.972 ops/s
[info] Iteration   1: 918818.283 ops/s
[info]                  ·gc.alloc.rate:                   1480.244 MB/sec
[info]                  ·gc.alloc.rate.norm:              2536.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.107 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1632.055 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2796.089 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 907819.577 ops/s
[info]                  ·gc.alloc.rate:                   1462.563 MB/sec
[info]                  ·gc.alloc.rate.norm:              2536.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.180 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1314.758 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2279.714 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 926745.956 ops/s
[info]                  ·gc.alloc.rate:                   1493.029 MB/sec
[info]                  ·gc.alloc.rate.norm:              2536.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.035 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1655.371 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2811.749 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 919401.008 ops/s
[info]                  ·gc.alloc.rate:                   1481.373 MB/sec
[info]                  ·gc.alloc.rate.norm:              2536.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.107 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1334.220 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2284.084 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 948338.621 ops/s
[info]                  ·gc.alloc.rate:                   1528.462 MB/sec
[info]                  ·gc.alloc.rate.norm:              2536.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.173 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1677.831 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2783.832 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce":
[info]   924224.689 ±(99.9%) 58062.530 ops/s [Average]
[info]   (min, avg, max) = (907819.577, 924224.689, 948338.621), stdev = 15078.655
[info]   CI (99.9%): [866162.158, 982287.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1489.134 ±(99.9%) 94.461 MB/sec [Average]
[info]   (min, avg, max) = (1462.563, 1489.134, 1528.462), stdev = 24.531
[info]   CI (99.9%): [1394.673, 1583.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2536.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2536.000, 2536.000, 2536.000), stdev = 0.001
[info]   CI (99.9%): [2536.000, 2536.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.071, 0.104), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.120 ±(99.9%) 0.227 B/op [Average]
[info]   (min, avg, max) = (0.035, 0.120, 0.180), stdev = 0.059
[info]   CI (99.9%): [≈ 0, 0.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1522.847 ±(99.9%) 700.539 MB/sec [Average]
[info]   (min, avg, max) = (1314.758, 1522.847, 1677.831), stdev = 181.928
[info]   CI (99.9%): [822.308, 2223.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2591.094 ±(99.9%) 1087.546 B/op [Average]
[info]   (min, avg, max) = (2279.714, 2591.094, 2811.749), stdev = 282.432
[info]   CI (99.9%): [1503.547, 3678.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 0.837
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala
[info] # Run progress: 90.75% complete, ETA 00:05:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_6777d793/target/5e31e36e/jackson-module-afterburner-2.9.4.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 760256.931 ops/s
[info] # Warmup Iteration   2: 2523695.314 ops/s
[info] # Warmup Iteration   3: 2522542.068 ops/s
[info] Iteration   1: 2560599.562 ops/s
[info]                  ·gc.alloc.rate:                   1053.960 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.064 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      978.253 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 601.454 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 2555631.344 ops/s
[info]                  ·gc.alloc.rate:                   1052.238 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.077 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1314.382 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 809.436 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 2531673.429 ops/s
[info]                  ·gc.alloc.rate:                   1042.287 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.078 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      993.488 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 617.662 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 2450954.590 ops/s
[info]                  ·gc.alloc.rate:                   1008.982 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      997.414 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 640.570 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2483860.458 ops/s
[info]                  ·gc.alloc.rate:                   1022.598 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.079 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1002.793 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 635.450 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala":
[info]   2516543.877 ±(99.9%) 183338.750 ops/s [Average]
[info]   (min, avg, max) = (2450954.590, 2516543.877, 2560599.562), stdev = 47612.491
[info]   CI (99.9%): [2333205.126, 2699882.627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1036.013 ±(99.9%) 75.441 MB/sec [Average]
[info]   (min, avg, max) = (1008.982, 1036.013, 1053.960), stdev = 19.592
[info]   CI (99.9%): [960.572, 1111.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   648.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (648.000, 648.000, 648.000), stdev = 0.001
[info]   CI (99.9%): [648.000, 648.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.104 ±(99.9%) 0.139 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.104, 0.125), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.065 ±(99.9%) 0.085 B/op [Average]
[info]   (min, avg, max) = (0.027, 0.065, 0.079), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1057.266 ±(99.9%) 554.576 MB/sec [Average]
[info]   (min, avg, max) = (978.253, 1057.266, 1314.382), stdev = 144.022
[info]   CI (99.9%): [502.690, 1611.842] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   660.914 ±(99.9%) 325.188 B/op [Average]
[info]   (min, avg, max) = (601.454, 660.914, 809.436), stdev = 84.450
[info]   CI (99.9%): [335.726, 986.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala
[info] # Run progress: 91.10% complete, ETA 00:05:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4224421.763 ops/s
[info] # Warmup Iteration   2: 5955354.071 ops/s
[info] # Warmup Iteration   3: 6096656.842 ops/s
[info] Iteration   1: 5993491.617 ops/s
[info]                  ·gc.alloc.rate:                   670.143 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.751 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 172.220 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 5896812.921 ops/s
[info]                  ·gc.alloc.rate:                   659.284 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.380 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 174.424 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 6177218.524 ops/s
[info]                  ·gc.alloc.rate:                   690.682 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.747 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 166.333 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 6126800.541 ops/s
[info]                  ·gc.alloc.rate:                   685.073 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.423 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 167.869 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 5953210.527 ops/s
[info]                  ·gc.alloc.rate:                   665.582 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.991 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 173.199 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala":
[info]   6029506.826 ±(99.9%) 455657.882 ops/s [Average]
[info]   (min, avg, max) = (5896812.921, 6029506.826, 6177218.524), stdev = 118332.905
[info]   CI (99.9%): [5573848.944, 6485164.708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   674.153 ±(99.9%) 51.051 MB/sec [Average]
[info]   (min, avg, max) = (659.284, 674.153, 690.682), stdev = 13.258
[info]   CI (99.9%): [623.102, 725.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   176.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (176.000, 176.000, 176.000), stdev = 0.001
[info]   CI (99.9%): [176.000, 176.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.160 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.104), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.016 ±(99.9%) 0.043 B/op [Average]
[info]   (min, avg, max) = (0.005, 0.016, 0.028), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   654.059 ±(99.9%) 4.840 MB/sec [Average]
[info]   (min, avg, max) = (652.747, 654.059, 655.751), stdev = 1.257
[info]   CI (99.9%): [649.219, 658.898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   170.809 ±(99.9%) 13.539 B/op [Average]
[info]   (min, avg, max) = (166.333, 170.809, 174.424), stdev = 3.516
[info]   CI (99.9%): [157.270, 184.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 91.44% complete, ETA 00:05:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4340938.151 ops/s
[info] # Warmup Iteration   2: 5978382.405 ops/s
[info] # Warmup Iteration   3: 5968600.071 ops/s
[info] Iteration   1: 6110704.151 ops/s
[info]                  ·gc.alloc.rate:                   372.796 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.837 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65.881 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 5953551.763 ops/s
[info]                  ·gc.alloc.rate:                   363.039 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.724 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 67.622 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 5930719.099 ops/s
[info]                  ·gc.alloc.rate:                   361.746 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.760 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.998 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.715 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 87.234 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 5872034.640 ops/s
[info]                  ·gc.alloc.rate:                   358.166 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.741 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 88.113 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 6117825.714 ops/s
[info]                  ·gc.alloc.rate:                   373.109 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.056 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 168.287 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc":
[info]   5996967.073 ±(99.9%) 428031.290 ops/s [Average]
[info]   (min, avg, max) = (5872034.640, 5996967.073, 6117825.714), stdev = 111158.367
[info]   CI (99.9%): [5568935.783, 6424998.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   365.771 ±(99.9%) 26.167 MB/sec [Average]
[info]   (min, avg, max) = (358.166, 365.771, 373.109), stdev = 6.795
[info]   CI (99.9%): [339.605, 391.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   96.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (96.000, 96.000, 96.000), stdev = 0.001
[info]   CI (99.9%): [96.000, 96.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   0.764 ±(99.9%) 6.448 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.764, 3.760), stdev = 1.674
[info]   CI (99.9%): [≈ 0, 7.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   0.203 ±(99.9%) 1.711 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.203, 0.998), stdev = 0.444
[info]   CI (99.9%): [≈ 0, 1.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   364.615 ±(99.9%) 638.679 MB/sec [Average]
[info]   (min, avg, max) = (255.724, 364.615, 654.056), stdev = 165.863
[info]   CI (99.9%): [≈ 0, 1003.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   95.428 ±(99.9%) 161.947 B/op [Average]
[info]   (min, avg, max) = (65.881, 95.428, 168.287), stdev = 42.057
[info]   CI (99.9%): [≈ 0, 257.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson
[info] # Run progress: 91.78% complete, ETA 00:05:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 36520.942 ops/s
[info] # Warmup Iteration   2: 330517.662 ops/s
[info] # Warmup Iteration   3: 331482.495 ops/s
[info] Iteration   1: 328826.769 ops/s
[info]                  ·gc.alloc.rate:                   1714.356 MB/sec
[info]                  ·gc.alloc.rate.norm:              8208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.498 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1647.884 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7889.748 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 325619.790 ops/s
[info]                  ·gc.alloc.rate:                   1697.953 MB/sec
[info]                  ·gc.alloc.rate.norm:              8208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.503 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1664.186 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8044.768 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 335877.128 ops/s
[info]                  ·gc.alloc.rate:                   1751.383 MB/sec
[info]                  ·gc.alloc.rate.norm:              8208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.390 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1674.711 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7848.674 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 332606.927 ops/s
[info]                  ·gc.alloc.rate:                   1734.417 MB/sec
[info]                  ·gc.alloc.rate.norm:              8208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.493 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2021.605 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9567.098 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 335880.307 ops/s
[info]                  ·gc.alloc.rate:                   1751.538 MB/sec
[info]                  ·gc.alloc.rate.norm:              8208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.390 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1690.578 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7922.333 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson":
[info]   331762.184 ±(99.9%) 17322.651 ops/s [Average]
[info]   (min, avg, max) = (325619.790, 331762.184, 335880.307), stdev = 4498.637
[info]   CI (99.9%): [314439.534, 349084.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1729.929 ±(99.9%) 90.558 MB/sec [Average]
[info]   (min, avg, max) = (1697.953, 1729.929, 1751.538), stdev = 23.518
[info]   CI (99.9%): [1639.371, 1820.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   8208.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8208.001, 8208.001, 8208.001), stdev = 0.001
[info]   CI (99.9%): [8208.001, 8208.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.096 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.096, 0.104), stdev = 0.011
[info]   CI (99.9%): [0.052, 0.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.455 ±(99.9%) 0.228 B/op [Average]
[info]   (min, avg, max) = (0.390, 0.455, 0.503), stdev = 0.059
[info]   CI (99.9%): [0.227, 0.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1739.793 ±(99.9%) 609.569 MB/sec [Average]
[info]   (min, avg, max) = (1647.884, 1739.793, 2021.605), stdev = 158.303
[info]   CI (99.9%): [1130.224, 2349.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   8254.524 ±(99.9%) 2839.426 B/op [Average]
[info]   (min, avg, max) = (7848.674, 8254.524, 9567.098), stdev = 737.390
[info]   CI (99.9%): [5415.099, 11093.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 7.000), stdev = 0.837
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce
[info] # Run progress: 92.12% complete, ETA 00:04:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2948279.271 ops/s
[info] # Warmup Iteration   2: 4409437.458 ops/s
[info] # Warmup Iteration   3: 4383431.208 ops/s
[info] Iteration   1: 4385084.643 ops/s
[info]                  ·gc.alloc.rate:                   3231.387 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.067 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3355.987 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1204.729 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 4427331.600 ops/s
[info]                  ·gc.alloc.rate:                   3263.488 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3383.182 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1202.545 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 4417870.237 ops/s
[info]                  ·gc.alloc.rate:                   3255.573 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.074 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3055.127 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1088.579 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 4378778.182 ops/s
[info]                  ·gc.alloc.rate:                   3227.970 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.037 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3402.672 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1222.781 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 4367328.716 ops/s
[info]                  ·gc.alloc.rate:                   3218.531 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.053 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3063.314 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1104.058 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce":
[info]   4395278.676 ±(99.9%) 99952.835 ops/s [Average]
[info]   (min, avg, max) = (4367328.716, 4395278.676, 4427331.600), stdev = 25957.434
[info]   CI (99.9%): [4295325.840, 4495231.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   3239.390 ±(99.9%) 73.872 MB/sec [Average]
[info]   (min, avg, max) = (3218.531, 3239.390, 3263.488), stdev = 19.184
[info]   CI (99.9%): [3165.517, 3313.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   1160.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1160.000, 1160.000, 1160.000), stdev = 0.001
[info]   CI (99.9%): [1160.000, 1160.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.158 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (0.104, 0.158, 0.208), stdev = 0.041
[info]   CI (99.9%): [0.002, 0.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.057 ±(99.9%) 0.055 B/op [Average]
[info]   (min, avg, max) = (0.037, 0.057, 0.074), stdev = 0.014
[info]   CI (99.9%): [0.001, 0.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   3252.056 ±(99.9%) 680.936 MB/sec [Average]
[info]   (min, avg, max) = (3055.127, 3252.056, 3402.672), stdev = 176.837
[info]   CI (99.9%): [2571.120, 3932.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1164.538 ±(99.9%) 242.619 B/op [Average]
[info]   (min, avg, max) = (1088.579, 1164.538, 1222.781), stdev = 63.007
[info]   CI (99.9%): [921.920, 1407.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.count":
[info]   48.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.600, 10.000), stdev = 0.548
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.800, 10.000), stdev = 0.837
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala
[info] # Run progress: 92.47% complete, ETA 00:04:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1843523.308 ops/s
[info] # Warmup Iteration   2: 4129670.175 ops/s
[info] # Warmup Iteration   3: 4170330.240 ops/s
[info] Iteration   1: 4198193.634 ops/s
[info]                  ·gc.alloc.rate:                   2176.209 MB/sec
[info]                  ·gc.alloc.rate.norm:              816.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2326.060 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 872.189 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 4050554.849 ops/s
[info]                  ·gc.alloc.rate:                   2100.726 MB/sec
[info]                  ·gc.alloc.rate.norm:              816.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.049 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2012.741 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 781.823 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 4138896.465 ops/s
[info]                  ·gc.alloc.rate:                   2145.491 MB/sec
[info]                  ·gc.alloc.rate.norm:              816.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.032 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2023.745 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 769.696 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 4113608.886 ops/s
[info]                  ·gc.alloc.rate:                   2132.485 MB/sec
[info]                  ·gc.alloc.rate.norm:              816.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.040 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031.838 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 777.487 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 4174879.229 ops/s
[info]                  ·gc.alloc.rate:                   2165.027 MB/sec
[info]                  ·gc.alloc.rate.norm:              816.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.047 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2376.713 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 895.785 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala":
[info]   4135226.613 ±(99.9%) 221096.024 ops/s [Average]
[info]   (min, avg, max) = (4050554.849, 4135226.613, 4198193.634), stdev = 57417.935
[info]   CI (99.9%): [3914130.588, 4356322.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2143.988 ±(99.9%) 113.692 MB/sec [Average]
[info]   (min, avg, max) = (2100.726, 2143.988, 2176.209), stdev = 29.526
[info]   CI (99.9%): [2030.295, 2257.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   816.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (816.000, 816.000, 816.000), stdev = 0.001
[info]   CI (99.9%): [816.000, 816.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.108 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.108, 0.125), stdev = 0.017
[info]   CI (99.9%): [0.041, 0.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.041 ±(99.9%) 0.026 B/op [Average]
[info]   (min, avg, max) = (0.032, 0.041, 0.049), stdev = 0.007
[info]   CI (99.9%): [0.015, 0.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   2154.219 ±(99.9%) 696.982 MB/sec [Average]
[info]   (min, avg, max) = (2012.741, 2154.219, 2376.713), stdev = 181.004
[info]   CI (99.9%): [1457.238, 2851.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   819.396 ±(99.9%) 229.916 B/op [Average]
[info]   (min, avg, max) = (769.696, 819.396, 895.785), stdev = 59.709
[info]   CI (99.9%): [589.480, 1049.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   32.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.000, 8.000), stdev = 0.707
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala
[info] # Run progress: 92.81% complete, ETA 00:04:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5916524.244 ops/s
[info] # Warmup Iteration   2: 6435982.924 ops/s
[info] # Warmup Iteration   3: 6659736.243 ops/s
[info] Iteration   1: 6660503.370 ops/s
[info]                  ·gc.alloc.rate:                   710.978 MB/sec
[info]                  ·gc.alloc.rate.norm:              168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      662.849 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 156.627 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 6642763.261 ops/s
[info]                  ·gc.alloc.rate:                   708.933 MB/sec
[info]                  ·gc.alloc.rate.norm:              168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.048 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 156.416 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 6655989.475 ops/s
[info]                  ·gc.alloc.rate:                   710.393 MB/sec
[info]                  ·gc.alloc.rate.norm:              168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      989.142 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 233.921 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 6616371.021 ops/s
[info]                  ·gc.alloc.rate:                   706.392 MB/sec
[info]                  ·gc.alloc.rate.norm:              168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 157.031 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 6624985.562 ops/s
[info]                  ·gc.alloc.rate:                   707.107 MB/sec
[info]                  ·gc.alloc.rate.norm:              168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      661.412 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 157.144 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala":
[info]   6640122.538 ±(99.9%) 73751.996 ops/s [Average]
[info]   (min, avg, max) = (6616371.021, 6640122.538, 6660503.370), stdev = 19153.159
[info]   CI (99.9%): [6566370.542, 6713874.534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   708.761 ±(99.9%) 7.691 MB/sec [Average]
[info]   (min, avg, max) = (706.392, 708.761, 710.978), stdev = 1.997
[info]   CI (99.9%): [701.069, 716.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   168.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (168.000, 168.000, 168.000), stdev = 0.001
[info]   CI (99.9%): [168.000, 168.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.083), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.017 ±(99.9%) 0.017 B/op [Average]
[info]   (min, avg, max) = (0.010, 0.017, 0.020), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   726.745 ±(99.9%) 564.847 MB/sec [Average]
[info]   (min, avg, max) = (660.048, 726.745, 989.142), stdev = 146.689
[info]   CI (99.9%): [161.898, 1291.591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   172.228 ±(99.9%) 132.804 B/op [Average]
[info]   (min, avg, max) = (156.416, 172.228, 233.921), stdev = 34.489
[info]   CI (99.9%): [39.423, 305.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce
[info] # Run progress: 93.15% complete, ETA 00:04:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1717948.871 ops/s
[info] # Warmup Iteration   2: 2734109.681 ops/s
[info] # Warmup Iteration   3: 2786441.384 ops/s
[info] Iteration   1: 2788522.138 ops/s
[info]                  ·gc.alloc.rate:                   1162.218 MB/sec
[info]                  ·gc.alloc.rate.norm:              656.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.047 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1303.559 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 735.778 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 2766771.243 ops/s
[info]                  ·gc.alloc.rate:                   1152.983 MB/sec
[info]                  ·gc.alloc.rate.norm:              656.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      981.024 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 558.163 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 2767769.364 ops/s
[info]                  ·gc.alloc.rate:                   1153.914 MB/sec
[info]                  ·gc.alloc.rate.norm:              656.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.071 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1315.619 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 747.929 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 2772893.936 ops/s
[info]                  ·gc.alloc.rate:                   1155.644 MB/sec
[info]                  ·gc.alloc.rate.norm:              656.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.035 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      992.762 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 563.540 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 2727101.427 ops/s
[info]                  ·gc.alloc.rate:                   1136.599 MB/sec
[info]                  ·gc.alloc.rate.norm:              656.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.060 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1330.864 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 768.122 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce":
[info]   2764611.622 ±(99.9%) 87426.569 ops/s [Average]
[info]   (min, avg, max) = (2727101.427, 2764611.622, 2788522.138), stdev = 22704.402
[info]   CI (99.9%): [2677185.053, 2852038.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1152.272 ±(99.9%) 36.486 MB/sec [Average]
[info]   (min, avg, max) = (1136.599, 1152.272, 1162.218), stdev = 9.475
[info]   CI (99.9%): [1115.785, 1188.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   656.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (656.000, 656.000, 656.000), stdev = 0.001
[info]   CI (99.9%): [656.000, 656.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.079, 0.125), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.045 ±(99.9%) 0.088 B/op [Average]
[info]   (min, avg, max) = (0.012, 0.045, 0.071), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1184.766 ±(99.9%) 696.730 MB/sec [Average]
[info]   (min, avg, max) = (981.024, 1184.766, 1330.864), stdev = 180.939
[info]   CI (99.9%): [488.035, 1881.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   674.706 ±(99.9%) 402.747 B/op [Average]
[info]   (min, avg, max) = (558.163, 674.706, 768.122), stdev = 104.592
[info]   CI (99.9%): [271.959, 1077.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.400, 4.000), stdev = 0.894
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala
[info] # Run progress: 93.49% complete, ETA 00:04:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1640651.148 ops/s
[info] # Warmup Iteration   2: 3413161.366 ops/s
[info] # Warmup Iteration   3: 3538623.170 ops/s
[info] Iteration   1: 3480114.636 ops/s
[info]                  ·gc.alloc.rate:                   1078.776 MB/sec
[info]                  ·gc.alloc.rate.norm:              488.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      975.965 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 441.492 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 3466481.415 ops/s
[info]                  ·gc.alloc.rate:                   1074.655 MB/sec
[info]                  ·gc.alloc.rate.norm:              488.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.066 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1312.122 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 595.833 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 3503582.362 ops/s
[info]                  ·gc.alloc.rate:                   1086.108 MB/sec
[info]                  ·gc.alloc.rate.norm:              488.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      990.704 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 445.134 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 3501183.699 ops/s
[info]                  ·gc.alloc.rate:                   1085.455 MB/sec
[info]                  ·gc.alloc.rate.norm:              488.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      997.447 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 448.433 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 3533788.700 ops/s
[info]                  ·gc.alloc.rate:                   1095.522 MB/sec
[info]                  ·gc.alloc.rate.norm:              488.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.037 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1001.385 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 446.067 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala":
[info]   3497030.162 ±(99.9%) 98751.079 ops/s [Average]
[info]   (min, avg, max) = (3466481.415, 3497030.162, 3533788.700), stdev = 25645.342
[info]   CI (99.9%): [3398279.083, 3595781.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1084.103 ±(99.9%) 30.677 MB/sec [Average]
[info]   (min, avg, max) = (1074.655, 1084.103, 1095.522), stdev = 7.967
[info]   CI (99.9%): [1053.426, 1114.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   488.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (488.000, 488.000, 488.000), stdev = 0.001
[info]   CI (99.9%): [488.000, 488.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.146), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.034 ±(99.9%) 0.076 B/op [Average]
[info]   (min, avg, max) = (0.019, 0.034, 0.066), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1055.524 ±(99.9%) 553.602 MB/sec [Average]
[info]   (min, avg, max) = (975.965, 1055.524, 1312.122), stdev = 143.769
[info]   CI (99.9%): [501.923, 1609.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   475.392 ±(99.9%) 259.438 B/op [Average]
[info]   (min, avg, max) = (441.492, 475.392, 595.833), stdev = 67.375
[info]   CI (99.9%): [215.954, 734.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala
[info] # Run progress: 93.84% complete, ETA 00:03:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6498888.455 ops/s
[info] # Warmup Iteration   2: 8494932.325 ops/s
[info] # Warmup Iteration   3: 8800027.732 ops/s
[info] Iteration   1: 8926464.990 ops/s
[info]                  ·gc.alloc.rate:                   861.918 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      980.337 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 172.883 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 8723542.273 ops/s
[info]                  ·gc.alloc.rate:                   842.309 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.673 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 117.779 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 8901197.091 ops/s
[info]                  ·gc.alloc.rate:                   859.907 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      980.847 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 173.378 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 9002221.042 ops/s
[info]                  ·gc.alloc.rate:                   869.559 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      985.064 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 172.191 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 9014000.325 ops/s
[info]                  ·gc.alloc.rate:                   870.428 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658.737 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 115.033 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala":
[info]   8913485.144 ±(99.9%) 448955.723 ops/s [Average]
[info]   (min, avg, max) = (8723542.273, 8913485.144, 9014000.325), stdev = 116592.376
[info]   CI (99.9%): [8464529.421, 9362440.868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   860.824 ±(99.9%) 43.623 MB/sec [Average]
[info]   (min, avg, max) = (842.309, 860.824, 870.428), stdev = 11.329
[info]   CI (99.9%): [817.201, 904.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   152.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (152.000, 152.000, 152.000), stdev = 0.001
[info]   CI (99.9%): [152.000, 152.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.104 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.104, 0.125), stdev = 0.021
[info]   CI (99.9%): [0.024, 0.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.018 ±(99.9%) 0.014 B/op [Average]
[info]   (min, avg, max) = (0.015, 0.018, 0.022), stdev = 0.004
[info]   CI (99.9%): [0.004, 0.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   851.532 ±(99.9%) 688.444 MB/sec [Average]
[info]   (min, avg, max) = (652.673, 851.532, 985.064), stdev = 178.787
[info]   CI (99.9%): [163.088, 1539.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   150.253 ±(99.9%) 119.046 B/op [Average]
[info]   (min, avg, max) = (115.033, 150.253, 173.378), stdev = 30.916
[info]   CI (99.9%): [31.207, 269.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 94.18% complete, ETA 00:03:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6125857.803 ops/s
[info] # Warmup Iteration   2: 7801127.935 ops/s
[info] # Warmup Iteration   3: 8139477.983 ops/s
[info] Iteration   1: 8190770.238 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 8196200.811 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 8179481.436 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 8159444.284 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 8200271.884 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   8185233.731 ±(99.9%) 63133.543 ops/s [Average]
[info]   (min, avg, max) = (8159444.284, 8185233.731, 8200271.884), stdev = 16395.581
[info]   CI (99.9%): [8122100.188, 8248367.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson
[info] # Run progress: 94.52% complete, ETA 00:03:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2377009.919 ops/s
[info] # Warmup Iteration   2: 3332485.071 ops/s
[info] # Warmup Iteration   3: 3413058.605 ops/s
[info] Iteration   1: 3401425.192 ops/s
[info]                  ·gc.alloc.rate:                   1089.542 MB/sec
[info]                  ·gc.alloc.rate.norm:              504.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.029 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      976.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 451.565 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 3520414.270 ops/s
[info]                  ·gc.alloc.rate:                   1127.182 MB/sec
[info]                  ·gc.alloc.rate.norm:              504.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.037 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1304.815 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 583.426 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 3535655.929 ops/s
[info]                  ·gc.alloc.rate:                   1132.012 MB/sec
[info]                  ·gc.alloc.rate.norm:              504.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      983.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 437.675 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 3545290.798 ops/s
[info]                  ·gc.alloc.rate:                   1135.391 MB/sec
[info]                  ·gc.alloc.rate.norm:              504.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1320.382 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 586.118 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 3549562.082 ops/s
[info]                  ·gc.alloc.rate:                   1136.502 MB/sec
[info]                  ·gc.alloc.rate.norm:              504.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.037 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      996.059 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 441.718 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson":
[info]   3510469.654 ±(99.9%) 238651.936 ops/s [Average]
[info]   (min, avg, max) = (3401425.192, 3510469.654, 3549562.082), stdev = 61977.150
[info]   CI (99.9%): [3271817.718, 3749121.591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1124.126 ±(99.9%) 75.743 MB/sec [Average]
[info]   (min, avg, max) = (1089.542, 1124.126, 1136.502), stdev = 19.670
[info]   CI (99.9%): [1048.383, 1199.869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   504.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (504.000, 504.000, 504.000), stdev = 0.001
[info]   CI (99.9%): [504.000, 504.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.071, 0.083), stdev = 0.011
[info]   CI (99.9%): [0.027, 0.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.032 ±(99.9%) 0.019 B/op [Average]
[info]   (min, avg, max) = (0.028, 0.032, 0.037), stdev = 0.005
[info]   CI (99.9%): [0.013, 0.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1116.097 ±(99.9%) 691.603 MB/sec [Average]
[info]   (min, avg, max) = (976.187, 1116.097, 1320.382), stdev = 179.607
[info]   CI (99.9%): [424.494, 1807.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   500.100 ±(99.9%) 298.290 B/op [Average]
[info]   (min, avg, max) = (437.675, 500.100, 586.118), stdev = 77.465
[info]   CI (99.9%): [201.810, 798.390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce
[info] # Run progress: 94.86% complete, ETA 00:03:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 558704.439 ops/s
[info] # Warmup Iteration   2: 778543.826 ops/s
[info] # Warmup Iteration   3: 779488.465 ops/s
[info] Iteration   1: 792262.209 ops/s
[info]                  ·gc.alloc.rate:                   1328.727 MB/sec
[info]                  ·gc.alloc.rate.norm:              2640.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.124 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1309.406 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2601.614 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 786108.597 ops/s
[info]                  ·gc.alloc.rate:                   1318.298 MB/sec
[info]                  ·gc.alloc.rate.norm:              2640.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.292 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1315.977 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2635.354 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 771853.669 ops/s
[info]                  ·gc.alloc.rate:                   1294.962 MB/sec
[info]                  ·gc.alloc.rate.norm:              2640.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.212 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1325.211 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2701.668 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 759608.556 ops/s
[info]                  ·gc.alloc.rate:                   1274.065 MB/sec
[info]                  ·gc.alloc.rate.norm:              2640.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.129 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1332.849 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2761.808 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 777229.247 ops/s
[info]                  ·gc.alloc.rate:                   1303.672 MB/sec
[info]                  ·gc.alloc.rate.norm:              2640.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.169 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.630 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2712.817 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce":
[info]   777412.456 ±(99.9%) 48861.112 ops/s [Average]
[info]   (min, avg, max) = (759608.556, 777412.456, 792262.209), stdev = 12689.076
[info]   CI (99.9%): [728551.343, 826273.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   1303.945 ±(99.9%) 81.542 MB/sec [Average]
[info]   (min, avg, max) = (1274.065, 1303.945, 1328.727), stdev = 21.176
[info]   CI (99.9%): [1222.402, 1385.487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2640.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2640.001, 2640.001, 2640.001), stdev = 0.001
[info]   CI (99.9%): [2640.000, 2640.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.092, 0.146), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.185 ±(99.9%) 0.267 B/op [Average]
[info]   (min, avg, max) = (0.124, 0.185, 0.292), stdev = 0.069
[info]   CI (99.9%): [≈ 0, 0.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1324.615 ±(99.9%) 47.141 MB/sec [Average]
[info]   (min, avg, max) = (1309.406, 1324.615, 1339.630), stdev = 12.242
[info]   CI (99.9%): [1277.473, 1371.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2682.652 ±(99.9%) 246.122 B/op [Average]
[info]   (min, avg, max) = (2601.614, 2682.652, 2761.808), stdev = 63.917
[info]   CI (99.9%): [2436.530, 2928.774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala
[info] # Run progress: 95.21% complete, ETA 00:03:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 484921.657 ops/s
[info] # Warmup Iteration   2: 1096616.482 ops/s
[info] # Warmup Iteration   3: 1097285.187 ops/s
[info] Iteration   1: 1085503.172 ops/s
[info]                  ·gc.alloc.rate:                   750.247 MB/sec
[info]                  ·gc.alloc.rate.norm:              1088.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.060 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      646.058 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 936.906 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1112302.540 ops/s
[info]                  ·gc.alloc.rate:                   769.173 MB/sec
[info]                  ·gc.alloc.rate.norm:              1088.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.118 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      649.712 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 919.022 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1106396.811 ops/s
[info]                  ·gc.alloc.rate:                   764.823 MB/sec
[info]                  ·gc.alloc.rate.norm:              1088.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.089 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      981.541 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1396.293 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1105165.895 ops/s
[info]                  ·gc.alloc.rate:                   763.872 MB/sec
[info]                  ·gc.alloc.rate.norm:              1088.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.119 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.398 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 936.347 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1110318.398 ops/s
[info]                  ·gc.alloc.rate:                   767.415 MB/sec
[info]                  ·gc.alloc.rate.norm:              1088.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.118 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.045 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 935.777 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala":
[info]   1103937.363 ±(99.9%) 41206.899 ops/s [Average]
[info]   (min, avg, max) = (1085503.172, 1103937.363, 1112302.540), stdev = 10701.301
[info]   CI (99.9%): [1062730.464, 1145144.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   763.106 ±(99.9%) 28.832 MB/sec [Average]
[info]   (min, avg, max) = (750.247, 763.106, 769.173), stdev = 7.488
[info]   CI (99.9%): [734.274, 791.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1088.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1088.000, 1088.000, 1088.000), stdev = 0.001
[info]   CI (99.9%): [1088.000, 1088.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.083), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.101 ±(99.9%) 0.100 B/op [Average]
[info]   (min, avg, max) = (0.060, 0.101, 0.119), stdev = 0.026
[info]   CI (99.9%): [0.001, 0.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   718.951 ±(99.9%) 565.664 MB/sec [Average]
[info]   (min, avg, max) = (646.058, 718.951, 981.541), stdev = 146.901
[info]   CI (99.9%): [153.287, 1284.615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1024.869 ±(99.9%) 800.041 B/op [Average]
[info]   (min, avg, max) = (919.022, 1024.869, 1396.293), stdev = 207.768
[info]   CI (99.9%): [224.828, 1824.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala
[info] # Run progress: 95.55% complete, ETA 00:02:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1726315.675 ops/s
[info] # Warmup Iteration   2: 1946502.380 ops/s
[info] # Warmup Iteration   3: 1955848.874 ops/s
[info] Iteration   1: 1974112.883 ops/s
[info]                  ·gc.alloc.rate:                   551.869 MB/sec
[info]                  ·gc.alloc.rate.norm:              440.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.139 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.502 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      332.396 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 265.016 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1934886.423 ops/s
[info]                  ·gc.alloc.rate:                   540.843 MB/sec
[info]                  ·gc.alloc.rate.norm:              440.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      662.726 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 539.157 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1966751.214 ops/s
[info]                  ·gc.alloc.rate:                   549.790 MB/sec
[info]                  ·gc.alloc.rate.norm:              440.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.100 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.105 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 528.286 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1938990.428 ops/s
[info]                  ·gc.alloc.rate:                   542.276 MB/sec
[info]                  ·gc.alloc.rate.norm:              440.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.864 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 267.651 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1893291.743 ops/s
[info]                  ·gc.alloc.rate:                   529.250 MB/sec
[info]                  ·gc.alloc.rate.norm:              440.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.069 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      659.435 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 548.232 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala":
[info]   1941606.538 ±(99.9%) 122907.955 ops/s [Average]
[info]   (min, avg, max) = (1893291.743, 1941606.538, 1974112.883), stdev = 31918.806
[info]   CI (99.9%): [1818698.583, 2064514.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   542.806 ±(99.9%) 34.377 MB/sec [Average]
[info]   (min, avg, max) = (529.250, 542.806, 551.869), stdev = 8.928
[info]   CI (99.9%): [508.428, 577.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   440.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (440.000, 440.000, 440.000), stdev = 0.001
[info]   CI (99.9%): [440.000, 440.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.674 ±(99.9%) 5.310 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.674, 3.139), stdev = 1.379
[info]   CI (99.9%): [≈ 0, 5.983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.538 ±(99.9%) 4.232 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.538, 2.502), stdev = 1.099
[info]   CI (99.9%): [≈ 0, 4.770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   528.905 ±(99.9%) 695.232 MB/sec [Average]
[info]   (min, avg, max) = (329.864, 528.905, 662.726), stdev = 180.550
[info]   CI (99.9%): [≈ 0, 1224.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   429.668 ±(99.9%) 574.800 B/op [Average]
[info]   (min, avg, max) = (265.016, 429.668, 548.232), stdev = 149.274
[info]   CI (99.9%): [≈ 0, 1004.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce
[info] # Run progress: 95.89% complete, ETA 00:02:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1018210.787 ops/s
[info] # Warmup Iteration   2: 1663648.753 ops/s
[info] # Warmup Iteration   3: 1676808.416 ops/s
[info] Iteration   1: 1666802.961 ops/s
[info]                  ·gc.alloc.rate:                   1355.427 MB/sec
[info]                  ·gc.alloc.rate.norm:              1280.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.079 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1305.485 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1232.837 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1678264.958 ops/s
[info]                  ·gc.alloc.rate:                   1365.000 MB/sec
[info]                  ·gc.alloc.rate.norm:              1280.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.137 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1313.055 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1231.291 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 1660892.233 ops/s
[info]                  ·gc.alloc.rate:                   1350.635 MB/sec
[info]                  ·gc.alloc.rate.norm:              1280.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.059 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1322.202 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1253.053 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1675843.860 ops/s
[info]                  ·gc.alloc.rate:                   1362.835 MB/sec
[info]                  ·gc.alloc.rate.norm:              1280.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.059 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1330.911 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1250.017 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1678250.867 ops/s
[info]                  ·gc.alloc.rate:                   1364.769 MB/sec
[info]                  ·gc.alloc.rate.norm:              1280.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.078 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.188 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1255.070 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce":
[info]   1672010.976 ±(99.9%) 30043.007 ops/s [Average]
[info]   (min, avg, max) = (1660892.233, 1672010.976, 1678264.958), stdev = 7802.073
[info]   CI (99.9%): [1641967.969, 1702053.983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1359.733 ±(99.9%) 24.659 MB/sec [Average]
[info]   (min, avg, max) = (1350.635, 1359.733, 1365.000), stdev = 6.404
[info]   CI (99.9%): [1335.075, 1384.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1280.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1280.000, 1280.000, 1280.000), stdev = 0.001
[info]   CI (99.9%): [1280.000, 1280.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.146), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.082 ±(99.9%) 0.123 B/op [Average]
[info]   (min, avg, max) = (0.059, 0.082, 0.137), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1321.968 ±(99.9%) 50.730 MB/sec [Average]
[info]   (min, avg, max) = (1305.485, 1321.968, 1338.188), stdev = 13.174
[info]   CI (99.9%): [1271.238, 1372.699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1244.454 ±(99.9%) 44.150 B/op [Average]
[info]   (min, avg, max) = (1231.291, 1244.454, 1255.070), stdev = 11.465
[info]   CI (99.9%): [1200.304, 1288.603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala
[info] # Run progress: 96.23% complete, ETA 00:02:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 743522.603 ops/s
[info] # Warmup Iteration   2: 1986138.676 ops/s
[info] # Warmup Iteration   3: 2458279.417 ops/s
[info] Iteration   1: 2457513.523 ops/s
[info]                  ·gc.alloc.rate:                   1099.055 MB/sec
[info]                  ·gc.alloc.rate.norm:              704.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      972.428 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 622.889 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2394710.440 ops/s
[info]                  ·gc.alloc.rate:                   1071.007 MB/sec
[info]                  ·gc.alloc.rate.norm:              704.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.082 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1308.801 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 860.308 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 2407363.849 ops/s
[info]                  ·gc.alloc.rate:                   1076.767 MB/sec
[info]                  ·gc.alloc.rate.norm:              704.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.041 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      989.500 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 646.944 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 2462362.984 ops/s
[info]                  ·gc.alloc.rate:                   1101.368 MB/sec
[info]                  ·gc.alloc.rate.norm:              704.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.040 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      994.848 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 635.912 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2402401.747 ops/s
[info]                  ·gc.alloc.rate:                   1074.402 MB/sec
[info]                  ·gc.alloc.rate.norm:              704.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.041 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1000.068 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 655.293 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala":
[info]   2424870.508 ±(99.9%) 124659.360 ops/s [Average]
[info]   (min, avg, max) = (2394710.440, 2424870.508, 2462362.984), stdev = 32373.640
[info]   CI (99.9%): [2300211.148, 2549529.868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1084.520 ±(99.9%) 55.808 MB/sec [Average]
[info]   (min, avg, max) = (1071.007, 1084.520, 1101.368), stdev = 14.493
[info]   CI (99.9%): [1028.711, 1140.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   704.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (704.000, 704.000, 704.000), stdev = 0.001
[info]   CI (99.9%): [704.000, 704.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.125), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.046 ±(99.9%) 0.081 B/op [Average]
[info]   (min, avg, max) = (0.027, 0.046, 0.082), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1053.129 ±(99.9%) 551.804 MB/sec [Average]
[info]   (min, avg, max) = (972.428, 1053.129, 1308.801), stdev = 143.302
[info]   CI (99.9%): [501.325, 1604.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   684.269 ±(99.9%) 381.818 B/op [Average]
[info]   (min, avg, max) = (622.889, 684.269, 860.308), stdev = 99.157
[info]   CI (99.9%): [302.451, 1066.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 5.000), stdev = 0.894
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala
[info] # Run progress: 96.58% complete, ETA 00:02:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2072592.381 ops/s
[info] # Warmup Iteration   2: 2768305.869 ops/s
[info] # Warmup Iteration   3: 2788884.272 ops/s
[info] Iteration   1: 2767359.533 ops/s
[info]                  ·gc.alloc.rate:                   646.973 MB/sec
[info]                  ·gc.alloc.rate.norm:              368.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.710 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.110 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.373 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 373.915 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2771676.280 ops/s
[info]                  ·gc.alloc.rate:                   647.989 MB/sec
[info]                  ·gc.alloc.rate.norm:              368.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.047 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.068 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 371.453 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 2754302.795 ops/s
[info]                  ·gc.alloc.rate:                   643.934 MB/sec
[info]                  ·gc.alloc.rate.norm:              368.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.742 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 373.034 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 2777901.801 ops/s
[info]                  ·gc.alloc.rate:                   649.607 MB/sec
[info]                  ·gc.alloc.rate.norm:              368.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.901 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 369.866 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 2712454.017 ops/s
[info]                  ·gc.alloc.rate:                   634.119 MB/sec
[info]                  ·gc.alloc.rate.norm:              368.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.060 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.041 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 379.562 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala":
[info]   2756738.885 ±(99.9%) 100980.834 ops/s [Average]
[info]   (min, avg, max) = (2712454.017, 2756738.885, 2777901.801), stdev = 26224.402
[info]   CI (99.9%): [2655758.052, 2857719.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   644.525 ±(99.9%) 23.773 MB/sec [Average]
[info]   (min, avg, max) = (634.119, 644.525, 649.607), stdev = 6.174
[info]   CI (99.9%): [620.751, 668.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   368.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (368.000, 368.000, 368.000), stdev = 0.001
[info]   CI (99.9%): [368.000, 368.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.800 ±(99.9%) 6.265 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.800, 3.710), stdev = 1.627
[info]   CI (99.9%): [≈ 0, 7.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.455 ±(99.9%) 3.563 B/op [Average]
[info]   (min, avg, max) = (0.024, 0.455, 2.110), stdev = 0.925
[info]   CI (99.9%): [≈ 0, 4.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   654.225 ±(99.9%) 7.182 MB/sec [Average]
[info]   (min, avg, max) = (652.742, 654.225, 657.373), stdev = 1.865
[info]   CI (99.9%): [647.043, 661.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   373.566 ±(99.9%) 14.215 B/op [Average]
[info]   (min, avg, max) = (369.866, 373.566, 379.562), stdev = 3.692
[info]   CI (99.9%): [359.351, 387.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 96.92% complete, ETA 00:01:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2191163.608 ops/s
[info] # Warmup Iteration   2: 2902420.303 ops/s
[info] # Warmup Iteration   3: 2901102.807 ops/s
[info] Iteration   1: 2970220.102 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2970368.975 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2920784.057 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2969162.929 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2970860.501 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   2960279.313 ±(99.9%) 85049.907 ops/s [Average]
[info]   (min, avg, max) = (2920784.057, 2960279.313, 2970860.501), stdev = 22087.191
[info]   CI (99.9%): [2875229.406, 3045329.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson
[info] # Run progress: 97.26% complete, ETA 00:01:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1748280.274 ops/s
[info] # Warmup Iteration   2: 2369151.971 ops/s
[info] # Warmup Iteration   3: 2457138.698 ops/s
[info] Iteration   1: 2456914.315 ops/s
[info]                  ·gc.alloc.rate:                   1124.192 MB/sec
[info]                  ·gc.alloc.rate.norm:              720.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.040 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1301.862 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 833.791 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 2453152.784 ops/s
[info]                  ·gc.alloc.rate:                   1122.270 MB/sec
[info]                  ·gc.alloc.rate.norm:              720.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.067 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      979.244 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 628.241 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 2456972.260 ops/s
[info]                  ·gc.alloc.rate:                   1123.772 MB/sec
[info]                  ·gc.alloc.rate.norm:              720.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1312.374 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 840.838 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 2455975.960 ops/s
[info]                  ·gc.alloc.rate:                   1123.426 MB/sec
[info]                  ·gc.alloc.rate.norm:              720.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.040 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      990.783 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 634.989 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2463569.531 ops/s
[info]                  ·gc.alloc.rate:                   1127.193 MB/sec
[info]                  ·gc.alloc.rate.norm:              720.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.053 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      996.373 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 636.438 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson":
[info]   2457316.970 ±(99.9%) 14727.672 ops/s [Average]
[info]   (min, avg, max) = (2453152.784, 2457316.970, 2463569.531), stdev = 3824.730
[info]   CI (99.9%): [2442589.298, 2472044.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1124.170 ±(99.9%) 7.063 MB/sec [Average]
[info]   (min, avg, max) = (1122.270, 1124.170, 1127.193), stdev = 1.834
[info]   CI (99.9%): [1117.107, 1131.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   720.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (720.000, 720.000, 720.000), stdev = 0.001
[info]   CI (99.9%): [720.000, 720.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.045 ±(99.9%) 0.059 B/op [Average]
[info]   (min, avg, max) = (0.027, 0.045, 0.067), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1116.127 ±(99.9%) 671.934 MB/sec [Average]
[info]   (min, avg, max) = (979.244, 1116.127, 1312.374), stdev = 174.499
[info]   CI (99.9%): [444.194, 1788.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   714.859 ±(99.9%) 430.717 B/op [Average]
[info]   (min, avg, max) = (628.241, 714.859, 840.838), stdev = 111.856
[info]   CI (99.9%): [284.142, 1145.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce
[info] # Run progress: 97.60% complete, ETA 00:01:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6022.842 ops/s
[info] # Warmup Iteration   2: 8884.941 ops/s
[info] # Warmup Iteration   3: 10856.566 ops/s
[info] Iteration   1: 10828.144 ops/s
[info]                  ·gc.alloc.rate:                   1588.684 MB/sec
[info]                  ·gc.alloc.rate.norm:              230856.038 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.085 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.314 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1631.095 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 237018.841 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         20.000 ms
[info] Iteration   2: 10818.356 ops/s
[info]                  ·gc.alloc.rate:                   1587.181 MB/sec
[info]                  ·gc.alloc.rate.norm:              230856.038 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.144 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20.988 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1315.240 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 191302.128 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 12002.174 ops/s
[info]                  ·gc.alloc.rate:                   1755.078 MB/sec
[info]                  ·gc.alloc.rate.norm:              230152.037 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.126 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16.566 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1989.714 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 260921.069 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 11978.709 ops/s
[info]                  ·gc.alloc.rate:                   1752.206 MB/sec
[info]                  ·gc.alloc.rate.norm:              230198.578 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.229 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30.085 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1672.437 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 219718.725 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 12006.302 ops/s
[info]                  ·gc.alloc.rate:                   1756.060 MB/sec
[info]                  ·gc.alloc.rate.norm:              230208.034 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.271 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35.475 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1680.937 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 220359.888 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce":
[info]   11526.737 ±(99.9%) 2473.224 ops/s [Average]
[info]   (min, avg, max) = (10818.356, 11526.737, 12006.302), stdev = 642.288
[info]   CI (99.9%): [9053.513, 13999.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   1687.842 ±(99.9%) 351.244 MB/sec [Average]
[info]   (min, avg, max) = (1587.181, 1687.842, 1756.060), stdev = 91.217
[info]   CI (99.9%): [1336.598, 2039.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   230454.145 ±(99.9%) 1415.066 B/op [Average]
[info]   (min, avg, max) = (230152.037, 230454.145, 230856.038), stdev = 367.488
[info]   CI (99.9%): [229039.079, 231869.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.171 ±(99.9%) 0.295 MB/sec [Average]
[info]   (min, avg, max) = (0.085, 0.171, 0.271), stdev = 0.077
[info]   CI (99.9%): [≈ 0, 0.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   23.086 ±(99.9%) 36.805 B/op [Average]
[info]   (min, avg, max) = (12.314, 23.086, 35.475), stdev = 9.558
[info]   CI (99.9%): [≈ 0, 59.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1657.885 ±(99.9%) 921.297 MB/sec [Average]
[info]   (min, avg, max) = (1315.240, 1657.885, 1989.714), stdev = 239.258
[info]   CI (99.9%): [736.588, 2579.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   225864.130 ±(99.9%) 98474.360 B/op [Average]
[info]   (min, avg, max) = (191302.128, 225864.130, 260921.069), stdev = 25573.479
[info]   CI (99.9%): [127389.770, 324338.490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 8.600, 20.000), stdev = 6.656
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala
[info] # Run progress: 97.95% complete, ETA 00:01:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5246.772 ops/s
[info] # Warmup Iteration   2: 15292.630 ops/s
[info] # Warmup Iteration   3: 16240.217 ops/s
[info] Iteration   1: 16181.893 ops/s
[info]                  ·gc.alloc.rate:                   222.688 MB/sec
[info]                  ·gc.alloc.rate.norm:              21664.027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.742 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24879.707 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 16273.751 ops/s
[info]                  ·gc.alloc.rate:      224.092 MB/sec
[info]                  ·gc.alloc.rate.norm: 21671.695 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 16229.308 ops/s
[info]                  ·gc.alloc.rate:                   223.528 MB/sec
[info]                  ·gc.alloc.rate.norm:              21680.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.744 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24804.607 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 15495.221 ops/s
[info]                  ·gc.alloc.rate:                   213.503 MB/sec
[info]                  ·gc.alloc.rate.norm:              21680.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.457 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.858 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25980.977 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 15538.023 ops/s
[info]                  ·gc.alloc.rate:                   213.932 MB/sec
[info]                  ·gc.alloc.rate.norm:              21672.883 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.708 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71.689 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      322.348 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 32656.250 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala":
[info]   15943.639 ±(99.9%) 1507.355 ops/s [Average]
[info]   (min, avg, max) = (15495.221, 15943.639, 16273.751), stdev = 391.455
[info]   CI (99.9%): [14436.284, 17450.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   219.548 ±(99.9%) 20.596 MB/sec [Average]
[info]   (min, avg, max) = (213.503, 219.548, 224.092), stdev = 5.349
[info]   CI (99.9%): [198.952, 240.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   21673.731 ±(99.9%) 25.707 B/op [Average]
[info]   (min, avg, max) = (21664.027, 21673.731, 21680.026), stdev = 6.676
[info]   CI (99.9%): [21648.025, 21699.438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.158 ±(99.9%) 1.191 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.158, 0.708), stdev = 0.309
[info]   CI (99.9%): [≈ 0, 1.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   16.029 ±(99.9%) 120.638 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16.029, 71.689), stdev = 31.329
[info]   CI (99.9%): [≈ 0, 136.667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   217.938 ±(99.9%) 482.080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 217.938, 322.348), stdev = 125.195
[info]   CI (99.9%): [≈ 0, 700.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   21664.308 ±(99.9%) 48286.788 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 21664.308, 32656.250), stdev = 12539.926
[info]   CI (99.9%): [≈ 0, 69951.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 0.837
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala
[info] # Run progress: 98.29% complete, ETA 00:01:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17719.693 ops/s
[info] # Warmup Iteration   2: 22181.550 ops/s
[info] # Warmup Iteration   3: 36604.311 ops/s
[info] Iteration   1: 36369.417 ops/s
[info]                  ·gc.alloc.rate:                   336.928 MB/sec
[info]                  ·gc.alloc.rate.norm:              14576.184 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.037 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.589 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.729 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22138.398 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 36956.742 ops/s
[info]                  ·gc.alloc.rate:                   342.183 MB/sec
[info]                  ·gc.alloc.rate.norm:              14576.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.731 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10893.412 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 37199.307 ops/s
[info]                  ·gc.alloc.rate:                   344.497 MB/sec
[info]                  ·gc.alloc.rate.norm:              14576.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.779 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10822.265 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 38073.034 ops/s
[info]                  ·gc.alloc.rate:                   352.561 MB/sec
[info]                  ·gc.alloc.rate.norm:              14576.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.408 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     140.904 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.365 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13616.976 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 38244.221 ops/s
[info]                  ·gc.alloc.rate:                   354.163 MB/sec
[info]                  ·gc.alloc.rate.norm:              14576.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.857 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.381 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13556.100 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala":
[info]   37368.544 ±(99.9%) 3019.501 ops/s [Average]
[info]   (min, avg, max) = (36369.417, 37368.544, 38244.221), stdev = 784.155
[info]   CI (99.9%): [34349.043, 40388.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   346.066 ±(99.9%) 27.820 MB/sec [Average]
[info]   (min, avg, max) = (336.928, 346.066, 354.163), stdev = 7.225
[info]   CI (99.9%): [318.246, 373.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   14576.046 ±(99.9%) 0.298 B/op [Average]
[info]   (min, avg, max) = (14576.011, 14576.046, 14576.184), stdev = 0.077
[info]   CI (99.9%): [14575.748, 14576.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.693 ±(99.9%) 5.845 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.693, 3.408), stdev = 1.518
[info]   CI (99.9%): [≈ 0, 6.538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   28.670 ±(99.9%) 241.606 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 28.670, 140.904), stdev = 62.744
[info]   CI (99.9%): [≈ 0, 270.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   336.397 ±(99.9%) 403.152 MB/sec [Average]
[info]   (min, avg, max) = (255.731, 336.397, 511.729), stdev = 104.697
[info]   CI (99.9%): [≈ 0, 739.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   14205.430 ±(99.9%) 17866.652 B/op [Average]
[info]   (min, avg, max) = (10822.265, 14205.430, 22138.398), stdev = 4639.913
[info]   CI (99.9%): [≈ 0, 32072.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.800, 5.000), stdev = 1.483
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson
[info] # Run progress: 98.63% complete, ETA 00:00:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 767.662 ops/s
[info] # Warmup Iteration   2: 3125.205 ops/s
[info] # Warmup Iteration   3: 2927.822 ops/s
[info] Iteration   1: 3218.300 ops/s
[info]                  ·gc.alloc.rate:                   1032.698 MB/sec
[info]                  ·gc.alloc.rate.norm:              505145.874 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.180 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      976.601 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 477706.339 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 3581.719 ops/s
[info]                  ·gc.alloc.rate:                   1149.326 MB/sec
[info]                  ·gc.alloc.rate.norm:              505032.123 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18.291 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      983.689 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 432248.605 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 3620.437 ops/s
[info]                  ·gc.alloc.rate:                   1161.715 MB/sec
[info]                  ·gc.alloc.rate.norm:              505032.113 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.049 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1321.248 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 574385.666 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 3620.588 ops/s
[info]                  ·gc.alloc.rate:                   1161.785 MB/sec
[info]                  ·gc.alloc.rate.norm:              505032.121 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45.235 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      996.632 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 433239.642 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 3603.750 ops/s
[info]                  ·gc.alloc.rate:                   1156.662 MB/sec
[info]                  ·gc.alloc.rate.norm:              505032.113 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.090 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1336.994 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 583770.328 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson":
[info]   3528.959 ±(99.9%) 671.523 ops/s [Average]
[info]   (min, avg, max) = (3218.300, 3528.959, 3620.588), stdev = 174.392
[info]   CI (99.9%): [2857.436, 4200.481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1132.437 ±(99.9%) 215.589 MB/sec [Average]
[info]   (min, avg, max) = (1032.698, 1132.437, 1161.785), stdev = 55.988
[info]   CI (99.9%): [916.848, 1348.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   505054.869 ±(99.9%) 195.895 B/op [Average]
[info]   (min, avg, max) = (505032.113, 505054.869, 505145.874), stdev = 50.873
[info]   CI (99.9%): [504858.974, 505250.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.139 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.042, 0.104), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   18.369 ±(99.9%) 59.710 B/op [Average]
[info]   (min, avg, max) = (9.049, 18.369, 45.235), stdev = 15.506
[info]   CI (99.9%): [≈ 0, 78.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1123.033 ±(99.9%) 725.274 MB/sec [Average]
[info]   (min, avg, max) = (976.601, 1123.033, 1336.994), stdev = 188.351
[info]   CI (99.9%): [397.759, 1848.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   500270.116 ±(99.9%) 286184.293 B/op [Average]
[info]   (min, avg, max) = (432248.605, 500270.116, 583770.328), stdev = 74321.152
[info]   CI (99.9%): [214085.823, 786454.409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 1.000
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala
[info] # Run progress: 98.97% complete, ETA 00:00:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_6777d793/target/5e31e36e/jackson-module-afterburner-2.9.4.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 23169.087 ops/s
[info] # Warmup Iteration   2: 56975.397 ops/s
[info] # Warmup Iteration   3: 55150.257 ops/s
[info] Iteration   1: 58211.110 ops/s
[info]                  ·gc.alloc.rate:                   743.312 MB/sec
[info]                  ·gc.alloc.rate.norm:              20099.932 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.251 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      646.387 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17478.968 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 57983.074 ops/s
[info]                  ·gc.alloc.rate:                   740.383 MB/sec
[info]                  ·gc.alloc.rate.norm:              20100.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.260 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      974.713 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26461.659 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 58456.632 ops/s
[info]                  ·gc.alloc.rate:                   746.432 MB/sec
[info]                  ·gc.alloc.rate.norm:              20100.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.359 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17593.738 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 58563.158 ops/s
[info]                  ·gc.alloc.rate:                   747.838 MB/sec
[info]                  ·gc.alloc.rate.norm:              20099.997 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.081 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17633.807 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 57462.356 ops/s
[info]                  ·gc.alloc.rate:                   733.776 MB/sec
[info]                  ·gc.alloc.rate.norm:              20100.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.281 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658.763 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18045.236 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala":
[info]   58135.266 ±(99.9%) 1687.366 ops/s [Average]
[info]   (min, avg, max) = (57462.356, 58135.266, 58563.158), stdev = 438.204
[info]   CI (99.9%): [56447.900, 59822.632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   742.348 ±(99.9%) 21.533 MB/sec [Average]
[info]   (min, avg, max) = (733.776, 742.348, 747.838), stdev = 5.592
[info]   CI (99.9%): [720.815, 763.882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   20100.000 ±(99.9%) 0.153 B/op [Average]
[info]   (min, avg, max) = (20099.932, 20100.000, 20100.028), stdev = 0.040
[info]   CI (99.9%): [20099.847, 20100.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.176 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.083), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.358 ±(99.9%) 4.775 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.358, 2.281), stdev = 1.240
[info]   CI (99.9%): [≈ 0, 6.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   717.861 ±(99.9%) 553.179 MB/sec [Average]
[info]   (min, avg, max) = (646.387, 717.861, 974.713), stdev = 143.659
[info]   CI (99.9%): [164.682, 1271.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   19442.682 ±(99.9%) 15131.326 B/op [Average]
[info]   (min, avg, max) = (17478.968, 19442.682, 26461.659), stdev = 3929.557
[info]   CI (99.9%): [4311.355, 34574.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 4.000), stdev = 0.894
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala
[info] # Run progress: 99.32% complete, ETA 00:00:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 67873.861 ops/s
[info] # Warmup Iteration   2: 84411.984 ops/s
[info] # Warmup Iteration   3: 86941.379 ops/s
[info] Iteration   1: 85337.967 ops/s
[info]                  ·gc.alloc.rate:                   559.859 MB/sec
[info]                  ·gc.alloc.rate.norm:              10320.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.835 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70.700 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.627 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12085.316 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 84534.570 ops/s
[info]                  ·gc.alloc.rate:                   554.301 MB/sec
[info]                  ·gc.alloc.rate.norm:              10320.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      326.414 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6077.192 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 81933.152 ops/s
[info]                  ·gc.alloc.rate:                   537.192 MB/sec
[info]                  ·gc.alloc.rate.norm:              10320.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.199 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.070 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12526.918 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 85673.507 ops/s
[info]                  ·gc.alloc.rate:                   561.983 MB/sec
[info]                  ·gc.alloc.rate.norm:              10320.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.765 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.063 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11974.181 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 86909.246 ops/s
[info]                  ·gc.alloc.rate:                   569.996 MB/sec
[info]                  ·gc.alloc.rate.norm:              10320.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      326.137 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5904.837 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala":
[info]   84877.689 ±(99.9%) 7141.993 ops/s [Average]
[info]   (min, avg, max) = (81933.152, 84877.689, 86909.246), stdev = 1854.753
[info]   CI (99.9%): [77735.695, 92019.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   556.666 ±(99.9%) 47.199 MB/sec [Average]
[info]   (min, avg, max) = (537.192, 556.666, 569.996), stdev = 12.257
[info]   CI (99.9%): [509.468, 603.865] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   10320.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10320.005, 10320.005, 10320.005), stdev = 0.001
[info]   CI (99.9%): [10320.004, 10320.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.809 ±(99.9%) 6.521 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.809, 3.835), stdev = 1.693
[info]   CI (99.9%): [≈ 0, 7.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   14.933 ±(99.9%) 120.150 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14.933, 70.700), stdev = 31.203
[info]   CI (99.9%): [≈ 0, 135.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   522.462 ±(99.9%) 689.647 MB/sec [Average]
[info]   (min, avg, max) = (326.137, 522.462, 655.627), stdev = 179.099
[info]   CI (99.9%): [≈ 0, 1212.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   9713.689 ±(99.9%) 13112.017 B/op [Average]
[info]   (min, avg, max) = (5904.837, 9713.689, 12526.918), stdev = 3405.149
[info]   CI (99.9%): [≈ 0, 22825.706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 99.66% complete, ETA 00:00:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 75700.050 ops/s
[info] # Warmup Iteration   2: 96995.923 ops/s
[info] # Warmup Iteration   3: 95968.903 ops/s
[info] Iteration   1: 97157.430 ops/s
[info]                  ·gc.alloc.rate:      11.850 MB/sec
[info]                  ·gc.alloc.rate.norm: 192.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 97802.761 ops/s
[info]                  ·gc.alloc.rate:      11.929 MB/sec
[info]                  ·gc.alloc.rate.norm: 192.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 97822.669 ops/s
[info]                  ·gc.alloc.rate:      11.936 MB/sec
[info]                  ·gc.alloc.rate.norm: 192.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 97844.649 ops/s
[info]                  ·gc.alloc.rate:      11.939 MB/sec
[info]                  ·gc.alloc.rate.norm: 192.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 97810.868 ops/s
[info]                  ·gc.alloc.rate:      11.930 MB/sec
[info]                  ·gc.alloc.rate.norm: 192.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   97687.675 ±(99.9%) 1143.008 ops/s [Average]
[info]   (min, avg, max) = (97157.430, 97687.675, 97844.649), stdev = 296.835
[info]   CI (99.9%): [96544.668, 98830.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   11.917 ±(99.9%) 0.145 MB/sec [Average]
[info]   (min, avg, max) = (11.850, 11.917, 11.939), stdev = 0.038
[info]   CI (99.9%): [11.772, 12.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   192.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (192.004, 192.004, 192.004), stdev = 0.001
[info]   CI (99.9%): [192.004, 192.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # Run complete. Total time: 01:02:47
[info] Benchmark                                                                                 Mode  Cnt         Score         Error   Units
[info] AdtBenchmark.readCirce                                                                   thrpt    5    230187.063 ± 1121722.882   ops/s
[info] AdtBenchmark.readCirce:·gc.alloc.rate                                                    thrpt    5       607.989 ±    2964.207  MB/sec
[info] AdtBenchmark.readCirce:·gc.alloc.rate.norm                                               thrpt    5      4160.007 ±       0.020    B/op
[info] AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           thrpt    5         0.037 ±       0.199  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      thrpt    5         0.125 ±       0.696    B/op
[info] AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       thrpt    5       657.500 ±    3219.497  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  thrpt    5      4464.951 ±   20784.324    B/op
[info] AdtBenchmark.readCirce:·gc.count                                                         thrpt    5        10.000                counts
[info] AdtBenchmark.readCirce:·gc.time                                                          thrpt    5        16.000                    ms
[info] AdtBenchmark.readJacksonScala                                                            thrpt    5     77856.415 ±   69185.491   ops/s
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate                                             thrpt    5        55.389 ±      48.951  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        thrpt    5      1121.580 ±      13.528    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                thrpt    5        51.075 ±     439.771  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           thrpt    5       903.854 ±    7782.451    B/op
[info] AdtBenchmark.readJacksonScala:·gc.count                                                  thrpt    5         1.000                counts
[info] AdtBenchmark.readJacksonScala:·gc.time                                                   thrpt    5        14.000                    ms
[info] AdtBenchmark.readJsoniterScala                                                           thrpt    5   2255156.400 ±  810810.612   ops/s
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate                                            thrpt    5       149.020 ±      53.605  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       thrpt    5       104.000 ±       0.001    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   thrpt    5         0.220 ±       1.841  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              thrpt    5         0.147 ±       1.230    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               thrpt    5       153.486 ±     539.526  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          thrpt    5       110.323 ±     394.026    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.count                                                 thrpt    5         3.000                counts
[info] AdtBenchmark.readJsoniterScala:·gc.time                                                  thrpt    5         7.000                    ms
[info] AdtBenchmark.readPlayJson                                                                thrpt    5    120337.620 ±   13865.574   ops/s
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate                                                 thrpt    5       951.246 ±     109.983  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate.norm                                            thrpt    5     12440.004 ±       0.001    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        thrpt    5         0.108 ±       0.619  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   thrpt    5         1.435 ±       8.277    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    thrpt    5       969.444 ±     147.683  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               thrpt    5     12684.401 ±    2187.992    B/op
[info] AdtBenchmark.readPlayJson:·gc.count                                                      thrpt    5        15.000                counts
[info] AdtBenchmark.readPlayJson:·gc.time                                                       thrpt    5        17.000                    ms
[info] AdtBenchmark.writeJacksonScala                                                           thrpt    5   1666468.104 ±   93511.652   ops/s
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate                                            thrpt    5       643.749 ±      35.784  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       thrpt    5       608.000 ±       0.001    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   thrpt    5         0.129 ±       0.846  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              thrpt    5         0.123 ±       0.803    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               thrpt    5       638.071 ±     128.400  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          thrpt    5       602.666 ±     119.801    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.count                                                 thrpt    5        10.000                counts
[info] AdtBenchmark.writeJacksonScala:·gc.time                                                  thrpt    5        11.000                    ms
[info] AdtBenchmark.writeJsoniterScala                                                          thrpt    5   6994712.225 ±  884346.906   ops/s
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate                                           thrpt    5       355.553 ±      44.945  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      thrpt    5        80.000 ±       0.001    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  thrpt    5         0.767 ±       6.296  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             thrpt    5         0.170 ±       1.394    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              thrpt    5       350.252 ±     367.394  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         thrpt    5        78.831 ±      82.674    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.count                                                thrpt    5         6.000                counts
[info] AdtBenchmark.writeJsoniterScala:·gc.time                                                 thrpt    5        12.000                    ms
[info] AdtBenchmark.writePlayJson                                                               thrpt    5    294365.323 ±   15788.463   ops/s
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate                                                thrpt    5       930.591 ±      49.713  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate.norm                                           thrpt    5      4976.001 ±       0.001    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       thrpt    5         0.104 ±       0.127  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  thrpt    5         0.555 ±       0.651    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   thrpt    5       920.252 ±     558.181  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              thrpt    5      4916.269 ±    2871.075    B/op
[info] AdtBenchmark.writePlayJson:·gc.count                                                     thrpt    5        14.000                counts
[info] AdtBenchmark.writePlayJson:·gc.time                                                      thrpt    5        15.000                    ms
[info] AnyRefsBenchmark.readCirce                                                               thrpt    5   1448446.028 ±  117119.329   ops/s
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate                                                thrpt    5      2260.203 ±     181.669  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm                                           thrpt    5      2456.000 ±       0.001    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       thrpt    5         0.121 ±       0.222  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  thrpt    5         0.131 ±       0.240    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   thrpt    5      2279.910 ±     576.371  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              thrpt    5      2479.882 ±     754.644    B/op
[info] AnyRefsBenchmark.readCirce:·gc.count                                                     thrpt    5        34.000                counts
[info] AnyRefsBenchmark.readCirce:·gc.time                                                      thrpt    5        38.000                    ms
[info] AnyRefsBenchmark.readJacksonScala                                                        thrpt    5   2473299.411 ±   51819.662   ops/s
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate                                         thrpt    5      1734.943 ±      37.132  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    thrpt    5      1104.000 ±       0.001    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                thrpt    5         0.146 ±       0.150  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           thrpt    5         0.093 ±       0.098    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            thrpt    5      1738.605 ±     512.492  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       thrpt    5      1106.691 ±     349.436    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.count                                              thrpt    5        26.000                counts
[info] AnyRefsBenchmark.readJacksonScala:·gc.time                                               thrpt    5        29.000                    ms
[info] AnyRefsBenchmark.readJsoniterScala                                                       thrpt    5  11660959.931 ±  272667.437   ops/s
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate                                        thrpt    5      1481.744 ±      33.946  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   thrpt    5       200.000 ±       0.001    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               thrpt    5         0.083 ±       0.127  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          thrpt    5         0.011 ±       0.017    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           thrpt    5      1466.786 ±     693.233  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      thrpt    5       198.033 ±      95.511    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.count                                             thrpt    5        22.000                counts
[info] AnyRefsBenchmark.readJsoniterScala:·gc.time                                              thrpt    5        20.000                    ms
[info] AnyRefsBenchmark.readPlayJson                                                            thrpt    5    637014.706 ±   16137.524   ops/s
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate                                             thrpt    5      1703.173 ±      42.044  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm                                        thrpt    5      4208.001 ±       0.001    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    thrpt    5         0.108 ±       0.207  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               thrpt    5         0.267 ±       0.509    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                thrpt    5      1672.621 ±      65.733  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           thrpt    5      4132.801 ±     243.706    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.count                                                  thrpt    5        25.000                counts
[info] AnyRefsBenchmark.readPlayJson:·gc.time                                                   thrpt    5        30.000                    ms
[info] AnyRefsBenchmark.writeCirce                                                              thrpt    5   1946554.122 ±   97967.155   ops/s
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate                                               thrpt    5      1800.571 ±      90.395  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm                                          thrpt    5      1456.000 ±       0.001    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                      thrpt    5         0.092 ±       0.166  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                 thrpt    5         0.074 ±       0.134    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                  thrpt    5      1799.276 ±     752.779  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                             thrpt    5      1455.076 ±     609.975    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.count                                                    thrpt    5        27.000                counts
[info] AnyRefsBenchmark.writeCirce:·gc.time                                                     thrpt    5        29.000                    ms
[info] AnyRefsBenchmark.writeJacksonScala                                                       thrpt    5   5940194.112 ±  182168.768   ops/s
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate                                        thrpt    5      1630.339 ±      50.453  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   thrpt    5       432.000 ±       0.001    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               thrpt    5         0.117 ±       0.122  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          thrpt    5         0.031 ±       0.032    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           thrpt    5      1605.134 ±     594.308  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      thrpt    5       425.316 ±     156.894    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.count                                             thrpt    5        24.000                counts
[info] AnyRefsBenchmark.writeJacksonScala:·gc.time                                              thrpt    5        28.000                    ms
[info] AnyRefsBenchmark.writeJsoniterScala                                                      thrpt    5  20683228.891 ± 2411466.388   ops/s
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate                                       thrpt    5       630.755 ±      73.689  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  thrpt    5        48.000 ±       0.001    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              thrpt    5         0.810 ±       6.396  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         thrpt    5         0.060 ±       0.470    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          thrpt    5       654.244 ±       7.332  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     thrpt    5        49.821 ±       5.341    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.count                                            thrpt    5        10.000                counts
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.time                                             thrpt    5        11.000                    ms
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc                                              thrpt    5  21664516.427 ± 1557894.784   ops/s
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               thrpt    5        ≈ 10⁻⁴                MB/sec
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          thrpt    5        ≈ 10⁻⁵                  B/op
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    thrpt    5           ≈ 0                counts
[info] AnyRefsBenchmark.writePlayJson                                                           thrpt    5   1281033.184 ±   86137.683   ops/s
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate                                            thrpt    5      1959.971 ±     132.309  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm                                       thrpt    5      2408.000 ±       0.001    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   thrpt    5         0.117 ±       0.193  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              thrpt    5         0.142 ±       0.227    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               thrpt    5      2015.747 ±      70.461  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          thrpt    5      2477.410 ±     245.800    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.count                                                 thrpt    5        30.000                counts
[info] AnyRefsBenchmark.writePlayJson:·gc.time                                                  thrpt    5        35.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readCirce                                                    thrpt    5     15969.797 ±     512.890   ops/s
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate                                     thrpt    5      1160.202 ±      37.657  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate.norm                                thrpt    5    114344.040 ±       0.070    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space                            thrpt    5         0.050 ±       0.091  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                       thrpt    5         4.921 ±       8.948    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                        thrpt    5      1186.183 ±     697.080  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                   thrpt    5    116933.611 ±   69517.473    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.count                                          thrpt    5        18.000                counts
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.time                                           thrpt    5        19.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala                                             thrpt    5     20450.646 ±     782.464   ops/s
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate                              thrpt    5       723.486 ±      27.615  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate.norm                         thrpt    5     55679.174 ±      57.600    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                     thrpt    5         0.033 ±       0.122  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                thrpt    5         2.562 ±       9.356    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                 thrpt    5       722.089 ±     557.019  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5     55561.535 ±   42499.901    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.count                                   thrpt    5        11.000                counts
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.time                                    thrpt    5        13.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala                                            thrpt    5     18156.663 ±     999.381   ops/s
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate                             thrpt    5       336.838 ±      18.415  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                        thrpt    5     29200.024 ±       0.009    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                    thrpt    5         0.677 ±       5.701  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm               thrpt    5        58.166 ±     489.548    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                thrpt    5       299.868 ±     155.075  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5     26014.319 ±   14024.790    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.count                                  thrpt    5         5.000                counts
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.time                                   thrpt    5         9.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readPlayJson                                                 thrpt    5     16349.405 ±     796.161   ops/s
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate                                  thrpt    5       922.603 ±      45.084  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate.norm                             thrpt    5     88808.038 ±       0.091    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                         thrpt    5         0.062 ±       0.204  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                    thrpt    5         6.004 ±      19.663    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                     thrpt    5       912.289 ±     551.174  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                thrpt    5     87874.359 ±   54503.411    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.count                                       thrpt    5        14.000                counts
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.time                                        thrpt    5        15.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeCirce                                                   thrpt    5     13265.997 ±     556.857   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate                                    thrpt    5      1578.512 ±      65.418  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate.norm                               thrpt    5    187270.043 ±      49.349    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                           thrpt    5         0.096 ±       0.072  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                      thrpt    5        11.370 ±       8.802    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                       thrpt    5      1592.199 ±     552.576  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                  thrpt    5    188877.320 ±   64603.176    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.count                                         thrpt    5        24.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.time                                          thrpt    5        22.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala                                            thrpt    5     12911.586 ±     353.691   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate                             thrpt    5      1427.403 ±      39.336  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                        thrpt    5    174064.162 ±       0.863    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                    thrpt    5         0.067 ±       0.154  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm               thrpt    5         8.102 ±      18.675    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                thrpt    5      1399.318 ±     575.906  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5    170647.474 ±   70520.764    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.count                                  thrpt    5        21.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.time                                   thrpt    5        26.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala                                           thrpt    5     14404.267 ±     770.056   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate                            thrpt    5      1541.674 ±      83.015  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                       thrpt    5    168472.031 ±       0.011    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                   thrpt    5         0.079 ±       0.143  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm              thrpt    5         8.603 ±      15.378    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space               thrpt    5      1527.248 ±     719.669  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm          thrpt    5    167064.395 ±   84237.550    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.count                                 thrpt    5        23.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.time                                  thrpt    5        23.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc                                   thrpt    5     14572.185 ±     829.759   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                    thrpt    5      1488.935 ±      84.772  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm               thrpt    5    160832.050 ±       0.185    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space           thrpt    5         0.046 ±       0.104  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm      thrpt    5         4.940 ±      11.275    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space       thrpt    5      1459.850 ±     684.781  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm  thrpt    5    157613.020 ±   70337.402    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.count                         thrpt    5        22.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.time                          thrpt    5        21.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writePlayJson                                                thrpt    5      4462.941 ±     112.612   ops/s
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate                                 thrpt    5      1100.389 ±      27.339  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate.norm                            thrpt    5    388048.020 ±       1.204    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                        thrpt    5         0.054 ±       0.166  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                   thrpt    5        19.037 ±      58.553    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                    thrpt    5      1110.881 ±     701.960  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm               thrpt    5    391599.950 ±  242662.109    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.count                                      thrpt    5        17.000                counts
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.time                                       thrpt    5        18.000                    ms
[info] ArrayOfBigIntsBenchmark.readCirce                                                        thrpt    5      8200.997 ±     499.546   ops/s
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate                                         thrpt    5      1211.593 ±      73.214  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm                                    thrpt    5    232520.565 ±       4.429    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                thrpt    5         0.062 ±       0.127  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5        11.983 ±      24.374    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                            thrpt    5      1190.555 ±     694.858  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5    228279.157 ±  126574.625    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.count                                              thrpt    5        18.000                counts
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.time                                               thrpt    5        17.000                    ms
[info] ArrayOfBigIntsBenchmark.readJacksonScala                                                 thrpt    5     24504.925 ±    1385.268   ops/s
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate                                  thrpt    5       906.557 ±      50.870  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                             thrpt    5     58228.529 ±      66.106    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                         thrpt    5         0.054 ±       0.134  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5         3.486 ±       8.794    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                     thrpt    5       925.757 ±     578.518  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5     59443.449 ±   36646.254    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count                                       thrpt    5        14.000                counts
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time                                        thrpt    5        17.000                    ms
[info] ArrayOfBigIntsBenchmark.readJsoniterScala                                                thrpt    5     27872.826 ±     846.478   ops/s
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                 thrpt    5       505.971 ±      15.460  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                            thrpt    5     28568.016 ±       0.008    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5         0.579 ±       4.497  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5        32.613 ±     253.084    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5       513.783 ±     654.241  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5     29046.235 ±   37452.626    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count                                      thrpt    5         8.000                counts
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time                                       thrpt    5        10.000                    ms
[info] ArrayOfBigIntsBenchmark.writeJacksonScala                                                thrpt    5     15356.393 ±     563.782   ops/s
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                 thrpt    5      1472.772 ±      53.113  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                            thrpt    5    150944.003 ±       0.193    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                        thrpt    5         0.117 ±       0.201  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5        11.978 ±      21.163    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                    thrpt    5      1470.707 ±     688.308  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5    150803.629 ±   73200.519    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count                                      thrpt    5        22.000                counts
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time                                       thrpt    5        26.000                    ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala                                               thrpt    5     17201.042 ±     764.510   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                thrpt    5      1558.876 ±      69.532  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                           thrpt    5    142648.025 ±       0.013    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5         0.087 ±       0.174  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5         8.029 ±      16.313    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5      1529.674 ±     706.384  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5    140003.763 ±   65421.383    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count                                     thrpt    5        23.000                counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time                                      thrpt    5        27.000                    ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc                                       thrpt    5     17613.049 ±    1225.026   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                        thrpt    5      1537.929 ±     106.910  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                   thrpt    5    137440.027 ±       0.021    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space               thrpt    5         0.075 ±       0.146  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm          thrpt    5         6.710 ±      13.087    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space           thrpt    5      1527.668 ±     688.240  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm      thrpt    5    136659.333 ±   66006.772    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                             thrpt    5        23.000                counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time                              thrpt    5        21.000                    ms
[info] ArrayOfBooleansBenchmark.readCirce                                                       thrpt    5    368659.814 ±    6446.907   ops/s
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate                                        thrpt    5      1864.461 ±      31.493  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                   thrpt    5      7960.001 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                               thrpt    5         0.129 ±       0.215  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                          thrpt    5         0.551 ±       0.918    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                           thrpt    5      1873.723 ±     706.555  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                      thrpt    5      8001.363 ±    3100.603    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.count                                             thrpt    5        28.000                counts
[info] ArrayOfBooleansBenchmark.readCirce:·gc.time                                              thrpt    5        25.000                    ms
[info] ArrayOfBooleansBenchmark.readJacksonScala                                                thrpt    5    690342.210 ±   23703.901   ops/s
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                 thrpt    5       571.948 ±      19.529  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                            thrpt    5      1304.001 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                        thrpt    5         0.075 ±       0.217  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5         0.171 ±       0.494    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                    thrpt    5       588.235 ±     558.680  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5      1340.806 ±    1268.849    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.count                                      thrpt    5         9.000                counts
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.time                                       thrpt    5        10.000                    ms
[info] ArrayOfBooleansBenchmark.readJsoniterScala                                               thrpt    5   1681824.400 ±  116669.832   ops/s
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                thrpt    5       324.820 ±      22.495  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                           thrpt    5       304.000 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5         0.670 ±       5.678  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5         0.622 ±       5.272    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5       300.006 ±     155.658  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5       281.070 ±     154.333    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count                                     thrpt    5         5.000                counts
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time                                      thrpt    5         9.000                    ms
[info] ArrayOfBooleansBenchmark.readPlayJson                                                    thrpt    5    103568.662 ±    6857.251   ops/s
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                     thrpt    5      3762.419 ±     248.176  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                thrpt    5     57176.004 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                            thrpt    5         0.150 ±       0.183  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                       thrpt    5         2.271 ±       2.682    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                        thrpt    5      3737.689 ±     956.540  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                   thrpt    5     56777.463 ±   12300.688    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.count                                          thrpt    5        55.000                counts
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.time                                           thrpt    5        58.000                    ms
[info] ArrayOfBooleansBenchmark.writeCirce                                                      thrpt    5    315053.593 ±    8227.313   ops/s
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                       thrpt    5       771.901 ±      20.140  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                  thrpt    5      3856.001 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                              thrpt    5         0.067 ±       0.174  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                         thrpt    5         0.333 ±       0.872    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                          thrpt    5       783.521 ±     687.898  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                     thrpt    5      3915.363 ±    3464.763    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.count                                            thrpt    5        12.000                counts
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.time                                             thrpt    5        13.000                    ms
[info] ArrayOfBooleansBenchmark.writeJacksonScala                                               thrpt    5   1108262.484 ±   24486.679   ops/s
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                thrpt    5       782.927 ±      17.462  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                           thrpt    5      1112.000 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                       thrpt    5         0.079 ±       0.036  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5         0.112 ±       0.051    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                   thrpt    5       784.489 ±     691.132  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5      1113.835 ±     972.717    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count                                     thrpt    5        12.000                counts
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time                                      thrpt    5        14.000                    ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScala                                              thrpt    5   2327413.265 ±   44795.334   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                               thrpt    5      1076.426 ±      20.712  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                          thrpt    5       728.000 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                      thrpt    5         0.071 ±       0.146  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5         0.048 ±       0.098    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                  thrpt    5      1118.456 ±     687.472  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5       756.788 ±     476.140    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count                                    thrpt    5        17.000                counts
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time                                     thrpt    5        15.000                    ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc                                      thrpt    5   2489150.198 ±  278236.685   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                       thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                            thrpt    5           ≈ 0                counts
[info] ArrayOfBooleansBenchmark.writePlayJson                                                   thrpt    5    558631.294 ±   21945.112   ops/s
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                    thrpt    5       658.763 ±      25.671  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                               thrpt    5      1856.001 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                           thrpt    5         0.830 ±       6.658  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                      thrpt    5         2.326 ±      18.638    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                       thrpt    5       712.941 ±     552.896  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                  thrpt    5      2007.565 ±    1521.624    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.count                                         thrpt    5        11.000                counts
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.time                                          thrpt    5        13.000                    ms
[info] ArrayOfBytesBenchmark.readCirce                                                          thrpt    5    165796.032 ±    8010.012   ops/s
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate                                           thrpt    5      1992.916 ±      96.135  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm                                      thrpt    5     18920.002 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  thrpt    5         0.096 ±       0.072  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             thrpt    5         0.908 ±       0.665    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              thrpt    5      2011.033 ±      77.179  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         thrpt    5     19093.678 ±     943.564    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.count                                                thrpt    5        30.000                counts
[info] ArrayOfBytesBenchmark.readCirce:·gc.time                                                 thrpt    5        28.000                    ms
[info] ArrayOfBytesBenchmark.readJacksonScala                                                   thrpt    5    430542.764 ±   34093.764   ops/s
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate                                    thrpt    5       356.716 ±      28.164  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm                               thrpt    5      1304.001 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                           thrpt    5         0.021 ±       0.098  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5         0.077 ±       0.364    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                       thrpt    5       362.110 ±     321.725  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5      1320.557 ±    1080.145    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.count                                         thrpt    5         6.000                counts
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.time                                          thrpt    5         7.000                    ms
[info] ArrayOfBytesBenchmark.readJsoniterScala                                                  thrpt    5   1080053.939 ±   56326.643   ops/s
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate                                   thrpt    5       208.606 ±      10.909  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              thrpt    5       304.000 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          thrpt    5         0.005 ±       0.036  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5         0.007 ±       0.052    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      thrpt    5       204.632 ±     440.485  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5       296.435 ±     638.106    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.count                                        thrpt    5         4.000                counts
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.time                                         thrpt    5        10.000                    ms
[info] ArrayOfBytesBenchmark.readPlayJson                                                       thrpt    5     80283.576 ±    3539.723   ops/s
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate                                        thrpt    5      3313.195 ±     144.679  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm                                   thrpt    5     64952.005 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               thrpt    5         0.167 ±       0.316  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          thrpt    5         3.266 ±       6.165    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           thrpt    5      3325.485 ±     579.128  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5     65190.783 ±   10834.604    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.count                                             thrpt    5        49.000                counts
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.time                                              thrpt    5        54.000                    ms
[info] ArrayOfBytesBenchmark.writeCirce                                                         thrpt    5    305691.928 ±   16455.750   ops/s
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate                                          thrpt    5      1514.833 ±      82.024  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm                                     thrpt    5      7800.001 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 thrpt    5         0.079 ±       0.154  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5         0.408 ±       0.807    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             thrpt    5      1459.738 ±     703.540  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5      7522.821 ±    3855.185    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.count                                               thrpt    5        22.000                counts
[info] ArrayOfBytesBenchmark.writeCirce:·gc.time                                                thrpt    5        20.000                    ms
[info] ArrayOfBytesBenchmark.writeJsoniterScala                                                 thrpt    5   1845205.620 ±  201710.008   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate                                  thrpt    5       497.035 ±      54.523  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                             thrpt    5       424.000 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                         thrpt    5         0.781 ±       6.326  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5         0.652 ±       5.273    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                     thrpt    5       508.878 ±     647.209  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5       432.176 ±     525.405    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count                                       thrpt    5         8.000                counts
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time                                        thrpt    5        14.000                    ms
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc                                         thrpt    5   1849446.887 ±   16711.601   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                          thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                     thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count                               thrpt    5           ≈ 0                counts
[info] ArrayOfBytesBenchmark.writePlayJson                                                      thrpt    5     46611.868 ±    2337.174   ops/s
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate                                       thrpt    5      2064.074 ±     104.209  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm                                  thrpt    5     69696.009 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                              thrpt    5         0.092 ±       0.166  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                         thrpt    5         3.092 ±       5.588    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                          thrpt    5      2071.911 ±     624.850  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5     69979.611 ±   21977.436    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.count                                            thrpt    5        31.000                counts
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.time                                             thrpt    5        33.000                    ms
[info] ArrayOfDoublesBenchmark.readCirce                                                        thrpt    5     26948.404 ±    1571.975   ops/s
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate                                         thrpt    5      1578.656 ±      92.710  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm                                    thrpt    5     92192.016 ±       0.006    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                thrpt    5         0.079 ±       0.200  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5         4.619 ±      11.599    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                            thrpt    5      1596.387 ±     553.741  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5     93272.257 ±   33990.547    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.count                                              thrpt    5        24.000                counts
[info] ArrayOfDoublesBenchmark.readCirce:·gc.time                                               thrpt    5        24.000                    ms
[info] ArrayOfDoublesBenchmark.readJacksonScala                                                 thrpt    5     61355.151 ±    5046.431   ops/s
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate                                  thrpt    5      1012.626 ±      83.160  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm                             thrpt    5     25976.007 ±       0.001    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                         thrpt    5         0.071 ±       0.091  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5         1.810 ±       2.260    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                     thrpt    5       994.592 ±      32.997  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5     25519.348 ±    1386.413    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.count                                       thrpt    5        15.000                counts
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.time                                        thrpt    5        18.000                    ms
[info] ArrayOfDoublesBenchmark.readJsoniterScala                                                thrpt    5     79223.415 ±     852.490   ops/s
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate                                 thrpt    5       510.653 ±       5.195  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                            thrpt    5     10144.005 ±       0.001    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5         0.685 ±       5.628  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5        13.605 ±     111.807    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5       511.216 ±     653.237  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5     10153.324 ±   12950.490    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count                                      thrpt    5         8.000                counts
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time                                       thrpt    5        12.000                    ms
[info] ArrayOfDoublesBenchmark.readPlayJson                                                     thrpt    5     33757.118 ±    1168.718   ops/s
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate                                      thrpt    5      1718.991 ±      60.407  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm                                 thrpt    5     80152.013 ±       0.006    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                             thrpt    5         0.125 ±       0.188  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                        thrpt    5         5.824 ±       8.771    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                         thrpt    5      1740.440 ±     561.193  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                    thrpt    5     81121.734 ±   23987.641    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.count                                           thrpt    5        26.000                counts
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.time                                            thrpt    5        27.000                    ms
[info] ArrayOfDoublesBenchmark.writeCirce                                                       thrpt    5     39117.734 ±    2837.636   ops/s
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate                                        thrpt    5       527.091 ±      38.242  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm                                   thrpt    5     21208.011 ±       0.002    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                               thrpt    5         0.717 ±       5.818  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                          thrpt    5        28.546 ±     231.372    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                           thrpt    5       572.461 ±     543.478  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                      thrpt    5     23093.213 ±   22712.170    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.count                                             thrpt    5         9.000                counts
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.time                                              thrpt    5        12.000                    ms
[info] ArrayOfDoublesBenchmark.writeJacksonScala                                                thrpt    5     40506.213 ±     571.687   ops/s
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate                                 thrpt    5       365.883 ±       5.091  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                            thrpt    5     14216.011 ±       0.003    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                        thrpt    5         0.025 ±       0.132  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5         0.973 ±       5.146    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                    thrpt    5       308.426 ±     113.310  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5     11984.288 ±    4430.020    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count                                      thrpt    5         5.000                counts
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time                                       thrpt    5         7.000                    ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScala                                               thrpt    5     44411.451 ±    6133.070   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate                                thrpt    5       390.294 ±      53.927  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                           thrpt    5     13832.010 ±       0.001    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5         0.758 ±       6.333  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5        26.453 ±     221.142    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5       364.228 ±     317.097  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5     12905.399 ±   10915.203    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count                                     thrpt    5         6.000                counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time                                      thrpt    5        11.000                    ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc                                       thrpt    5     45999.145 ±    2713.230   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                        thrpt    5       351.640 ±      20.816  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                   thrpt    5     12032.009 ±       0.001    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space               thrpt    5         0.763 ±       6.481  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm          thrpt    5        26.666 ±     226.582    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space           thrpt    5       298.942 ±     151.634  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm      thrpt    5     10241.003 ±    5568.858    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count                             thrpt    5         5.000                counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time                              thrpt    5        10.000                    ms
[info] ArrayOfDurationsBenchmark.readCirce                                                      thrpt    5     20130.297 ±     415.930   ops/s
[info] ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate                                       thrpt    5       754.902 ±      15.319  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate.norm                                  thrpt    5     59023.362 ±      56.022    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space                              thrpt    5         0.033 ±       0.122  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                         thrpt    5         2.614 ±       9.584    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                          thrpt    5       787.050 ±     691.495  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                     thrpt    5     61543.279 ±   54202.187    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.count                                            thrpt    5        12.000                counts
[info] ArrayOfDurationsBenchmark.readCirce:·gc.time                                             thrpt    5        12.000                    ms
[info] ArrayOfDurationsBenchmark.readJacksonScala                                               thrpt    5     20173.019 ±    1837.632   ops/s
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate                                thrpt    5       572.404 ±      51.821  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate.norm                           thrpt    5     44663.722 ±      60.543    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                       thrpt    5         0.021 ±       0.098  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5         1.644 ±       7.764    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                   thrpt    5       588.703 ±     562.892  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5     45813.981 ±   42206.662    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.count                                     thrpt    5         9.000                counts
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.time                                      thrpt    5        10.000                    ms
[info] ArrayOfDurationsBenchmark.readJsoniterScala                                              thrpt    5     76114.522 ±    1411.201   ops/s
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate                               thrpt    5       198.066 ±       3.700  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                          thrpt    5      4096.005 ±       0.001    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                      thrpt    5         0.003 ±       0.013  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5         0.052 ±       0.274    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                  thrpt    5       204.609 ±     440.436  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5      4237.507 ±    9121.857    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.count                                    thrpt    5         4.000                counts
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.time                                     thrpt    5         9.000                    ms
[info] ArrayOfDurationsBenchmark.readPlayJson                                                   thrpt    5     16775.129 ±     594.640   ops/s
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate                                    thrpt    5      1065.705 ±      37.706  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate.norm                               thrpt    5     99984.037 ±       0.083    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                           thrpt    5         0.050 ±       0.146  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                      thrpt    5         4.686 ±      13.637    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                       thrpt    5      1056.090 ±     534.412  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                  thrpt    5     99103.856 ±   50914.447    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.count                                         thrpt    5        16.000                counts
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.time                                          thrpt    5        17.000                    ms
[info] ArrayOfDurationsBenchmark.writeCirce                                                     thrpt    5     59124.625 ±    2409.978   ops/s
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate                                      thrpt    5      1082.758 ±      44.568  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate.norm                                 thrpt    5     28824.007 ±       0.001    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                             thrpt    5         0.075 ±       0.091  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                        thrpt    5         1.999 ±       2.501    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                         thrpt    5      1052.562 ±     565.086  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                    thrpt    5     28025.406 ±   15205.704    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.count                                           thrpt    5        16.000                counts
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.time                                            thrpt    5        16.000                    ms
[info] ArrayOfDurationsBenchmark.writeJsoniterScala                                             thrpt    5    249785.417 ±   16125.524   ops/s
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate                              thrpt    5       396.135 ±      25.594  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                         thrpt    5      2496.002 ±       0.001    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                     thrpt    5         0.779 ±       6.273  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                thrpt    5         4.865 ±      39.124    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                 thrpt    5       429.938 ±     570.299  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5      2717.014 ±    3701.057    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.count                                   thrpt    5         7.000                counts
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.time                                    thrpt    5        12.000                    ms
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc                                     thrpt    5    334315.450 ±   27583.039   ops/s
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                      thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                 thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.count                           thrpt    5           ≈ 0                counts
[info] ArrayOfDurationsBenchmark.writePlayJson                                                  thrpt    5     75269.233 ±    3030.307   ops/s
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate                                   thrpt    5      1172.550 ±      47.289  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate.norm                              thrpt    5     24520.006 ±       0.001    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                          thrpt    5         0.108 ±       0.183  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                     thrpt    5         2.269 ±       3.926    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                      thrpt    5      1179.346 ±     702.351  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                 thrpt    5     24661.851 ±   14650.663    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.count                                        thrpt    5        18.000                counts
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.time                                         thrpt    5        20.000                    ms
[info] ArrayOfEnumsBenchmark.readCirce                                                          thrpt    5     27840.499 ±     959.211   ops/s
[info] ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate                                           thrpt    5       579.017 ±      20.042  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate.norm                                      thrpt    5     32736.018 ±       0.018    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  thrpt    5         0.717 ±       5.816  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             thrpt    5        41.132 ±     334.015    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              thrpt    5       585.786 ±     561.223  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         thrpt    5     33135.129 ±   31942.365    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.count                                                thrpt    5         9.000                counts
[info] ArrayOfEnumsBenchmark.readCirce:·gc.time                                                 thrpt    5        11.000                    ms
[info] ArrayOfEnumsBenchmark.readJsoniterScala                                                  thrpt    5    122875.609 ±    5174.811   ops/s
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate                                   thrpt    5       479.618 ±      20.293  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              thrpt    5      6144.003 ±       0.001    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          thrpt    5         0.692 ±       5.555  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5         8.933 ±      71.793    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      thrpt    5       510.602 ±     649.520  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5      6544.187 ±    8348.470    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.count                                        thrpt    5         8.000                counts
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.time                                         thrpt    5        10.000                    ms
[info] ArrayOfEnumsBenchmark.readPlayJson                                                       thrpt    5     22432.029 ±     897.614   ops/s
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate                                        thrpt    5      1238.742 ±      49.581  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm                                   thrpt    5     86920.042 ±       0.190    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               thrpt    5         0.058 ±       0.164  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          thrpt    5         4.110 ±      11.754    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           thrpt    5      1262.890 ±     572.091  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5     88611.461 ±   39906.193    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.count                                             thrpt    5        19.000                counts
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.time                                              thrpt    5        25.000                    ms
[info] ArrayOfEnumsBenchmark.writeCirce                                                         thrpt    5    167037.645 ±    5290.698   ops/s
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate                                          thrpt    5       837.095 ±      26.566  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate.norm                                     thrpt    5      7888.003 ±       0.001    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 thrpt    5         0.071 ±       0.044  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5         0.667 ±       0.417    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             thrpt    5       849.651 ±     691.638  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5      8015.108 ±    6694.946    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.count                                               thrpt    5        13.000                counts
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.time                                                thrpt    5        13.000                    ms
[info] ArrayOfEnumsBenchmark.writeJsoniterScala                                                 thrpt    5    514475.440 ±   70508.892   ops/s
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate                                  thrpt    5       394.857 ±      53.971  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                             thrpt    5      1208.001 ±       0.001    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                         thrpt    5         0.771 ±       6.261  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5         2.472 ±      20.160    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                     thrpt    5       429.500 ±     570.027  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5      1310.873 ±    1663.560    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.count                                       thrpt    5         7.000                counts
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.time                                        thrpt    5        12.000                    ms
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc                                         thrpt    5    549872.236 ±    1012.083   ops/s
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                          thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                     thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count                               thrpt    5           ≈ 0                counts
[info] ArrayOfEnumsBenchmark.writePlayJson                                                      thrpt    5    283315.845 ±   13412.820   ops/s
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate                                       thrpt    5       783.434 ±      37.441  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm                                  thrpt    5      4352.001 ±       0.001    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                              thrpt    5         0.083 ±       0.150  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                         thrpt    5         0.463 ±       0.839    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                          thrpt    5       789.675 ±     701.277  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5      4391.157 ±    3989.389    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.count                                            thrpt    5        12.000                counts
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.time                                             thrpt    5        14.000                    ms
[info] ArrayOfFloatsBenchmark.readCirce                                                         thrpt    5     37915.510 ±    1765.751   ops/s
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate                                          thrpt    5      1691.250 ±      77.866  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm                                     thrpt    5     70199.926 ±       0.733    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                 thrpt    5         0.075 ±       0.091  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5         3.120 ±       3.927    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                             thrpt    5      1668.456 ±      63.601  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5     69258.566 ±    3011.432    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.count                                               thrpt    5        25.000                counts
[info] ArrayOfFloatsBenchmark.readCirce:·gc.time                                                thrpt    5        22.000                    ms
[info] ArrayOfFloatsBenchmark.readJacksonScala                                                  thrpt    5    104200.632 ±    9078.369   ops/s
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate                                   thrpt    5      1149.322 ±     100.656  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm                              thrpt    5     17360.004 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                          thrpt    5         0.079 ±       0.105  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5         1.195 ±       1.552    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                      thrpt    5      1130.628 ±     680.970  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5     17049.867 ±    9194.257    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.count                                        thrpt    5        17.000                counts
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.time                                         thrpt    5        19.000                    ms
[info] ArrayOfFloatsBenchmark.readJsoniterScala                                                 thrpt    5    156437.998 ±   11660.234   ops/s
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate                                  thrpt    5       101.779 ±       7.520  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                             thrpt    5      1024.003 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                         thrpt    5         0.429 ±       3.639  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5         4.313 ±      36.624    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                     thrpt    5       102.302 ±     539.411  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5      1021.951 ±    5388.703    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count                                       thrpt    5         2.000                counts
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time                                        thrpt    5         4.000                    ms
[info] ArrayOfFloatsBenchmark.readPlayJson                                                      thrpt    5     38928.081 ±    2891.237   ops/s
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate                                       thrpt    5      2028.182 ±     157.451  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm                                  thrpt    5     82004.528 ±     452.191    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                              thrpt    5         0.100 ±       0.143  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                         thrpt    5         4.034 ±       5.813    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                          thrpt    5      2018.065 ±      66.932  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5     81623.411 ±    7189.549    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.count                                            thrpt    5        30.000                counts
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.time                                             thrpt    5        33.000                    ms
[info] ArrayOfFloatsBenchmark.writeCirce                                                        thrpt    5     79676.618 ±    5014.922   ops/s
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate                                         thrpt    5       612.005 ±      38.556  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm                                    thrpt    5     12088.005 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                thrpt    5         0.721 ±       5.896  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5        14.595 ±     119.512    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                            thrpt    5       586.928 ±     560.864  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5     11612.484 ±   11329.298    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.count                                              thrpt    5         9.000                counts
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.time                                               thrpt    5        10.000                    ms
[info] ArrayOfFloatsBenchmark.writeJacksonScala                                                 thrpt    5     95927.124 ±   19695.588   ops/s
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate                                  thrpt    5       316.890 ±      65.024  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                             thrpt    5      5200.004 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                         thrpt    5         0.017 ±       0.067  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5         0.272 ±       1.073    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                     thrpt    5       294.983 ±     137.975  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5      4856.173 ±    2669.939    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count                                       thrpt    5         5.000                counts
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time                                        thrpt    5         7.000                    ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScala                                                thrpt    5    117381.614 ±    2166.780   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate                                 thrpt    5       359.166 ±       6.555  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                            thrpt    5      4816.004 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5         0.757 ±       6.383  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5        10.183 ±      85.880    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5       364.231 ±     640.574  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5      4890.967 ±    8696.352    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count                                      thrpt    5         6.000                counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time                                       thrpt    5        10.000                    ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc                                        thrpt    5    113896.495 ±     778.976   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                         thrpt    5       258.762 ±       1.818  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                    thrpt    5      3576.004 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                thrpt    5         0.758 ±       6.375  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm           thrpt    5        10.470 ±      88.074    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space            thrpt    5       219.144 ±     487.024  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm       thrpt    5      3030.515 ±    6732.560    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count                              thrpt    5         4.000                counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time                               thrpt    5        10.000                    ms
[info] ArrayOfInstantsBenchmark.readCirce                                                       thrpt    5      9775.082 ±     628.768   ops/s
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate                                        thrpt    5      1605.309 ±     102.552  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm                                   thrpt    5    258492.009 ±      26.682    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space                               thrpt    5         0.087 ±       0.088  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                          thrpt    5        14.067 ±      13.822    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                           thrpt    5      1663.656 ±      66.134  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                      thrpt    5    267920.714 ±   12246.014    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.count                                             thrpt    5        25.000                counts
[info] ArrayOfInstantsBenchmark.readCirce:·gc.time                                              thrpt    5        25.000                    ms
[info] ArrayOfInstantsBenchmark.readJacksonScala                                                thrpt    5     10595.528 ±     514.960   ops/s
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate                                 thrpt    5      1636.992 ±      79.891  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm                            thrpt    5    243147.158 ±      59.731    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                        thrpt    5         0.067 ±       0.088  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5         9.871 ±      12.699    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                    thrpt    5      1609.589 ±     553.136  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5    239195.313 ±   87114.326    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.count                                      thrpt    5        24.000                counts
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.time                                       thrpt    5        28.000                    ms
[info] ArrayOfInstantsBenchmark.readJsoniterScala                                               thrpt    5    105995.540 ±    7378.571   ops/s
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate                                thrpt    5       275.829 ±      19.281  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                           thrpt    5      4096.004 ±       0.001    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5         0.545 ±       4.498  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5         7.968 ±      65.793    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5       286.019 ±     159.550  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5      4243.438 ±    2206.341    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count                                     thrpt    5         5.000                counts
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time                                      thrpt    5        10.000                    ms
[info] ArrayOfInstantsBenchmark.readPlayJson                                                    thrpt    5      5953.624 ±      79.214   ops/s
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate                                     thrpt    5      1572.053 ±      21.847  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm                                thrpt    5    415600.070 ±       0.009    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                            thrpt    5         0.033 ±       0.108  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                       thrpt    5         8.808 ±      28.482    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                        thrpt    5      1541.116 ±     695.153  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                   thrpt    5    407551.123 ±  188741.253    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.count                                          thrpt    5        23.000                counts
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.time                                           thrpt    5        25.000                    ms
[info] ArrayOfInstantsBenchmark.writeCirce                                                      thrpt    5     24626.211 ±     923.060   ops/s
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate                                       thrpt    5      1384.323 ±      52.160  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm                                  thrpt    5     88464.076 ±      43.764    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                              thrpt    5         0.083 ±       0.057  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                         thrpt    5         5.322 ±       3.670    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                          thrpt    5      1390.924 ±     528.609  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                     thrpt    5     88840.410 ±   30956.696    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.count                                            thrpt    5        21.000                counts
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.time                                             thrpt    5        22.000                    ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScala                                              thrpt    5    340883.447 ±   23095.409   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate                               thrpt    5       751.899 ±      51.037  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                          thrpt    5      3472.001 ±       0.001    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                      thrpt    5         0.083 ±       0.220  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5         0.383 ±       1.006    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                  thrpt    5       719.661 ±     559.744  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5      3331.381 ±    2812.556    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count                                    thrpt    5        11.000                counts
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time                                     thrpt    5        13.000                    ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc                                      thrpt    5    381669.477 ±   10036.593   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                       thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count                            thrpt    5           ≈ 0                counts
[info] ArrayOfInstantsBenchmark.writePlayJson                                                   thrpt    5     28105.494 ±     279.779   ops/s
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate                                    thrpt    5      1478.360 ±      14.771  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm                               thrpt    5     82792.015 ±       0.006    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                           thrpt    5         0.096 ±       0.134  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                      thrpt    5         5.363 ±       7.517    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                       thrpt    5      1451.362 ±     699.900  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                  thrpt    5     81273.222 ±   38907.605    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.count                                         thrpt    5        22.000                counts
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.time                                          thrpt    5        22.000                    ms
[info] ArrayOfIntsBenchmark.readCirce                                                           thrpt    5    137573.333 ±    3405.366   ops/s
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate                                            thrpt    5      2241.021 ±      55.545  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                       thrpt    5     25640.003 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                   thrpt    5         0.117 ±       0.156  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                              thrpt    5         1.332 ±       1.772    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                               thrpt    5      2286.820 ±     574.450  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                          thrpt    5     26170.326 ±    6966.611    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.count                                                 thrpt    5        34.000                counts
[info] ArrayOfIntsBenchmark.readCirce:·gc.time                                                  thrpt    5        30.000                    ms
[info] ArrayOfIntsBenchmark.readJacksonScala                                                    thrpt    5    292945.497 ±   92189.008   ops/s
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                     thrpt    5       413.949 ±     130.023  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                thrpt    5      2224.001 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                            thrpt    5         0.029 ±       0.166  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                       thrpt    5         0.151 ±       0.867    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                        thrpt    5       376.427 ±     595.077  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                   thrpt    5      2025.404 ±    3069.644    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.count                                          thrpt    5         6.000                counts
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.time                                           thrpt    5         7.000                    ms
[info] ArrayOfIntsBenchmark.readJsoniterScala                                                   thrpt    5    735294.618 ±   59130.149   ops/s
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                    thrpt    5       478.428 ±      38.551  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                               thrpt    5      1024.001 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                           thrpt    5         0.673 ±       5.528  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5         1.492 ±      12.281    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                       thrpt    5       445.520 ±     624.825  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5       956.374 ±    1371.769    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.count                                         thrpt    5         7.000                counts
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.time                                          thrpt    5         9.000                    ms
[info] ArrayOfIntsBenchmark.readPlayJson                                                        thrpt    5     68933.644 ±    3691.442   ops/s
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                         thrpt    5      2932.650 ±     177.711  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                    thrpt    5     66947.780 ±     526.734    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                thrpt    5         0.162 ±       0.132  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                           thrpt    5         3.713 ±       3.119    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                            thrpt    5      2980.657 ±     573.362  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                       thrpt    5     68044.118 ±   12535.516    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.count                                              thrpt    5        44.000                counts
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.time                                               thrpt    5        47.000                    ms
[info] ArrayOfIntsBenchmark.writeCirce                                                          thrpt    5    194939.102 ±    8480.450   ops/s
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate                                           thrpt    5      1368.433 ±      59.942  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                      thrpt    5     11048.002 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                  thrpt    5         0.071 ±       0.185  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                             thrpt    5         0.571 ±       1.489    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                              thrpt    5      1323.252 ±      51.604  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                         thrpt    5     10683.517 ±     252.880    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.count                                                thrpt    5        20.000                counts
[info] ArrayOfIntsBenchmark.writeCirce:·gc.time                                                 thrpt    5        19.000                    ms
[info] ArrayOfIntsBenchmark.writeJacksonScala                                                   thrpt    5    831946.852 ±   69523.217   ops/s
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                    thrpt    5       655.441 ±      54.932  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                               thrpt    5      1240.000 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                           thrpt    5         0.100 ±       0.132  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5         0.189 ±       0.253    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                       thrpt    5       650.523 ±      20.798  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5      1231.138 ±     105.430    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.count                                         thrpt    5        10.000                counts
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.time                                          thrpt    5        11.000                    ms
[info] ArrayOfIntsBenchmark.writeJsoniterScala                                                  thrpt    5   1192393.597 ±   13709.977   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                   thrpt    5       648.426 ±       7.428  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                              thrpt    5       856.000 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                          thrpt    5         0.067 ±       0.154  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5         0.088 ±       0.204    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                      thrpt    5       654.069 ±       4.814  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5       863.454 ±       7.849    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count                                        thrpt    5        10.000                counts
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time                                         thrpt    5        10.000                    ms
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc                                          thrpt    5   1042332.695 ±   21779.126   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                           thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                      thrpt    5        ≈ 10⁻³                  B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                thrpt    5           ≈ 0                counts
[info] ArrayOfIntsBenchmark.writePlayJson                                                       thrpt    5     33916.299 ±     877.230   ops/s
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                        thrpt    5      1841.025 ±      46.879  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                   thrpt    5     85432.015 ±       0.020    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                               thrpt    5         0.083 ±       0.057  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                          thrpt    5         3.864 ±       2.647    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                           thrpt    5      1795.898 ±     689.865  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5     83317.476 ±   30887.113    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.count                                             thrpt    5        27.000                counts
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.time                                              thrpt    5        28.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala                                               thrpt    5    190303.771 ±   18647.089   ops/s
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate                                thrpt    5      1011.745 ±      99.220  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm                           thrpt    5      8368.002 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                       thrpt    5         0.050 ±       0.091  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5         0.410 ±       0.721    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                   thrpt    5       994.285 ±      31.329  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5      8228.829 ±    1010.635    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.count                                     thrpt    5        15.000                counts
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.time                                      thrpt    5        17.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala                                              thrpt    5    271044.289 ±    9460.847   ops/s
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate                               thrpt    5       705.429 ±      24.498  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                          thrpt    5      4096.002 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                      thrpt    5         0.075 ±       0.122  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5         0.436 ±       0.723    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                  thrpt    5       722.990 ±     561.533  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5      4202.545 ±    3392.455    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.count                                    thrpt    5        11.000                counts
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.time                                     thrpt    5        10.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readPlayJson                                                   thrpt    5     66039.523 ±    3884.999   ops/s
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate                                    thrpt    5      2701.441 ±     157.698  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm                               thrpt    5     64384.006 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                           thrpt    5         0.108 ±       0.174  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                      thrpt    5         2.584 ±       4.198    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                       thrpt    5      2707.310 ±      61.079  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                  thrpt    5     64538.278 ±    4719.191    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.count                                         thrpt    5        40.000                counts
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.time                                          thrpt    5        48.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala                                              thrpt    5    502882.615 ±   31809.169   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate                               thrpt    5       508.658 ±      32.118  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                          thrpt    5      1592.001 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                      thrpt    5         0.062 ±       0.160  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5         0.195 ±       0.498    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                  thrpt    5       521.993 ±     692.027  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5      1635.702 ±    2188.189    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.count                                    thrpt    5         8.000                counts
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.time                                     thrpt    5         9.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala                                             thrpt    5    523889.629 ±   35545.822   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate                              thrpt    5       402.049 ±      27.278  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                         thrpt    5      1208.001 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                     thrpt    5         0.776 ±       6.284  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                thrpt    5         2.362 ±      19.138    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                 thrpt    5       429.474 ±     570.070  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5      1291.661 ±    1743.111    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.count                                   thrpt    5         7.000                counts
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.time                                    thrpt    5        11.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc                                     thrpt    5    560815.287 ±    2702.070   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                      thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                 thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count                           thrpt    5           ≈ 0                counts
[info] ArrayOfJavaEnumsBenchmark.writePlayJson                                                  thrpt    5    289796.780 ±   19510.291   ops/s
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate                                   thrpt    5       798.364 ±      53.150  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm                              thrpt    5      4336.001 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                          thrpt    5         0.075 ±       0.185  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                     thrpt    5         0.408 ±       0.999    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                      thrpt    5       789.876 ±     694.136  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                 thrpt    5      4285.479 ±    3652.884    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.count                                        thrpt    5        12.000                counts
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.time                                         thrpt    5        16.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readCirce                                                 thrpt    5     10490.534 ±     876.829   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate                                  thrpt    5      1341.486 ±     110.857  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                             thrpt    5    201260.425 ±      65.363    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                         thrpt    5         0.062 ±       0.080  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                    thrpt    5         9.375 ±      12.178    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                     thrpt    5      1392.311 ±     552.058  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                thrpt    5    208816.640 ±   76395.666    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.count                                       thrpt    5        21.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.time                                        thrpt    5        20.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala                                          thrpt    5     11343.604 ±     618.794   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                           thrpt    5      1344.795 ±      73.398  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                      thrpt    5    186557.816 ±      64.718    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                  thrpt    5         0.058 ±       0.154  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm             thrpt    5         8.092 ±      21.322    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space              thrpt    5      1335.051 ±      46.592  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm         thrpt    5    185244.388 ±   14322.037    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.count                                thrpt    5        20.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.time                                 thrpt    5        24.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala                                         thrpt    5    144611.926 ±    8133.695   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                          thrpt    5       940.816 ±      53.257  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                     thrpt    5     10240.003 ±       0.001    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                 thrpt    5         0.104 ±       0.080  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm            thrpt    5         1.134 ±       0.886    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space             thrpt    5       993.830 ±      16.519  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm        thrpt    5     10818.441 ±     475.846    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.count                               thrpt    5        15.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.time                                thrpt    5        14.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson                                              thrpt    5      8909.484 ±     486.173   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate                               thrpt    5      1647.305 ±      89.766  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                          thrpt    5    291032.378 ±       2.856    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                      thrpt    5         0.058 ±       0.154  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                 thrpt    5        10.240 ±      26.778    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                  thrpt    5      1678.465 ±      52.988  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm             thrpt    5    296608.207 ±   24653.757    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.count                                    thrpt    5        25.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.time                                     thrpt    5        28.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeCirce                                                thrpt    5     22865.852 ±    2255.333   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate                                 thrpt    5      1042.292 ±     102.447  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                            thrpt    5     71745.556 ±      50.851    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                        thrpt    5         0.054 ±       0.072  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                   thrpt    5         3.752 ±       5.359    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                    thrpt    5      1052.941 ±     592.524  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm               thrpt    5     72406.692 ±   36957.075    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.count                                      thrpt    5        16.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.time                                       thrpt    5        16.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala                                        thrpt    5    715130.232 ±   23133.417   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                         thrpt    5      1290.381 ±      41.594  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                    thrpt    5      2840.001 ±       0.001    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                thrpt    5         0.108 ±       0.191  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm           thrpt    5         0.238 ±       0.424    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space            thrpt    5      1322.117 ±      47.022  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm       thrpt    5      2909.953 ±     115.642    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.count                              thrpt    5        20.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.time                               thrpt    5        19.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc                                thrpt    5    567250.595 ±    3990.475   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                 thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm            thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                      thrpt    5           ≈ 0                counts
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson                                             thrpt    5     24976.194 ±     858.677   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate                              thrpt    5      1054.030 ±      35.832  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                         thrpt    5     66421.813 ±      30.835    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                     thrpt    5         0.050 ±       0.091  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                thrpt    5         3.143 ±       5.696    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                 thrpt    5      1044.687 ±     576.322  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm            thrpt    5     65796.093 ±   34714.619    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.count                                   thrpt    5        16.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.time                                    thrpt    5        15.000                    ms
[info] ArrayOfLocalDatesBenchmark.readCirce                                                     thrpt    5     28276.077 ±     812.586   ops/s
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate                                      thrpt    5      1534.503 ±      43.886  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm                                 thrpt    5     85415.852 ±      53.380    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space                             thrpt    5         0.046 ±       0.036  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                        thrpt    5         2.547 ±       1.933    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                         thrpt    5      1529.438 ±     672.864  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                    thrpt    5     85154.550 ±   38242.243    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.count                                           thrpt    5        23.000                counts
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.time                                            thrpt    5        22.000                    ms
[info] ArrayOfLocalDatesBenchmark.readJacksonScala                                              thrpt    5     30923.498 ±    1897.879   ops/s
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate                               thrpt    5      1412.677 ±      86.710  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm                          thrpt    5     71888.187 ±       1.485    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                      thrpt    5         0.087 ±       0.119  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5         4.432 ±       5.814    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                  thrpt    5      1404.412 ±     582.861  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5     71473.193 ±   29449.290    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count                                    thrpt    5        21.000                counts
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time                                     thrpt    5        25.000                    ms
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala                                             thrpt    5    270584.898 ±    2501.417   ops/s
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate                              thrpt    5       704.218 ±       7.011  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                         thrpt    5      4096.002 ±       0.001    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                     thrpt    5         0.083 ±       0.080  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                thrpt    5         0.485 ±       0.470    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                 thrpt    5       726.980 ±     565.564  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5      4228.441 ±    3290.600    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count                                   thrpt    5        11.000                counts
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time                                    thrpt    5        12.000                    ms
[info] ArrayOfLocalDatesBenchmark.readPlayJson                                                  thrpt    5     17599.635 ±    1322.749   ops/s
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate                                   thrpt    5      1788.641 ±     134.789  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm                              thrpt    5    159960.035 ±       0.084    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                          thrpt    5         0.071 ±       0.091  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                     thrpt    5         6.313 ±       7.831    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                      thrpt    5      1803.184 ±     731.146  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                 thrpt    5    161113.854 ±   56529.441    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count                                        thrpt    5        27.000                counts
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time                                         thrpt    5        30.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeCirce                                                    thrpt    5     52687.999 ±    4138.630   ops/s
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate                                     thrpt    5      1390.292 ±     109.286  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm                                thrpt    5     41528.008 ±       0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                            thrpt    5         0.079 ±       0.143  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                       thrpt    5         2.363 ±       4.266    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                        thrpt    5      1390.906 ±     527.561  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                   thrpt    5     41592.931 ±   17751.042    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.count                                          thrpt    5        21.000                counts
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.time                                           thrpt    5        20.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala                                            thrpt    5   1054392.154 ±   45292.948   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate                             thrpt    5      1130.761 ±      48.394  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                        thrpt    5      1688.000 ±       0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                    thrpt    5         0.104 ±       0.160  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm               thrpt    5         0.155 ±       0.236    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                thrpt    5      1119.952 ±     705.817  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5      1671.792 ±    1049.200    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count                                  thrpt    5        17.000                counts
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time                                   thrpt    5        18.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc                                    thrpt    5    729253.187 ±    7289.838   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                     thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count                          thrpt    5           ≈ 0                counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson                                                 thrpt    5     55054.404 ±    4122.961   ops/s
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate                                  thrpt    5      1352.684 ±     101.703  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm                             thrpt    5     38672.008 ±       0.003    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                         thrpt    5         0.067 ±       0.105  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                    thrpt    5         1.901 ±       2.935    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                     thrpt    5      1382.082 ±     541.059  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                thrpt    5     39489.819 ±   13846.193    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count                                       thrpt    5        21.000                counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time                                        thrpt    5        22.000                    ms
[info] ArrayOfLocalTimesBenchmark.readCirce                                                     thrpt    5     16307.504 ±    1331.812   ops/s
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate                                      thrpt    5      1455.364 ±     118.344  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm                                 thrpt    5    140473.586 ±      52.711    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                             thrpt    5         0.071 ±       0.108  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                        thrpt    5         6.871 ±      10.777    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                         thrpt    5      1461.713 ±     670.738  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                    thrpt    5    141061.589 ±   62803.790    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.count                                           thrpt    5        22.000                counts
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.time                                            thrpt    5        22.000                    ms
[info] ArrayOfLocalTimesBenchmark.readJacksonScala                                              thrpt    5     17624.285 ±     617.590   ops/s
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate                               thrpt    5      1366.721 ±      48.446  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                          thrpt    5    122049.569 ±      61.985    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                      thrpt    5         0.079 ±       0.088  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5         7.075 ±       8.043    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                  thrpt    5      1402.451 ±     583.401  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5    125191.087 ±   49277.481    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count                                    thrpt    5        21.000                counts
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time                                     thrpt    5        25.000                    ms
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala                                             thrpt    5    299163.034 ±   16765.338   ops/s
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate                              thrpt    5       778.509 ±      43.547  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                         thrpt    5      4096.001 ±       0.001    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                     thrpt    5         0.054 ±       0.185  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                thrpt    5         0.286 ±       0.983    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                 thrpt    5       793.565 ±     699.074  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5      4168.579 ±    3515.277    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count                                   thrpt    5        12.000                counts
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time                                    thrpt    5        12.000                    ms
[info] ArrayOfLocalTimesBenchmark.readPlayJson                                                  thrpt    5     12206.090 ±     545.634   ops/s
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate                                   thrpt    5      1669.343 ±      74.456  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                              thrpt    5    215256.410 ±       3.233    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                          thrpt    5         0.062 ±       0.150  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                     thrpt    5         8.026 ±      19.265    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                      thrpt    5      1678.615 ±     881.488  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                 thrpt    5    216227.776 ±  104977.520    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count                                        thrpt    5        25.000                counts
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time                                         thrpt    5        29.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeCirce                                                    thrpt    5     41618.200 ±    1067.603   ops/s
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate                                     thrpt    5      1369.016 ±      34.259  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                thrpt    5     51768.011 ±       0.007    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                            thrpt    5         0.112 ±       0.146  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                       thrpt    5         4.255 ±       5.572    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                        thrpt    5      1390.920 ±     573.884  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                   thrpt    5     52603.901 ±   22009.611    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.count                                          thrpt    5        21.000                counts
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.time                                           thrpt    5        21.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala                                            thrpt    5   1307547.658 ±   43280.303   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                             thrpt    5      1189.597 ±      39.618  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                        thrpt    5      1432.000 ±       0.001    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                    thrpt    5         0.083 ±       0.080  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm               thrpt    5         0.100 ±       0.098    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                thrpt    5      1186.656 ±     676.324  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5      1429.061 ±     831.366    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count                                  thrpt    5        18.000                counts
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time                                   thrpt    5        17.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc                                    thrpt    5   1322010.169 ±   23023.018   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                     thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                          thrpt    5           ≈ 0                counts
[info] ArrayOfLocalTimesBenchmark.writePlayJson                                                 thrpt    5     40159.091 ±    3368.466   ops/s
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate                                  thrpt    5      1214.374 ±     101.156  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                             thrpt    5     47592.211 ±       1.724    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                         thrpt    5         0.092 ±       0.122  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                    thrpt    5         3.596 ±       4.909    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                     thrpt    5      1246.239 ±     584.717  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                thrpt    5     48863.003 ±   23399.942    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.count                                       thrpt    5        19.000                counts
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.time                                        thrpt    5        19.000                    ms
[info] ArrayOfLongsBenchmark.readCirce                                                          thrpt    5    130484.324 ±    2507.595   ops/s
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate                                           thrpt    5      2238.585 ±      44.470  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm                                      thrpt    5     27000.003 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  thrpt    5         0.121 ±       0.132  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             thrpt    5         1.456 ±       1.595    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              thrpt    5      2218.560 ±     667.709  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         thrpt    5     26756.143 ±    7889.923    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.count                                                thrpt    5        33.000                counts
[info] ArrayOfLongsBenchmark.readCirce:·gc.time                                                 thrpt    5        31.000                    ms
[info] ArrayOfLongsBenchmark.readJacksonScala                                                   thrpt    5    255584.783 ±    5648.917   ops/s
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate                                    thrpt    5       561.185 ±      12.556  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm                               thrpt    5      3456.002 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                           thrpt    5         0.062 ±       0.196  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5         0.386 ±       1.218    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                       thrpt    5       588.197 ±     565.099  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5      3622.247 ±    3477.570    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.count                                         thrpt    5         9.000                counts
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.time                                          thrpt    5        11.000                    ms
[info] ArrayOfLongsBenchmark.readJsoniterScala                                                  thrpt    5    492849.501 ±   32686.678   ops/s
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate                                   thrpt    5       621.239 ±      41.088  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              thrpt    5      1984.001 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          thrpt    5         0.075 ±       0.166  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5         0.240 ±       0.535    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      thrpt    5       591.016 ±     565.209  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5      1888.518 ±    1817.889    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.count                                        thrpt    5         9.000                counts
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.time                                         thrpt    5         9.000                    ms
[info] ArrayOfLongsBenchmark.readPlayJson                                                       thrpt    5     68023.609 ±    2119.962   ops/s
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate                                        thrpt    5      2947.707 ±      94.584  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm                                   thrpt    5     68199.276 ±     269.247    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               thrpt    5         0.167 ±       0.113  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          thrpt    5         3.854 ±       2.648    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           thrpt    5      2913.549 ±     741.722  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5     67432.607 ±   18646.908    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.count                                             thrpt    5        43.000                counts
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.time                                              thrpt    5        49.000                    ms
[info] ArrayOfLongsBenchmark.writeCirce                                                         thrpt    5    173315.400 ±    4473.632   ops/s
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate                                          thrpt    5      1491.525 ±      38.135  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm                                     thrpt    5     13544.002 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 thrpt    5         0.104 ±       0.150  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5         0.945 ±       1.362    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             thrpt    5      1459.684 ±     703.447  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5     13251.214 ±    6230.633    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.count                                               thrpt    5        22.000                counts
[info] ArrayOfLongsBenchmark.writeCirce:·gc.time                                                thrpt    5        22.000                    ms
[info] ArrayOfLongsBenchmark.writeJacksonScala                                                  thrpt    5    490682.308 ±   15610.136   ops/s
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate                                   thrpt    5       503.836 ±      16.041  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                              thrpt    5      1616.001 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                          thrpt    5         0.037 ±       0.143  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5         0.121 ±       0.462    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                      thrpt    5       517.407 ±     681.120  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5      1661.534 ±    2209.306    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.count                                        thrpt    5         8.000                counts
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.time                                         thrpt    5        10.000                    ms
[info] ArrayOfLongsBenchmark.writeJsoniterScala                                                 thrpt    5    588336.733 ±   42389.524   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate                                  thrpt    5       460.523 ±      32.938  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                             thrpt    5      1232.001 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                         thrpt    5         0.768 ±       6.348  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5         2.035 ±      16.809    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                     thrpt    5       444.017 ±     623.228  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5      1185.346 ±    1626.641    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count                                       thrpt    5         7.000                counts
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time                                        thrpt    5        10.000                    ms
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc                                         thrpt    5    663031.951 ±   25228.803   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                          thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                     thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count                               thrpt    5           ≈ 0                counts
[info] ArrayOfLongsBenchmark.writePlayJson                                                      thrpt    5     28084.194 ±    1436.100   ops/s
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate                                       thrpt    5      1693.560 ±      86.566  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm                                  thrpt    5     94900.098 ±      26.694    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                              thrpt    5         0.100 ±       0.067  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                         thrpt    5         5.607 ±       3.976    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                          thrpt    5      1725.950 ±     637.820  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5     96732.402 ±   36361.634    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.count                                            thrpt    5        26.000                counts
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.time                                             thrpt    5        28.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readCirce                                                thrpt    5      7970.543 ±     210.421   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate                                 thrpt    5      1227.019 ±      32.685  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                            thrpt    5    242280.053 ±       0.007    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                        thrpt    5         0.062 ±       0.150  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                   thrpt    5        12.348 ±      29.711    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                    thrpt    5      1189.742 ±     689.726  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm               thrpt    5    234956.705 ±  137292.697    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.count                                      thrpt    5        18.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.time                                       thrpt    5        18.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala                                        thrpt    5    101762.386 ±    5913.482   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                         thrpt    5       985.752 ±      57.542  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                    thrpt    5     15248.004 ±       0.001    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                thrpt    5         0.083 ±       0.098  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm           thrpt    5         1.288 ±       1.527    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space            thrpt    5       927.661 ±     575.642  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm       thrpt    5     14327.872 ±    8348.513    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.count                              thrpt    5        14.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.time                               thrpt    5        14.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson                                             thrpt    5      7636.431 ±     220.037   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate                              thrpt    5      1378.888 ±      39.878  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                         thrpt    5    284216.055 ±       0.008    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                     thrpt    5         0.025 ±       0.088  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                thrpt    5         5.128 ±      17.996    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                 thrpt    5      1336.407 ±      44.562  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm            thrpt    5    275482.641 ±   15923.027    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.count                                   thrpt    5        20.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.time                                    thrpt    5        23.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce                                               thrpt    5     18586.000 ±     182.377   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate                                thrpt    5       927.436 ±       8.996  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                           thrpt    5     78535.297 ±      63.290    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                       thrpt    5         0.071 ±       0.251  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                  thrpt    5         6.002 ±      21.306    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                   thrpt    5       918.512 ±     571.978  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm              thrpt    5     77766.232 ±   48113.885    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.count                                     thrpt    5        14.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.time                                      thrpt    5        13.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala                                       thrpt    5    484756.633 ±    6664.325   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                        thrpt    5      1098.889 ±      14.769  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                   thrpt    5      3568.001 ±       0.001    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space               thrpt    5         0.100 ±       0.236  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm          thrpt    5         0.325 ±       0.775    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space           thrpt    5      1119.846 ±     705.152  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm      thrpt    5      3636.508 ±    2302.968    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.count                             thrpt    5        17.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.time                              thrpt    5        16.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc                               thrpt    5    562478.694 ±    2964.225   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm           thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                     thrpt    5           ≈ 0                counts
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson                                            thrpt    5     19511.304 ±    1303.158   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate                             thrpt    5       901.857 ±      72.184  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                        thrpt    5     72755.166 ±    1598.388    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                    thrpt    5         0.046 ±       0.143  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm               thrpt    5         3.666 ±      11.484    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                thrpt    5       845.313 ±     681.935  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm           thrpt    5     68139.895 ±   53566.577    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.count                                  thrpt    5        13.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.time                                   thrpt    5        14.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readCirce                                                    thrpt    5     13570.079 ±     339.440   ops/s
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate                                     thrpt    5      1363.161 ±      34.588  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate.norm                                thrpt    5    158106.046 ±      31.699    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                            thrpt    5         0.079 ±       0.183  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                       thrpt    5         9.189 ±      21.426    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                        thrpt    5      1392.698 ±     594.788  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                   thrpt    5    161474.614 ±   65957.384    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.count                                          thrpt    5        21.000                counts
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.time                                           thrpt    5        20.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala                                             thrpt    5     13718.982 ±    1095.533   ops/s
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate                              thrpt    5      1255.887 ±      99.954  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                         thrpt    5    144075.881 ±      66.024    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                     thrpt    5         0.067 ±       0.088  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                thrpt    5         7.615 ±       9.626    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                 thrpt    5      1200.761 ±     707.251  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5    137802.981 ±   81770.180    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.count                                   thrpt    5        18.000                counts
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.time                                    thrpt    5        21.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala                                            thrpt    5    180848.872 ±    4938.470   ops/s
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate                             thrpt    5      1046.140 ±      28.251  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                        thrpt    5      9104.002 ±       0.001    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                    thrpt    5         0.092 ±       0.134  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm               thrpt    5         0.798 ±       1.179    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                thrpt    5      1061.615 ±     570.742  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5      9239.518 ±    4993.332    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.count                                  thrpt    5        16.000                counts
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.time                                   thrpt    5        14.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeCirce                                                   thrpt    5     28211.544 ±    1596.842   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate                                    thrpt    5      1050.786 ±      59.938  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate.norm                               thrpt    5     58621.085 ±      40.817    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                           thrpt    5         0.062 ±       0.127  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                      thrpt    5         3.477 ±       6.940    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                       thrpt    5      1052.893 ±     578.853  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                  thrpt    5     58729.340 ±   31702.224    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.count                                         thrpt    5        16.000                counts
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.time                                          thrpt    5        15.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala                                           thrpt    5    762166.658 ±   10072.486   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                            thrpt    5      1045.847 ±      13.643  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                       thrpt    5      2160.001 ±       0.001    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                   thrpt    5         0.096 ±       0.108  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm              thrpt    5         0.198 ±       0.222    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space               thrpt    5      1051.811 ±     552.859  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm          thrpt    5      2172.379 ±    1143.751    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.count                                 thrpt    5        16.000                counts
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.time                                  thrpt    5        15.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc                                   thrpt    5    846833.821 ±   49396.672   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                    thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm               thrpt    5        ≈ 10⁻³                  B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                         thrpt    5           ≈ 0                counts
[info] ArrayOfPeriodsBenchmark.readCirce                                                        thrpt    5     27778.357 ±    2053.239   ops/s
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate                                         thrpt    5      1001.677 ±      73.888  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate.norm                                    thrpt    5     56751.899 ±       0.999    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                thrpt    5         0.054 ±       0.156  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5         3.084 ±       9.019    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                            thrpt    5       986.086 ±      19.351  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5     55883.768 ±    3961.890    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.count                                              thrpt    5        15.000                counts
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.time                                               thrpt    5        14.000                    ms
[info] ArrayOfPeriodsBenchmark.readJacksonScala                                                 thrpt    5     27776.863 ±    1530.620   ops/s
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate                                  thrpt    5       761.414 ±      42.001  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate.norm                             thrpt    5     43144.211 ±       1.685    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                         thrpt    5         0.033 ±       0.122  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5         1.896 ±       6.898    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                     thrpt    5       722.876 ±     567.563  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5     40923.033 ±   30901.808    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.count                                       thrpt    5        11.000                counts
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.time                                        thrpt    5        12.000                    ms
[info] ArrayOfPeriodsBenchmark.readJsoniterScala                                                thrpt    5    200205.232 ±   17342.448   ops/s
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate                                 thrpt    5       520.965 ±      45.232  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                            thrpt    5      4096.002 ±       0.001    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5         0.576 ±       4.383  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5         4.616 ±      35.185    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5       528.579 ±     695.082  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5      4147.233 ±    5355.048    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.count                                      thrpt    5         8.000                counts
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.time                                       thrpt    5        10.000                    ms
[info] ArrayOfPeriodsBenchmark.readPlayJson                                                     thrpt    5     22476.434 ±     864.118   ops/s
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate                                      thrpt    5      1406.634 ±      54.199  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate.norm                                 thrpt    5     98480.020 ±       0.008    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                             thrpt    5         0.083 ±       0.150  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                        thrpt    5         5.820 ±      10.484    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                         thrpt    5      1461.774 ±     696.890  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                    thrpt    5    102311.804 ±   47449.148    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.count                                           thrpt    5        22.000                counts
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.time                                            thrpt    5        22.000                    ms
[info] ArrayOfPeriodsBenchmark.writeCirce                                                       thrpt    5     83322.464 ±    3691.905   ops/s
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate                                        thrpt    5      1285.367 ±      56.933  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate.norm                                   thrpt    5     24280.005 ±       0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                               thrpt    5         0.096 ±       0.156  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                          thrpt    5         1.807 ±       2.916    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                           thrpt    5      1256.418 ±     555.968  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                      thrpt    5     23745.256 ±   10907.582    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.count                                             thrpt    5        19.000                counts
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.time                                              thrpt    5        19.000                    ms
[info] ArrayOfPeriodsBenchmark.writeJacksonScala                                                thrpt    5    139423.549 ±   11667.172   ops/s
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate                                 thrpt    5      1179.772 ±      98.696  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                            thrpt    5     13320.003 ±       0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                        thrpt    5         0.079 ±       0.132  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5         0.894 ±       1.483    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                    thrpt    5      1191.340 ±     673.300  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5     13428.739 ±    6798.408    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.count                                      thrpt    5        18.000                counts
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.time                                       thrpt    5        21.000                    ms
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala                                               thrpt    5    413315.680 ±   17461.230   ops/s
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate                                thrpt    5       457.978 ±      19.421  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                           thrpt    5      1744.001 ±       0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5         0.762 ±       6.382  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5         2.887 ±      24.179    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5       444.019 ±     623.246  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5      1692.241 ±    2396.107    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.count                                     thrpt    5         7.000                counts
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.time                                      thrpt    5        11.000                    ms
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc                                       thrpt    5    522281.335 ±  100828.257   ops/s
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                        thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                   thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.count                             thrpt    5           ≈ 0                counts
[info] ArrayOfPeriodsBenchmark.writePlayJson                                                    thrpt    5    106900.133 ±    6582.738   ops/s
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate                                     thrpt    5      1304.073 ±      80.341  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate.norm                                thrpt    5     19200.004 ±       0.001    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                            thrpt    5         0.112 ±       0.231  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                       thrpt    5         1.653 ±       3.364    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                        thrpt    5      1315.067 ±      59.093  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                   thrpt    5     19363.817 ±     852.893    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.count                                          thrpt    5        20.000                counts
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.time                                           thrpt    5        20.000                    ms
[info] ArrayOfShortsBenchmark.readCirce                                                         thrpt    5    157108.572 ±    4056.019   ops/s
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate                                          thrpt    5      2644.716 ±      68.287  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm                                     thrpt    5     26496.003 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                 thrpt    5         0.146 ±       0.150  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5         1.459 ±       1.487    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                             thrpt    5      2633.652 ±     599.934  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5     26388.526 ±    6235.198    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.count                                               thrpt    5        39.000                counts
[info] ArrayOfShortsBenchmark.readCirce:·gc.time                                                thrpt    5        42.000                    ms
[info] ArrayOfShortsBenchmark.readJacksonScala                                                  thrpt    5    375045.854 ±    6644.241   ops/s
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate                                   thrpt    5       383.154 ±       6.830  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm                              thrpt    5      1608.001 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                          thrpt    5         0.025 ±       0.104  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5         0.105 ±       0.440    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                      thrpt    5       376.411 ±     603.139  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5      1578.587 ±    2514.302    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.count                                        thrpt    5         6.000                counts
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.time                                         thrpt    5         7.000                    ms
[info] ArrayOfShortsBenchmark.readJsoniterScala                                                 thrpt    5    926812.334 ±   53222.503   ops/s
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate                                  thrpt    5       320.359 ±      18.426  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                             thrpt    5       544.000 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                         thrpt    5         0.665 ±       5.595  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5         1.123 ±       9.444    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                     thrpt    5       351.068 ±     366.663  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5       598.108 ±     666.692    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.count                                       thrpt    5         6.000                counts
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.time                                        thrpt    5        11.000                    ms
[info] ArrayOfShortsBenchmark.readPlayJson                                                      thrpt    5     76033.359 ±    3428.265   ops/s
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate                                       thrpt    5      3261.806 ±     145.041  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm                                  thrpt    5     67512.006 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                              thrpt    5         0.167 ±       0.080  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                         thrpt    5         3.445 ±       1.580    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                          thrpt    5      3255.321 ±     687.545  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5     67403.271 ±   15989.994    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.count                                            thrpt    5        48.000                counts
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.time                                             thrpt    5        49.000                    ms
[info] ArrayOfShortsBenchmark.writeCirce                                                        thrpt    5    252330.157 ±    2600.753   ops/s
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate                                         thrpt    5      1718.726 ±      16.991  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm                                    thrpt    5     10720.002 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                thrpt    5         0.100 ±       0.183  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5         0.623 ±       1.139    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                            thrpt    5      1731.950 ±     513.141  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5     10803.095 ±    3240.653    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.count                                              thrpt    5        26.000                counts
[info] ArrayOfShortsBenchmark.writeCirce:·gc.time                                               thrpt    5        25.000                    ms
[info] ArrayOfShortsBenchmark.writeJacksonScala                                                 thrpt    5   1001323.506 ±   85827.418   ops/s
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate                                  thrpt    5       656.505 ±      56.223  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                             thrpt    5      1032.000 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                         thrpt    5         0.083 ±       0.150  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5         0.130 ±       0.223    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                     thrpt    5       650.481 ±      20.673  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5      1023.030 ±     110.420    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.count                                       thrpt    5        10.000                counts
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.time                                        thrpt    5        11.000                    ms
[info] ArrayOfShortsBenchmark.writeJsoniterScala                                                thrpt    5   1208646.400 ±  102619.601   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate                                 thrpt    5       497.678 ±      42.125  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                            thrpt    5       648.000 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5         0.770 ±       6.320  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5         0.977 ±       8.000    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5       509.020 ±     651.334  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5       663.177 ±     856.016    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count                                      thrpt    5         8.000                counts
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time                                       thrpt    5        12.000                    ms
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc                                        thrpt    5   1267927.562 ±  316544.962   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                         thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                    thrpt    5        ≈ 10⁻³                  B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count                              thrpt    5           ≈ 0                counts
[info] ArrayOfShortsBenchmark.writePlayJson                                                     thrpt    5     41252.366 ±     915.931   ops/s
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate                                      thrpt    5      2017.634 ±      44.784  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm                                 thrpt    5     76984.182 ±       1.483    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                             thrpt    5         0.112 ±       0.072  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                        thrpt    5         4.291 ±       2.786    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                         thrpt    5      2068.868 ±     486.567  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                    thrpt    5     78933.404 ±   17968.787    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.count                                           thrpt    5        31.000                counts
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.time                                            thrpt    5        31.000                    ms
[info] ArrayOfUUIDsBenchmark.readCirce                                                          thrpt    5     41359.915 ±     622.644   ops/s
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate                                           thrpt    5       825.768 ±      12.412  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm                                      thrpt    5     31424.010 ±       0.002    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  thrpt    5         0.058 ±       0.067  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             thrpt    5         2.220 ±       2.585    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              thrpt    5       786.135 ±     688.033  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         thrpt    5     29934.571 ±   26607.305    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.count                                                thrpt    5        12.000                counts
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.time                                                 thrpt    5        12.000                    ms
[info] ArrayOfUUIDsBenchmark.readJacksonScala                                                   thrpt    5     81428.092 ±    7802.689   ops/s
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate                                    thrpt    5       856.897 ±      82.355  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm                               thrpt    5     16560.005 ±       0.001    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                           thrpt    5         0.025 ±       0.036  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5         0.483 ±       0.693    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                       thrpt    5       858.982 ±     704.011  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5     16544.288 ±   12300.808    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count                                         thrpt    5        13.000                counts
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time                                          thrpt    5        15.000                    ms
[info] ArrayOfUUIDsBenchmark.readJsoniterScala                                                  thrpt    5    239620.395 ±   12949.579   ops/s
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate                                   thrpt    5       779.495 ±      41.907  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              thrpt    5      5120.002 ±       0.001    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          thrpt    5         0.071 ±       0.166  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5         0.466 ±       1.092    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      thrpt    5       789.093 ±     694.837  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5      5190.430 ±    4722.859    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count                                        thrpt    5        12.000                counts
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time                                         thrpt    5        11.000                    ms
[info] ArrayOfUUIDsBenchmark.readPlayJson                                                       thrpt    5     24244.106 ±    2120.031   ops/s
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate                                        thrpt    5      1107.504 ±      96.206  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm                                   thrpt    5     71896.018 ±       0.009    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               thrpt    5         0.062 ±       0.057  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          thrpt    5         4.042 ±       3.468    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           thrpt    5      1057.888 ±     572.480  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5     68875.286 ±   44215.024    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.count                                             thrpt    5        16.000                counts
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.time                                              thrpt    5        18.000                    ms
[info] ArrayOfUUIDsBenchmark.writeCirce                                                         thrpt    5     51615.980 ±     779.995   ops/s
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate                                          thrpt    5      1094.083 ±      16.958  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm                                     thrpt    5     33360.008 ±       0.001    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 thrpt    5         0.067 ±       0.067  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5         2.031 ±       2.052    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             thrpt    5      1117.247 ±     684.928  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5     34080.013 ±   21310.004    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.count                                               thrpt    5        17.000                counts
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.time                                                thrpt    5        17.000                    ms
[info] ArrayOfUUIDsBenchmark.writeJacksonScala                                                  thrpt    5     88044.356 ±    4123.757   ops/s
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate                                   thrpt    5      1205.975 ±      56.815  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                              thrpt    5     21560.005 ±       0.062    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                          thrpt    5         0.087 ±       0.088  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5         1.563 ±       1.555    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                      thrpt    5      1264.957 ±     573.574  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5     22605.588 ±    9917.493    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count                                        thrpt    5        19.000                counts
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time                                         thrpt    5        23.000                    ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala                                                 thrpt    5    246008.816 ±    4700.222   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate                                  thrpt    5       783.965 ±      14.843  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                             thrpt    5      5016.002 ±       0.001    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                         thrpt    5         0.067 ±       0.088  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5         0.426 ±       0.560    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                     thrpt    5       785.453 ±     688.123  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5      5027.321 ±    4443.021    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count                                       thrpt    5        12.000                counts
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time                                        thrpt    5        13.000                    ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc                                         thrpt    5    272329.754 ±   15508.918   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                          thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                     thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count                               thrpt    5           ≈ 0                counts
[info] ArrayOfUUIDsBenchmark.writePlayJson                                                      thrpt    5     72253.958 ±    3120.384   ops/s
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate                                       thrpt    5      1071.686 ±      46.129  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm                                  thrpt    5     23344.000 ±       0.049    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                              thrpt    5         0.079 ±       0.132  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                         thrpt    5         1.719 ±       2.818    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                          thrpt    5      1044.749 ±     546.615  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5     22738.478 ±   11035.492    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.count                                            thrpt    5        16.000                counts
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.time                                             thrpt    5        18.000                    ms
[info] ArrayOfZoneIdsBenchmark.readCirce                                                        thrpt    5     77784.904 ±     949.457   ops/s
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate                                         thrpt    5      1461.705 ±      17.788  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm                                    thrpt    5     29576.005 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                thrpt    5         0.092 ±       0.091  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5         1.853 ±       1.848    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                            thrpt    5      1451.937 ±     681.693  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5     29381.465 ±   13922.826    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.count                                              thrpt    5        22.000                counts
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.time                                               thrpt    5        22.000                    ms
[info] ArrayOfZoneIdsBenchmark.readJacksonScala                                                 thrpt    5     88802.314 ±    2405.668   ops/s
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate                                  thrpt    5      1002.851 ±      26.850  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm                             thrpt    5     17776.005 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                         thrpt    5         0.042 ±       0.196  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5         0.736 ±       3.466    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                     thrpt    5       992.690 ±      33.553  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5     17596.707 ±     806.921    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count                                       thrpt    5        15.000                counts
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time                                        thrpt    5        18.000                    ms
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala                                                thrpt    5    106911.584 ±    4299.250   ops/s
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate                                 thrpt    5      1125.914 ±      45.603  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                            thrpt    5     16576.004 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5         0.062 ±       0.150  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5         0.917 ±       2.171    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5      1117.707 ±     692.549  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5     16476.364 ±   10827.023    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count                                      thrpt    5        17.000                counts
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time                                       thrpt    5        16.000                    ms
[info] ArrayOfZoneIdsBenchmark.readPlayJson                                                     thrpt    5     37567.962 ±    1214.274   ops/s
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate                                      thrpt    5      1818.871 ±      58.807  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm                                 thrpt    5     76200.012 ±       0.004    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                             thrpt    5         0.054 ±       0.122  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                        thrpt    5         2.265 ±       5.090    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                         thrpt    5      1815.369 ±     725.533  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                    thrpt    5     76070.395 ±   31067.025    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count                                           thrpt    5        27.000                counts
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time                                            thrpt    5        32.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeCirce                                                       thrpt    5    114708.377 ±    3913.962   ops/s
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate                                        thrpt    5       789.931 ±      26.780  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm                                   thrpt    5     10840.004 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                               thrpt    5         0.062 ±       0.196  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                          thrpt    5         0.860 ±       2.722    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                           thrpt    5       778.081 ±     688.671  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                      thrpt    5     10691.850 ±    9765.475    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.count                                             thrpt    5        12.000                counts
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.time                                              thrpt    5        12.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala                                                thrpt    5    163980.577 ±    1256.279   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate                                 thrpt    5       243.360 ±       1.858  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                            thrpt    5      2336.003 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                        thrpt    5         0.033 ±       0.209  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5         0.319 ±       2.003    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                    thrpt    5       217.936 ±     482.098  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5      2090.417 ±    4622.485    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count                                      thrpt    5         4.000                counts
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time                                       thrpt    5         5.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala                                               thrpt    5    801695.100 ±   34667.117   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate                                thrpt    5       994.309 ±      42.840  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                           thrpt    5      1952.001 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5         0.092 ±       0.044  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5         0.180 ±       0.086    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5       983.280 ±      24.714  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5      1930.541 ±      96.303    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count                                     thrpt    5        15.000                counts
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time                                      thrpt    5        14.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc                                       thrpt    5    821569.535 ±    6893.011   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                        thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                   thrpt    5        ≈ 10⁻³                  B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count                             thrpt    5           ≈ 0                counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson                                                    thrpt    5    205444.278 ±   11155.454   ops/s
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate                                     thrpt    5       671.426 ±      36.631  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm                                thrpt    5      5144.002 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                            thrpt    5         0.975 ±       7.990  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                       thrpt    5         7.554 ±      61.991    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                        thrpt    5       708.247 ±     558.729  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                   thrpt    5      5433.094 ±    4471.015    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count                                          thrpt    5        11.000                counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time                                           thrpt    5        14.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala                                             thrpt    5    181800.727 ±    8353.996   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate                              thrpt    5       966.520 ±      43.797  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate.norm                         thrpt    5      8368.002 ±       0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                     thrpt    5         0.062 ±       0.098  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                thrpt    5         0.540 ±       0.837    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                 thrpt    5       927.461 ±     562.718  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5      8028.254 ±    4833.605    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.count                                   thrpt    5        14.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.time                                    thrpt    5        16.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala                                            thrpt    5    348190.673 ±   28162.682   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate                             thrpt    5       676.125 ±      54.781  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                        thrpt    5      3056.001 ±       0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                    thrpt    5         0.061 ±       0.261  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm               thrpt    5         0.278 ±       1.204    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                thrpt    5       662.126 ±       3.249  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5      2993.841 ±     255.221    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.count                                  thrpt    5        10.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.time                                   thrpt    5         9.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala                                            thrpt    5    288756.972 ±   16007.058   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate                             thrpt    5       284.723 ±      15.806  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                        thrpt    5      1552.002 ±       0.003    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                    thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm               thrpt    5         0.069 ±       0.396    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                thrpt    5       295.150 ±     138.438  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5      1611.188 ±     834.011    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.count                                  thrpt    5         5.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.time                                   thrpt    5         6.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala                                           thrpt    5   1184127.852 ±   67577.540   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate                            thrpt    5       878.774 ±      49.784  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                       thrpt    5      1168.000 ±       0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                   thrpt    5         0.079 ±       0.105  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm              thrpt    5         0.105 ±       0.143    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space               thrpt    5       852.140 ±     692.732  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm          thrpt    5      1134.819 ±     965.234    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.count                                 thrpt    5        13.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.time                                  thrpt    5        11.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc                                   thrpt    5   1123558.123 ±   20659.026   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                    thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm               thrpt    5        ≈ 10⁻³                  B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.count                         thrpt    5           ≈ 0                counts
[info] ArrayOfZonedDateTimesBenchmark.readCirce                                                 thrpt    5      5076.271 ±     117.527   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate                                  thrpt    5      1001.906 ±      23.069  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                             thrpt    5    310624.083 ±       0.012    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                         thrpt    5         0.050 ±       0.108  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                    thrpt    5        15.468 ±      33.221    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                     thrpt    5       977.060 ±      26.676  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                thrpt    5    302927.607 ±    9716.656    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.count                                       thrpt    5        15.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.time                                        thrpt    5        13.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala                                         thrpt    5     32490.644 ±    1695.740   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                          thrpt    5       552.137 ±      28.862  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                     thrpt    5     26744.013 ±       0.005    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                 thrpt    5         0.864 ±       6.988  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm            thrpt    5        41.346 ±     334.324    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space             thrpt    5       572.918 ±     545.501  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm        thrpt    5     27694.556 ±   25688.089    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.count                               thrpt    5         9.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.time                                thrpt    5        11.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson                                              thrpt    5      4638.223 ±      84.637   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate                               thrpt    5      1177.909 ±      21.616  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                          thrpt    5    399728.089 ±       0.011    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                      thrpt    5         0.029 ±       0.134  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                 thrpt    5         9.865 ±      45.389    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                  thrpt    5      1194.329 ±     676.833  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm             thrpt    5    405231.607 ±  227420.108    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.count                                    thrpt    5        18.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.time                                     thrpt    5        22.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeCirce                                                thrpt    5     14096.799 ±     253.417   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate                                 thrpt    5       884.183 ±      16.285  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                            thrpt    5     98714.931 ±     115.397    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                        thrpt    5         0.079 ±       0.174  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                   thrpt    5         8.831 ±      19.486    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                    thrpt    5       908.193 ±     554.538  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm               thrpt    5    101435.150 ±   62838.909    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.count                                      thrpt    5        14.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.time                                       thrpt    5        15.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala                                        thrpt    5    281975.606 ±   10565.857   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                         thrpt    5       994.732 ±      37.626  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                    thrpt    5      5552.001 ±       0.001    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                thrpt    5         0.087 ±       0.067  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm           thrpt    5         0.489 ±       0.389    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space            thrpt    5       982.532 ±      25.812  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm       thrpt    5      5484.322 ±     249.132    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.count                              thrpt    5        15.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.time                               thrpt    5        16.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc                                thrpt    5    315617.909 ±    3481.679   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                 thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm            thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                      thrpt    5           ≈ 0                counts
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson                                             thrpt    5     15189.494 ±    1189.336   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate                              thrpt    5       849.341 ±      53.323  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                         thrpt    5     88012.707 ±    3442.309    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                     thrpt    5         0.083 ±       0.127  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                thrpt    5         8.625 ±      13.231    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                 thrpt    5       838.295 ±     682.454  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm            thrpt    5     86842.233 ±   70099.710    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.count                                   thrpt    5        13.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.time                                    thrpt    5        14.000                    ms
[info] ArraysBenchmark.readCirce                                                                thrpt    5    927592.369 ±   32131.020   ops/s
[info] ArraysBenchmark.readCirce:·gc.alloc.rate                                                 thrpt    5      3003.497 ±     104.513  MB/sec
[info] ArraysBenchmark.readCirce:·gc.alloc.rate.norm                                            thrpt    5      5096.000 ±       0.001    B/op
[info] ArraysBenchmark.readCirce:·gc.churn.PS_Eden_Space                                        thrpt    5         0.104 ±       0.220  MB/sec
[info] ArraysBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                   thrpt    5         0.176 ±       0.372    B/op
[info] ArraysBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                    thrpt    5      2975.653 ±     548.724  MB/sec
[info] ArraysBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                               thrpt    5      5049.890 ±    1021.155    B/op
[info] ArraysBenchmark.readCirce:·gc.count                                                      thrpt    5        44.000                counts
[info] ArraysBenchmark.readCirce:·gc.time                                                       thrpt    5        40.000                    ms
[info] ArraysBenchmark.readJacksonScala                                                         thrpt    5   1795708.147 ±  106819.934   ops/s
[info] ArraysBenchmark.readJacksonScala:·gc.alloc.rate                                          thrpt    5      1688.494 ±     100.469  MB/sec
[info] ArraysBenchmark.readJacksonScala:·gc.alloc.rate.norm                                     thrpt    5      1480.000 ±       0.001    B/op
[info] ArraysBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                 thrpt    5         0.129 ±       0.132  MB/sec
[info] ArraysBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                            thrpt    5         0.113 ±       0.114    B/op
[info] ArraysBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                             thrpt    5      1742.744 ±    1062.092  MB/sec
[info] ArraysBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                        thrpt    5      1525.610 ±     867.555    B/op
[info] ArraysBenchmark.readJacksonScala:·gc.count                                               thrpt    5        26.000                counts
[info] ArraysBenchmark.readJacksonScala:·gc.time                                                thrpt    5        32.000                    ms
[info] ArraysBenchmark.readJsoniterScala                                                        thrpt    5   9430184.816 ±  664599.352   ops/s
[info] ArraysBenchmark.readJsoniterScala:·gc.alloc.rate                                         thrpt    5      2348.706 ±     167.251  MB/sec
[info] ArraysBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                    thrpt    5       392.000 ±       0.001    B/op
[info] ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                thrpt    5         0.083 ±       0.150  MB/sec
[info] ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                           thrpt    5         0.014 ±       0.026    B/op
[info] ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                            thrpt    5      2361.523 ±      67.000  MB/sec
[info] ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       thrpt    5       394.212 ±      20.126    B/op
[info] ArraysBenchmark.readJsoniterScala:·gc.count                                              thrpt    5        35.000                counts
[info] ArraysBenchmark.readJsoniterScala:·gc.time                                               thrpt    5        31.000                    ms
[info] ArraysBenchmark.readPlayJson                                                             thrpt    5    324361.970 ±    5126.383   ops/s
[info] ArraysBenchmark.readPlayJson:·gc.alloc.rate                                              thrpt    5      1976.598 ±      30.459  MB/sec
[info] ArraysBenchmark.readPlayJson:·gc.alloc.rate.norm                                         thrpt    5      9592.001 ±       0.001    B/op
[info] ArraysBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                     thrpt    5         0.112 ±       0.072  MB/sec
[info] ArraysBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                thrpt    5         0.545 ±       0.349    B/op
[info] ArraysBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                 thrpt    5      2015.531 ±      71.737  MB/sec
[info] ArraysBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                            thrpt    5      9781.175 ±     428.804    B/op
[info] ArraysBenchmark.readPlayJson:·gc.count                                                   thrpt    5        30.000                counts
[info] ArraysBenchmark.readPlayJson:·gc.time                                                    thrpt    5        36.000                    ms
[info] ArraysBenchmark.writeCirce                                                               thrpt    5   1020652.434 ±   68992.556   ops/s
[info] ArraysBenchmark.writeCirce:·gc.alloc.rate                                                thrpt    5      2246.538 ±     152.032  MB/sec
[info] ArraysBenchmark.writeCirce:·gc.alloc.rate.norm                                           thrpt    5      3464.000 ±       0.001    B/op
[info] ArraysBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                       thrpt    5         0.125 ±       0.127  MB/sec
[info] ArraysBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                  thrpt    5         0.193 ±       0.199    B/op
[info] ArraysBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                   thrpt    5      2281.150 ±     551.281  MB/sec
[info] ArraysBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                              thrpt    5      3519.934 ±     994.969    B/op
[info] ArraysBenchmark.writeCirce:·gc.count                                                     thrpt    5        34.000                counts
[info] ArraysBenchmark.writeCirce:·gc.time                                                      thrpt    5        33.000                    ms
[info] ArraysBenchmark.writeJacksonScala                                                        thrpt    5   3604855.649 ±  134064.133   ops/s
[info] ArraysBenchmark.writeJacksonScala:·gc.alloc.rate                                         thrpt    5      2052.279 ±      76.944  MB/sec
[info] ArraysBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                    thrpt    5       896.000 ±       0.001    B/op
[info] ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                thrpt    5         0.117 ±       0.044  MB/sec
[info] ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                           thrpt    5         0.051 ±       0.019    B/op
[info] ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                            thrpt    5      2085.099 ±     564.719  MB/sec
[info] ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                       thrpt    5       910.254 ±     238.432    B/op
[info] ArraysBenchmark.writeJacksonScala:·gc.count                                              thrpt    5        31.000                counts
[info] ArraysBenchmark.writeJacksonScala:·gc.time                                               thrpt    5        37.000                    ms
[info] ArraysBenchmark.writeJsoniterScala                                                       thrpt    5  13365444.554 ± 1216428.705   ops/s
[info] ArraysBenchmark.writeJsoniterScala:·gc.alloc.rate                                        thrpt    5       815.184 ±      74.568  MB/sec
[info] ArraysBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                   thrpt    5        96.000 ±       0.001    B/op
[info] ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                               thrpt    5         0.096 ±       0.156  MB/sec
[info] ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                          thrpt    5         0.011 ±       0.018    B/op
[info] ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                           thrpt    5       785.477 ±     688.275  MB/sec
[info] ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      thrpt    5        92.497 ±      80.459    B/op
[info] ArraysBenchmark.writeJsoniterScala:·gc.count                                             thrpt    5        12.000                counts
[info] ArraysBenchmark.writeJsoniterScala:·gc.time                                              thrpt    5        11.000                    ms
[info] ArraysBenchmark.writePlayJson                                                            thrpt    5    522631.627 ±   16558.526   ops/s
[info] ArraysBenchmark.writePlayJson:·gc.alloc.rate                                             thrpt    5      1806.394 ±      57.582  MB/sec
[info] ArraysBenchmark.writePlayJson:·gc.alloc.rate.norm                                        thrpt    5      5440.001 ±       0.001    B/op
[info] ArraysBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                    thrpt    5         0.092 ±       0.122  MB/sec
[info] ArraysBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                               thrpt    5         0.276 ±       0.372    B/op
[info] ArraysBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                thrpt    5      1809.974 ±     685.107  MB/sec
[info] ArraysBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                           thrpt    5      5453.354 ±    2183.825    B/op
[info] ArraysBenchmark.writePlayJson:·gc.count                                                  thrpt    5        27.000                counts
[info] ArraysBenchmark.writePlayJson:·gc.time                                                   thrpt    5        31.000                    ms
[info] BitSetsBenchmark.readJacksonScala                                                        thrpt    5   2090769.715 ±  170066.321   ops/s
[info] BitSetsBenchmark.readJacksonScala:·gc.alloc.rate                                         thrpt    5      1328.423 ±     108.526  MB/sec
[info] BitSetsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    thrpt    5      1000.000 ±       0.001    B/op
[info] BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                thrpt    5         0.079 ±       0.132  MB/sec
[info] BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           thrpt    5         0.060 ±       0.102    B/op
[info] BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            thrpt    5      1332.579 ±      48.844  MB/sec
[info] BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       thrpt    5      1003.601 ±     110.783    B/op
[info] BitSetsBenchmark.readJacksonScala:·gc.count                                              thrpt    5        20.000                counts
[info] BitSetsBenchmark.readJacksonScala:·gc.time                                               thrpt    5        24.000                    ms
[info] BitSetsBenchmark.readJsoniterScala                                                       thrpt    5   5204020.801 ±  269070.296   ops/s
[info] BitSetsBenchmark.readJsoniterScala:·gc.alloc.rate                                        thrpt    5       687.721 ±      35.748  MB/sec
[info] BitSetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   thrpt    5       208.000 ±       0.001    B/op
[info] BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               thrpt    5         0.067 ±       0.154  MB/sec
[info] BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          thrpt    5         0.020 ±       0.047    B/op
[info] BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           thrpt    5       657.119 ±       5.963  MB/sec
[info] BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      thrpt    5       198.777 ±      11.770    B/op
[info] BitSetsBenchmark.readJsoniterScala:·gc.count                                             thrpt    5        10.000                counts
[info] BitSetsBenchmark.readJsoniterScala:·gc.time                                              thrpt    5         9.000                    ms
[info] BitSetsBenchmark.readPlayJson                                                            thrpt    5    395365.770 ±   15535.876   ops/s
[info] BitSetsBenchmark.readPlayJson:·gc.alloc.rate                                             thrpt    5      1794.518 ±      71.898  MB/sec
[info] BitSetsBenchmark.readPlayJson:·gc.alloc.rate.norm                                        thrpt    5      7144.001 ±       0.001    B/op
[info] BitSetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    thrpt    5         0.104 ±       0.098  MB/sec
[info] BitSetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               thrpt    5         0.414 ±       0.375    B/op
[info] BitSetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                thrpt    5      1744.177 ±     587.431  MB/sec
[info] BitSetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           thrpt    5      6945.158 ±    2412.611    B/op
[info] BitSetsBenchmark.readPlayJson:·gc.count                                                  thrpt    5        26.000                counts
[info] BitSetsBenchmark.readPlayJson:·gc.time                                                   thrpt    5        32.000                    ms
[info] BitSetsBenchmark.writeJacksonScala                                                       thrpt    5   2653016.671 ±   90623.909   ops/s
[info] BitSetsBenchmark.writeJacksonScala:·gc.alloc.rate                                        thrpt    5      1402.284 ±      48.010  MB/sec
[info] BitSetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   thrpt    5       832.000 ±       0.001    B/op
[info] BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               thrpt    5         0.117 ±       0.166  MB/sec
[info] BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          thrpt    5         0.069 ±       0.099    B/op
[info] BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           thrpt    5      1400.773 ±     597.408  MB/sec
[info] BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      thrpt    5       830.985 ±     346.818    B/op
[info] BitSetsBenchmark.writeJacksonScala:·gc.count                                             thrpt    5        21.000                counts
[info] BitSetsBenchmark.writeJacksonScala:·gc.time                                              thrpt    5        25.000                    ms
[info] BitSetsBenchmark.writeJsoniterScala                                                      thrpt    5   6870532.824 ±  414092.401   ops/s
[info] BitSetsBenchmark.writeJsoniterScala:·gc.alloc.rate                                       thrpt    5      1047.677 ±      63.069  MB/sec
[info] BitSetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  thrpt    5       240.000 ±       0.001    B/op
[info] BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              thrpt    5         0.075 ±       0.122  MB/sec
[info] BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         thrpt    5         0.017 ±       0.027    B/op
[info] BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          thrpt    5      1051.798 ±     551.954  MB/sec
[info] BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     thrpt    5       240.817 ±     119.981    B/op
[info] BitSetsBenchmark.writeJsoniterScala:·gc.count                                            thrpt    5        16.000                counts
[info] BitSetsBenchmark.writeJsoniterScala:·gc.time                                             thrpt    5        14.000                    ms
[info] BitSetsBenchmark.writePlayJson                                                           thrpt    5    736926.772 ±   11389.166   ops/s
[info] BitSetsBenchmark.writePlayJson:·gc.alloc.rate                                            thrpt    5      2142.403 ±      33.640  MB/sec
[info] BitSetsBenchmark.writePlayJson:·gc.alloc.rate.norm                                       thrpt    5      4576.001 ±       0.001    B/op
[info] BitSetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   thrpt    5         0.092 ±       0.122  MB/sec
[info] BitSetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              thrpt    5         0.196 ±       0.259    B/op
[info] BitSetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               thrpt    5      2154.976 ±     688.434  MB/sec
[info] BitSetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          thrpt    5      4603.410 ±    1501.772    B/op
[info] BitSetsBenchmark.writePlayJson:·gc.count                                                 thrpt    5        32.000                counts
[info] BitSetsBenchmark.writePlayJson:·gc.time                                                  thrpt    5        36.000                    ms
[info] ExtractFieldsBenchmark.readCirce                                                         thrpt    5    798583.723 ±   37974.401   ops/s
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate                                          thrpt    5      2597.740 ±     123.355  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm                                     thrpt    5      5120.001 ±       0.001    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                 thrpt    5         0.108 ±       0.229  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5         0.214 ±       0.459    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                             thrpt    5      2627.992 ±     551.887  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5      5179.264 ±    1033.137    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.count                                               thrpt    5        39.000                counts
[info] ExtractFieldsBenchmark.readCirce:·gc.time                                                thrpt    5        36.000                    ms
[info] ExtractFieldsBenchmark.readJacksonScala                                                  thrpt    5    999531.070 ±   10416.216   ops/s
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate                                   thrpt    5      1239.578 ±      12.547  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm                              thrpt    5      1952.000 ±       0.001    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                          thrpt    5         0.108 ±       0.088  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5         0.171 ±       0.140    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                      thrpt    5      1261.438 ±     558.366  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5      1986.755 ±     890.807    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.count                                        thrpt    5        19.000                counts
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.time                                         thrpt    5        22.000                    ms
[info] ExtractFieldsBenchmark.readJsoniterScala                                                 thrpt    5   8198647.188 ±  416179.379   ops/s
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate                                  thrpt    5       375.062 ±      18.917  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                             thrpt    5        72.000 ±       0.001    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                         thrpt    5         0.640 ±       5.441  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5         0.124 ±       1.059    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                     thrpt    5       367.452 ±     656.284  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5        70.687 ±     128.934    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.count                                       thrpt    5         6.000                counts
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.time                                        thrpt    5         9.000                    ms
[info] ExtractFieldsBenchmark.readPlayJson                                                      thrpt    5    328603.082 ±   17283.659   ops/s
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate                                       thrpt    5      1803.634 ±      94.948  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm                                  thrpt    5      8640.001 ±       0.001    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                              thrpt    5         0.117 ±       0.184  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                         thrpt    5         0.558 ±       0.881    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                          thrpt    5      1808.097 ±     666.870  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5      8660.809 ±    3121.784    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.count                                            thrpt    5        27.000                counts
[info] ExtractFieldsBenchmark.readPlayJson:·gc.time                                             thrpt    5        31.000                    ms
[info] GoogleMapsAPIBenchmark.readCirce                                                         thrpt    5      7542.973 ±     240.251   ops/s
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate                                          thrpt    5      1815.210 ±      57.783  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm                                     thrpt    5    378792.056 ±       0.008    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space                                 thrpt    5         0.040 ±       0.104  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5         8.372 ±      21.762    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space                             thrpt    5      1799.661 ±     713.355  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5    375674.711 ±  154410.990    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.count                                               thrpt    5        27.000                counts
[info] GoogleMapsAPIBenchmark.readCirce:·gc.time                                                thrpt    5        28.000                    ms
[info] GoogleMapsAPIBenchmark.readJacksonScala                                                  thrpt    5     14068.303 ±    1713.136   ops/s
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate                                   thrpt    5       356.421 ±      43.381  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                              thrpt    5     39872.031 ±       0.014    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                          thrpt    5         0.104 ±       0.634  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5        11.349 ±      67.939    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                      thrpt    5       361.037 ±     323.829  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5     40494.133 ±   38449.698    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.count                                        thrpt    5         6.000                counts
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.time                                         thrpt    5         8.000                    ms
[info] GoogleMapsAPIBenchmark.readJsoniterScala                                                 thrpt    5     23698.410 ±     437.604   ops/s
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                  thrpt    5       404.996 ±       7.649  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                             thrpt    5     26896.019 ±       0.007    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                         thrpt    5         0.689 ±       5.701  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5        46.013 ±     380.685    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                     thrpt    5       430.868 ±     571.376  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5     28606.340 ±   37743.270    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count                                       thrpt    5         7.000                counts
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time                                        thrpt    5        11.000                    ms
[info] GoogleMapsAPIBenchmark.readPlayJson                                                      thrpt    5      2389.094 ±      79.542   ops/s
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate                                       thrpt    5      1492.174 ±      49.459  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                  thrpt    5    982977.371 ±      10.300    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                              thrpt    5         0.021 ±       0.080  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                         thrpt    5        13.716 ±      52.664    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                          thrpt    5      1467.849 ±     710.249  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5    967222.476 ±  477015.931    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.count                                            thrpt    5        22.000                counts
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.time                                             thrpt    5        27.000                    ms
[info] GoogleMapsAPIBenchmark.writeCirce                                                        thrpt    5      7675.575 ±     189.730   ops/s
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate                                         thrpt    5      1651.069 ±      40.925  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm                                    thrpt    5    338568.054 ±       0.009    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                thrpt    5         0.114 ±       0.254  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5        23.316 ±      52.294    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                            thrpt    5      1661.746 ±      75.396  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5    340765.096 ±   16215.394    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.count                                              thrpt    5        25.000                counts
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.time                                               thrpt    5        25.000                    ms
[info] GoogleMapsAPIBenchmark.writeJacksonScala                                                 thrpt    5     40796.763 ±    1146.676   ops/s
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                  thrpt    5       591.145 ±      16.391  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                             thrpt    5     22807.854 ±       0.283    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                         thrpt    5         0.158 ±       1.008  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5         6.071 ±      38.558    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                     thrpt    5       651.670 ±      19.058  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5     25144.566 ±    1199.153    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count                                       thrpt    5        10.000                counts
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time                                        thrpt    5        13.000                    ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScala                                                thrpt    5     71279.022 ±    2342.925   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                 thrpt    5       537.363 ±      17.715  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                            thrpt    5     11864.006 ±       0.001    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5         0.806 ±       6.454  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5        17.782 ±     142.228    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5       522.419 ±     687.034  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5     11542.364 ±   15270.044    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count                                      thrpt    5         8.000                counts
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time                                       thrpt    5        10.000                    ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc                                        thrpt    5     77085.146 ±     362.391   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                         thrpt    5         1.176 ±       0.006  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                    thrpt    5        24.005 ±       0.001    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                              thrpt    5           ≈ 0                counts
[info] GoogleMapsAPIBenchmark.writePlayJson                                                     thrpt    5      5360.857 ±     199.023   ops/s
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate                                      thrpt    5      1658.475 ±      61.939  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm                                 thrpt    5    486903.926 ±       2.578    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                             thrpt    5         0.029 ±       0.091  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                        thrpt    5         8.529 ±      26.612    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                         thrpt    5      1672.574 ±      61.478  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                    thrpt    5    491090.710 ±   29087.987    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.count                                           thrpt    5        25.000                counts
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.time                                            thrpt    5        30.000                    ms
[info] IntAndLongMapsBenchmark.readJsoniterScala                                                thrpt    5   5650861.761 ±  167330.306   ops/s
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.alloc.rate                                 thrpt    5      1694.619 ±      49.436  MB/sec
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                            thrpt    5       472.000 ±       0.001    B/op
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5         0.092 ±       0.146  MB/sec
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5         0.026 ±       0.041    B/op
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5      1736.592 ±     521.923  MB/sec
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5       483.638 ±     140.974    B/op
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.count                                      thrpt    5        26.000                counts
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.time                                       thrpt    5        22.000                    ms
[info] IntAndLongMapsBenchmark.readPlayJson                                                     thrpt    5    350340.430 ±   20069.021   ops/s
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.alloc.rate                                      thrpt    5      1889.161 ±     108.631  MB/sec
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.alloc.rate.norm                                 thrpt    5      8488.001 ±       0.001    B/op
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                             thrpt    5         0.112 ±       0.166  MB/sec
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                        thrpt    5         0.507 ±       0.760    B/op
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                         thrpt    5      1947.751 ±     574.760  MB/sec
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                    thrpt    5      8760.263 ±    3013.718    B/op
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.count                                           thrpt    5        29.000                counts
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.time                                            thrpt    5        37.000                    ms
[info] IntAndLongMapsBenchmark.writeJsoniterScala                                               thrpt    5   3380985.309 ±   80411.209   ops/s
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.alloc.rate                                thrpt    5       550.040 ±      12.918  MB/sec
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                           thrpt    5       256.000 ±       0.001    B/op
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5         0.795 ±       6.353  MB/sec
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5         0.369 ±       2.945    B/op
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5       522.743 ±     687.497  MB/sec
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5       243.216 ±     318.977    B/op
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.count                                     thrpt    5         8.000                counts
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.time                                      thrpt    5        10.000                    ms
[info] IntAndLongMapsBenchmark.writePlayJson                                                    thrpt    5    327264.314 ±    5791.344   ops/s
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.alloc.rate                                     thrpt    5      1272.385 ±      22.583  MB/sec
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.alloc.rate.norm                                thrpt    5      6120.001 ±       0.001    B/op
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                            thrpt    5         0.083 ±       0.204  MB/sec
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                       thrpt    5         0.401 ±       0.984    B/op
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                        thrpt    5      1262.684 ±     603.040  MB/sec
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                   thrpt    5      6072.875 ±    2884.652    B/op
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.count                                          thrpt    5        19.000                counts
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.time                                           thrpt    5        22.000                    ms
[info] IterablesBenchmark.readCirce                                                             thrpt    5    617647.335 ±   37941.138   ops/s
[info] IterablesBenchmark.readCirce:·gc.alloc.rate                                              thrpt    5      2231.857 ±     136.848  MB/sec
[info] IterablesBenchmark.readCirce:·gc.alloc.rate.norm                                         thrpt    5      5688.001 ±       0.001    B/op
[info] IterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                     thrpt    5         0.121 ±       0.143  MB/sec
[info] IterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                thrpt    5         0.308 ±       0.368    B/op
[info] IterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                 thrpt    5      2218.021 ±     740.419  MB/sec
[info] IterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                            thrpt    5      5656.804 ±    2072.638    B/op
[info] IterablesBenchmark.readCirce:·gc.count                                                   thrpt    5        33.000                counts
[info] IterablesBenchmark.readCirce:·gc.time                                                    thrpt    5        30.000                    ms
[info] IterablesBenchmark.readJacksonScala                                                      thrpt    5    627166.360 ±   16878.702   ops/s
[info] IterablesBenchmark.readJacksonScala:·gc.alloc.rate                                       thrpt    5       729.986 ±      19.797  MB/sec
[info] IterablesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                  thrpt    5      1832.001 ±       0.001    B/op
[info] IterablesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                              thrpt    5         0.037 ±       0.215  MB/sec
[info] IterablesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                         thrpt    5         0.094 ±       0.540    B/op
[info] IterablesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                          thrpt    5       719.402 ±     554.863  MB/sec
[info] IterablesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                     thrpt    5      1805.383 ±    1389.623    B/op
[info] IterablesBenchmark.readJacksonScala:·gc.count                                            thrpt    5        11.000                counts
[info] IterablesBenchmark.readJacksonScala:·gc.time                                             thrpt    5        14.000                    ms
[info] IterablesBenchmark.readJsoniterScala                                                     thrpt    5   3814682.040 ±  124365.405   ops/s
[info] IterablesBenchmark.readJsoniterScala:·gc.alloc.rate                                      thrpt    5      1512.507 ±      50.104  MB/sec
[info] IterablesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                 thrpt    5       624.000 ±       0.001    B/op
[info] IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                             thrpt    5         0.117 ±       0.166  MB/sec
[info] IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                        thrpt    5         0.048 ±       0.070    B/op
[info] IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                         thrpt    5      1532.646 ±     703.548  MB/sec
[info] IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    thrpt    5       632.137 ±     283.134    B/op
[info] IterablesBenchmark.readJsoniterScala:·gc.count                                           thrpt    5        23.000                counts
[info] IterablesBenchmark.readJsoniterScala:·gc.time                                            thrpt    5        20.000                    ms
[info] IterablesBenchmark.readPlayJson                                                          thrpt    5    238880.274 ±   10841.947   ops/s
[info] IterablesBenchmark.readPlayJson:·gc.alloc.rate                                           thrpt    5      1656.324 ±      75.298  MB/sec
[info] IterablesBenchmark.readPlayJson:·gc.alloc.rate.norm                                      thrpt    5     10912.002 ±       0.001    B/op
[info] IterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                  thrpt    5         0.079 ±       0.119  MB/sec
[info] IterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                             thrpt    5         0.522 ±       0.791    B/op
[info] IterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                              thrpt    5      1672.774 ±      64.800  MB/sec
[info] IterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                         thrpt    5     11022.395 ±     869.236    B/op
[info] IterablesBenchmark.readPlayJson:·gc.count                                                thrpt    5        25.000                counts
[info] IterablesBenchmark.readPlayJson:·gc.time                                                 thrpt    5        32.000                    ms
[info] IterablesBenchmark.writeCirce                                                            thrpt    5    860927.939 ±   69418.998   ops/s
[info] IterablesBenchmark.writeCirce:·gc.alloc.rate                                             thrpt    5      1977.873 ±     159.768  MB/sec
[info] IterablesBenchmark.writeCirce:·gc.alloc.rate.norm                                        thrpt    5      3616.000 ±       0.001    B/op
[info] IterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                    thrpt    5         0.108 ±       0.143  MB/sec
[info] IterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                               thrpt    5         0.198 ±       0.255    B/op
[info] IterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                thrpt    5      1939.214 ±     637.635  MB/sec
[info] IterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                           thrpt    5      3541.422 ±     908.003    B/op
[info] IterablesBenchmark.writeCirce:·gc.count                                                  thrpt    5        29.000                counts
[info] IterablesBenchmark.writeCirce:·gc.time                                                   thrpt    5        27.000                    ms
[info] IterablesBenchmark.writeJacksonScala                                                     thrpt    5   1528651.573 ±   40710.681   ops/s
[info] IterablesBenchmark.writeJacksonScala:·gc.alloc.rate                                      thrpt    5      1033.466 ±      26.857  MB/sec
[info] IterablesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                 thrpt    5      1064.000 ±       0.001    B/op
[info] IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                             thrpt    5         0.121 ±       0.132  MB/sec
[info] IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                        thrpt    5         0.124 ±       0.137    B/op
[info] IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                         thrpt    5      1055.541 ±     585.052  MB/sec
[info] IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                    thrpt    5      1087.072 ±     614.605    B/op
[info] IterablesBenchmark.writeJacksonScala:·gc.count                                           thrpt    5        16.000                counts
[info] IterablesBenchmark.writeJacksonScala:·gc.time                                            thrpt    5        19.000                    ms
[info] IterablesBenchmark.writeJsoniterScala                                                    thrpt    5   6758218.198 ±  315949.308   ops/s
[info] IterablesBenchmark.writeJsoniterScala:·gc.alloc.rate                                     thrpt    5       755.687 ±      35.281  MB/sec
[info] IterablesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                thrpt    5       176.000 ±       0.001    B/op
[info] IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                            thrpt    5         0.075 ±       0.072  MB/sec
[info] IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                       thrpt    5         0.017 ±       0.016    B/op
[info] IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                        thrpt    5       784.880 ±     690.049  MB/sec
[info] IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   thrpt    5       182.572 ±     155.275    B/op
[info] IterablesBenchmark.writeJsoniterScala:·gc.count                                          thrpt    5        12.000                counts
[info] IterablesBenchmark.writeJsoniterScala:·gc.time                                           thrpt    5        11.000                    ms
[info] IterablesBenchmark.writePlayJson                                                         thrpt    5    546557.404 ±   15376.789   ops/s
[info] IterablesBenchmark.writePlayJson:·gc.alloc.rate                                          thrpt    5      1886.245 ±      53.375  MB/sec
[info] IterablesBenchmark.writePlayJson:·gc.alloc.rate.norm                                     thrpt    5      5432.001 ±       0.001    B/op
[info] IterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                 thrpt    5         0.112 ±       0.134  MB/sec
[info] IterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                            thrpt    5         0.323 ±       0.382    B/op
[info] IterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                             thrpt    5      1879.713 ±     674.789  MB/sec
[info] IterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                        thrpt    5      5411.598 ±    1855.815    B/op
[info] IterablesBenchmark.writePlayJson:·gc.count                                               thrpt    5        28.000                counts
[info] IterablesBenchmark.writePlayJson:·gc.time                                                thrpt    5        32.000                    ms
[info] MapsBenchmark.readCirce                                                                  thrpt    5    645500.720 ±   19095.158   ops/s
[info] MapsBenchmark.readCirce:·gc.alloc.rate                                                   thrpt    5      2244.236 ±      66.521  MB/sec
[info] MapsBenchmark.readCirce:·gc.alloc.rate.norm                                              thrpt    5      5472.001 ±       0.001    B/op
[info] MapsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                          thrpt    5         0.087 ±       0.104  MB/sec
[info] MapsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                     thrpt    5         0.213 ±       0.251    B/op
[info] MapsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                      thrpt    5      2283.579 ±     573.893  MB/sec
[info] MapsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                 thrpt    5      5569.096 ±    1470.244    B/op
[info] MapsBenchmark.readCirce:·gc.count                                                        thrpt    5        34.000                counts
[info] MapsBenchmark.readCirce:·gc.time                                                         thrpt    5        31.000                    ms
[info] MapsBenchmark.readJsoniterScala                                                          thrpt    5   4984684.443 ±  252540.293   ops/s
[info] MapsBenchmark.readJsoniterScala:·gc.alloc.rate                                           thrpt    5      1241.635 ±      63.231  MB/sec
[info] MapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      thrpt    5       392.000 ±       0.001    B/op
[info] MapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  thrpt    5         0.083 ±       0.188  MB/sec
[info] MapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             thrpt    5         0.026 ±       0.059    B/op
[info] MapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                              thrpt    5      1259.589 ±     572.748  MB/sec
[info] MapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         thrpt    5       397.909 ±     188.251    B/op
[info] MapsBenchmark.readJsoniterScala:·gc.count                                                thrpt    5        19.000                counts
[info] MapsBenchmark.readJsoniterScala:·gc.time                                                 thrpt    5        16.000                    ms
[info] MapsBenchmark.readPlayJson                                                               thrpt    5    359215.255 ±    9173.663   ops/s
[info] MapsBenchmark.readPlayJson:·gc.alloc.rate                                                thrpt    5      1868.051 ±      47.646  MB/sec
[info] MapsBenchmark.readPlayJson:·gc.alloc.rate.norm                                           thrpt    5      8184.001 ±       0.001    B/op
[info] MapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       thrpt    5         0.117 ±       0.185  MB/sec
[info] MapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  thrpt    5         0.511 ±       0.806    B/op
[info] MapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   thrpt    5      1880.352 ±     704.962  MB/sec
[info] MapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              thrpt    5      8239.650 ±    3161.904    B/op
[info] MapsBenchmark.readPlayJson:·gc.count                                                     thrpt    5        28.000                counts
[info] MapsBenchmark.readPlayJson:·gc.time                                                      thrpt    5        33.000                    ms
[info] MapsBenchmark.writeCirce                                                                 thrpt    5    457852.553 ±   16463.433   ops/s
[info] MapsBenchmark.writeCirce:·gc.alloc.rate                                                  thrpt    5      1184.729 ±      42.629  MB/sec
[info] MapsBenchmark.writeCirce:·gc.alloc.rate.norm                                             thrpt    5      4072.001 ±       0.001    B/op
[info] MapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                         thrpt    5         0.046 ±       0.154  MB/sec
[info] MapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                    thrpt    5         0.158 ±       0.533    B/op
[info] MapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                     thrpt    5      1183.217 ±     685.251  MB/sec
[info] MapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                thrpt    5      4067.314 ±    2369.597    B/op
[info] MapsBenchmark.writeCirce:·gc.count                                                       thrpt    5        18.000                counts
[info] MapsBenchmark.writeCirce:·gc.time                                                        thrpt    5        18.000                    ms
[info] MapsBenchmark.writeJsoniterScala                                                         thrpt    5   3373880.681 ±  236053.501   ops/s
[info] MapsBenchmark.writeJsoniterScala:·gc.alloc.rate                                          thrpt    5       617.380 ±      43.471  MB/sec
[info] MapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                     thrpt    5       288.000 ±       0.001    B/op
[info] MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                 thrpt    5         0.797 ±       6.280  MB/sec
[info] MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                            thrpt    5         0.369 ±       2.900    B/op
[info] MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                             thrpt    5       653.749 ±       6.963  MB/sec
[info] MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        thrpt    5       305.044 ±      20.890    B/op
[info] MapsBenchmark.writeJsoniterScala:·gc.count                                               thrpt    5        10.000                counts
[info] MapsBenchmark.writeJsoniterScala:·gc.time                                                thrpt    5        11.000                    ms
[info] MapsBenchmark.writePlayJson                                                              thrpt    5    322855.098 ±   12827.739   ops/s
[info] MapsBenchmark.writePlayJson:·gc.alloc.rate                                               thrpt    5      1179.881 ±      47.320  MB/sec
[info] MapsBenchmark.writePlayJson:·gc.alloc.rate.norm                                          thrpt    5      5752.001 ±       0.001    B/op
[info] MapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                      thrpt    5         0.067 ±       0.067  MB/sec
[info] MapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                 thrpt    5         0.325 ±       0.333    B/op
[info] MapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                  thrpt    5      1193.966 ±     699.806  MB/sec
[info] MapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                             thrpt    5      5825.114 ±    3534.711    B/op
[info] MapsBenchmark.writePlayJson:·gc.count                                                    thrpt    5        18.000                counts
[info] MapsBenchmark.writePlayJson:·gc.time                                                     thrpt    5        21.000                    ms
[info] MissingReqFieldBenchmark.readCirce                                                       thrpt    5   2067514.449 ±   78735.570   ops/s
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate                                        thrpt    5      2994.979 ±     114.797  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm                                   thrpt    5      2280.000 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space                               thrpt    5         0.104 ±       0.139  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                          thrpt    5         0.079 ±       0.106    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space                           thrpt    5      2973.911 ±     558.023  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                      thrpt    5      2263.523 ±     373.566    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.count                                             thrpt    5        44.000                counts
[info] MissingReqFieldBenchmark.readCirce:·gc.time                                              thrpt    5        41.000                    ms
[info] MissingReqFieldBenchmark.readJacksonScala                                                thrpt    5    277483.228 ±   10174.661   ops/s
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate                                 thrpt    5       499.305 ±      18.149  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm                            thrpt    5      2832.001 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                        thrpt    5         0.062 ±       0.316  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5         0.354 ±       1.787    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                    thrpt    5       441.251 ±     739.089  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5      2505.785 ±    4222.664    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.count                                      thrpt    5         7.000                counts
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.time                                       thrpt    5         9.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterScala                                               thrpt    5    670184.835 ±   39448.393   ops/s
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate                                thrpt    5       425.909 ±      25.116  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm                           thrpt    5      1000.001 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5         0.662 ±       5.612  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5         1.584 ±      13.430    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5       382.162 ±     619.706  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5       900.924 ±    1513.139    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.count                                     thrpt    5         6.000                counts
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.time                                      thrpt    5         9.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterStackless                                           thrpt    5   3704360.514 ±  236217.171   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate                            thrpt    5      1204.962 ±      76.762  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm                       thrpt    5       512.000 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space                   thrpt    5         0.071 ±       0.044  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space.norm              thrpt    5         0.030 ±       0.020    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space               thrpt    5      1262.229 ±     575.275  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space.norm          thrpt    5       535.767 ±     222.170    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.count                                 thrpt    5        19.000                counts
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.time                                  thrpt    5        19.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump                                     thrpt    5   6556629.763 ±  496518.442   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate                      thrpt    5       566.602 ±      43.124  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm                 thrpt    5       136.000 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space             thrpt    5         0.676 ±       5.331  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space.norm        thrpt    5         0.164 ±       1.297    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space         thrpt    5       594.848 ±     569.428  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space.norm    thrpt    5       142.567 ±     133.872    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count                           thrpt    5         9.000                counts
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time                            thrpt    5         9.000                    ms
[info] MissingReqFieldBenchmark.readPlayJson                                                    thrpt    5    205294.326 ±    5218.069   ops/s
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate                                     thrpt    5      1306.354 ±      33.713  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm                                thrpt    5     10016.002 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                            thrpt    5         0.071 ±       0.072  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                       thrpt    5         0.542 ±       0.546    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                        thrpt    5      1328.296 ±      52.959  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                   thrpt    5     10184.486 ±     435.474    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.count                                          thrpt    5        20.000                counts
[info] MissingReqFieldBenchmark.readPlayJson:·gc.time                                           thrpt    5        23.000                    ms
[info] MutableIterablesBenchmark.readCirce                                                      thrpt    5    711243.187 ±   50204.666   ops/s
[info] MutableIterablesBenchmark.readCirce:·gc.alloc.rate                                       thrpt    5      2718.494 ±     192.047  MB/sec
[info] MutableIterablesBenchmark.readCirce:·gc.alloc.rate.norm                                  thrpt    5      6016.001 ±       0.001    B/op
[info] MutableIterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space                              thrpt    5         0.104 ±       0.160  MB/sec
[info] MutableIterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                         thrpt    5         0.230 ±       0.352    B/op
[info] MutableIterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                          thrpt    5      2701.257 ±      78.930  MB/sec
[info] MutableIterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                     thrpt    5      5979.889 ±     548.858    B/op
[info] MutableIterablesBenchmark.readCirce:·gc.count                                            thrpt    5        40.000                counts
[info] MutableIterablesBenchmark.readCirce:·gc.time                                             thrpt    5        36.000                    ms
[info] MutableIterablesBenchmark.readJsoniterScala                                              thrpt    5   3784789.362 ±  155565.301   ops/s
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.alloc.rate                               thrpt    5      2443.062 ±     101.773  MB/sec
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                          thrpt    5      1016.000 ±       0.001    B/op
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                      thrpt    5         0.112 ±       0.091  MB/sec
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5         0.047 ±       0.037    B/op
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                  thrpt    5      2428.074 ±     519.130  MB/sec
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5      1009.480 ±     182.091    B/op
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.count                                    thrpt    5        36.000                counts
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.time                                     thrpt    5        32.000                    ms
[info] MutableIterablesBenchmark.readPlayJson                                                   thrpt    5    260395.204 ±    7422.315   ops/s
[info] MutableIterablesBenchmark.readPlayJson:·gc.alloc.rate                                    thrpt    5      1862.032 ±      52.828  MB/sec
[info] MutableIterablesBenchmark.readPlayJson:·gc.alloc.rate.norm                               thrpt    5     11256.002 ±       0.001    B/op
[info] MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                           thrpt    5         0.104 ±       0.080  MB/sec
[info] MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                      thrpt    5         0.629 ±       0.489    B/op
[info] MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                       thrpt    5      1877.580 ±     705.741  MB/sec
[info] MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                  thrpt    5     11351.256 ±    4310.614    B/op
[info] MutableIterablesBenchmark.readPlayJson:·gc.count                                         thrpt    5        28.000                counts
[info] MutableIterablesBenchmark.readPlayJson:·gc.time                                          thrpt    5        32.000                    ms
[info] MutableIterablesBenchmark.writeCirce                                                     thrpt    5    821121.055 ±   19858.178   ops/s
[info] MutableIterablesBenchmark.writeCirce:·gc.alloc.rate                                      thrpt    5      1802.951 ±      43.583  MB/sec
[info] MutableIterablesBenchmark.writeCirce:·gc.alloc.rate.norm                                 thrpt    5      3456.001 ±       0.001    B/op
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                             thrpt    5         0.108 ±       0.143  MB/sec
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                        thrpt    5         0.208 ±       0.280    B/op
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                         thrpt    5      1798.545 ±     659.431  MB/sec
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                    thrpt    5      3446.729 ±    1217.544    B/op
[info] MutableIterablesBenchmark.writeCirce:·gc.count                                           thrpt    5        27.000                counts
[info] MutableIterablesBenchmark.writeCirce:·gc.time                                            thrpt    5        26.000                    ms
[info] MutableIterablesBenchmark.writeJacksonScala                                              thrpt    5   1573600.778 ±  112835.917   ops/s
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.alloc.rate                               thrpt    5       855.820 ±      61.348  MB/sec
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                          thrpt    5       856.000 ±       0.001    B/op
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                      thrpt    5         0.100 ±       0.105  MB/sec
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5         0.100 ±       0.109    B/op
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                  thrpt    5       853.499 ±     691.833  MB/sec
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5       852.129 ±     655.750    B/op
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.count                                    thrpt    5        13.000                counts
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.time                                     thrpt    5        16.000                    ms
[info] MutableIterablesBenchmark.writeJsoniterScala                                             thrpt    5   4824933.045 ±  133394.441   ops/s
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.alloc.rate                              thrpt    5       367.874 ±      10.130  MB/sec
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                         thrpt    5       120.000 ±       0.001    B/op
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                     thrpt    5         0.763 ±       6.371  MB/sec
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                thrpt    5         0.252 ±       2.104    B/op
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                 thrpt    5       364.253 ±     640.590  MB/sec
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5       118.797 ±     208.079    B/op
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.count                                   thrpt    5         6.000                counts
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.time                                    thrpt    5        11.000                    ms
[info] MutableIterablesBenchmark.writePlayJson                                                  thrpt    5    514835.093 ±   23866.708   ops/s
[info] MutableIterablesBenchmark.writePlayJson:·gc.alloc.rate                                   thrpt    5      1755.886 ±      81.521  MB/sec
[info] MutableIterablesBenchmark.writePlayJson:·gc.alloc.rate.norm                              thrpt    5      5368.001 ±       0.001    B/op
[info] MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                          thrpt    5         0.112 ±       0.134  MB/sec
[info] MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                     thrpt    5         0.343 ±       0.402    B/op
[info] MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                      thrpt    5      1809.417 ±     686.164  MB/sec
[info] MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                 thrpt    5      5531.337 ±    2060.462    B/op
[info] MutableIterablesBenchmark.writePlayJson:·gc.count                                        thrpt    5        27.000                counts
[info] MutableIterablesBenchmark.writePlayJson:·gc.time                                         thrpt    5        32.000                    ms
[info] MutableMapsBenchmark.readJsoniterScala                                                   thrpt    5   3503598.271 ±  179930.863   ops/s
[info] MutableMapsBenchmark.readJsoniterScala:·gc.alloc.rate                                    thrpt    5      1656.042 ±      85.014  MB/sec
[info] MutableMapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                               thrpt    5       744.000 ±       0.001    B/op
[info] MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                           thrpt    5         0.100 ±       0.174  MB/sec
[info] MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5         0.045 ±       0.078    B/op
[info] MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                       thrpt    5      1669.103 ±      60.861  MB/sec
[info] MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5       749.994 ±      52.682    B/op
[info] MutableMapsBenchmark.readJsoniterScala:·gc.count                                         thrpt    5        25.000                counts
[info] MutableMapsBenchmark.readJsoniterScala:·gc.time                                          thrpt    5        23.000                    ms
[info] MutableMapsBenchmark.readPlayJson                                                        thrpt    5    308949.928 ±    4007.064   ops/s
[info] MutableMapsBenchmark.readPlayJson:·gc.alloc.rate                                         thrpt    5      1645.789 ±      21.264  MB/sec
[info] MutableMapsBenchmark.readPlayJson:·gc.alloc.rate.norm                                    thrpt    5      8384.001 ±       0.001    B/op
[info] MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                thrpt    5         0.062 ±       0.057  MB/sec
[info] MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                           thrpt    5         0.318 ±       0.286    B/op
[info] MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                            thrpt    5      1672.782 ±      65.297  MB/sec
[info] MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                       thrpt    5      8521.773 ±     425.717    B/op
[info] MutableMapsBenchmark.readPlayJson:·gc.count                                              thrpt    5        25.000                counts
[info] MutableMapsBenchmark.readPlayJson:·gc.time                                               thrpt    5        29.000                    ms
[info] MutableMapsBenchmark.writeCirce                                                          thrpt    5    449992.696 ±    4426.647   ops/s
[info] MutableMapsBenchmark.writeCirce:·gc.alloc.rate                                           thrpt    5      1150.408 ±      11.415  MB/sec
[info] MutableMapsBenchmark.writeCirce:·gc.alloc.rate.norm                                      thrpt    5      4024.001 ±       0.001    B/op
[info] MutableMapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                  thrpt    5         0.075 ±       0.146  MB/sec
[info] MutableMapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                             thrpt    5         0.262 ±       0.509    B/op
[info] MutableMapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                              thrpt    5      1183.373 ±     697.344  MB/sec
[info] MutableMapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                         thrpt    5      4139.979 ±    2458.534    B/op
[info] MutableMapsBenchmark.writeCirce:·gc.count                                                thrpt    5        18.000                counts
[info] MutableMapsBenchmark.writeCirce:·gc.time                                                 thrpt    5        18.000                    ms
[info] MutableMapsBenchmark.writeJsoniterScala                                                  thrpt    5   2874895.290 ±  120836.155   ops/s
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.alloc.rate                                   thrpt    5       584.549 ±      24.227  MB/sec
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                              thrpt    5       320.000 ±       0.001    B/op
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                          thrpt    5         0.783 ±       6.339  MB/sec
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5         0.426 ±       3.449    B/op
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                      thrpt    5       588.435 ±     564.173  MB/sec
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5       322.421 ±     312.539    B/op
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.count                                        thrpt    5         9.000                counts
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.time                                         thrpt    5        10.000                    ms
[info] MutableMapsBenchmark.writePlayJson                                                       thrpt    5    345036.665 ±   10327.545   ops/s
[info] MutableMapsBenchmark.writePlayJson:·gc.alloc.rate                                        thrpt    5      1324.097 ±      40.356  MB/sec
[info] MutableMapsBenchmark.writePlayJson:·gc.alloc.rate.norm                                   thrpt    5      6040.001 ±       0.001    B/op
[info] MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                               thrpt    5         0.075 ±       0.176  MB/sec
[info] MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                          thrpt    5         0.341 ±       0.795    B/op
[info] MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                           thrpt    5      1324.139 ±      57.596  MB/sec
[info] MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5      6040.221 ±     203.292    B/op
[info] MutableMapsBenchmark.writePlayJson:·gc.count                                             thrpt    5        20.000                counts
[info] MutableMapsBenchmark.writePlayJson:·gc.time                                              thrpt    5        24.000                    ms
[info] PrimitivesBenchmark.readCirce                                                            thrpt    5    661974.726 ±   16278.108   ops/s
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate                                             thrpt    5      2012.229 ±      49.269  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm                                        thrpt    5      4784.001 ±       0.001    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    thrpt    5         0.121 ±       0.104  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               thrpt    5         0.287 ±       0.252    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                thrpt    5      2006.593 ±      85.727  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           thrpt    5      4770.948 ±     298.925    B/op
[info] PrimitivesBenchmark.readCirce:·gc.count                                                  thrpt    5        30.000                counts
[info] PrimitivesBenchmark.readCirce:·gc.time                                                   thrpt    5        27.000                    ms
[info] PrimitivesBenchmark.readJacksonScala                                                     thrpt    5   1538413.893 ±   43576.377   ops/s
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate                                      thrpt    5      1165.015 ±      32.698  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                 thrpt    5      1192.000 ±       0.001    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                             thrpt    5         0.083 ±       0.160  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                        thrpt    5         0.085 ±       0.164    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                         thrpt    5      1194.009 ±     699.631  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                    thrpt    5      1222.053 ±     726.311    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.count                                           thrpt    5        18.000                counts
[info] PrimitivesBenchmark.readJacksonScala:·gc.time                                            thrpt    5        21.000                    ms
[info] PrimitivesBenchmark.readJsoniterScala                                                    thrpt    5   6907794.109 ±  121923.051   ops/s
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate                                     thrpt    5       210.658 ±       3.724  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                thrpt    5        48.000 ±       0.001    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                            thrpt    5         0.012 ±       0.062  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                       thrpt    5         0.003 ±       0.014    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                        thrpt    5       204.620 ±     440.459  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   thrpt    5        46.591 ±     100.296    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.count                                          thrpt    5         4.000                counts
[info] PrimitivesBenchmark.readJsoniterScala:·gc.time                                           thrpt    5         9.000                    ms
[info] PrimitivesBenchmark.readPlayJson                                                         thrpt    5    239383.588 ±    6019.156   ops/s
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate                                          thrpt    5      1666.870 ±      41.138  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm                                     thrpt    5     10960.002 ±       0.001    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 thrpt    5         0.092 ±       0.091  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            thrpt    5         0.602 ±       0.588    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             thrpt    5      1672.614 ±      65.290  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        thrpt    5     10998.425 ±     612.919    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.count                                               thrpt    5        25.000                counts
[info] PrimitivesBenchmark.readPlayJson:·gc.time                                                thrpt    5        29.000                    ms
[info] PrimitivesBenchmark.writeCirce                                                           thrpt    5    924224.689 ±   58062.530   ops/s
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate                                            thrpt    5      1489.134 ±      94.461  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm                                       thrpt    5      2536.000 ±       0.001    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                   thrpt    5         0.071 ±       0.134  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                              thrpt    5         0.120 ±       0.227    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                               thrpt    5      1522.847 ±     700.539  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                          thrpt    5      2591.094 ±    1087.546    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.count                                                 thrpt    5        23.000                counts
[info] PrimitivesBenchmark.writeCirce:·gc.time                                                  thrpt    5        21.000                    ms
[info] PrimitivesBenchmark.writeJacksonScala                                                    thrpt    5   2516543.877 ±  183338.750   ops/s
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate                                     thrpt    5      1036.013 ±      75.441  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                thrpt    5       648.000 ±       0.001    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                            thrpt    5         0.104 ±       0.139  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                       thrpt    5         0.065 ±       0.085    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                        thrpt    5      1057.266 ±     554.576  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                   thrpt    5       660.914 ±     325.188    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.count                                          thrpt    5        16.000                counts
[info] PrimitivesBenchmark.writeJacksonScala:·gc.time                                           thrpt    5        19.000                    ms
[info] PrimitivesBenchmark.writeJsoniterScala                                                   thrpt    5   6029506.826 ±  455657.882   ops/s
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate                                    thrpt    5       674.153 ±      51.051  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                               thrpt    5       176.000 ±       0.001    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                           thrpt    5         0.062 ±       0.160  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5         0.016 ±       0.043    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                       thrpt    5       654.059 ±       4.840  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5       170.809 ±      13.539    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.count                                         thrpt    5        10.000                counts
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.time                                          thrpt    5        10.000                    ms
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc                                           thrpt    5   5996967.073 ±  428031.290   ops/s
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                            thrpt    5       365.771 ±      26.167  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                       thrpt    5        96.000 ±       0.001    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                   thrpt    5         0.764 ±       6.448  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm              thrpt    5         0.203 ±       1.711    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space               thrpt    5       364.615 ±     638.679  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm          thrpt    5        95.428 ±     161.947    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                 thrpt    5         6.000                counts
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time                                  thrpt    5        11.000                    ms
[info] PrimitivesBenchmark.writePlayJson                                                        thrpt    5    331762.184 ±   17322.651   ops/s
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate                                         thrpt    5      1729.929 ±      90.558  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm                                    thrpt    5      8208.001 ±       0.001    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                thrpt    5         0.096 ±       0.044  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                           thrpt    5         0.455 ±       0.228    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                            thrpt    5      1739.793 ±     609.569  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                       thrpt    5      8254.524 ±    2839.426    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.count                                              thrpt    5        26.000                counts
[info] PrimitivesBenchmark.writePlayJson:·gc.time                                               thrpt    5        31.000                    ms
[info] StringOfAsciiCharsBenchmark.readCirce                                                    thrpt    5   4395278.676 ±   99952.835   ops/s
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                     thrpt    5      3239.390 ±      73.872  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                                thrpt    5      1160.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                            thrpt    5         0.158 ±       0.156  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                       thrpt    5         0.057 ±       0.055    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                        thrpt    5      3252.056 ±     680.936  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                   thrpt    5      1164.538 ±     242.619    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.count                                          thrpt    5        48.000                counts
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.time                                           thrpt    5        44.000                    ms
[info] StringOfAsciiCharsBenchmark.readJacksonScala                                             thrpt    5   4135226.613 ±  221096.024   ops/s
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                              thrpt    5      2143.988 ±     113.692  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                         thrpt    5       816.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                     thrpt    5         0.108 ±       0.067  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                thrpt    5         0.041 ±       0.026    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                 thrpt    5      2154.219 ±     696.982  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5       819.396 ±     229.916    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count                                   thrpt    5        32.000                counts
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time                                    thrpt    5        35.000                    ms
[info] StringOfAsciiCharsBenchmark.readJsoniterScala                                            thrpt    5   6640122.538 ±   73751.996   ops/s
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                             thrpt    5       708.761 ±       7.691  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                        thrpt    5       168.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                    thrpt    5         0.071 ±       0.072  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm               thrpt    5         0.017 ±       0.017    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                thrpt    5       726.745 ±     564.847  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5       172.228 ±     132.804    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count                                  thrpt    5        11.000                counts
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time                                   thrpt    5        10.000                    ms
[info] StringOfAsciiCharsBenchmark.writeCirce                                                   thrpt    5   2764611.622 ±   87426.569   ops/s
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                    thrpt    5      1152.272 ±      36.486  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                               thrpt    5       656.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                           thrpt    5         0.079 ±       0.154  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                      thrpt    5         0.045 ±       0.088    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                       thrpt    5      1184.766 ±     696.730  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                  thrpt    5       674.706 ±     402.747    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.count                                         thrpt    5        18.000                counts
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.time                                          thrpt    5        17.000                    ms
[info] StringOfAsciiCharsBenchmark.writeJacksonScala                                            thrpt    5   3497030.162 ±   98751.079   ops/s
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                             thrpt    5      1084.103 ±      30.677  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                        thrpt    5       488.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                    thrpt    5         0.075 ±       0.166  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm               thrpt    5         0.034 ±       0.076    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                thrpt    5      1055.524 ±     553.602  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5       475.392 ±     259.438    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count                                  thrpt    5        16.000                counts
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time                                   thrpt    5        18.000                    ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala                                           thrpt    5   8913485.144 ±  448955.723   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                            thrpt    5       860.824 ±      43.623  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                       thrpt    5       152.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                   thrpt    5         0.104 ±       0.080  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm              thrpt    5         0.018 ±       0.014    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space               thrpt    5       851.532 ±     688.444  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm          thrpt    5       150.253 ±     119.046    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count                                 thrpt    5        13.000                counts
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time                                  thrpt    5        13.000                    ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                   thrpt    5   8185233.731 ±   63133.543   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                    thrpt    5        ≈ 10⁻⁴                MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm               thrpt    5        ≈ 10⁻⁴                  B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                         thrpt    5           ≈ 0                counts
[info] StringOfAsciiCharsBenchmark.writePlayJson                                                thrpt    5   3510469.654 ±  238651.936   ops/s
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                                 thrpt    5      1124.126 ±      75.743  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                            thrpt    5       504.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                        thrpt    5         0.071 ±       0.044  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                   thrpt    5         0.032 ±       0.019    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                    thrpt    5      1116.097 ±     691.603  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm               thrpt    5       500.100 ±     298.290    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.count                                      thrpt    5        17.000                counts
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.time                                       thrpt    5        16.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readCirce                                                 thrpt    5    777412.456 ±   48861.112   ops/s
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                  thrpt    5      1303.945 ±      81.542  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                             thrpt    5      2640.001 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                         thrpt    5         0.092 ±       0.134  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                    thrpt    5         0.185 ±       0.267    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                     thrpt    5      1324.615 ±      47.141  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                thrpt    5      2682.652 ±     246.122    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.count                                       thrpt    5        20.000                counts
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.time                                        thrpt    5        19.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala                                          thrpt    5   1103937.363 ±   41206.899   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                           thrpt    5       763.106 ±      28.832  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                      thrpt    5      1088.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                  thrpt    5         0.071 ±       0.072  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm             thrpt    5         0.101 ±       0.100    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space              thrpt    5       718.951 ±     565.664  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm         thrpt    5      1024.869 ±     800.041    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count                                thrpt    5        11.000                counts
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time                                 thrpt    5        13.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala                                         thrpt    5   1941606.538 ±  122907.955   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                          thrpt    5       542.806 ±      34.377  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                     thrpt    5       440.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                 thrpt    5         0.674 ±       5.310  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm            thrpt    5         0.538 ±       4.232    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space             thrpt    5       528.905 ±     695.232  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm        thrpt    5       429.668 ±     574.800    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count                               thrpt    5         8.000                counts
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time                                thrpt    5         9.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeCirce                                                thrpt    5   1672010.976 ±   30043.007   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                 thrpt    5      1359.733 ±      24.659  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                            thrpt    5      1280.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                        thrpt    5         0.087 ±       0.132  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                   thrpt    5         0.082 ±       0.123    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                    thrpt    5      1321.968 ±      50.730  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm               thrpt    5      1244.454 ±      44.150    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count                                      thrpt    5        20.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time                                       thrpt    5        19.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala                                         thrpt    5   2424870.508 ±  124659.360   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                          thrpt    5      1084.520 ±      55.808  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                     thrpt    5       704.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                 thrpt    5         0.071 ±       0.122  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm            thrpt    5         0.046 ±       0.081    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space             thrpt    5      1053.129 ±     551.804  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm        thrpt    5       684.269 ±     381.818    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count                               thrpt    5        16.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time                                thrpt    5        18.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala                                        thrpt    5   2756738.885 ±  100980.834   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                         thrpt    5       644.525 ±      23.773  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                    thrpt    5       368.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                thrpt    5         0.800 ±       6.265  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm           thrpt    5         0.455 ±       3.563    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space            thrpt    5       654.225 ±       7.182  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm       thrpt    5       373.566 ±      14.215    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count                              thrpt    5        10.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time                               thrpt    5        10.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                thrpt    5   2960279.313 ±   85049.907   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                 thrpt    5        ≈ 10⁻⁴                MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm            thrpt    5        ≈ 10⁻⁴                  B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                      thrpt    5           ≈ 0                counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson                                             thrpt    5   2457316.970 ±   14727.672   ops/s
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                              thrpt    5      1124.170 ±       7.063  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                         thrpt    5       720.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                     thrpt    5         0.071 ±       0.091  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                thrpt    5         0.045 ±       0.059    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                 thrpt    5      1116.127 ±     671.934  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm            thrpt    5       714.859 ±     430.717    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count                                   thrpt    5        17.000                counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time                                    thrpt    5        17.000                    ms
[info] TwitterAPIBenchmark.readCirce                                                            thrpt    5     11526.737 ±    2473.224   ops/s
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate                                             thrpt    5      1687.842 ±     351.244  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm                                        thrpt    5    230454.145 ±    1415.066    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    thrpt    5         0.171 ±       0.295  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               thrpt    5        23.086 ±      36.805    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                thrpt    5      1657.885 ±     921.297  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           thrpt    5    225864.130 ±   98474.360    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.count                                                  thrpt    5        25.000                counts
[info] TwitterAPIBenchmark.readCirce:·gc.time                                                   thrpt    5        43.000                    ms
[info] TwitterAPIBenchmark.readJacksonScala                                                     thrpt    5     15943.639 ±    1507.355   ops/s
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate                                      thrpt    5       219.548 ±      20.596  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                                 thrpt    5     21673.731 ±      25.707    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                             thrpt    5         0.158 ±       1.191  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                        thrpt    5        16.029 ±     120.638    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                         thrpt    5       217.938 ±     482.080  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                    thrpt    5     21664.308 ±   48286.788    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.count                                           thrpt    5         4.000                counts
[info] TwitterAPIBenchmark.readJacksonScala:·gc.time                                            thrpt    5         6.000                    ms
[info] TwitterAPIBenchmark.readJsoniterScala                                                    thrpt    5     37368.544 ±    3019.501   ops/s
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                     thrpt    5       346.066 ±      27.820  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                thrpt    5     14576.046 ±       0.298    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                            thrpt    5         0.693 ±       5.845  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                       thrpt    5        28.670 ±     241.606    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                        thrpt    5       336.397 ±     403.152  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   thrpt    5     14205.430 ±   17866.652    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.count                                          thrpt    5         6.000                counts
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.time                                           thrpt    5        14.000                    ms
[info] TwitterAPIBenchmark.readPlayJson                                                         thrpt    5      3528.959 ±     671.523   ops/s
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate                                          thrpt    5      1132.437 ±     215.589  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                     thrpt    5    505054.869 ±     195.895    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 thrpt    5         0.042 ±       0.139  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            thrpt    5        18.369 ±      59.710    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             thrpt    5      1123.033 ±     725.274  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        thrpt    5    500270.116 ±  286184.293    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.count                                               thrpt    5        17.000                counts
[info] TwitterAPIBenchmark.readPlayJson:·gc.time                                                thrpt    5        25.000                    ms
[info] TwitterAPIBenchmark.writeJacksonScala                                                    thrpt    5     58135.266 ±    1687.366   ops/s
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                     thrpt    5       742.348 ±      21.533  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                thrpt    5     20100.000 ±       0.153    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                            thrpt    5         0.050 ±       0.176  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                       thrpt    5         1.358 ±       4.775    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                        thrpt    5       717.861 ±     553.179  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                   thrpt    5     19442.682 ±   15131.326    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.count                                          thrpt    5        11.000                counts
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.time                                           thrpt    5        13.000                    ms
[info] TwitterAPIBenchmark.writeJsoniterScala                                                   thrpt    5     84877.689 ±    7141.993   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                    thrpt    5       556.666 ±      47.199  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                               thrpt    5     10320.005 ±       0.001    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                           thrpt    5         0.809 ±       6.521  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5        14.933 ±     120.150    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                       thrpt    5       522.462 ±     689.647  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5      9713.689 ±   13112.017    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.count                                         thrpt    5         8.000                counts
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.time                                          thrpt    5         9.000                    ms
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc                                           thrpt    5     97687.675 ±    1143.008   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                            thrpt    5        11.917 ±       0.145  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                       thrpt    5       192.004 ±       0.001    B/op
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                                 thrpt    5           ≈ 0                counts
[info] Benchmark result is saved to jdk9.json
[success] Total time: 3820 s, completed Feb 16, 2018, 5:33:27 PM
