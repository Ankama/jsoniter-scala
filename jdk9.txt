[info] Loading settings from idea.sbt,build.sbt ...
[info] Loading global plugins from /home/andriy/.sbt/1.0/plugins
[info] Loading settings from plugins.sbt ...
[info] Loading project definition from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/project
[info] Loading settings from release.sbt,build.sbt,version.sbt ...
[info] Set current project to jsoniter-scala (in build file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[success] Total time: 0 s, completed Jan 31, 2018, 1:30:11 PM
[info] Updating {file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/}core...
[info] Done updating.
[info] Updating {file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/}macros...
[info] Done updating.
[info] Updating {file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/}benchmark...
[info] Done updating.
[info] Compiling 4 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/classes ...
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:993:63: constructor String in class String is deprecated: see corresponding Javadoc for more information.
[warn]   private def toDouble: Double = java.lang.Double.parseDouble(new String(buf, 0, mark, head - mark))
[warn]                                                               ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:480:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos)
[warn]       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:488:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos + 1)
[warn]       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:891:14: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]       zoneId.getBytes(0, len, buf, pos)
[warn]              ^
[warn] four warnings found
[info] Done compiling.
[info] Compiling 1 Scala source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/classes ...
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/core_2.12-0.6.0-SNAPSHOT.jar ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/macros_2.12-0.6.0-SNAPSHOT.jar ...
[info] Compiling 36 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done packaging.
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:13:55: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("s", "bd");
[info]       private def d1(in: JsonReader, default: Option[String]): Option[String] = {
[info]         val x = in.readString(null);
[info]         if (x.eq(null))
[info]           None
[info]         else
[info]           Some(x)
[info]       };
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _bd: scala.math.BigDecimal = null;
[info]           var _os: Option[String] = None;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readString(_s);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3138 => if (in.isCharBufEqualsTo(l, "bd"))
[info]                       {
[info]                         _bd = in.readBigDecimal(_bd);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556 => if (in.isCharBufEqualsTo(l, "os"))
[info]                       _os = d1(in, _os)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs(s = _s, bd = _bd, os = _os)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: Option[String], out: JsonWriter): Unit = if (x.eq(null).||(x.isEmpty))
[info]         out.writeNull()
[info]       else
[info]         out.writeVal(x.get);
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("s");
[info]             out.writeVal(x.s)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("bd");
[info]             out.writeVal(x.bd)
[info]           };
[info]           {
[info]             val v = x.os;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("os");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val anyRefsCodec: JsonCodec[AnyRefs] = make[AnyRefs](CodecMakerConfig())
[info]                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:14:52: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Arrays':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Arrays] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays): com.github.plokhotnyuk.jsoniter_scala.macros.Arrays = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays, out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Array[Int]] = new Array[Array[Int]](0);
[info]       private val v1: Array[BigInt] = new Array[scala.math.BigInt](0);
[info]       private val v2: Array[Int] = new Array[Int](0);
[info]       private def d2(in: JsonReader, default: Array[Int]): Array[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Int](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Int](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInt());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Int](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d1(in: JsonReader, default: Array[Array[Int]]): Array[Array[Int]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Array[Int]](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Array[Int]](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, d2(in, v2));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Array[Int]](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d3(in: JsonReader, default: Array[BigInt]): Array[BigInt] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigInt](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[scala.math.BigInt](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigInt(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[scala.math.BigInt](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays): com.github.plokhotnyuk.jsoniter_scala.macros.Arrays = if (in.isNextToken('{'))
[info]         {
[info]           var _aa: Array[Array[Int]] = v0;
[info]           var _a: Array[BigInt] = v1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3104 => if (in.isCharBufEqualsTo(l, "aa"))
[info]                       _aa = d1(in, _aa)
[info]                     else
[info]                       in.skip()
[info]                     case 97 => if (in.isCharBufEqualsTo(l, "a"))
[info]                       _a = d3(in, _a)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Arrays(aa = _aa, a = _a)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e2(x: Array[Int], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e1(x: Array[Array[Int]], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               e2(x(i), out);
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: Array[BigInt], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.aa;
[info]             if (v.ne(null).&&(v.length.>(0)))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("aa");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.a;
[info]             if (v.ne(null).&&(v.length.>(0)))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("a");
[info]                 e3(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val arraysCodec: JsonCodec[Arrays] = make[Arrays](CodecMakerConfig())
[info]                                                    ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:15:71: Generated JSON codec for type 'Array[BigInt]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[BigInt]] {
[info]       def nullValue: Array[BigInt] = v0;
[info]       def decode(in: JsonReader, default: Array[BigInt]): Array[BigInt] = d0(in, default);
[info]       def encode(x: Array[BigInt], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[BigInt] = new Array[scala.math.BigInt](0);
[info]       private def d0(in: JsonReader, default: Array[BigInt]): Array[BigInt] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigInt](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[scala.math.BigInt](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigInt(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[scala.math.BigInt](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[BigInt], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val bigIntArrayCodec: JsonCodec[Array[BigInt]] = make[Array[BigInt]](CodecMakerConfig())
[info]                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:16:55: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.BitSets':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.BitSets] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets): com.github.plokhotnyuk.jsoniter_scala.macros.BitSets = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = BitSet.newBuilder;
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d2(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               BitSet.empty;
[info]             do 
[info]               x.add(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets): com.github.plokhotnyuk.jsoniter_scala.macros.BitSets = if (in.isNextToken('{'))
[info]         {
[info]           var _bs: scala.collection.immutable.BitSet = BitSet.empty;
[info]           var _mbs: scala.collection.mutable.BitSet = BitSet.empty;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3153 => if (in.isCharBufEqualsTo(l, "bs"))
[info]                       _bs = d1(in, _bs)
[info]                     else
[info]                       in.skip()
[info]                     case 107902 => if (in.isCharBufEqualsTo(l, "mbs"))
[info]                       _mbs = d2(in, _mbs)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.BitSets(bs = _bs, mbs = _mbs)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.bs;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("bs");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.mbs;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("mbs");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val bitSetsCodec: JsonCodec[BitSets] = make[BitSets](CodecMakerConfig())
[info]                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:17:74: Generated JSON codec for type 'Array[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[Boolean]] {
[info]       def nullValue: Array[Boolean] = v0;
[info]       def decode(in: JsonReader, default: Array[Boolean]): Array[Boolean] = d0(in, default);
[info]       def encode(x: Array[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Boolean] = new Array[Boolean](0);
[info]       private def d0(in: JsonReader, default: Array[Boolean]): Array[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Boolean](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Boolean](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBoolean());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Boolean](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[Boolean], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val booleanArrayCodec: JsonCodec[Array[Boolean]] = make[Array[Boolean]](CodecMakerConfig())
[info]                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:18:65: Generated JSON codec for type 'Array[Byte]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[Byte]] {
[info]       def nullValue: Array[Byte] = v0;
[info]       def decode(in: JsonReader, default: Array[Byte]): Array[Byte] = d0(in, default);
[info]       def encode(x: Array[Byte], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Byte] = new Array[Byte](0);
[info]       private def d0(in: JsonReader, default: Array[Byte]): Array[Byte] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Byte](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Byte](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readByte());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Byte](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[Byte], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val byteArrayCodec: JsonCodec[Array[Byte]] = make[Array[Byte]](CodecMakerConfig())
[info]                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:19:71: Generated JSON codec for type 'Array[Double]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[Double]] {
[info]       def nullValue: Array[Double] = v0;
[info]       def decode(in: JsonReader, default: Array[Double]): Array[Double] = d0(in, default);
[info]       def encode(x: Array[Double], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Double] = new Array[Double](0);
[info]       private def d0(in: JsonReader, default: Array[Double]): Array[Double] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Double](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Double](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDouble());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Double](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[Double], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val doubleArrayCodec: JsonCodec[Array[Double]] = make[Array[Double]](CodecMakerConfig())
[info]                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:20:68: Generated JSON codec for type 'Array[Float]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[Float]] {
[info]       def nullValue: Array[Float] = v0;
[info]       def decode(in: JsonReader, default: Array[Float]): Array[Float] = d0(in, default);
[info]       def encode(x: Array[Float], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Float] = new Array[Float](0);
[info]       private def d0(in: JsonReader, default: Array[Float]): Array[Float] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Float](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Float](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readFloat());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Float](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[Float], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val floatArrayCodec: JsonCodec[Array[Float]] = make[Array[Float]](CodecMakerConfig())
[info]                                                                    ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:21:74: Generated JSON codec for type 'Array[java.time.Instant]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[java.time.Instant]] {
[info]       def nullValue: Array[java.time.Instant] = v0;
[info]       def decode(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = d0(in, default);
[info]       def encode(x: Array[java.time.Instant], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[java.time.Instant] = new Array[java.time.Instant](0);
[info]       private def d0(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Instant](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.time.Instant](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInstant(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.time.Instant](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[java.time.Instant], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val instantArrayCodec: JsonCodec[Array[Instant]] = make[Array[Instant]](CodecMakerConfig())
[info]                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:22:80: Generated JSON codec for type 'Array[java.time.LocalDate]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[java.time.LocalDate]] {
[info]       def nullValue: Array[java.time.LocalDate] = v0;
[info]       def decode(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = d0(in, default);
[info]       def encode(x: Array[java.time.LocalDate], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[java.time.LocalDate] = new Array[java.time.LocalDate](0);
[info]       private def d0(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDate](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.time.LocalDate](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDate(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.time.LocalDate](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[java.time.LocalDate], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val localDateArrayCodec: JsonCodec[Array[LocalDate]] = make[Array[LocalDate]](CodecMakerConfig())
[info]                                                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:23:80: Generated JSON codec for type 'Array[java.time.LocalTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[java.time.LocalTime]] {
[info]       def nullValue: Array[java.time.LocalTime] = v0;
[info]       def decode(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = d0(in, default);
[info]       def encode(x: Array[java.time.LocalTime], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[java.time.LocalTime] = new Array[java.time.LocalTime](0);
[info]       private def d0(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.time.LocalTime](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.time.LocalTime](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[java.time.LocalTime], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val localTimeArrayCodec: JsonCodec[Array[LocalTime]] = make[Array[LocalTime]](CodecMakerConfig())
[info]                                                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:24:71: Generated JSON codec for type 'Array[java.time.ZoneId]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[java.time.ZoneId]] {
[info]       def nullValue: Array[java.time.ZoneId] = v0;
[info]       def decode(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = d0(in, default);
[info]       def encode(x: Array[java.time.ZoneId], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[java.time.ZoneId] = new Array[java.time.ZoneId](0);
[info]       private def d0(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneId](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.time.ZoneId](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneId(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.time.ZoneId](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[java.time.ZoneId], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val zoneIdArrayCodec: JsonCodec[Array[ZoneId]] = make[Array[ZoneId]](CodecMakerConfig())
[info]                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:25:62: Generated JSON codec for type 'Array[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[Int]] {
[info]       def nullValue: Array[Int] = v0;
[info]       def decode(in: JsonReader, default: Array[Int]): Array[Int] = d0(in, default);
[info]       def encode(x: Array[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Int] = new Array[Int](0);
[info]       private def d0(in: JsonReader, default: Array[Int]): Array[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Int](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Int](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInt());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Int](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[Int], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val intArrayCodec: JsonCodec[Array[Int]] = make[Array[Int]](CodecMakerConfig())
[info]                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:26:68: Generated JSON codec for type 'Array[Short]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[Short]] {
[info]       def nullValue: Array[Short] = v0;
[info]       def decode(in: JsonReader, default: Array[Short]): Array[Short] = d0(in, default);
[info]       def encode(x: Array[Short], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Short] = new Array[Short](0);
[info]       private def d0(in: JsonReader, default: Array[Short]): Array[Short] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Short](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Short](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readShort());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Short](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[Short], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val shortArrayCodec: JsonCodec[Array[Short]] = make[Array[Short]](CodecMakerConfig())
[info]                                                                    ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:27:65: Generated JSON codec for type 'Array[Long]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[Long]] {
[info]       def nullValue: Array[Long] = v0;
[info]       def decode(in: JsonReader, default: Array[Long]): Array[Long] = d0(in, default);
[info]       def encode(x: Array[Long], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Long] = new Array[Long](0);
[info]       private def d0(in: JsonReader, default: Array[Long]): Array[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Long](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLong());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Long](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[Long], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val longArrayCodec: JsonCodec[Array[Long]] = make[Array[Long]](CodecMakerConfig())
[info]                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:28:65: Generated JSON codec for type 'Array[java.util.UUID]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[java.util.UUID]] {
[info]       def nullValue: Array[java.util.UUID] = v0;
[info]       def decode(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = d0(in, default);
[info]       def encode(x: Array[java.util.UUID], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[java.util.UUID] = new Array[java.util.UUID](0);
[info]       private def d0(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.util.UUID](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.util.UUID](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readUUID(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.util.UUID](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[java.util.UUID], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val uuidArrayCodec: JsonCodec[Array[UUID]] = make[Array[UUID]](CodecMakerConfig())
[info]                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:29:61: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Iterables':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Iterables] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables): com.github.plokhotnyuk.jsoniter_scala.macros.Iterables = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.immutable.Vector[String]): scala.collection.immutable.Vector[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Vector.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d2(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Set.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d4(in: JsonReader, default: scala.collection.immutable.HashSet[Long]): scala.collection.immutable.HashSet[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = HashSet.newBuilder[Long];
[info]             do 
[info]               x.+=(in.readLong())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d3(in: JsonReader, default: List[scala.collection.immutable.HashSet[Long]]): List[scala.collection.immutable.HashSet[Long]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = List.newBuilder[scala.collection.immutable.HashSet[Long]];
[info]             do 
[info]               x.+=(d4(in, HashSet.empty[Long]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables): com.github.plokhotnyuk.jsoniter_scala.macros.Iterables = if (in.isNextToken('{'))
[info]         {
[info]           var _l: scala.collection.immutable.Vector[String] = Vector.empty[String];
[info]           var _s: scala.collection.immutable.Set[Int] = Set.empty[Int];
[info]           var _ls: List[scala.collection.immutable.HashSet[Long]] = List.empty[scala.collection.immutable.HashSet[Long]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       _l = d1(in, _l)
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       _s = d2(in, _s)
[info]                     else
[info]                       in.skip()
[info]                     case 3463 => if (in.isCharBufEqualsTo(l, "ls"))
[info]                       _ls = d3(in, _ls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Iterables(l = _l, s = _s, ls = _ls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.immutable.Vector[String], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e4(x: scala.collection.immutable.HashSet[Long], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: List[scala.collection.immutable.HashSet[Long]], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e4(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.l;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("l");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.s;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("s");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.ls;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("ls");
[info]                 e3(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val iterablesCodec: JsonCodec[Iterables] = make[Iterables](CodecMakerConfig())
[info]                                                             ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:30:46: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Maps':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Maps] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Maps = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Maps): com.github.plokhotnyuk.jsoniter_scala.macros.Maps = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.Maps, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.immutable.HashMap[String,Double]): scala.collection.immutable.HashMap[String,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = HashMap.empty[String, Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsString(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d3(in: JsonReader, default: scala.collection.immutable.HashMap[Long,Double]): scala.collection.immutable.HashMap[Long,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = HashMap.empty[Long, Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsLong(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]]): scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = Map.empty[Int, scala.collection.immutable.HashMap[Long,Double]];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), d3(in, HashMap.empty[Long, Double]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Maps): com.github.plokhotnyuk.jsoniter_scala.macros.Maps = if (in.isNextToken('{'))
[info]         {
[info]           var _m: scala.collection.immutable.HashMap[String,Double] = HashMap.empty[String, Double];
[info]           var _mm: scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]] = Map.empty[Int, scala.collection.immutable.HashMap[Long,Double]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 109 => if (in.isCharBufEqualsTo(l, "m"))
[info]                       _m = d1(in, _m)
[info]                     else
[info]                       in.skip()
[info]                     case 3488 => if (in.isCharBufEqualsTo(l, "mm"))
[info]                       _mm = d2(in, _mm)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Maps(m = _m, mm = _mm)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.immutable.HashMap[String,Double], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             out.writeVal(kv._2)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: scala.collection.immutable.HashMap[Long,Double], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             out.writeVal(kv._2)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             e3(kv._2, out)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Maps, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.m;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("m");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.mm;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("mm");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val mapsCodec: JsonCodec[Maps] = make[Maps](CodecMakerConfig())
[info]                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:31:81: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("s", "i");
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _i: Int = 0;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readString(_s);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         _i = in.readInt();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields(s = _s, i = _i)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("s");
[info]             out.writeVal(x.s)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("i");
[info]             out.writeVal(x.i)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val missingReqFieldCodec: JsonCodec[MissingReqFields] = make[MissingReqFields](CodecMakerConfig())
[info]                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:32:82: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables): com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[String]): scala.collection.mutable.ArrayBuffer[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               ArrayBuffer.empty[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d2(in: JsonReader, default: scala.collection.mutable.TreeSet[Int]): scala.collection.mutable.TreeSet[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               TreeSet.empty[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d4(in: JsonReader, default: scala.collection.mutable.Set[Long]): scala.collection.mutable.Set[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               Set.empty[Long];
[info]             do 
[info]               x.+=(in.readLong())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d3(in: JsonReader, default: scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]]): scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = ResizableArray.newBuilder[scala.collection.mutable.Set[Long]];
[info]             do 
[info]               x.+=(d4(in, Set.empty[Long]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables): com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables = if (in.isNextToken('{'))
[info]         {
[info]           var _l: scala.collection.mutable.ArrayBuffer[String] = ArrayBuffer.empty[String];
[info]           var _s: scala.collection.mutable.TreeSet[Int] = TreeSet.empty[Int];
[info]           var _ls: scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]] = ResizableArray.empty[scala.collection.mutable.Set[Long]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       _l = d1(in, _l)
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       _s = d2(in, _s)
[info]                     else
[info]                       in.skip()
[info]                     case 3463 => if (in.isCharBufEqualsTo(l, "ls"))
[info]                       _ls = d3(in, _ls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables(l = _l, s = _s, ls = _ls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.mutable.ArrayBuffer[String], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: scala.collection.mutable.TreeSet[Int], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e4(x: scala.collection.mutable.Set[Long], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e4(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.l;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("l");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.s;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("s");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.ls;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("ls");
[info]                 e3(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val mutableIterablesCodec: JsonCodec[MutableIterables] = make[MutableIterables](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:33:67: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps): com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.mutable.HashMap[String,Double]): scala.collection.mutable.HashMap[String,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               HashMap.empty[String, Double];
[info]             do 
[info]               x.update(in.readKeyAsString(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d3(in: JsonReader, default: scala.collection.mutable.OpenHashMap[Long,Double]): scala.collection.mutable.OpenHashMap[Long,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               OpenHashMap.empty[Long, Double];
[info]             do 
[info]               x.update(in.readKeyAsLong(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]]): scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               Map.empty[Int, scala.collection.mutable.OpenHashMap[Long,Double]];
[info]             do 
[info]               x.update(in.readKeyAsInt(), d3(in, OpenHashMap.empty[Long, Double]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps): com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps = if (in.isNextToken('{'))
[info]         {
[info]           var _m: scala.collection.mutable.HashMap[String,Double] = HashMap.empty[String, Double];
[info]           var _mm: scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]] = Map.empty[Int, scala.collection.mutable.OpenHashMap[Long,Double]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 109 => if (in.isCharBufEqualsTo(l, "m"))
[info]                       _m = d1(in, _m)
[info]                     else
[info]                       in.skip()
[info]                     case 3488 => if (in.isCharBufEqualsTo(l, "mm"))
[info]                       _mm = d2(in, _mm)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps(m = _m, mm = _mm)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.mutable.HashMap[String,Double], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             out.writeVal(kv._2)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: scala.collection.mutable.OpenHashMap[Long,Double], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             out.writeVal(kv._2)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             e3(kv._2, out)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.m;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("m");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.mm;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("mm");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val mutableMapsCodec: JsonCodec[MutableMaps] = make[MutableMaps](CodecMakerConfig())
[info]                                                                   ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:34:76: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps): com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.immutable.IntMap[Double]): scala.collection.immutable.IntMap[Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = IntMap.empty[Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d3(in: JsonReader, default: scala.collection.immutable.LongMap[Double]): scala.collection.immutable.LongMap[Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = LongMap.empty[Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsLong(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]]): scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               LongMap.empty[scala.collection.immutable.LongMap[Double]];
[info]             do 
[info]               x.update(in.readKeyAsLong(), d3(in, LongMap.empty[Double]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps): com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps = if (in.isNextToken('{'))
[info]         {
[info]           var _m: scala.collection.immutable.IntMap[Double] = IntMap.empty[Double];
[info]           var _mm: scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]] = LongMap.empty[scala.collection.immutable.LongMap[Double]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 109 => if (in.isCharBufEqualsTo(l, "m"))
[info]                       _m = d1(in, _m)
[info]                     else
[info]                       in.skip()
[info]                     case 3488 => if (in.isCharBufEqualsTo(l, "mm"))
[info]                       _mm = d2(in, _mm)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps(m = _m, mm = _mm)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.immutable.IntMap[Double], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             out.writeVal(kv._2)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: scala.collection.immutable.LongMap[Double], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             out.writeVal(kv._2)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             e3(kv._2, out)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.m;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("m");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.mm;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("mm");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val intAndLongMapsCodec: JsonCodec[IntAndLongMaps] = make[IntAndLongMaps](CodecMakerConfig())
[info]                                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:35:64: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Primitives':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Primitives] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("b", "s", "i", "l", "bl", "ch", "dbl", "f");
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = if (in.isNextToken('{'))
[info]         {
[info]           var _b: Byte = ((0): Byte);
[info]           var _s: Short = ((0): Short);
[info]           var _i: Int = 0;
[info]           var _l: Long = 0L;
[info]           var _bl: Boolean = false;
[info]           var _ch: Char = '\u0000';
[info]           var _dbl: Double = 0.0;
[info]           var _f: Float = 0.0F;
[info]           var req0 = 255;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         _b = in.readByte();
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readShort();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         _i = in.readInt();
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         _l = in.readLong();
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3146 => if (in.isCharBufEqualsTo(l, "bl"))
[info]                       {
[info]                         _bl = in.readBoolean();
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3173 => if (in.isCharBufEqualsTo(l, "ch"))
[info]                       {
[info]                         _ch = in.readChar();
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 99246 => if (in.isCharBufEqualsTo(l, "dbl"))
[info]                       {
[info]                         _dbl = in.readDouble();
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102 => if (in.isCharBufEqualsTo(l, "f"))
[info]                       {
[info]                         _f = in.readFloat();
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.Primitives(b = _b, s = _s, i = _i, l = _l, bl = _bl, ch = _ch, dbl = _dbl, f = _f)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("b");
[info]             out.writeVal(x.b)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("s");
[info]             out.writeVal(x.s)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("i");
[info]             out.writeVal(x.i)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("l");
[info]             out.writeVal(x.l)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("bl");
[info]             out.writeVal(x.bl)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("ch");
[info]             out.writeVal(x.ch)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("dbl");
[info]             out.writeVal(x.dbl)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("f");
[info]             out.writeVal(x.f)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val primitivesCodec: JsonCodec[Primitives] = make[Primitives](CodecMakerConfig())
[info]                                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:36:73: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("s", "l");
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _l: Long = 0L;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readString(_s);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         _l = in.readLong();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields(s = _s, l = _l)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("s");
[info]             out.writeVal(x.s)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("l");
[info]             out.writeVal(x.l)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val extractFieldsCodec: JsonCodec[ExtractFields] = make[ExtractFields](CodecMakerConfig())
[info]                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:37:51: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("a");
[info]       private val r1: Array[String] = Array("b");
[info]       private val r2: Array[String] = Array("l", "r");
[info]       private def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.A): com.github.plokhotnyuk.jsoniter_scala.macros.A = if (in.isNextToken('{'))
[info]         {
[info]           var _a: Int = 0;
[info]           var req0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 97 => if (in.isCharBufEqualsTo(l, "a"))
[info]                       {
[info]                         _a = in.readInt();
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.A(a = _a)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.B): com.github.plokhotnyuk.jsoniter_scala.macros.B = if (in.isNextToken('{'))
[info]         {
[info]           var _b: String = null;
[info]           var req0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         _b = in.readString(_b);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.B(b = _b)
[info]           else
[info]             in.requiredKeyError(r1, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.C): com.github.plokhotnyuk.jsoniter_scala.macros.C = if (in.isNextToken('{'))
[info]         {
[info]           var _l: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var _r: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         _l = d0(in, _l);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 114 => if (in.isCharBufEqualsTo(l, "r"))
[info]                       {
[info]                         _r = d0(in, _r);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.C(l = _l, r = _r)
[info]           else
[info]             in.requiredKeyError(r2, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           {
[info]             in.scanToKey("type");
[info]             val l = in.readStringAsCharBuf();
[info]             (in.charBufToHashCode(l): @switch) match {
[info]               case 65 => if (in.isCharBufEqualsTo(l, "A"))
[info]                 {
[info]                   in.rollbackToMark();
[info]                   d1(in, null)
[info]                 }
[info]               else
[info]                 in.discriminatorValueError("type")
[info]               case 66 => if (in.isCharBufEqualsTo(l, "B"))
[info]                 {
[info]                   in.rollbackToMark();
[info]                   d2(in, null)
[info]                 }
[info]               else
[info]                 in.discriminatorValueError("type")
[info]               case 67 => if (in.isCharBufEqualsTo(l, "C"))
[info]                 {
[info]                   in.rollbackToMark();
[info]                   d3(in, null)
[info]                 }
[info]               else
[info]                 in.discriminatorValueError("type")
[info]               case _ => in.discriminatorValueError("type")
[info]             }
[info]           }
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.A, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("type");
[info]             out.writeNonEscapedAsciiVal("A")
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("a");
[info]             out.writeVal(x.a)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.B, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("type");
[info]             out.writeNonEscapedAsciiVal("B")
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("b");
[info]             out.writeVal(x.b)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.C, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("type");
[info]             out.writeNonEscapedAsciiVal("C")
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("l");
[info]             e0(x.l, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("r");
[info]             e0(x.r, out)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.A)) => e1(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.B)) => e2(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.C)) => e3(x, out)
[info]         case null => out.writeNull()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val adtCodec: JsonCodec[AdtBase] = make[AdtBase](CodecMakerConfig())
[info]                                                   ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:38:52: Generated JSON codec for type 'String':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[String] {
[info]       def nullValue: String = null;
[info]       def decode(in: JsonReader, default: String): String = in.readString(default);
[info]       def encode(x: String, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val stringCodec: JsonCodec[String] = make[String](CodecMakerConfig())
[info]                                                    ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:39:75: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("status");
[info]       private val r1: Array[String] = Array("distance", "duration", "status");
[info]       private val r2: Array[String] = Array("text", "value");
[info]       private def d1(in: JsonReader, default: Seq[String]): Seq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d6(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Value): com.github.plokhotnyuk.jsoniter_scala.macros.Value = if (in.isNextToken('{'))
[info]         {
[info]           var _text: String = null;
[info]           var _value: Int = 0;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         _text = in.readString(_text);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 111972721 => if (in.isCharBufEqualsTo(l, "value"))
[info]                       {
[info]                         _value = in.readInt();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.Value(text = _text, value = _value)
[info]           else
[info]             in.requiredKeyError(r2, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Elements): com.github.plokhotnyuk.jsoniter_scala.macros.Elements = if (in.isNextToken('{'))
[info]         {
[info]           var _distance: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _duration: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _status: String = null;
[info]           var req0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 288459765 => if (in.isCharBufEqualsTo(l, "distance"))
[info]                       {
[info]                         _distance = d6(in, _distance);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1992012396 => if (in.isCharBufEqualsTo(l, "duration"))
[info]                       {
[info]                         _duration = d6(in, _duration);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         _status = in.readString(_status);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.Elements(distance = _distance, duration = _duration, status = _status)
[info]           else
[info]             in.requiredKeyError(r1, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d4(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Rows): com.github.plokhotnyuk.jsoniter_scala.macros.Rows = if (in.isNextToken('{'))
[info]         {
[info]           var _elements: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -8339209 => if (in.isCharBufEqualsTo(l, "elements"))
[info]                       _elements = d4(in, _elements)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Rows(elements = _elements)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]             do 
[info]               x.+=(d3(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = if (in.isNextToken('{'))
[info]         {
[info]           var _destination_addresses: Seq[String] = Seq.empty[String];
[info]           var _origin_addresses: Seq[String] = Seq.empty[String];
[info]           var _rows: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]           var _status: String = null;
[info]           var req0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 715423921 => if (in.isCharBufEqualsTo(l, "destination_addresses"))
[info]                       _destination_addresses = d1(in, _destination_addresses)
[info]                     else
[info]                       in.skip()
[info]                     case 1780936137 => if (in.isCharBufEqualsTo(l, "origin_addresses"))
[info]                       _origin_addresses = d1(in, _origin_addresses)
[info]                     else
[info]                       in.skip()
[info]                     case 3506649 => if (in.isCharBufEqualsTo(l, "rows"))
[info]                       _rows = d2(in, _rows)
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         _status = in.readString(_status);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix(destination_addresses = _destination_addresses, origin_addresses = _origin_addresses, rows = _rows, status = _status)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: Seq[String], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e6(x: com.github.plokhotnyuk.jsoniter_scala.macros.Value, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("text");
[info]             out.writeVal(x.text)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("value");
[info]             out.writeVal(x.value)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.Elements, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("distance");
[info]             e6(x.distance, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("duration");
[info]             e6(x.duration, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("status");
[info]             out.writeVal(x.status)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e4(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e5(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.Rows, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.elements;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("elements");
[info]                 e4(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e3(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.destination_addresses;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("destination_addresses");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.origin_addresses;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("origin_addresses");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.rows;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("rows");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("status");
[info]             out.writeVal(x.status)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val googleMapsAPICodec: JsonCodec[DistanceMatrix] = make[DistanceMatrix](CodecMakerConfig())
[info]                                                                           ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:40:64: Generated JSON codec for type 'Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]] {
[info]       def nullValue: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]       def decode(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = d0(in, default);
[info]       def encode(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "user", "retweeted_status", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "possibly_sensitive", "lang");
[info]       private val r1: Array[String] = Array("screen_name", "name", "id", "id_str");
[info]       private val r2: Array[String] = Array("url", "expanded_url", "display_url");
[info]       private val r3: Array[String] = Array("id", "id_str", "name", "screen_name", "location", "description", "url", "entities", "protected", "followers_count", "friends_count", "listed_count", "created_at", "favourites_count", "utc_offset", "time_zone", "geo_enabled", "verified", "statuses_count", "lang", "contributors_enabled", "is_translator", "is_translation_enabled", "profile_background_color", "profile_background_image_url", "profile_background_image_url_https", "profile_background_tile", "profile_image_url", "profile_image_url_https", "profile_banner_url", "profile_link_color", "profile_sidebar_border_color", "profile_sidebar_fill_color", "profile_text_color", "profile_use_background_image", "has_extended_profile", "default_profile", "default_profile_image", "following", "follow_request_sent", "notifications", "translator_type");
[info]       private val r4: Array[String] = Array("url", "description");
[info]       private val r5: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "user", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "possibly_sensitive", "lang");
[info]       private def d3(in: JsonReader, default: Seq[String]): Seq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d6(in: JsonReader, default: Seq[Int]): Seq[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions): com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions = if (in.isNextToken('{'))
[info]         {
[info]           var _screen_name: String = null;
[info]           var _name: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var req0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         _screen_name = in.readString(_screen_name);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         _name = in.readString(_name);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = in.readString(_id_str);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       _indices = d6(in, _indices)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions(screen_name = _screen_name, name = _name, id = _id, id_str = _id_str, indices = _indices)
[info]           else
[info]             in.requiredKeyError(r1, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d4(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d8(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Urls): com.github.plokhotnyuk.jsoniter_scala.macros.Urls = if (in.isNextToken('{'))
[info]         {
[info]           var _url: String = null;
[info]           var _expanded_url: String = null;
[info]           var _display_url: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var req0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         _url = in.readString(_url);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -518939415 => if (in.isCharBufEqualsTo(l, "expanded_url"))
[info]                       {
[info]                         _expanded_url = in.readString(_expanded_url);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1714674802 => if (in.isCharBufEqualsTo(l, "display_url"))
[info]                       {
[info]                         _display_url = in.readString(_display_url);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       _indices = d6(in, _indices)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.Urls(url = _url, expanded_url = _expanded_url, display_url = _display_url, indices = _indices)
[info]           else
[info]             in.requiredKeyError(r2, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d7(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]             do 
[info]               x.+=(d8(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Entities): com.github.plokhotnyuk.jsoniter_scala.macros.Entities = if (in.isNextToken('{'))
[info]         {
[info]           var _hashtags: Seq[String] = Seq.empty[String];
[info]           var _symbols: Seq[String] = Seq.empty[String];
[info]           var _user_mentions: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 149143079 => if (in.isCharBufEqualsTo(l, "hashtags"))
[info]                       _hashtags = d3(in, _hashtags)
[info]                     else
[info]                       in.skip()
[info]                     case -1743438373 => if (in.isCharBufEqualsTo(l, "symbols"))
[info]                       _symbols = d3(in, _symbols)
[info]                     else
[info]                       in.skip()
[info]                     case -553518659 => if (in.isCharBufEqualsTo(l, "user_mentions"))
[info]                       _user_mentions = d4(in, _user_mentions)
[info]                     else
[info]                       in.skip()
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       _urls = d7(in, _urls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Entities(hashtags = _hashtags, symbols = _symbols, user_mentions = _user_mentions, urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d9(in: JsonReader, default: Option[String]): Option[String] = {
[info]         val x = in.readString(null);
[info]         if (x.eq(null))
[info]           None
[info]         else
[info]           Some(x)
[info]       };
[info]       private def d12(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Url): com.github.plokhotnyuk.jsoniter_scala.macros.Url = if (in.isNextToken('{'))
[info]         {
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       _urls = d7(in, _urls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Url(urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d11(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities): com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = if (in.isNextToken('{'))
[info]         {
[info]           var _url: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var _description: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         _url = d12(in, _url);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         _description = d12(in, _description);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities(url = _url, description = _description)
[info]           else
[info]             in.requiredKeyError(r4, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d10(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.User): com.github.plokhotnyuk.jsoniter_scala.macros.User = if (in.isNextToken('{'))
[info]         {
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _name: String = null;
[info]           var _screen_name: String = null;
[info]           var _location: String = null;
[info]           var _description: String = null;
[info]           var _url: String = null;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = null;
[info]           var _protected: Boolean = false;
[info]           var _followers_count: Int = 0;
[info]           var _friends_count: Int = 0;
[info]           var _listed_count: Int = 0;
[info]           var _created_at: String = null;
[info]           var _favourites_count: Int = 0;
[info]           var _utc_offset: Int = 0;
[info]           var _time_zone: String = null;
[info]           var _geo_enabled: Boolean = false;
[info]           var _verified: Boolean = false;
[info]           var _statuses_count: Int = 0;
[info]           var _lang: String = null;
[info]           var _contributors_enabled: Boolean = false;
[info]           var _is_translator: Boolean = false;
[info]           var _is_translation_enabled: Boolean = false;
[info]           var _profile_background_color: String = null;
[info]           var _profile_background_image_url: String = null;
[info]           var _profile_background_image_url_https: String = null;
[info]           var _profile_background_tile: Boolean = false;
[info]           var _profile_image_url: String = null;
[info]           var _profile_image_url_https: String = null;
[info]           var _profile_banner_url: String = null;
[info]           var _profile_link_color: String = null;
[info]           var _profile_sidebar_border_color: String = null;
[info]           var _profile_sidebar_fill_color: String = null;
[info]           var _profile_text_color: String = null;
[info]           var _profile_use_background_image: Boolean = false;
[info]           var _has_extended_profile: Boolean = false;
[info]           var _default_profile: Boolean = false;
[info]           var _default_profile_image: Boolean = false;
[info]           var _following: Boolean = false;
[info]           var _follow_request_sent: Boolean = false;
[info]           var _notifications: Boolean = false;
[info]           var _translator_type: String = null;
[info]           var req0 = -1;
[info]           var req1 = 1023;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = in.readString(_id_str);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         _name = in.readString(_name);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         _screen_name = in.readString(_screen_name);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1901043637 => if (in.isCharBufEqualsTo(l, "location"))
[info]                       {
[info]                         _location = in.readString(_location);
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         _description = in.readString(_description);
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         _url = in.readString(_url);
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         _entities = d11(in, _entities);
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -608539730 => if (in.isCharBufEqualsTo(l, "protected"))
[info]                       {
[info]                         _protected = in.readBoolean();
[info]                         req0.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -460163995 => if (in.isCharBufEqualsTo(l, "followers_count"))
[info]                       {
[info]                         _followers_count = in.readInt();
[info]                         req0.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1666926107 => if (in.isCharBufEqualsTo(l, "friends_count"))
[info]                       {
[info]                         _friends_count = in.readInt();
[info]                         req0.&=(-1025)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1974943731 => if (in.isCharBufEqualsTo(l, "listed_count"))
[info]                       {
[info]                         _listed_count = in.readInt();
[info]                         req0.&=(-2049)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         _created_at = in.readString(_created_at);
[info]                         req0.&=(-4097)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 226316666 => if (in.isCharBufEqualsTo(l, "favourites_count"))
[info]                       {
[info]                         _favourites_count = in.readInt();
[info]                         req0.&=(-8193)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1699658638 => if (in.isCharBufEqualsTo(l, "utc_offset"))
[info]                       {
[info]                         _utc_offset = in.readInt();
[info]                         req0.&=(-16385)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 36848094 => if (in.isCharBufEqualsTo(l, "time_zone"))
[info]                       {
[info]                         _time_zone = in.readString(_time_zone);
[info]                         req0.&=(-32769)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1085743021 => if (in.isCharBufEqualsTo(l, "geo_enabled"))
[info]                       {
[info]                         _geo_enabled = in.readBoolean();
[info]                         req0.&=(-65537)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1994383672 => if (in.isCharBufEqualsTo(l, "verified"))
[info]                       {
[info]                         _verified = in.readBoolean();
[info]                         req0.&=(-131073)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1824078800 => if (in.isCharBufEqualsTo(l, "statuses_count"))
[info]                       {
[info]                         _statuses_count = in.readInt();
[info]                         req0.&=(-262145)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         _lang = in.readString(_lang);
[info]                         req0.&=(-524289)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 647263482 => if (in.isCharBufEqualsTo(l, "contributors_enabled"))
[info]                       {
[info]                         _contributors_enabled = in.readBoolean();
[info]                         req0.&=(-1048577)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 583435343 => if (in.isCharBufEqualsTo(l, "is_translator"))
[info]                       {
[info]                         _is_translator = in.readBoolean();
[info]                         req0.&=(-2097153)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1690715422 => if (in.isCharBufEqualsTo(l, "is_translation_enabled"))
[info]                       {
[info]                         _is_translation_enabled = in.readBoolean();
[info]                         req0.&=(-4194305)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1592986856 => if (in.isCharBufEqualsTo(l, "profile_background_color"))
[info]                       {
[info]                         _profile_background_color = in.readString(_profile_background_color);
[info]                         req0.&=(-8388609)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1189803120 => if (in.isCharBufEqualsTo(l, "profile_background_image_url"))
[info]                       {
[info]                         _profile_background_image_url = in.readString(_profile_background_image_url);
[info]                         req0.&=(-16777217)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 594447228 => if (in.isCharBufEqualsTo(l, "profile_background_image_url_https"))
[info]                       {
[info]                         _profile_background_image_url_https = in.readString(_profile_background_image_url_https);
[info]                         req0.&=(-33554433)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1021718665 => if (in.isCharBufEqualsTo(l, "profile_background_tile"))
[info]                       {
[info]                         _profile_background_tile = in.readBoolean();
[info]                         req0.&=(-67108865)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -174080651 => if (in.isCharBufEqualsTo(l, "profile_image_url"))
[info]                       {
[info]                         _profile_image_url = in.readString(_profile_image_url);
[info]                         req0.&=(-134217729)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -782008927 => if (in.isCharBufEqualsTo(l, "profile_image_url_https"))
[info]                       {
[info]                         _profile_image_url_https = in.readString(_profile_image_url_https);
[info]                         req0.&=(-268435457)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -690137550 => if (in.isCharBufEqualsTo(l, "profile_banner_url"))
[info]                       {
[info]                         _profile_banner_url = in.readString(_profile_banner_url);
[info]                         req0.&=(-536870913)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1512257332 => if (in.isCharBufEqualsTo(l, "profile_link_color"))
[info]                       {
[info]                         _profile_link_color = in.readString(_profile_link_color);
[info]                         req0.&=(-1073741825)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1412739479 => if (in.isCharBufEqualsTo(l, "profile_sidebar_border_color"))
[info]                       {
[info]                         _profile_sidebar_border_color = in.readString(_profile_sidebar_border_color);
[info]                         req0.&=(2147483647)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 486184128 => if (in.isCharBufEqualsTo(l, "profile_sidebar_fill_color"))
[info]                       {
[info]                         _profile_sidebar_fill_color = in.readString(_profile_sidebar_fill_color);
[info]                         req1.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1774134745 => if (in.isCharBufEqualsTo(l, "profile_text_color"))
[info]                       {
[info]                         _profile_text_color = in.readString(_profile_text_color);
[info]                         req1.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -101767272 => if (in.isCharBufEqualsTo(l, "profile_use_background_image"))
[info]                       {
[info]                         _profile_use_background_image = in.readBoolean();
[info]                         req1.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 284519336 => if (in.isCharBufEqualsTo(l, "has_extended_profile"))
[info]                       {
[info]                         _has_extended_profile = in.readBoolean();
[info]                         req1.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -312724053 => if (in.isCharBufEqualsTo(l, "default_profile"))
[info]                       {
[info]                         _default_profile = in.readBoolean();
[info]                         req1.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 545330631 => if (in.isCharBufEqualsTo(l, "default_profile_image"))
[info]                       {
[info]                         _default_profile_image = in.readBoolean();
[info]                         req1.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 765915793 => if (in.isCharBufEqualsTo(l, "following"))
[info]                       {
[info]                         _following = in.readBoolean();
[info]                         req1.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 585125142 => if (in.isCharBufEqualsTo(l, "follow_request_sent"))
[info]                       {
[info]                         _follow_request_sent = in.readBoolean();
[info]                         req1.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1272354024 => if (in.isCharBufEqualsTo(l, "notifications"))
[info]                       {
[info]                         _notifications = in.readBoolean();
[info]                         req1.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -475640257 => if (in.isCharBufEqualsTo(l, "translator_type"))
[info]                       {
[info]                         _translator_type = in.readString(_translator_type);
[info]                         req1.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0).&&(req1.==(0)))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.User(id = _id, id_str = _id_str, name = _name, screen_name = _screen_name, location = _location, description = _description, url = _url, entities = _entities, `protected` = _protected, followers_count = _followers_count, friends_count = _friends_count, listed_count = _listed_count, created_at = _created_at, favourites_count = _favourites_count, utc_offset = _utc_offset, time_zone = _time_zone, geo_enabled = _geo_enabled, verified = _verified, statuses_count = _statuses_count, lang = _lang, contributors_enabled = _contributors_enabled, is_translator = _is_translator, is_translation_enabled = _is_translation_enabled, profile_background_color = _profile_background_color, profile_background_image_url = _profile_background_image_url, profile_background_image_url_https = _profile_background_image_url_https, profile_background_tile = _profile_background_tile, profile_image_url = _profile_image_url, profile_image_url_https = _profile_image_url_https, profile_banner_url = _profile_banner_url, profile_link_color = _profile_link_color, profile_sidebar_border_color = _profile_sidebar_border_color, profile_sidebar_fill_color = _profile_sidebar_fill_color, profile_text_color = _profile_text_color, profile_use_background_image = _profile_use_background_image, has_extended_profile = _has_extended_profile, default_profile = _default_profile, default_profile_image = _default_profile_image, following = _following, follow_request_sent = _follow_request_sent, notifications = _notifications, translator_type = _translator_type)
[info]           else
[info]             in.requiredKeyError(r3, Array(req0, req1))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d13(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus): com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var req0 = 32767;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         _created_at = in.readString(_created_at);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = in.readString(_id_str);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         _text = in.readString(_text);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         _truncated = in.readBoolean();
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         _entities = d2(in, _entities);
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         _source = in.readString(_source);
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         _user = d10(in, _user);
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       _geo = d9(in, _geo)
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       _coordinates = d9(in, _coordinates)
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       _place = d9(in, _place)
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       _contributors = d9(in, _contributors)
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         _is_quote_status = in.readBoolean();
[info]                         req0.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         _retweet_count = in.readInt();
[info]                         req0.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         _favorite_count = in.readInt();
[info]                         req0.&=(-1025)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         _favorited = in.readBoolean();
[info]                         req0.&=(-2049)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         _retweeted = in.readBoolean();
[info]                         req0.&=(-4097)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         _possibly_sensitive = in.readBoolean();
[info]                         req0.&=(-8193)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         _lang = in.readString(_lang);
[info]                         req0.&=(-16385)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]           else
[info]             in.requiredKeyError(r5, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet): com.github.plokhotnyuk.jsoniter_scala.macros.Tweet = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _retweeted_status: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = null;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var req0 = 65535;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         _created_at = in.readString(_created_at);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = in.readString(_id_str);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         _text = in.readString(_text);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         _truncated = in.readBoolean();
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         _entities = d2(in, _entities);
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         _source = in.readString(_source);
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         _user = d10(in, _user);
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       _geo = d9(in, _geo)
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       _coordinates = d9(in, _coordinates)
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       _place = d9(in, _place)
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       _contributors = d9(in, _contributors)
[info]                     else
[info]                       in.skip()
[info]                     case 364396852 => if (in.isCharBufEqualsTo(l, "retweeted_status"))
[info]                       {
[info]                         _retweeted_status = d13(in, _retweeted_status);
[info]                         req0.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         _is_quote_status = in.readBoolean();
[info]                         req0.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         _retweet_count = in.readInt();
[info]                         req0.&=(-1025)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         _favorite_count = in.readInt();
[info]                         req0.&=(-2049)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         _favorited = in.readBoolean();
[info]                         req0.&=(-4097)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         _retweeted = in.readBoolean();
[info]                         req0.&=(-8193)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         _possibly_sensitive = in.readBoolean();
[info]                         req0.&=(-16385)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         _lang = in.readString(_lang);
[info]                         req0.&=(-32769)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.Tweet(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, retweeted_status = _retweeted_status, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]             do 
[info]               x.+=(d1(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e3(x: Seq[String], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e6(x: Seq[Int], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("screen_name");
[info]             out.writeVal(x.screen_name)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("name");
[info]             out.writeVal(x.name)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id");
[info]             out.writeVal(x.id)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id_str");
[info]             out.writeVal(x.id_str)
[info]           };
[info]           {
[info]             val v = x.indices;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("indices");
[info]                 e6(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e4(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e5(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e8(x: com.github.plokhotnyuk.jsoniter_scala.macros.Urls, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("url");
[info]             out.writeVal(x.url)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("expanded_url");
[info]             out.writeVal(x.expanded_url)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("display_url");
[info]             out.writeVal(x.display_url)
[info]           };
[info]           {
[info]             val v = x.indices;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("indices");
[info]                 e6(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e7(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e8(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.Entities, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.hashtags;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("hashtags");
[info]                 e3(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.symbols;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("symbols");
[info]                 e3(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.user_mentions;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("user_mentions");
[info]                 e4(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.urls;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("urls");
[info]                 e7(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e9(x: Option[String], out: JsonWriter): Unit = if (x.eq(null).||(x.isEmpty))
[info]         out.writeNull()
[info]       else
[info]         out.writeVal(x.get);
[info]       private def e12(x: com.github.plokhotnyuk.jsoniter_scala.macros.Url, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.urls;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("urls");
[info]                 e7(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e11(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("url");
[info]             e12(x.url, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("description");
[info]             e12(x.description, out)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e10(x: com.github.plokhotnyuk.jsoniter_scala.macros.User, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("id");
[info]             out.writeVal(x.id)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id_str");
[info]             out.writeVal(x.id_str)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("name");
[info]             out.writeVal(x.name)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("screen_name");
[info]             out.writeVal(x.screen_name)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("location");
[info]             out.writeVal(x.location)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("description");
[info]             out.writeVal(x.description)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("url");
[info]             out.writeVal(x.url)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("entities");
[info]             e11(x.entities, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("protected");
[info]             out.writeVal(x.`protected`)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("followers_count");
[info]             out.writeVal(x.followers_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("friends_count");
[info]             out.writeVal(x.friends_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("listed_count");
[info]             out.writeVal(x.listed_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("created_at");
[info]             out.writeVal(x.created_at)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("favourites_count");
[info]             out.writeVal(x.favourites_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("utc_offset");
[info]             out.writeVal(x.utc_offset)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("time_zone");
[info]             out.writeVal(x.time_zone)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("geo_enabled");
[info]             out.writeVal(x.geo_enabled)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("verified");
[info]             out.writeVal(x.verified)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("statuses_count");
[info]             out.writeVal(x.statuses_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("lang");
[info]             out.writeVal(x.lang)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("contributors_enabled");
[info]             out.writeVal(x.contributors_enabled)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("is_translator");
[info]             out.writeVal(x.is_translator)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("is_translation_enabled");
[info]             out.writeVal(x.is_translation_enabled)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_background_color");
[info]             out.writeVal(x.profile_background_color)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_background_image_url");
[info]             out.writeVal(x.profile_background_image_url)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_background_image_url_https");
[info]             out.writeVal(x.profile_background_image_url_https)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_background_tile");
[info]             out.writeVal(x.profile_background_tile)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_image_url");
[info]             out.writeVal(x.profile_image_url)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_image_url_https");
[info]             out.writeVal(x.profile_image_url_https)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_banner_url");
[info]             out.writeVal(x.profile_banner_url)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_link_color");
[info]             out.writeVal(x.profile_link_color)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_sidebar_border_color");
[info]             out.writeVal(x.profile_sidebar_border_color)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_sidebar_fill_color");
[info]             out.writeVal(x.profile_sidebar_fill_color)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_text_color");
[info]             out.writeVal(x.profile_text_color)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_use_background_image");
[info]             out.writeVal(x.profile_use_background_image)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("has_extended_profile");
[info]             out.writeVal(x.has_extended_profile)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("default_profile");
[info]             out.writeVal(x.default_profile)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("default_profile_image");
[info]             out.writeVal(x.default_profile_image)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("following");
[info]             out.writeVal(x.following)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("follow_request_sent");
[info]             out.writeVal(x.follow_request_sent)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("notifications");
[info]             out.writeVal(x.notifications)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("translator_type");
[info]             out.writeVal(x.translator_type)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e13(x: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("created_at");
[info]             out.writeVal(x.created_at)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id");
[info]             out.writeVal(x.id)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id_str");
[info]             out.writeVal(x.id_str)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("text");
[info]             out.writeVal(x.text)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("truncated");
[info]             out.writeVal(x.truncated)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("entities");
[info]             e2(x.entities, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("source");
[info]             out.writeVal(x.source)
[info]           };
[info]           {
[info]             val v = x.in_reply_to_status_id;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_status_id_str;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_user_id;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_user_id_str;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_screen_name;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("user");
[info]             e10(x.user, out)
[info]           };
[info]           {
[info]             val v = x.geo;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("geo");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.coordinates;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("coordinates");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.place;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("place");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.contributors;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("contributors");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("is_quote_status");
[info]             out.writeVal(x.is_quote_status)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("retweet_count");
[info]             out.writeVal(x.retweet_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("favorite_count");
[info]             out.writeVal(x.favorite_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("favorited");
[info]             out.writeVal(x.favorited)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("retweeted");
[info]             out.writeVal(x.retweeted)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]             out.writeVal(x.possibly_sensitive)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("lang");
[info]             out.writeVal(x.lang)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("created_at");
[info]             out.writeVal(x.created_at)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id");
[info]             out.writeVal(x.id)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id_str");
[info]             out.writeVal(x.id_str)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("text");
[info]             out.writeVal(x.text)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("truncated");
[info]             out.writeVal(x.truncated)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("entities");
[info]             e2(x.entities, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("source");
[info]             out.writeVal(x.source)
[info]           };
[info]           {
[info]             val v = x.in_reply_to_status_id;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_status_id_str;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_user_id;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_user_id_str;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_screen_name;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("user");
[info]             e10(x.user, out)
[info]           };
[info]           {
[info]             val v = x.geo;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("geo");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.coordinates;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("coordinates");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.place;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("place");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.contributors;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("contributors");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("retweeted_status");
[info]             e13(x.retweeted_status, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("is_quote_status");
[info]             out.writeVal(x.is_quote_status)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("retweet_count");
[info]             out.writeVal(x.retweet_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("favorite_count");
[info]             out.writeVal(x.favorite_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("favorited");
[info]             out.writeVal(x.favorited)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("retweeted");
[info]             out.writeVal(x.retweeted)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]             out.writeVal(x.possibly_sensitive)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("lang");
[info]             out.writeVal(x.lang)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e1(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val twitterAPICodec: JsonCodec[Seq[Tweet]] = make[Seq[Tweet]](CodecMakerConfig())
[info]                                                                ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:14:18: local val v1 in value arraysFormat is never used
[warn]     implicit val v1: Format[Array[BigInt]] = Format(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:20:18: local val v1 in value bitSetsFormat is never used
[warn]     implicit val v1: Reads[BitSet] = Reads[BitSet](js => JsSuccess(BitSet(js.as[Array[Int]]: _*)))
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:21:18: local val v2 in value bitSetsFormat is never used
[warn]     implicit val v2: Reads[mutable.BitSet] =
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:28:18: local val v1 in value mapsFormat is never used
[warn]     implicit val v1: OFormat[HashMap[String, Double]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:31:18: local val v2 in value mapsFormat is never used
[warn]     implicit val v2: OFormat[Map[Int, HashMap[Long, Double]]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:43:18: local val v1 in value mutableMapsFormat is never used
[warn]     implicit val v1: OFormat[mutable.HashMap[String, Double]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:46:18: local val v2 in value mutableMapsFormat is never used
[warn]     implicit val v2: OFormat[mutable.Map[Int, mutable.OpenHashMap[Long, Double]]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:63:18: local val v1 in value intAndLongMapsFormat is never used
[warn]     implicit val v1: OFormat[IntMap[Double]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:68:18: local val v2 in value intAndLongMapsFormat is never used
[warn]     implicit val v2: OFormat[mutable.LongMap[LongMap[Double]]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:80:18: local val v1 in value primitivesFormat is never used
[warn]     implicit val v1: Format[Char] = Format(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:87:23: local val v1 in value adtFormat is never used
[warn]     implicit lazy val v1: OFormat[A] = Json.format[A]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:88:23: local val v2 in value adtFormat is never used
[warn]     implicit lazy val v2: OFormat[B] = Json.format[B]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:89:23: local val v3 in value adtFormat is never used
[warn]     implicit lazy val v3: OFormat[C] = Json.format[C]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:94:18: local val v1 in value googleMapsAPIFormat is never used
[warn]     implicit val v1: OFormat[Value] = Json.format[Value]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:95:18: local val v2 in value googleMapsAPIFormat is never used
[warn]     implicit val v2: OFormat[Elements] = Json.format[Elements]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:96:18: local val v3 in value googleMapsAPIFormat is never used
[warn]     implicit val v3: OFormat[Rows] = Json.format[Rows]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:100:18: local val v1 in value twitterAPIFormat is never used
[warn]     implicit val v1: OFormat[Urls] = Json.format[Urls]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:101:18: local val v2 in value twitterAPIFormat is never used
[warn]     implicit val v2: OFormat[Url] = Json.format[Url]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:102:18: local val v3 in value twitterAPIFormat is never used
[warn]     implicit val v3: OFormat[UserEntities] = Json.format[UserEntities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:103:18: local val v4 in value twitterAPIFormat is never used
[warn]     implicit val v4: OFormat[UserMentions] = Json.format[UserMentions]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:104:18: local val v5 in value twitterAPIFormat is never used
[warn]     implicit val v5: OFormat[Entities] = Json.format[Entities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:105:18: local val v6 in value twitterAPIFormat is never used
[warn]     implicit val v6: Format[User] = Jsonx.formatCaseClass[User]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:106:18: local val v7 in value twitterAPIFormat is never used
[warn]     implicit val v7: Format[RetweetedStatus] = Jsonx.formatCaseClass[RetweetedStatus]
[warn]                  ^
[warn] 23 warnings found
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.6.0-SNAPSHOT.jar ...
Processing 307 classes from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes with "reflection" generator
Writing out Java source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/src_managed/jmh and resources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/resource_managed/jmh
[info] Compiling 30 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/test-classes ...
[info] Done packaging.
[info] Compiling 333 Java sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.6.0-SNAPSHOT-tests.jar ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.6.0-SNAPSHOT-jmh.jar ...
[info] Done packaging.
[info] Running (fork) org.openjdk.jmh.Main -prof gc -rf json -rff jdk9.json .*Benchmark.*
[error] WARNING: An illegal reflective access operation has occurred
[error] WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/tmp/sbt_e598a460/target/5f9f9839/jmh-core-1.20.jar) to field java.io.PrintStream.charOut
[error] WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[error] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[error] WARNING: All illegal access operations will be denied in a future release
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce
[info] # Run progress: 0.00% complete, ETA 00:28:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 396089.831 ops/s
[info] # Warmup Iteration   2: 706259.975 ops/s
[info] # Warmup Iteration   3: 708640.134 ops/s
[info] Iteration   1: 720317.782 ops/s
[info]                  ·gc.alloc.rate:                   1904.116 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.182 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1642.511 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3588.462 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 714027.814 ops/s
[info]                  ·gc.alloc.rate:                   1887.065 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.275 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1988.521 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4383.658 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   3: 732999.004 ops/s
[info]                  ·gc.alloc.rate:                   1937.309 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.089 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2006.224 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4307.982 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 735886.443 ops/s
[info]                  ·gc.alloc.rate:                   1944.894 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.178 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2019.882 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4320.395 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 733891.786 ops/s
[info]                  ·gc.alloc.rate:                   1940.909 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.134 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2027.007 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4344.538 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce":
[info]   727424.566 ±(99.9%) 37257.941 ops/s [Average]
[info]   (min, avg, max) = (714027.814, 727424.566, 735886.443), stdev = 9675.769
[info]   CI (99.9%): [690166.625, 764682.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate":
[info]   1922.859 ±(99.9%) 99.161 MB/sec [Average]
[info]   (min, avg, max) = (1887.065, 1922.859, 1944.894), stdev = 25.752
[info]   CI (99.9%): [1823.697, 2022.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4160.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4160.001, 4160.001, 4160.001), stdev = 0.001
[info]   CI (99.9%): [4160.000, 4160.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.125), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.172 ±(99.9%) 0.266 B/op [Average]
[info]   (min, avg, max) = (0.089, 0.172, 0.275), stdev = 0.069
[info]   CI (99.9%): [≈ 0, 0.438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1936.829 ±(99.9%) 636.058 MB/sec [Average]
[info]   (min, avg, max) = (1642.511, 1936.829, 2027.007), stdev = 165.182
[info]   CI (99.9%): [1300.771, 2572.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4189.007 ±(99.9%) 1297.489 B/op [Average]
[info]   (min, avg, max) = (3588.462, 4189.007, 4383.658), stdev = 336.954
[info]   CI (99.9%): [2891.518, 5486.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.000, 14.000), stdev = 3.937
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala
[info] # Run progress: 0.46% complete, ETA 00:45:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 455184.859 ops/s
[info] # Warmup Iteration   2: 1659672.592 ops/s
[info] # Warmup Iteration   3: 1672805.059 ops/s
[info] Iteration   1: 1694992.991 ops/s
[info]                  ·gc.alloc.rate:                   1206.310 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.077 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1309.723 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1216.014 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 1706574.971 ops/s
[info]                  ·gc.alloc.rate:                   1214.690 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.134 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      989.781 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 912.624 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 1664199.630 ops/s
[info]                  ·gc.alloc.rate:                   1184.103 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.079 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1328.043 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1256.149 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1703196.546 ops/s
[info]                  ·gc.alloc.rate:                   1211.920 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.077 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1336.524 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1235.153 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 1710762.776 ops/s
[info]                  ·gc.alloc.rate:                   1217.359 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.115 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1006.492 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 925.997 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala":
[info]   1695945.383 ±(99.9%) 71879.840 ops/s [Average]
[info]   (min, avg, max) = (1664199.630, 1695945.383, 1710762.776), stdev = 18666.966
[info]   CI (99.9%): [1624065.543, 1767825.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1206.876 ±(99.9%) 51.495 MB/sec [Average]
[info]   (min, avg, max) = (1184.103, 1206.876, 1217.359), stdev = 13.373
[info]   CI (99.9%): [1155.382, 1258.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1120.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1120.000, 1120.000, 1120.000), stdev = 0.001
[info]   CI (99.9%): [1120.000, 1120.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.104 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.104, 0.146), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.096 ±(99.9%) 0.103 B/op [Average]
[info]   (min, avg, max) = (0.077, 0.096, 0.134), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1194.113 ±(99.9%) 690.267 MB/sec [Average]
[info]   (min, avg, max) = (989.781, 1194.113, 1336.524), stdev = 179.260
[info]   CI (99.9%): [503.845, 1884.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1109.187 ±(99.9%) 669.926 B/op [Average]
[info]   (min, avg, max) = (912.624, 1109.187, 1256.149), stdev = 173.978
[info]   CI (99.9%): [439.262, 1779.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 6.000), stdev = 1.140
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala
[info] # Run progress: 0.92% complete, ETA 00:45:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3134132.258 ops/s
[info] # Warmup Iteration   2: 4003966.104 ops/s
[info] # Warmup Iteration   3: 4045929.996 ops/s
[info] Iteration   1: 4042444.254 ops/s
[info]                  ·gc.alloc.rate:                   267.067 MB/sec
[info]                  ·gc.alloc.rate.norm:              104.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.749 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 99.593 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 4056019.459 ops/s
[info]                  ·gc.alloc.rate:                   267.972 MB/sec
[info]                  ·gc.alloc.rate.norm:              104.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.751 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 99.257 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 4047277.483 ops/s
[info]                  ·gc.alloc.rate:                   267.400 MB/sec
[info]                  ·gc.alloc.rate.norm:              104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.008 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.767 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 99.476 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 3942565.937 ops/s
[info]                  ·gc.alloc.rate:      260.510 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3922137.880 ops/s
[info]                  ·gc.alloc.rate:                   259.183 MB/sec
[info]                  ·gc.alloc.rate.norm:              104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.262 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      332.414 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 133.385 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala":
[info]   4002089.002 ±(99.9%) 247418.605 ops/s [Average]
[info]   (min, avg, max) = (3922137.880, 4002089.002, 4056019.459), stdev = 64253.826
[info]   CI (99.9%): [3754670.398, 4249507.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   264.426 ±(99.9%) 16.247 MB/sec [Average]
[info]   (min, avg, max) = (259.183, 264.426, 267.972), stdev = 4.219
[info]   CI (99.9%): [248.179, 280.674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   104.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (104.000, 104.000, 104.000), stdev = 0.001
[info]   CI (99.9%): [104.000, 104.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.631 ±(99.9%) 5.414 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.631, 3.146), stdev = 1.406
[info]   CI (99.9%): [≈ 0, 6.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.253 ±(99.9%) 2.173 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.253, 1.262), stdev = 0.564
[info]   CI (99.9%): [≈ 0, 2.426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   219.936 ±(99.9%) 490.380 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 219.936, 332.414), stdev = 127.350
[info]   CI (99.9%): [≈ 0, 710.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   86.342 ±(99.9%) 194.284 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 86.342, 133.385), stdev = 50.455
[info]   CI (99.9%): [≈ 0, 280.627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.095
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson
[info] # Run progress: 1.38% complete, ETA 00:45:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25345.252 ops/s
[info] # Warmup Iteration   2: 170701.975 ops/s
[info] # Warmup Iteration   3: 175818.454 ops/s
[info] Iteration   1: 175738.639 ops/s
[info]                  ·gc.alloc.rate:                   1461.154 MB/sec
[info]                  ·gc.alloc.rate.norm:              13088.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.746 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1641.464 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14703.093 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 175987.556 ops/s
[info]                  ·gc.alloc.rate:                   1463.513 MB/sec
[info]                  ·gc.alloc.rate.norm:              13088.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.117 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1325.673 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11855.317 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 176645.607 ops/s
[info]                  ·gc.alloc.rate:                   1469.109 MB/sec
[info]                  ·gc.alloc.rate.norm:              13088.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.556 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1669.158 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14870.198 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 176969.124 ops/s
[info]                  ·gc.alloc.rate:                   1471.785 MB/sec
[info]                  ·gc.alloc.rate.norm:              13088.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.555 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.728 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11940.343 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 177097.801 ops/s
[info]                  ·gc.alloc.rate:                   1472.548 MB/sec
[info]                  ·gc.alloc.rate.norm:              13088.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.740 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.114 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11982.034 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson":
[info]   176487.745 ±(99.9%) 2310.517 ops/s [Average]
[info]   (min, avg, max) = (175738.639, 176487.745, 177097.801), stdev = 600.034
[info]   CI (99.9%): [174177.228, 178798.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1467.622 ±(99.9%) 19.495 MB/sec [Average]
[info]   (min, avg, max) = (1461.154, 1467.622, 1472.548), stdev = 5.063
[info]   CI (99.9%): [1448.127, 1487.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   13088.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (13088.002, 13088.002, 13088.002), stdev = 0.001
[info]   CI (99.9%): [13088.002, 13088.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.083, 0.125), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.743 ±(99.9%) 0.882 B/op [Average]
[info]   (min, avg, max) = (0.555, 0.743, 1.117), stdev = 0.229
[info]   CI (99.9%): [≈ 0, 1.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1465.427 ±(99.9%) 669.292 MB/sec [Average]
[info]   (min, avg, max) = (1325.673, 1465.427, 1669.158), stdev = 173.813
[info]   CI (99.9%): [796.135, 2134.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   13070.197 ±(99.9%) 6040.405 B/op [Average]
[info]   (min, avg, max) = (11855.317, 13070.197, 14870.198), stdev = 1568.674
[info]   CI (99.9%): [7029.792, 19110.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala
[info] # Run progress: 1.84% complete, ETA 00:45:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_e598a460/target/5e31e36e/jackson-module-afterburner-2.9.4.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 570299.190 ops/s
[info] # Warmup Iteration   2: 2024336.951 ops/s
[info] # Warmup Iteration   3: 2050793.217 ops/s
[info] Iteration   1: 2066967.266 ops/s
[info]                  ·gc.alloc.rate:                   798.505 MB/sec
[info]                  ·gc.alloc.rate.norm:              608.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.063 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      969.613 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 738.286 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 2081630.597 ops/s
[info]                  ·gc.alloc.rate:                   804.026 MB/sec
[info]                  ·gc.alloc.rate.norm:              608.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.079 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      649.396 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 491.070 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 2073598.436 ops/s
[info]                  ·gc.alloc.rate:                   800.915 MB/sec
[info]                  ·gc.alloc.rate.norm:              608.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.380 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 495.242 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 2033326.254 ops/s
[info]                  ·gc.alloc.rate:                   785.689 MB/sec
[info]                  ·gc.alloc.rate.norm:              608.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.081 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      984.803 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 762.083 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 2070415.707 ops/s
[info]                  ·gc.alloc.rate:                   799.855 MB/sec
[info]                  ·gc.alloc.rate.norm:              608.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.079 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.184 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 501.831 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala":
[info]   2065187.652 ±(99.9%) 71697.502 ops/s [Average]
[info]   (min, avg, max) = (2033326.254, 2065187.652, 2081630.597), stdev = 18619.613
[info]   CI (99.9%): [1993490.150, 2136885.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   797.798 ±(99.9%) 27.219 MB/sec [Average]
[info]   (min, avg, max) = (785.689, 797.798, 804.026), stdev = 7.069
[info]   CI (99.9%): [770.579, 825.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   608.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (608.000, 608.000, 608.000), stdev = 0.001
[info]   CI (99.9%): [608.000, 608.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.139 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.083, 0.104), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.064 ±(99.9%) 0.106 B/op [Average]
[info]   (min, avg, max) = (0.016, 0.064, 0.081), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   783.275 ±(99.9%) 682.183 MB/sec [Average]
[info]   (min, avg, max) = (649.396, 783.275, 984.803), stdev = 177.161
[info]   CI (99.9%): [101.092, 1465.458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   597.702 ±(99.9%) 537.178 B/op [Average]
[info]   (min, avg, max) = (491.070, 597.702, 762.083), stdev = 139.503
[info]   CI (99.9%): [60.525, 1134.880] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 1.000
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala
[info] # Run progress: 2.30% complete, ETA 00:44:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5632213.855 ops/s
[info] # Warmup Iteration   2: 12946502.718 ops/s
[info] # Warmup Iteration   3: 13522563.531 ops/s
[info] Iteration   1: 13624825.736 ops/s
[info]                  ·gc.alloc.rate:                   692.520 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.765 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.435 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.497 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 75.954 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 13666023.336 ops/s
[info]                  ·gc.alloc.rate:                   694.548 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.087 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 75.340 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 13670068.966 ops/s
[info]                  ·gc.alloc.rate:                   694.769 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.760 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 75.163 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 13656666.108 ops/s
[info]                  ·gc.alloc.rate:                   694.147 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.827 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 75.238 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 13636328.713 ops/s
[info]                  ·gc.alloc.rate:                   693.072 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      982.158 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 113.369 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala":
[info]   13650782.572 ±(99.9%) 75100.718 ops/s [Average]
[info]   (min, avg, max) = (13624825.736, 13650782.572, 13670068.966), stdev = 19503.418
[info]   CI (99.9%): [13575681.854, 13725883.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   693.811 ±(99.9%) 3.746 MB/sec [Average]
[info]   (min, avg, max) = (692.520, 693.811, 694.769), stdev = 0.973
[info]   CI (99.9%): [690.065, 697.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   80.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (80.000, 80.000, 80.000), stdev = 0.001
[info]   CI (99.9%): [80.000, 80.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.803 ±(99.9%) 6.378 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.803, 3.765), stdev = 1.656
[info]   CI (99.9%): [≈ 0, 7.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.093 ±(99.9%) 0.737 B/op [Average]
[info]   (min, avg, max) = (0.002, 0.093, 0.435), stdev = 0.191
[info]   CI (99.9%): [≈ 0, 0.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   719.866 ±(99.9%) 564.653 MB/sec [Average]
[info]   (min, avg, max) = (652.760, 719.866, 982.158), stdev = 146.639
[info]   CI (99.9%): [155.212, 1284.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   83.013 ±(99.9%) 65.355 B/op [Average]
[info]   (min, avg, max) = (75.163, 83.013, 113.369), stdev = 16.972
[info]   CI (99.9%): [17.658, 148.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 4.000), stdev = 1.140
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson
[info] # Run progress: 2.76% complete, ETA 00:44:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 66690.630 ops/s
[info] # Warmup Iteration   2: 307614.354 ops/s
[info] # Warmup Iteration   3: 312356.719 ops/s
[info] Iteration   1: 310915.895 ops/s
[info]                  ·gc.alloc.rate:                   1014.479 MB/sec
[info]                  ·gc.alloc.rate.norm:              5136.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.211 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      980.761 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4965.296 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 315765.122 ops/s
[info]                  ·gc.alloc.rate:                   1030.548 MB/sec
[info]                  ·gc.alloc.rate.norm:              5136.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.623 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      987.322 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4920.569 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 313998.338 ops/s
[info]                  ·gc.alloc.rate:                   1024.541 MB/sec
[info]                  ·gc.alloc.rate.norm:              5136.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.522 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      991.089 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4968.304 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 315901.593 ops/s
[info]                  ·gc.alloc.rate:                   1031.179 MB/sec
[info]                  ·gc.alloc.rate.norm:              5136.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.104 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      997.501 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4968.265 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 314712.062 ops/s
[info]                  ·gc.alloc.rate:                   1026.965 MB/sec
[info]                  ·gc.alloc.rate.norm:              5136.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.521 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1001.213 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5007.211 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson":
[info]   314258.602 ±(99.9%) 7800.780 ops/s [Average]
[info]   (min, avg, max) = (310915.895, 314258.602, 315901.593), stdev = 2025.838
[info]   CI (99.9%): [306457.822, 322059.382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1025.543 ±(99.9%) 25.992 MB/sec [Average]
[info]   (min, avg, max) = (1014.479, 1025.543, 1031.179), stdev = 6.750
[info]   CI (99.9%): [999.550, 1051.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5136.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5136.001, 5136.001, 5136.001), stdev = 0.001
[info]   CI (99.9%): [5136.001, 5136.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.079, 0.125), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.396 ±(99.9%) 0.866 B/op [Average]
[info]   (min, avg, max) = (0.104, 0.396, 0.623), stdev = 0.225
[info]   CI (99.9%): [≈ 0, 1.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   991.577 ±(99.9%) 31.241 MB/sec [Average]
[info]   (min, avg, max) = (980.761, 991.577, 1001.213), stdev = 8.113
[info]   CI (99.9%): [960.336, 1022.818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4965.929 ±(99.9%) 118.266 B/op [Average]
[info]   (min, avg, max) = (4920.569, 4965.929, 5007.211), stdev = 30.713
[info]   CI (99.9%): [4847.663, 5084.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce
[info] # Run progress: 3.23% complete, ETA 00:44:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 950303.598 ops/s
[info] # Warmup Iteration   2: 1589104.652 ops/s
[info] # Warmup Iteration   3: 1545609.543 ops/s
[info] Iteration   1: 1592406.434 ops/s
[info]                  ·gc.alloc.rate:                   2485.151 MB/sec
[info]                  ·gc.alloc.rate.norm:              2456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.123 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2324.655 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2297.386 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 1584310.625 ops/s
[info]                  ·gc.alloc.rate:                   2471.781 MB/sec
[info]                  ·gc.alloc.rate.norm:              2456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.124 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2346.371 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2331.391 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 1597847.040 ops/s
[info]                  ·gc.alloc.rate:                   2493.536 MB/sec
[info]                  ·gc.alloc.rate.norm:              2456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.103 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2700.697 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2660.043 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 1587975.697 ops/s
[info]                  ·gc.alloc.rate:                   2477.655 MB/sec
[info]                  ·gc.alloc.rate.norm:              2456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.062 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2371.819 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2351.089 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 1582792.519 ops/s
[info]                  ·gc.alloc.rate:                   2469.482 MB/sec
[info]                  ·gc.alloc.rate.norm:              2456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.103 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2377.674 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2364.694 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce":
[info]   1589066.463 ±(99.9%) 23691.952 ops/s [Average]
[info]   (min, avg, max) = (1582792.519, 1589066.463, 1597847.040), stdev = 6152.725
[info]   CI (99.9%): [1565374.512, 1612758.415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate":
[info]   2479.521 ±(99.9%) 38.134 MB/sec [Average]
[info]   (min, avg, max) = (2469.482, 2479.521, 2493.536), stdev = 9.903
[info]   CI (99.9%): [2441.387, 2517.655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2456.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2456.000, 2456.000, 2456.000), stdev = 0.001
[info]   CI (99.9%): [2456.000, 2456.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.104 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.104, 0.125), stdev = 0.025
[info]   CI (99.9%): [0.006, 0.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.103 ±(99.9%) 0.097 B/op [Average]
[info]   (min, avg, max) = (0.062, 0.103, 0.124), stdev = 0.025
[info]   CI (99.9%): [0.006, 0.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2424.243 ±(99.9%) 600.644 MB/sec [Average]
[info]   (min, avg, max) = (2324.655, 2424.243, 2700.697), stdev = 155.985
[info]   CI (99.9%): [1823.599, 3024.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2400.921 ±(99.9%) 566.234 B/op [Average]
[info]   (min, avg, max) = (2297.386, 2400.921, 2660.043), stdev = 147.049
[info]   CI (99.9%): [1834.687, 2967.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.count":
[info]   36.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.200, 8.000), stdev = 0.447
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.200, 8.000), stdev = 0.447
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala
[info] # Run progress: 3.69% complete, ETA 00:44:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 810777.349 ops/s
[info] # Warmup Iteration   2: 2564983.563 ops/s
[info] # Warmup Iteration   3: 2564278.422 ops/s
[info] Iteration   1: 2545451.160 ops/s
[info]                  ·gc.alloc.rate:                   1785.530 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.064 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1987.015 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1228.579 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 2568943.676 ops/s
[info]                  ·gc.alloc.rate:                   1802.089 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.089 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1670.761 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1023.546 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 2542656.502 ops/s
[info]                  ·gc.alloc.rate:                   1783.449 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2017.657 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1248.981 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 2569405.542 ops/s
[info]                  ·gc.alloc.rate:                   1802.755 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.064 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1689.108 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1034.403 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 2557318.356 ops/s
[info]                  ·gc.alloc.rate:                   1793.813 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.090 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1693.949 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1042.539 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala":
[info]   2556755.047 ±(99.9%) 48534.226 ops/s [Average]
[info]   (min, avg, max) = (2542656.502, 2556755.047, 2569405.542), stdev = 12604.184
[info]   CI (99.9%): [2508220.821, 2605289.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1793.527 ±(99.9%) 34.659 MB/sec [Average]
[info]   (min, avg, max) = (1783.449, 1793.527, 1802.755), stdev = 9.001
[info]   CI (99.9%): [1758.868, 1828.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1104.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1104.000, 1104.000, 1104.000), stdev = 0.001
[info]   CI (99.9%): [1104.000, 1104.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.117 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.117, 0.146), stdev = 0.028
[info]   CI (99.9%): [0.009, 0.224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.072 ±(99.9%) 0.065 B/op [Average]
[info]   (min, avg, max) = (0.052, 0.072, 0.090), stdev = 0.017
[info]   CI (99.9%): [0.006, 0.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1811.698 ±(99.9%) 672.243 MB/sec [Average]
[info]   (min, avg, max) = (1670.761, 1811.698, 2017.657), stdev = 174.579
[info]   CI (99.9%): [1139.455, 2483.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1115.610 ±(99.9%) 434.627 B/op [Average]
[info]   (min, avg, max) = (1023.546, 1115.610, 1248.981), stdev = 112.871
[info]   CI (99.9%): [680.983, 1550.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala
[info] # Run progress: 4.15% complete, ETA 00:43:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9925316.441 ops/s
[info] # Warmup Iteration   2: 10967360.940 ops/s
[info] # Warmup Iteration   3: 11214355.226 ops/s
[info] Iteration   1: 11116671.315 ops/s
[info]                  ·gc.alloc.rate:                   1412.407 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1651.064 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 233.794 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 11304472.610 ops/s
[info]                  ·gc.alloc.rate:                   1436.168 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1326.654 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 184.749 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 11288845.837 ops/s
[info]                  ·gc.alloc.rate:                   1434.318 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1334.071 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 186.022 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 11255208.323 ops/s
[info]                  ·gc.alloc.rate:                   1430.218 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1676.328 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 234.416 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 11307484.084 ops/s
[info]                  ·gc.alloc.rate:                   1436.793 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.494 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 187.431 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala":
[info]   11254536.434 ±(99.9%) 307337.433 ops/s [Average]
[info]   (min, avg, max) = (11116671.315, 11254536.434, 11307484.084), stdev = 79814.555
[info]   CI (99.9%): [10947199.000, 11561873.867] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1429.981 ±(99.9%) 39.099 MB/sec [Average]
[info]   (min, avg, max) = (1412.407, 1429.981, 1436.793), stdev = 10.154
[info]   CI (99.9%): [1390.882, 1469.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   200.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (200.000, 200.000, 200.000), stdev = 0.001
[info]   CI (99.9%): [200.000, 200.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.087, 0.146), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.012 ±(99.9%) 0.022 B/op [Average]
[info]   (min, avg, max) = (0.006, 0.012, 0.021), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1466.922 ±(99.9%) 693.080 MB/sec [Average]
[info]   (min, avg, max) = (1326.654, 1466.922, 1676.328), stdev = 179.991
[info]   CI (99.9%): [773.842, 2160.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   205.282 ±(99.9%) 101.386 B/op [Average]
[info]   (min, avg, max) = (184.749, 205.282, 234.416), stdev = 26.330
[info]   CI (99.9%): [103.897, 306.668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 0.707
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson
[info] # Run progress: 4.61% complete, ETA 00:43:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 131652.924 ops/s
[info] # Warmup Iteration   2: 641813.984 ops/s
[info] # Warmup Iteration   3: 648092.226 ops/s
[info] Iteration   1: 653452.479 ops/s
[info]                  ·gc.alloc.rate:                   1726.814 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.401 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1980.111 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4770.207 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 647312.592 ops/s
[info]                  ·gc.alloc.rate:                   1710.869 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.202 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1666.927 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4053.155 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 648565.589 ops/s
[info]                  ·gc.alloc.rate:                   1714.752 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.152 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1678.504 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4072.061 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 651221.635 ops/s
[info]                  ·gc.alloc.rate:                   1720.959 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.252 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1685.689 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4074.744 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 647629.486 ops/s
[info]                  ·gc.alloc.rate:                   1711.693 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.253 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1691.562 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4111.076 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson":
[info]   649636.356 ±(99.9%) 10123.945 ops/s [Average]
[info]   (min, avg, max) = (647312.592, 649636.356, 653452.479), stdev = 2629.156
[info]   CI (99.9%): [639512.411, 659760.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1717.018 ±(99.9%) 26.031 MB/sec [Average]
[info]   (min, avg, max) = (1710.869, 1717.018, 1726.814), stdev = 6.760
[info]   CI (99.9%): [1690.986, 1743.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   4160.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4160.001, 4160.001, 4160.001), stdev = 0.001
[info]   CI (99.9%): [4160.001, 4160.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.104 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.104, 0.167), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.252 ±(99.9%) 0.359 B/op [Average]
[info]   (min, avg, max) = (0.152, 0.252, 0.401), stdev = 0.093
[info]   CI (99.9%): [≈ 0, 0.611] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1740.559 ±(99.9%) 516.866 MB/sec [Average]
[info]   (min, avg, max) = (1666.927, 1740.559, 1980.111), stdev = 134.229
[info]   CI (99.9%): [1223.692, 2257.425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4216.249 ±(99.9%) 1195.166 B/op [Average]
[info]   (min, avg, max) = (4053.155, 4216.249, 4770.207), stdev = 310.381
[info]   CI (99.9%): [3021.083, 5411.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.400, 8.000), stdev = 1.140
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce
[info] # Run progress: 5.07% complete, ETA 00:43:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1243349.122 ops/s
[info] # Warmup Iteration   2: 2083068.824 ops/s
[info] # Warmup Iteration   3: 2112823.761 ops/s
[info] Iteration   1: 2057066.884 ops/s
[info]                  ·gc.alloc.rate:                   1850.365 MB/sec
[info]                  ·gc.alloc.rate.norm:              1416.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.111 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1974.078 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1510.672 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 2125255.114 ops/s
[info]                  ·gc.alloc.rate:                   1911.695 MB/sec
[info]                  ·gc.alloc.rate.norm:              1416.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.077 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1660.683 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1230.074 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 2135851.011 ops/s
[info]                  ·gc.alloc.rate:                   1921.250 MB/sec
[info]                  ·gc.alloc.rate.norm:              1416.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.061 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2007.026 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1479.218 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 2107001.624 ops/s
[info]                  ·gc.alloc.rate:                   1895.492 MB/sec
[info]                  ·gc.alloc.rate.norm:              1416.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.078 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2020.213 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1509.171 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 2130640.367 ops/s
[info]                  ·gc.alloc.rate:                   1916.614 MB/sec
[info]                  ·gc.alloc.rate.norm:              1416.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1690.421 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1248.888 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce":
[info]   2111163.000 ±(99.9%) 123748.341 ops/s [Average]
[info]   (min, avg, max) = (2057066.884, 2111163.000, 2135851.011), stdev = 32137.051
[info]   CI (99.9%): [1987414.659, 2234911.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1899.083 ±(99.9%) 111.338 MB/sec [Average]
[info]   (min, avg, max) = (1850.365, 1899.083, 1921.250), stdev = 28.914
[info]   CI (99.9%): [1787.745, 2010.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1416.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1416.000, 1416.000, 1416.000), stdev = 0.001
[info]   CI (99.9%): [1416.000, 1416.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.100 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.100, 0.146), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.075 ±(99.9%) 0.094 B/op [Average]
[info]   (min, avg, max) = (0.046, 0.075, 0.111), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1870.484 ±(99.9%) 689.452 MB/sec [Average]
[info]   (min, avg, max) = (1660.683, 1870.484, 2020.213), stdev = 179.048
[info]   CI (99.9%): [1181.032, 2559.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1395.605 ±(99.9%) 551.513 B/op [Average]
[info]   (min, avg, max) = (1230.074, 1395.605, 1510.672), stdev = 143.226
[info]   CI (99.9%): [844.091, 1947.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 9.000), stdev = 1.924
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala
[info] # Run progress: 5.53% complete, ETA 00:43:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_e598a460/target/5e31e36e/jackson-module-afterburner-2.9.4.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 2030361.074 ops/s
[info] # Warmup Iteration   2: 6225938.516 ops/s
[info] # Warmup Iteration   3: 6277869.238 ops/s
[info] Iteration   1: 6331478.751 ops/s
[info]                  ·gc.alloc.rate:                   1738.131 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1649.298 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 409.921 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 6211785.190 ops/s
[info]                  ·gc.alloc.rate:                   1705.367 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.042 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1664.689 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 421.695 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 6345925.696 ops/s
[info]                  ·gc.alloc.rate:                   1741.936 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2012.568 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 499.117 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 6342102.054 ops/s
[info]                  ·gc.alloc.rate:                   1741.155 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1686.389 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 418.412 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 6304128.970 ops/s
[info]                  ·gc.alloc.rate:                   1730.228 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1691.233 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 422.264 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala":
[info]   6307084.132 ±(99.9%) 214573.143 ops/s [Average]
[info]   (min, avg, max) = (6211785.190, 6307084.132, 6345925.696), stdev = 55723.964
[info]   CI (99.9%): [6092510.989, 6521657.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1731.363 ±(99.9%) 58.731 MB/sec [Average]
[info]   (min, avg, max) = (1705.367, 1731.363, 1741.936), stdev = 15.252
[info]   CI (99.9%): [1672.632, 1790.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   432.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (432.000, 432.000, 432.000), stdev = 0.001
[info]   CI (99.9%): [432.000, 432.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.125 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.125, 0.167), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.031 ±(99.9%) 0.038 B/op [Average]
[info]   (min, avg, max) = (0.021, 0.031, 0.042), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1740.835 ±(99.9%) 588.534 MB/sec [Average]
[info]   (min, avg, max) = (1649.298, 1740.835, 2012.568), stdev = 152.841
[info]   CI (99.9%): [1152.301, 2329.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   434.282 ±(99.9%) 140.848 B/op [Average]
[info]   (min, avg, max) = (409.921, 434.282, 499.117), stdev = 36.578
[info]   CI (99.9%): [293.434, 575.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala
[info] # Run progress: 5.99% complete, ETA 00:43:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16646810.608 ops/s
[info] # Warmup Iteration   2: 22167396.417 ops/s
[info] # Warmup Iteration   3: 22779859.039 ops/s
[info] Iteration   1: 21774977.969 ops/s
[info]                  ·gc.alloc.rate:                   664.117 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.832 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 47.401 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 21813419.424 ops/s
[info]                  ·gc.alloc.rate:                   665.128 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.361 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 47.151 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 21820623.369 ops/s
[info]                  ·gc.alloc.rate:                   665.399 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.746 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 47.087 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 21816536.744 ops/s
[info]                  ·gc.alloc.rate:                   665.427 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.561 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 47.144 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 21750791.846 ops/s
[info]                  ·gc.alloc.rate:                   663.422 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.218 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 47.406 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala":
[info]   21795269.870 ±(99.9%) 118911.695 ops/s [Average]
[info]   (min, avg, max) = (21750791.846, 21795269.870, 21820623.369), stdev = 30880.989
[info]   CI (99.9%): [21676358.176, 21914181.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   664.699 ±(99.9%) 3.431 MB/sec [Average]
[info]   (min, avg, max) = (663.422, 664.699, 665.427), stdev = 0.891
[info]   CI (99.9%): [661.268, 668.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.067, 0.104), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.005 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.008), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   654.144 ±(99.9%) 5.060 MB/sec [Average]
[info]   (min, avg, max) = (652.746, 654.144, 655.832), stdev = 1.314
[info]   CI (99.9%): [649.083, 659.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   47.238 ±(99.9%) 0.591 B/op [Average]
[info]   (min, avg, max) = (47.087, 47.238, 47.406), stdev = 0.153
[info]   CI (99.9%): [46.647, 47.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 6.45% complete, ETA 00:42:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12760825.099 ops/s
[info] # Warmup Iteration   2: 18610673.982 ops/s
[info] # Warmup Iteration   3: 19396075.889 ops/s
[info] Iteration   1: 19414479.528 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 19325621.731 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 18968780.523 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 19371969.061 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 19374225.838 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc":
[info]   19291015.336 ±(99.9%) 704135.747 ops/s [Average]
[info]   (min, avg, max) = (18968780.523, 19291015.336, 19414479.528), stdev = 182861.818
[info]   CI (99.9%): [18586879.589, 19995151.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson
[info] # Run progress: 6.91% complete, ETA 00:42:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 412096.368 ops/s
[info] # Warmup Iteration   2: 1435862.833 ops/s
[info] # Warmup Iteration   3: 1424808.142 ops/s
[info] Iteration   1: 1438184.560 ops/s
[info]                  ·gc.alloc.rate:                   2112.484 MB/sec
[info]                  ·gc.alloc.rate.norm:              2312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.068 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2326.226 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2545.930 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 1420797.982 ops/s
[info]                  ·gc.alloc.rate:                   2086.932 MB/sec
[info]                  ·gc.alloc.rate.norm:              2312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.161 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2011.868 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2228.841 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 1426811.296 ops/s
[info]                  ·gc.alloc.rate:                   2096.398 MB/sec
[info]                  ·gc.alloc.rate.norm:              2312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.069 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2024.521 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2232.731 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 1435461.223 ops/s
[info]                  ·gc.alloc.rate:                   2109.086 MB/sec
[info]                  ·gc.alloc.rate.norm:              2312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.091 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031.767 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2227.243 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 1415532.388 ops/s
[info]                  ·gc.alloc.rate:                   2079.501 MB/sec
[info]                  ·gc.alloc.rate.norm:              2312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.139 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2375.573 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2641.175 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson":
[info]   1427357.490 ±(99.9%) 36836.317 ops/s [Average]
[info]   (min, avg, max) = (1415532.388, 1427357.490, 1438184.560), stdev = 9566.275
[info]   CI (99.9%): [1390521.173, 1464193.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2096.880 ±(99.9%) 54.241 MB/sec [Average]
[info]   (min, avg, max) = (2079.501, 2096.880, 2112.484), stdev = 14.086
[info]   CI (99.9%): [2042.639, 2151.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2312.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2312.000, 2312.000, 2312.000), stdev = 0.001
[info]   CI (99.9%): [2312.000, 2312.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.096 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.146), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.106 ±(99.9%) 0.163 B/op [Average]
[info]   (min, avg, max) = (0.068, 0.106, 0.161), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   2153.991 ±(99.9%) 695.954 MB/sec [Average]
[info]   (min, avg, max) = (2011.868, 2153.991, 2375.573), stdev = 180.737
[info]   CI (99.9%): [1458.037, 2849.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2375.184 ±(99.9%) 778.508 B/op [Average]
[info]   (min, avg, max) = (2227.243, 2375.184, 2641.175), stdev = 202.176
[info]   CI (99.9%): [1596.676, 3153.692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.count":
[info]   32.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.800, 9.000), stdev = 0.837
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce
[info] # Run progress: 7.37% complete, ETA 00:42:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6407.793 ops/s
[info] # Warmup Iteration   2: 8383.945 ops/s
[info] # Warmup Iteration   3: 8570.652 ops/s
[info] Iteration   1: 8580.361 ops/s
[info]                  ·gc.alloc.rate:                   1264.631 MB/sec
[info]                  ·gc.alloc.rate.norm:              232008.051 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.636 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      983.677 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 180464.548 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 8563.983 ops/s
[info]                  ·gc.alloc.rate:                   1262.240 MB/sec
[info]                  ·gc.alloc.rate.norm:              232008.048 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19.127 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1316.974 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 242068.531 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 8585.278 ops/s
[info]                  ·gc.alloc.rate:                   1265.387 MB/sec
[info]                  ·gc.alloc.rate.norm:              232008.051 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.448 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1324.022 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 242758.715 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 8602.486 ops/s
[info]                  ·gc.alloc.rate:                   1268.231 MB/sec
[info]                  ·gc.alloc.rate.norm:              232008.047 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.425 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1332.370 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 243741.516 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 8563.329 ops/s
[info]                  ·gc.alloc.rate:                   1262.314 MB/sec
[info]                  ·gc.alloc.rate.norm:              232017.179 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.477 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.800 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 246075.629 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce":
[info]   8579.087 ±(99.9%) 62.799 ops/s [Average]
[info]   (min, avg, max) = (8563.329, 8579.087, 8602.486), stdev = 16.309
[info]   CI (99.9%): [8516.288, 8641.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1264.560 ±(99.9%) 9.548 MB/sec [Average]
[info]   (min, avg, max) = (1262.240, 1264.560, 1268.231), stdev = 2.480
[info]   CI (99.9%): [1255.012, 1274.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   232009.875 ±(99.9%) 15.721 B/op [Average]
[info]   (min, avg, max) = (232008.047, 232009.875, 232017.179), stdev = 4.083
[info]   CI (99.9%): [231994.154, 232025.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.104), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   12.223 ±(99.9%) 16.165 B/op [Average]
[info]   (min, avg, max) = (7.636, 12.223, 19.127), stdev = 4.198
[info]   CI (99.9%): [≈ 0, 28.388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1259.169 ±(99.9%) 593.869 MB/sec [Average]
[info]   (min, avg, max) = (983.677, 1259.169, 1338.800), stdev = 154.226
[info]   CI (99.9%): [665.299, 1853.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   231021.788 ±(99.9%) 108984.620 B/op [Average]
[info]   (min, avg, max) = (180464.548, 231021.788, 246075.629), stdev = 28302.960
[info]   CI (99.9%): [122037.168, 340006.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala
[info] # Run progress: 7.83% complete, ETA 00:42:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15496.951 ops/s
[info] # Warmup Iteration   2: 24823.593 ops/s
[info] # Warmup Iteration   3: 24760.090 ops/s
[info] Iteration   1: 24740.097 ops/s
[info]                  ·gc.alloc.rate:                   915.449 MB/sec
[info]                  ·gc.alloc.rate.norm:              58248.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.973 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      980.626 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62395.060 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 24359.157 ops/s
[info]                  ·gc.alloc.rate:                   901.537 MB/sec
[info]                  ·gc.alloc.rate.norm:              58242.557 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.690 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      988.365 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63852.003 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 24683.100 ops/s
[info]                  ·gc.alloc.rate:                   913.012 MB/sec
[info]                  ·gc.alloc.rate.norm:              58216.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.982 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      662.143 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 42219.976 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 24554.672 ops/s
[info]                  ·gc.alloc.rate:                   908.477 MB/sec
[info]                  ·gc.alloc.rate.norm:              58216.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.669 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      997.137 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63897.467 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 24914.263 ops/s
[info]                  ·gc.alloc.rate:                   921.488 MB/sec
[info]                  ·gc.alloc.rate.norm:              58216.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.630 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1002.134 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63310.964 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala":
[info]   24650.258 ±(99.9%) 800.168 ops/s [Average]
[info]   (min, avg, max) = (24359.157, 24650.258, 24914.263), stdev = 207.801
[info]   CI (99.9%): [23850.090, 25450.426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   911.992 ±(99.9%) 28.869 MB/sec [Average]
[info]   (min, avg, max) = (901.537, 911.992, 921.488), stdev = 7.497
[info]   CI (99.9%): [883.123, 940.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   58227.725 ±(99.9%) 62.178 B/op [Average]
[info]   (min, avg, max) = (58216.016, 58227.725, 58248.016), stdev = 16.147
[info]   CI (99.9%): [58165.547, 58289.903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.050, 0.062), stdev = 0.011
[info]   CI (99.9%): [0.006, 0.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3.189 ±(99.9%) 2.773 B/op [Average]
[info]   (min, avg, max) = (2.630, 3.189, 3.982), stdev = 0.720
[info]   CI (99.9%): [0.415, 5.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   926.081 ±(99.9%) 569.032 MB/sec [Average]
[info]   (min, avg, max) = (662.143, 926.081, 1002.134), stdev = 147.776
[info]   CI (99.9%): [357.049, 1495.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   59135.094 ±(99.9%) 36485.533 B/op [Average]
[info]   (min, avg, max) = (42219.976, 59135.094, 63897.467), stdev = 9475.177
[info]   CI (99.9%): [22649.561, 95620.626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala
[info] # Run progress: 8.29% complete, ETA 00:42:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26190.554 ops/s
[info] # Warmup Iteration   2: 27977.084 ops/s
[info] # Warmup Iteration   3: 28858.781 ops/s
[info] Iteration   1: 28807.617 ops/s
[info]                  ·gc.alloc.rate:                   522.786 MB/sec
[info]                  ·gc.alloc.rate.norm:              28568.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.573 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     140.614 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      331.653 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18123.446 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 28656.235 ops/s
[info]                  ·gc.alloc.rate:                   520.113 MB/sec
[info]                  ·gc.alloc.rate.norm:              28568.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.573 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      662.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36365.952 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 28802.057 ops/s
[info]                  ·gc.alloc.rate:                   522.715 MB/sec
[info]                  ·gc.alloc.rate.norm:              28568.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.346 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18054.421 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 28941.794 ops/s
[info]                  ·gc.alloc.rate:                   525.480 MB/sec
[info]                  ·gc.alloc.rate.norm:              28568.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.528 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.974 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35934.204 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 28798.479 ops/s
[info]                  ·gc.alloc.rate:                   522.667 MB/sec
[info]                  ·gc.alloc.rate.norm:              28568.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.350 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18056.301 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala":
[info]   28801.236 ±(99.9%) 389.043 ops/s [Average]
[info]   (min, avg, max) = (28656.235, 28801.236, 28941.794), stdev = 101.033
[info]   CI (99.9%): [28412.193, 29190.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   522.752 ±(99.9%) 7.310 MB/sec [Average]
[info]   (min, avg, max) = (520.113, 522.752, 525.480), stdev = 1.898
[info]   CI (99.9%): [515.442, 530.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   28568.015 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (28568.014, 28568.015, 28568.018), stdev = 0.001
[info]   CI (99.9%): [28568.010, 28568.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.548 ±(99.9%) 4.362 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.548, 2.573), stdev = 1.133
[info]   CI (99.9%): [≈ 0, 4.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   29.943 ±(99.9%) 238.389 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 29.943, 140.614), stdev = 61.909
[info]   CI (99.9%): [≈ 0, 268.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   463.081 ±(99.9%) 697.575 MB/sec [Average]
[info]   (min, avg, max) = (330.346, 463.081, 662.083), stdev = 181.158
[info]   CI (99.9%): [≈ 0, 1160.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   25306.865 ±(99.9%) 38120.104 B/op [Average]
[info]   (min, avg, max) = (18054.421, 25306.865, 36365.952), stdev = 9899.670
[info]   CI (99.9%): [≈ 0, 63426.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 3.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala
[info] # Run progress: 8.76% complete, ETA 00:41:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8221.650 ops/s
[info] # Warmup Iteration   2: 15230.428 ops/s
[info] # Warmup Iteration   3: 15367.466 ops/s
[info] Iteration   1: 15363.548 ops/s
[info]                  ·gc.alloc.rate:                   1533.255 MB/sec
[info]                  ·gc.alloc.rate.norm:              157088.044 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.529 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1322.700 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 135515.841 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 15239.471 ops/s
[info]                  ·gc.alloc.rate:                   1521.002 MB/sec
[info]                  ·gc.alloc.rate.norm:              157088.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.899 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1665.270 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 171987.928 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 15432.363 ops/s
[info]                  ·gc.alloc.rate:                   1540.850 MB/sec
[info]                  ·gc.alloc.rate.norm:              157088.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.369 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.721 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 136787.028 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 15384.941 ops/s
[info]                  ·gc.alloc.rate:                   1535.884 MB/sec
[info]                  ·gc.alloc.rate.norm:              157088.048 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.647 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1683.930 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 172230.039 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 15350.469 ops/s
[info]                  ·gc.alloc.rate:                   1532.349 MB/sec
[info]                  ·gc.alloc.rate.norm:              157088.035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.671 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.683 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 138567.194 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala":
[info]   15354.158 ±(99.9%) 274.441 ops/s [Average]
[info]   (min, avg, max) = (15239.471, 15354.158, 15432.363), stdev = 71.271
[info]   CI (99.9%): [15079.717, 15628.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1532.668 ±(99.9%) 28.154 MB/sec [Average]
[info]   (min, avg, max) = (1521.002, 1532.668, 1540.850), stdev = 7.311
[info]   CI (99.9%): [1504.514, 1560.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   157088.033 ±(99.9%) 0.056 B/op [Average]
[info]   (min, avg, max) = (157088.012, 157088.033, 157088.048), stdev = 0.015
[info]   CI (99.9%): [157087.977, 157088.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.096 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.125), stdev = 0.024
[info]   CI (99.9%): [0.004, 0.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   9.823 ±(99.9%) 9.523 B/op [Average]
[info]   (min, avg, max) = (6.369, 9.823, 12.899), stdev = 2.473
[info]   CI (99.9%): [0.300, 19.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1473.061 ±(99.9%) 710.028 MB/sec [Average]
[info]   (min, avg, max) = (1322.700, 1473.061, 1683.930), stdev = 184.392
[info]   CI (99.9%): [763.033, 2183.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   151017.606 ±(99.9%) 74257.263 B/op [Average]
[info]   (min, avg, max) = (135515.841, 151017.606, 172230.039), stdev = 19284.375
[info]   CI (99.9%): [76760.343, 225274.869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala
[info] # Run progress: 9.22% complete, ETA 00:41:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15431.571 ops/s
[info] # Warmup Iteration   2: 17438.060 ops/s
[info] # Warmup Iteration   3: 17675.709 ops/s
[info] Iteration   1: 17626.210 ops/s
[info]                  ·gc.alloc.rate:                   1597.611 MB/sec
[info]                  ·gc.alloc.rate.norm:              142648.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.153 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1641.414 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 146559.150 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 17730.618 ops/s
[info]                  ·gc.alloc.rate:                   1607.224 MB/sec
[info]                  ·gc.alloc.rate.norm:              142648.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.239 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1655.171 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 146903.523 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 17631.798 ops/s
[info]                  ·gc.alloc.rate:                   1597.803 MB/sec
[info]                  ·gc.alloc.rate.norm:              142648.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.432 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1666.695 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 148798.494 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 17620.212 ops/s
[info]                  ·gc.alloc.rate:                   1597.260 MB/sec
[info]                  ·gc.alloc.rate.norm:              142648.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.297 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.805 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 119833.857 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 17766.571 ops/s
[info]                  ·gc.alloc.rate:                   1610.157 MB/sec
[info]                  ·gc.alloc.rate.norm:              142648.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.064 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1684.139 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 149202.274 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala":
[info]   17675.082 ±(99.9%) 263.476 ops/s [Average]
[info]   (min, avg, max) = (17620.212, 17675.082, 17766.571), stdev = 68.424
[info]   CI (99.9%): [17411.606, 17938.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1602.011 ±(99.9%) 23.829 MB/sec [Average]
[info]   (min, avg, max) = (1597.260, 1602.011, 1610.157), stdev = 6.188
[info]   CI (99.9%): [1578.182, 1625.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   142648.025 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (142648.023, 142648.025, 142648.029), stdev = 0.003
[info]   CI (99.9%): [142648.015, 142648.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.108 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.108, 0.125), stdev = 0.017
[info]   CI (99.9%): [0.041, 0.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   9.637 ±(99.9%) 5.924 B/op [Average]
[info]   (min, avg, max) = (7.432, 9.637, 11.153), stdev = 1.538
[info]   CI (99.9%): [3.713, 15.561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1597.845 ±(99.9%) 554.439 MB/sec [Average]
[info]   (min, avg, max) = (1341.805, 1597.845, 1684.139), stdev = 143.986
[info]   CI (99.9%): [1043.405, 2152.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   142259.460 ±(99.9%) 48475.461 B/op [Average]
[info]   (min, avg, max) = (119833.857, 142259.460, 149202.274), stdev = 12588.923
[info]   CI (99.9%): [93783.999, 190734.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 5.000), stdev = 0.894
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 9.68% complete, ETA 00:41:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14820.069 ops/s
[info] # Warmup Iteration   2: 17666.911 ops/s
[info] # Warmup Iteration   3: 17362.449 ops/s
[info] Iteration   1: 17742.135 ops/s
[info]                  ·gc.alloc.rate:                   1549.820 MB/sec
[info]                  ·gc.alloc.rate.norm:              137440.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.540 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1639.755 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 145415.617 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 17798.352 ops/s
[info]                  ·gc.alloc.rate:                   1554.119 MB/sec
[info]                  ·gc.alloc.rate.norm:              137440.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.363 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1651.786 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 146077.322 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 17820.692 ops/s
[info]                  ·gc.alloc.rate:                   1556.338 MB/sec
[info]                  ·gc.alloc.rate.norm:              137440.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.354 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1331.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 117547.823 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 17591.959 ops/s
[info]                  ·gc.alloc.rate:                   1536.401 MB/sec
[info]                  ·gc.alloc.rate.norm:              137440.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.587 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1674.151 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 149762.517 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 17808.721 ops/s
[info]                  ·gc.alloc.rate:                   1555.044 MB/sec
[info]                  ·gc.alloc.rate.norm:              137440.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1682.480 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 148703.289 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   17752.372 ±(99.9%) 364.259 ops/s [Average]
[info]   (min, avg, max) = (17591.959, 17752.372, 17820.692), stdev = 94.597
[info]   CI (99.9%): [17388.113, 18116.631] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1550.344 ±(99.9%) 31.456 MB/sec [Average]
[info]   (min, avg, max) = (1536.401, 1550.344, 1556.338), stdev = 8.169
[info]   CI (99.9%): [1518.888, 1581.800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   137440.024 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (137440.023, 137440.024, 137440.029), stdev = 0.003
[info]   CI (99.9%): [137440.014, 137440.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.083, 0.125), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   7.376 ±(99.9%) 8.607 B/op [Average]
[info]   (min, avg, max) = (5.540, 7.376, 11.038), stdev = 2.235
[info]   CI (99.9%): [≈ 0, 15.983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   1595.851 ±(99.9%) 573.713 MB/sec [Average]
[info]   (min, avg, max) = (1331.083, 1595.851, 1682.480), stdev = 148.991
[info]   CI (99.9%): [1022.138, 2169.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   141501.313 ±(99.9%) 52024.582 B/op [Average]
[info]   (min, avg, max) = (117547.823, 141501.313, 149762.517), stdev = 13510.619
[info]   CI (99.9%): [89476.732, 193525.895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce
[info] # Run progress: 10.14% complete, ETA 00:41:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 38349.653 ops/s
[info] # Warmup Iteration   2: 47100.205 ops/s
[info] # Warmup Iteration   3: 47253.327 ops/s
[info] Iteration   1: 47120.406 ops/s
[info]                  ·gc.alloc.rate:                   1634.486 MB/sec
[info]                  ·gc.alloc.rate.norm:              54600.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.781 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1642.857 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54879.638 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 47473.115 ops/s
[info]                  ·gc.alloc.rate:                   1646.622 MB/sec
[info]                  ·gc.alloc.rate.norm:              54600.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.451 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1656.036 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54912.159 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 47492.404 ops/s
[info]                  ·gc.alloc.rate:                   1647.241 MB/sec
[info]                  ·gc.alloc.rate.norm:              54600.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.759 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1668.019 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55288.713 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 46436.569 ops/s
[info]                  ·gc.alloc.rate:                   1610.712 MB/sec
[info]                  ·gc.alloc.rate.norm:              54600.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.117 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1678.402 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 56894.572 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 47205.413 ops/s
[info]                  ·gc.alloc.rate:                   1637.621 MB/sec
[info]                  ·gc.alloc.rate.norm:              54600.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.388 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1685.903 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 56209.803 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce":
[info]   47145.581 ±(99.9%) 1650.032 ops/s [Average]
[info]   (min, avg, max) = (46436.569, 47145.581, 47492.404), stdev = 428.508
[info]   CI (99.9%): [45495.550, 48795.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1635.336 ±(99.9%) 57.159 MB/sec [Average]
[info]   (min, avg, max) = (1610.712, 1635.336, 1647.241), stdev = 14.844
[info]   CI (99.9%): [1578.178, 1692.495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   54600.009 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (54600.009, 54600.009, 54600.009), stdev = 0.001
[info]   CI (99.9%): [54600.008, 54600.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2.499 ±(99.9%) 3.004 B/op [Average]
[info]   (min, avg, max) = (1.388, 2.499, 3.451), stdev = 0.780
[info]   CI (99.9%): [≈ 0, 5.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1666.244 ±(99.9%) 66.378 MB/sec [Average]
[info]   (min, avg, max) = (1642.857, 1666.244, 1685.903), stdev = 17.238
[info]   CI (99.9%): [1599.865, 1732.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   55636.977 ±(99.9%) 3406.181 B/op [Average]
[info]   (min, avg, max) = (54879.638, 55636.977, 56894.572), stdev = 884.574
[info]   CI (99.9%): [52230.796, 59043.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala
[info] # Run progress: 10.60% complete, ETA 00:41:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 70421.837 ops/s
[info] # Warmup Iteration   2: 103225.659 ops/s
[info] # Warmup Iteration   3: 104880.442 ops/s
[info] Iteration   1: 105778.902 ops/s
[info]                  ·gc.alloc.rate:                   246.189 MB/sec
[info]                  ·gc.alloc.rate.norm:              3664.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.310 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.736 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3806.083 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 105373.828 ops/s
[info]                  ·gc.alloc.rate:                   245.287 MB/sec
[info]                  ·gc.alloc.rate.norm:              3664.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.773 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3820.638 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 105085.354 ops/s
[info]                  ·gc.alloc.rate:                   244.604 MB/sec
[info]                  ·gc.alloc.rate.norm:              3664.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.312 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.755 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3831.034 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 104929.645 ops/s
[info]                  ·gc.alloc.rate:                   244.244 MB/sec
[info]                  ·gc.alloc.rate.norm:              3664.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.498 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      323.688 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4855.767 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 104997.371 ops/s
[info]                  ·gc.alloc.rate:      244.389 MB/sec
[info]                  ·gc.alloc.rate.norm: 3664.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala":
[info]   105233.020 ±(99.9%) 1343.850 ops/s [Average]
[info]   (min, avg, max) = (104929.645, 105233.020, 105778.902), stdev = 348.994
[info]   CI (99.9%): [103889.170, 106576.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   244.943 ±(99.9%) 3.094 MB/sec [Average]
[info]   (min, avg, max) = (244.244, 244.943, 246.189), stdev = 0.803
[info]   CI (99.9%): [241.849, 248.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3664.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3664.004, 3664.004, 3664.004), stdev = 0.001
[info]   CI (99.9%): [3664.003, 3664.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.272 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.167), stdev = 0.071
[info]   CI (99.9%): [≈ 0, 0.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.624 ±(99.9%) 4.078 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.624, 2.498), stdev = 1.059
[info]   CI (99.9%): [≈ 0, 4.702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   218.190 ±(99.9%) 483.137 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 218.190, 323.688), stdev = 125.469
[info]   CI (99.9%): [≈ 0, 701.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3262.705 ±(99.9%) 7232.817 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3262.705, 4855.767), stdev = 1878.340
[info]   CI (99.9%): [≈ 0, 10495.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala
[info] # Run progress: 11.06% complete, ETA 00:40:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 216851.214 ops/s
[info] # Warmup Iteration   2: 230753.206 ops/s
[info] # Warmup Iteration   3: 234016.485 ops/s
[info] Iteration   1: 233243.528 ops/s
[info]                  ·gc.alloc.rate:                   317.715 MB/sec
[info]                  ·gc.alloc.rate.norm:              2144.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.044 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.298 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.562 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3452.117 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 235776.473 ops/s
[info]                  ·gc.alloc.rate:                   321.112 MB/sec
[info]                  ·gc.alloc.rate.norm:              2144.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.738 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1707.511 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 233282.775 ops/s
[info]                  ·gc.alloc.rate:                   317.752 MB/sec
[info]                  ·gc.alloc.rate.norm:              2144.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.233 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21.813 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.019 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2226.767 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 233183.718 ops/s
[info]                  ·gc.alloc.rate:                   317.608 MB/sec
[info]                  ·gc.alloc.rate.norm:              2144.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.422 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.030 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2227.856 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 227907.128 ops/s
[info]                  ·gc.alloc.rate:                   310.466 MB/sec
[info]                  ·gc.alloc.rate.norm:              2144.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.396 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2267.823 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala":
[info]   232678.725 ±(99.9%) 11110.806 ops/s [Average]
[info]   (min, avg, max) = (227907.128, 232678.725, 235776.473), stdev = 2885.441
[info]   CI (99.9%): [221567.919, 243789.530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   316.931 ±(99.9%) 15.040 MB/sec [Average]
[info]   (min, avg, max) = (310.466, 316.931, 321.112), stdev = 3.906
[info]   CI (99.9%): [301.890, 331.971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   2144.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2144.002, 2144.002, 2144.002), stdev = 0.001
[info]   CI (99.9%): [2144.002, 2144.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.668 ±(99.9%) 5.522 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.668, 3.233), stdev = 1.434
[info]   CI (99.9%): [≈ 0, 6.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4.506 ±(99.9%) 37.260 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.506, 21.813), stdev = 9.676
[info]   CI (99.9%): [≈ 0, 41.766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   351.149 ±(99.9%) 366.549 MB/sec [Average]
[info]   (min, avg, max) = (255.738, 351.149, 511.562), stdev = 95.192
[info]   CI (99.9%): [≈ 0, 717.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2376.415 ±(99.9%) 2481.220 B/op [Average]
[info]   (min, avg, max) = (1707.511, 2376.415, 3452.117), stdev = 644.365
[info]   CI (99.9%): [≈ 0, 4857.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.600, 5.000), stdev = 1.673
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson
[info] # Run progress: 11.52% complete, ETA 00:40:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7313.580 ops/s
[info] # Warmup Iteration   2: 12745.105 ops/s
[info] # Warmup Iteration   3: 12922.499 ops/s
[info] Iteration   1: 12943.655 ops/s
[info]                  ·gc.alloc.rate:                   3946.401 MB/sec
[info]                  ·gc.alloc.rate.norm:              479960.034 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17.718 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4057.810 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 493509.468 B/op
[info]                  ·gc.count:                        12.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 12919.550 ops/s
[info]                  ·gc.alloc.rate:                   3940.310 MB/sec
[info]                  ·gc.alloc.rate.norm:              479960.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22.822 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4075.726 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 496454.726 B/op
[info]                  ·gc.count:                        12.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   3: 12730.207 ops/s
[info]                  ·gc.alloc.rate:                   3881.522 MB/sec
[info]                  ·gc.alloc.rate.norm:              479962.080 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15.442 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3743.795 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 462931.644 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   4: 12863.559 ops/s
[info]                  ·gc.alloc.rate:                   3922.610 MB/sec
[info]                  ·gc.alloc.rate.norm:              479960.034 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.187 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3744.036 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 458110.189 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   5: 12986.579 ops/s
[info]                  ·gc.alloc.rate:                   3961.572 MB/sec
[info]                  ·gc.alloc.rate.norm:              479960.031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20.182 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4085.911 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 495024.100 B/op
[info]                  ·gc.count:                        12.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson":
[info]   12888.710 ±(99.9%) 381.700 ops/s [Average]
[info]   (min, avg, max) = (12730.207, 12888.710, 12986.579), stdev = 99.126
[info]   CI (99.9%): [12507.010, 13270.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3930.483 ±(99.9%) 118.304 MB/sec [Average]
[info]   (min, avg, max) = (3881.522, 3930.483, 3961.572), stdev = 30.723
[info]   CI (99.9%): [3812.179, 4048.787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   479960.442 ±(99.9%) 3.526 B/op [Average]
[info]   (min, avg, max) = (479960.031, 479960.442, 479962.080), stdev = 0.916
[info]   CI (99.9%): [479956.916, 479963.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.142 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.142, 0.187), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   17.270 ±(99.9%) 18.569 B/op [Average]
[info]   (min, avg, max) = (10.187, 17.270, 22.822), stdev = 4.822
[info]   CI (99.9%): [≈ 0, 35.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   3941.455 ±(99.9%) 695.461 MB/sec [Average]
[info]   (min, avg, max) = (3743.795, 3941.455, 4085.911), stdev = 180.609
[info]   CI (99.9%): [3245.994, 4636.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   481206.025 ±(99.9%) 73116.808 B/op [Average]
[info]   (min, avg, max) = (458110.189, 481206.025, 496454.726), stdev = 18988.203
[info]   CI (99.9%): [408089.218, 554322.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   58.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (11.000, 11.600, 12.000), stdev = 0.548
[info]   CI (99.9%): [58.000, 58.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   71.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (12.000, 14.200, 17.000), stdev = 1.789
[info]   CI (99.9%): [71.000, 71.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce
[info] # Run progress: 11.98% complete, ETA 00:40:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 36912.620 ops/s
[info] # Warmup Iteration   2: 44713.055 ops/s
[info] # Warmup Iteration   3: 45606.978 ops/s
[info] Iteration   1: 45635.552 ops/s
[info]                  ·gc.alloc.rate:                   801.083 MB/sec
[info]                  ·gc.alloc.rate.norm:              27632.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.154 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.691 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22513.462 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 45915.674 ops/s
[info]                  ·gc.alloc.rate:                   806.047 MB/sec
[info]                  ·gc.alloc.rate.norm:              27632.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.854 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      977.743 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33517.900 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 45937.599 ops/s
[info]                  ·gc.alloc.rate:                   806.663 MB/sec
[info]                  ·gc.alloc.rate.norm:              27632.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.713 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.222 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22375.920 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 46142.312 ops/s
[info]                  ·gc.alloc.rate:                   810.042 MB/sec
[info]                  ·gc.alloc.rate.norm:              27632.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.420 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      982.816 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33525.621 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 46165.859 ops/s
[info]                  ·gc.alloc.rate:                   810.434 MB/sec
[info]                  ·gc.alloc.rate.norm:              27632.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.129 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.406 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22414.496 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce":
[info]   45959.399 ±(99.9%) 824.404 ops/s [Average]
[info]   (min, avg, max) = (45635.552, 45959.399, 46165.859), stdev = 214.095
[info]   CI (99.9%): [45134.995, 46783.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   806.854 ±(99.9%) 14.532 MB/sec [Average]
[info]   (min, avg, max) = (801.083, 806.854, 810.434), stdev = 3.774
[info]   CI (99.9%): [792.322, 821.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   27632.009 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (27632.009, 27632.009, 27632.010), stdev = 0.001
[info]   CI (99.9%): [27632.008, 27632.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.054, 0.083), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1.854 ±(99.9%) 3.137 B/op [Average]
[info]   (min, avg, max) = (0.713, 1.854, 2.854), stdev = 0.815
[info]   CI (99.9%): [≈ 0, 4.991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   784.775 ±(99.9%) 687.294 MB/sec [Average]
[info]   (min, avg, max) = (652.691, 784.775, 982.816), stdev = 178.488
[info]   CI (99.9%): [97.482, 1472.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   26869.480 ±(99.9%) 23384.505 B/op [Average]
[info]   (min, avg, max) = (22375.920, 26869.480, 33525.621), stdev = 6072.882
[info]   CI (99.9%): [3484.975, 50253.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala
[info] # Run progress: 12.44% complete, ETA 00:40:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 88394.433 ops/s
[info] # Warmup Iteration   2: 130575.780 ops/s
[info] # Warmup Iteration   3: 133813.113 ops/s
[info] Iteration   1: 134249.907 ops/s
[info]                  ·gc.alloc.rate:                   959.170 MB/sec
[info]                  ·gc.alloc.rate.norm:              11248.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.732 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      975.305 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11437.208 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 133816.673 ops/s
[info]                  ·gc.alloc.rate:                   956.253 MB/sec
[info]                  ·gc.alloc.rate.norm:              11247.990 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.490 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.746 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7689.724 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 133905.898 ops/s
[info]                  ·gc.alloc.rate:                   956.773 MB/sec
[info]                  ·gc.alloc.rate.norm:              11248.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.979 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      986.333 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11595.516 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 133961.467 ops/s
[info]                  ·gc.alloc.rate:                   957.421 MB/sec
[info]                  ·gc.alloc.rate.norm:              11248.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.734 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      993.604 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11673.106 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 134338.665 ops/s
[info]                  ·gc.alloc.rate:                   959.956 MB/sec
[info]                  ·gc.alloc.rate.norm:              11248.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.244 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      998.096 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11694.896 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala":
[info]   134054.522 ±(99.9%) 874.344 ops/s [Average]
[info]   (min, avg, max) = (133816.673, 134054.522, 134338.665), stdev = 227.064
[info]   CI (99.9%): [133180.178, 134928.866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   957.915 ±(99.9%) 6.103 MB/sec [Average]
[info]   (min, avg, max) = (956.253, 957.915, 959.956), stdev = 1.585
[info]   CI (99.9%): [951.811, 964.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   11248.003 ±(99.9%) 0.037 B/op [Average]
[info]   (min, avg, max) = (11247.990, 11248.003, 11248.018), stdev = 0.010
[info]   CI (99.9%): [11247.965, 11248.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.054, 0.083), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.636 ±(99.9%) 1.074 B/op [Average]
[info]   (min, avg, max) = (0.244, 0.636, 0.979), stdev = 0.279
[info]   CI (99.9%): [≈ 0, 1.710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   921.417 ±(99.9%) 577.136 MB/sec [Average]
[info]   (min, avg, max) = (653.746, 921.417, 998.096), stdev = 149.880
[info]   CI (99.9%): [344.280, 1498.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   10818.090 ±(99.9%) 6745.282 B/op [Average]
[info]   (min, avg, max) = (7689.724, 10818.090, 11694.896), stdev = 1751.728
[info]   CI (99.9%): [4072.808, 17563.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala
[info] # Run progress: 12.90% complete, ETA 00:40:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 261992.923 ops/s
[info] # Warmup Iteration   2: 285903.749 ops/s
[info] # Warmup Iteration   3: 288602.895 ops/s
[info] Iteration   1: 291670.315 ops/s
[info]                  ·gc.alloc.rate:                   1047.898 MB/sec
[info]                  ·gc.alloc.rate.norm:              5656.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.449 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      978.987 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5284.056 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 291002.003 ops/s
[info]                  ·gc.alloc.rate:                   1045.569 MB/sec
[info]                  ·gc.alloc.rate.norm:              5656.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.563 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1308.397 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7077.767 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 292051.657 ops/s
[info]                  ·gc.alloc.rate:                   1049.362 MB/sec
[info]                  ·gc.alloc.rate.norm:              5656.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.449 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      985.397 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5311.231 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 291884.403 ops/s
[info]                  ·gc.alloc.rate:                   1048.770 MB/sec
[info]                  ·gc.alloc.rate.norm:              5656.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.337 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      991.079 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5344.874 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 291563.118 ops/s
[info]                  ·gc.alloc.rate:                   1047.599 MB/sec
[info]                  ·gc.alloc.rate.norm:              5656.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.449 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      995.011 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5372.076 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala":
[info]   291634.299 ±(99.9%) 1543.745 ops/s [Average]
[info]   (min, avg, max) = (291002.003, 291634.299, 292051.657), stdev = 400.906
[info]   CI (99.9%): [290090.554, 293178.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1047.840 ±(99.9%) 5.580 MB/sec [Average]
[info]   (min, avg, max) = (1045.569, 1047.840, 1049.362), stdev = 1.449
[info]   CI (99.9%): [1042.260, 1053.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5656.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5656.001, 5656.001, 5656.002), stdev = 0.001
[info]   CI (99.9%): [5656.001, 5656.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.083, 0.104), stdev = 0.015
[info]   CI (99.9%): [0.027, 0.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.449 ±(99.9%) 0.308 B/op [Average]
[info]   (min, avg, max) = (0.337, 0.449, 0.563), stdev = 0.080
[info]   CI (99.9%): [0.141, 0.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1051.774 ±(99.9%) 552.890 MB/sec [Average]
[info]   (min, avg, max) = (978.987, 1051.774, 1308.397), stdev = 143.584
[info]   CI (99.9%): [498.884, 1604.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5678.001 ±(99.9%) 3015.832 B/op [Average]
[info]   (min, avg, max) = (5284.056, 5678.001, 7077.767), stdev = 783.202
[info]   CI (99.9%): [2662.168, 8693.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 13.36% complete, ETA 00:39:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 306130.375 ops/s
[info] # Warmup Iteration   2: 316834.574 ops/s
[info] # Warmup Iteration   3: 317643.925 ops/s
[info] Iteration   1: 317291.210 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 317377.860 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 317049.218 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 318304.970 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 317443.804 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   317493.412 ±(99.9%) 1839.295 ops/s [Average]
[info]   (min, avg, max) = (317049.218, 317493.412, 318304.970), stdev = 477.659
[info]   CI (99.9%): [315654.117, 319332.708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson
[info] # Run progress: 13.82% complete, ETA 00:39:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 41186.360 ops/s
[info] # Warmup Iteration   2: 54746.095 ops/s
[info] # Warmup Iteration   3: 54372.465 ops/s
[info] Iteration   1: 56469.069 ops/s
[info]                  ·gc.alloc.rate:                   558.773 MB/sec
[info]                  ·gc.alloc.rate.norm:              15576.038 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.928 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     109.498 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      324.688 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9050.812 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 55817.567 ops/s
[info]                  ·gc.alloc.rate:                   552.454 MB/sec
[info]                  ·gc.alloc.rate.norm:              15575.977 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.587 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      648.545 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18285.185 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 55781.768 ops/s
[info]                  ·gc.alloc.rate:                   551.976 MB/sec
[info]                  ·gc.alloc.rate.norm:              15576.043 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.524 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      646.735 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18249.996 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 55726.989 ops/s
[info]                  ·gc.alloc.rate:                   551.450 MB/sec
[info]                  ·gc.alloc.rate.norm:              15575.972 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      323.046 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9124.596 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 55684.794 ops/s
[info]                  ·gc.alloc.rate:                   551.071 MB/sec
[info]                  ·gc.alloc.rate.norm:              15576.042 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.765 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      646.787 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18281.454 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson":
[info]   55896.037 ±(99.9%) 1248.911 ops/s [Average]
[info]   (min, avg, max) = (55684.794, 55896.037, 56469.069), stdev = 324.338
[info]   CI (99.9%): [54647.127, 57144.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   553.145 ±(99.9%) 12.282 MB/sec [Average]
[info]   (min, avg, max) = (551.071, 553.145, 558.773), stdev = 3.190
[info]   CI (99.9%): [540.863, 565.427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   15576.014 ±(99.9%) 0.140 B/op [Average]
[info]   (min, avg, max) = (15575.972, 15576.014, 15576.043), stdev = 0.036
[info]   CI (99.9%): [15575.874, 15576.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.827 ±(99.9%) 6.677 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.827, 3.928), stdev = 1.734
[info]   CI (99.9%): [≈ 0, 7.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   23.075 ±(99.9%) 186.105 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 23.075, 109.498), stdev = 48.331
[info]   CI (99.9%): [≈ 0, 209.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   517.960 ±(99.9%) 682.274 MB/sec [Average]
[info]   (min, avg, max) = (323.046, 517.960, 648.545), stdev = 177.184
[info]   CI (99.9%): [≈ 0, 1200.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   14598.409 ±(99.9%) 19371.235 B/op [Average]
[info]   (min, avg, max) = (9050.812, 14598.409, 18285.185), stdev = 5030.648
[info]   CI (99.9%): [≈ 0, 33969.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 4.000), stdev = 1.095
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce
[info] # Run progress: 14.29% complete, ETA 00:39:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17657.134 ops/s
[info] # Warmup Iteration   2: 21397.793 ops/s
[info] # Warmup Iteration   3: 21641.889 ops/s
[info] Iteration   1: 21564.304 ops/s
[info]                  ·gc.alloc.rate:                   1956.240 MB/sec
[info]                  ·gc.alloc.rate.norm:              142815.492 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.077 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1981.846 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 144684.819 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 21706.076 ops/s
[info]                  ·gc.alloc.rate:                   1969.316 MB/sec
[info]                  ·gc.alloc.rate.norm:              142816.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.547 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2000.684 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 145090.848 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 21500.672 ops/s
[info]                  ·gc.alloc.rate:                   1952.282 MB/sec
[info]                  ·gc.alloc.rate.norm:              142815.273 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.609 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2013.765 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 147312.948 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 21467.787 ops/s
[info]                  ·gc.alloc.rate:                   1948.318 MB/sec
[info]                  ·gc.alloc.rate.norm:              142816.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.578 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1687.840 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 123722.396 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 21629.951 ops/s
[info]                  ·gc.alloc.rate:                   1962.904 MB/sec
[info]                  ·gc.alloc.rate.norm:              142816.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.118 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031.580 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 147812.717 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce":
[info]   21573.758 ±(99.9%) 371.974 ops/s [Average]
[info]   (min, avg, max) = (21467.787, 21573.758, 21706.076), stdev = 96.601
[info]   CI (99.9%): [21201.784, 21945.732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate":
[info]   1957.812 ±(99.9%) 32.300 MB/sec [Average]
[info]   (min, avg, max) = (1948.318, 1957.812, 1969.316), stdev = 8.388
[info]   CI (99.9%): [1925.512, 1990.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   142815.765 ±(99.9%) 1.378 B/op [Average]
[info]   (min, avg, max) = (142815.273, 142815.765, 142816.024), stdev = 0.358
[info]   CI (99.9%): [142814.388, 142817.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.104 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.104, 0.167), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   7.586 ±(99.9%) 10.868 B/op [Average]
[info]   (min, avg, max) = (4.578, 7.586, 12.118), stdev = 2.822
[info]   CI (99.9%): [≈ 0, 18.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1943.143 ±(99.9%) 554.001 MB/sec [Average]
[info]   (min, avg, max) = (1687.840, 1943.143, 2031.580), stdev = 143.872
[info]   CI (99.9%): [1389.142, 2497.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   141724.746 ±(99.9%) 39101.988 B/op [Average]
[info]   (min, avg, max) = (123722.396, 141724.746, 147812.717), stdev = 10154.662
[info]   CI (99.9%): [102622.757, 180826.734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 0.707
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala
[info] # Run progress: 14.75% complete, ETA 00:39:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 33949.588 ops/s
[info] # Warmup Iteration   2: 53791.575 ops/s
[info] # Warmup Iteration   3: 53475.262 ops/s
[info] Iteration   1: 53852.901 ops/s
[info]                  ·gc.alloc.rate:      125.389 MB/sec
[info]                  ·gc.alloc.rate.norm: 3664.008 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 51651.765 ops/s
[info]                  ·gc.alloc.rate:                   120.236 MB/sec
[info]                  ·gc.alloc.rate.norm:              3664.008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.772 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7794.293 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 53656.426 ops/s
[info]                  ·gc.alloc.rate:      124.899 MB/sec
[info]                  ·gc.alloc.rate.norm: 3664.008 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 53021.181 ops/s
[info]                  ·gc.alloc.rate:                   123.432 MB/sec
[info]                  ·gc.alloc.rate.norm:              3664.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.236 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.798 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7593.218 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 53174.064 ops/s
[info]                  ·gc.alloc.rate:      123.777 MB/sec
[info]                  ·gc.alloc.rate.norm: 3664.008 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala":
[info]   53071.267 ±(99.9%) 3324.416 ops/s [Average]
[info]   (min, avg, max) = (51651.765, 53071.267, 53852.901), stdev = 863.340
[info]   CI (99.9%): [49746.852, 56395.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   123.547 ±(99.9%) 7.762 MB/sec [Average]
[info]   (min, avg, max) = (120.236, 123.547, 125.389), stdev = 2.016
[info]   CI (99.9%): [115.785, 131.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3664.008 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3664.008, 3664.008, 3664.008), stdev = 0.001
[info]   CI (99.9%): [3664.007, 3664.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.247 ±(99.9%) 2.128 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.247, 1.236), stdev = 0.553
[info]   CI (99.9%): [≈ 0, 2.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   102.314 ±(99.9%) 539.472 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 102.314, 255.798), stdev = 140.099
[info]   CI (99.9%): [≈ 0, 641.786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3077.502 ±(99.9%) 16229.090 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3077.502, 7794.293), stdev = 4214.643
[info]   CI (99.9%): [≈ 0, 19306.593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.time":
[info]   2.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala
[info] # Run progress: 15.21% complete, ETA 00:39:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 128681.415 ops/s
[info] # Warmup Iteration   2: 130374.784 ops/s
[info] # Warmup Iteration   3: 130575.237 ops/s
[info] Iteration   1: 135029.634 ops/s
[info]                  ·gc.alloc.rate:      183.918 MB/sec
[info]                  ·gc.alloc.rate.norm: 2144.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 134620.999 ops/s
[info]                  ·gc.alloc.rate:                   183.385 MB/sec
[info]                  ·gc.alloc.rate.norm:              2144.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.243 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.793 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2990.547 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 129864.549 ops/s
[info]                  ·gc.alloc.rate:                   176.880 MB/sec
[info]                  ·gc.alloc.rate.norm:              2144.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.759 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3100.122 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 133412.460 ops/s
[info]                  ·gc.alloc.rate:                   181.785 MB/sec
[info]                  ·gc.alloc.rate.norm:              2144.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.027 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.317 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.867 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3017.734 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 134900.759 ops/s
[info]                  ·gc.alloc.rate:      183.741 MB/sec
[info]                  ·gc.alloc.rate.norm: 2144.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala":
[info]   133565.680 ±(99.9%) 8339.366 ops/s [Average]
[info]   (min, avg, max) = (129864.549, 133565.680, 135029.634), stdev = 2165.707
[info]   CI (99.9%): [125226.314, 141905.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   181.942 ±(99.9%) 11.370 MB/sec [Average]
[info]   (min, avg, max) = (176.880, 181.942, 183.918), stdev = 2.953
[info]   CI (99.9%): [170.572, 193.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   2144.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2144.003, 2144.003, 2144.003), stdev = 0.001
[info]   CI (99.9%): [2144.003, 2144.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.010 ±(99.9%) 0.051 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.027), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.112 ±(99.9%) 0.600 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.112, 0.317), stdev = 0.156
[info]   CI (99.9%): [≈ 0, 0.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   153.484 ±(99.9%) 539.517 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 153.484, 255.867), stdev = 140.111
[info]   CI (99.9%): [≈ 0, 693.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1821.681 ±(99.9%) 6405.348 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1821.681, 3100.122), stdev = 1663.449
[info]   CI (99.9%): [≈ 0, 8227.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson
[info] # Run progress: 15.67% complete, ETA 00:38:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5250.520 ops/s
[info] # Warmup Iteration   2: 9780.123 ops/s
[info] # Warmup Iteration   3: 9975.110 ops/s
[info] Iteration   1: 10007.435 ops/s
[info]                  ·gc.alloc.rate:                   3352.096 MB/sec
[info]                  ·gc.alloc.rate.norm:              527320.044 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13.094 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3365.784 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 529473.266 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 9995.334 ops/s
[info]                  ·gc.alloc.rate:                   3349.822 MB/sec
[info]                  ·gc.alloc.rate.norm:              527320.044 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16.387 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3388.524 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 533412.436 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 9930.625 ops/s
[info]                  ·gc.alloc.rate:                   3326.765 MB/sec
[info]                  ·gc.alloc.rate.norm:              527320.041 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13.196 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3396.213 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 538328.130 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   4: 9917.688 ops/s
[info]                  ·gc.alloc.rate:                   3323.021 MB/sec
[info]                  ·gc.alloc.rate.norm:              527320.041 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.606 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3403.165 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 540037.781 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   5: 9755.230 ops/s
[info]                  ·gc.alloc.rate:                   3268.057 MB/sec
[info]                  ·gc.alloc.rate.norm:              527320.042 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.717 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3063.108 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 494250.387 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson":
[info]   9921.262 ±(99.9%) 387.844 ops/s [Average]
[info]   (min, avg, max) = (9755.230, 9921.262, 10007.435), stdev = 100.722
[info]   CI (99.9%): [9533.418, 10309.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3323.952 ±(99.9%) 130.502 MB/sec [Average]
[info]   (min, avg, max) = (3268.057, 3323.952, 3352.096), stdev = 33.891
[info]   CI (99.9%): [3193.450, 3454.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   527320.042 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (527320.041, 527320.042, 527320.044), stdev = 0.001
[info]   CI (99.9%): [527320.037, 527320.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.104), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   11.200 ±(99.9%) 16.749 B/op [Average]
[info]   (min, avg, max) = (6.606, 11.200, 16.387), stdev = 4.350
[info]   CI (99.9%): [≈ 0, 27.949] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   3323.359 ±(99.9%) 562.819 MB/sec [Average]
[info]   (min, avg, max) = (3063.108, 3323.359, 3403.165), stdev = 146.162
[info]   CI (99.9%): [2760.540, 3886.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   527100.400 ±(99.9%) 72501.434 B/op [Average]
[info]   (min, avg, max) = (494250.387, 527100.400, 540037.781), stdev = 18828.392
[info]   CI (99.9%): [454598.966, 599601.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.count":
[info]   49.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.800, 10.000), stdev = 0.447
[info]   CI (99.9%): [49.000, 49.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.time":
[info]   56.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (10.000, 11.200, 14.000), stdev = 1.643
[info]   CI (99.9%): [56.000, 56.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce
[info] # Run progress: 16.13% complete, ETA 00:38:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26765.432 ops/s
[info] # Warmup Iteration   2: 30709.956 ops/s
[info] # Warmup Iteration   3: 37700.927 ops/s
[info] Iteration   1: 35207.806 ops/s
[info]                  ·gc.alloc.rate:                   1364.786 MB/sec
[info]                  ·gc.alloc.rate.norm:              61016.662 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.722 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1306.809 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 58424.619 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 32955.707 ops/s
[info]                  ·gc.alloc.rate:                   1277.208 MB/sec
[info]                  ·gc.alloc.rate.norm:              61008.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.941 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1314.019 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62766.313 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 34047.602 ops/s
[info]                  ·gc.alloc.rate:                   1319.565 MB/sec
[info]                  ·gc.alloc.rate.norm:              61008.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.887 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1322.642 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61150.255 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 33982.773 ops/s
[info]                  ·gc.alloc.rate:                   1317.137 MB/sec
[info]                  ·gc.alloc.rate.norm:              61008.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.821 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1330.804 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61641.016 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 33630.754 ops/s
[info]                  ·gc.alloc.rate:                   1303.717 MB/sec
[info]                  ·gc.alloc.rate.norm:              61008.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.897 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.317 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62627.142 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce":
[info]   33964.928 ±(99.9%) 3153.122 ops/s [Average]
[info]   (min, avg, max) = (32955.707, 33964.928, 35207.806), stdev = 818.856
[info]   CI (99.9%): [30811.807, 37118.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1316.483 ±(99.9%) 122.506 MB/sec [Average]
[info]   (min, avg, max) = (1277.208, 1316.483, 1364.786), stdev = 31.814
[info]   CI (99.9%): [1193.977, 1438.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   61009.743 ±(99.9%) 14.894 B/op [Average]
[info]   (min, avg, max) = (61008.012, 61009.743, 61016.662), stdev = 3.868
[info]   CI (99.9%): [60994.849, 61024.636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.108 ±(99.9%) 0.222 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.108, 0.208), stdev = 0.058
[info]   CI (99.9%): [≈ 0, 0.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5.054 ±(99.9%) 10.849 B/op [Average]
[info]   (min, avg, max) = (2.887, 5.054, 9.941), stdev = 2.817
[info]   CI (99.9%): [≈ 0, 15.903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1322.518 ±(99.9%) 48.604 MB/sec [Average]
[info]   (min, avg, max) = (1306.809, 1322.518, 1338.317), stdev = 12.622
[info]   CI (99.9%): [1273.914, 1371.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   61321.869 ±(99.9%) 6756.624 B/op [Average]
[info]   (min, avg, max) = (58424.619, 61321.869, 62766.313), stdev = 1754.674
[info]   CI (99.9%): [54565.245, 68078.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala
[info] # Run progress: 16.59% complete, ETA 00:38:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 212725.878 ops/s
[info] # Warmup Iteration   2: 229911.562 ops/s
[info] # Warmup Iteration   3: 233736.115 ops/s
[info] Iteration   1: 234763.059 ops/s
[info]                  ·gc.alloc.rate:                   560.753 MB/sec
[info]                  ·gc.alloc.rate.norm:              3760.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.739 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25.073 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.362 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4407.789 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 236962.247 ops/s
[info]                  ·gc.alloc.rate:                   565.951 MB/sec
[info]                  ·gc.alloc.rate.norm:              3760.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      326.985 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2172.385 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 232711.399 ops/s
[info]                  ·gc.alloc.rate:                   555.852 MB/sec
[info]                  ·gc.alloc.rate.norm:              3760.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.704 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.339 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4419.448 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 236735.590 ops/s
[info]                  ·gc.alloc.rate:                   565.651 MB/sec
[info]                  ·gc.alloc.rate.norm:              3760.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.138 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.911 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4340.041 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 236725.815 ops/s
[info]                  ·gc.alloc.rate:                   565.625 MB/sec
[info]                  ·gc.alloc.rate.norm:              3760.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.554 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.558 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4344.543 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala":
[info]   235579.622 ±(99.9%) 7062.324 ops/s [Average]
[info]   (min, avg, max) = (232711.399, 235579.622, 236962.247), stdev = 1834.063
[info]   CI (99.9%): [228517.298, 242641.946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   562.766 ±(99.9%) 17.058 MB/sec [Average]
[info]   (min, avg, max) = (555.852, 562.766, 565.951), stdev = 4.430
[info]   CI (99.9%): [545.708, 579.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3760.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3760.002, 3760.002, 3760.002), stdev = 0.001
[info]   CI (99.9%): [3760.002, 3760.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.789 ±(99.9%) 6.352 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.789, 3.739), stdev = 1.650
[info]   CI (99.9%): [≈ 0, 7.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5.294 ±(99.9%) 42.591 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.294, 25.073), stdev = 11.061
[info]   CI (99.9%): [≈ 0, 47.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   588.831 ±(99.9%) 563.686 MB/sec [Average]
[info]   (min, avg, max) = (326.985, 588.831, 657.362), stdev = 146.388
[info]   CI (99.9%): [25.145, 1152.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3936.841 ±(99.9%) 3800.646 B/op [Average]
[info]   (min, avg, max) = (2172.385, 3936.841, 4419.448), stdev = 987.016
[info]   CI (99.9%): [136.196, 7737.487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 4.000), stdev = 1.225
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 17.05% complete, ETA 00:38:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 225188.874 ops/s
[info] # Warmup Iteration   2: 250371.693 ops/s
[info] # Warmup Iteration   3: 251119.708 ops/s
[info] Iteration   1: 251468.502 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 251929.062 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 251676.507 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 250946.294 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 250555.636 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc":
[info]   251315.200 ±(99.9%) 2147.317 ops/s [Average]
[info]   (min, avg, max) = (250555.636, 251315.200, 251929.062), stdev = 557.651
[info]   CI (99.9%): [249167.884, 253462.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
[info]   CI (99.9%): [0.002, 0.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson
[info] # Run progress: 17.51% complete, ETA 00:38:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3480.079 ops/s
[info] # Warmup Iteration   2: 5179.575 ops/s
[info] # Warmup Iteration   3: 5268.910 ops/s
[info] Iteration   1: 5264.747 ops/s
[info]                  ·gc.alloc.rate:                   2109.981 MB/sec
[info]                  ·gc.alloc.rate.norm:              630832.077 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43.550 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2298.313 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 687138.801 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 5301.045 ops/s
[info]                  ·gc.alloc.rate:                   2124.382 MB/sec
[info]                  ·gc.alloc.rate.norm:              630832.077 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30.902 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1994.692 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 592320.845 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 5261.182 ops/s
[info]                  ·gc.alloc.rate:                   2108.523 MB/sec
[info]                  ·gc.alloc.rate.norm:              630832.084 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24.909 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2011.169 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 601705.669 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 5289.371 ops/s
[info]                  ·gc.alloc.rate:                   2119.722 MB/sec
[info]                  ·gc.alloc.rate.norm:              630832.077 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.386 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2360.049 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 702353.684 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 5223.218 ops/s
[info]                  ·gc.alloc.rate:                   2093.393 MB/sec
[info]                  ·gc.alloc.rate.norm:              630832.078 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18.818 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031.578 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 612204.594 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson":
[info]   5267.913 ±(99.9%) 115.699 ops/s [Average]
[info]   (min, avg, max) = (5223.218, 5267.913, 5301.045), stdev = 30.047
[info]   CI (99.9%): [5152.214, 5383.611] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2111.200 ±(99.9%) 46.053 MB/sec [Average]
[info]   (min, avg, max) = (2093.393, 2111.200, 2124.382), stdev = 11.960
[info]   CI (99.9%): [2065.147, 2157.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   630832.079 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (630832.077, 630832.079, 630832.084), stdev = 0.003
[info]   CI (99.9%): [630832.068, 630832.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.087, 0.146), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   26.113 ±(99.9%) 45.969 B/op [Average]
[info]   (min, avg, max) = (12.386, 26.113, 43.550), stdev = 11.938
[info]   CI (99.9%): [≈ 0, 72.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   2139.160 ±(99.9%) 675.094 MB/sec [Average]
[info]   (min, avg, max) = (1994.692, 2139.160, 2360.049), stdev = 175.320
[info]   CI (99.9%): [1464.067, 2814.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   639144.719 ±(99.9%) 198399.110 B/op [Average]
[info]   (min, avg, max) = (592320.845, 639144.719, 702353.684), stdev = 51523.619
[info]   CI (99.9%): [440745.609, 837543.828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.count":
[info]   32.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce
[info] # Run progress: 17.97% complete, ETA 00:37:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2302.340 ops/s
[info] # Warmup Iteration   2: 2947.711 ops/s
[info] # Warmup Iteration   3: 2954.180 ops/s
[info] Iteration   1: 2994.540 ops/s
[info]                  ·gc.alloc.rate:                   1409.236 MB/sec
[info]                  ·gc.alloc.rate.norm:              740720.846 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32.812 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1308.095 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 687559.263 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 2966.809 ops/s
[info]                  ·gc.alloc.rate:                   1396.174 MB/sec
[info]                  ·gc.alloc.rate.norm:              740720.137 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77.283 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1315.856 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 698108.550 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 3005.039 ops/s
[info]                  ·gc.alloc.rate:                   1414.159 MB/sec
[info]                  ·gc.alloc.rate.norm:              740720.146 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     98.108 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1656.601 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 867708.849 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 3005.981 ops/s
[info]                  ·gc.alloc.rate:                   1415.114 MB/sec
[info]                  ·gc.alloc.rate.norm:              740720.136 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43.589 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1335.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 698818.192 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 2990.372 ops/s
[info]                  ·gc.alloc.rate:                   1407.572 MB/sec
[info]                  ·gc.alloc.rate.norm:              740720.136 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43.822 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.713 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 706062.208 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce":
[info]   2992.548 ±(99.9%) 61.116 ops/s [Average]
[info]   (min, avg, max) = (2966.809, 2992.548, 3005.981), stdev = 15.872
[info]   CI (99.9%): [2931.432, 3053.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate":
[info]   1408.451 ±(99.9%) 29.141 MB/sec [Average]
[info]   (min, avg, max) = (1396.174, 1408.451, 1415.114), stdev = 7.568
[info]   CI (99.9%): [1379.310, 1437.592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   740720.280 ±(99.9%) 1.218 B/op [Average]
[info]   (min, avg, max) = (740720.136, 740720.280, 740720.846), stdev = 0.316
[info]   CI (99.9%): [740719.062, 740721.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.112 ±(99.9%) 0.201 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.112, 0.187), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   59.123 ±(99.9%) 105.758 B/op [Average]
[info]   (min, avg, max) = (32.812, 59.123, 98.108), stdev = 27.465
[info]   CI (99.9%): [≈ 0, 164.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1391.465 ±(99.9%) 573.155 MB/sec [Average]
[info]   (min, avg, max) = (1308.095, 1391.465, 1656.601), stdev = 148.847
[info]   CI (99.9%): [818.310, 1964.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   731651.412 ±(99.9%) 293974.000 B/op [Average]
[info]   (min, avg, max) = (687559.263, 731651.412, 867708.849), stdev = 76344.114
[info]   CI (99.9%): [437677.413, 1025625.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala
[info] # Run progress: 18.43% complete, ETA 00:37:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4061.748 ops/s
[info] # Warmup Iteration   2: 6276.534 ops/s
[info] # Warmup Iteration   3: 6426.899 ops/s
[info] Iteration   1: 6409.258 ops/s
[info]                  ·gc.alloc.rate:                   910.222 MB/sec
[info]                  ·gc.alloc.rate.norm:              223512.064 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20.445 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      980.456 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 240758.676 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 6424.528 ops/s
[info]                  ·gc.alloc.rate:                   912.266 MB/sec
[info]                  ·gc.alloc.rate.norm:              223512.068 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35.695 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      987.357 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 241910.040 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 6438.923 ops/s
[info]                  ·gc.alloc.rate:                   914.293 MB/sec
[info]                  ·gc.alloc.rate.norm:              223512.063 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15.262 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      661.272 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 161657.502 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 6393.548 ops/s
[info]                  ·gc.alloc.rate:                   907.847 MB/sec
[info]                  ·gc.alloc.rate.norm:              223512.064 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15.372 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      996.661 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 245378.262 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 6483.905 ops/s
[info]                  ·gc.alloc.rate:                   920.670 MB/sec
[info]                  ·gc.alloc.rate.norm:              223512.068 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15.156 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1001.886 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 243228.892 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala":
[info]   6430.032 ±(99.9%) 133.032 ops/s [Average]
[info]   (min, avg, max) = (6393.548, 6430.032, 6483.905), stdev = 34.548
[info]   CI (99.9%): [6297.000, 6563.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   913.059 ±(99.9%) 18.795 MB/sec [Average]
[info]   (min, avg, max) = (907.847, 913.059, 920.670), stdev = 4.881
[info]   CI (99.9%): [894.264, 931.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   223512.065 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (223512.063, 223512.065, 223512.068), stdev = 0.003
[info]   CI (99.9%): [223512.056, 223512.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.139 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.083, 0.146), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   20.386 ±(99.9%) 34.068 B/op [Average]
[info]   (min, avg, max) = (15.156, 20.386, 35.695), stdev = 8.847
[info]   CI (99.9%): [≈ 0, 54.455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   925.526 ±(99.9%) 569.718 MB/sec [Average]
[info]   (min, avg, max) = (661.272, 925.526, 1001.886), stdev = 147.954
[info]   CI (99.9%): [355.808, 1495.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   226586.674 ±(99.9%) 139921.187 B/op [Average]
[info]   (min, avg, max) = (161657.502, 226586.674, 245378.262), stdev = 36337.088
[info]   CI (99.9%): [86665.488, 366507.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala
[info] # Run progress: 18.89% complete, ETA 00:37:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7732.312 ops/s
[info] # Warmup Iteration   2: 8325.481 ops/s
[info] # Warmup Iteration   3: 8311.707 ops/s
[info] Iteration   1: 8356.080 ops/s
[info]                  ·gc.alloc.rate:                   593.723 MB/sec
[info]                  ·gc.alloc.rate.norm:              111808.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.258 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     613.598 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.209 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 124328.645 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 8357.945 ops/s
[info]                  ·gc.alloc.rate:                   593.631 MB/sec
[info]                  ·gc.alloc.rate.norm:              111808.049 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.759 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.620 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 123671.763 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 8336.269 ops/s
[info]                  ·gc.alloc.rate:                   592.070 MB/sec
[info]                  ·gc.alloc.rate.norm:              111808.049 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.790 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.290 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 123746.556 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 8355.500 ops/s
[info]                  ·gc.alloc.rate:                   593.650 MB/sec
[info]                  ·gc.alloc.rate.norm:              111808.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.763 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.211 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 123590.686 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 8183.489 ops/s
[info]                  ·gc.alloc.rate:                   581.280 MB/sec
[info]                  ·gc.alloc.rate.norm:              111808.050 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.353 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63157.968 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala":
[info]   8317.857 ±(99.9%) 291.218 ops/s [Average]
[info]   (min, avg, max) = (8183.489, 8317.857, 8357.945), stdev = 75.628
[info]   CI (99.9%): [8026.638, 8609.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   590.871 ±(99.9%) 20.816 MB/sec [Average]
[info]   (min, avg, max) = (581.280, 590.871, 593.723), stdev = 5.406
[info]   CI (99.9%): [570.054, 611.687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   111808.051 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (111808.049, 111808.051, 111808.053), stdev = 0.002
[info]   CI (99.9%): [111808.043, 111808.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.689 ±(99.9%) 5.531 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.689, 3.258), stdev = 1.436
[info]   CI (99.9%): [≈ 0, 6.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   129.782 ±(99.9%) 1041.635 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 129.782, 613.598), stdev = 270.509
[info]   CI (99.9%): [≈ 0, 1171.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   591.337 ±(99.9%) 566.138 MB/sec [Average]
[info]   (min, avg, max) = (328.353, 591.337, 660.209), stdev = 147.024
[info]   CI (99.9%): [25.198, 1157.475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   111699.123 ±(99.9%) 104494.490 B/op [Average]
[info]   (min, avg, max) = (63157.968, 111699.123, 124328.645), stdev = 27136.887
[info]   CI (99.9%): [7204.634, 216193.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 4.000), stdev = 1.095
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson
[info] # Run progress: 19.35% complete, ETA 00:37:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2056.351 ops/s
[info] # Warmup Iteration   2: 3678.071 ops/s
[info] # Warmup Iteration   3: 3741.629 ops/s
[info] Iteration   1: 3749.099 ops/s
[info]                  ·gc.alloc.rate:                   1626.260 MB/sec
[info]                  ·gc.alloc.rate.norm:              682880.463 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34.953 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1645.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 690801.869 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 3753.015 ops/s
[info]                  ·gc.alloc.rate:                   1628.157 MB/sec
[info]                  ·gc.alloc.rate.norm:              682880.109 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26.186 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1660.607 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 696490.212 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 3766.505 ops/s
[info]                  ·gc.alloc.rate:                   1634.132 MB/sec
[info]                  ·gc.alloc.rate.norm:              682880.108 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34.786 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1673.494 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 699328.951 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 3785.822 ops/s
[info]                  ·gc.alloc.rate:                   1642.465 MB/sec
[info]                  ·gc.alloc.rate.norm:              682880.108 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1682.247 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 699419.851 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 3780.296 ops/s
[info]                  ·gc.alloc.rate:                   1640.208 MB/sec
[info]                  ·gc.alloc.rate.norm:              682880.116 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.664 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1689.481 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 703394.318 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson":
[info]   3766.948 ±(99.9%) 62.307 ops/s [Average]
[info]   (min, avg, max) = (3749.099, 3766.948, 3785.822), stdev = 16.181
[info]   CI (99.9%): [3704.641, 3829.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1634.244 ±(99.9%) 27.497 MB/sec [Average]
[info]   (min, avg, max) = (1626.260, 1634.244, 1642.465), stdev = 7.141
[info]   CI (99.9%): [1606.748, 1661.741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   682880.181 ±(99.9%) 0.607 B/op [Average]
[info]   (min, avg, max) = (682880.108, 682880.181, 682880.463), stdev = 0.158
[info]   CI (99.9%): [682879.573, 682880.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.083), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   20.918 ±(99.9%) 61.029 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 20.918, 34.953), stdev = 15.849
[info]   CI (99.9%): [≈ 0, 81.946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1670.191 ±(99.9%) 68.030 MB/sec [Average]
[info]   (min, avg, max) = (1645.125, 1670.191, 1689.481), stdev = 17.667
[info]   CI (99.9%): [1602.160, 1738.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   697887.040 ±(99.9%) 17948.866 B/op [Average]
[info]   (min, avg, max) = (690801.869, 697887.040, 703394.318), stdev = 4661.264
[info]   CI (99.9%): [679938.174, 715835.906] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce
[info] # Run progress: 19.82% complete, ETA 00:37:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4553.596 ops/s
[info] # Warmup Iteration   2: 5960.728 ops/s
[info] # Warmup Iteration   3: 5895.207 ops/s
[info] Iteration   1: 5984.132 ops/s
[info]                  ·gc.alloc.rate:                   520.164 MB/sec
[info]                  ·gc.alloc.rate.norm:              136824.074 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.443 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     905.757 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      583.038 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 153362.561 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 5978.189 ops/s
[info]                  ·gc.alloc.rate:                   519.675 MB/sec
[info]                  ·gc.alloc.rate.norm:              136824.074 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.389 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 86197.542 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 6006.306 ops/s
[info]                  ·gc.alloc.rate:                   522.118 MB/sec
[info]                  ·gc.alloc.rate.norm:              136824.068 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.908 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      651.350 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 170690.301 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 6019.116 ops/s
[info]                  ·gc.alloc.rate:                   523.347 MB/sec
[info]                  ·gc.alloc.rate.norm:              136824.068 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21.769 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      651.474 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 170321.762 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 5981.962 ops/s
[info]                  ·gc.alloc.rate:                   520.005 MB/sec
[info]                  ·gc.alloc.rate.norm:              136824.074 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      326.046 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 85789.395 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce":
[info]   5993.941 ±(99.9%) 68.735 ops/s [Average]
[info]   (min, avg, max) = (5978.189, 5993.941, 6019.116), stdev = 17.850
[info]   CI (99.9%): [5925.206, 6062.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate":
[info]   521.062 ±(99.9%) 6.144 MB/sec [Average]
[info]   (min, avg, max) = (519.675, 521.062, 523.347), stdev = 1.596
[info]   CI (99.9%): [514.918, 527.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   136824.071 ±(99.9%) 0.012 B/op [Average]
[info]   (min, avg, max) = (136824.068, 136824.071, 136824.074), stdev = 0.003
[info]   CI (99.9%): [136824.059, 136824.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.714 ±(99.9%) 5.878 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.714, 3.443), stdev = 1.526
[info]   CI (99.9%): [≈ 0, 6.591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   187.687 ±(99.9%) 1546.092 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 187.687, 905.757), stdev = 401.515
[info]   CI (99.9%): [≈ 0, 1733.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   507.859 ±(99.9%) 645.751 MB/sec [Average]
[info]   (min, avg, max) = (326.046, 507.859, 651.474), stdev = 167.699
[info]   CI (99.9%): [≈ 0, 1153.611] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   133272.312 ±(99.9%) 168364.392 B/op [Average]
[info]   (min, avg, max) = (85789.395, 133272.312, 170690.301), stdev = 43723.698
[info]   CI (99.9%): [≈ 0, 301636.704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 5.000), stdev = 1.517
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala
[info] # Run progress: 20.28% complete, ETA 00:36:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4523.790 ops/s
[info] # Warmup Iteration   2: 6642.526 ops/s
[info] # Warmup Iteration   3: 6897.134 ops/s
[info] Iteration   1: 6955.678 ops/s
[info]                  ·gc.alloc.rate:                   302.497 MB/sec
[info]                  ·gc.alloc.rate.norm:              68443.664 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.798 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57877.416 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 6945.645 ops/s
[info]                  ·gc.alloc.rate:                   302.020 MB/sec
[info]                  ·gc.alloc.rate.norm:              68443.960 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.761 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57960.729 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 6943.277 ops/s
[info]                  ·gc.alloc.rate:                   301.880 MB/sec
[info]                  ·gc.alloc.rate.norm:              68443.804 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.436 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      317.315 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 71943.335 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 6944.079 ops/s
[info]                  ·gc.alloc.rate:                   301.924 MB/sec
[info]                  ·gc.alloc.rate.norm:              68444.042 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.718 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      317.360 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 71943.335 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 6908.325 ops/s
[info]                  ·gc.alloc.rate:                   300.432 MB/sec
[info]                  ·gc.alloc.rate.norm:              68443.602 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.484 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      319.392 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 72762.980 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala":
[info]   6939.401 ±(99.9%) 69.593 ops/s [Average]
[info]   (min, avg, max) = (6908.325, 6939.401, 6955.678), stdev = 18.073
[info]   CI (99.9%): [6869.807, 7008.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   301.751 ±(99.9%) 2.992 MB/sec [Average]
[info]   (min, avg, max) = (300.432, 301.751, 302.497), stdev = 0.777
[info]   CI (99.9%): [298.758, 304.743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   68443.814 ±(99.9%) 0.723 B/op [Average]
[info]   (min, avg, max) = (68443.602, 68443.814, 68444.042), stdev = 0.188
[info]   CI (99.9%): [68443.091, 68444.538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.042), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   4.728 ±(99.9%) 18.214 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.728, 9.484), stdev = 4.730
[info]   CI (99.9%): [≈ 0, 22.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   293.125 ±(99.9%) 131.315 MB/sec [Average]
[info]   (min, avg, max) = (255.761, 293.125, 319.392), stdev = 34.102
[info]   CI (99.9%): [161.811, 424.440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   66497.559 ±(99.9%) 30182.318 B/op [Average]
[info]   (min, avg, max) = (57877.416, 66497.559, 72762.980), stdev = 7838.252
[info]   CI (99.9%): [36315.241, 96679.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala
[info] # Run progress: 20.74% complete, ETA 00:36:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6301.138 ops/s
[info] # Warmup Iteration   2: 7743.440 ops/s
[info] # Warmup Iteration   3: 7745.614 ops/s
[info] Iteration   1: 7735.508 ops/s
[info]                  ·gc.alloc.rate:                   274.901 MB/sec
[info]                  ·gc.alloc.rate.norm:              55936.057 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.220 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.766 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52042.547 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 7703.631 ops/s
[info]                  ·gc.alloc.rate:                   273.710 MB/sec
[info]                  ·gc.alloc.rate.norm:              55936.053 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.716 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52258.687 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 7714.484 ops/s
[info]                  ·gc.alloc.rate:                   274.157 MB/sec
[info]                  ·gc.alloc.rate.norm:              55936.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.054 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.922 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.768 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52184.187 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 7749.958 ops/s
[info]                  ·gc.alloc.rate:                   275.415 MB/sec
[info]                  ·gc.alloc.rate.norm:              55936.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.729 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     757.308 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.719 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66761.999 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 7745.392 ops/s
[info]                  ·gc.alloc.rate:                   275.329 MB/sec
[info]                  ·gc.alloc.rate.norm:              55936.057 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.689 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.787 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66796.470 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala":
[info]   7729.794 ±(99.9%) 77.048 ops/s [Average]
[info]   (min, avg, max) = (7703.631, 7729.794, 7749.958), stdev = 20.009
[info]   CI (99.9%): [7652.746, 7806.843] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   274.702 ±(99.9%) 2.870 MB/sec [Average]
[info]   (min, avg, max) = (273.710, 274.702, 275.415), stdev = 0.745
[info]   CI (99.9%): [271.832, 277.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   55936.054 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (55936.053, 55936.054, 55936.057), stdev = 0.002
[info]   CI (99.9%): [55936.046, 55936.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.773 ±(99.9%) 6.363 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.773, 3.729), stdev = 1.652
[info]   CI (99.9%): [≈ 0, 7.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   157.028 ±(99.9%) 1292.299 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 157.028, 757.308), stdev = 335.606
[info]   CI (99.9%): [≈ 0, 1449.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   284.951 ±(99.9%) 153.970 MB/sec [Average]
[info]   (min, avg, max) = (255.716, 284.951, 328.787), stdev = 39.985
[info]   CI (99.9%): [130.982, 438.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   58008.778 ±(99.9%) 30830.877 B/op [Average]
[info]   (min, avg, max) = (52042.547, 58008.778, 66796.470), stdev = 8006.681
[info]   CI (99.9%): [27177.901, 88839.655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 21.20% complete, ETA 00:36:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6742.775 ops/s
[info] # Warmup Iteration   2: 7330.526 ops/s
[info] # Warmup Iteration   3: 7501.755 ops/s
[info] Iteration   1: 7722.689 ops/s
[info]                  ·gc.alloc.rate:                   202.761 MB/sec
[info]                  ·gc.alloc.rate.norm:              41328.053 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.757 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52130.138 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 7731.272 ops/s
[info]                  ·gc.alloc.rate:                   202.968 MB/sec
[info]                  ·gc.alloc.rate.norm:              41328.053 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.721 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52069.466 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 7749.896 ops/s
[info]                  ·gc.alloc.rate:      203.482 MB/sec
[info]                  ·gc.alloc.rate.norm: 41328.053 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 7743.248 ops/s
[info]                  ·gc.alloc.rate:                   203.301 MB/sec
[info]                  ·gc.alloc.rate.norm:              41328.053 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.744 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51988.791 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 7748.814 ops/s
[info]                  ·gc.alloc.rate:                   203.532 MB/sec
[info]                  ·gc.alloc.rate.norm:              41328.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.024 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.774 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.869 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51955.250 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc":
[info]   7739.184 ±(99.9%) 45.508 ops/s [Average]
[info]   (min, avg, max) = (7722.689, 7739.184, 7749.896), stdev = 11.818
[info]   CI (99.9%): [7693.676, 7784.692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   203.209 ±(99.9%) 1.286 MB/sec [Average]
[info]   (min, avg, max) = (202.761, 203.209, 203.532), stdev = 0.334
[info]   CI (99.9%): [201.923, 204.495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   41328.053 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (41328.053, 41328.053, 41328.053), stdev = 0.001
[info]   CI (99.9%): [41328.052, 41328.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   0.005 ±(99.9%) 0.040 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.024), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   0.955 ±(99.9%) 8.221 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.955, 4.774), stdev = 2.135
[info]   CI (99.9%): [≈ 0, 9.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   204.618 ±(99.9%) 440.456 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.618, 255.869), stdev = 114.385
[info]   CI (99.9%): [≈ 0, 645.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   41628.729 ±(99.9%) 89609.365 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 41628.729, 52130.138), stdev = 23271.268
[info]   CI (99.9%): [≈ 0, 131238.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.095
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce
[info] # Run progress: 21.66% complete, ETA 00:36:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3489.132 ops/s
[info] # Warmup Iteration   2: 4160.346 ops/s
[info] # Warmup Iteration   3: 4163.575 ops/s
[info] Iteration   1: 4216.123 ops/s
[info]                  ·gc.alloc.rate:                   1480.331 MB/sec
[info]                  ·gc.alloc.rate.norm:              552600.104 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15.537 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1309.922 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 488987.433 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 4217.980 ops/s
[info]                  ·gc.alloc.rate:                   1481.178 MB/sec
[info]                  ·gc.alloc.rate.norm:              552600.097 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77.668 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1649.776 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 615500.940 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 4178.407 ops/s
[info]                  ·gc.alloc.rate:                   1466.999 MB/sec
[info]                  ·gc.alloc.rate.norm:              552600.105 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47.035 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1328.573 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 500456.727 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 4127.169 ops/s
[info]                  ·gc.alloc.rate:                   1449.253 MB/sec
[info]                  ·gc.alloc.rate.norm:              552600.099 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47.628 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1336.696 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 509682.109 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 4201.759 ops/s
[info]                  ·gc.alloc.rate:                   1475.076 MB/sec
[info]                  ·gc.alloc.rate.norm:              552600.097 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31.185 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1678.869 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 628946.014 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce":
[info]   4188.288 ±(99.9%) 144.988 ops/s [Average]
[info]   (min, avg, max) = (4127.169, 4188.288, 4217.980), stdev = 37.653
[info]   CI (99.9%): [4043.299, 4333.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate":
[info]   1470.567 ±(99.9%) 50.767 MB/sec [Average]
[info]   (min, avg, max) = (1449.253, 1470.567, 1481.178), stdev = 13.184
[info]   CI (99.9%): [1419.800, 1521.334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   552600.100 ±(99.9%) 0.016 B/op [Average]
[info]   (min, avg, max) = (552600.097, 552600.100, 552600.105), stdev = 0.004
[info]   CI (99.9%): [552600.085, 552600.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.117 ±(99.9%) 0.238 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.117, 0.208), stdev = 0.062
[info]   CI (99.9%): [≈ 0, 0.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   43.811 ±(99.9%) 88.858 B/op [Average]
[info]   (min, avg, max) = (15.537, 43.811, 77.668), stdev = 23.076
[info]   CI (99.9%): [≈ 0, 132.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1460.767 ±(99.9%) 717.596 MB/sec [Average]
[info]   (min, avg, max) = (1309.922, 1460.767, 1678.869), stdev = 186.357
[info]   CI (99.9%): [743.172, 2178.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   548714.644 ±(99.9%) 260575.006 B/op [Average]
[info]   (min, avg, max) = (488987.433, 548714.644, 628946.014), stdev = 67670.501
[info]   CI (99.9%): [288139.639, 809289.650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 1.000
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala
[info] # Run progress: 22.12% complete, ETA 00:36:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7543.081 ops/s
[info] # Warmup Iteration   2: 11654.987 ops/s
[info] # Warmup Iteration   3: 11750.484 ops/s
[info] Iteration   1: 11555.777 ops/s
[info]                  ·gc.alloc.rate:                   972.346 MB/sec
[info]                  ·gc.alloc.rate.norm:              132456.038 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.505 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      983.331 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 133952.454 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 11672.065 ops/s
[info]                  ·gc.alloc.rate:                   982.241 MB/sec
[info]                  ·gc.alloc.rate.norm:              132456.038 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.421 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      988.796 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 133339.992 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 11652.372 ops/s
[info]                  ·gc.alloc.rate:                   980.651 MB/sec
[info]                  ·gc.alloc.rate.norm:              132469.830 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.623 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      995.362 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 134457.043 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 11649.030 ops/s
[info]                  ·gc.alloc.rate:                   980.818 MB/sec
[info]                  ·gc.alloc.rate.norm:              132488.035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.250 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1000.400 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 135133.196 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 11733.687 ops/s
[info]                  ·gc.alloc.rate:                   987.788 MB/sec
[info]                  ·gc.alloc.rate.norm:              132488.035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.376 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669.473 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 89793.701 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala":
[info]   11652.586 ±(99.9%) 246.120 ops/s [Average]
[info]   (min, avg, max) = (11555.777, 11652.586, 11733.687), stdev = 63.917
[info]   CI (99.9%): [11406.466, 11898.707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   980.769 ±(99.9%) 21.301 MB/sec [Average]
[info]   (min, avg, max) = (972.346, 980.769, 987.788), stdev = 5.532
[info]   CI (99.9%): [959.468, 1002.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   132471.595 ±(99.9%) 61.722 B/op [Average]
[info]   (min, avg, max) = (132456.038, 132471.595, 132488.035), stdev = 16.029
[info]   CI (99.9%): [132409.874, 132533.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.062, 0.083), stdev = 0.015
[info]   CI (99.9%): [0.006, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   8.435 ±(99.9%) 7.663 B/op [Average]
[info]   (min, avg, max) = (5.623, 8.435, 11.250), stdev = 1.990
[info]   CI (99.9%): [0.773, 16.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   927.473 ±(99.9%) 555.921 MB/sec [Average]
[info]   (min, avg, max) = (669.473, 927.473, 1000.400), stdev = 144.371
[info]   CI (99.9%): [371.551, 1483.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   125335.277 ±(99.9%) 76547.969 B/op [Average]
[info]   (min, avg, max) = (89793.701, 125335.277, 135133.196), stdev = 19879.264
[info]   CI (99.9%): [48787.308, 201883.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala
[info] # Run progress: 22.58% complete, ETA 00:35:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18299.180 ops/s
[info] # Warmup Iteration   2: 18935.397 ops/s
[info] # Warmup Iteration   3: 18416.667 ops/s
[info] Iteration   1: 18927.904 ops/s
[info]                  ·gc.alloc.rate:      99.087 MB/sec
[info]                  ·gc.alloc.rate.norm: 8240.025 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 18793.266 ops/s
[info]                  ·gc.alloc.rate:                   98.366 MB/sec
[info]                  ·gc.alloc.rate.norm:              8240.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.084 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     174.605 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.716 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21421.141 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 18807.814 ops/s
[info]                  ·gc.alloc.rate:      98.453 MB/sec
[info]                  ·gc.alloc.rate.norm: 8240.027 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 18522.183 ops/s
[info]                  ·gc.alloc.rate:      96.965 MB/sec
[info]                  ·gc.alloc.rate.norm: 8240.022 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 18735.971 ops/s
[info]                  ·gc.alloc.rate:                   98.076 MB/sec
[info]                  ·gc.alloc.rate.norm:              8240.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.031 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.571 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.738 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21486.296 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala":
[info]   18757.428 ±(99.9%) 573.365 ops/s [Average]
[info]   (min, avg, max) = (18522.183, 18757.428, 18927.904), stdev = 148.901
[info]   CI (99.9%): [18184.063, 19330.793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   98.189 ±(99.9%) 2.993 MB/sec [Average]
[info]   (min, avg, max) = (96.965, 98.189, 99.087), stdev = 0.777
[info]   CI (99.9%): [95.196, 101.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   8240.024 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (8240.022, 8240.024, 8240.027), stdev = 0.002
[info]   CI (99.9%): [8240.015, 8240.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.423 ±(99.9%) 3.577 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.423, 2.084), stdev = 0.929
[info]   CI (99.9%): [≈ 0, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   35.435 ±(99.9%) 299.604 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 35.435, 174.605), stdev = 77.806
[info]   CI (99.9%): [≈ 0, 335.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   102.291 ±(99.9%) 539.351 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 102.291, 255.738), stdev = 140.068
[info]   CI (99.9%): [≈ 0, 641.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   8581.487 ±(99.9%) 45247.793 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8581.487, 21486.296), stdev = 11750.708
[info]   CI (99.9%): [≈ 0, 53829.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 3.000), stdev = 1.414
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson
[info] # Run progress: 23.04% complete, ETA 00:35:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2303.643 ops/s
[info] # Warmup Iteration   2: 4267.194 ops/s
[info] # Warmup Iteration   3: 4341.728 ops/s
[info] Iteration   1: 4402.380 ops/s
[info]                  ·gc.alloc.rate:                   1891.160 MB/sec
[info]                  ·gc.alloc.rate.norm:              676243.435 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22.322 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1983.574 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 709288.807 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 4364.239 ops/s
[info]                  ·gc.alloc.rate:                   1868.378 MB/sec
[info]                  ·gc.alloc.rate.norm:              673872.093 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22.521 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1669.107 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 602000.334 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 4408.826 ops/s
[info]                  ·gc.alloc.rate:                   1887.346 MB/sec
[info]                  ·gc.alloc.rate.norm:              673872.093 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44.582 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2015.802 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 719736.860 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 4392.988 ops/s
[info]                  ·gc.alloc.rate:                   1880.556 MB/sec
[info]                  ·gc.alloc.rate.norm:              673872.093 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22.372 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2026.518 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 726175.869 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 4420.567 ops/s
[info]                  ·gc.alloc.rate:                   1892.622 MB/sec
[info]                  ·gc.alloc.rate.norm:              673872.100 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.410 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1693.612 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 603014.194 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson":
[info]   4397.800 ±(99.9%) 81.919 ops/s [Average]
[info]   (min, avg, max) = (4364.239, 4397.800, 4420.567), stdev = 21.274
[info]   CI (99.9%): [4315.881, 4479.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1884.012 ±(99.9%) 38.154 MB/sec [Average]
[info]   (min, avg, max) = (1868.378, 1884.012, 1892.622), stdev = 9.908
[info]   CI (99.9%): [1845.859, 1922.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   674346.363 ±(99.9%) 4083.591 B/op [Average]
[info]   (min, avg, max) = (673872.093, 674346.363, 676243.435), stdev = 1060.496
[info]   CI (99.9%): [670262.771, 678429.954] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.125), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   23.841 ±(99.9%) 51.171 B/op [Average]
[info]   (min, avg, max) = (7.410, 23.841, 44.582), stdev = 13.289
[info]   CI (99.9%): [≈ 0, 75.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1877.723 ±(99.9%) 693.725 MB/sec [Average]
[info]   (min, avg, max) = (1669.107, 1877.723, 2026.518), stdev = 180.158
[info]   CI (99.9%): [1183.997, 2571.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   672043.213 ±(99.9%) 245531.570 B/op [Average]
[info]   (min, avg, max) = (602000.334, 672043.213, 726175.869), stdev = 63763.769
[info]   CI (99.9%): [426511.642, 917574.783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 7.000), stdev = 0.837
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce
[info] # Run progress: 23.50% complete, ETA 00:35:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7766.193 ops/s
[info] # Warmup Iteration   2: 8897.956 ops/s
[info] # Warmup Iteration   3: 8885.996 ops/s
[info] Iteration   1: 9115.011 ops/s
[info]                  ·gc.alloc.rate:                   538.916 MB/sec
[info]                  ·gc.alloc.rate.norm:              93072.048 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.435 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     593.208 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      583.050 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 100694.120 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 9065.179 ops/s
[info]                  ·gc.alloc.rate:                   536.067 MB/sec
[info]                  ·gc.alloc.rate.norm:              93072.045 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.842 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.772 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 113508.034 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 9100.302 ops/s
[info]                  ·gc.alloc.rate:                   538.033 MB/sec
[info]                  ·gc.alloc.rate.norm:              93072.045 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.200 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      326.324 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 56449.378 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 9034.111 ops/s
[info]                  ·gc.alloc.rate:                   529.685 MB/sec
[info]                  ·gc.alloc.rate.norm:              92286.391 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.879 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      651.392 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 113491.293 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 9960.467 ops/s
[info]                  ·gc.alloc.rate:                   485.900 MB/sec
[info]                  ·gc.alloc.rate.norm:              76752.041 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.867 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.304 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 103036.827 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce":
[info]   9255.014 ±(99.9%) 1523.361 ops/s [Average]
[info]   (min, avg, max) = (9034.111, 9255.014, 9960.467), stdev = 395.612
[info]   CI (99.9%): [7731.653, 10778.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate":
[info]   525.720 ±(99.9%) 86.834 MB/sec [Average]
[info]   (min, avg, max) = (485.900, 525.720, 538.916), stdev = 22.551
[info]   CI (99.9%): [438.886, 612.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   89650.914 ±(99.9%) 27796.682 B/op [Average]
[info]   (min, avg, max) = (76752.041, 89650.914, 93072.048), stdev = 7218.710
[info]   CI (99.9%): [61854.232, 117447.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.733 ±(99.9%) 5.817 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.733, 3.435), stdev = 1.511
[info]   CI (99.9%): [≈ 0, 6.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   126.399 ±(99.9%) 1004.858 B/op [Average]
[info]   (min, avg, max) = (7.200, 126.399, 593.208), stdev = 260.958
[info]   CI (99.9%): [≈ 0, 1131.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   573.368 ±(99.9%) 544.250 MB/sec [Average]
[info]   (min, avg, max) = (326.324, 573.368, 653.772), stdev = 141.340
[info]   CI (99.9%): [29.119, 1117.618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   97435.930 ±(99.9%) 91081.578 B/op [Average]
[info]   (min, avg, max) = (56449.378, 97435.930, 113508.034), stdev = 23653.596
[info]   CI (99.9%): [6354.353, 188517.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.600, 5.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala
[info] # Run progress: 23.96% complete, ETA 00:35:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7554.366 ops/s
[info] # Warmup Iteration   2: 11069.504 ops/s
[info] # Warmup Iteration   3: 11511.946 ops/s
[info] Iteration   1: 11517.867 ops/s
[info]                  ·gc.alloc.rate:                   343.626 MB/sec
[info]                  ·gc.alloc.rate.norm:              46942.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.844 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.677 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69898.999 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 11505.372 ops/s
[info]                  ·gc.alloc.rate:                   343.255 MB/sec
[info]                  ·gc.alloc.rate.norm:              46941.825 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      320.481 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 43827.342 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 11107.247 ops/s
[info]                  ·gc.alloc.rate:                   331.239 MB/sec
[info]                  ·gc.alloc.rate.norm:              46941.841 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.799 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      320.370 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 45401.481 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 11546.735 ops/s
[info]                  ·gc.alloc.rate:                   344.343 MB/sec
[info]                  ·gc.alloc.rate.norm:              46941.730 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.674 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      322.659 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 43985.721 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 11516.231 ops/s
[info]                  ·gc.alloc.rate:                   343.541 MB/sec
[info]                  ·gc.alloc.rate.norm:              46941.937 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      322.772 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 44104.095 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala":
[info]   11438.691 ±(99.9%) 715.889 ops/s [Average]
[info]   (min, avg, max) = (11107.247, 11438.691, 11546.735), stdev = 185.914
[info]   CI (99.9%): [10722.802, 12154.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   341.201 ±(99.9%) 21.499 MB/sec [Average]
[info]   (min, avg, max) = (331.239, 341.201, 344.343), stdev = 5.583
[info]   CI (99.9%): [319.702, 362.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   46941.867 ±(99.9%) 0.404 B/op [Average]
[info]   (min, avg, max) = (46941.730, 46941.867, 46942.001), stdev = 0.105
[info]   CI (99.9%): [46941.463, 46942.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.083), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   4.063 ±(99.9%) 18.956 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.063, 11.799), stdev = 4.923
[info]   CI (99.9%): [≈ 0, 23.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   359.592 ±(99.9%) 327.404 MB/sec [Average]
[info]   (min, avg, max) = (320.370, 359.592, 511.677), stdev = 85.026
[info]   CI (99.9%): [32.188, 686.996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   49443.528 ±(99.9%) 44097.993 B/op [Average]
[info]   (min, avg, max) = (43827.342, 49443.528, 69898.999), stdev = 11452.109
[info]   CI (99.9%): [5345.534, 93541.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala
[info] # Run progress: 24.42% complete, ETA 00:34:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11815.232 ops/s
[info] # Warmup Iteration   2: 12791.858 ops/s
[info] # Warmup Iteration   3: 12947.815 ops/s
[info] Iteration   1: 13020.305 ops/s
[info]                  ·gc.alloc.rate:                   318.009 MB/sec
[info]                  ·gc.alloc.rate.norm:              38448.034 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.013 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.518 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.504 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61841.988 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 13063.200 ops/s
[info]                  ·gc.alloc.rate:                   319.062 MB/sec
[info]                  ·gc.alloc.rate.norm:              38448.031 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.734 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30816.867 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 13051.860 ops/s
[info]                  ·gc.alloc.rate:                   318.824 MB/sec
[info]                  ·gc.alloc.rate.norm:              38448.031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.754 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     452.700 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.715 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39640.896 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 13021.164 ops/s
[info]                  ·gc.alloc.rate:                   318.181 MB/sec
[info]                  ·gc.alloc.rate.norm:              38448.034 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.548 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.833 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39735.257 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 13032.896 ops/s
[info]                  ·gc.alloc.rate:                   318.430 MB/sec
[info]                  ·gc.alloc.rate.norm:              38448.039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      326.456 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39417.126 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala":
[info]   13037.885 ±(99.9%) 73.305 ops/s [Average]
[info]   (min, avg, max) = (13020.305, 13037.885, 13063.200), stdev = 19.037
[info]   CI (99.9%): [12964.580, 13111.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   318.501 ±(99.9%) 1.687 MB/sec [Average]
[info]   (min, avg, max) = (318.009, 318.501, 319.062), stdev = 0.438
[info]   CI (99.9%): [316.814, 320.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   38448.034 ±(99.9%) 0.013 B/op [Average]
[info]   (min, avg, max) = (38448.031, 38448.034, 38448.039), stdev = 0.003
[info]   CI (99.9%): [38448.021, 38448.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.766 ±(99.9%) 6.433 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.766, 3.754), stdev = 1.671
[info]   CI (99.9%): [≈ 0, 7.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   92.353 ±(99.9%) 775.767 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 92.353, 452.700), stdev = 201.464
[info]   CI (99.9%): [≈ 0, 868.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   350.249 ±(99.9%) 367.452 MB/sec [Average]
[info]   (min, avg, max) = (255.734, 350.249, 511.504), stdev = 95.426
[info]   CI (99.9%): [≈ 0, 717.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   42290.427 ±(99.9%) 44562.403 B/op [Average]
[info]   (min, avg, max) = (30816.867, 42290.427, 61841.988), stdev = 11572.714
[info]   CI (99.9%): [≈ 0, 86852.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 5.000), stdev = 1.924
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 24.88% complete, ETA 00:34:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12407.767 ops/s
[info] # Warmup Iteration   2: 13560.322 ops/s
[info] # Warmup Iteration   3: 13509.030 ops/s
[info] Iteration   1: 13622.448 ops/s
[info]                  ·gc.alloc.rate:      248.512 MB/sec
[info]                  ·gc.alloc.rate.norm: 28712.030 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 13573.174 ops/s
[info]                  ·gc.alloc.rate:                   247.580 MB/sec
[info]                  ·gc.alloc.rate.norm:              28712.030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.766 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29661.376 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 13586.359 ops/s
[info]                  ·gc.alloc.rate:                   247.878 MB/sec
[info]                  ·gc.alloc.rate.norm:              28712.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.007 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.815 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.810 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29630.818 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 13575.922 ops/s
[info]                  ·gc.alloc.rate:                   247.675 MB/sec
[info]                  ·gc.alloc.rate.norm:              28712.030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.789 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29652.639 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 13533.726 ops/s
[info]                  ·gc.alloc.rate:                   246.850 MB/sec
[info]                  ·gc.alloc.rate.norm:              28712.038 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.748 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     435.955 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.675 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38229.333 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc":
[info]   13578.326 ±(99.9%) 122.265 ops/s [Average]
[info]   (min, avg, max) = (13533.726, 13578.326, 13622.448), stdev = 31.752
[info]   CI (99.9%): [13456.061, 13700.591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   247.699 ±(99.9%) 2.301 MB/sec [Average]
[info]   (min, avg, max) = (246.850, 247.699, 248.512), stdev = 0.598
[info]   CI (99.9%): [245.398, 250.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   28712.032 ±(99.9%) 0.013 B/op [Average]
[info]   (min, avg, max) = (28712.030, 28712.032, 28712.038), stdev = 0.003
[info]   CI (99.9%): [28712.018, 28712.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   0.751 ±(99.9%) 6.451 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.751, 3.748), stdev = 1.675
[info]   CI (99.9%): [≈ 0, 7.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   87.354 ±(99.9%) 750.391 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 87.354, 435.955), stdev = 194.874
[info]   CI (99.9%): [≈ 0, 837.745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   219.208 ±(99.9%) 487.261 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 219.208, 328.675), stdev = 126.540
[info]   CI (99.9%): [≈ 0, 706.469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   25434.833 ±(99.9%) 56589.068 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 25434.833, 38229.333), stdev = 14696.001
[info]   CI (99.9%): [≈ 0, 82023.901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 3.000), stdev = 1.225
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce
[info] # Run progress: 25.35% complete, ETA 00:34:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6561.807 ops/s
[info] # Warmup Iteration   2: 10056.347 ops/s
[info] # Warmup Iteration   3: 10337.529 ops/s
[info] Iteration   1: 10272.360 ops/s
[info]                  ·gc.alloc.rate:                   1673.704 MB/sec
[info]                  ·gc.alloc.rate.norm:              256440.043 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.378 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1973.525 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 302377.683 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 10306.308 ops/s
[info]                  ·gc.alloc.rate:                   1679.009 MB/sec
[info]                  ·gc.alloc.rate.norm:              256440.043 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.537 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1658.077 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 253243.107 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 10314.648 ops/s
[info]                  ·gc.alloc.rate:                   1680.464 MB/sec
[info]                  ·gc.alloc.rate.norm:              256440.040 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.704 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1670.055 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 254851.635 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 10301.207 ops/s
[info]                  ·gc.alloc.rate:                   1678.967 MB/sec
[info]                  ·gc.alloc.rate.norm:              256450.503 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15.902 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1680.095 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 256622.769 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 10291.940 ops/s
[info]                  ·gc.alloc.rate:                   1676.890 MB/sec
[info]                  ·gc.alloc.rate.norm:              256456.040 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.550 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1686.774 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 257967.624 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce":
[info]   10297.293 ±(99.9%) 62.332 ops/s [Average]
[info]   (min, avg, max) = (10272.360, 10297.293, 10314.648), stdev = 16.187
[info]   CI (99.9%): [10234.961, 10359.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate":
[info]   1677.807 ±(99.9%) 10.100 MB/sec [Average]
[info]   (min, avg, max) = (1673.704, 1677.807, 1680.464), stdev = 2.623
[info]   CI (99.9%): [1667.707, 1687.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   256445.334 ±(99.9%) 28.903 B/op [Average]
[info]   (min, avg, max) = (256440.040, 256445.334, 256456.040), stdev = 7.506
[info]   CI (99.9%): [256416.431, 256474.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   10.814 ±(99.9%) 13.933 B/op [Average]
[info]   (min, avg, max) = (6.378, 10.814, 15.902), stdev = 3.618
[info]   CI (99.9%): [≈ 0, 24.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1733.705 ±(99.9%) 517.912 MB/sec [Average]
[info]   (min, avg, max) = (1658.077, 1733.705, 1973.525), stdev = 134.500
[info]   CI (99.9%): [1215.793, 2251.617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   265012.564 ±(99.9%) 80724.425 B/op [Average]
[info]   (min, avg, max) = (253243.107, 265012.564, 302377.683), stdev = 20963.877
[info]   CI (99.9%): [184288.139, 345736.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala
[info] # Run progress: 25.81% complete, ETA 00:34:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4658.644 ops/s
[info] # Warmup Iteration   2: 9679.393 ops/s
[info] # Warmup Iteration   3: 9956.120 ops/s
[info] Iteration   1: 10003.983 ops/s
[info]                  ·gc.alloc.rate:                   1545.556 MB/sec
[info]                  ·gc.alloc.rate.norm:              243136.044 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16.373 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1653.563 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 260126.903 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 10065.559 ops/s
[info]                  ·gc.alloc.rate:                   1554.672 MB/sec
[info]                  ·gc.alloc.rate.norm:              243136.041 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19.528 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1667.889 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 260842.133 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 10095.121 ops/s
[info]                  ·gc.alloc.rate:                   1559.455 MB/sec
[info]                  ·gc.alloc.rate.norm:              243136.044 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.245 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.832 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 209206.334 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 9946.138 ops/s
[info]                  ·gc.alloc.rate:                   1536.435 MB/sec
[info]                  ·gc.alloc.rate.norm:              243145.765 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19.764 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1684.459 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 266571.040 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 10100.830 ops/s
[info]                  ·gc.alloc.rate:                   1560.725 MB/sec
[info]                  ·gc.alloc.rate.norm:              243168.040 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.730 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.277 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 210690.813 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala":
[info]   10042.326 ±(99.9%) 254.493 ops/s [Average]
[info]   (min, avg, max) = (9946.138, 10042.326, 10100.830), stdev = 66.091
[info]   CI (99.9%): [9787.833, 10296.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1551.369 ±(99.9%) 39.488 MB/sec [Average]
[info]   (min, avg, max) = (1536.435, 1551.369, 1560.725), stdev = 10.255
[info]   CI (99.9%): [1511.880, 1590.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   243144.387 ±(99.9%) 53.435 B/op [Average]
[info]   (min, avg, max) = (243136.041, 243144.387, 243168.040), stdev = 13.877
[info]   CI (99.9%): [243090.952, 243197.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.087, 0.125), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   13.728 ±(99.9%) 27.427 B/op [Average]
[info]   (min, avg, max) = (3.245, 13.728, 19.764), stdev = 7.123
[info]   CI (99.9%): [≈ 0, 41.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1540.004 ±(99.9%) 679.698 MB/sec [Average]
[info]   (min, avg, max) = (1341.832, 1540.004, 1684.459), stdev = 176.515
[info]   CI (99.9%): [860.306, 2219.702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   241487.444 ±(99.9%) 111298.311 B/op [Average]
[info]   (min, avg, max) = (209206.334, 241487.444, 266571.040), stdev = 28903.818
[info]   CI (99.9%): [130189.133, 352785.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 7.000), stdev = 0.894
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala
[info] # Run progress: 26.27% complete, ETA 00:34:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 94109.196 ops/s
[info] # Warmup Iteration   2: 100671.614 ops/s
[info] # Warmup Iteration   3: 100897.648 ops/s
[info] Iteration   1: 99658.177 ops/s
[info]                  ·gc.alloc.rate:                   648.406 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.644 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      661.783 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10451.256 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 101375.105 ops/s
[info]                  ·gc.alloc.rate:                   659.530 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.616 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.099 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10248.827 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 101616.951 ops/s
[info]                  ·gc.alloc.rate:                   661.172 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.322 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      659.833 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10219.265 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 101819.344 ops/s
[info]                  ·gc.alloc.rate:                   662.418 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.965 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.424 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10209.190 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 99475.799 ops/s
[info]                  ·gc.alloc.rate:                   647.119 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.659 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      661.371 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10465.525 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala":
[info]   100789.076 ±(99.9%) 4345.383 ops/s [Average]
[info]   (min, avg, max) = (99475.799, 100789.076, 101819.344), stdev = 1128.482
[info]   CI (99.9%): [96443.693, 105134.458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   655.729 ±(99.9%) 28.333 MB/sec [Average]
[info]   (min, avg, max) = (647.119, 655.729, 662.418), stdev = 7.358
[info]   CI (99.9%): [627.396, 684.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   10240.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10240.004, 10240.004, 10240.004), stdev = 0.001
[info]   CI (99.9%): [10240.003, 10240.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.104), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.041 ±(99.9%) 2.247 B/op [Average]
[info]   (min, avg, max) = (0.322, 1.041, 1.644), stdev = 0.584
[info]   CI (99.9%): [≈ 0, 3.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   660.702 ±(99.9%) 3.229 MB/sec [Average]
[info]   (min, avg, max) = (659.833, 660.702, 661.783), stdev = 0.839
[info]   CI (99.9%): [657.473, 663.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   10318.812 ±(99.9%) 494.213 B/op [Average]
[info]   (min, avg, max) = (10209.190, 10318.812, 10465.525), stdev = 128.346
[info]   CI (99.9%): [9824.599, 10813.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson
[info] # Run progress: 26.73% complete, ETA 00:33:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2755.696 ops/s
[info] # Warmup Iteration   2: 5824.448 ops/s
[info] # Warmup Iteration   3: 5862.333 ops/s
[info] Iteration   1: 5978.953 ops/s
[info]                  ·gc.alloc.rate:                   1578.514 MB/sec
[info]                  ·gc.alloc.rate.norm:              415600.074 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16.436 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1654.390 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 435577.173 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 6005.836 ops/s
[info]                  ·gc.alloc.rate:                   1585.843 MB/sec
[info]                  ·gc.alloc.rate.norm:              415600.068 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27.275 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1669.864 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 437619.449 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 6000.150 ops/s
[info]                  ·gc.alloc.rate:                   1584.202 MB/sec
[info]                  ·gc.alloc.rate.norm:              415600.073 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.919 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.547 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 352204.135 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 6000.900 ops/s
[info]                  ·gc.alloc.rate:                   1584.756 MB/sec
[info]                  ·gc.alloc.rate.norm:              415600.068 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1686.098 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 442176.917 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 5978.872 ops/s
[info]                  ·gc.alloc.rate:                   1578.609 MB/sec
[info]                  ·gc.alloc.rate.norm:              415600.068 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21.918 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1691.398 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 445294.106 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson":
[info]   5992.942 ±(99.9%) 50.030 ops/s [Average]
[info]   (min, avg, max) = (5978.872, 5992.942, 6005.836), stdev = 12.993
[info]   CI (99.9%): [5942.912, 6042.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1582.385 ±(99.9%) 13.631 MB/sec [Average]
[info]   (min, avg, max) = (1578.514, 1582.385, 1585.843), stdev = 3.540
[info]   CI (99.9%): [1568.754, 1596.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   415600.070 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (415600.068, 415600.070, 415600.074), stdev = 0.003
[info]   CI (99.9%): [415600.059, 415600.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.104), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   15.310 ±(99.9%) 40.467 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15.310, 27.275), stdev = 10.509
[info]   CI (99.9%): [≈ 0, 55.777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1608.859 ±(99.9%) 575.975 MB/sec [Average]
[info]   (min, avg, max) = (1342.547, 1608.859, 1691.398), stdev = 149.579
[info]   CI (99.9%): [1032.884, 2184.834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   422574.356 ±(99.9%) 152183.805 B/op [Average]
[info]   (min, avg, max) = (352204.135, 422574.356, 445294.106), stdev = 39521.651
[info]   CI (99.9%): [270390.551, 574758.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce
[info] # Run progress: 27.19% complete, ETA 00:33:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17433.919 ops/s
[info] # Warmup Iteration   2: 24993.482 ops/s
[info] # Warmup Iteration   3: 25269.420 ops/s
[info] Iteration   1: 25381.093 ops/s
[info]                  ·gc.alloc.rate:                   1426.577 MB/sec
[info]                  ·gc.alloc.rate.norm:              88480.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.582 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1309.633 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 81226.846 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 24938.178 ops/s
[info]                  ·gc.alloc.rate:                   1401.578 MB/sec
[info]                  ·gc.alloc.rate.norm:              88470.230 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.255 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1317.673 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 83173.941 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 25059.307 ops/s
[info]                  ·gc.alloc.rate:                   1408.325 MB/sec
[info]                  ·gc.alloc.rate.norm:              88456.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.537 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1658.933 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 104196.566 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 25255.081 ops/s
[info]                  ·gc.alloc.rate:                   1419.744 MB/sec
[info]                  ·gc.alloc.rate.norm:              88456.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.189 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1335.921 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 83233.496 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 24850.689 ops/s
[info]                  ·gc.alloc.rate:                   1396.795 MB/sec
[info]                  ·gc.alloc.rate.norm:              88456.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.910 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.019 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 85050.461 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce":
[info]   25096.870 ±(99.9%) 845.855 ops/s [Average]
[info]   (min, avg, max) = (24850.689, 25096.870, 25381.093), stdev = 219.666
[info]   CI (99.9%): [24251.015, 25942.725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1410.604 ±(99.9%) 47.785 MB/sec [Average]
[info]   (min, avg, max) = (1396.795, 1410.604, 1426.577), stdev = 12.410
[info]   CI (99.9%): [1362.818, 1458.389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   88463.659 ±(99.9%) 42.442 B/op [Average]
[info]   (min, avg, max) = (88456.016, 88463.659, 88480.016), stdev = 11.022
[info]   CI (99.9%): [88421.217, 88506.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.087, 0.125), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5.495 ±(99.9%) 7.594 B/op [Average]
[info]   (min, avg, max) = (2.582, 5.495, 7.910), stdev = 1.972
[info]   CI (99.9%): [≈ 0, 13.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1393.036 ±(99.9%) 574.704 MB/sec [Average]
[info]   (min, avg, max) = (1309.633, 1393.036, 1658.933), stdev = 149.249
[info]   CI (99.9%): [818.331, 1967.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   87376.262 ±(99.9%) 36579.562 B/op [Average]
[info]   (min, avg, max) = (81226.846, 87376.262, 104196.566), stdev = 9499.596
[info]   CI (99.9%): [50796.700, 123955.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala
[info] # Run progress: 27.65% complete, ETA 00:33:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 208819.387 ops/s
[info] # Warmup Iteration   2: 235506.397 ops/s
[info] # Warmup Iteration   3: 234006.445 ops/s
[info] Iteration   1: 231841.280 ops/s
[info]                  ·gc.alloc.rate:                   1416.313 MB/sec
[info]                  ·gc.alloc.rate.norm:              9616.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.848 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1310.149 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8895.205 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 234378.179 ops/s
[info]                  ·gc.alloc.rate:                   1431.609 MB/sec
[info]                  ·gc.alloc.rate.norm:              9616.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.699 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1317.263 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8847.950 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 233695.949 ops/s
[info]                  ·gc.alloc.rate:                   1427.583 MB/sec
[info]                  ·gc.alloc.rate.norm:              9616.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.280 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1659.401 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11177.495 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 234579.714 ops/s
[info]                  ·gc.alloc.rate:                   1433.115 MB/sec
[info]                  ·gc.alloc.rate.norm:              9616.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.279 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1336.503 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8967.746 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 234488.217 ops/s
[info]                  ·gc.alloc.rate:                   1432.499 MB/sec
[info]                  ·gc.alloc.rate.norm:              9616.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.699 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.780 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9013.739 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala":
[info]   233796.668 ±(99.9%) 4417.027 ops/s [Average]
[info]   (min, avg, max) = (231841.280, 233796.668, 234579.714), stdev = 1147.088
[info]   CI (99.9%): [229379.640, 238213.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1428.224 ±(99.9%) 26.951 MB/sec [Average]
[info]   (min, avg, max) = (1416.313, 1428.224, 1433.115), stdev = 6.999
[info]   CI (99.9%): [1401.273, 1455.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   9616.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (9616.002, 9616.002, 9616.002), stdev = 0.001
[info]   CI (99.9%): [9616.002, 9616.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.125), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.561 ±(99.9%) 1.016 B/op [Average]
[info]   (min, avg, max) = (0.279, 0.561, 0.848), stdev = 0.264
[info]   CI (99.9%): [≈ 0, 1.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1393.219 ±(99.9%) 575.293 MB/sec [Average]
[info]   (min, avg, max) = (1310.149, 1393.219, 1659.401), stdev = 149.402
[info]   CI (99.9%): [817.926, 1968.512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   9380.427 ±(99.9%) 3876.162 B/op [Average]
[info]   (min, avg, max) = (8847.950, 9380.427, 11177.495), stdev = 1006.627
[info]   CI (99.9%): [5504.265, 13256.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 5.000), stdev = 0.837
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 28.11% complete, ETA 00:33:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 217995.917 ops/s
[info] # Warmup Iteration   2: 233739.602 ops/s
[info] # Warmup Iteration   3: 233019.988 ops/s
[info] Iteration   1: 232902.821 ops/s
[info]                  ·gc.alloc.rate:                   908.993 MB/sec
[info]                  ·gc.alloc.rate.norm:              6144.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.563 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      979.665 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6621.685 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 233660.608 ops/s
[info]                  ·gc.alloc.rate:                   912.067 MB/sec
[info]                  ·gc.alloc.rate.norm:              6144.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.841 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      979.786 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6600.179 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 232002.104 ops/s
[info]                  ·gc.alloc.rate:                   905.562 MB/sec
[info]                  ·gc.alloc.rate.norm:              6144.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.847 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      983.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6669.963 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 233674.691 ops/s
[info]                  ·gc.alloc.rate:                   912.245 MB/sec
[info]                  ·gc.alloc.rate.norm:              6144.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.280 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658.178 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4432.852 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 233833.743 ops/s
[info]                  ·gc.alloc.rate:                   912.770 MB/sec
[info]                  ·gc.alloc.rate.norm:              6144.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.701 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      991.460 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6673.673 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc":
[info]   233214.793 ±(99.9%) 2958.548 ops/s [Average]
[info]   (min, avg, max) = (232002.104, 233214.793, 233833.743), stdev = 768.326
[info]   CI (99.9%): [230256.245, 236173.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   910.327 ±(99.9%) 11.737 MB/sec [Average]
[info]   (min, avg, max) = (905.562, 910.327, 912.770), stdev = 3.048
[info]   CI (99.9%): [898.590, 922.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   6144.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6144.002, 6144.002, 6144.002), stdev = 0.001
[info]   CI (99.9%): [6144.002, 6144.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   0.096 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.096, 0.125), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   0.646 ±(99.9%) 0.908 B/op [Average]
[info]   (min, avg, max) = (0.280, 0.646, 0.847), stdev = 0.236
[info]   CI (99.9%): [≈ 0, 1.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   918.434 ±(99.9%) 560.525 MB/sec [Average]
[info]   (min, avg, max) = (658.178, 918.434, 991.460), stdev = 145.567
[info]   CI (99.9%): [357.909, 1478.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   6199.671 ±(99.9%) 3805.131 B/op [Average]
[info]   (min, avg, max) = (4432.852, 6199.671, 6673.673), stdev = 988.181
[info]   CI (99.9%): [2394.539, 10004.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson
[info] # Run progress: 28.57% complete, ETA 00:33:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17927.135 ops/s
[info] # Warmup Iteration   2: 27782.149 ops/s
[info] # Warmup Iteration   3: 28013.533 ops/s
[info] Iteration   1: 28031.498 ops/s
[info]                  ·gc.alloc.rate:                   1474.525 MB/sec
[info]                  ·gc.alloc.rate.norm:              82792.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.506 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1623.925 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 91180.522 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 27920.025 ops/s
[info]                  ·gc.alloc.rate:                   1468.884 MB/sec
[info]                  ·gc.alloc.rate.norm:              82792.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.520 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1309.752 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 73822.754 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 27576.090 ops/s
[info]                  ·gc.alloc.rate:                   1450.755 MB/sec
[info]                  ·gc.alloc.rate.norm:              82792.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.940 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1320.333 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 75349.055 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 27852.949 ops/s
[info]                  ·gc.alloc.rate:                   1464.990 MB/sec
[info]                  ·gc.alloc.rate.norm:              82792.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.352 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1664.026 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 94040.243 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 27971.665 ops/s
[info]                  ·gc.alloc.rate:                   1471.338 MB/sec
[info]                  ·gc.alloc.rate.norm:              82792.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.809 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 75390.879 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson":
[info]   27870.445 ±(99.9%) 682.316 ops/s [Average]
[info]   (min, avg, max) = (27576.090, 27870.445, 28031.498), stdev = 177.195
[info]   CI (99.9%): [27188.129, 28552.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1466.099 ±(99.9%) 35.651 MB/sec [Average]
[info]   (min, avg, max) = (1450.755, 1466.099, 1474.525), stdev = 9.258
[info]   CI (99.9%): [1430.448, 1501.750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   82792.016 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (82792.015, 82792.016, 82792.018), stdev = 0.001
[info]   CI (99.9%): [82792.010, 82792.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.125), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4.469 ±(99.9%) 7.461 B/op [Average]
[info]   (min, avg, max) = (2.352, 4.469, 7.027), stdev = 1.938
[info]   CI (99.9%): [≈ 0, 11.930] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1451.569 ±(99.9%) 679.804 MB/sec [Average]
[info]   (min, avg, max) = (1309.752, 1451.569, 1664.026), stdev = 176.543
[info]   CI (99.9%): [771.765, 2131.373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   81956.691 ±(99.9%) 37729.579 B/op [Average]
[info]   (min, avg, max) = (73822.754, 81956.691, 94040.243), stdev = 9798.252
[info]   CI (99.9%): [44227.112, 119686.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 8.000), stdev = 1.673
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce
[info] # Run progress: 29.03% complete, ETA 00:32:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13176.287 ops/s
[info] # Warmup Iteration   2: 16636.160 ops/s
[info] # Warmup Iteration   3: 16736.380 ops/s
[info] Iteration   1: 16682.528 ops/s
[info]                  ·gc.alloc.rate:                   2074.981 MB/sec
[info]                  ·gc.alloc.rate.norm:              195737.752 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.820 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1985.648 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 187310.804 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 16717.056 ops/s
[info]                  ·gc.alloc.rate:                   2078.826 MB/sec
[info]                  ·gc.alloc.rate.norm:              195752.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17.638 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2002.667 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 188580.624 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 16833.025 ops/s
[info]                  ·gc.alloc.rate:                   2093.357 MB/sec
[info]                  ·gc.alloc.rate.norm:              195752.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.678 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2016.093 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 188526.939 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 16689.384 ops/s
[info]                  ·gc.alloc.rate:                   2076.357 MB/sec
[info]                  ·gc.alloc.rate.norm:              195751.071 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.271 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25.520 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2365.472 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 223007.716 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 16678.421 ops/s
[info]                  ·gc.alloc.rate:                   2074.769 MB/sec
[info]                  ·gc.alloc.rate.norm:              195752.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.964 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033.292 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 191838.745 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce":
[info]   16720.083 ±(99.9%) 249.949 ops/s [Average]
[info]   (min, avg, max) = (16678.421, 16720.083, 16833.025), stdev = 64.911
[info]   CI (99.9%): [16470.133, 16970.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   2079.658 ±(99.9%) 30.139 MB/sec [Average]
[info]   (min, avg, max) = (2074.769, 2079.658, 2093.357), stdev = 7.827
[info]   CI (99.9%): [2049.519, 2109.797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   195748.980 ±(99.9%) 24.221 B/op [Average]
[info]   (min, avg, max) = (195737.752, 195748.980, 195752.026), stdev = 6.290
[info]   CI (99.9%): [195724.759, 195773.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.142 ±(99.9%) 0.360 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.142, 0.271), stdev = 0.094
[info]   CI (99.9%): [≈ 0, 0.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   13.324 ±(99.9%) 33.975 B/op [Average]
[info]   (min, avg, max) = (1.964, 13.324, 25.520), stdev = 8.823
[info]   CI (99.9%): [≈ 0, 47.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2080.634 ±(99.9%) 616.826 MB/sec [Average]
[info]   (min, avg, max) = (1985.648, 2080.634, 2365.472), stdev = 160.188
[info]   CI (99.9%): [1463.809, 2697.460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   195852.966 ±(99.9%) 58809.702 B/op [Average]
[info]   (min, avg, max) = (187310.804, 195852.966, 223007.716), stdev = 15272.693
[info]   CI (99.9%): [137043.264, 254662.668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala
[info] # Run progress: 29.49% complete, ETA 00:32:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26758.883 ops/s
[info] # Warmup Iteration   2: 39640.450 ops/s
[info] # Warmup Iteration   3: 40962.568 ops/s
[info] Iteration   1: 41114.824 ops/s
[info]                  ·gc.alloc.rate:                   295.281 MB/sec
[info]                  ·gc.alloc.rate.norm:              11306.376 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.717 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9791.435 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 40767.945 ops/s
[info]                  ·gc.alloc.rate:                   292.776 MB/sec
[info]                  ·gc.alloc.rate.norm:              11304.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.765 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9875.001 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 40884.481 ops/s
[info]                  ·gc.alloc.rate:                   293.533 MB/sec
[info]                  ·gc.alloc.rate.norm:              11304.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.609 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      323.619 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12462.594 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 41208.373 ops/s
[info]                  ·gc.alloc.rate:                   295.957 MB/sec
[info]                  ·gc.alloc.rate.norm:              11304.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      323.718 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12364.323 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 40376.195 ops/s
[info]                  ·gc.alloc.rate:                   289.950 MB/sec
[info]                  ·gc.alloc.rate.norm:              11304.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      325.687 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12697.265 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala":
[info]   40870.364 ±(99.9%) 1260.907 ops/s [Average]
[info]   (min, avg, max) = (40376.195, 40870.364, 41208.373), stdev = 327.453
[info]   CI (99.9%): [39609.457, 42131.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   293.500 ±(99.9%) 9.100 MB/sec [Average]
[info]   (min, avg, max) = (289.950, 293.500, 295.957), stdev = 2.363
[info]   CI (99.9%): [284.400, 302.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   11304.483 ±(99.9%) 4.075 B/op [Average]
[info]   (min, avg, max) = (11304.010, 11304.483, 11306.376), stdev = 1.058
[info]   CI (99.9%): [11300.409, 11308.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.251 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.146), stdev = 0.065
[info]   CI (99.9%): [≈ 0, 0.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.122 ±(99.9%) 9.660 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.122, 5.609), stdev = 2.509
[info]   CI (99.9%): [≈ 0, 10.782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   296.901 ±(99.9%) 144.720 MB/sec [Average]
[info]   (min, avg, max) = (255.717, 296.901, 325.687), stdev = 37.583
[info]   CI (99.9%): [152.181, 441.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   11438.124 ±(99.9%) 5661.808 B/op [Average]
[info]   (min, avg, max) = (9791.435, 11438.124, 12697.265), stdev = 1470.353
[info]   CI (99.9%): [5776.316, 17099.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala
[info] # Run progress: 29.95% complete, ETA 00:32:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 83375.711 ops/s
[info] # Warmup Iteration   2: 90101.653 ops/s
[info] # Warmup Iteration   3: 90639.302 ops/s
[info] Iteration   1: 90956.051 ops/s
[info]                  ·gc.alloc.rate:                   476.100 MB/sec
[info]                  ·gc.alloc.rate.norm:              8240.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.280 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56.774 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      585.751 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10137.768 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 91545.920 ops/s
[info]                  ·gc.alloc.rate:                   479.290 MB/sec
[info]                  ·gc.alloc.rate.norm:              8240.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.079 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5674.757 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 90957.379 ops/s
[info]                  ·gc.alloc.rate:                   476.157 MB/sec
[info]                  ·gc.alloc.rate.norm:              8240.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.720 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.760 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11365.366 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 91667.872 ops/s
[info]                  ·gc.alloc.rate:                   479.904 MB/sec
[info]                  ·gc.alloc.rate.norm:              8240.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.715 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.720 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5626.991 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 91452.594 ops/s
[info]                  ·gc.alloc.rate:                   478.835 MB/sec
[info]                  ·gc.alloc.rate.norm:              8240.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.759 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5640.217 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala":
[info]   91315.963 ±(99.9%) 1296.570 ops/s [Average]
[info]   (min, avg, max) = (90956.051, 91315.963, 91667.872), stdev = 336.715
[info]   CI (99.9%): [90019.394, 92612.533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   478.057 ±(99.9%) 6.935 MB/sec [Average]
[info]   (min, avg, max) = (476.100, 478.057, 479.904), stdev = 1.801
[info]   CI (99.9%): [471.123, 484.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   8240.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8240.004, 8240.005, 8240.005), stdev = 0.001
[info]   CI (99.9%): [8240.004, 8240.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.673 ±(99.9%) 5.614 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.673, 3.280), stdev = 1.458
[info]   CI (99.9%): [≈ 0, 6.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   11.642 ±(99.9%) 97.161 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.642, 56.774), stdev = 25.232
[info]   CI (99.9%): [≈ 0, 108.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   445.614 ±(99.9%) 624.939 MB/sec [Average]
[info]   (min, avg, max) = (327.720, 445.614, 656.760), stdev = 162.295
[info]   CI (99.9%): [≈ 0, 1070.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   7689.020 ±(99.9%) 10894.447 B/op [Average]
[info]   (min, avg, max) = (5626.991, 7689.020, 11365.366), stdev = 2829.253
[info]   CI (99.9%): [≈ 0, 18583.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 5.000), stdev = 2.121
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson
[info] # Run progress: 30.41% complete, ETA 00:32:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4793.489 ops/s
[info] # Warmup Iteration   2: 8350.460 ops/s
[info] # Warmup Iteration   3: 8676.568 ops/s
[info] Iteration   1: 8625.682 ops/s
[info]                  ·gc.alloc.rate:                   3049.310 MB/sec
[info]                  ·gc.alloc.rate.norm:              556456.051 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15.191 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3021.880 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 551450.348 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 8679.195 ops/s
[info]                  ·gc.alloc.rate:                   3069.473 MB/sec
[info]                  ·gc.alloc.rate.norm:              556456.047 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22.648 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3045.610 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 552130.042 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 8596.638 ops/s
[info]                  ·gc.alloc.rate:                   3039.544 MB/sec
[info]                  ·gc.alloc.rate.norm:              556456.047 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.432 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3054.665 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 559224.274 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   4: 8602.103 ops/s
[info]                  ·gc.alloc.rate:                   3041.031 MB/sec
[info]                  ·gc.alloc.rate.norm:              556466.060 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.425 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3058.325 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 559630.520 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 8599.311 ops/s
[info]                  ·gc.alloc.rate:                   3047.125 MB/sec
[info]                  ·gc.alloc.rate.norm:              557703.044 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34.284 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3063.029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 560613.930 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson":
[info]   8620.586 ±(99.9%) 133.789 ops/s [Average]
[info]   (min, avg, max) = (8596.638, 8620.586, 8679.195), stdev = 34.745
[info]   CI (99.9%): [8486.797, 8754.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3049.297 ±(99.9%) 46.177 MB/sec [Average]
[info]   (min, avg, max) = (3039.544, 3049.297, 3069.473), stdev = 11.992
[info]   CI (99.9%): [3003.120, 3095.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   556707.450 ±(99.9%) 2143.157 B/op [Average]
[info]   (min, avg, max) = (556456.047, 556707.450, 557703.044), stdev = 556.571
[info]   CI (99.9%): [554564.293, 558850.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.104 ±(99.9%) 0.204 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.104, 0.187), stdev = 0.053
[info]   CI (99.9%): [≈ 0, 0.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   18.996 ±(99.9%) 37.337 B/op [Average]
[info]   (min, avg, max) = (11.425, 18.996, 34.284), stdev = 9.696
[info]   CI (99.9%): [≈ 0, 56.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   3048.702 ±(99.9%) 62.755 MB/sec [Average]
[info]   (min, avg, max) = (3021.880, 3048.702, 3063.029), stdev = 16.297
[info]   CI (99.9%): [2985.947, 3111.457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   556609.823 ±(99.9%) 17078.101 B/op [Average]
[info]   (min, avg, max) = (551450.348, 556609.823, 560613.930), stdev = 4435.128
[info]   CI (99.9%): [539531.722, 573687.923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.count":
[info]   45.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.000, 9.000), stdev = 0.001
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.time":
[info]   49.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 9.800, 11.000), stdev = 0.837
[info]   CI (99.9%): [49.000, 49.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce
[info] # Run progress: 30.88% complete, ETA 00:32:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19240.563 ops/s
[info] # Warmup Iteration   2: 22184.723 ops/s
[info] # Warmup Iteration   3: 23154.777 ops/s
[info] Iteration   1: 28102.464 ops/s
[info]                  ·gc.alloc.rate:                   1515.323 MB/sec
[info]                  ·gc.alloc.rate.norm:              84880.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.995 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1306.678 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 73192.903 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 26010.878 ops/s
[info]                  ·gc.alloc.rate:                   1402.489 MB/sec
[info]                  ·gc.alloc.rate.norm:              84870.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1643.469 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 99452.694 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 24020.360 ops/s
[info]                  ·gc.alloc.rate:                   1295.278 MB/sec
[info]                  ·gc.alloc.rate.norm:              84856.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.456 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      993.040 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65055.883 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 24002.272 ops/s
[info]                  ·gc.alloc.rate:                   1294.025 MB/sec
[info]                  ·gc.alloc.rate.norm:              84856.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.190 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1330.814 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 87268.499 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 23948.038 ops/s
[info]                  ·gc.alloc.rate:                   1291.120 MB/sec
[info]                  ·gc.alloc.rate.norm:              84856.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.736 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.147 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 87946.778 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce":
[info]   25216.802 ±(99.9%) 7067.248 ops/s [Average]
[info]   (min, avg, max) = (23948.038, 25216.802, 28102.464), stdev = 1835.342
[info]   CI (99.9%): [18149.555, 32284.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1359.647 ±(99.9%) 381.272 MB/sec [Average]
[info]   (min, avg, max) = (1291.120, 1359.647, 1515.323), stdev = 99.015
[info]   CI (99.9%): [978.375, 1740.919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   84863.619 ±(99.9%) 42.324 B/op [Average]
[info]   (min, avg, max) = (84856.017, 84863.619, 84880.016), stdev = 10.991
[info]   CI (99.9%): [84821.296, 84905.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.092, 0.125), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5.683 ±(99.9%) 7.975 B/op [Average]
[info]   (min, avg, max) = (2.736, 5.683, 8.190), stdev = 2.071
[info]   CI (99.9%): [≈ 0, 13.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1322.430 ±(99.9%) 886.755 MB/sec [Average]
[info]   (min, avg, max) = (993.040, 1322.430, 1643.469), stdev = 230.287
[info]   CI (99.9%): [435.675, 2209.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   82583.351 ±(99.9%) 52043.712 B/op [Average]
[info]   (min, avg, max) = (65055.883, 82583.351, 99452.694), stdev = 13515.587
[info]   CI (99.9%): [30539.639, 134627.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 0.707
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.800, 5.000), stdev = 1.304
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala
[info] # Run progress: 31.34% complete, ETA 00:31:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 67425.122 ops/s
[info] # Warmup Iteration   2: 100200.936 ops/s
[info] # Warmup Iteration   3: 101101.714 ops/s
[info] Iteration   1: 101070.905 ops/s
[info]                  ·gc.alloc.rate:                   815.304 MB/sec
[info]                  ·gc.alloc.rate.norm:              12692.308 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.945 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      970.487 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15108.133 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 100817.462 ops/s
[info]                  ·gc.alloc.rate:                   813.501 MB/sec
[info]                  ·gc.alloc.rate.norm:              12692.332 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.622 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      975.857 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15225.417 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 100349.801 ops/s
[info]                  ·gc.alloc.rate:                   809.276 MB/sec
[info]                  ·gc.alloc.rate.norm:              12692.317 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.159 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10290.912 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 100840.588 ops/s
[info]                  ·gc.alloc.rate:                   813.136 MB/sec
[info]                  ·gc.alloc.rate.norm:              12692.330 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.300 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658.744 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10282.399 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 100323.540 ops/s
[info]                  ·gc.alloc.rate:                   808.969 MB/sec
[info]                  ·gc.alloc.rate.norm:              12692.327 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.980 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      993.426 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15586.362 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala":
[info]   100680.459 ±(99.9%) 1267.771 ops/s [Average]
[info]   (min, avg, max) = (100323.540, 100680.459, 101070.905), stdev = 329.236
[info]   CI (99.9%): [99412.689, 101948.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   812.037 ±(99.9%) 10.731 MB/sec [Average]
[info]   (min, avg, max) = (808.969, 812.037, 815.304), stdev = 2.787
[info]   CI (99.9%): [801.307, 822.768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   12692.323 ±(99.9%) 0.038 B/op [Average]
[info]   (min, avg, max) = (12692.308, 12692.323, 12692.332), stdev = 0.010
[info]   CI (99.9%): [12692.284, 12692.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.075, 0.125), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.169 ±(99.9%) 2.873 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.169, 1.945), stdev = 0.746
[info]   CI (99.9%): [≈ 0, 4.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   850.934 ±(99.9%) 680.913 MB/sec [Average]
[info]   (min, avg, max) = (656.159, 850.934, 993.426), stdev = 176.831
[info]   CI (99.9%): [170.022, 1531.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   13298.645 ±(99.9%) 10609.300 B/op [Average]
[info]   (min, avg, max) = (10282.399, 13298.645, 15586.362), stdev = 2755.202
[info]   CI (99.9%): [2689.344, 23907.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala
[info] # Run progress: 31.80% complete, ETA 00:31:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 108339.324 ops/s
[info] # Warmup Iteration   2: 118386.272 ops/s
[info] # Warmup Iteration   3: 117118.311 ops/s
[info] Iteration   1: 117722.541 ops/s
[info]                  ·gc.alloc.rate:                   501.496 MB/sec
[info]                  ·gc.alloc.rate.norm:              6704.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.672 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49.091 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      584.581 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7814.693 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 117588.289 ops/s
[info]                  ·gc.alloc.rate:                   500.908 MB/sec
[info]                  ·gc.alloc.rate.norm:              6704.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.557 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.875 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8778.033 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 119192.238 ops/s
[info]                  ·gc.alloc.rate:                   507.818 MB/sec
[info]                  ·gc.alloc.rate.norm:              6704.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.275 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.144 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4318.820 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 117677.156 ops/s
[info]                  ·gc.alloc.rate:                   501.317 MB/sec
[info]                  ·gc.alloc.rate.norm:              6704.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.835 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.916 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8731.303 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 118616.031 ops/s
[info]                  ·gc.alloc.rate:                   505.304 MB/sec
[info]                  ·gc.alloc.rate.norm:              6704.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      326.425 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4330.767 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala":
[info]   118159.251 ±(99.9%) 2739.672 ops/s [Average]
[info]   (min, avg, max) = (117588.289, 118159.251, 119192.238), stdev = 711.484
[info]   CI (99.9%): [115419.579, 120898.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   503.368 ±(99.9%) 11.760 MB/sec [Average]
[info]   (min, avg, max) = (500.908, 503.368, 507.818), stdev = 3.054
[info]   CI (99.9%): [491.609, 515.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   6704.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6704.003, 6704.004, 6704.004), stdev = 0.001
[info]   CI (99.9%): [6704.003, 6704.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.759 ±(99.9%) 6.271 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.759, 3.672), stdev = 1.628
[info]   CI (99.9%): [≈ 0, 7.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   10.152 ±(99.9%) 83.829 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.152, 49.091), stdev = 21.770
[info]   CI (99.9%): [≈ 0, 93.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   509.388 ±(99.9%) 651.207 MB/sec [Average]
[info]   (min, avg, max) = (326.425, 509.388, 655.875), stdev = 169.116
[info]   CI (99.9%): [≈ 0, 1160.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   6794.723 ±(99.9%) 8807.243 B/op [Average]
[info]   (min, avg, max) = (4318.820, 6794.723, 8778.033), stdev = 2287.213
[info]   CI (99.9%): [≈ 0, 15601.967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 6.000), stdev = 2.280
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 32.26% complete, ETA 00:31:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 138419.242 ops/s
[info] # Warmup Iteration   2: 154233.024 ops/s
[info] # Warmup Iteration   3: 154588.649 ops/s
[info] Iteration   1: 154534.119 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 154464.310 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 154284.627 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 153825.668 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 154260.172 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   154273.779 ±(99.9%) 1063.617 ops/s [Average]
[info]   (min, avg, max) = (153825.668, 154273.779, 154534.119), stdev = 276.218
[info]   CI (99.9%): [153210.162, 155337.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.003, 0.003, 0.003), stdev = 0.001
[info]   CI (99.9%): [0.003, 0.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson
[info] # Run progress: 32.72% complete, ETA 00:31:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2845.758 ops/s
[info] # Warmup Iteration   2: 4028.855 ops/s
[info] # Warmup Iteration   3: 4200.989 ops/s
[info] Iteration   1: 4217.891 ops/s
[info]                  ·gc.alloc.rate:                   1814.939 MB/sec
[info]                  ·gc.alloc.rate.norm:              677212.331 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.767 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1632.234 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 609038.987 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 4214.367 ops/s
[info]                  ·gc.alloc.rate:                   1813.059 MB/sec
[info]                  ·gc.alloc.rate.norm:              677212.632 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15.545 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1979.616 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 739425.154 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 4153.270 ops/s
[info]                  ·gc.alloc.rate:                   1787.037 MB/sec
[info]                  ·gc.alloc.rate.norm:              677212.389 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.888 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1666.259 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 631442.673 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 4181.843 ops/s
[info]                  ·gc.alloc.rate:                   1799.264 MB/sec
[info]                  ·gc.alloc.rate.norm:              677212.456 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.834 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1677.018 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 631201.140 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 4195.852 ops/s
[info]                  ·gc.alloc.rate:                   1805.322 MB/sec
[info]                  ·gc.alloc.rate.norm:              677212.327 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15.615 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2022.719 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 758762.285 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson":
[info]   4192.645 ±(99.9%) 101.634 ops/s [Average]
[info]   (min, avg, max) = (4153.270, 4192.645, 4217.891), stdev = 26.394
[info]   CI (99.9%): [4091.011, 4294.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1803.924 ±(99.9%) 43.634 MB/sec [Average]
[info]   (min, avg, max) = (1787.037, 1803.924, 1814.939), stdev = 11.332
[info]   CI (99.9%): [1760.290, 1847.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   677212.427 ±(99.9%) 0.485 B/op [Average]
[info]   (min, avg, max) = (677212.327, 677212.427, 677212.632), stdev = 0.126
[info]   CI (99.9%): [677211.942, 677212.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.029, 0.042), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   10.930 ±(99.9%) 16.347 B/op [Average]
[info]   (min, avg, max) = (7.767, 10.930, 15.615), stdev = 4.245
[info]   CI (99.9%): [≈ 0, 27.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1795.569 ±(99.9%) 727.874 MB/sec [Average]
[info]   (min, avg, max) = (1632.234, 1795.569, 2022.719), stdev = 189.026
[info]   CI (99.9%): [1067.696, 2523.443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   673974.048 ±(99.9%) 267667.494 B/op [Average]
[info]   (min, avg, max) = (609038.987, 673974.048, 758762.285), stdev = 69512.398
[info]   CI (99.9%): [406306.554, 941641.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce
[info] # Run progress: 33.18% complete, ETA 00:30:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19658.864 ops/s
[info] # Warmup Iteration   2: 27828.269 ops/s
[info] # Warmup Iteration   3: 27697.383 ops/s
[info] Iteration   1: 28152.887 ops/s
[info]                  ·gc.alloc.rate:                   1529.308 MB/sec
[info]                  ·gc.alloc.rate.norm:              85495.247 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.818 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1640.923 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 91735.039 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 28205.578 ops/s
[info]                  ·gc.alloc.rate:                   1530.850 MB/sec
[info]                  ·gc.alloc.rate.norm:              85440.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.808 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1653.322 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 92275.431 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 28094.788 ops/s
[info]                  ·gc.alloc.rate:                   1525.031 MB/sec
[info]                  ·gc.alloc.rate.norm:              85440.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.664 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1331.399 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 74591.773 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 28323.517 ops/s
[info]                  ·gc.alloc.rate:                   1537.872 MB/sec
[info]                  ·gc.alloc.rate.norm:              85440.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.313 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1674.641 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 93038.541 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 27806.365 ops/s
[info]                  ·gc.alloc.rate:                   1509.266 MB/sec
[info]                  ·gc.alloc.rate.norm:              85440.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.535 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.362 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 76161.358 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce":
[info]   28116.627 ±(99.9%) 742.611 ops/s [Average]
[info]   (min, avg, max) = (27806.365, 28116.627, 28323.517), stdev = 192.854
[info]   CI (99.9%): [27374.016, 28859.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate":
[info]   1526.465 ±(99.9%) 41.082 MB/sec [Average]
[info]   (min, avg, max) = (1509.266, 1526.465, 1537.872), stdev = 10.669
[info]   CI (99.9%): [1485.383, 1567.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   85451.061 ±(99.9%) 95.114 B/op [Average]
[info]   (min, avg, max) = (85440.014, 85451.061, 85495.247), stdev = 24.701
[info]   CI (99.9%): [85355.947, 85546.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.104), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4.428 ±(99.9%) 5.828 B/op [Average]
[info]   (min, avg, max) = (2.313, 4.428, 5.818), stdev = 1.513
[info]   CI (99.9%): [≈ 0, 10.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1529.129 ±(99.9%) 672.384 MB/sec [Average]
[info]   (min, avg, max) = (1331.399, 1529.129, 1674.641), stdev = 174.616
[info]   CI (99.9%): [856.745, 2201.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   85560.429 ±(99.9%) 35905.741 B/op [Average]
[info]   (min, avg, max) = (74591.773, 85560.429, 93038.541), stdev = 9324.607
[info]   CI (99.9%): [49654.688, 121466.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala
[info] # Run progress: 33.64% complete, ETA 00:30:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18202.488 ops/s
[info] # Warmup Iteration   2: 31131.690 ops/s
[info] # Warmup Iteration   3: 31486.728 ops/s
[info] Iteration   1: 31187.500 ops/s
[info]                  ·gc.alloc.rate:                   1424.289 MB/sec
[info]                  ·gc.alloc.rate.norm:              71886.369 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.101 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1321.072 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66676.834 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 31181.050 ops/s
[info]                  ·gc.alloc.rate:                   1424.159 MB/sec
[info]                  ·gc.alloc.rate.norm:              71856.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.305 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1665.722 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 84044.115 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 31570.886 ops/s
[info]                  ·gc.alloc.rate:                   1441.832 MB/sec
[info]                  ·gc.alloc.rate.norm:              71856.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1340.671 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66814.508 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 31488.943 ops/s
[info]                  ·gc.alloc.rate:                   1438.036 MB/sec
[info]                  ·gc.alloc.rate.norm:              71856.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.121 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.620 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 67288.121 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 31035.193 ops/s
[info]                  ·gc.alloc.rate:                   1417.060 MB/sec
[info]                  ·gc.alloc.rate.norm:              71856.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.167 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.340 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68472.780 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala":
[info]   31292.715 ±(99.9%) 873.302 ops/s [Average]
[info]   (min, avg, max) = (31035.193, 31292.715, 31570.886), stdev = 226.794
[info]   CI (99.9%): [30419.412, 32166.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1429.075 ±(99.9%) 40.132 MB/sec [Average]
[info]   (min, avg, max) = (1417.060, 1429.075, 1441.832), stdev = 10.422
[info]   CI (99.9%): [1388.943, 1469.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   71862.086 ±(99.9%) 52.273 B/op [Average]
[info]   (min, avg, max) = (71856.013, 71862.086, 71886.369), stdev = 13.575
[info]   CI (99.9%): [71809.813, 71914.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.125), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3.146 ±(99.9%) 7.584 B/op [Average]
[info]   (min, avg, max) = (1.038, 3.146, 6.305), stdev = 1.969
[info]   CI (99.9%): [≈ 0, 10.730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1404.885 ±(99.9%) 563.149 MB/sec [Average]
[info]   (min, avg, max) = (1321.072, 1404.885, 1665.722), stdev = 146.248
[info]   CI (99.9%): [841.736, 1968.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   70659.272 ±(99.9%) 28940.185 B/op [Average]
[info]   (min, avg, max) = (66676.834, 70659.272, 84044.115), stdev = 7515.674
[info]   CI (99.9%): [41719.087, 99599.457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala
[info] # Run progress: 34.10% complete, ETA 00:30:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 260012.605 ops/s
[info] # Warmup Iteration   2: 264836.844 ops/s
[info] # Warmup Iteration   3: 269128.408 ops/s
[info] Iteration   1: 262040.358 ops/s
[info]                  ·gc.alloc.rate:                   681.908 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.625 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      662.074 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3976.865 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 269501.294 ops/s
[info]                  ·gc.alloc.rate:                   701.309 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.486 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.746 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3859.092 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 273239.704 ops/s
[info]                  ·gc.alloc.rate:                   711.246 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.480 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      991.435 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5709.585 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 273724.373 ops/s
[info]                  ·gc.alloc.rate:                   712.328 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.120 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      661.458 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3803.491 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 273980.577 ops/s
[info]                  ·gc.alloc.rate:                   713.047 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.478 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      662.825 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3807.507 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala":
[info]   270497.261 ±(99.9%) 19499.994 ops/s [Average]
[info]   (min, avg, max) = (262040.358, 270497.261, 273980.577), stdev = 5064.087
[info]   CI (99.9%): [250997.267, 289997.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   703.968 ±(99.9%) 50.903 MB/sec [Average]
[info]   (min, avg, max) = (681.908, 703.968, 713.047), stdev = 13.219
[info]   CI (99.9%): [653.065, 754.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.001, 4096.002, 4096.002), stdev = 0.001
[info]   CI (99.9%): [4096.001, 4096.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.075, 0.104), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.438 ±(99.9%) 0.726 B/op [Average]
[info]   (min, avg, max) = (0.120, 0.438, 0.625), stdev = 0.188
[info]   CI (99.9%): [≈ 0, 1.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   727.708 ±(99.9%) 567.701 MB/sec [Average]
[info]   (min, avg, max) = (660.746, 727.708, 991.435), stdev = 147.430
[info]   CI (99.9%): [160.006, 1295.409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4231.308 ±(99.9%) 3193.495 B/op [Average]
[info]   (min, avg, max) = (3803.491, 4231.308, 5709.585), stdev = 829.341
[info]   CI (99.9%): [1037.812, 7424.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson
[info] # Run progress: 34.56% complete, ETA 00:30:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9179.716 ops/s
[info] # Warmup Iteration   2: 17910.008 ops/s
[info] # Warmup Iteration   3: 17748.745 ops/s
[info] Iteration   1: 17882.247 ops/s
[info]                  ·gc.alloc.rate:                   1817.116 MB/sec
[info]                  ·gc.alloc.rate.norm:              159960.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.496 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1995.261 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 175642.049 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 18024.743 ops/s
[info]                  ·gc.alloc.rate:                   1831.747 MB/sec
[info]                  ·gc.alloc.rate.norm:              159960.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.088 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1675.447 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 146310.901 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 17913.336 ops/s
[info]                  ·gc.alloc.rate:                   1820.441 MB/sec
[info]                  ·gc.alloc.rate.norm:              159960.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.486 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2021.982 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 177669.201 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 17793.687 ops/s
[info]                  ·gc.alloc.rate:                   1808.178 MB/sec
[info]                  ·gc.alloc.rate.norm:              159960.031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.841 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1691.340 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 149624.024 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 17883.713 ops/s
[info]                  ·gc.alloc.rate:                   1818.087 MB/sec
[info]                  ·gc.alloc.rate.norm:              159960.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.664 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2034.861 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 179032.320 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson":
[info]   17899.545 ±(99.9%) 319.977 ops/s [Average]
[info]   (min, avg, max) = (17793.687, 17899.545, 18024.743), stdev = 83.097
[info]   CI (99.9%): [17579.568, 18219.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1819.114 ±(99.9%) 32.560 MB/sec [Average]
[info]   (min, avg, max) = (1808.178, 1819.114, 1831.747), stdev = 8.456
[info]   CI (99.9%): [1786.554, 1851.674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   159960.025 ±(99.9%) 0.013 B/op [Average]
[info]   (min, avg, max) = (159960.023, 159960.025, 159960.031), stdev = 0.003
[info]   CI (99.9%): [159960.012, 159960.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.058, 0.104), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   5.115 ±(99.9%) 10.349 B/op [Average]
[info]   (min, avg, max) = (1.841, 5.115, 9.088), stdev = 2.688
[info]   CI (99.9%): [≈ 0, 15.464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1883.778 ±(99.9%) 706.856 MB/sec [Average]
[info]   (min, avg, max) = (1675.447, 1883.778, 2034.861), stdev = 183.568
[info]   CI (99.9%): [1176.923, 2590.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   165655.699 ±(99.9%) 62512.841 B/op [Average]
[info]   (min, avg, max) = (146310.901, 165655.699, 179032.320), stdev = 16234.386
[info]   CI (99.9%): [103142.858, 228168.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce
[info] # Run progress: 35.02% complete, ETA 00:30:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 38736.200 ops/s
[info] # Warmup Iteration   2: 52186.706 ops/s
[info] # Warmup Iteration   3: 52256.712 ops/s
[info] Iteration   1: 52191.870 ops/s
[info]                  ·gc.alloc.rate:                   1376.890 MB/sec
[info]                  ·gc.alloc.rate.norm:              41528.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.511 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1309.729 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39502.389 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 52120.409 ops/s
[info]                  ·gc.alloc.rate:                   1375.327 MB/sec
[info]                  ·gc.alloc.rate.norm:              41528.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.143 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1317.685 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39787.514 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 51957.072 ops/s
[info]                  ·gc.alloc.rate:                   1371.016 MB/sec
[info]                  ·gc.alloc.rate.norm:              41528.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.631 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1325.951 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 40162.995 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 52083.770 ops/s
[info]                  ·gc.alloc.rate:                   1374.456 MB/sec
[info]                  ·gc.alloc.rate.norm:              41528.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.887 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1334.108 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 40308.943 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 51434.559 ops/s
[info]                  ·gc.alloc.rate:                   1357.549 MB/sec
[info]                  ·gc.alloc.rate.norm:              41528.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.185 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.677 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 41042.490 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce":
[info]   51957.536 ±(99.9%) 1172.520 ops/s [Average]
[info]   (min, avg, max) = (51434.559, 51957.536, 52191.870), stdev = 304.500
[info]   CI (99.9%): [50785.016, 53130.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1371.047 ±(99.9%) 30.215 MB/sec [Average]
[info]   (min, avg, max) = (1357.549, 1371.047, 1376.890), stdev = 7.847
[info]   CI (99.9%): [1340.833, 1401.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   41528.008 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (41528.008, 41528.008, 41528.009), stdev = 0.001
[info]   CI (99.9%): [41528.007, 41528.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.075, 0.104), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2.271 ±(99.9%) 4.080 B/op [Average]
[info]   (min, avg, max) = (0.631, 2.271, 3.185), stdev = 1.060
[info]   CI (99.9%): [≈ 0, 6.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1325.830 ±(99.9%) 48.907 MB/sec [Average]
[info]   (min, avg, max) = (1309.729, 1325.830, 1341.677), stdev = 12.701
[info]   CI (99.9%): [1276.923, 1374.737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   40160.866 ±(99.9%) 2255.320 B/op [Average]
[info]   (min, avg, max) = (39502.389, 40160.866, 41042.490), stdev = 585.700
[info]   CI (99.9%): [37905.546, 42416.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala
[info] # Run progress: 35.48% complete, ETA 00:29:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 968070.972 ops/s
[info] # Warmup Iteration   2: 1140673.386 ops/s
[info] # Warmup Iteration   3: 1154978.122 ops/s
[info] Iteration   1: 1161260.662 ops/s
[info]                  ·gc.alloc.rate:                   1245.573 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.085 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1306.390 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1770.420 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1140055.199 ops/s
[info]                  ·gc.alloc.rate:                   1222.531 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.144 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      985.088 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1360.153 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1142387.766 ops/s
[info]                  ·gc.alloc.rate:                   1225.065 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.086 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1320.433 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1819.406 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1151949.107 ops/s
[info]                  ·gc.alloc.rate:                   1235.858 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.114 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1329.423 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1815.796 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1162275.525 ops/s
[info]                  ·gc.alloc.rate:                   1246.445 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.113 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1001.463 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1356.233 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala":
[info]   1151585.652 ±(99.9%) 39717.845 ops/s [Average]
[info]   (min, avg, max) = (1140055.199, 1151585.652, 1162275.525), stdev = 10314.598
[info]   CI (99.9%): [1111867.806, 1191303.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1235.094 ±(99.9%) 42.950 MB/sec [Average]
[info]   (min, avg, max) = (1222.531, 1235.094, 1246.445), stdev = 11.154
[info]   CI (99.9%): [1192.145, 1278.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1688.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1688.000, 1688.000, 1688.000), stdev = 0.001
[info]   CI (99.9%): [1688.000, 1688.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.079, 0.104), stdev = 0.017
[info]   CI (99.9%): [0.012, 0.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.108 ±(99.9%) 0.094 B/op [Average]
[info]   (min, avg, max) = (0.085, 0.108, 0.144), stdev = 0.024
[info]   CI (99.9%): [0.015, 0.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1188.559 ±(99.9%) 687.538 MB/sec [Average]
[info]   (min, avg, max) = (985.088, 1188.559, 1329.423), stdev = 178.551
[info]   CI (99.9%): [501.021, 1876.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1624.401 ±(99.9%) 938.723 B/op [Average]
[info]   (min, avg, max) = (1356.233, 1624.401, 1819.406), stdev = 243.783
[info]   CI (99.9%): [685.679, 2563.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 35.94% complete, ETA 00:29:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1254874.128 ops/s
[info] # Warmup Iteration   2: 1404534.545 ops/s
[info] # Warmup Iteration   3: 1366197.637 ops/s
[info] Iteration   1: 1409443.557 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1409741.183 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1409621.836 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1409068.156 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1409812.670 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc":
[info]   1409537.480 ±(99.9%) 1144.598 ops/s [Average]
[info]   (min, avg, max) = (1409068.156, 1409537.480, 1409812.670), stdev = 297.248
[info]   CI (99.9%): [1408392.883, 1410682.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson
[info] # Run progress: 36.41% complete, ETA 00:29:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 42909.348 ops/s
[info] # Warmup Iteration   2: 59594.306 ops/s
[info] # Warmup Iteration   3: 59737.367 ops/s
[info] Iteration   1: 60110.314 ops/s
[info]                  ·gc.alloc.rate:                   1398.521 MB/sec
[info]                  ·gc.alloc.rate.norm:              36624.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.180 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1298.418 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34002.543 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 59953.508 ops/s
[info]                  ·gc.alloc.rate:                   1395.354 MB/sec
[info]                  ·gc.alloc.rate.norm:              36624.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.279 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1307.155 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34309.021 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 60385.840 ops/s
[info]                  ·gc.alloc.rate:                   1405.245 MB/sec
[info]                  ·gc.alloc.rate.norm:              36624.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.543 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1317.662 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34341.402 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 60167.812 ops/s
[info]                  ·gc.alloc.rate:                   1400.176 MB/sec
[info]                  ·gc.alloc.rate.norm:              36624.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.267 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1661.072 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 43448.175 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 60462.219 ops/s
[info]                  ·gc.alloc.rate:                   1406.966 MB/sec
[info]                  ·gc.alloc.rate.norm:              36624.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.167 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.247 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34835.202 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson":
[info]   60215.939 ±(99.9%) 798.170 ops/s [Average]
[info]   (min, avg, max) = (59953.508, 60215.939, 60462.219), stdev = 207.282
[info]   CI (99.9%): [59417.769, 61014.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1401.252 ±(99.9%) 18.466 MB/sec [Average]
[info]   (min, avg, max) = (1395.354, 1401.252, 1406.966), stdev = 4.796
[info]   CI (99.9%): [1382.786, 1419.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   36624.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (36624.007, 36624.007, 36624.007), stdev = 0.001
[info]   CI (99.9%): [36624.006, 36624.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.164 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.087, 0.125), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2.287 ±(99.9%) 4.311 B/op [Average]
[info]   (min, avg, max) = (0.543, 2.287, 3.279), stdev = 1.119
[info]   CI (99.9%): [≈ 0, 6.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1384.511 ±(99.9%) 598.063 MB/sec [Average]
[info]   (min, avg, max) = (1298.418, 1384.511, 1661.072), stdev = 155.315
[info]   CI (99.9%): [786.448, 1982.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   36187.269 ±(99.9%) 15671.802 B/op [Average]
[info]   (min, avg, max) = (34002.543, 36187.269, 43448.175), stdev = 4069.917
[info]   CI (99.9%): [20515.467, 51859.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 6.000), stdev = 1.095
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce
[info] # Run progress: 36.87% complete, ETA 00:29:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13341.085 ops/s
[info] # Warmup Iteration   2: 18035.784 ops/s
[info] # Warmup Iteration   3: 18261.337 ops/s
[info] Iteration   1: 18224.742 ops/s
[info]                  ·gc.alloc.rate:                   1476.328 MB/sec
[info]                  ·gc.alloc.rate.norm:              127501.718 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.393 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1641.469 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 141763.978 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 18210.558 ops/s
[info]                  ·gc.alloc.rate:                   1475.568 MB/sec
[info]                  ·gc.alloc.rate.norm:              127512.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.196 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1322.401 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 114276.016 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 18313.282 ops/s
[info]                  ·gc.alloc.rate:                   1484.133 MB/sec
[info]                  ·gc.alloc.rate.norm:              127512.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.367 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1664.831 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 143037.079 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 18516.472 ops/s
[info]                  ·gc.alloc.rate:                   1500.306 MB/sec
[info]                  ·gc.alloc.rate.norm:              127511.155 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.539 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.018 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 113803.335 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 18315.095 ops/s
[info]                  ·gc.alloc.rate:                   1484.055 MB/sec
[info]                  ·gc.alloc.rate.norm:              127512.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.944 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1681.218 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 144452.535 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce":
[info]   18316.030 ±(99.9%) 470.201 ops/s [Average]
[info]   (min, avg, max) = (18210.558, 18316.030, 18516.472), stdev = 122.110
[info]   CI (99.9%): [17845.829, 18786.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1484.078 ±(99.9%) 38.304 MB/sec [Average]
[info]   (min, avg, max) = (1475.568, 1484.078, 1500.306), stdev = 9.947
[info]   CI (99.9%): [1445.774, 1522.382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   127509.789 ±(99.9%) 17.435 B/op [Average]
[info]   (min, avg, max) = (127501.718, 127509.789, 127512.030), stdev = 4.528
[info]   CI (99.9%): [127492.354, 127527.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   6.088 ±(99.9%) 7.912 B/op [Average]
[info]   (min, avg, max) = (3.539, 6.088, 8.944), stdev = 2.055
[info]   CI (99.9%): [≈ 0, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1529.788 ±(99.9%) 702.261 MB/sec [Average]
[info]   (min, avg, max) = (1322.401, 1529.788, 1681.218), stdev = 182.375
[info]   CI (99.9%): [827.526, 2232.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   131466.589 ±(99.9%) 61370.784 B/op [Average]
[info]   (min, avg, max) = (113803.335, 131466.589, 144452.535), stdev = 15937.798
[info]   CI (99.9%): [70095.804, 192837.373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala
[info] # Run progress: 37.33% complete, ETA 00:29:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10414.659 ops/s
[info] # Warmup Iteration   2: 18678.844 ops/s
[info] # Warmup Iteration   3: 18645.383 ops/s
[info] Iteration   1: 18617.453 ops/s
[info]                  ·gc.alloc.rate:                   1352.164 MB/sec
[info]                  ·gc.alloc.rate.norm:              114320.568 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.799 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1318.834 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 111502.711 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 18836.579 ops/s
[info]                  ·gc.alloc.rate:                   1368.421 MB/sec
[info]                  ·gc.alloc.rate.norm:              114344.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.957 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1661.865 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 138863.966 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 18857.184 ops/s
[info]                  ·gc.alloc.rate:                   1369.835 MB/sec
[info]                  ·gc.alloc.rate.norm:              114344.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.475 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.447 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 111723.938 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 18619.007 ops/s
[info]                  ·gc.alloc.rate:                   1352.342 MB/sec
[info]                  ·gc.alloc.rate.norm:              114322.945 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.150 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 113630.457 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 18736.933 ops/s
[info]                  ·gc.alloc.rate:                   1361.200 MB/sec
[info]                  ·gc.alloc.rate.norm:              114312.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.742 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.418 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 113322.521 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala":
[info]   18733.431 ±(99.9%) 441.190 ops/s [Average]
[info]   (min, avg, max) = (18617.453, 18733.431, 18857.184), stdev = 114.576
[info]   CI (99.9%): [18292.241, 19174.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1360.792 ±(99.9%) 32.561 MB/sec [Average]
[info]   (min, avg, max) = (1352.164, 1360.792, 1369.835), stdev = 8.456
[info]   CI (99.9%): [1328.232, 1393.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   114328.717 ±(99.9%) 56.038 B/op [Average]
[info]   (min, avg, max) = (114312.022, 114328.717, 114344.027), stdev = 14.553
[info]   CI (99.9%): [114272.680, 114384.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.104), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   7.002 ±(99.9%) 8.326 B/op [Average]
[info]   (min, avg, max) = (3.475, 7.002, 8.799), stdev = 2.162
[info]   CI (99.9%): [≈ 0, 15.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1402.543 ±(99.9%) 559.985 MB/sec [Average]
[info]   (min, avg, max) = (1318.834, 1402.543, 1661.865), stdev = 145.426
[info]   CI (99.9%): [842.558, 1962.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   117808.719 ±(99.9%) 45467.674 B/op [Average]
[info]   (min, avg, max) = (111502.711, 117808.719, 138863.966), stdev = 11807.811
[info]   CI (99.9%): [72341.044, 163276.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala
[info] # Run progress: 37.79% complete, ETA 00:28:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 280169.858 ops/s
[info] # Warmup Iteration   2: 290811.977 ops/s
[info] # Warmup Iteration   3: 296701.739 ops/s
[info] Iteration   1: 301085.664 ops/s
[info]                  ·gc.alloc.rate:                   769.615 MB/sec
[info]                  ·gc.alloc.rate.norm:              4024.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.544 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.648 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3454.257 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 299468.163 ops/s
[info]                  ·gc.alloc.rate:                   765.786 MB/sec
[info]                  ·gc.alloc.rate.norm:              4024.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.547 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.930 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3473.010 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 299220.697 ops/s
[info]                  ·gc.alloc.rate:                   764.910 MB/sec
[info]                  ·gc.alloc.rate.norm:              4024.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.328 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      991.382 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5215.410 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 300356.674 ops/s
[info]                  ·gc.alloc.rate:                   768.063 MB/sec
[info]                  ·gc.alloc.rate.norm:              4024.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      662.249 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3469.621 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 295533.961 ops/s
[info]                  ·gc.alloc.rate:                   755.682 MB/sec
[info]                  ·gc.alloc.rate.norm:              4024.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.443 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      663.539 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3533.342 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala":
[info]   299133.032 ±(99.9%) 8254.981 ops/s [Average]
[info]   (min, avg, max) = (295533.961, 299133.032, 301085.664), stdev = 2143.792
[info]   CI (99.9%): [290878.051, 307388.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   764.811 ±(99.9%) 20.910 MB/sec [Average]
[info]   (min, avg, max) = (755.682, 764.811, 769.615), stdev = 5.430
[info]   CI (99.9%): [743.901, 785.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4024.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4024.001, 4024.001, 4024.001), stdev = 0.001
[info]   CI (99.9%): [4024.001, 4024.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.071, 0.104), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.373 ±(99.9%) 0.873 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.373, 0.547), stdev = 0.227
[info]   CI (99.9%): [≈ 0, 1.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   727.749 ±(99.9%) 567.505 MB/sec [Average]
[info]   (min, avg, max) = (660.648, 727.749, 991.382), stdev = 147.379
[info]   CI (99.9%): [160.244, 1295.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3829.128 ±(99.9%) 2986.336 B/op [Average]
[info]   (min, avg, max) = (3454.257, 3829.128, 5215.410), stdev = 775.542
[info]   CI (99.9%): [842.792, 6815.464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson
[info] # Run progress: 38.25% complete, ETA 00:28:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7161.505 ops/s
[info] # Warmup Iteration   2: 13551.878 ops/s
[info] # Warmup Iteration   3: 13598.225 ops/s
[info] Iteration   1: 13697.773 ops/s
[info]                  ·gc.alloc.rate:                   1744.158 MB/sec
[info]                  ·gc.alloc.rate.norm:              200400.034 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.567 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1661.572 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 190911.089 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 13751.645 ops/s
[info]                  ·gc.alloc.rate:                   1751.054 MB/sec
[info]                  ·gc.alloc.rate.norm:              200400.416 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.911 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1673.913 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 191571.900 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 13747.568 ops/s
[info]                  ·gc.alloc.rate:                   1750.991 MB/sec
[info]                  ·gc.alloc.rate.norm:              200400.487 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.149 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2020.947 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 231296.801 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 13663.573 ops/s
[info]                  ·gc.alloc.rate:                   1739.705 MB/sec
[info]                  ·gc.alloc.rate.norm:              200400.030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1690.426 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 194723.486 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 13647.272 ops/s
[info]                  ·gc.alloc.rate:                   1737.784 MB/sec
[info]                  ·gc.alloc.rate.norm:              200400.040 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.801 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1694.535 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 195412.596 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson":
[info]   13701.566 ±(99.9%) 182.954 ops/s [Average]
[info]   (min, avg, max) = (13647.272, 13701.566, 13751.645), stdev = 47.513
[info]   CI (99.9%): [13518.612, 13884.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1744.739 ±(99.9%) 23.817 MB/sec [Average]
[info]   (min, avg, max) = (1737.784, 1744.739, 1751.054), stdev = 6.185
[info]   CI (99.9%): [1720.922, 1768.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   200400.201 ±(99.9%) 0.884 B/op [Average]
[info]   (min, avg, max) = (200400.030, 200400.201, 200400.487), stdev = 0.230
[info]   CI (99.9%): [200399.317, 200401.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.104), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   6.686 ±(99.9%) 17.654 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.686, 11.911), stdev = 4.585
[info]   CI (99.9%): [≈ 0, 24.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1748.279 ±(99.9%) 589.135 MB/sec [Average]
[info]   (min, avg, max) = (1661.572, 1748.279, 2020.947), stdev = 152.996
[info]   CI (99.9%): [1159.144, 2337.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   200783.174 ±(99.9%) 66107.548 B/op [Average]
[info]   (min, avg, max) = (190911.089, 200783.174, 231296.801), stdev = 17167.920
[info]   CI (99.9%): [134675.626, 266890.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 0.707
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala
[info] # Run progress: 38.71% complete, ETA 00:28:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1316917.577 ops/s
[info] # Warmup Iteration   2: 1412856.174 ops/s
[info] # Warmup Iteration   3: 1466239.179 ops/s
[info] Iteration   1: 1443117.024 ops/s
[info]                  ·gc.alloc.rate:                   1195.424 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.068 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      980.353 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1069.395 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1450146.404 ops/s
[info]                  ·gc.alloc.rate:                   1201.493 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.136 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1312.303 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1424.263 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1465933.868 ops/s
[info]                  ·gc.alloc.rate:                   1214.548 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.089 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1320.632 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1417.897 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1467314.655 ops/s
[info]                  ·gc.alloc.rate:                   1215.693 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.089 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      995.551 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1067.868 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1459941.674 ops/s
[info]                  ·gc.alloc.rate:                   1209.802 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.067 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1335.136 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1439.093 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala":
[info]   1457290.725 ±(99.9%) 40116.326 ops/s [Average]
[info]   (min, avg, max) = (1443117.024, 1457290.725, 1467314.655), stdev = 10418.082
[info]   CI (99.9%): [1417174.399, 1497407.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1207.392 ±(99.9%) 33.566 MB/sec [Average]
[info]   (min, avg, max) = (1195.424, 1207.392, 1215.693), stdev = 8.717
[info]   CI (99.9%): [1173.826, 1240.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1304.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1304.000, 1304.000, 1304.000), stdev = 0.001
[info]   CI (99.9%): [1304.000, 1304.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.083, 0.125), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.090 ±(99.9%) 0.107 B/op [Average]
[info]   (min, avg, max) = (0.067, 0.090, 0.136), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1188.795 ±(99.9%) 706.995 MB/sec [Average]
[info]   (min, avg, max) = (980.353, 1188.795, 1335.136), stdev = 183.604
[info]   CI (99.9%): [481.800, 1895.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1283.703 ±(99.9%) 756.591 B/op [Average]
[info]   (min, avg, max) = (1067.868, 1283.703, 1439.093), stdev = 196.484
[info]   CI (99.9%): [527.113, 2040.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 39.17% complete, ETA 00:28:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1359989.841 ops/s
[info] # Warmup Iteration   2: 1495415.377 ops/s
[info] # Warmup Iteration   3: 1495920.385 ops/s
[info] Iteration   1: 1504991.545 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1500489.566 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1489125.996 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1478157.030 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1505819.767 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   1495716.781 ±(99.9%) 45669.284 ops/s [Average]
[info]   (min, avg, max) = (1478157.030, 1495716.781, 1505819.767), stdev = 11860.168
[info]   CI (99.9%): [1450047.497, 1541386.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce
[info] # Run progress: 39.63% complete, ETA 00:27:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12626.094 ops/s
[info] # Warmup Iteration   2: 15951.666 ops/s
[info] # Warmup Iteration   3: 16215.793 ops/s
[info] Iteration   1: 16129.571 ops/s
[info]                  ·gc.alloc.rate:                   2168.937 MB/sec
[info]                  ·gc.alloc.rate.norm:              211672.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.187 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2317.316 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 226152.618 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 16231.993 ops/s
[info]                  ·gc.alloc.rate:                   2183.918 MB/sec
[info]                  ·gc.alloc.rate.norm:              211687.527 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16.139 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2340.993 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 226912.802 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 16042.638 ops/s
[info]                  ·gc.alloc.rate:                   2157.750 MB/sec
[info]                  ·gc.alloc.rate.norm:              211688.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.084 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2020.274 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 198200.861 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 16098.310 ops/s
[info]                  ·gc.alloc.rate:                   2165.485 MB/sec
[info]                  ·gc.alloc.rate.norm:              211688.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14.246 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.584 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 198403.005 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 16100.874 ops/s
[info]                  ·gc.alloc.rate:                   2165.500 MB/sec
[info]                  ·gc.alloc.rate.norm:              211687.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.139 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2372.931 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 231964.232 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce":
[info]   16120.677 ±(99.9%) 268.532 ops/s [Average]
[info]   (min, avg, max) = (16042.638, 16120.677, 16231.993), stdev = 69.737
[info]   CI (99.9%): [15852.145, 16389.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate":
[info]   2168.318 ±(99.9%) 37.104 MB/sec [Average]
[info]   (min, avg, max) = (2157.750, 2168.318, 2183.918), stdev = 9.636
[info]   CI (99.9%): [2131.214, 2205.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   211684.528 ±(99.9%) 26.957 B/op [Average]
[info]   (min, avg, max) = (211672.027, 211684.528, 211688.032), stdev = 7.001
[info]   CI (99.9%): [211657.572, 211711.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.112 ±(99.9%) 0.193 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.112, 0.167), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   10.959 ±(99.9%) 18.702 B/op [Average]
[info]   (min, avg, max) = (4.084, 10.959, 16.139), stdev = 4.857
[info]   CI (99.9%): [≈ 0, 29.661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2216.219 ±(99.9%) 676.811 MB/sec [Average]
[info]   (min, avg, max) = (2020.274, 2216.219, 2372.931), stdev = 175.766
[info]   CI (99.9%): [1539.408, 2893.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   216326.704 ±(99.9%) 63941.318 B/op [Average]
[info]   (min, avg, max) = (198200.861, 216326.704, 231964.232), stdev = 16605.357
[info]   CI (99.9%): [152385.386, 280268.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.count":
[info]   33.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala
[info] # Run progress: 40.09% complete, ETA 00:27:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20381.943 ops/s
[info] # Warmup Iteration   2: 31213.486 ops/s
[info] # Warmup Iteration   3: 30783.399 ops/s
[info] Iteration   1: 30959.935 ops/s
[info]                  ·gc.alloc.rate:                   423.326 MB/sec
[info]                  ·gc.alloc.rate.norm:              21524.979 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.736 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13003.494 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 30891.135 ops/s
[info]                  ·gc.alloc.rate:                   422.007 MB/sec
[info]                  ·gc.alloc.rate.norm:              21496.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.303 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      647.607 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 32987.535 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 30953.467 ops/s
[info]                  ·gc.alloc.rate:                   422.730 MB/sec
[info]                  ·gc.alloc.rate.norm:              21496.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      325.697 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16561.811 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 30876.635 ops/s
[info]                  ·gc.alloc.rate:                   421.737 MB/sec
[info]                  ·gc.alloc.rate.norm:              21496.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.122 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      325.752 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16603.642 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 30881.730 ops/s
[info]                  ·gc.alloc.rate:                   421.807 MB/sec
[info]                  ·gc.alloc.rate.norm:              21496.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.859 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33372.732 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala":
[info]   30912.581 ±(99.9%) 156.626 ops/s [Average]
[info]   (min, avg, max) = (30876.635, 30912.581, 30959.935), stdev = 40.675
[info]   CI (99.9%): [30755.955, 31069.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   422.322 ±(99.9%) 2.641 MB/sec [Average]
[info]   (min, avg, max) = (421.737, 422.322, 423.326), stdev = 0.686
[info]   CI (99.9%): [419.681, 424.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   21501.807 ±(99.9%) 49.880 B/op [Average]
[info]   (min, avg, max) = (21496.013, 21501.807, 21524.979), stdev = 12.954
[info]   CI (99.9%): [21451.926, 21551.687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.176 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.104), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.485 ±(99.9%) 8.947 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.485, 5.303), stdev = 2.324
[info]   CI (99.9%): [≈ 0, 10.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   441.930 ±(99.9%) 743.976 MB/sec [Average]
[info]   (min, avg, max) = (255.736, 441.930, 654.859), stdev = 193.208
[info]   CI (99.9%): [≈ 0, 1185.906] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   22505.843 ±(99.9%) 37944.833 B/op [Average]
[info]   (min, avg, max) = (13003.494, 22505.843, 33372.732), stdev = 9854.153
[info]   CI (99.9%): [≈ 0, 60450.675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala
[info] # Run progress: 40.55% complete, ETA 00:27:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 52544.651 ops/s
[info] # Warmup Iteration   2: 58615.761 ops/s
[info] # Warmup Iteration   3: 58422.807 ops/s
[info] Iteration   1: 58630.662 ops/s
[info]                  ·gc.alloc.rate:                   609.636 MB/sec
[info]                  ·gc.alloc.rate.norm:              16368.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.285 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     88.190 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      659.994 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17720.044 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 58921.791 ops/s
[info]                  ·gc.alloc.rate:                   612.670 MB/sec
[info]                  ·gc.alloc.rate.norm:              16368.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.556 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.684 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17543.880 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 58889.616 ops/s
[info]                  ·gc.alloc.rate:                   612.398 MB/sec
[info]                  ·gc.alloc.rate.norm:              16368.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.782 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.428 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17518.104 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 58795.489 ops/s
[info]                  ·gc.alloc.rate:                   611.411 MB/sec
[info]                  ·gc.alloc.rate.norm:              16368.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.557 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.084 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17563.938 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 58894.622 ops/s
[info]                  ·gc.alloc.rate:                   612.413 MB/sec
[info]                  ·gc.alloc.rate.norm:              16368.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.669 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.387 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17570.021 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala":
[info]   58826.436 ±(99.9%) 459.741 ops/s [Average]
[info]   (min, avg, max) = (58630.662, 58826.436, 58921.791), stdev = 119.393
[info]   CI (99.9%): [58366.695, 59286.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   611.706 ±(99.9%) 4.824 MB/sec [Average]
[info]   (min, avg, max) = (609.636, 611.706, 612.670), stdev = 1.253
[info]   CI (99.9%): [606.882, 616.530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   16368.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16368.007, 16368.007, 16368.008), stdev = 0.001
[info]   CI (99.9%): [16368.006, 16368.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.699 ±(99.9%) 5.568 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.699, 3.285), stdev = 1.446
[info]   CI (99.9%): [≈ 0, 6.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   18.751 ±(99.9%) 149.515 B/op [Average]
[info]   (min, avg, max) = (0.556, 18.751, 88.190), stdev = 38.829
[info]   CI (99.9%): [≈ 0, 168.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   657.115 ±(99.9%) 6.795 MB/sec [Average]
[info]   (min, avg, max) = (655.428, 657.115, 659.994), stdev = 1.765
[info]   CI (99.9%): [650.320, 663.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   17583.197 ±(99.9%) 304.752 B/op [Average]
[info]   (min, avg, max) = (17518.104, 17583.197, 17720.044), stdev = 79.143
[info]   CI (99.9%): [17278.445, 17887.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 4.000), stdev = 1.095
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson
[info] # Run progress: 41.01% complete, ETA 00:27:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4416.855 ops/s
[info] # Warmup Iteration   2: 7940.792 ops/s
[info] # Warmup Iteration   3: 8237.288 ops/s
[info] Iteration   1: 8233.582 ops/s
[info]                  ·gc.alloc.rate:                   2987.173 MB/sec
[info]                  ·gc.alloc.rate.norm:              571088.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15.916 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3022.110 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 577767.286 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 8203.773 ops/s
[info]                  ·gc.alloc.rate:                   2977.137 MB/sec
[info]                  ·gc.alloc.rate.norm:              571088.050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.986 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2705.852 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 519048.953 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 8184.119 ops/s
[info]                  ·gc.alloc.rate:                   2969.124 MB/sec
[info]                  ·gc.alloc.rate.norm:              571088.050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3053.463 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 587310.159 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 8153.809 ops/s
[info]                  ·gc.alloc.rate:                   2958.346 MB/sec
[info]                  ·gc.alloc.rate.norm:              571088.050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16.071 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3057.566 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 590241.836 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 8143.815 ops/s
[info]                  ·gc.alloc.rate:                   2954.734 MB/sec
[info]                  ·gc.alloc.rate.norm:              571088.376 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16.090 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2722.585 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 526218.842 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson":
[info]   8183.820 ±(99.9%) 141.160 ops/s [Average]
[info]   (min, avg, max) = (8143.815, 8183.820, 8233.582), stdev = 36.659
[info]   CI (99.9%): [8042.660, 8324.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2969.303 ±(99.9%) 51.412 MB/sec [Average]
[info]   (min, avg, max) = (2954.734, 2969.303, 2987.173), stdev = 13.351
[info]   CI (99.9%): [2917.891, 3020.714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   571088.116 ±(99.9%) 0.560 B/op [Average]
[info]   (min, avg, max) = (571088.050, 571088.116, 571088.376), stdev = 0.146
[info]   CI (99.9%): [571087.555, 571088.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.083), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   12.814 ±(99.9%) 16.937 B/op [Average]
[info]   (min, avg, max) = (7.986, 12.814, 16.090), stdev = 4.399
[info]   CI (99.9%): [≈ 0, 29.751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   2912.315 ±(99.9%) 698.709 MB/sec [Average]
[info]   (min, avg, max) = (2705.852, 2912.315, 3057.566), stdev = 181.453
[info]   CI (99.9%): [2213.606, 3611.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   560117.415 ±(99.9%) 133309.268 B/op [Average]
[info]   (min, avg, max) = (519048.953, 560117.415, 590241.836), stdev = 34619.993
[info]   CI (99.9%): [426808.148, 693426.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.count":
[info]   43.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.600, 9.000), stdev = 0.548
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 9.000, 10.000), stdev = 0.707
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce
[info] # Run progress: 41.47% complete, ETA 00:27:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16890.658 ops/s
[info] # Warmup Iteration   2: 20114.238 ops/s
[info] # Warmup Iteration   3: 20361.589 ops/s
[info] Iteration   1: 23268.516 ops/s
[info]                  ·gc.alloc.rate:                   1616.391 MB/sec
[info]                  ·gc.alloc.rate.norm:              109324.845 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.856 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1635.147 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 110593.408 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 23943.629 ops/s
[info]                  ·gc.alloc.rate:                   1663.219 MB/sec
[info]                  ·gc.alloc.rate.norm:              109336.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.947 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1648.913 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 108395.619 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 21889.741 ops/s
[info]                  ·gc.alloc.rate:                   1520.231 MB/sec
[info]                  ·gc.alloc.rate.norm:              109315.602 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.484 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1662.186 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 119523.200 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 21116.828 ops/s
[info]                  ·gc.alloc.rate:                   1467.232 MB/sec
[info]                  ·gc.alloc.rate.norm:              109312.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.103 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.740 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 99739.084 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 21136.143 ops/s
[info]                  ·gc.alloc.rate:                   1467.995 MB/sec
[info]                  ·gc.alloc.rate.norm:              109312.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.750 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1681.283 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 125194.221 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce":
[info]   22270.971 ±(99.9%) 4930.515 ops/s [Average]
[info]   (min, avg, max) = (21116.828, 22270.971, 23943.629), stdev = 1280.439
[info]   CI (99.9%): [17340.456, 27201.486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1547.014 ±(99.9%) 342.487 MB/sec [Average]
[info]   (min, avg, max) = (1467.232, 1547.014, 1663.219), stdev = 88.943
[info]   CI (99.9%): [1204.526, 1889.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   109320.101 ±(99.9%) 39.777 B/op [Average]
[info]   (min, avg, max) = (109312.019, 109320.101, 109336.021), stdev = 10.330
[info]   CI (99.9%): [109280.324, 109359.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.112 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.112, 0.167), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   7.828 ±(99.9%) 11.599 B/op [Average]
[info]   (min, avg, max) = (3.103, 7.828, 10.947), stdev = 3.012
[info]   CI (99.9%): [≈ 0, 19.427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1593.254 ±(99.9%) 551.770 MB/sec [Average]
[info]   (min, avg, max) = (1338.740, 1593.254, 1681.283), stdev = 143.293
[info]   CI (99.9%): [1041.484, 2145.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   112689.106 ±(99.9%) 38197.718 B/op [Average]
[info]   (min, avg, max) = (99739.084, 112689.106, 125194.221), stdev = 9919.826
[info]   CI (99.9%): [74491.389, 150886.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 0.837
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala
[info] # Run progress: 41.94% complete, ETA 00:26:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37744.314 ops/s
[info] # Warmup Iteration   2: 57305.485 ops/s
[info] # Warmup Iteration   3: 57293.484 ops/s
[info] Iteration   1: 57048.945 ops/s
[info]                  ·gc.alloc.rate:                   710.975 MB/sec
[info]                  ·gc.alloc.rate.norm:              19616.270 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.871 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      645.424 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17807.672 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 57457.286 ops/s
[info]                  ·gc.alloc.rate:                   716.193 MB/sec
[info]                  ·gc.alloc.rate.norm:              19616.284 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.281 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      649.553 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17791.031 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 57386.941 ops/s
[info]                  ·gc.alloc.rate:                   715.119 MB/sec
[info]                  ·gc.alloc.rate.norm:              19616.223 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.284 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.035 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17885.807 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 57440.216 ops/s
[info]                  ·gc.alloc.rate:                   715.850 MB/sec
[info]                  ·gc.alloc.rate.norm:              19616.259 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.741 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17941.692 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 57430.832 ops/s
[info]                  ·gc.alloc.rate:                   715.838 MB/sec
[info]                  ·gc.alloc.rate.norm:              19616.246 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.711 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      989.593 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27118.030 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala":
[info]   57352.844 ±(99.9%) 661.766 ops/s [Average]
[info]   (min, avg, max) = (57048.945, 57352.844, 57457.286), stdev = 171.859
[info]   CI (99.9%): [56691.077, 58014.610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   714.795 ±(99.9%) 8.359 MB/sec [Average]
[info]   (min, avg, max) = (710.975, 714.795, 716.193), stdev = 2.171
[info]   CI (99.9%): [706.436, 723.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   19616.256 ±(99.9%) 0.090 B/op [Average]
[info]   (min, avg, max) = (19616.223, 19616.256, 19616.284), stdev = 0.023
[info]   CI (99.9%): [19616.166, 19616.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.067, 0.104), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.829 ±(99.9%) 4.243 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.829, 2.871), stdev = 1.102
[info]   CI (99.9%): [≈ 0, 6.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   718.269 ±(99.9%) 584.194 MB/sec [Average]
[info]   (min, avg, max) = (645.424, 718.269, 989.593), stdev = 151.713
[info]   CI (99.9%): [134.075, 1302.464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   19708.846 ±(99.9%) 15950.545 B/op [Average]
[info]   (min, avg, max) = (17791.031, 19708.846, 27118.030), stdev = 4142.306
[info]   CI (99.9%): [3758.302, 35659.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 4.000), stdev = 0.894
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala
[info] # Run progress: 42.40% complete, ETA 00:26:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 61769.324 ops/s
[info] # Warmup Iteration   2: 70372.403 ops/s
[info] # Warmup Iteration   3: 62714.797 ops/s
[info] Iteration   1: 63527.473 ops/s
[info]                  ·gc.alloc.rate:                   423.804 MB/sec
[info]                  ·gc.alloc.rate.norm:              10496.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.882 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6337.203 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 61181.422 ops/s
[info]                  ·gc.alloc.rate:                   408.136 MB/sec
[info]                  ·gc.alloc.rate.norm:              10496.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.728 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95.877 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.310 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16878.280 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 63592.784 ops/s
[info]                  ·gc.alloc.rate:                   423.997 MB/sec
[info]                  ·gc.alloc.rate.norm:              10496.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.515 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      326.340 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8078.525 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 63465.585 ops/s
[info]                  ·gc.alloc.rate:                   423.315 MB/sec
[info]                  ·gc.alloc.rate.norm:              10496.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.516 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      326.457 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8094.433 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 63625.814 ops/s
[info]                  ·gc.alloc.rate:                   424.217 MB/sec
[info]                  ·gc.alloc.rate.norm:              10496.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      326.340 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8074.335 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala":
[info]   63078.615 ±(99.9%) 4090.735 ops/s [Average]
[info]   (min, avg, max) = (61181.422, 63078.615, 63625.814), stdev = 1062.351
[info]   CI (99.9%): [58987.881, 67169.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   420.694 ±(99.9%) 27.062 MB/sec [Average]
[info]   (min, avg, max) = (408.136, 420.694, 424.217), stdev = 7.028
[info]   CI (99.9%): [393.632, 447.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   10496.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10496.006, 10496.007, 10496.007), stdev = 0.001
[info]   CI (99.9%): [10496.006, 10496.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.762 ±(99.9%) 6.385 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.762, 3.728), stdev = 1.658
[info]   CI (99.9%): [≈ 0, 7.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   19.588 ±(99.9%) 164.224 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 19.588, 95.877), stdev = 42.649
[info]   CI (99.9%): [≈ 0, 183.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   378.266 ±(99.9%) 609.945 MB/sec [Average]
[info]   (min, avg, max) = (255.882, 378.266, 656.310), stdev = 158.401
[info]   CI (99.9%): [≈ 0, 988.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   9492.555 ±(99.9%) 16162.474 B/op [Average]
[info]   (min, avg, max) = (6337.203, 9492.555, 16878.280), stdev = 4197.343
[info]   CI (99.9%): [≈ 0, 25655.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 42.86% complete, ETA 00:26:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 73544.338 ops/s
[info] # Warmup Iteration   2: 78202.758 ops/s
[info] # Warmup Iteration   3: 75284.138 ops/s
[info] Iteration   1: 77122.904 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 77104.126 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 77061.821 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 77077.613 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 77215.167 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc":
[info]   77116.326 ±(99.9%) 231.289 ops/s [Average]
[info]   (min, avg, max) = (77061.821, 77116.326, 77215.167), stdev = 60.065
[info]   CI (99.9%): [76885.037, 77347.615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.005, 0.005, 0.005), stdev = 0.001
[info]   CI (99.9%): [0.005, 0.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson
[info] # Run progress: 43.32% complete, ETA 00:26:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2485.484 ops/s
[info] # Warmup Iteration   2: 3492.833 ops/s
[info] # Warmup Iteration   3: 3610.712 ops/s
[info] Iteration   1: 3642.216 ops/s
[info]                  ·gc.alloc.rate:                   1575.410 MB/sec
[info]                  ·gc.alloc.rate.norm:              680769.194 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17.985 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1625.818 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 702551.675 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 3650.633 ops/s
[info]                  ·gc.alloc.rate:                   1579.148 MB/sec
[info]                  ·gc.alloc.rate.norm:              680767.805 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17.945 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1312.077 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 565633.823 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 3576.479 ops/s
[info]                  ·gc.alloc.rate:                   1547.143 MB/sec
[info]                  ·gc.alloc.rate.norm:              680767.504 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.158 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1654.742 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 728112.653 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 3647.761 ops/s
[info]                  ·gc.alloc.rate:                   1577.802 MB/sec
[info]                  ·gc.alloc.rate.norm:              680769.660 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35.920 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1668.679 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 719980.041 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 3661.645 ops/s
[info]                  ·gc.alloc.rate:                   1583.661 MB/sec
[info]                  ·gc.alloc.rate.norm:              680768.764 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1678.465 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 721522.197 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson":
[info]   3635.747 ±(99.9%) 130.456 ops/s [Average]
[info]   (min, avg, max) = (3576.479, 3635.747, 3661.645), stdev = 33.879
[info]   CI (99.9%): [3505.291, 3766.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1572.633 ±(99.9%) 56.074 MB/sec [Average]
[info]   (min, avg, max) = (1547.143, 1572.633, 1583.661), stdev = 14.562
[info]   CI (99.9%): [1516.558, 1628.707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   680768.585 ±(99.9%) 3.517 B/op [Average]
[info]   (min, avg, max) = (680767.504, 680768.585, 680769.660), stdev = 0.913
[info]   CI (99.9%): [680765.069, 680772.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.083), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   16.202 ±(99.9%) 51.198 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16.202, 35.920), stdev = 13.296
[info]   CI (99.9%): [≈ 0, 67.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1587.956 ±(99.9%) 598.745 MB/sec [Average]
[info]   (min, avg, max) = (1312.077, 1587.956, 1678.465), stdev = 155.492
[info]   CI (99.9%): [989.211, 2186.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   687560.078 ±(99.9%) 264966.210 B/op [Average]
[info]   (min, avg, max) = (565633.823, 687560.078, 728112.653), stdev = 68810.883
[info]   CI (99.9%): [422593.868, 952526.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce
[info] # Run progress: 43.78% complete, ETA 00:26:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14997.924 ops/s
[info] # Warmup Iteration   2: 18121.311 ops/s
[info] # Warmup Iteration   3: 18052.345 ops/s
[info] Iteration   1: 17993.370 ops/s
[info]                  ·gc.alloc.rate:                   2337.947 MB/sec
[info]                  ·gc.alloc.rate.norm:              204526.939 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14.566 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2325.058 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 203399.390 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 18184.300 ops/s
[info]                  ·gc.alloc.rate:                   2363.779 MB/sec
[info]                  ·gc.alloc.rate.norm:              204536.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.612 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2347.408 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 203119.440 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 18044.263 ops/s
[info]                  ·gc.alloc.rate:                   2344.651 MB/sec
[info]                  ·gc.alloc.rate.norm:              204536.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14.525 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2361.663 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 206020.085 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 18023.679 ops/s
[info]                  ·gc.alloc.rate:                   2341.920 MB/sec
[info]                  ·gc.alloc.rate.norm:              204535.135 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.089 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2370.995 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 207074.419 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 18230.203 ops/s
[info]                  ·gc.alloc.rate:                   2368.710 MB/sec
[info]                  ·gc.alloc.rate.norm:              204536.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.985 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2376.210 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 205183.677 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce":
[info]   18095.163 ±(99.9%) 404.976 ops/s [Average]
[info]   (min, avg, max) = (17993.370, 18095.163, 18230.203), stdev = 105.171
[info]   CI (99.9%): [17690.187, 18500.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate":
[info]   2351.401 ±(99.9%) 53.400 MB/sec [Average]
[info]   (min, avg, max) = (2337.947, 2351.401, 2368.710), stdev = 13.868
[info]   CI (99.9%): [2298.001, 2404.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   204534.030 ±(99.9%) 15.336 B/op [Average]
[info]   (min, avg, max) = (204526.939, 204534.030, 204536.028), stdev = 3.983
[info]   CI (99.9%): [204518.694, 204549.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.137 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.104, 0.137, 0.167), stdev = 0.032
[info]   CI (99.9%): [0.016, 0.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   11.955 ±(99.9%) 10.700 B/op [Average]
[info]   (min, avg, max) = (8.985, 11.955, 14.566), stdev = 2.779
[info]   CI (99.9%): [1.255, 22.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2356.267 ±(99.9%) 79.295 MB/sec [Average]
[info]   (min, avg, max) = (2325.058, 2356.267, 2376.210), stdev = 20.593
[info]   CI (99.9%): [2276.972, 2435.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   204959.402 ±(99.9%) 6519.922 B/op [Average]
[info]   (min, avg, max) = (203119.440, 204959.402, 207074.419), stdev = 1693.203
[info]   CI (99.9%): [198439.480, 211479.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.count":
[info]   35.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.000, 7.000), stdev = 0.001
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.000, 8.000), stdev = 0.707
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala
[info] # Run progress: 44.24% complete, ETA 00:25:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27526.618 ops/s
[info] # Warmup Iteration   2: 44886.031 ops/s
[info] # Warmup Iteration   3: 44963.970 ops/s
[info] Iteration   1: 43076.784 ops/s
[info]                  ·gc.alloc.rate:                   169.883 MB/sec
[info]                  ·gc.alloc.rate.norm:              6208.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.761 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.754 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9345.988 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 44078.480 ops/s
[info]                  ·gc.alloc.rate:                   173.840 MB/sec
[info]                  ·gc.alloc.rate.norm:              6208.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.763 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9133.564 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 44937.934 ops/s
[info]                  ·gc.alloc.rate:      177.246 MB/sec
[info]                  ·gc.alloc.rate.norm: 6208.010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 44623.947 ops/s
[info]                  ·gc.alloc.rate:                   176.007 MB/sec
[info]                  ·gc.alloc.rate.norm:              6208.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.783 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9021.828 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 45206.976 ops/s
[info]                  ·gc.alloc.rate:                   178.278 MB/sec
[info]                  ·gc.alloc.rate.norm:              6208.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.725 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.744 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8905.498 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala":
[info]   44384.824 ±(99.9%) 3246.814 ops/s [Average]
[info]   (min, avg, max) = (43076.784, 44384.824, 45206.976), stdev = 843.187
[info]   CI (99.9%): [41138.010, 47631.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   175.051 ±(99.9%) 12.818 MB/sec [Average]
[info]   (min, avg, max) = (169.883, 175.051, 178.278), stdev = 3.329
[info]   CI (99.9%): [162.232, 187.869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   6208.009 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6208.009, 6208.009, 6208.010), stdev = 0.001
[info]   CI (99.9%): [6208.008, 6208.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.297 ±(99.9%) 1.567 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.297, 0.761), stdev = 0.407
[info]   CI (99.9%): [≈ 0, 1.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   204.609 ±(99.9%) 440.435 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.609, 255.783), stdev = 114.380
[info]   CI (99.9%): [≈ 0, 645.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   7281.375 ±(99.9%) 15686.188 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7281.375, 9345.988), stdev = 4073.653
[info]   CI (99.9%): [≈ 0, 22967.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala
[info] # Run progress: 44.70% complete, ETA 00:25:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 92935.856 ops/s
[info] # Warmup Iteration   2: 96126.654 ops/s
[info] # Warmup Iteration   3: 100113.504 ops/s
[info] Iteration   1: 100601.637 ops/s
[info]                  ·gc.alloc.rate:                   266.879 MB/sec
[info]                  ·gc.alloc.rate.norm:              4176.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.022 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.339 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.754 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4001.920 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 100623.158 ops/s
[info]                  ·gc.alloc.rate:                   266.985 MB/sec
[info]                  ·gc.alloc.rate.norm:              4176.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.799 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4001.045 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 100404.216 ops/s
[info]                  ·gc.alloc.rate:                   266.441 MB/sec
[info]                  ·gc.alloc.rate.norm:              4176.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.011 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.179 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.837 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4009.811 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 99611.980 ops/s
[info]                  ·gc.alloc.rate:                   264.321 MB/sec
[info]                  ·gc.alloc.rate.norm:              4176.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.235 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51.106 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.100 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5215.251 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 100307.353 ops/s
[info]                  ·gc.alloc.rate:      266.112 MB/sec
[info]                  ·gc.alloc.rate.norm: 4176.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala":
[info]   100309.669 ±(99.9%) 1586.768 ops/s [Average]
[info]   (min, avg, max) = (99611.980, 100309.669, 100623.158), stdev = 412.079
[info]   CI (99.9%): [98722.901, 101896.437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   266.148 ±(99.9%) 4.157 MB/sec [Average]
[info]   (min, avg, max) = (264.321, 266.148, 266.985), stdev = 1.080
[info]   CI (99.9%): [261.991, 270.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4176.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4176.004, 4176.004, 4176.004), stdev = 0.001
[info]   CI (99.9%): [4176.004, 4176.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.654 ±(99.9%) 5.556 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.654, 3.235), stdev = 1.443
[info]   CI (99.9%): [≈ 0, 6.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   10.325 ±(99.9%) 87.787 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.325, 51.106), stdev = 22.798
[info]   CI (99.9%): [≈ 0, 98.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   219.498 ±(99.9%) 488.459 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 219.498, 330.100), stdev = 126.851
[info]   CI (99.9%): [≈ 0, 707.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3445.605 ±(99.9%) 7686.875 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3445.605, 5215.251), stdev = 1996.257
[info]   CI (99.9%): [≈ 0, 11132.481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 3.000), stdev = 1.225
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson
[info] # Run progress: 45.16% complete, ETA 00:25:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5119.318 ops/s
[info] # Warmup Iteration   2: 9181.901 ops/s
[info] # Warmup Iteration   3: 9425.672 ops/s
[info] Iteration   1: 9404.479 ops/s
[info]                  ·gc.alloc.rate:                   3362.689 MB/sec
[info]                  ·gc.alloc.rate.norm:              562784.043 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13.933 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3369.445 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 563914.743 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 9381.251 ops/s
[info]                  ·gc.alloc.rate:                   3353.963 MB/sec
[info]                  ·gc.alloc.rate.norm:              562784.043 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13.969 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3388.612 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 568597.963 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 9389.461 ops/s
[info]                  ·gc.alloc.rate:                   3357.140 MB/sec
[info]                  ·gc.alloc.rate.norm:              562784.043 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24.425 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3057.232 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 512508.129 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 9411.453 ops/s
[info]                  ·gc.alloc.rate:                   3365.039 MB/sec
[info]                  ·gc.alloc.rate.norm:              562784.047 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17.404 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3401.926 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 568953.283 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 9330.015 ops/s
[info]                  ·gc.alloc.rate:                   3342.459 MB/sec
[info]                  ·gc.alloc.rate.norm:              563933.603 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3403.174 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 574177.371 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson":
[info]   9383.332 ±(99.9%) 123.620 ops/s [Average]
[info]   (min, avg, max) = (9330.015, 9383.332, 9411.453), stdev = 32.104
[info]   CI (99.9%): [9259.711, 9506.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3356.258 ±(99.9%) 34.166 MB/sec [Average]
[info]   (min, avg, max) = (3342.459, 3356.258, 3365.039), stdev = 8.873
[info]   CI (99.9%): [3322.092, 3390.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   563013.956 ±(99.9%) 1979.610 B/op [Average]
[info]   (min, avg, max) = (562784.043, 563013.956, 563933.603), stdev = 514.098
[info]   CI (99.9%): [561034.346, 564993.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.092, 0.146), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   15.351 ±(99.9%) 24.341 B/op [Average]
[info]   (min, avg, max) = (7.023, 15.351, 24.425), stdev = 6.321
[info]   CI (99.9%): [≈ 0, 39.692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   3324.078 ±(99.9%) 576.781 MB/sec [Average]
[info]   (min, avg, max) = (3057.232, 3324.078, 3403.174), stdev = 149.788
[info]   CI (99.9%): [2747.297, 3900.859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   557630.298 ±(99.9%) 98131.182 B/op [Average]
[info]   (min, avg, max) = (512508.129, 557630.298, 574177.371), stdev = 25484.356
[info]   CI (99.9%): [459499.116, 655761.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.count":
[info]   49.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.800, 10.000), stdev = 0.447
[info]   CI (99.9%): [49.000, 49.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.time":
[info]   51.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (10.000, 10.200, 11.000), stdev = 0.447
[info]   CI (99.9%): [51.000, 51.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce
[info] # Run progress: 45.62% complete, ETA 00:25:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19728.147 ops/s
[info] # Warmup Iteration   2: 23648.843 ops/s
[info] # Warmup Iteration   3: 25122.532 ops/s
[info] Iteration   1: 29301.427 ops/s
[info]                  ·gc.alloc.rate:                   1631.777 MB/sec
[info]                  ·gc.alloc.rate.norm:              87632.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.354 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1636.936 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 87909.074 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 26422.327 ops/s
[info]                  ·gc.alloc.rate:                   1470.708 MB/sec
[info]                  ·gc.alloc.rate.norm:              87617.140 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.399 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1317.394 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78483.495 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 25730.807 ops/s
[info]                  ·gc.alloc.rate:                   1432.118 MB/sec
[info]                  ·gc.alloc.rate.norm:              87608.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.640 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1326.783 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 81164.305 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 25553.494 ops/s
[info]                  ·gc.alloc.rate:                   1422.334 MB/sec
[info]                  ·gc.alloc.rate.norm:              87608.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.693 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1669.880 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 102855.467 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 25378.700 ops/s
[info]                  ·gc.alloc.rate:                   1412.597 MB/sec
[info]                  ·gc.alloc.rate.norm:              87608.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.455 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.831 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 83281.162 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce":
[info]   26477.351 ±(99.9%) 6267.301 ops/s [Average]
[info]   (min, avg, max) = (25378.700, 26477.351, 29301.427), stdev = 1627.598
[info]   CI (99.9%): [20210.050, 32744.652] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1473.907 ±(99.9%) 350.272 MB/sec [Average]
[info]   (min, avg, max) = (1412.597, 1473.907, 1631.777), stdev = 90.965
[info]   CI (99.9%): [1123.635, 1824.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   87614.641 ±(99.9%) 40.376 B/op [Average]
[info]   (min, avg, max) = (87608.016, 87614.641, 87632.015), stdev = 10.485
[info]   CI (99.9%): [87574.265, 87655.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.125 ±(99.9%) 0.204 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.125, 0.208), stdev = 0.053
[info]   CI (99.9%): [≈ 0, 0.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   7.508 ±(99.9%) 12.528 B/op [Average]
[info]   (min, avg, max) = (3.354, 7.508, 12.399), stdev = 3.253
[info]   CI (99.9%): [≈ 0, 20.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1458.765 ±(99.9%) 686.561 MB/sec [Average]
[info]   (min, avg, max) = (1317.394, 1458.765, 1669.880), stdev = 178.298
[info]   CI (99.9%): [772.204, 2145.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   86738.701 ±(99.9%) 37149.077 B/op [Average]
[info]   (min, avg, max) = (78483.495, 86738.701, 102855.467), stdev = 9647.497
[info]   CI (99.9%): [49589.624, 123887.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala
[info] # Run progress: 46.08% complete, ETA 00:25:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 75928.468 ops/s
[info] # Warmup Iteration   2: 109894.014 ops/s
[info] # Warmup Iteration   3: 109317.549 ops/s
[info] Iteration   1: 111850.808 ops/s
[info]                  ·gc.alloc.rate:                   853.436 MB/sec
[info]                  ·gc.alloc.rate.norm:              12011.368 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      647.344 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9110.798 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 111349.707 ops/s
[info]                  ·gc.alloc.rate:                   850.070 MB/sec
[info]                  ·gc.alloc.rate.norm:              12011.364 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.177 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      977.201 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13807.707 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 111156.795 ops/s
[info]                  ·gc.alloc.rate:                   848.215 MB/sec
[info]                  ·gc.alloc.rate.norm:              12011.374 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.179 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      985.419 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13954.290 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 111766.715 ops/s
[info]                  ·gc.alloc.rate:                   852.919 MB/sec
[info]                  ·gc.alloc.rate.norm:              12011.369 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.586 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.105 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9296.036 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 110402.473 ops/s
[info]                  ·gc.alloc.rate:                   842.455 MB/sec
[info]                  ·gc.alloc.rate.norm:              12011.346 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.890 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      994.792 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14183.293 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala":
[info]   111305.300 ±(99.9%) 2236.696 ops/s [Average]
[info]   (min, avg, max) = (110402.473, 111305.300, 111850.808), stdev = 580.863
[info]   CI (99.9%): [109068.604, 113541.996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   849.419 ±(99.9%) 17.086 MB/sec [Average]
[info]   (min, avg, max) = (842.455, 849.419, 853.436), stdev = 4.437
[info]   CI (99.9%): [832.333, 866.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   12011.364 ±(99.9%) 0.041 B/op [Average]
[info]   (min, avg, max) = (12011.346, 12011.364, 12011.374), stdev = 0.011
[info]   CI (99.9%): [12011.323, 12011.405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.083), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.766 ±(99.9%) 1.900 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.766, 1.179), stdev = 0.493
[info]   CI (99.9%): [≈ 0, 2.667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   852.972 ±(99.9%) 701.009 MB/sec [Average]
[info]   (min, avg, max) = (647.344, 852.972, 994.792), stdev = 182.050
[info]   CI (99.9%): [151.963, 1553.981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   12070.425 ±(99.9%) 10094.258 B/op [Average]
[info]   (min, avg, max) = (9110.798, 12070.425, 14183.293), stdev = 2621.447
[info]   CI (99.9%): [1976.167, 22164.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 4.000), stdev = 0.837
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala
[info] # Run progress: 46.54% complete, ETA 00:24:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 122078.152 ops/s
[info] # Warmup Iteration   2: 131900.542 ops/s
[info] # Warmup Iteration   3: 132526.373 ops/s
[info] Iteration   1: 134095.248 ops/s
[info]                  ·gc.alloc.rate:                   539.170 MB/sec
[info]                  ·gc.alloc.rate.norm:              6328.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.655 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42.891 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.738 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3858.249 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 130877.777 ops/s
[info]                  ·gc.alloc.rate:                   526.146 MB/sec
[info]                  ·gc.alloc.rate.norm:              6328.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.501 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.725 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7886.469 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 134123.139 ops/s
[info]                  ·gc.alloc.rate:                   539.197 MB/sec
[info]                  ·gc.alloc.rate.norm:              6328.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.466 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.380 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7668.046 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 133636.812 ops/s
[info]                  ·gc.alloc.rate:                   537.276 MB/sec
[info]                  ·gc.alloc.rate.norm:              6328.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      326.376 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3844.041 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 133788.933 ops/s
[info]                  ·gc.alloc.rate:                   537.860 MB/sec
[info]                  ·gc.alloc.rate.norm:              6328.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.980 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.740 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7679.579 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala":
[info]   133304.382 ±(99.9%) 5283.087 ops/s [Average]
[info]   (min, avg, max) = (130877.777, 133304.382, 134123.139), stdev = 1372.001
[info]   CI (99.9%): [128021.295, 138587.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   535.930 ±(99.9%) 21.304 MB/sec [Average]
[info]   (min, avg, max) = (526.146, 535.930, 539.197), stdev = 5.533
[info]   CI (99.9%): [514.625, 557.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   6328.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6328.003, 6328.003, 6328.003), stdev = 0.001
[info]   CI (99.9%): [6328.003, 6328.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.781 ±(99.9%) 6.188 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.781, 3.655), stdev = 1.607
[info]   CI (99.9%): [≈ 0, 6.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   9.167 ±(99.9%) 72.624 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.167, 42.891), stdev = 18.860
[info]   CI (99.9%): [≈ 0, 81.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   523.392 ±(99.9%) 688.408 MB/sec [Average]
[info]   (min, avg, max) = (326.376, 523.392, 655.725), stdev = 178.777
[info]   CI (99.9%): [≈ 0, 1211.799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   6187.277 ±(99.9%) 8218.672 B/op [Average]
[info]   (min, avg, max) = (3844.041, 6187.277, 7886.469), stdev = 2134.363
[info]   CI (99.9%): [≈ 0, 14405.949] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 47.00% complete, ETA 00:24:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 146418.189 ops/s
[info] # Warmup Iteration   2: 164585.264 ops/s
[info] # Warmup Iteration   3: 165173.949 ops/s
[info] Iteration   1: 165115.915 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 165206.441 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 164874.503 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 160775.927 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 165202.841 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc":
[info]   164235.125 ±(99.9%) 7464.336 ops/s [Average]
[info]   (min, avg, max) = (160775.927, 164235.125, 165206.441), stdev = 1938.464
[info]   CI (99.9%): [156770.789, 171699.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
[info]   CI (99.9%): [0.002, 0.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson
[info] # Run progress: 47.47% complete, ETA 00:24:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2684.684 ops/s
[info] # Warmup Iteration   2: 4160.132 ops/s
[info] # Warmup Iteration   3: 4246.235 ops/s
[info] Iteration   1: 4199.787 ops/s
[info]                  ·gc.alloc.rate:                   1929.959 MB/sec
[info]                  ·gc.alloc.rate.norm:              723379.498 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15.600 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1963.830 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 736074.893 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 4232.230 ops/s
[info]                  ·gc.alloc.rate:                   1944.781 MB/sec
[info]                  ·gc.alloc.rate.norm:              723379.729 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15.482 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1654.608 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 615446.981 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 4177.529 ops/s
[info]                  ·gc.alloc.rate:                   1919.989 MB/sec
[info]                  ·gc.alloc.rate.norm:              723379.189 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.841 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2003.264 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 754753.914 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   4: 4270.584 ops/s
[info]                  ·gc.alloc.rate:                   1963.078 MB/sec
[info]                  ·gc.alloc.rate.norm:              723379.536 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2018.285 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 743723.146 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 4249.714 ops/s
[info]                  ·gc.alloc.rate:                   1953.047 MB/sec
[info]                  ·gc.alloc.rate.norm:              723379.446 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.708 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2026.550 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 750603.803 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson":
[info]   4225.969 ±(99.9%) 144.405 ops/s [Average]
[info]   (min, avg, max) = (4177.529, 4225.969, 4270.584), stdev = 37.502
[info]   CI (99.9%): [4081.563, 4370.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1942.171 ±(99.9%) 66.788 MB/sec [Average]
[info]   (min, avg, max) = (1919.989, 1942.171, 1963.078), stdev = 17.345
[info]   CI (99.9%): [1875.383, 2008.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   723379.480 ±(99.9%) 0.748 B/op [Average]
[info]   (min, avg, max) = (723379.189, 723379.480, 723379.729), stdev = 0.194
[info]   CI (99.9%): [723378.731, 723380.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   9.326 ±(99.9%) 25.034 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.326, 15.600), stdev = 6.501
[info]   CI (99.9%): [≈ 0, 34.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1933.308 ±(99.9%) 607.055 MB/sec [Average]
[info]   (min, avg, max) = (1654.608, 1933.308, 2026.550), stdev = 157.650
[info]   CI (99.9%): [1326.253, 2540.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   720120.548 ±(99.9%) 226966.621 B/op [Average]
[info]   (min, avg, max) = (615446.981, 720120.548, 754753.914), stdev = 58942.511
[info]   CI (99.9%): [493153.927, 947087.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.600, 14.000), stdev = 3.782
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce
[info] # Run progress: 47.93% complete, ETA 00:24:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 32354.925 ops/s
[info] # Warmup Iteration   2: 40179.686 ops/s
[info] # Warmup Iteration   3: 40547.965 ops/s
[info] Iteration   1: 41546.558 ops/s
[info]                  ·gc.alloc.rate:                   829.775 MB/sec
[info]                  ·gc.alloc.rate.norm:              31424.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.789 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.331 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24779.844 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 41346.090 ops/s
[info]                  ·gc.alloc.rate:                   825.482 MB/sec
[info]                  ·gc.alloc.rate.norm:              31424.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.170 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      979.499 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37287.041 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 40632.529 ops/s
[info]                  ·gc.alloc.rate:                   811.172 MB/sec
[info]                  ·gc.alloc.rate.norm:              31424.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.225 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.047 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25337.146 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 40773.143 ops/s
[info]                  ·gc.alloc.rate:                   814.123 MB/sec
[info]                  ·gc.alloc.rate.norm:              31424.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.625 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      984.281 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37991.884 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 41425.100 ops/s
[info]                  ·gc.alloc.rate:                   827.287 MB/sec
[info]                  ·gc.alloc.rate.norm:              31424.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.791 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658.954 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25029.969 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce":
[info]   41144.684 ±(99.9%) 1588.882 ops/s [Average]
[info]   (min, avg, max) = (40632.529, 41144.684, 41546.558), stdev = 412.628
[info]   CI (99.9%): [39555.802, 42733.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate":
[info]   821.568 ±(99.9%) 32.154 MB/sec [Average]
[info]   (min, avg, max) = (811.172, 821.568, 829.775), stdev = 8.350
[info]   CI (99.9%): [789.414, 853.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   31424.010 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (31424.010, 31424.010, 31424.011), stdev = 0.001
[info]   CI (99.9%): [31424.008, 31424.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.201 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.071, 0.146), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2.720 ±(99.9%) 7.784 B/op [Average]
[info]   (min, avg, max) = (0.789, 2.720, 5.625), stdev = 2.022
[info]   CI (99.9%): [≈ 0, 10.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   786.222 ±(99.9%) 687.871 MB/sec [Average]
[info]   (min, avg, max) = (654.047, 786.222, 984.281), stdev = 178.638
[info]   CI (99.9%): [98.351, 1474.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   30085.177 ±(99.9%) 26582.579 B/op [Average]
[info]   (min, avg, max) = (24779.844, 30085.177, 37991.884), stdev = 6903.411
[info]   CI (99.9%): [3502.598, 56667.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala
[info] # Run progress: 48.39% complete, ETA 00:23:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 49810.620 ops/s
[info] # Warmup Iteration   2: 82751.911 ops/s
[info] # Warmup Iteration   3: 82297.538 ops/s
[info] Iteration   1: 82627.742 ops/s
[info]                  ·gc.alloc.rate:                   869.268 MB/sec
[info]                  ·gc.alloc.rate.norm:              16560.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.190 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.064 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12441.205 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 82373.825 ops/s
[info]                  ·gc.alloc.rate:                   866.921 MB/sec
[info]                  ·gc.alloc.rate.norm:              16560.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.193 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      985.103 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18817.527 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 83501.715 ops/s
[info]                  ·gc.alloc.rate:                   878.474 MB/sec
[info]                  ·gc.alloc.rate.norm:              16560.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.785 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      991.445 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18689.594 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 83609.812 ops/s
[info]                  ·gc.alloc.rate:                   879.671 MB/sec
[info]                  ·gc.alloc.rate.norm:              16560.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      664.078 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12501.408 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 82073.688 ops/s
[info]                  ·gc.alloc.rate:                   863.454 MB/sec
[info]                  ·gc.alloc.rate.norm:              16560.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.798 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1000.093 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19180.567 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala":
[info]   82837.357 ±(99.9%) 2639.903 ops/s [Average]
[info]   (min, avg, max) = (82073.688, 82837.357, 83609.812), stdev = 685.574
[info]   CI (99.9%): [80197.453, 85477.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   871.558 ±(99.9%) 27.639 MB/sec [Average]
[info]   (min, avg, max) = (863.454, 871.558, 879.671), stdev = 7.178
[info]   CI (99.9%): [843.919, 899.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   16560.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16560.005, 16560.005, 16560.005), stdev = 0.001
[info]   CI (99.9%): [16560.004, 16560.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.062), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.793 ±(99.9%) 1.873 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.793, 1.193), stdev = 0.486
[info]   CI (99.9%): [≈ 0, 2.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   858.756 ±(99.9%) 704.138 MB/sec [Average]
[info]   (min, avg, max) = (653.064, 858.756, 1000.093), stdev = 182.863
[info]   CI (99.9%): [154.618, 1562.895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   16326.060 ±(99.9%) 13567.984 B/op [Average]
[info]   (min, avg, max) = (12441.205, 16326.060, 19180.567), stdev = 3523.562
[info]   CI (99.9%): [2758.076, 29894.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 1.000
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala
[info] # Run progress: 48.85% complete, ETA 00:23:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 222099.211 ops/s
[info] # Warmup Iteration   2: 234256.543 ops/s
[info] # Warmup Iteration   3: 239456.015 ops/s
[info] Iteration   1: 240241.237 ops/s
[info]                  ·gc.alloc.rate:                   781.343 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.273 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.643 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4302.862 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 241982.380 ops/s
[info]                  ·gc.alloc.rate:                   787.312 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.677 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      985.357 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6407.916 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 238126.977 ops/s
[info]                  ·gc.alloc.rate:                   774.515 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.138 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.045 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4343.456 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 242326.622 ops/s
[info]                  ·gc.alloc.rate:                   788.397 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4274.534 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 240890.831 ops/s
[info]                  ·gc.alloc.rate:                   783.594 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.680 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      990.149 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6469.629 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala":
[info]   240713.609 ±(99.9%) 6430.922 ops/s [Average]
[info]   (min, avg, max) = (238126.977, 240713.609, 242326.622), stdev = 1670.090
[info]   CI (99.9%): [234282.688, 247144.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   783.032 ±(99.9%) 21.336 MB/sec [Average]
[info]   (min, avg, max) = (774.515, 783.032, 788.397), stdev = 5.541
[info]   CI (99.9%): [761.696, 804.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   5120.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5120.002, 5120.002, 5120.002), stdev = 0.001
[info]   CI (99.9%): [5120.001, 5120.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.104), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.353 ±(99.9%) 1.201 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.353, 0.680), stdev = 0.312
[info]   CI (99.9%): [≈ 0, 1.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   789.480 ±(99.9%) 696.990 MB/sec [Average]
[info]   (min, avg, max) = (656.643, 789.480, 990.149), stdev = 181.006
[info]   CI (99.9%): [92.491, 1486.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5159.679 ±(99.9%) 4497.966 B/op [Average]
[info]   (min, avg, max) = (4274.534, 5159.679, 6469.629), stdev = 1168.108
[info]   CI (99.9%): [661.713, 9657.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 4.000), stdev = 1.140
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson
[info] # Run progress: 49.31% complete, ETA 00:23:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14377.738 ops/s
[info] # Warmup Iteration   2: 24525.303 ops/s
[info] # Warmup Iteration   3: 24845.397 ops/s
[info] Iteration   1: 24419.227 ops/s
[info]                  ·gc.alloc.rate:                   1147.518 MB/sec
[info]                  ·gc.alloc.rate.norm:              73960.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.342 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1306.906 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 84232.972 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 24280.681 ops/s
[info]                  ·gc.alloc.rate:                   1141.209 MB/sec
[info]                  ·gc.alloc.rate.norm:              73960.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.747 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      987.032 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63968.101 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 24535.483 ops/s
[info]                  ·gc.alloc.rate:                   1152.855 MB/sec
[info]                  ·gc.alloc.rate.norm:              73960.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.671 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1325.482 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 85034.689 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 25015.551 ops/s
[info]                  ·gc.alloc.rate:                   1175.464 MB/sec
[info]                  ·gc.alloc.rate.norm:              73960.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.310 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1000.782 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62969.042 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 24849.533 ops/s
[info]                  ·gc.alloc.rate:                   1167.816 MB/sec
[info]                  ·gc.alloc.rate.norm:              73960.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.637 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1340.321 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 84885.126 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson":
[info]   24620.095 ±(99.9%) 1173.871 ops/s [Average]
[info]   (min, avg, max) = (24280.681, 24620.095, 25015.551), stdev = 304.851
[info]   CI (99.9%): [23446.223, 25793.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1156.972 ±(99.9%) 54.943 MB/sec [Average]
[info]   (min, avg, max) = (1141.209, 1156.972, 1175.464), stdev = 14.269
[info]   CI (99.9%): [1102.029, 1211.915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   73960.018 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (73960.016, 73960.018, 73960.022), stdev = 0.002
[info]   CI (99.9%): [73960.009, 73960.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.046, 0.104), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2.941 ±(99.9%) 8.582 B/op [Average]
[info]   (min, avg, max) = (1.310, 2.941, 6.747), stdev = 2.229
[info]   CI (99.9%): [≈ 0, 11.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1192.105 ±(99.9%) 698.433 MB/sec [Average]
[info]   (min, avg, max) = (987.032, 1192.105, 1340.321), stdev = 181.381
[info]   CI (99.9%): [493.672, 1890.538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   76217.986 ±(99.9%) 44851.645 B/op [Average]
[info]   (min, avg, max) = (62969.042, 76217.986, 85034.689), stdev = 11647.830
[info]   CI (99.9%): [31366.341, 121069.631] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 5.000), stdev = 0.837
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce
[info] # Run progress: 49.77% complete, ETA 00:23:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 42105.814 ops/s
[info] # Warmup Iteration   2: 51802.098 ops/s
[info] # Warmup Iteration   3: 52505.140 ops/s
[info] Iteration   1: 51862.951 ops/s
[info]                  ·gc.alloc.rate:                   1099.190 MB/sec
[info]                  ·gc.alloc.rate.norm:              33360.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.895 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1304.222 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39582.637 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 52667.017 ops/s
[info]                  ·gc.alloc.rate:                   1116.610 MB/sec
[info]                  ·gc.alloc.rate.norm:              33360.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.488 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      982.480 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29352.723 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 52529.383 ops/s
[info]                  ·gc.alloc.rate:                   1113.824 MB/sec
[info]                  ·gc.alloc.rate.norm:              33360.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.495 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1316.751 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39437.858 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 52672.482 ops/s
[info]                  ·gc.alloc.rate:                   1116.361 MB/sec
[info]                  ·gc.alloc.rate.norm:              33360.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.244 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      992.787 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29667.290 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 52789.010 ops/s
[info]                  ·gc.alloc.rate:                   1118.898 MB/sec
[info]                  ·gc.alloc.rate.norm:              33360.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.241 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      997.521 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29741.132 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce":
[info]   52504.168 ±(99.9%) 1424.971 ops/s [Average]
[info]   (min, avg, max) = (51862.951, 52504.168, 52789.010), stdev = 370.061
[info]   CI (99.9%): [51079.197, 53929.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1112.977 ±(99.9%) 30.472 MB/sec [Average]
[info]   (min, avg, max) = (1099.190, 1112.977, 1118.898), stdev = 7.914
[info]   CI (99.9%): [1082.504, 1143.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   33360.008 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (33360.008, 33360.008, 33360.008), stdev = 0.001
[info]   CI (99.9%): [33360.007, 33360.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.062, 0.083), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1.873 ±(99.9%) 2.405 B/op [Average]
[info]   (min, avg, max) = (1.241, 1.873, 2.495), stdev = 0.625
[info]   CI (99.9%): [≈ 0, 4.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1118.752 ±(99.9%) 674.514 MB/sec [Average]
[info]   (min, avg, max) = (982.480, 1118.752, 1316.751), stdev = 175.169
[info]   CI (99.9%): [444.238, 1793.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   33556.328 ±(99.9%) 20937.328 B/op [Average]
[info]   (min, avg, max) = (29352.723, 33556.328, 39582.637), stdev = 5437.357
[info]   CI (99.9%): [12619.001, 54493.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala
[info] # Run progress: 50.23% complete, ETA 00:23:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 54078.778 ops/s
[info] # Warmup Iteration   2: 86802.017 ops/s
[info] # Warmup Iteration   3: 86167.391 ops/s
[info] Iteration   1: 88978.798 ops/s
[info]                  ·gc.alloc.rate:                   1218.592 MB/sec
[info]                  ·gc.alloc.rate.norm:              21559.982 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.841 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1314.623 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23259.009 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 88871.463 ops/s
[info]                  ·gc.alloc.rate:                   1217.748 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.212 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1325.953 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23475.758 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 89433.383 ops/s
[info]                  ·gc.alloc.rate:                   1224.949 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.099 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      999.344 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17589.191 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 89427.777 ops/s
[info]                  ·gc.alloc.rate:                   1225.150 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.832 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.664 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23575.229 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 89282.393 ops/s
[info]                  ·gc.alloc.rate:                   1223.409 MB/sec
[info]                  ·gc.alloc.rate.norm:              21559.982 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.835 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.978 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23719.985 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala":
[info]   89198.763 ±(99.9%) 1000.423 ops/s [Average]
[info]   (min, avg, max) = (88871.463, 89198.763, 89433.383), stdev = 259.807
[info]   CI (99.9%): [88198.340, 90199.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1221.970 ±(99.9%) 13.655 MB/sec [Average]
[info]   (min, avg, max) = (1217.748, 1221.970, 1225.150), stdev = 3.546
[info]   CI (99.9%): [1208.315, 1235.624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   21560.000 ±(99.9%) 0.072 B/op [Average]
[info]   (min, avg, max) = (21559.982, 21560.000, 21560.027), stdev = 0.019
[info]   CI (99.9%): [21559.928, 21560.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.100 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.100, 0.125), stdev = 0.023
[info]   CI (99.9%): [0.012, 0.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.764 ±(99.9%) 1.562 B/op [Average]
[info]   (min, avg, max) = (1.099, 1.764, 2.212), stdev = 0.406
[info]   CI (99.9%): [0.201, 3.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1265.112 ±(99.9%) 574.000 MB/sec [Average]
[info]   (min, avg, max) = (999.344, 1265.112, 1345.978), stdev = 149.066
[info]   CI (99.9%): [691.112, 1839.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   22323.834 ±(99.9%) 10212.115 B/op [Average]
[info]   (min, avg, max) = (17589.191, 22323.834, 23719.985), stdev = 2652.054
[info]   CI (99.9%): [12111.720, 32535.949] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala
[info] # Run progress: 50.69% complete, ETA 00:22:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 227670.205 ops/s
[info] # Warmup Iteration   2: 245168.238 ops/s
[info] # Warmup Iteration   3: 239296.781 ops/s
[info] Iteration   1: 246457.752 ops/s
[info]                  ·gc.alloc.rate:                   785.397 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.399 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.068 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4177.255 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 239923.680 ops/s
[info]                  ·gc.alloc.rate:                   764.651 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.683 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      979.249 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6423.732 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 247222.301 ops/s
[info]                  ·gc.alloc.rate:                   787.758 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.530 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.373 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4160.309 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 246936.014 ops/s
[info]                  ·gc.alloc.rate:                   786.924 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4175.623 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 246944.738 ops/s
[info]                  ·gc.alloc.rate:                   787.157 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.398 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      985.719 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6281.301 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala":
[info]   245496.897 ±(99.9%) 12043.394 ops/s [Average]
[info]   (min, avg, max) = (239923.680, 245496.897, 247222.301), stdev = 3127.631
[info]   CI (99.9%): [233453.503, 257540.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   782.378 ±(99.9%) 38.304 MB/sec [Average]
[info]   (min, avg, max) = (764.651, 782.378, 787.758), stdev = 9.948
[info]   CI (99.9%): [744.073, 820.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5016.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5016.002, 5016.002, 5016.002), stdev = 0.001
[info]   CI (99.9%): [5016.001, 5016.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.104), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.402 ±(99.9%) 0.976 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.402, 0.683), stdev = 0.253
[info]   CI (99.9%): [≈ 0, 1.378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   785.498 ±(99.9%) 692.492 MB/sec [Average]
[info]   (min, avg, max) = (653.373, 785.498, 985.719), stdev = 179.838
[info]   CI (99.9%): [93.006, 1477.991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5043.644 ±(99.9%) 4605.026 B/op [Average]
[info]   (min, avg, max) = (4160.309, 5043.644, 6423.732), stdev = 1195.911
[info]   CI (99.9%): [438.618, 9648.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 51.15% complete, ETA 00:22:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 251436.424 ops/s
[info] # Warmup Iteration   2: 263473.621 ops/s
[info] # Warmup Iteration   3: 274587.981 ops/s
[info] Iteration   1: 274800.272 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 274651.917 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 274748.568 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 274701.874 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 274769.627 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc":
[info]   274734.451 ±(99.9%) 224.877 ops/s [Average]
[info]   (min, avg, max) = (274651.917, 274734.451, 274800.272), stdev = 58.400
[info]   CI (99.9%): [274509.575, 274959.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson
[info] # Run progress: 51.61% complete, ETA 00:22:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 52598.066 ops/s
[info] # Warmup Iteration   2: 69712.690 ops/s
[info] # Warmup Iteration   3: 71587.137 ops/s
[info] Iteration   1: 71793.301 ops/s
[info]                  ·gc.alloc.rate:                   1064.674 MB/sec
[info]                  ·gc.alloc.rate.norm:              23344.034 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      971.055 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21291.328 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 72224.898 ops/s
[info]                  ·gc.alloc.rate:                   1071.103 MB/sec
[info]                  ·gc.alloc.rate.norm:              23343.978 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.175 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      973.076 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21207.546 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 71824.705 ops/s
[info]                  ·gc.alloc.rate:                   1065.331 MB/sec
[info]                  ·gc.alloc.rate.norm:              23344.034 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.281 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1304.287 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28580.144 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 71970.032 ops/s
[info]                  ·gc.alloc.rate:                   1067.615 MB/sec
[info]                  ·gc.alloc.rate.norm:              23343.978 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.276 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      985.682 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21552.468 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 71393.328 ops/s
[info]                  ·gc.alloc.rate:                   1058.854 MB/sec
[info]                  ·gc.alloc.rate.norm:              23344.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.836 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      990.848 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21844.721 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson":
[info]   71841.253 ±(99.9%) 1166.334 ops/s [Average]
[info]   (min, avg, max) = (71393.328, 71841.253, 72224.898), stdev = 302.893
[info]   CI (99.9%): [70674.919, 73007.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1065.516 ±(99.9%) 17.302 MB/sec [Average]
[info]   (min, avg, max) = (1058.854, 1065.516, 1071.103), stdev = 4.493
[info]   CI (99.9%): [1048.214, 1082.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   23344.006 ±(99.9%) 0.108 B/op [Average]
[info]   (min, avg, max) = (23343.978, 23344.006, 23344.034), stdev = 0.028
[info]   CI (99.9%): [23343.898, 23344.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.207 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.087, 0.146), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.914 ±(99.9%) 4.526 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.914, 3.175), stdev = 1.175
[info]   CI (99.9%): [≈ 0, 6.440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1044.990 ±(99.9%) 559.079 MB/sec [Average]
[info]   (min, avg, max) = (971.055, 1044.990, 1304.287), stdev = 145.191
[info]   CI (99.9%): [485.911, 1604.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   22895.242 ±(99.9%) 12274.679 B/op [Average]
[info]   (min, avg, max) = (21207.546, 22895.242, 28580.144), stdev = 3187.695
[info]   CI (99.9%): [10620.562, 35169.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 5.000), stdev = 0.894
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce
[info] # Run progress: 52.07% complete, ETA 00:22:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 35675.112 ops/s
[info] # Warmup Iteration   2: 66404.599 ops/s
[info] # Warmup Iteration   3: 68088.574 ops/s
[info] Iteration   1: 67391.259 ops/s
[info]                  ·gc.alloc.rate:                   1461.241 MB/sec
[info]                  ·gc.alloc.rate.norm:              34136.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.458 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1623.233 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37920.299 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 68034.257 ops/s
[info]                  ·gc.alloc.rate:                   1475.959 MB/sec
[info]                  ·gc.alloc.rate.norm:              34136.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.408 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1309.580 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30287.984 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 67226.517 ops/s
[info]                  ·gc.alloc.rate:                   1458.210 MB/sec
[info]                  ·gc.alloc.rate.norm:              34136.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.975 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1648.799 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38597.603 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 68624.441 ops/s
[info]                  ·gc.alloc.rate:                   1488.383 MB/sec
[info]                  ·gc.alloc.rate.norm:              34136.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.910 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1330.311 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30510.640 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 68252.953 ops/s
[info]                  ·gc.alloc.rate:                   1480.196 MB/sec
[info]                  ·gc.alloc.rate.norm:              34136.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.440 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1673.197 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38586.958 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce":
[info]   67905.885 ±(99.9%) 2261.445 ops/s [Average]
[info]   (min, avg, max) = (67226.517, 67905.885, 68624.441), stdev = 587.290
[info]   CI (99.9%): [65644.441, 70167.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate":
[info]   1472.798 ±(99.9%) 49.236 MB/sec [Average]
[info]   (min, avg, max) = (1458.210, 1472.798, 1488.383), stdev = 12.787
[info]   CI (99.9%): [1423.561, 1522.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   34136.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (34136.006, 34136.006, 34136.006), stdev = 0.001
[info]   CI (99.9%): [34136.005, 34136.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1.638 ±(99.9%) 2.089 B/op [Average]
[info]   (min, avg, max) = (0.975, 1.638, 2.408), stdev = 0.543
[info]   CI (99.9%): [≈ 0, 3.728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1517.024 ±(99.9%) 696.663 MB/sec [Average]
[info]   (min, avg, max) = (1309.580, 1517.024, 1673.197), stdev = 180.921
[info]   CI (99.9%): [820.361, 2213.686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   35180.697 ±(99.9%) 16843.140 B/op [Average]
[info]   (min, avg, max) = (30287.984, 35180.697, 38597.603), stdev = 4374.110
[info]   CI (99.9%): [18337.557, 52023.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 0.837
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala
[info] # Run progress: 52.53% complete, ETA 00:22:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 38166.728 ops/s
[info] # Warmup Iteration   2: 73278.984 ops/s
[info] # Warmup Iteration   3: 73638.258 ops/s
[info] Iteration   1: 73734.957 ops/s
[info]                  ·gc.alloc.rate:                   1050.287 MB/sec
[info]                  ·gc.alloc.rate.norm:              22424.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.333 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      981.284 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20950.761 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 73189.550 ops/s
[info]                  ·gc.alloc.rate:                   1043.161 MB/sec
[info]                  ·gc.alloc.rate.norm:              22424.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.238 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      987.240 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21221.914 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 73374.694 ops/s
[info]                  ·gc.alloc.rate:                   1045.253 MB/sec
[info]                  ·gc.alloc.rate.norm:              22424.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.447 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      993.373 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21311.010 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 73126.811 ops/s
[info]                  ·gc.alloc.rate:                   1041.751 MB/sec
[info]                  ·gc.alloc.rate.norm:              22424.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.240 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      998.730 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21497.966 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 72950.855 ops/s
[info]                  ·gc.alloc.rate:                   1039.557 MB/sec
[info]                  ·gc.alloc.rate.norm:              22424.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.347 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.166 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28886.787 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala":
[info]   73275.373 ±(99.9%) 1148.484 ops/s [Average]
[info]   (min, avg, max) = (72950.855, 73275.373, 73734.957), stdev = 298.258
[info]   CI (99.9%): [72126.889, 74423.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1044.002 ±(99.9%) 15.711 MB/sec [Average]
[info]   (min, avg, max) = (1039.557, 1044.002, 1050.287), stdev = 4.080
[info]   CI (99.9%): [1028.291, 1059.713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   22424.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (22424.006, 22424.006, 22424.006), stdev = 0.001
[info]   CI (99.9%): [22424.005, 22424.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.071, 0.104), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.521 ±(99.9%) 2.889 B/op [Average]
[info]   (min, avg, max) = (0.447, 1.521, 2.240), stdev = 0.750
[info]   CI (99.9%): [≈ 0, 4.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1059.959 ±(99.9%) 601.543 MB/sec [Average]
[info]   (min, avg, max) = (981.284, 1059.959, 1339.166), stdev = 156.219
[info]   CI (99.9%): [458.416, 1661.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   22773.688 ±(99.9%) 13180.785 B/op [Average]
[info]   (min, avg, max) = (20950.761, 22773.688, 28886.787), stdev = 3423.008
[info]   CI (99.9%): [9592.902, 35954.473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 5.000), stdev = 0.837
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala
[info] # Run progress: 53.00% complete, ETA 00:21:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 68249.520 ops/s
[info] # Warmup Iteration   2: 88966.231 ops/s
[info] # Warmup Iteration   3: 90249.900 ops/s
[info] Iteration   1: 90081.134 ops/s
[info]                  ·gc.alloc.rate:                   1186.001 MB/sec
[info]                  ·gc.alloc.rate.norm:              20720.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.546 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1303.737 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22776.913 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 89526.355 ops/s
[info]                  ·gc.alloc.rate:                   1178.683 MB/sec
[info]                  ·gc.alloc.rate.norm:              20720.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.830 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      981.313 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17250.438 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 89392.144 ops/s
[info]                  ·gc.alloc.rate:                   1176.745 MB/sec
[info]                  ·gc.alloc.rate.norm:              20720.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.466 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1314.899 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23152.603 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 89919.481 ops/s
[info]                  ·gc.alloc.rate:                   1183.709 MB/sec
[info]                  ·gc.alloc.rate.norm:              20720.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.822 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      993.169 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17384.737 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 89703.116 ops/s
[info]                  ·gc.alloc.rate:                   1180.803 MB/sec
[info]                  ·gc.alloc.rate.norm:              20720.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.730 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1330.800 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23352.076 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala":
[info]   89724.446 ±(99.9%) 1081.243 ops/s [Average]
[info]   (min, avg, max) = (89392.144, 89724.446, 90081.134), stdev = 280.795
[info]   CI (99.9%): [88643.203, 90805.689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1181.188 ±(99.9%) 14.366 MB/sec [Average]
[info]   (min, avg, max) = (1176.745, 1181.188, 1186.001), stdev = 3.731
[info]   CI (99.9%): [1166.822, 1195.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   20720.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (20720.005, 20720.005, 20720.005), stdev = 0.001
[info]   CI (99.9%): [20720.004, 20720.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.096 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.096, 0.146), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.679 ±(99.9%) 2.540 B/op [Average]
[info]   (min, avg, max) = (0.730, 1.679, 2.546), stdev = 0.660
[info]   CI (99.9%): [≈ 0, 4.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1184.784 ±(99.9%) 695.565 MB/sec [Average]
[info]   (min, avg, max) = (981.313, 1184.784, 1330.800), stdev = 180.636
[info]   CI (99.9%): [489.219, 1880.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   20783.354 ±(99.9%) 12209.949 B/op [Average]
[info]   (min, avg, max) = (17250.438, 20783.354, 23352.076), stdev = 3170.885
[info]   CI (99.9%): [8573.405, 32993.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson
[info] # Run progress: 53.46% complete, ETA 00:21:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17621.182 ops/s
[info] # Warmup Iteration   2: 41639.332 ops/s
[info] # Warmup Iteration   3: 42075.168 ops/s
[info] Iteration   1: 41826.791 ops/s
[info]                  ·gc.alloc.rate:                   2053.625 MB/sec
[info]                  ·gc.alloc.rate.norm:              77287.621 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.133 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1997.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 75159.686 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 42278.269 ops/s
[info]                  ·gc.alloc.rate:                   2076.530 MB/sec
[info]                  ·gc.alloc.rate.norm:              77288.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.325 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2014.418 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 74976.222 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 41710.256 ops/s
[info]                  ·gc.alloc.rate:                   2048.092 MB/sec
[info]                  ·gc.alloc.rate.norm:              77288.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.356 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2024.159 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 76384.833 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 42370.389 ops/s
[info]                  ·gc.alloc.rate:                   2080.267 MB/sec
[info]                  ·gc.alloc.rate.norm:              77288.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.320 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2369.974 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 88051.483 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 42100.846 ops/s
[info]                  ·gc.alloc.rate:                   2067.869 MB/sec
[info]                  ·gc.alloc.rate.norm:              77288.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.335 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2037.435 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 76150.504 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson":
[info]   42057.310 ±(99.9%) 1093.071 ops/s [Average]
[info]   (min, avg, max) = (41710.256, 42057.310, 42370.389), stdev = 283.867
[info]   CI (99.9%): [40964.239, 43150.382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2065.277 ±(99.9%) 54.085 MB/sec [Average]
[info]   (min, avg, max) = (2048.092, 2065.277, 2080.267), stdev = 14.046
[info]   CI (99.9%): [2011.192, 2119.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   77287.932 ±(99.9%) 0.670 B/op [Average]
[info]   (min, avg, max) = (77287.621, 77287.932, 77288.010), stdev = 0.174
[info]   CI (99.9%): [77287.262, 77288.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.067, 0.083), stdev = 0.009
[info]   CI (99.9%): [0.031, 0.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2.494 ±(99.9%) 1.378 B/op [Average]
[info]   (min, avg, max) = (2.320, 2.494, 3.133), stdev = 0.358
[info]   CI (99.9%): [1.116, 3.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   2088.614 ±(99.9%) 608.293 MB/sec [Average]
[info]   (min, avg, max) = (1997.083, 2088.614, 2369.974), stdev = 157.972
[info]   CI (99.9%): [1480.321, 2696.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   78144.545 ±(99.9%) 21453.985 B/op [Average]
[info]   (min, avg, max) = (74976.222, 78144.545, 88051.483), stdev = 5571.532
[info]   CI (99.9%): [56690.560, 99598.530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.200, 8.000), stdev = 0.447
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce
[info] # Run progress: 53.92% complete, ETA 00:21:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 85200.209 ops/s
[info] # Warmup Iteration   2: 109946.445 ops/s
[info] # Warmup Iteration   3: 111555.959 ops/s
[info] Iteration   1: 111740.973 ops/s
[info]                  ·gc.alloc.rate:                   792.684 MB/sec
[info]                  ·gc.alloc.rate.norm:              11168.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.880 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      645.989 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9101.245 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 108705.977 ops/s
[info]                  ·gc.alloc.rate:                   771.261 MB/sec
[info]                  ·gc.alloc.rate.norm:              11168.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.507 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      969.097 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14032.708 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 111300.357 ops/s
[info]                  ·gc.alloc.rate:                   789.657 MB/sec
[info]                  ·gc.alloc.rate.norm:              11168.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.589 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      647.071 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9151.431 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 111647.249 ops/s
[info]                  ·gc.alloc.rate:                   792.173 MB/sec
[info]                  ·gc.alloc.rate.norm:              11168.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      649.429 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9155.614 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 111743.711 ops/s
[info]                  ·gc.alloc.rate:                   792.797 MB/sec
[info]                  ·gc.alloc.rate.norm:              11168.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.466 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      978.728 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13787.177 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce":
[info]   111027.653 ±(99.9%) 5046.405 ops/s [Average]
[info]   (min, avg, max) = (108705.977, 111027.653, 111743.711), stdev = 1310.535
[info]   CI (99.9%): [105981.248, 116074.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate":
[info]   787.714 ±(99.9%) 35.757 MB/sec [Average]
[info]   (min, avg, max) = (771.261, 787.714, 792.797), stdev = 9.286
[info]   CI (99.9%): [751.957, 823.471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   11168.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11168.004, 11168.004, 11168.004), stdev = 0.001
[info]   CI (99.9%): [11168.003, 11168.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.170 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.104), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.888 ±(99.9%) 2.432 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.888, 1.507), stdev = 0.632
[info]   CI (99.9%): [≈ 0, 3.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   778.063 ±(99.9%) 688.580 MB/sec [Average]
[info]   (min, avg, max) = (645.989, 778.063, 978.728), stdev = 178.822
[info]   CI (99.9%): [89.483, 1466.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   11045.635 ±(99.9%) 10074.328 B/op [Average]
[info]   (min, avg, max) = (9101.245, 11045.635, 14032.708), stdev = 2616.271
[info]   CI (99.9%): [971.307, 21119.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 4.000), stdev = 0.894
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala
[info] # Run progress: 54.38% complete, ETA 00:21:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 103401.874 ops/s
[info] # Warmup Iteration   2: 147162.231 ops/s
[info] # Warmup Iteration   3: 151849.480 ops/s
[info] Iteration   1: 147332.425 ops/s
[info]                  ·gc.alloc.rate:                   512.219 MB/sec
[info]                  ·gc.alloc.rate.norm:              5472.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.112 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      644.806 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6888.414 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 148605.671 ops/s
[info]                  ·gc.alloc.rate:                   516.630 MB/sec
[info]                  ·gc.alloc.rate.norm:              5472.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      325.056 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3442.904 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 147937.679 ops/s
[info]                  ·gc.alloc.rate:                   514.254 MB/sec
[info]                  ·gc.alloc.rate.norm:              5472.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.329 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      651.705 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6934.567 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 147906.695 ops/s
[info]                  ·gc.alloc.rate:                   514.159 MB/sec
[info]                  ·gc.alloc.rate.norm:              5472.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      326.688 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3476.824 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 147780.981 ops/s
[info]                  ·gc.alloc.rate:                   513.757 MB/sec
[info]                  ·gc.alloc.rate.norm:              5472.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.330 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6987.905 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala":
[info]   147912.690 ±(99.9%) 1759.262 ops/s [Average]
[info]   (min, avg, max) = (147332.425, 147912.690, 148605.671), stdev = 456.875
[info]   CI (99.9%): [146153.428, 149671.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   514.204 ±(99.9%) 6.097 MB/sec [Average]
[info]   (min, avg, max) = (512.219, 514.204, 516.630), stdev = 1.583
[info]   CI (99.9%): [508.107, 520.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   5472.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5472.003, 5472.003, 5472.003), stdev = 0.001
[info]   CI (99.9%): [5472.002, 5472.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.251 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.071, 0.125), stdev = 0.065
[info]   CI (99.9%): [≈ 0, 0.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.754 ±(99.9%) 2.673 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.754, 1.330), stdev = 0.694
[info]   CI (99.9%): [≈ 0, 3.427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   520.868 ±(99.9%) 685.615 MB/sec [Average]
[info]   (min, avg, max) = (325.056, 520.868, 656.083), stdev = 178.052
[info]   CI (99.9%): [≈ 0, 1206.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5546.123 ±(99.9%) 7334.892 B/op [Average]
[info]   (min, avg, max) = (3442.904, 5546.123, 6987.905), stdev = 1904.848
[info]   CI (99.9%): [≈ 0, 12881.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 1.000
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala
[info] # Run progress: 54.84% complete, ETA 00:20:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 711168.978 ops/s
[info] # Warmup Iteration   2: 757380.057 ops/s
[info] # Warmup Iteration   3: 762801.869 ops/s
[info] Iteration   1: 772440.372 ops/s
[info]                  ·gc.alloc.rate:                   997.267 MB/sec
[info]                  ·gc.alloc.rate.norm:              2032.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.170 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      977.198 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1991.109 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 776896.577 ops/s
[info]                  ·gc.alloc.rate:                   1002.860 MB/sec
[info]                  ·gc.alloc.rate.norm:              2032.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.253 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      977.742 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1981.106 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 776068.412 ops/s
[info]                  ·gc.alloc.rate:                   1001.810 MB/sec
[info]                  ·gc.alloc.rate.norm:              2032.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.211 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      982.089 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1991.998 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 760287.692 ops/s
[info]                  ·gc.alloc.rate:                   981.510 MB/sec
[info]                  ·gc.alloc.rate.norm:              2032.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.086 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      986.808 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2042.969 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 764785.834 ops/s
[info]                  ·gc.alloc.rate:                   987.283 MB/sec
[info]                  ·gc.alloc.rate.norm:              2032.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.171 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      992.809 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2043.373 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala":
[info]   770095.778 ±(99.9%) 28020.837 ops/s [Average]
[info]   (min, avg, max) = (760287.692, 770095.778, 776896.577), stdev = 7276.922
[info]   CI (99.9%): [742074.941, 798116.614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   994.146 ±(99.9%) 36.080 MB/sec [Average]
[info]   (min, avg, max) = (981.510, 994.146, 1002.860), stdev = 9.370
[info]   CI (99.9%): [958.067, 1030.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2032.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2032.001, 2032.001, 2032.001), stdev = 0.001
[info]   CI (99.9%): [2032.000, 2032.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.087, 0.125), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.178 ±(99.9%) 0.238 B/op [Average]
[info]   (min, avg, max) = (0.086, 0.178, 0.253), stdev = 0.062
[info]   CI (99.9%): [≈ 0, 0.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   983.329 ±(99.9%) 25.274 MB/sec [Average]
[info]   (min, avg, max) = (977.198, 983.329, 992.809), stdev = 6.564
[info]   CI (99.9%): [958.055, 1008.603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2010.111 ±(99.9%) 117.373 B/op [Average]
[info]   (min, avg, max) = (1981.106, 2010.111, 2043.373), stdev = 30.481
[info]   CI (99.9%): [1892.738, 2127.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 55.30% complete, ETA 00:20:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 743217.585 ops/s
[info] # Warmup Iteration   2: 778267.947 ops/s
[info] # Warmup Iteration   3: 778366.864 ops/s
[info] Iteration   1: 781928.102 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 783199.945 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 780562.910 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 781784.358 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 778551.718 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc":
[info]   781205.407 ±(99.9%) 6749.763 ops/s [Average]
[info]   (min, avg, max) = (778551.718, 781205.407, 783199.945), stdev = 1752.892
[info]   CI (99.9%): [774455.643, 787955.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson
[info] # Run progress: 55.76% complete, ETA 00:20:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 132840.355 ops/s
[info] # Warmup Iteration   2: 182797.528 ops/s
[info] # Warmup Iteration   3: 183199.155 ops/s
[info] Iteration   1: 180866.353 ops/s
[info]                  ·gc.alloc.rate:                   951.343 MB/sec
[info]                  ·gc.alloc.rate.norm:              8280.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.543 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      963.049 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8381.884 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 183219.413 ops/s
[info]                  ·gc.alloc.rate:                   963.933 MB/sec
[info]                  ·gc.alloc.rate.norm:              8280.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.715 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      964.284 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8283.020 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 184094.233 ops/s
[info]                  ·gc.alloc.rate:                   968.325 MB/sec
[info]                  ·gc.alloc.rate.norm:              8280.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.356 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      968.737 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8283.522 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 183863.331 ops/s
[info]                  ·gc.alloc.rate:                   967.182 MB/sec
[info]                  ·gc.alloc.rate.norm:              8280.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.356 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      975.453 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8350.814 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 183766.665 ops/s
[info]                  ·gc.alloc.rate:                   966.938 MB/sec
[info]                  ·gc.alloc.rate.norm:              8280.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.891 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      982.390 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8412.319 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson":
[info]   183161.999 ±(99.9%) 5093.862 ops/s [Average]
[info]   (min, avg, max) = (180866.353, 183161.999, 184094.233), stdev = 1322.860
[info]   CI (99.9%): [178068.137, 188255.862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   963.544 ±(99.9%) 26.997 MB/sec [Average]
[info]   (min, avg, max) = (951.343, 963.544, 968.325), stdev = 7.011
[info]   CI (99.9%): [936.547, 990.541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   8280.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8280.002, 8280.002, 8280.002), stdev = 0.001
[info]   CI (99.9%): [8280.002, 8280.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.104), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.572 ±(99.9%) 0.896 B/op [Average]
[info]   (min, avg, max) = (0.356, 0.572, 0.891), stdev = 0.233
[info]   CI (99.9%): [≈ 0, 1.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   970.783 ±(99.9%) 31.210 MB/sec [Average]
[info]   (min, avg, max) = (963.049, 970.783, 982.390), stdev = 8.105
[info]   CI (99.9%): [939.573, 1001.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   8342.312 ±(99.9%) 223.793 B/op [Average]
[info]   (min, avg, max) = (8283.020, 8342.312, 8412.319), stdev = 58.118
[info]   CI (99.9%): [8118.519, 8566.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce
[info] # Run progress: 56.22% complete, ETA 00:20:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 630761.604 ops/s
[info] # Warmup Iteration   2: 931860.208 ops/s
[info] # Warmup Iteration   3: 938325.490 ops/s
[info] Iteration   1: 939441.611 ops/s
[info]                  ·gc.alloc.rate:                   3042.377 MB/sec
[info]                  ·gc.alloc.rate.norm:              5096.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.244 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3014.288 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5048.952 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 939726.607 ops/s
[info]                  ·gc.alloc.rate:                   3042.358 MB/sec
[info]                  ·gc.alloc.rate.norm:              5096.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.209 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3038.631 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5089.758 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 931365.875 ops/s
[info]                  ·gc.alloc.rate:                   3015.017 MB/sec
[info]                  ·gc.alloc.rate.norm:              5096.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.246 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3052.350 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5159.100 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 932137.857 ops/s
[info]                  ·gc.alloc.rate:                   3018.831 MB/sec
[info]                  ·gc.alloc.rate.norm:              5096.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.246 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3059.673 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5164.945 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 929077.437 ops/s
[info]                  ·gc.alloc.rate:                   3008.527 MB/sec
[info]                  ·gc.alloc.rate.norm:              5096.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.247 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2723.430 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4613.088 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce":
[info]   934349.877 ±(99.9%) 18906.516 ops/s [Average]
[info]   (min, avg, max) = (929077.437, 934349.877, 939726.607), stdev = 4909.962
[info]   CI (99.9%): [915443.362, 953256.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.alloc.rate":
[info]   3025.422 ±(99.9%) 61.232 MB/sec [Average]
[info]   (min, avg, max) = (3008.527, 3025.422, 3042.377), stdev = 15.902
[info]   CI (99.9%): [2964.191, 3086.654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5096.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5096.000, 5096.000, 5096.000), stdev = 0.001
[info]   CI (99.9%): [5096.000, 5096.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.142 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (0.125, 0.142, 0.146), stdev = 0.009
[info]   CI (99.9%): [0.106, 0.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.238 ±(99.9%) 0.063 B/op [Average]
[info]   (min, avg, max) = (0.209, 0.238, 0.247), stdev = 0.016
[info]   CI (99.9%): [0.175, 0.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2977.674 ±(99.9%) 551.317 MB/sec [Average]
[info]   (min, avg, max) = (2723.430, 2977.674, 3059.673), stdev = 143.175
[info]   CI (99.9%): [2426.357, 3528.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5015.168 ±(99.9%) 885.485 B/op [Average]
[info]   (min, avg, max) = (4613.088, 5015.168, 5164.945), stdev = 229.958
[info]   CI (99.9%): [4129.683, 5900.654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.count":
[info]   44.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.800, 9.000), stdev = 0.447
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.000, 8.000), stdev = 0.001
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala
[info] # Run progress: 56.68% complete, ETA 00:20:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 766471.844 ops/s
[info] # Warmup Iteration   2: 1775897.802 ops/s
[info] # Warmup Iteration   3: 1770510.975 ops/s
[info] Iteration   1: 1750226.849 ops/s
[info]                  ·gc.alloc.rate:                   1645.497 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.056 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1652.020 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1485.867 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 1752448.916 ops/s
[info]                  ·gc.alloc.rate:                   1648.188 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.093 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1667.977 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1497.770 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 1778928.462 ops/s
[info]                  ·gc.alloc.rate:                   1672.472 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.074 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1678.348 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1485.200 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 1786003.027 ops/s
[info]                  ·gc.alloc.rate:                   1679.358 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.092 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1685.957 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1485.816 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 1781377.535 ops/s
[info]                  ·gc.alloc.rate:                   1674.990 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.129 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1691.531 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1494.616 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala":
[info]   1769796.958 ±(99.9%) 65689.169 ops/s [Average]
[info]   (min, avg, max) = (1750226.849, 1769796.958, 1786003.027), stdev = 17059.269
[info]   CI (99.9%): [1704107.789, 1835486.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1664.101 ±(99.9%) 61.513 MB/sec [Average]
[info]   (min, avg, max) = (1645.497, 1664.101, 1679.358), stdev = 15.975
[info]   CI (99.9%): [1602.588, 1725.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1480.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1480.000, 1480.000, 1480.000), stdev = 0.001
[info]   CI (99.9%): [1480.000, 1480.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.100 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.100, 0.146), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.089 ±(99.9%) 0.104 B/op [Average]
[info]   (min, avg, max) = (0.056, 0.089, 0.129), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1675.166 ±(99.9%) 60.328 MB/sec [Average]
[info]   (min, avg, max) = (1652.020, 1675.166, 1691.531), stdev = 15.667
[info]   CI (99.9%): [1614.838, 1735.495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1489.854 ±(99.9%) 22.715 B/op [Average]
[info]   (min, avg, max) = (1485.200, 1489.854, 1497.770), stdev = 5.899
[info]   CI (99.9%): [1467.139, 1512.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala
[info] # Run progress: 57.14% complete, ETA 00:19:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7950367.566 ops/s
[info] # Warmup Iteration   2: 8947691.880 ops/s
[info] # Warmup Iteration   3: 9209326.480 ops/s
[info] Iteration   1: 9111026.099 ops/s
[info]                  ·gc.alloc.rate:                   2268.827 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2332.428 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 402.989 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 9188375.971 ops/s
[info]                  ·gc.alloc.rate:                   2288.046 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2014.033 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 345.055 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 9295220.368 ops/s
[info]                  ·gc.alloc.rate:                   2314.778 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2363.821 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 400.305 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 9199812.007 ops/s
[info]                  ·gc.alloc.rate:                   2291.036 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2371.772 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 405.814 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 9203442.209 ops/s
[info]                  ·gc.alloc.rate:                   2292.075 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2377.919 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 406.682 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala":
[info]   9199575.331 ±(99.9%) 251984.666 ops/s [Average]
[info]   (min, avg, max) = (9111026.099, 9199575.331, 9295220.368), stdev = 65439.618
[info]   CI (99.9%): [8947590.665, 9451559.996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2290.952 ±(99.9%) 62.887 MB/sec [Average]
[info]   (min, avg, max) = (2268.827, 2290.952, 2314.778), stdev = 16.332
[info]   CI (99.9%): [2228.065, 2353.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   392.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (392.000, 392.000, 392.000), stdev = 0.001
[info]   CI (99.9%): [392.000, 392.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.125), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.014 ±(99.9%) 0.020 B/op [Average]
[info]   (min, avg, max) = (0.007, 0.014, 0.021), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   2291.995 ±(99.9%) 602.119 MB/sec [Average]
[info]   (min, avg, max) = (2014.033, 2291.995, 2377.919), stdev = 156.368
[info]   CI (99.9%): [1689.876, 2894.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   392.169 ±(99.9%) 101.875 B/op [Average]
[info]   (min, avg, max) = (345.055, 392.169, 406.682), stdev = 26.457
[info]   CI (99.9%): [290.293, 494.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.count":
[info]   34.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson
[info] # Run progress: 57.60% complete, ETA 00:19:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 73536.232 ops/s
[info] # Warmup Iteration   2: 324689.327 ops/s
[info] # Warmup Iteration   3: 325337.973 ops/s
[info] Iteration   1: 330166.878 ops/s
[info]                  ·gc.alloc.rate:                   1944.993 MB/sec
[info]                  ·gc.alloc.rate.norm:              9272.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.298 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1988.002 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9477.026 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 330194.854 ops/s
[info]                  ·gc.alloc.rate:                   1945.300 MB/sec
[info]                  ·gc.alloc.rate.norm:              9272.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.595 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2007.114 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9566.627 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 327840.365 ops/s
[info]                  ·gc.alloc.rate:                   1931.653 MB/sec
[info]                  ·gc.alloc.rate.norm:              9272.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.400 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1682.883 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8077.900 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 324962.963 ops/s
[info]                  ·gc.alloc.rate:                   1914.427 MB/sec
[info]                  ·gc.alloc.rate.norm:              9272.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.403 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2027.819 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9821.185 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 320935.092 ops/s
[info]                  ·gc.alloc.rate:                   1890.470 MB/sec
[info]                  ·gc.alloc.rate.norm:              9272.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.510 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1694.492 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8310.805 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson":
[info]   326820.030 ±(99.9%) 15124.884 ops/s [Average]
[info]   (min, avg, max) = (320935.092, 326820.030, 330194.854), stdev = 3927.884
[info]   CI (99.9%): [311695.146, 341944.915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1925.369 ±(99.9%) 89.471 MB/sec [Average]
[info]   (min, avg, max) = (1890.470, 1925.369, 1945.300), stdev = 23.235
[info]   CI (99.9%): [1835.898, 2014.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   9272.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (9272.001, 9272.001, 9272.001), stdev = 0.001
[info]   CI (99.9%): [9272.001, 9272.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.092, 0.125), stdev = 0.024
[info]   CI (99.9%): [≈ 10⁻⁴, 0.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.441 ±(99.9%) 0.440 B/op [Average]
[info]   (min, avg, max) = (0.298, 0.441, 0.595), stdev = 0.114
[info]   CI (99.9%): [0.001, 0.882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1880.062 ±(99.9%) 675.075 MB/sec [Average]
[info]   (min, avg, max) = (1682.883, 1880.062, 2027.819), stdev = 175.315
[info]   CI (99.9%): [1204.987, 2555.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   9050.709 ±(99.9%) 3065.658 B/op [Average]
[info]   (min, avg, max) = (8077.900, 9050.709, 9821.185), stdev = 796.142
[info]   CI (99.9%): [5985.051, 12116.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.800, 8.000), stdev = 1.304
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce
[info] # Run progress: 58.06% complete, ETA 00:19:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 591497.253 ops/s
[info] # Warmup Iteration   2: 1007779.358 ops/s
[info] # Warmup Iteration   3: 1017262.446 ops/s
[info] Iteration   1: 1019922.664 ops/s
[info]                  ·gc.alloc.rate:                   2244.322 MB/sec
[info]                  ·gc.alloc.rate.norm:              3464.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.193 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1983.710 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3061.759 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 998796.135 ops/s
[info]                  ·gc.alloc.rate:                   2197.859 MB/sec
[info]                  ·gc.alloc.rate.norm:              3464.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.164 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2336.747 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3682.899 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 1022612.377 ops/s
[info]                  ·gc.alloc.rate:                   2250.831 MB/sec
[info]                  ·gc.alloc.rate.norm:              3464.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.224 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2356.304 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3626.322 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 1021649.529 ops/s
[info]                  ·gc.alloc.rate:                   2248.407 MB/sec
[info]                  ·gc.alloc.rate.norm:              3464.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.064 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.276 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3126.397 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 1017452.248 ops/s
[info]                  ·gc.alloc.rate:                   2239.372 MB/sec
[info]                  ·gc.alloc.rate.norm:              3464.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.258 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2374.470 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3672.979 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce":
[info]   1016086.591 ±(99.9%) 37976.824 ops/s [Average]
[info]   (min, avg, max) = (998796.135, 1016086.591, 1022612.377), stdev = 9862.461
[info]   CI (99.9%): [978109.766, 1054063.415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.alloc.rate":
[info]   2236.158 ±(99.9%) 84.125 MB/sec [Average]
[info]   (min, avg, max) = (2197.859, 2236.158, 2250.831), stdev = 21.847
[info]   CI (99.9%): [2152.033, 2320.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   3464.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3464.000, 3464.000, 3464.000), stdev = 0.001
[info]   CI (99.9%): [3464.000, 3464.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.117 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.117, 0.167), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.181 ±(99.9%) 0.284 B/op [Average]
[info]   (min, avg, max) = (0.064, 0.181, 0.258), stdev = 0.074
[info]   CI (99.9%): [≈ 0, 0.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   2216.101 ±(99.9%) 741.192 MB/sec [Average]
[info]   (min, avg, max) = (1983.710, 2216.101, 2374.470), stdev = 192.485
[info]   CI (99.9%): [1474.909, 2957.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3434.071 ±(99.9%) 1201.180 B/op [Average]
[info]   (min, avg, max) = (3061.759, 3434.071, 3682.899), stdev = 311.943
[info]   CI (99.9%): [2232.891, 4635.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.count":
[info]   33.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.400, 9.000), stdev = 1.517
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala
[info] # Run progress: 58.53% complete, ETA 00:19:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_e598a460/target/5e31e36e/jackson-module-afterburner-2.9.4.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 1505404.758 ops/s
[info] # Warmup Iteration   2: 3765918.596 ops/s
[info] # Warmup Iteration   3: 3783242.845 ops/s
[info] Iteration   1: 3762792.644 ops/s
[info]                  ·gc.alloc.rate:                   2142.124 MB/sec
[info]                  ·gc.alloc.rate.norm:              896.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.044 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2327.804 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 973.666 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 3823739.518 ops/s
[info]                  ·gc.alloc.rate:                   2176.708 MB/sec
[info]                  ·gc.alloc.rate.norm:              896.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.051 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2013.667 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 828.887 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 3822300.959 ops/s
[info]                  ·gc.alloc.rate:                   2176.616 MB/sec
[info]                  ·gc.alloc.rate.norm:              896.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.043 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2363.495 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 972.928 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 3807829.269 ops/s
[info]                  ·gc.alloc.rate:                   2167.417 MB/sec
[info]                  ·gc.alloc.rate.norm:              896.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.034 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032.760 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 840.334 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 3828059.182 ops/s
[info]                  ·gc.alloc.rate:                   2179.488 MB/sec
[info]                  ·gc.alloc.rate.norm:              896.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.051 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2377.110 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 977.244 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala":
[info]   3808944.314 ±(99.9%) 103572.590 ops/s [Average]
[info]   (min, avg, max) = (3762792.644, 3808944.314, 3828059.182), stdev = 26897.473
[info]   CI (99.9%): [3705371.724, 3912516.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   2168.471 ±(99.9%) 59.369 MB/sec [Average]
[info]   (min, avg, max) = (2142.124, 2168.471, 2179.488), stdev = 15.418
[info]   CI (99.9%): [2109.102, 2227.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   896.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (896.000, 896.000, 896.000), stdev = 0.001
[info]   CI (99.9%): [896.000, 896.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.108 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.108, 0.125), stdev = 0.017
[info]   CI (99.9%): [0.041, 0.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.045 ±(99.9%) 0.027 B/op [Average]
[info]   (min, avg, max) = (0.034, 0.045, 0.051), stdev = 0.007
[info]   CI (99.9%): [0.018, 0.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   2222.967 ±(99.9%) 706.056 MB/sec [Average]
[info]   (min, avg, max) = (2013.667, 2222.967, 2377.110), stdev = 183.360
[info]   CI (99.9%): [1516.912, 2929.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   918.612 ±(99.9%) 295.754 B/op [Average]
[info]   (min, avg, max) = (828.887, 918.612, 977.244), stdev = 76.806
[info]   CI (99.9%): [622.858, 1214.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.count":
[info]   33.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.600, 8.000), stdev = 0.548
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala
[info] # Run progress: 58.99% complete, ETA 00:19:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14613819.101 ops/s
[info] # Warmup Iteration   2: 19491643.769 ops/s
[info] # Warmup Iteration   3: 19729023.725 ops/s
[info] Iteration   1: 20282621.219 ops/s
[info]                  ·gc.alloc.rate:                   927.879 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.473 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50.707 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 19885595.276 ops/s
[info]                  ·gc.alloc.rate:                   909.596 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      979.773 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 77.555 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 20281657.029 ops/s
[info]                  ·gc.alloc.rate:                   927.695 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      982.761 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 76.274 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 20276540.444 ops/s
[info]                  ·gc.alloc.rate:                   927.578 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      986.256 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 76.555 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 20281668.416 ops/s
[info]                  ·gc.alloc.rate:                   928.097 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      991.889 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 76.949 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala":
[info]   20201616.477 ±(99.9%) 680321.640 ops/s [Average]
[info]   (min, avg, max) = (19885595.276, 20201616.477, 20282621.219), stdev = 176677.369
[info]   CI (99.9%): [19521294.837, 20881938.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   924.169 ±(99.9%) 31.379 MB/sec [Average]
[info]   (min, avg, max) = (909.596, 924.169, 928.097), stdev = 8.149
[info]   CI (99.9%): [892.790, 955.548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   72.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (72.000, 72.000, 72.000), stdev = 0.001
[info]   CI (99.9%): [72.000, 72.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.125), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.007 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (0.005, 0.007, 0.010), stdev = 0.002
[info]   CI (99.9%): [≈ 10⁻⁵, 0.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   918.830 ±(99.9%) 571.466 MB/sec [Average]
[info]   (min, avg, max) = (653.473, 918.830, 991.889), stdev = 148.408
[info]   CI (99.9%): [347.364, 1490.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   71.608 ±(99.9%) 45.029 B/op [Average]
[info]   (min, avg, max) = (50.707, 71.608, 77.555), stdev = 11.694
[info]   CI (99.9%): [26.579, 116.636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson
[info] # Run progress: 59.45% complete, ETA 00:18:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 100935.845 ops/s
[info] # Warmup Iteration   2: 457227.159 ops/s
[info] # Warmup Iteration   3: 461295.407 ops/s
[info] Iteration   1: 463237.030 ops/s
[info]                  ·gc.alloc.rate:                   1620.189 MB/sec
[info]                  ·gc.alloc.rate.norm:              5504.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.141 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1648.897 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5601.525 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 464877.426 ops/s
[info]                  ·gc.alloc.rate:                   1625.719 MB/sec
[info]                  ·gc.alloc.rate.norm:              5504.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.423 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1330.272 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4503.743 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 462662.986 ops/s
[info]                  ·gc.alloc.rate:                   1618.056 MB/sec
[info]                  ·gc.alloc.rate.norm:              5504.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.283 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1673.385 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5692.206 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 458233.095 ops/s
[info]                  ·gc.alloc.rate:                   1602.546 MB/sec
[info]                  ·gc.alloc.rate.norm:              5504.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.214 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1682.727 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5779.383 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 464640.732 ops/s
[info]                  ·gc.alloc.rate:                   1624.943 MB/sec
[info]                  ·gc.alloc.rate.norm:              5504.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.423 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1688.748 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5720.121 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson":
[info]   462730.254 ±(99.9%) 10322.681 ops/s [Average]
[info]   (min, avg, max) = (458233.095, 462730.254, 464877.426), stdev = 2680.767
[info]   CI (99.9%): [452407.573, 473052.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1618.291 ±(99.9%) 36.070 MB/sec [Average]
[info]   (min, avg, max) = (1602.546, 1618.291, 1625.719), stdev = 9.367
[info]   CI (99.9%): [1582.221, 1654.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5504.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5504.001, 5504.001, 5504.001), stdev = 0.001
[info]   CI (99.9%): [5504.001, 5504.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.087, 0.125), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.297 ±(99.9%) 0.483 B/op [Average]
[info]   (min, avg, max) = (0.141, 0.297, 0.423), stdev = 0.125
[info]   CI (99.9%): [≈ 0, 0.780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1604.806 ±(99.9%) 593.841 MB/sec [Average]
[info]   (min, avg, max) = (1330.272, 1604.806, 1688.748), stdev = 154.219
[info]   CI (99.9%): [1010.964, 2198.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   5459.396 ±(99.9%) 2071.886 B/op [Average]
[info]   (min, avg, max) = (4503.743, 5459.396, 5779.383), stdev = 538.062
[info]   CI (99.9%): [3387.510, 7531.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala
[info] # Run progress: 59.91% complete, ETA 00:18:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1218156.128 ops/s
[info] # Warmup Iteration   2: 2422328.201 ops/s
[info] # Warmup Iteration   3: 2373890.125 ops/s
[info] Iteration   1: 2431125.508 ops/s
[info]                  ·gc.alloc.rate:                   1470.257 MB/sec
[info]                  ·gc.alloc.rate.norm:              952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.081 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1317.397 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 853.022 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 2431375.510 ops/s
[info]                  ·gc.alloc.rate:                   1470.642 MB/sec
[info]                  ·gc.alloc.rate.norm:              952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.108 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1661.054 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1075.261 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 2449657.970 ops/s
[info]                  ·gc.alloc.rate:                   1481.425 MB/sec
[info]                  ·gc.alloc.rate.norm:              952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.067 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.022 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 859.846 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 2452865.409 ops/s
[info]                  ·gc.alloc.rate:                   1484.277 MB/sec
[info]                  ·gc.alloc.rate.norm:              952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.040 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1682.057 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1078.854 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 2448724.645 ops/s
[info]                  ·gc.alloc.rate:                   1481.108 MB/sec
[info]                  ·gc.alloc.rate.norm:              952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.067 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.554 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 868.085 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala":
[info]   2442749.808 ±(99.9%) 40853.398 ops/s [Average]
[info]   (min, avg, max) = (2431125.508, 2442749.808, 2452865.409), stdev = 10609.498
[info]   CI (99.9%): [2401896.410, 2483603.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1477.542 ±(99.9%) 25.384 MB/sec [Average]
[info]   (min, avg, max) = (1470.257, 1477.542, 1484.277), stdev = 6.592
[info]   CI (99.9%): [1452.158, 1502.926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   952.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (952.000, 952.000, 952.000), stdev = 0.001
[info]   CI (99.9%): [952.000, 952.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.112 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.112, 0.167), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.073 ±(99.9%) 0.095 B/op [Average]
[info]   (min, avg, max) = (0.040, 0.073, 0.108), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1469.817 ±(99.9%) 711.179 MB/sec [Average]
[info]   (min, avg, max) = (1317.397, 1469.817, 1682.057), stdev = 184.691
[info]   CI (99.9%): [758.637, 2180.996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   947.014 ±(99.9%) 457.610 B/op [Average]
[info]   (min, avg, max) = (853.022, 947.014, 1078.854), stdev = 118.840
[info]   CI (99.9%): [489.403, 1404.624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 0.837
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala
[info] # Run progress: 60.37% complete, ETA 00:18:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8700846.654 ops/s
[info] # Warmup Iteration   2: 5141779.589 ops/s
[info] # Warmup Iteration   3: 5227660.166 ops/s
[info] Iteration   1: 5224561.828 ops/s
[info]                  ·gc.alloc.rate:                   690.347 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.705 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 197.864 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 5218677.993 ops/s
[info]                  ·gc.alloc.rate:                   689.657 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.772 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 198.082 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 5231335.303 ops/s
[info]                  ·gc.alloc.rate:                   691.238 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 197.700 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 5145739.301 ops/s
[info]                  ·gc.alloc.rate:                   679.984 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658.095 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 201.304 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 5170062.126 ops/s
[info]                  ·gc.alloc.rate:                   683.216 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      659.757 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 200.858 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala":
[info]   5198075.310 ±(99.9%) 146071.294 ops/s [Average]
[info]   (min, avg, max) = (5145739.301, 5198075.310, 5231335.303), stdev = 37934.251
[info]   CI (99.9%): [5052004.016, 5344146.604] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   686.888 ±(99.9%) 19.224 MB/sec [Average]
[info]   (min, avg, max) = (679.984, 686.888, 691.238), stdev = 4.992
[info]   CI (99.9%): [667.665, 706.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   208.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (208.000, 208.000, 208.000), stdev = 0.001
[info]   CI (99.9%): [208.000, 208.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.200 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.079, 0.125), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.024 ±(99.9%) 0.060 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.024, 0.038), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   657.667 ±(99.9%) 4.988 MB/sec [Average]
[info]   (min, avg, max) = (656.705, 657.667, 659.757), stdev = 1.295
[info]   CI (99.9%): [652.680, 662.655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   199.162 ±(99.9%) 6.795 B/op [Average]
[info]   (min, avg, max) = (197.700, 199.162, 201.304), stdev = 1.765
[info]   CI (99.9%): [192.367, 205.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson
[info] # Run progress: 60.83% complete, ETA 00:18:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 129328.845 ops/s
[info] # Warmup Iteration   2: 412544.246 ops/s
[info] # Warmup Iteration   3: 413115.361 ops/s
[info] Iteration   1: 413702.725 ops/s
[info]                  ·gc.alloc.rate:                   1877.459 MB/sec
[info]                  ·gc.alloc.rate.norm:              7144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.396 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1987.686 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7563.430 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 419329.277 ops/s
[info]                  ·gc.alloc.rate:                   1903.289 MB/sec
[info]                  ·gc.alloc.rate.norm:              7144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.391 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1671.251 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6273.044 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 418148.334 ops/s
[info]                  ·gc.alloc.rate:                   1897.780 MB/sec
[info]                  ·gc.alloc.rate.norm:              7144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.235 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2018.102 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7596.942 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 418153.787 ops/s
[info]                  ·gc.alloc.rate:                   1897.683 MB/sec
[info]                  ·gc.alloc.rate.norm:              7144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.392 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028.057 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7634.806 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 413090.748 ops/s
[info]                  ·gc.alloc.rate:                   1875.050 MB/sec
[info]                  ·gc.alloc.rate.norm:              7144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.634 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1694.632 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6456.602 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson":
[info]   416484.974 ±(99.9%) 11043.939 ops/s [Average]
[info]   (min, avg, max) = (413090.748, 416484.974, 419329.277), stdev = 2868.076
[info]   CI (99.9%): [405441.035, 427528.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1890.252 ±(99.9%) 50.081 MB/sec [Average]
[info]   (min, avg, max) = (1875.050, 1890.252, 1903.289), stdev = 13.006
[info]   CI (99.9%): [1840.171, 1940.334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   7144.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7144.001, 7144.001, 7144.001), stdev = 0.001
[info]   CI (99.9%): [7144.001, 7144.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.108 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.108, 0.167), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.410 ±(99.9%) 0.551 B/op [Average]
[info]   (min, avg, max) = (0.235, 0.410, 0.634), stdev = 0.143
[info]   CI (99.9%): [≈ 0, 0.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1879.946 ±(99.9%) 695.591 MB/sec [Average]
[info]   (min, avg, max) = (1671.251, 1879.946, 2028.057), stdev = 180.643
[info]   CI (99.9%): [1184.355, 2575.536] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   7104.965 ±(99.9%) 2615.484 B/op [Average]
[info]   (min, avg, max) = (6273.044, 7104.965, 7634.806), stdev = 679.233
[info]   CI (99.9%): [4489.481, 9720.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.400, 7.000), stdev = 0.894
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala
[info] # Run progress: 61.29% complete, ETA 00:17:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_e598a460/target/5e31e36e/jackson-module-afterburner-2.9.4.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 1509102.618 ops/s
[info] # Warmup Iteration   2: 2670422.549 ops/s
[info] # Warmup Iteration   3: 2717800.419 ops/s
[info] Iteration   1: 2739686.057 ops/s
[info]                  ·gc.alloc.rate:                   1447.839 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.048 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1317.236 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 756.949 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 2676835.100 ops/s
[info]                  ·gc.alloc.rate:                   1415.006 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.098 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1658.962 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 975.442 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 2694496.259 ops/s
[info]                  ·gc.alloc.rate:                   1424.213 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.049 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1336.773 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 780.919 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 2737573.930 ops/s
[info]                  ·gc.alloc.rate:                   1447.082 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.048 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.850 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 772.071 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 2726299.135 ops/s
[info]                  ·gc.alloc.rate:                   1441.483 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.048 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.520 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 778.344 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala":
[info]   2714978.096 ±(99.9%) 107604.913 ops/s [Average]
[info]   (min, avg, max) = (2676835.100, 2714978.096, 2739686.057), stdev = 27944.654
[info]   CI (99.9%): [2607373.184, 2822583.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1435.125 ±(99.9%) 56.754 MB/sec [Average]
[info]   (min, avg, max) = (1415.006, 1435.125, 1447.839), stdev = 14.739
[info]   CI (99.9%): [1378.371, 1491.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   832.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (832.000, 832.000, 832.000), stdev = 0.001
[info]   CI (99.9%): [832.000, 832.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.100 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.100, 0.167), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.058 ±(99.9%) 0.086 B/op [Average]
[info]   (min, avg, max) = (0.048, 0.058, 0.098), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1400.868 ±(99.9%) 557.418 MB/sec [Average]
[info]   (min, avg, max) = (1317.236, 1400.868, 1658.962), stdev = 144.760
[info]   CI (99.9%): [843.450, 1958.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   812.745 ±(99.9%) 352.046 B/op [Average]
[info]   (min, avg, max) = (756.949, 812.745, 975.442), stdev = 91.425
[info]   CI (99.9%): [460.699, 1164.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala
[info] # Run progress: 61.75% complete, ETA 00:17:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5990702.078 ops/s
[info] # Warmup Iteration   2: 6918737.124 ops/s
[info] # Warmup Iteration   3: 7073754.203 ops/s
[info] Iteration   1: 7048678.313 ops/s
[info]                  ·gc.alloc.rate:                   1074.940 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1305.707 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 291.523 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 7106208.774 ops/s
[info]                  ·gc.alloc.rate:                   1083.509 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      982.117 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 217.542 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 7079617.755 ops/s
[info]                  ·gc.alloc.rate:                   1079.436 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      985.428 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 219.098 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 7015150.729 ops/s
[info]                  ·gc.alloc.rate:                   1069.561 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      991.074 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 222.388 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 7064583.820 ops/s
[info]                  ·gc.alloc.rate:                   1077.114 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1328.450 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 296.002 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala":
[info]   7062847.878 ±(99.9%) 131151.091 ops/s [Average]
[info]   (min, avg, max) = (7015150.729, 7062847.878, 7106208.774), stdev = 34059.522
[info]   CI (99.9%): [6931696.787, 7193998.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1076.912 ±(99.9%) 19.995 MB/sec [Average]
[info]   (min, avg, max) = (1069.561, 1076.912, 1083.509), stdev = 5.193
[info]   CI (99.9%): [1056.917, 1096.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   240.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (240.000, 240.000, 240.000), stdev = 0.001
[info]   CI (99.9%): [240.000, 240.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.092, 0.125), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.020 ±(99.9%) 0.027 B/op [Average]
[info]   (min, avg, max) = (0.014, 0.020, 0.028), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1118.555 ±(99.9%) 698.632 MB/sec [Average]
[info]   (min, avg, max) = (982.117, 1118.555, 1328.450), stdev = 181.433
[info]   CI (99.9%): [419.923, 1817.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   249.311 ±(99.9%) 156.519 B/op [Average]
[info]   (min, avg, max) = (217.542, 249.311, 296.002), stdev = 40.647
[info]   CI (99.9%): [92.792, 405.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson
[info] # Run progress: 62.21% complete, ETA 00:17:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 251523.219 ops/s
[info] # Warmup Iteration   2: 707571.560 ops/s
[info] # Warmup Iteration   3: 715402.531 ops/s
[info] Iteration   1: 713238.945 ops/s
[info]                  ·gc.alloc.rate:                   2066.541 MB/sec
[info]                  ·gc.alloc.rate.norm:              4560.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.276 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1995.150 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4402.471 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 714974.134 ops/s
[info]                  ·gc.alloc.rate:                   2071.678 MB/sec
[info]                  ·gc.alloc.rate.norm:              4560.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.321 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2011.615 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4427.796 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 712690.339 ops/s
[info]                  ·gc.alloc.rate:                   2064.638 MB/sec
[info]                  ·gc.alloc.rate.norm:              4560.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.276 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2023.563 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4469.281 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 716607.546 ops/s
[info]                  ·gc.alloc.rate:                   2076.726 MB/sec
[info]                  ·gc.alloc.rate.norm:              4560.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.183 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031.570 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4460.849 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 716896.585 ops/s
[info]                  ·gc.alloc.rate:                   2076.875 MB/sec
[info]                  ·gc.alloc.rate.norm:              4560.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.229 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035.602 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4469.382 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson":
[info]   714881.510 ±(99.9%) 7343.420 ops/s [Average]
[info]   (min, avg, max) = (712690.339, 714881.510, 716896.585), stdev = 1907.063
[info]   CI (99.9%): [707538.089, 722224.930] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2071.291 ±(99.9%) 21.756 MB/sec [Average]
[info]   (min, avg, max) = (2064.638, 2071.291, 2076.875), stdev = 5.650
[info]   CI (99.9%): [2049.535, 2093.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4560.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4560.001, 4560.001, 4560.001), stdev = 0.001
[info]   CI (99.9%): [4560.000, 4560.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.117 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.117, 0.146), stdev = 0.024
[info]   CI (99.9%): [0.025, 0.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.257 ±(99.9%) 0.203 B/op [Average]
[info]   (min, avg, max) = (0.183, 0.257, 0.321), stdev = 0.053
[info]   CI (99.9%): [0.054, 0.459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   2019.500 ±(99.9%) 63.171 MB/sec [Average]
[info]   (min, avg, max) = (1995.150, 2019.500, 2035.602), stdev = 16.405
[info]   CI (99.9%): [1956.329, 2082.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4445.956 ±(99.9%) 114.477 B/op [Average]
[info]   (min, avg, max) = (4402.471, 4445.956, 4469.382), stdev = 29.729
[info]   CI (99.9%): [4331.479, 4560.433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.000, 7.000), stdev = 0.001
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce
[info] # Run progress: 62.67% complete, ETA 00:17:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 450228.519 ops/s
[info] # Warmup Iteration   2: 780981.153 ops/s
[info] # Warmup Iteration   3: 797755.880 ops/s
[info] Iteration   1: 797888.756 ops/s
[info]                  ·gc.alloc.rate:                   2596.156 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.205 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2659.190 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5244.312 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 800794.846 ops/s
[info]                  ·gc.alloc.rate:                   2604.945 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.245 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2685.472 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5278.276 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 804203.610 ops/s
[info]                  ·gc.alloc.rate:                   2616.604 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.204 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2703.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5289.462 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 798295.117 ops/s
[info]                  ·gc.alloc.rate:                   2597.157 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.164 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2374.752 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4681.553 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 801197.665 ops/s
[info]                  ·gc.alloc.rate:                   2607.216 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.245 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2718.709 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5338.948 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce":
[info]   800475.999 ±(99.9%) 9811.140 ops/s [Average]
[info]   (min, avg, max) = (797888.756, 800475.999, 804203.610), stdev = 2547.922
[info]   CI (99.9%): [790664.858, 810287.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate":
[info]   2604.416 ±(99.9%) 32.077 MB/sec [Average]
[info]   (min, avg, max) = (2596.156, 2604.416, 2616.604), stdev = 8.330
[info]   CI (99.9%): [2572.339, 2636.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5120.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5120.001, 5120.001, 5120.001), stdev = 0.001
[info]   CI (99.9%): [5120.000, 5120.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.108 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.108, 0.125), stdev = 0.017
[info]   CI (99.9%): [0.041, 0.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.213 ±(99.9%) 0.131 B/op [Average]
[info]   (min, avg, max) = (0.164, 0.213, 0.245), stdev = 0.034
[info]   CI (99.9%): [0.082, 0.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2628.266 ±(99.9%) 552.318 MB/sec [Average]
[info]   (min, avg, max) = (2374.752, 2628.266, 2718.709), stdev = 143.435
[info]   CI (99.9%): [2075.948, 3180.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5166.510 ±(99.9%) 1052.043 B/op [Average]
[info]   (min, avg, max) = (4681.553, 5166.510, 5338.948), stdev = 273.212
[info]   CI (99.9%): [4114.467, 6218.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.count":
[info]   39.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.800, 8.000), stdev = 0.447
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.000, 8.000), stdev = 1.225
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala
[info] # Run progress: 63.13% complete, ETA 00:17:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 303908.273 ops/s
[info] # Warmup Iteration   2: 979172.028 ops/s
[info] # Warmup Iteration   3: 968169.215 ops/s
[info] Iteration   1: 963705.612 ops/s
[info]                  ·gc.alloc.rate:                   1195.280 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.136 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1309.713 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2138.881 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 975903.166 ops/s
[info]                  ·gc.alloc.rate:                   1210.147 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.168 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1320.056 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2129.287 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 989645.768 ops/s
[info]                  ·gc.alloc.rate:                   1227.613 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.099 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      997.725 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1586.461 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 986420.660 ops/s
[info]                  ·gc.alloc.rate:                   1223.529 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.166 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1336.771 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2132.665 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 981667.317 ops/s
[info]                  ·gc.alloc.rate:                   1217.621 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.134 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.753 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2154.206 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala":
[info]   979468.505 ±(99.9%) 39359.738 ops/s [Average]
[info]   (min, avg, max) = (963705.612, 979468.505, 989645.768), stdev = 10221.599
[info]   CI (99.9%): [940108.767, 1018828.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1214.838 ±(99.9%) 49.125 MB/sec [Average]
[info]   (min, avg, max) = (1195.280, 1214.838, 1227.613), stdev = 12.758
[info]   CI (99.9%): [1165.713, 1263.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1952.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1952.000, 1952.000, 1952.000), stdev = 0.001
[info]   CI (99.9%): [1952.000, 1952.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.104), stdev = 0.017
[info]   CI (99.9%): [0.020, 0.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.141 ±(99.9%) 0.108 B/op [Average]
[info]   (min, avg, max) = (0.099, 0.141, 0.168), stdev = 0.028
[info]   CI (99.9%): [0.032, 0.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1261.604 ±(99.9%) 570.369 MB/sec [Average]
[info]   (min, avg, max) = (997.725, 1261.604, 1343.753), stdev = 148.123
[info]   CI (99.9%): [691.235, 1831.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2028.300 ±(99.9%) 951.804 B/op [Average]
[info]   (min, avg, max) = (1586.461, 2028.300, 2154.206), stdev = 247.180
[info]   CI (99.9%): [1076.496, 2980.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala
[info] # Run progress: 63.59% complete, ETA 00:16:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7464054.711 ops/s
[info] # Warmup Iteration   2: 8377224.053 ops/s
[info] # Warmup Iteration   3: 8423581.491 ops/s
[info] Iteration   1: 8440518.472 ops/s
[info]                  ·gc.alloc.rate:                   386.042 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.045 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.468 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 95.393 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 8376924.702 ops/s
[info]                  ·gc.alloc.rate:                   383.240 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.100 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.582 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      332.421 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62.452 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 8413048.574 ops/s
[info]                  ·gc.alloc.rate:                   384.814 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      332.352 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62.184 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 8352188.491 ops/s
[info]                  ·gc.alloc.rate:                   382.117 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.427 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62.260 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 8511351.742 ops/s
[info]                  ·gc.alloc.rate:                   389.423 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.445 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61.096 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala":
[info]   8418806.396 ±(99.9%) 237847.244 ops/s [Average]
[info]   (min, avg, max) = (8352188.491, 8418806.396, 8511351.742), stdev = 61768.174
[info]   CI (99.9%): [8180959.152, 8656653.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   385.127 ±(99.9%) 10.893 MB/sec [Average]
[info]   (min, avg, max) = (382.117, 385.127, 389.423), stdev = 2.829
[info]   CI (99.9%): [374.234, 396.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   72.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (72.000, 72.000, 72.000), stdev = 0.001
[info]   CI (99.9%): [72.000, 72.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.646 ±(99.9%) 5.286 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.646, 3.100), stdev = 1.373
[info]   CI (99.9%): [≈ 0, 5.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.121 ±(99.9%) 0.993 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.121, 0.582), stdev = 0.258
[info]   CI (99.9%): [≈ 0, 1.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   367.422 ±(99.9%) 310.091 MB/sec [Average]
[info]   (min, avg, max) = (330.427, 367.422, 511.468), stdev = 80.530
[info]   CI (99.9%): [57.332, 677.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   68.677 ±(99.9%) 57.544 B/op [Average]
[info]   (min, avg, max) = (61.096, 68.677, 95.393), stdev = 14.944
[info]   CI (99.9%): [11.133, 126.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 5.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson
[info] # Run progress: 64.06% complete, ETA 00:16:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 35746.818 ops/s
[info] # Warmup Iteration   2: 330198.058 ops/s
[info] # Warmup Iteration   3: 331591.361 ops/s
[info] Iteration   1: 337933.539 ops/s
[info]                  ·gc.alloc.rate:                   1875.657 MB/sec
[info]                  ·gc.alloc.rate.norm:              8736.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.388 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1652.266 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7695.541 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 338208.383 ops/s
[info]                  ·gc.alloc.rate:                   1877.105 MB/sec
[info]                  ·gc.alloc.rate.norm:              8736.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.387 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2001.862 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9316.618 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 337799.821 ops/s
[info]                  ·gc.alloc.rate:                   1874.685 MB/sec
[info]                  ·gc.alloc.rate.norm:              8736.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.485 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2016.057 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9394.791 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 337908.365 ops/s
[info]                  ·gc.alloc.rate:                   1875.297 MB/sec
[info]                  ·gc.alloc.rate.norm:              8736.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.291 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1688.374 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7865.228 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 338472.581 ops/s
[info]                  ·gc.alloc.rate:                   1878.852 MB/sec
[info]                  ·gc.alloc.rate.norm:              8736.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.194 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032.503 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9450.426 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson":
[info]   338064.538 ±(99.9%) 1052.461 ops/s [Average]
[info]   (min, avg, max) = (337799.821, 338064.538, 338472.581), stdev = 273.321
[info]   CI (99.9%): [337012.077, 339116.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1876.319 ±(99.9%) 6.439 MB/sec [Average]
[info]   (min, avg, max) = (1874.685, 1876.319, 1878.852), stdev = 1.672
[info]   CI (99.9%): [1869.880, 1882.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   8736.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8736.001, 8736.001, 8736.001), stdev = 0.001
[info]   CI (99.9%): [8736.001, 8736.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.349 ±(99.9%) 0.426 B/op [Average]
[info]   (min, avg, max) = (0.194, 0.349, 0.485), stdev = 0.111
[info]   CI (99.9%): [≈ 0, 0.775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1878.212 ±(99.9%) 733.612 MB/sec [Average]
[info]   (min, avg, max) = (1652.266, 1878.212, 2032.503), stdev = 190.517
[info]   CI (99.9%): [1144.600, 2611.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   8744.521 ±(99.9%) 3401.867 B/op [Average]
[info]   (min, avg, max) = (7695.541, 8744.521, 9450.426), stdev = 883.454
[info]   CI (99.9%): [5342.654, 12146.388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce
[info] # Run progress: 64.52% complete, ETA 00:16:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5612.003 ops/s
[info] # Warmup Iteration   2: 7660.701 ops/s
[info] # Warmup Iteration   3: 7782.633 ops/s
[info] Iteration   1: 7793.044 ops/s
[info]                  ·gc.alloc.rate:                   1875.327 MB/sec
[info]                  ·gc.alloc.rate.norm:              378792.056 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.204 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41.184 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1642.635 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 331791.238 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 7769.944 ops/s
[info]                  ·gc.alloc.rate:                   1870.236 MB/sec
[info]                  ·gc.alloc.rate.norm:              378792.052 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29.513 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1991.079 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 403267.327 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 7755.725 ops/s
[info]                  ·gc.alloc.rate:                   1866.581 MB/sec
[info]                  ·gc.alloc.rate.norm:              378792.057 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.224 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2007.425 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 407374.074 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 7846.423 ops/s
[info]                  ·gc.alloc.rate:                   1888.236 MB/sec
[info]                  ·gc.alloc.rate.norm:              378792.052 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.526 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1682.735 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 337567.185 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 7763.051 ops/s
[info]                  ·gc.alloc.rate:                   1868.543 MB/sec
[info]                  ·gc.alloc.rate.norm:              378792.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21.100 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028.040 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 411125.516 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce":
[info]   7785.637 ±(99.9%) 141.493 ops/s [Average]
[info]   (min, avg, max) = (7755.725, 7785.637, 7846.423), stdev = 36.745
[info]   CI (99.9%): [7644.144, 7927.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   1873.785 ±(99.9%) 33.525 MB/sec [Average]
[info]   (min, avg, max) = (1866.581, 1873.785, 1888.236), stdev = 8.706
[info]   CI (99.9%): [1840.260, 1907.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   378792.054 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (378792.052, 378792.054, 378792.057), stdev = 0.002
[info]   CI (99.9%): [378792.045, 378792.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.107 ±(99.9%) 0.274 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.107, 0.204), stdev = 0.071
[info]   CI (99.9%): [≈ 0, 0.382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   21.709 ±(99.9%) 55.489 B/op [Average]
[info]   (min, avg, max) = (4.224, 21.709, 41.184), stdev = 14.410
[info]   CI (99.9%): [≈ 0, 77.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1870.383 ±(99.9%) 733.861 MB/sec [Average]
[info]   (min, avg, max) = (1642.635, 1870.383, 2028.040), stdev = 190.581
[info]   CI (99.9%): [1136.522, 2604.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   378225.068 ±(99.9%) 153644.828 B/op [Average]
[info]   (min, avg, max) = (331791.238, 378225.068, 411125.516), stdev = 39901.074
[info]   CI (99.9%): [224580.240, 531869.895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala
[info] # Run progress: 64.98% complete, ETA 00:16:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6864.017 ops/s
[info] # Warmup Iteration   2: 14444.266 ops/s
[info] # Warmup Iteration   3: 14735.234 ops/s
[info] Iteration   1: 14511.453 ops/s
[info]                  ·gc.alloc.rate:                   367.824 MB/sec
[info]                  ·gc.alloc.rate.norm:              39888.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.612 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55480.976 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 14629.574 ops/s
[info]                  ·gc.alloc.rate:                   370.733 MB/sec
[info]                  ·gc.alloc.rate.norm:              39888.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.437 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47.029 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      322.374 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34684.991 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 14669.038 ops/s
[info]                  ·gc.alloc.rate:                   371.729 MB/sec
[info]                  ·gc.alloc.rate.norm:              39888.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      322.359 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34590.430 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 14690.487 ops/s
[info]                  ·gc.alloc.rate:                   372.261 MB/sec
[info]                  ·gc.alloc.rate.norm:              39888.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      324.357 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34755.088 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 14831.278 ops/s
[info]                  ·gc.alloc.rate:                   375.918 MB/sec
[info]                  ·gc.alloc.rate.norm:              39888.035 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      324.408 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34422.414 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala":
[info]   14666.366 ±(99.9%) 443.813 ops/s [Average]
[info]   (min, avg, max) = (14511.453, 14666.366, 14831.278), stdev = 115.257
[info]   CI (99.9%): [14222.553, 15110.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   371.693 ±(99.9%) 11.238 MB/sec [Average]
[info]   (min, avg, max) = (367.824, 371.693, 375.918), stdev = 2.918
[info]   CI (99.9%): [360.455, 382.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   39888.030 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (39888.028, 39888.030, 39888.035), stdev = 0.003
[info]   CI (99.9%): [39888.019, 39888.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.753 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.087, 0.437), stdev = 0.195
[info]   CI (99.9%): [≈ 0, 0.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   9.406 ±(99.9%) 80.987 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.406, 47.029), stdev = 21.032
[info]   CI (99.9%): [≈ 0, 90.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   361.022 ±(99.9%) 324.180 MB/sec [Average]
[info]   (min, avg, max) = (322.359, 361.022, 511.612), stdev = 84.188
[info]   CI (99.9%): [36.842, 685.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   38786.780 ±(99.9%) 35938.724 B/op [Average]
[info]   (min, avg, max) = (34422.414, 38786.780, 55480.976), stdev = 9333.173
[info]   CI (99.9%): [2848.055, 74725.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala
[info] # Run progress: 65.44% complete, ETA 00:16:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19900.471 ops/s
[info] # Warmup Iteration   2: 23786.086 ops/s
[info] # Warmup Iteration   3: 24412.133 ops/s
[info] Iteration   1: 24247.861 ops/s
[info]                  ·gc.alloc.rate:                   414.278 MB/sec
[info]                  ·gc.alloc.rate.norm:              26896.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.022 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.440 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.466 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33205.771 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 24686.181 ops/s
[info]                  ·gc.alloc.rate:                   421.760 MB/sec
[info]                  ·gc.alloc.rate.norm:              26896.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.333 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     212.573 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.643 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21021.632 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 24754.799 ops/s
[info]                  ·gc.alloc.rate:                   423.127 MB/sec
[info]                  ·gc.alloc.rate.norm:              26896.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.970 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.803 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20963.897 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 24729.440 ops/s
[info]                  ·gc.alloc.rate:                   422.567 MB/sec
[info]                  ·gc.alloc.rate.norm:              26896.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.299 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.429 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 41717.494 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 24752.367 ops/s
[info]                  ·gc.alloc.rate:                   422.998 MB/sec
[info]                  ·gc.alloc.rate.norm:              26896.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.731 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20838.526 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala":
[info]   24634.130 ±(99.9%) 838.207 ops/s [Average]
[info]   (min, avg, max) = (24247.861, 24634.130, 24754.799), stdev = 217.680
[info]   CI (99.9%): [23795.923, 25472.337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   420.946 ±(99.9%) 14.500 MB/sec [Average]
[info]   (min, avg, max) = (414.278, 420.946, 423.127), stdev = 3.766
[info]   CI (99.9%): [406.445, 435.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   26896.018 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (26896.016, 26896.018, 26896.022), stdev = 0.002
[info]   CI (99.9%): [26896.010, 26896.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.700 ±(99.9%) 5.669 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.700, 3.333), stdev = 1.472
[info]   CI (99.9%): [≈ 0, 6.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   44.657 ±(99.9%) 361.541 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 44.657, 212.573), stdev = 93.891
[info]   CI (99.9%): [≈ 0, 406.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   430.814 ±(99.9%) 571.214 MB/sec [Average]
[info]   (min, avg, max) = (327.731, 430.814, 655.429), stdev = 148.342
[info]   CI (99.9%): [≈ 0, 1002.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   27549.464 ±(99.9%) 36719.977 B/op [Average]
[info]   (min, avg, max) = (20838.526, 27549.464, 41717.494), stdev = 9536.061
[info]   CI (99.9%): [≈ 0, 64269.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 5.000), stdev = 1.673
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson
[info] # Run progress: 65.90% complete, ETA 00:15:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 840.508 ops/s
[info] # Warmup Iteration   2: 2412.323 ops/s
[info] # Warmup Iteration   3: 2433.837 ops/s
[info] Iteration   1: 2443.436 ops/s
[info]                  ·gc.alloc.rate:                   1478.601 MB/sec
[info]                  ·gc.alloc.rate.norm:              952664.216 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26.815 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1645.110 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1059945.584 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 2459.233 ops/s
[info]                  ·gc.alloc.rate:                   1488.582 MB/sec
[info]                  ·gc.alloc.rate.norm:              952664.166 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26.641 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1326.078 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 848664.559 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 2459.552 ops/s
[info]                  ·gc.alloc.rate:                   1488.726 MB/sec
[info]                  ·gc.alloc.rate.norm:              952664.166 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1669.581 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1068396.644 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 2459.257 ops/s
[info]                  ·gc.alloc.rate:                   1488.948 MB/sec
[info]                  ·gc.alloc.rate.norm:              952664.179 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.059 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 859320.820 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 2444.672 ops/s
[info]                  ·gc.alloc.rate:                   1480.169 MB/sec
[info]                  ·gc.alloc.rate.norm:              952664.167 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53.586 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1685.804 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1085014.659 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson":
[info]   2453.230 ±(99.9%) 32.303 ops/s [Average]
[info]   (min, avg, max) = (2443.436, 2453.230, 2459.552), stdev = 8.389
[info]   CI (99.9%): [2420.927, 2485.533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1485.005 ±(99.9%) 19.876 MB/sec [Average]
[info]   (min, avg, max) = (1478.601, 1485.005, 1488.948), stdev = 5.162
[info]   CI (99.9%): [1465.129, 1504.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   952664.179 ±(99.9%) 0.083 B/op [Average]
[info]   (min, avg, max) = (952664.166, 952664.179, 952664.216), stdev = 0.022
[info]   CI (99.9%): [952664.096, 952664.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.083), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   21.408 ±(99.9%) 86.289 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 21.408, 53.586), stdev = 22.409
[info]   CI (99.9%): [≈ 0, 107.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1533.926 ±(99.9%) 703.368 MB/sec [Average]
[info]   (min, avg, max) = (1326.078, 1533.926, 1685.804), stdev = 182.662
[info]   CI (99.9%): [830.558, 2237.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   984268.453 ±(99.9%) 459481.650 B/op [Average]
[info]   (min, avg, max) = (848664.559, 984268.453, 1085014.659), stdev = 119325.925
[info]   CI (99.9%): [524786.803, 1443750.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce
[info] # Run progress: 66.36% complete, ETA 00:15:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5616.210 ops/s
[info] # Warmup Iteration   2: 7412.983 ops/s
[info] # Warmup Iteration   3: 7605.201 ops/s
[info] Iteration   1: 7593.934 ops/s
[info]                  ·gc.alloc.rate:                   1633.355 MB/sec
[info]                  ·gc.alloc.rate.norm:              338568.054 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25.883 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1637.268 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 339379.160 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 7586.781 ops/s
[info]                  ·gc.alloc.rate:                   1631.727 MB/sec
[info]                  ·gc.alloc.rate.norm:              338568.058 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17.271 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1651.795 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 342731.950 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 7584.300 ops/s
[info]                  ·gc.alloc.rate:                   1631.755 MB/sec
[info]                  ·gc.alloc.rate.norm:              338568.054 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21.595 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1665.581 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 345586.436 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 7646.610 ops/s
[info]                  ·gc.alloc.rate:                   1645.037 MB/sec
[info]                  ·gc.alloc.rate.norm:              338568.058 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1340.323 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 275854.460 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 7639.167 ops/s
[info]                  ·gc.alloc.rate:                   1643.155 MB/sec
[info]                  ·gc.alloc.rate.norm:              338568.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.577 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1682.680 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 346712.114 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce":
[info]   7610.158 ±(99.9%) 116.296 ops/s [Average]
[info]   (min, avg, max) = (7584.300, 7610.158, 7646.610), stdev = 30.202
[info]   CI (99.9%): [7493.862, 7726.455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate":
[info]   1637.006 ±(99.9%) 25.182 MB/sec [Average]
[info]   (min, avg, max) = (1631.727, 1637.006, 1645.037), stdev = 6.540
[info]   CI (99.9%): [1611.824, 1662.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   338568.055 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (338568.053, 338568.055, 338568.058), stdev = 0.002
[info]   CI (99.9%): [338568.047, 338568.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.193 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.071, 0.125), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   14.665 ±(99.9%) 40.054 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14.665, 25.883), stdev = 10.402
[info]   CI (99.9%): [≈ 0, 54.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1595.529 ±(99.9%) 553.142 MB/sec [Average]
[info]   (min, avg, max) = (1340.323, 1595.529, 1682.680), stdev = 143.649
[info]   CI (99.9%): [1042.387, 2148.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   330052.824 ±(99.9%) 117176.500 B/op [Average]
[info]   (min, avg, max) = (275854.460, 330052.824, 346712.114), stdev = 30430.365
[info]   CI (99.9%): [212876.324, 447229.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 0.837
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala
[info] # Run progress: 66.82% complete, ETA 00:15:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_e598a460/target/5e31e36e/jackson-module-afterburner-2.9.4.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 22616.168 ops/s
[info] # Warmup Iteration   2: 42707.409 ops/s
[info] # Warmup Iteration   3: 42249.469 ops/s
[info] Iteration   1: 42371.724 ops/s
[info]                  ·gc.alloc.rate:                   614.011 MB/sec
[info]                  ·gc.alloc.rate.norm:              22807.936 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.604 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22.448 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      644.784 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23951.050 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 42668.714 ops/s
[info]                  ·gc.alloc.rate:                   618.296 MB/sec
[info]                  ·gc.alloc.rate.norm:              22807.911 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      648.733 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23930.667 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 42901.183 ops/s
[info]                  ·gc.alloc.rate:                   621.623 MB/sec
[info]                  ·gc.alloc.rate.norm:              22807.762 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.055 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.046 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23924.023 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 42645.404 ops/s
[info]                  ·gc.alloc.rate:                   617.916 MB/sec
[info]                  ·gc.alloc.rate.norm:              22807.877 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.305 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.694 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24165.382 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 42388.513 ops/s
[info]                  ·gc.alloc.rate:                   614.453 MB/sec
[info]                  ·gc.alloc.rate.norm:              22807.747 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.656 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24411.372 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala":
[info]   42595.107 ±(99.9%) 848.478 ops/s [Average]
[info]   (min, avg, max) = (42371.724, 42595.107, 42901.183), stdev = 220.347
[info]   CI (99.9%): [41746.629, 43443.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   617.260 ±(99.9%) 12.020 MB/sec [Average]
[info]   (min, avg, max) = (614.011, 617.260, 621.623), stdev = 3.121
[info]   CI (99.9%): [605.240, 629.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   22807.847 ±(99.9%) 0.334 B/op [Average]
[info]   (min, avg, max) = (22807.747, 22807.847, 22807.936), stdev = 0.087
[info]   CI (99.9%): [22807.512, 22808.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.150 ±(99.9%) 0.988 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.150, 0.604), stdev = 0.257
[info]   CI (99.9%): [≈ 0, 1.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   5.561 ±(99.9%) 36.727 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.561, 22.448), stdev = 9.538
[info]   CI (99.9%): [≈ 0, 42.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   651.583 ±(99.9%) 19.361 MB/sec [Average]
[info]   (min, avg, max) = (644.784, 651.583, 657.656), stdev = 5.028
[info]   CI (99.9%): [632.222, 670.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   24076.499 ±(99.9%) 817.509 B/op [Average]
[info]   (min, avg, max) = (23924.023, 24076.499, 24411.372), stdev = 212.305
[info]   CI (99.9%): [23258.989, 24894.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala
[info] # Run progress: 67.28% complete, ETA 00:15:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 55056.669 ops/s
[info] # Warmup Iteration   2: 62478.918 ops/s
[info] # Warmup Iteration   3: 61757.084 ops/s
[info] Iteration   1: 61512.733 ops/s
[info]                  ·gc.alloc.rate:                   464.693 MB/sec
[info]                  ·gc.alloc.rate.norm:              11888.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.799 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     97.199 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      584.316 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14948.246 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 61956.135 ops/s
[info]                  ·gc.alloc.rate:                   467.892 MB/sec
[info]                  ·gc.alloc.rate.norm:              11888.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.586 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.350 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8342.580 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 61945.447 ops/s
[info]                  ·gc.alloc.rate:                   467.825 MB/sec
[info]                  ·gc.alloc.rate.norm:              11888.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      326.374 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8293.554 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 61650.167 ops/s
[info]                  ·gc.alloc.rate:                   465.661 MB/sec
[info]                  ·gc.alloc.rate.norm:              11888.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.657 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.139 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16648.652 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 63423.725 ops/s
[info]                  ·gc.alloc.rate:                   479.218 MB/sec
[info]                  ·gc.alloc.rate.norm:              11888.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      325.844 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8083.262 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala":
[info]   62097.641 ±(99.9%) 2947.715 ops/s [Average]
[info]   (min, avg, max) = (61512.733, 62097.641, 63423.725), stdev = 765.512
[info]   CI (99.9%): [59149.927, 65045.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   469.058 ±(99.9%) 22.509 MB/sec [Average]
[info]   (min, avg, max) = (464.693, 469.058, 479.218), stdev = 5.846
[info]   CI (99.9%): [446.549, 491.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   11888.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11888.006, 11888.007, 11888.007), stdev = 0.001
[info]   CI (99.9%): [11888.006, 11888.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.793 ±(99.9%) 6.473 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.793, 3.799), stdev = 1.681
[info]   CI (99.9%): [≈ 0, 7.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   20.289 ±(99.9%) 165.613 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 20.289, 97.199), stdev = 43.009
[info]   CI (99.9%): [≈ 0, 185.901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   443.405 ±(99.9%) 621.435 MB/sec [Average]
[info]   (min, avg, max) = (325.844, 443.405, 652.139), stdev = 161.385
[info]   CI (99.9%): [≈ 0, 1064.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   11263.259 ±(99.9%) 16113.402 B/op [Average]
[info]   (min, avg, max) = (8083.262, 11263.259, 16648.652), stdev = 4184.599
[info]   CI (99.9%): [≈ 0, 27376.661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 6.000), stdev = 2.168
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 67.74% complete, ETA 00:14:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 66500.651 ops/s
[info] # Warmup Iteration   2: 75148.717 ops/s
[info] # Warmup Iteration   3: 75935.106 ops/s
[info] Iteration   1: 75895.510 ops/s
[info]                  ·gc.alloc.rate:      1.158 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 75938.651 ops/s
[info]                  ·gc.alloc.rate:      1.158 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 74960.030 ops/s
[info]                  ·gc.alloc.rate:      1.144 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 75131.659 ops/s
[info]                  ·gc.alloc.rate:      1.146 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 75319.740 ops/s
[info]                  ·gc.alloc.rate:      1.149 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   75449.118 ±(99.9%) 1717.356 ops/s [Average]
[info]   (min, avg, max) = (74960.030, 75449.118, 75938.651), stdev = 445.992
[info]   CI (99.9%): [73731.762, 77166.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1.151 ±(99.9%) 0.026 MB/sec [Average]
[info]   (min, avg, max) = (1.144, 1.151, 1.158), stdev = 0.007
[info]   CI (99.9%): [1.125, 1.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   24.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (24.005, 24.005, 24.005), stdev = 0.001
[info]   CI (99.9%): [24.005, 24.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson
[info] # Run progress: 68.20% complete, ETA 00:14:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2358.503 ops/s
[info] # Warmup Iteration   2: 5236.560 ops/s
[info] # Warmup Iteration   3: 5337.402 ops/s
[info] Iteration   1: 5329.576 ops/s
[info]                  ·gc.alloc.rate:                   1649.577 MB/sec
[info]                  ·gc.alloc.rate.norm:              487216.834 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.147 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1649.224 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 487112.824 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 5324.090 ops/s
[info]                  ·gc.alloc.rate:                   1648.119 MB/sec
[info]                  ·gc.alloc.rate.norm:              487216.104 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30.762 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1663.302 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 491704.574 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 5355.467 ops/s
[info]                  ·gc.alloc.rate:                   1657.674 MB/sec
[info]                  ·gc.alloc.rate.norm:              487215.289 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.117 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1675.254 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 492382.477 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 5356.743 ops/s
[info]                  ·gc.alloc.rate:                   1658.073 MB/sec
[info]                  ·gc.alloc.rate.norm:              487216.965 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.116 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1683.331 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 494639.015 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 5348.627 ops/s
[info]                  ·gc.alloc.rate:                   1655.645 MB/sec
[info]                  ·gc.alloc.rate.norm:              487215.662 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.125 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1689.711 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 497240.619 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson":
[info]   5342.901 ±(99.9%) 58.198 ops/s [Average]
[info]   (min, avg, max) = (5324.090, 5342.901, 5356.743), stdev = 15.114
[info]   CI (99.9%): [5284.703, 5401.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1653.817 ±(99.9%) 17.935 MB/sec [Average]
[info]   (min, avg, max) = (1648.119, 1653.817, 1658.073), stdev = 4.658
[info]   CI (99.9%): [1635.882, 1671.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   487216.171 ±(99.9%) 2.797 B/op [Average]
[info]   (min, avg, max) = (487215.289, 487216.171, 487216.965), stdev = 0.726
[info]   CI (99.9%): [487213.373, 487218.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.037, 0.104), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   11.053 ±(99.9%) 42.425 B/op [Average]
[info]   (min, avg, max) = (6.116, 11.053, 30.762), stdev = 11.018
[info]   CI (99.9%): [≈ 0, 53.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1672.165 ±(99.9%) 62.296 MB/sec [Average]
[info]   (min, avg, max) = (1649.224, 1672.165, 1689.711), stdev = 16.178
[info]   CI (99.9%): [1609.868, 1734.461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   492615.902 ±(99.9%) 14491.149 B/op [Average]
[info]   (min, avg, max) = (487112.824, 492615.902, 497240.619), stdev = 3763.305
[info]   CI (99.9%): [478124.753, 507107.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala
[info] # Run progress: 68.66% complete, ETA 00:14:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4841631.337 ops/s
[info] # Warmup Iteration   2: 5464691.924 ops/s
[info] # Warmup Iteration   3: 5550306.778 ops/s
[info] Iteration   1: 5543802.705 ops/s
[info]                  ·gc.alloc.rate:                   1662.705 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1979.221 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 561.851 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 5513629.817 ops/s
[info]                  ·gc.alloc.rate:                   1653.525 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.042 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1328.614 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 379.254 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 5548065.176 ops/s
[info]                  ·gc.alloc.rate:                   1663.923 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1670.733 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 473.932 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 5544207.967 ops/s
[info]                  ·gc.alloc.rate:                   1662.462 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1680.771 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 477.198 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 5568567.775 ops/s
[info]                  ·gc.alloc.rate:                   1669.696 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.041 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1686.690 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 476.804 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala":
[info]   5543654.688 ±(99.9%) 75602.548 ops/s [Average]
[info]   (min, avg, max) = (5513629.817, 5543654.688, 5568567.775), stdev = 19633.742
[info]   CI (99.9%): [5468052.140, 5619257.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1662.462 ±(99.9%) 22.321 MB/sec [Average]
[info]   (min, avg, max) = (1653.525, 1662.462, 1669.696), stdev = 5.797
[info]   CI (99.9%): [1640.142, 1684.783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   472.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (472.000, 472.000, 472.000), stdev = 0.001
[info]   CI (99.9%): [472.000, 472.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.100 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.100, 0.146), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.028 ±(99.9%) 0.049 B/op [Average]
[info]   (min, avg, max) = (0.012, 0.028, 0.042), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1669.206 ±(99.9%) 887.643 MB/sec [Average]
[info]   (min, avg, max) = (1328.614, 1669.206, 1979.221), stdev = 230.518
[info]   CI (99.9%): [781.563, 2556.848] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   473.808 ±(99.9%) 248.900 B/op [Average]
[info]   (min, avg, max) = (379.254, 473.808, 561.851), stdev = 64.638
[info]   CI (99.9%): [224.908, 722.707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 0.837
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson
[info] # Run progress: 69.12% complete, ETA 00:14:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 116018.519 ops/s
[info] # Warmup Iteration   2: 370380.731 ops/s
[info] # Warmup Iteration   3: 370755.046 ops/s
[info] Iteration   1: 375199.272 ops/s
[info]                  ·gc.alloc.rate:                   2095.416 MB/sec
[info]                  ·gc.alloc.rate.norm:              8792.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.262 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2325.290 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9756.515 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 374444.900 ops/s
[info]                  ·gc.alloc.rate:                   2091.957 MB/sec
[info]                  ·gc.alloc.rate.norm:              8792.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.437 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2012.312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8457.274 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 375067.639 ops/s
[info]                  ·gc.alloc.rate:                   2095.055 MB/sec
[info]                  ·gc.alloc.rate.norm:              8792.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.524 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2024.006 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8493.838 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 375054.290 ops/s
[info]                  ·gc.alloc.rate:                   2094.956 MB/sec
[info]                  ·gc.alloc.rate.norm:              8792.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.262 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031.263 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8524.701 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 373732.503 ops/s
[info]                  ·gc.alloc.rate:                   2087.688 MB/sec
[info]                  ·gc.alloc.rate.norm:              8792.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.263 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2376.101 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10006.610 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson":
[info]   374699.721 ±(99.9%) 2366.719 ops/s [Average]
[info]   (min, avg, max) = (373732.503, 374699.721, 375199.272), stdev = 614.629
[info]   CI (99.9%): [372333.002, 377066.440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2093.014 ±(99.9%) 12.652 MB/sec [Average]
[info]   (min, avg, max) = (2087.688, 2093.014, 2095.416), stdev = 3.286
[info]   CI (99.9%): [2080.362, 2105.667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   8792.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8792.001, 8792.001, 8792.001), stdev = 0.001
[info]   CI (99.9%): [8792.001, 8792.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.083, 0.125), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.350 ±(99.9%) 0.476 B/op [Average]
[info]   (min, avg, max) = (0.262, 0.350, 0.524), stdev = 0.124
[info]   CI (99.9%): [≈ 0, 0.825] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   2153.794 ±(99.9%) 696.070 MB/sec [Average]
[info]   (min, avg, max) = (2012.312, 2153.794, 2376.101), stdev = 180.767
[info]   CI (99.9%): [1457.725, 2849.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   9047.788 ±(99.9%) 2951.978 B/op [Average]
[info]   (min, avg, max) = (8457.274, 9047.788, 10006.610), stdev = 766.619
[info]   CI (99.9%): [6095.810, 11999.765] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.count":
[info]   32.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.800, 9.000), stdev = 0.837
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala
[info] # Run progress: 69.59% complete, ETA 00:14:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2821277.836 ops/s
[info] # Warmup Iteration   2: 3316979.481 ops/s
[info] # Warmup Iteration   3: 3366172.912 ops/s
[info] Iteration   1: 3338435.765 ops/s
[info]                  ·gc.alloc.rate:                   542.926 MB/sec
[info]                  ·gc.alloc.rate.norm:              256.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.701 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.745 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.343 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 154.820 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 3327644.171 ops/s
[info]                  ·gc.alloc.rate:                   541.362 MB/sec
[info]                  ·gc.alloc.rate.norm:              256.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.937 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 309.708 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 3336627.742 ops/s
[info]                  ·gc.alloc.rate:                   542.670 MB/sec
[info]                  ·gc.alloc.rate.norm:              256.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.049 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.751 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 307.930 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 3276851.770 ops/s
[info]                  ·gc.alloc.rate:                   533.098 MB/sec
[info]                  ·gc.alloc.rate.norm:              256.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      326.467 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 156.773 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 3372302.776 ops/s
[info]                  ·gc.alloc.rate:                   548.682 MB/sec
[info]                  ·gc.alloc.rate.norm:              256.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.015 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 304.679 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala":
[info]   3330372.445 ±(99.9%) 132472.850 ops/s [Average]
[info]   (min, avg, max) = (3276851.770, 3330372.445, 3372302.776), stdev = 34402.779
[info]   CI (99.9%): [3197899.595, 3462845.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   541.747 ±(99.9%) 21.551 MB/sec [Average]
[info]   (min, avg, max) = (533.098, 541.747, 548.682), stdev = 5.597
[info]   CI (99.9%): [520.196, 563.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   256.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (256.000, 256.000, 256.000), stdev = 0.001
[info]   CI (99.9%): [256.000, 256.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.786 ±(99.9%) 6.276 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.786, 3.701), stdev = 1.630
[info]   CI (99.9%): [≈ 0, 7.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.371 ±(99.9%) 2.960 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.371, 1.745), stdev = 0.769
[info]   CI (99.9%): [≈ 0, 3.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   523.103 ±(99.9%) 687.917 MB/sec [Average]
[info]   (min, avg, max) = (326.467, 523.103, 654.937), stdev = 178.650
[info]   CI (99.9%): [≈ 0, 1211.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   246.782 ±(99.9%) 319.913 B/op [Average]
[info]   (min, avg, max) = (154.820, 246.782, 309.708), stdev = 83.080
[info]   CI (99.9%): [≈ 0, 566.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson
[info] # Run progress: 70.05% complete, ETA 00:13:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 81769.245 ops/s
[info] # Warmup Iteration   2: 341574.982 ops/s
[info] # Warmup Iteration   3: 346597.366 ops/s
[info] Iteration   1: 346785.940 ops/s
[info]                  ·gc.alloc.rate:                   1330.926 MB/sec
[info]                  ·gc.alloc.rate.norm:              6040.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.378 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1313.694 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5961.803 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 346787.553 ops/s
[info]                  ·gc.alloc.rate:                   1330.890 MB/sec
[info]                  ·gc.alloc.rate.norm:              6040.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.661 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1323.020 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6004.284 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 347003.706 ops/s
[info]                  ·gc.alloc.rate:                   1331.456 MB/sec
[info]                  ·gc.alloc.rate.norm:              6040.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.378 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1332.060 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6042.743 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 346730.250 ops/s
[info]                  ·gc.alloc.rate:                   1330.514 MB/sec
[info]                  ·gc.alloc.rate.norm:              6040.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.189 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.183 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6079.354 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 347658.983 ops/s
[info]                  ·gc.alloc.rate:                   1334.321 MB/sec
[info]                  ·gc.alloc.rate.norm:              6040.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.377 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.751 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6091.743 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson":
[info]   346993.286 ±(99.9%) 1488.571 ops/s [Average]
[info]   (min, avg, max) = (346730.250, 346993.286, 347658.983), stdev = 386.577
[info]   CI (99.9%): [345504.715, 348481.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1331.621 ±(99.9%) 5.953 MB/sec [Average]
[info]   (min, avg, max) = (1330.514, 1331.621, 1334.321), stdev = 1.546
[info]   CI (99.9%): [1325.669, 1337.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   6040.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6040.001, 6040.001, 6040.001), stdev = 0.001
[info]   CI (99.9%): [6040.001, 6040.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.087, 0.146), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.397 ±(99.9%) 0.651 B/op [Average]
[info]   (min, avg, max) = (0.189, 0.397, 0.661), stdev = 0.169
[info]   CI (99.9%): [≈ 0, 1.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1330.742 ±(99.9%) 49.030 MB/sec [Average]
[info]   (min, avg, max) = (1313.694, 1330.742, 1345.751), stdev = 12.733
[info]   CI (99.9%): [1281.712, 1379.772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   6035.986 ±(99.9%) 206.857 B/op [Average]
[info]   (min, avg, max) = (5961.803, 6035.986, 6091.743), stdev = 53.720
[info]   CI (99.9%): [5829.128, 6242.843] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce
[info] # Run progress: 70.51% complete, ETA 00:13:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 443016.212 ops/s
[info] # Warmup Iteration   2: 615929.184 ops/s
[info] # Warmup Iteration   3: 625404.923 ops/s
[info] Iteration   1: 628524.336 ops/s
[info]                  ·gc.alloc.rate:                   2271.355 MB/sec
[info]                  ·gc.alloc.rate.norm:              5688.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.209 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1987.016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4975.950 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 627630.567 ops/s
[info]                  ·gc.alloc.rate:                   2268.059 MB/sec
[info]                  ·gc.alloc.rate.norm:              5688.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.365 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2340.639 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5870.024 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 627171.319 ops/s
[info]                  ·gc.alloc.rate:                   2266.265 MB/sec
[info]                  ·gc.alloc.rate.norm:              5688.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.261 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2357.821 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5917.793 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 625434.126 ops/s
[info]                  ·gc.alloc.rate:                   2260.061 MB/sec
[info]                  ·gc.alloc.rate.norm:              5688.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.262 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2369.222 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5962.733 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 625114.145 ops/s
[info]                  ·gc.alloc.rate:                   2258.978 MB/sec
[info]                  ·gc.alloc.rate.norm:              5688.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.262 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035.638 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5125.641 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce":
[info]   626774.899 ±(99.9%) 5615.085 ops/s [Average]
[info]   (min, avg, max) = (625114.145, 626774.899, 628524.336), stdev = 1458.220
[info]   CI (99.9%): [621159.814, 632389.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.alloc.rate":
[info]   2264.943 ±(99.9%) 20.374 MB/sec [Average]
[info]   (min, avg, max) = (2258.978, 2264.943, 2271.355), stdev = 5.291
[info]   CI (99.9%): [2244.570, 2285.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5688.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5688.001, 5688.001, 5688.001), stdev = 0.001
[info]   CI (99.9%): [5688.001, 5688.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.108 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.108, 0.146), stdev = 0.023
[info]   CI (99.9%): [0.020, 0.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.272 ±(99.9%) 0.220 B/op [Average]
[info]   (min, avg, max) = (0.209, 0.272, 0.365), stdev = 0.057
[info]   CI (99.9%): [0.052, 0.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2218.067 ±(99.9%) 730.780 MB/sec [Average]
[info]   (min, avg, max) = (1987.016, 2218.067, 2369.222), stdev = 189.781
[info]   CI (99.9%): [1487.287, 2948.848] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5570.428 ±(99.9%) 1842.245 B/op [Average]
[info]   (min, avg, max) = (4975.950, 5570.428, 5962.733), stdev = 478.425
[info]   CI (99.9%): [3728.184, 7412.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.count":
[info]   33.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.400, 8.000), stdev = 1.140
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala
[info] # Run progress: 70.97% complete, ETA 00:13:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 257956.366 ops/s
[info] # Warmup Iteration   2: 645228.121 ops/s
[info] # Warmup Iteration   3: 646779.129 ops/s
[info] Iteration   1: 652923.229 ops/s
[info]                  ·gc.alloc.rate:                   759.889 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.151 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      972.090 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2343.593 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 638565.607 ops/s
[info]                  ·gc.alloc.rate:                   743.204 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.257 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.086 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1607.394 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 640187.450 ops/s
[info]                  ·gc.alloc.rate:                   745.043 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.154 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.688 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1609.825 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 646520.639 ops/s
[info]                  ·gc.alloc.rate:                   752.750 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.664 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1600.587 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 646380.458 ops/s
[info]                  ·gc.alloc.rate:                   752.295 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.253 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      991.444 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2414.381 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala":
[info]   644915.477 ±(99.9%) 22080.169 ops/s [Average]
[info]   (min, avg, max) = (638565.607, 644915.477, 652923.229), stdev = 5734.150
[info]   CI (99.9%): [622835.308, 666995.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   750.636 ±(99.9%) 25.784 MB/sec [Average]
[info]   (min, avg, max) = (743.204, 750.636, 759.889), stdev = 6.696
[info]   CI (99.9%): [724.852, 776.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1832.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1832.001, 1832.001, 1832.001), stdev = 0.001
[info]   CI (99.9%): [1832.001, 1832.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.164 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.067, 0.104), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.163 ±(99.9%) 0.403 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.163, 0.257), stdev = 0.105
[info]   CI (99.9%): [≈ 0, 0.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   785.595 ±(99.9%) 690.119 MB/sec [Average]
[info]   (min, avg, max) = (652.086, 785.595, 991.444), stdev = 179.222
[info]   CI (99.9%): [95.475, 1475.714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1915.156 ±(99.9%) 1633.328 B/op [Average]
[info]   (min, avg, max) = (1600.587, 1915.156, 2414.381), stdev = 424.170
[info]   CI (99.9%): [281.828, 3548.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala
[info] # Run progress: 71.43% complete, ETA 00:13:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3350331.781 ops/s
[info] # Warmup Iteration   2: 3559123.148 ops/s
[info] # Warmup Iteration   3: 3633589.436 ops/s
[info] Iteration   1: 3617223.252 ops/s
[info]                  ·gc.alloc.rate:                   1507.350 MB/sec
[info]                  ·gc.alloc.rate.norm:              656.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.063 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1646.336 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 716.487 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 3591035.279 ops/s
[info]                  ·gc.alloc.rate:                   1496.358 MB/sec
[info]                  ·gc.alloc.rate.norm:              656.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.055 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1324.914 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 580.840 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 3607939.174 ops/s
[info]                  ·gc.alloc.rate:                   1504.188 MB/sec
[info]                  ·gc.alloc.rate.norm:              656.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1667.412 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 727.184 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 3625400.816 ops/s
[info]                  ·gc.alloc.rate:                   1511.183 MB/sec
[info]                  ·gc.alloc.rate.norm:              656.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 582.131 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 3627713.987 ops/s
[info]                  ·gc.alloc.rate:                   1512.033 MB/sec
[info]                  ·gc.alloc.rate.norm:              656.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1684.346 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 730.759 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala":
[info]   3613862.502 ±(99.9%) 57517.165 ops/s [Average]
[info]   (min, avg, max) = (3591035.279, 3613862.502, 3627713.987), stdev = 14937.025
[info]   CI (99.9%): [3556345.337, 3671379.667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1506.222 ±(99.9%) 24.436 MB/sec [Average]
[info]   (min, avg, max) = (1496.358, 1506.222, 1512.033), stdev = 6.346
[info]   CI (99.9%): [1481.786, 1530.658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   656.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (656.000, 656.000, 656.000), stdev = 0.001
[info]   CI (99.9%): [656.000, 656.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.096 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.096, 0.146), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.042 ±(99.9%) 0.068 B/op [Average]
[info]   (min, avg, max) = (0.018, 0.042, 0.063), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1532.805 ±(99.9%) 704.716 MB/sec [Average]
[info]   (min, avg, max) = (1324.914, 1532.805, 1684.346), stdev = 183.013
[info]   CI (99.9%): [828.089, 2237.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   667.480 ±(99.9%) 302.964 B/op [Average]
[info]   (min, avg, max) = (580.840, 667.480, 730.759), stdev = 78.679
[info]   CI (99.9%): [364.516, 970.444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson
[info] # Run progress: 71.89% complete, ETA 00:13:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 52388.943 ops/s
[info] # Warmup Iteration   2: 228125.584 ops/s
[info] # Warmup Iteration   3: 231478.546 ops/s
[info] Iteration   1: 231609.357 ops/s
[info]                  ·gc.alloc.rate:                   1611.125 MB/sec
[info]                  ·gc.alloc.rate.norm:              10952.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.566 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1647.777 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11201.149 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 231712.586 ops/s
[info]                  ·gc.alloc.rate:                   1612.369 MB/sec
[info]                  ·gc.alloc.rate.norm:              10952.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.707 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1330.278 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9035.899 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 235063.472 ops/s
[info]                  ·gc.alloc.rate:                   1635.906 MB/sec
[info]                  ·gc.alloc.rate.norm:              10952.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.418 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1674.218 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11208.491 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 233401.413 ops/s
[info]                  ·gc.alloc.rate:                   1624.051 MB/sec
[info]                  ·gc.alloc.rate.norm:              10952.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.561 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1682.593 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11346.786 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 234170.548 ops/s
[info]                  ·gc.alloc.rate:                   1629.321 MB/sec
[info]                  ·gc.alloc.rate.norm:              10952.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.700 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1688.512 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11349.873 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson":
[info]   233191.475 ±(99.9%) 5838.915 ops/s [Average]
[info]   (min, avg, max) = (231609.357, 233191.475, 235063.472), stdev = 1516.348
[info]   CI (99.9%): [227352.560, 239030.390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1622.554 ±(99.9%) 41.323 MB/sec [Average]
[info]   (min, avg, max) = (1611.125, 1622.554, 1635.906), stdev = 10.731
[info]   CI (99.9%): [1581.231, 1663.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   10952.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10952.002, 10952.002, 10952.002), stdev = 0.001
[info]   CI (99.9%): [10952.002, 10952.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.104), stdev = 0.017
[info]   CI (99.9%): [0.020, 0.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.590 ±(99.9%) 0.458 B/op [Average]
[info]   (min, avg, max) = (0.418, 0.590, 0.707), stdev = 0.119
[info]   CI (99.9%): [0.132, 1.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1604.675 ±(99.9%) 593.698 MB/sec [Average]
[info]   (min, avg, max) = (1330.278, 1604.675, 1688.512), stdev = 154.182
[info]   CI (99.9%): [1010.977, 2198.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   10828.440 ±(99.9%) 3868.474 B/op [Average]
[info]   (min, avg, max) = (9035.899, 10828.440, 11349.873), stdev = 1004.631
[info]   CI (99.9%): [6959.965, 14696.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 7.000), stdev = 1.095
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce
[info] # Run progress: 72.35% complete, ETA 00:12:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 552728.371 ops/s
[info] # Warmup Iteration   2: 851008.990 ops/s
[info] # Warmup Iteration   3: 858701.830 ops/s
[info] Iteration   1: 853054.558 ops/s
[info]                  ·gc.alloc.rate:                   1959.401 MB/sec
[info]                  ·gc.alloc.rate.norm:              3616.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.269 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1976.543 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3647.636 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 858566.039 ops/s
[info]                  ·gc.alloc.rate:                   1972.975 MB/sec
[info]                  ·gc.alloc.rate.norm:              3616.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.305 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1996.800 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3659.668 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 852917.300 ops/s
[info]                  ·gc.alloc.rate:                   1959.924 MB/sec
[info]                  ·gc.alloc.rate.norm:              3616.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.077 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2012.460 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3712.928 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 859123.371 ops/s
[info]                  ·gc.alloc.rate:                   1973.660 MB/sec
[info]                  ·gc.alloc.rate.norm:              3616.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.153 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1685.779 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3088.566 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 844542.721 ops/s
[info]                  ·gc.alloc.rate:                   1940.574 MB/sec
[info]                  ·gc.alloc.rate.norm:              3616.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.233 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030.619 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3783.788 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce":
[info]   853640.798 ±(99.9%) 22614.031 ops/s [Average]
[info]   (min, avg, max) = (844542.721, 853640.798, 859123.371), stdev = 5872.792
[info]   CI (99.9%): [831026.767, 876254.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1961.307 ±(99.9%) 51.810 MB/sec [Average]
[info]   (min, avg, max) = (1940.574, 1961.307, 1973.660), stdev = 13.455
[info]   CI (99.9%): [1909.496, 2013.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   3616.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3616.000, 3616.000, 3616.001), stdev = 0.001
[info]   CI (99.9%): [3616.000, 3616.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.112 ±(99.9%) 0.193 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.112, 0.167), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.207 ±(99.9%) 0.355 B/op [Average]
[info]   (min, avg, max) = (0.077, 0.207, 0.305), stdev = 0.092
[info]   CI (99.9%): [≈ 0, 0.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1940.440 ±(99.9%) 553.513 MB/sec [Average]
[info]   (min, avg, max) = (1685.779, 1940.440, 2030.619), stdev = 143.746
[info]   CI (99.9%): [1386.927, 2493.953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3578.517 ±(99.9%) 1074.767 B/op [Average]
[info]   (min, avg, max) = (3088.566, 3578.517, 3783.788), stdev = 279.114
[info]   CI (99.9%): [2503.750, 4653.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.400, 10.000), stdev = 2.074
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala
[info] # Run progress: 72.81% complete, ETA 00:12:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_e598a460/target/5e31e36e/jackson-module-afterburner-2.9.4.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 497537.974 ops/s
[info] # Warmup Iteration   2: 1557329.814 ops/s
[info] # Warmup Iteration   3: 1575471.118 ops/s
[info] Iteration   1: 1575020.934 ops/s
[info]                  ·gc.alloc.rate:                   1032.878 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.062 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      976.983 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 976.152 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1588689.734 ops/s
[info]                  ·gc.alloc.rate:                   1042.023 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.124 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      983.794 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 974.331 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 1587096.182 ops/s
[info]                  ·gc.alloc.rate:                   1040.567 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.103 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1320.162 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1309.293 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 1565686.960 ops/s
[info]                  ·gc.alloc.rate:                   1026.565 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.063 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      995.483 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1000.754 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1590064.756 ops/s
[info]                  ·gc.alloc.rate:                   1042.515 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.124 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1001.111 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 991.013 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala":
[info]   1581311.713 ±(99.9%) 40761.292 ops/s [Average]
[info]   (min, avg, max) = (1565686.960, 1581311.713, 1590064.756), stdev = 10585.578
[info]   CI (99.9%): [1540550.422, 1622073.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1036.910 ±(99.9%) 26.831 MB/sec [Average]
[info]   (min, avg, max) = (1026.565, 1036.910, 1042.515), stdev = 6.968
[info]   CI (99.9%): [1010.078, 1063.741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1032.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1032.000, 1032.000, 1032.000), stdev = 0.001
[info]   CI (99.9%): [1032.000, 1032.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.096 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.125), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.095 ±(99.9%) 0.119 B/op [Average]
[info]   (min, avg, max) = (0.062, 0.095, 0.124), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1055.507 ±(99.9%) 570.860 MB/sec [Average]
[info]   (min, avg, max) = (976.983, 1055.507, 1320.162), stdev = 148.250
[info]   CI (99.9%): [484.647, 1626.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1050.309 ±(99.9%) 559.061 B/op [Average]
[info]   (min, avg, max) = (974.331, 1050.309, 1309.293), stdev = 145.186
[info]   CI (99.9%): [491.248, 1609.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 0.707
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala
[info] # Run progress: 73.27% complete, ETA 00:12:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5790138.834 ops/s
[info] # Warmup Iteration   2: 6725713.186 ops/s
[info] # Warmup Iteration   3: 6781236.582 ops/s
[info] Iteration   1: 7000968.772 ops/s
[info]                  ·gc.alloc.rate:                   782.791 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.061 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 147.057 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 6949242.161 ops/s
[info]                  ·gc.alloc.rate:                   776.972 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.703 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 147.850 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 6921156.290 ops/s
[info]                  ·gc.alloc.rate:                   773.924 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      979.833 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 222.826 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 7010596.748 ops/s
[info]                  ·gc.alloc.rate:                   783.901 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.760 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 147.006 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 6969306.936 ops/s
[info]                  ·gc.alloc.rate:                   779.937 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      984.808 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 222.231 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala":
[info]   6970254.181 ±(99.9%) 141794.623 ops/s [Average]
[info]   (min, avg, max) = (6921156.290, 6970254.181, 7010596.748), stdev = 36823.613
[info]   CI (99.9%): [6828459.558, 7112048.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   779.505 ±(99.9%) 15.861 MB/sec [Average]
[info]   (min, avg, max) = (773.924, 779.505, 783.901), stdev = 4.119
[info]   CI (99.9%): [763.644, 795.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   176.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (176.000, 176.000, 176.000), stdev = 0.001
[info]   CI (99.9%): [176.000, 176.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.083), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.013 ±(99.9%) 0.030 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.019), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   785.233 ±(99.9%) 692.830 MB/sec [Average]
[info]   (min, avg, max) = (652.703, 785.233, 984.808), stdev = 179.926
[info]   CI (99.9%): [92.403, 1478.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   177.394 ±(99.9%) 158.662 B/op [Average]
[info]   (min, avg, max) = (147.006, 177.394, 222.826), stdev = 41.204
[info]   CI (99.9%): [18.732, 336.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson
[info] # Run progress: 73.73% complete, ETA 00:12:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 161408.727 ops/s
[info] # Warmup Iteration   2: 515509.204 ops/s
[info] # Warmup Iteration   3: 520366.388 ops/s
[info] Iteration   1: 524597.372 ops/s
[info]                  ·gc.alloc.rate:                   1810.242 MB/sec
[info]                  ·gc.alloc.rate.norm:              5432.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.312 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1984.161 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5953.878 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 525826.394 ops/s
[info]                  ·gc.alloc.rate:                   1814.619 MB/sec
[info]                  ·gc.alloc.rate.norm:              5432.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.436 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1668.807 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4995.517 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 519103.168 ops/s
[info]                  ·gc.alloc.rate:                   1791.324 MB/sec
[info]                  ·gc.alloc.rate.norm:              5432.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.379 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2015.697 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6112.388 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 521559.423 ops/s
[info]                  ·gc.alloc.rate:                   1800.090 MB/sec
[info]                  ·gc.alloc.rate.norm:              5432.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.188 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1687.373 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5091.863 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 522556.336 ops/s
[info]                  ·gc.alloc.rate:                   1803.372 MB/sec
[info]                  ·gc.alloc.rate.norm:              5432.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.313 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1693.210 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5100.177 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson":
[info]   522728.539 ±(99.9%) 10120.134 ops/s [Average]
[info]   (min, avg, max) = (519103.168, 522728.539, 525826.394), stdev = 2628.167
[info]   CI (99.9%): [512608.405, 532848.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1803.930 ±(99.9%) 34.873 MB/sec [Average]
[info]   (min, avg, max) = (1791.324, 1803.930, 1814.619), stdev = 9.056
[info]   CI (99.9%): [1769.057, 1838.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5432.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5432.001, 5432.001, 5432.001), stdev = 0.001
[info]   CI (99.9%): [5432.001, 5432.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.108 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.108, 0.146), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.326 ±(99.9%) 0.356 B/op [Average]
[info]   (min, avg, max) = (0.188, 0.326, 0.436), stdev = 0.092
[info]   CI (99.9%): [≈ 0, 0.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1809.849 ±(99.9%) 670.433 MB/sec [Average]
[info]   (min, avg, max) = (1668.807, 1809.849, 2015.697), stdev = 174.109
[info]   CI (99.9%): [1139.417, 2480.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   5450.765 ±(99.9%) 2064.535 B/op [Average]
[info]   (min, avg, max) = (4995.517, 5450.765, 6112.388), stdev = 536.153
[info]   CI (99.9%): [3386.229, 7515.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce
[info] # Run progress: 74.19% complete, ETA 00:11:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 400712.799 ops/s
[info] # Warmup Iteration   2: 640907.667 ops/s
[info] # Warmup Iteration   3: 648354.914 ops/s
[info] Iteration   1: 647332.961 ops/s
[info]                  ·gc.alloc.rate:                   2244.017 MB/sec
[info]                  ·gc.alloc.rate.norm:              5456.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.354 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2315.875 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5630.713 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 650560.986 ops/s
[info]                  ·gc.alloc.rate:                   2255.481 MB/sec
[info]                  ·gc.alloc.rate.norm:              5456.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.353 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2341.109 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5663.135 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 649229.279 ops/s
[info]                  ·gc.alloc.rate:                   2250.312 MB/sec
[info]                  ·gc.alloc.rate.norm:              5456.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.101 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2020.095 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4897.828 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 650278.536 ops/s
[info]                  ·gc.alloc.rate:                   2254.128 MB/sec
[info]                  ·gc.alloc.rate.norm:              5456.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.101 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2368.030 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5731.694 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 638832.891 ops/s
[info]                  ·gc.alloc.rate:                   2214.715 MB/sec
[info]                  ·gc.alloc.rate.norm:              5456.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.256 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035.881 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5015.437 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce":
[info]   647246.931 ±(99.9%) 18756.506 ops/s [Average]
[info]   (min, avg, max) = (638832.891, 647246.931, 650560.986), stdev = 4871.005
[info]   CI (99.9%): [628490.425, 666003.436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.alloc.rate":
[info]   2243.731 ±(99.9%) 64.763 MB/sec [Average]
[info]   (min, avg, max) = (2214.715, 2243.731, 2255.481), stdev = 16.819
[info]   CI (99.9%): [2178.968, 2308.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5456.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5456.001, 5456.001, 5456.001), stdev = 0.001
[info]   CI (99.9%): [5456.001, 5456.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.096 ±(99.9%) 0.201 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.096, 0.146), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.233 ±(99.9%) 0.489 B/op [Average]
[info]   (min, avg, max) = (0.101, 0.233, 0.354), stdev = 0.127
[info]   CI (99.9%): [≈ 0, 0.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2216.198 ±(99.9%) 665.733 MB/sec [Average]
[info]   (min, avg, max) = (2020.095, 2216.198, 2368.030), stdev = 172.889
[info]   CI (99.9%): [1550.466, 2881.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5387.762 ±(99.9%) 1530.366 B/op [Average]
[info]   (min, avg, max) = (4897.828, 5387.762, 5731.694), stdev = 397.431
[info]   CI (99.9%): [3857.396, 6918.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.count":
[info]   33.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 1.000
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala
[info] # Run progress: 74.65% complete, ETA 00:11:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4789482.530 ops/s
[info] # Warmup Iteration   2: 5562201.798 ops/s
[info] # Warmup Iteration   3: 5662695.048 ops/s
[info] Iteration   1: 5690021.517 ops/s
[info]                  ·gc.alloc.rate:                   1417.014 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1315.139 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 363.817 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 5674846.677 ops/s
[info]                  ·gc.alloc.rate:                   1413.133 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1652.718 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 458.461 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 5685160.092 ops/s
[info]                  ·gc.alloc.rate:                   1415.890 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1330.909 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 368.472 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 5690896.139 ops/s
[info]                  ·gc.alloc.rate:                   1417.366 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1337.630 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 369.948 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 5690091.366 ops/s
[info]                  ·gc.alloc.rate:                   1417.378 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.449 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 371.830 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala":
[info]   5686203.158 ±(99.9%) 25958.292 ops/s [Average]
[info]   (min, avg, max) = (5674846.677, 5686203.158, 5690896.139), stdev = 6741.286
[info]   CI (99.9%): [5660244.867, 5712161.450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1416.156 ±(99.9%) 6.916 MB/sec [Average]
[info]   (min, avg, max) = (1413.133, 1416.156, 1417.378), stdev = 1.796
[info]   CI (99.9%): [1409.240, 1423.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   392.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (392.000, 392.000, 392.000), stdev = 0.001
[info]   CI (99.9%): [392.000, 392.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.236 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.087, 0.187), stdev = 0.061
[info]   CI (99.9%): [≈ 0, 0.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.024 ±(99.9%) 0.066 B/op [Average]
[info]   (min, avg, max) = (0.006, 0.024, 0.052), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1396.169 ±(99.9%) 553.824 MB/sec [Average]
[info]   (min, avg, max) = (1315.139, 1396.169, 1652.718), stdev = 143.826
[info]   CI (99.9%): [842.345, 1949.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   386.506 ±(99.9%) 155.308 B/op [Average]
[info]   (min, avg, max) = (363.817, 386.506, 458.461), stdev = 40.333
[info]   CI (99.9%): [231.198, 541.814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 5.000), stdev = 0.837
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson
[info] # Run progress: 75.12% complete, ETA 00:11:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 136749.013 ops/s
[info] # Warmup Iteration   2: 383432.808 ops/s
[info] # Warmup Iteration   3: 384724.146 ops/s
[info] Iteration   1: 389562.996 ops/s
[info]                  ·gc.alloc.rate:                   2086.497 MB/sec
[info]                  ·gc.alloc.rate.norm:              8432.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.421 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1995.256 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8063.278 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 387119.032 ops/s
[info]                  ·gc.alloc.rate:                   2074.909 MB/sec
[info]                  ·gc.alloc.rate.norm:              8432.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.592 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2012.997 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8180.405 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 390173.724 ops/s
[info]                  ·gc.alloc.rate:                   2090.662 MB/sec
[info]                  ·gc.alloc.rate.norm:              8432.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.252 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2024.419 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8164.835 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 387689.394 ops/s
[info]                  ·gc.alloc.rate:                   2077.239 MB/sec
[info]                  ·gc.alloc.rate.norm:              8432.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.423 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031.574 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8246.634 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 387115.605 ops/s
[info]                  ·gc.alloc.rate:                   2073.716 MB/sec
[info]                  ·gc.alloc.rate.norm:              8432.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.508 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2375.170 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9657.755 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson":
[info]   388332.151 ±(99.9%) 5537.149 ops/s [Average]
[info]   (min, avg, max) = (387115.605, 388332.151, 390173.724), stdev = 1437.980
[info]   CI (99.9%): [382795.001, 393869.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2080.604 ±(99.9%) 29.013 MB/sec [Average]
[info]   (min, avg, max) = (2073.716, 2080.604, 2090.662), stdev = 7.535
[info]   CI (99.9%): [2051.591, 2109.618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   8432.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8432.001, 8432.001, 8432.001), stdev = 0.001
[info]   CI (99.9%): [8432.001, 8432.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.108 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.108, 0.146), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.439 ±(99.9%) 0.487 B/op [Average]
[info]   (min, avg, max) = (0.252, 0.439, 0.592), stdev = 0.126
[info]   CI (99.9%): [≈ 0, 0.926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   2087.883 ±(99.9%) 620.659 MB/sec [Average]
[info]   (min, avg, max) = (1995.256, 2087.883, 2375.170), stdev = 161.183
[info]   CI (99.9%): [1467.225, 2708.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   8462.581 ±(99.9%) 2585.094 B/op [Average]
[info]   (min, avg, max) = (8063.278, 8462.581, 9657.755), stdev = 671.341
[info]   CI (99.9%): [5877.488, 11047.675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.200, 8.000), stdev = 0.447
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce
[info] # Run progress: 75.58% complete, ETA 00:11:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 237149.405 ops/s
[info] # Warmup Iteration   2: 460501.948 ops/s
[info] # Warmup Iteration   3: 466065.647 ops/s
[info] Iteration   1: 463478.732 ops/s
[info]                  ·gc.alloc.rate:                   1213.073 MB/sec
[info]                  ·gc.alloc.rate.norm:              4120.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.283 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1303.374 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4426.691 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 468450.555 ops/s
[info]                  ·gc.alloc.rate:                   1226.083 MB/sec
[info]                  ·gc.alloc.rate.norm:              4120.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.490 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1308.739 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4397.751 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 468682.509 ops/s
[info]                  ·gc.alloc.rate:                   1226.742 MB/sec
[info]                  ·gc.alloc.rate.norm:              4120.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.350 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1317.492 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4424.787 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 470711.226 ops/s
[info]                  ·gc.alloc.rate:                   1232.113 MB/sec
[info]                  ·gc.alloc.rate.norm:              4120.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.139 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      994.138 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3324.248 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 470032.030 ops/s
[info]                  ·gc.alloc.rate:                   1230.818 MB/sec
[info]                  ·gc.alloc.rate.norm:              4120.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.209 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1333.398 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4463.373 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce":
[info]   468271.010 ±(99.9%) 10929.207 ops/s [Average]
[info]   (min, avg, max) = (463478.732, 468271.010, 470711.226), stdev = 2838.280
[info]   CI (99.9%): [457341.803, 479200.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1225.766 ±(99.9%) 29.069 MB/sec [Average]
[info]   (min, avg, max) = (1213.073, 1225.766, 1232.113), stdev = 7.549
[info]   CI (99.9%): [1196.696, 1254.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   4120.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4120.001, 4120.001, 4120.001), stdev = 0.001
[info]   CI (99.9%): [4120.001, 4120.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.087, 0.146), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.294 ±(99.9%) 0.519 B/op [Average]
[info]   (min, avg, max) = (0.139, 0.294, 0.490), stdev = 0.135
[info]   CI (99.9%): [≈ 0, 0.813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1251.428 ±(99.9%) 555.563 MB/sec [Average]
[info]   (min, avg, max) = (994.138, 1251.428, 1333.398), stdev = 144.278
[info]   CI (99.9%): [695.865, 1806.991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4207.370 ±(99.9%) 1903.108 B/op [Average]
[info]   (min, avg, max) = (3324.248, 4207.370, 4463.373), stdev = 494.231
[info]   CI (99.9%): [2304.262, 6110.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala
[info] # Run progress: 76.04% complete, ETA 00:11:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2783010.197 ops/s
[info] # Warmup Iteration   2: 3343926.109 ops/s
[info] # Warmup Iteration   3: 3394735.906 ops/s
[info] Iteration   1: 3402544.612 ops/s
[info]                  ·gc.alloc.rate:                   657.225 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.029 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.812 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 302.884 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 3334860.521 ops/s
[info]                  ·gc.alloc.rate:                   644.276 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.954 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 308.095 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 3423916.186 ops/s
[info]                  ·gc.alloc.rate:                   661.238 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.713 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 300.081 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 3384038.760 ops/s
[info]                  ·gc.alloc.rate:                   653.598 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.048 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.108 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 303.772 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 3387986.826 ops/s
[info]                  ·gc.alloc.rate:                   654.392 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.472 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 304.038 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala":
[info]   3386669.381 ±(99.9%) 126723.066 ops/s [Average]
[info]   (min, avg, max) = (3334860.521, 3386669.381, 3423916.186), stdev = 32909.578
[info]   CI (99.9%): [3259946.315, 3513392.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   654.146 ±(99.9%) 24.167 MB/sec [Average]
[info]   (min, avg, max) = (644.276, 654.146, 661.238), stdev = 6.276
[info]   CI (99.9%): [629.979, 678.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   304.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (304.000, 304.000, 304.000), stdev = 0.001
[info]   CI (99.9%): [304.000, 304.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.058, 0.104), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.027 ±(99.9%) 0.067 B/op [Average]
[info]   (min, avg, max) = (0.010, 0.027, 0.048), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   653.612 ±(99.9%) 3.691 MB/sec [Average]
[info]   (min, avg, max) = (652.713, 653.612, 654.812), stdev = 0.958
[info]   CI (99.9%): [649.921, 657.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   303.774 ±(99.9%) 11.089 B/op [Average]
[info]   (min, avg, max) = (300.081, 303.774, 308.095), stdev = 2.880
[info]   CI (99.9%): [292.685, 314.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson
[info] # Run progress: 76.50% complete, ETA 00:10:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 92962.761 ops/s
[info] # Warmup Iteration   2: 345891.384 ops/s
[info] # Warmup Iteration   3: 350167.976 ops/s
[info] Iteration   1: 350224.311 ops/s
[info]                  ·gc.alloc.rate:                   1272.517 MB/sec
[info]                  ·gc.alloc.rate.norm:              5720.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      983.321 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4420.058 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 349027.885 ops/s
[info]                  ·gc.alloc.rate:                   1268.824 MB/sec
[info]                  ·gc.alloc.rate.norm:              5720.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.657 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1320.695 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5953.841 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 348900.653 ops/s
[info]                  ·gc.alloc.rate:                   1267.907 MB/sec
[info]                  ·gc.alloc.rate.norm:              5720.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.376 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1330.159 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6000.843 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 349094.814 ops/s
[info]                  ·gc.alloc.rate:                   1268.673 MB/sec
[info]                  ·gc.alloc.rate.norm:              5720.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.375 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1337.570 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6030.631 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 349331.178 ops/s
[info]                  ·gc.alloc.rate:                   1269.550 MB/sec
[info]                  ·gc.alloc.rate.norm:              5720.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.281 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.259 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6056.605 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson":
[info]   349315.768 ±(99.9%) 2046.379 ops/s [Average]
[info]   (min, avg, max) = (348900.653, 349315.768, 350224.311), stdev = 531.438
[info]   CI (99.9%): [347269.389, 351362.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1269.494 ±(99.9%) 6.884 MB/sec [Average]
[info]   (min, avg, max) = (1267.907, 1269.494, 1272.517), stdev = 1.788
[info]   CI (99.9%): [1262.610, 1276.378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5720.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5720.001, 5720.001, 5720.001), stdev = 0.001
[info]   CI (99.9%): [5720.001, 5720.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.201 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.075, 0.146), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.338 ±(99.9%) 0.907 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.338, 0.657), stdev = 0.236
[info]   CI (99.9%): [≈ 0, 1.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1263.201 ±(99.9%) 603.405 MB/sec [Average]
[info]   (min, avg, max) = (983.321, 1263.201, 1344.259), stdev = 156.702
[info]   CI (99.9%): [659.796, 1866.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   5692.396 ±(99.9%) 2742.749 B/op [Average]
[info]   (min, avg, max) = (4420.058, 5692.396, 6056.605), stdev = 712.283
[info]   CI (99.9%): [2949.647, 8435.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce
[info] # Run progress: 76.96% complete, ETA 00:10:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1123317.985 ops/s
[info] # Warmup Iteration   2: 2108115.274 ops/s
[info] # Warmup Iteration   3: 2087295.274 ops/s
[info] Iteration   1: 2142002.679 ops/s
[info]                  ·gc.alloc.rate:                   3102.587 MB/sec
[info]                  ·gc.alloc.rate.norm:              2280.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.138 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3008.161 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2210.609 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 2139705.896 ops/s
[info]                  ·gc.alloc.rate:                   3100.326 MB/sec
[info]                  ·gc.alloc.rate.norm:              2280.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.107 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3037.610 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2233.879 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 2122035.490 ops/s
[info]                  ·gc.alloc.rate:                   3073.650 MB/sec
[info]                  ·gc.alloc.rate.norm:              2280.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.093 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3051.210 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2263.355 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 2134357.363 ops/s
[info]                  ·gc.alloc.rate:                   3091.670 MB/sec
[info]                  ·gc.alloc.rate.norm:              2280.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.077 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3058.047 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2255.204 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 2119745.979 ops/s
[info]                  ·gc.alloc.rate:                   3070.553 MB/sec
[info]                  ·gc.alloc.rate.norm:              2280.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.093 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3063.424 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2274.707 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce":
[info]   2131569.482 ±(99.9%) 39151.664 ops/s [Average]
[info]   (min, avg, max) = (2119745.979, 2131569.482, 2142002.679), stdev = 10167.563
[info]   CI (99.9%): [2092417.818, 2170721.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate":
[info]   3087.757 ±(99.9%) 57.380 MB/sec [Average]
[info]   (min, avg, max) = (3070.553, 3087.757, 3102.587), stdev = 14.901
[info]   CI (99.9%): [3030.378, 3145.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2280.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2280.000, 2280.000, 2280.000), stdev = 0.001
[info]   CI (99.9%): [2280.000, 2280.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.137 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.104, 0.137, 0.187), stdev = 0.032
[info]   CI (99.9%): [0.016, 0.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.101 ±(99.9%) 0.088 B/op [Average]
[info]   (min, avg, max) = (0.077, 0.101, 0.138), stdev = 0.023
[info]   CI (99.9%): [0.013, 0.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   3043.690 ±(99.9%) 85.051 MB/sec [Average]
[info]   (min, avg, max) = (3008.161, 3043.690, 3063.424), stdev = 22.087
[info]   CI (99.9%): [2958.640, 3128.741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2247.551 ±(99.9%) 98.124 B/op [Average]
[info]   (min, avg, max) = (2210.609, 2247.551, 2274.707), stdev = 25.482
[info]   CI (99.9%): [2149.427, 2345.674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.count":
[info]   45.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.000, 9.000), stdev = 0.001
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.400, 9.000), stdev = 0.548
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala
[info] # Run progress: 77.42% complete, ETA 00:10:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 38687.905 ops/s
[info] # Warmup Iteration   2: 289070.650 ops/s
[info] # Warmup Iteration   3: 289040.903 ops/s
[info] Iteration   1: 297874.841 ops/s
[info]                  ·gc.alloc.rate:                   535.969 MB/sec
[info]                  ·gc.alloc.rate.norm:              2832.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.250 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.320 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      578.843 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3058.540 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 297772.740 ops/s
[info]                  ·gc.alloc.rate:                   535.889 MB/sec
[info]                  ·gc.alloc.rate.norm:              2832.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      323.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1707.612 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 297283.691 ops/s
[info]                  ·gc.alloc.rate:                   534.840 MB/sec
[info]                  ·gc.alloc.rate.norm:              2832.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.331 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      650.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3442.001 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 298656.300 ops/s
[info]                  ·gc.alloc.rate:                   537.503 MB/sec
[info]                  ·gc.alloc.rate.norm:              2832.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.219 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.623 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3443.813 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 299109.489 ops/s
[info]                  ·gc.alloc.rate:                   538.162 MB/sec
[info]                  ·gc.alloc.rate.norm:              2832.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.056 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1726.350 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala":
[info]   298139.412 ±(99.9%) 2819.743 ops/s [Average]
[info]   (min, avg, max) = (297283.691, 298139.412, 299109.489), stdev = 732.278
[info]   CI (99.9%): [295319.669, 300959.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   536.473 ±(99.9%) 5.157 MB/sec [Average]
[info]   (min, avg, max) = (534.840, 536.473, 538.162), stdev = 1.339
[info]   CI (99.9%): [531.315, 541.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2832.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2832.001, 2832.001, 2832.001), stdev = 0.001
[info]   CI (99.9%): [2832.001, 2832.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.399 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.071, 0.250), stdev = 0.104
[info]   CI (99.9%): [≈ 0, 0.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.374 ±(99.9%) 2.109 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.374, 1.320), stdev = 0.548
[info]   CI (99.9%): [≈ 0, 2.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   506.738 ±(99.9%) 647.066 MB/sec [Average]
[info]   (min, avg, max) = (323.125, 506.738, 653.623), stdev = 168.041
[info]   CI (99.9%): [≈ 0, 1153.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2675.663 ±(99.9%) 3423.741 B/op [Average]
[info]   (min, avg, max) = (1707.612, 2675.663, 3443.813), stdev = 889.135
[info]   CI (99.9%): [≈ 0, 6099.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 1.095
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala
[info] # Run progress: 77.88% complete, ETA 00:10:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 590261.711 ops/s
[info] # Warmup Iteration   2: 645673.006 ops/s
[info] # Warmup Iteration   3: 653976.509 ops/s
[info] Iteration   1: 646355.044 ops/s
[info]                  ·gc.alloc.rate:                   410.642 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.016 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.547 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1245.727 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 646247.973 ops/s
[info]                  ·gc.alloc.rate:                   410.553 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.110 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.575 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      332.356 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 809.533 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 648062.665 ops/s
[info]                  ·gc.alloc.rate:                   411.702 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.202 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      332.358 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 807.278 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 651250.790 ops/s
[info]                  ·gc.alloc.rate:                   413.772 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.101 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.784 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1596.976 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 632576.299 ops/s
[info]                  ·gc.alloc.rate:                   401.870 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.687 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 820.381 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala":
[info]   644898.554 ±(99.9%) 27643.143 ops/s [Average]
[info]   (min, avg, max) = (632576.299, 644898.554, 651250.790), stdev = 7178.836
[info]   CI (99.9%): [617255.411, 672541.697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   409.708 ±(99.9%) 17.594 MB/sec [Average]
[info]   (min, avg, max) = (401.870, 409.708, 413.772), stdev = 4.569
[info]   CI (99.9%): [392.114, 427.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1000.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1000.001, 1000.001, 1000.001), stdev = 0.001
[info]   CI (99.9%): [1000.001, 1000.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.650 ±(99.9%) 5.296 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.650, 3.110), stdev = 1.375
[info]   CI (99.9%): [≈ 0, 5.947] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.583 ±(99.9%) 12.901 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.583, 7.575), stdev = 3.350
[info]   CI (99.9%): [≈ 0, 14.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   433.346 ±(99.9%) 574.334 MB/sec [Average]
[info]   (min, avg, max) = (329.687, 433.346, 660.784), stdev = 149.153
[info]   CI (99.9%): [≈ 0, 1007.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1055.979 ±(99.9%) 1370.603 B/op [Average]
[info]   (min, avg, max) = (807.278, 1055.979, 1596.976), stdev = 355.941
[info]   CI (99.9%): [≈ 0, 2426.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 4.000), stdev = 1.304
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless
[info] # Run progress: 78.34% complete, ETA 00:10:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3326513.807 ops/s
[info] # Warmup Iteration   2: 3638989.137 ops/s
[info] # Warmup Iteration   3: 3780541.088 ops/s
[info] Iteration   1: 3802244.945 ops/s
[info]                  ·gc.alloc.rate:                   1236.646 MB/sec
[info]                  ·gc.alloc.rate.norm:              512.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.043 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      989.662 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 409.743 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 3786344.251 ops/s
[info]                  ·gc.alloc.rate:                   1231.558 MB/sec
[info]                  ·gc.alloc.rate.norm:              512.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.035 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1323.088 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 550.052 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 3814550.116 ops/s
[info]                  ·gc.alloc.rate:                   1240.720 MB/sec
[info]                  ·gc.alloc.rate.norm:              512.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1329.068 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 548.458 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 3793141.083 ops/s
[info]                  ·gc.alloc.rate:                   1234.371 MB/sec
[info]                  ·gc.alloc.rate.norm:              512.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.035 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1001.544 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 415.427 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 3832291.619 ops/s
[info]                  ·gc.alloc.rate:                   1246.704 MB/sec
[info]                  ·gc.alloc.rate.norm:              512.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.034 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1340.285 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 550.432 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless":
[info]   3805714.403 ±(99.9%) 70208.193 ops/s [Average]
[info]   (min, avg, max) = (3786344.251, 3805714.403, 3832291.619), stdev = 18232.845
[info]   CI (99.9%): [3735506.209, 3875922.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate":
[info]   1238.000 ±(99.9%) 22.753 MB/sec [Average]
[info]   (min, avg, max) = (1231.558, 1238.000, 1246.704), stdev = 5.909
[info]   CI (99.9%): [1215.247, 1260.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm":
[info]   512.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (512.000, 512.000, 512.000), stdev = 0.001
[info]   CI (99.9%): [512.000, 512.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.104), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space.norm":
[info]   0.033 ±(99.9%) 0.036 B/op [Average]
[info]   (min, avg, max) = (0.017, 0.033, 0.043), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space":
[info]   1196.730 ±(99.9%) 707.571 MB/sec [Average]
[info]   (min, avg, max) = (989.662, 1196.730, 1340.285), stdev = 183.754
[info]   CI (99.9%): [489.158, 1904.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space.norm":
[info]   494.823 ±(99.9%) 289.194 B/op [Average]
[info]   (min, avg, max) = (409.743, 494.823, 550.432), stdev = 75.103
[info]   CI (99.9%): [205.629, 784.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 5.000), stdev = 0.837
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump
[info] # Run progress: 78.80% complete, ETA 00:09:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3673598.827 ops/s
[info] # Warmup Iteration   2: 3864898.034 ops/s
[info] # Warmup Iteration   3: 4008338.047 ops/s
[info] Iteration   1: 4027372.798 ops/s
[info]                  ·gc.alloc.rate:                   348.020 MB/sec
[info]                  ·gc.alloc.rate.norm:              136.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.004 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.801 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 99.962 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 3950378.518 ops/s
[info]                  ·gc.alloc.rate:                   341.382 MB/sec
[info]                  ·gc.alloc.rate.norm:              136.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.013 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.828 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 101.917 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 4049045.273 ops/s
[info]                  ·gc.alloc.rate:                   349.895 MB/sec
[info]                  ·gc.alloc.rate.norm:              136.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.127 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.215 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      332.432 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 129.212 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 4019680.873 ops/s
[info]                  ·gc.alloc.rate:                   347.319 MB/sec
[info]                  ·gc.alloc.rate.norm:              136.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      332.395 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 130.156 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 4043596.853 ops/s
[info]                  ·gc.alloc.rate:                   349.380 MB/sec
[info]                  ·gc.alloc.rate.norm:              136.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.392 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 128.609 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump":
[info]   4018014.863 ±(99.9%) 152603.432 ops/s [Average]
[info]   (min, avg, max) = (3950378.518, 4018014.863, 4049045.273), stdev = 39630.627
[info]   CI (99.9%): [3865411.431, 4170618.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate":
[info]   347.199 ±(99.9%) 13.136 MB/sec [Average]
[info]   (min, avg, max) = (341.382, 347.199, 349.895), stdev = 3.411
[info]   CI (99.9%): [334.063, 360.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm":
[info]   136.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (136.000, 136.000, 136.000), stdev = 0.001
[info]   CI (99.9%): [136.000, 136.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space":
[info]   0.641 ±(99.9%) 5.352 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.641, 3.127), stdev = 1.390
[info]   CI (99.9%): [≈ 0, 5.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space.norm":
[info]   0.249 ±(99.9%) 2.080 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.249, 1.215), stdev = 0.540
[info]   CI (99.9%): [≈ 0, 2.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space":
[info]   301.370 ±(99.9%) 160.164 MB/sec [Average]
[info]   (min, avg, max) = (255.801, 301.370, 332.432), stdev = 41.594
[info]   CI (99.9%): [141.206, 461.533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space.norm":
[info]   117.971 ±(99.9%) 59.965 B/op [Average]
[info]   (min, avg, max) = (99.962, 117.971, 130.156), stdev = 15.573
[info]   CI (99.9%): [58.006, 177.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson
[info] # Run progress: 79.26% complete, ETA 00:09:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12956.065 ops/s
[info] # Warmup Iteration   2: 178135.662 ops/s
[info] # Warmup Iteration   3: 190531.530 ops/s
[info] Iteration   1: 193964.395 ops/s
[info]                  ·gc.alloc.rate:                   1238.098 MB/sec
[info]                  ·gc.alloc.rate.norm:              10048.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.507 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1306.363 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10602.023 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 193856.170 ops/s
[info]                  ·gc.alloc.rate:                   1237.759 MB/sec
[info]                  ·gc.alloc.rate.norm:              10048.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.845 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1317.760 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10697.437 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 191415.865 ops/s
[info]                  ·gc.alloc.rate:                   1222.502 MB/sec
[info]                  ·gc.alloc.rate.norm:              10048.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.342 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      995.216 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8179.891 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 190891.022 ops/s
[info]                  ·gc.alloc.rate:                   1218.628 MB/sec
[info]                  ·gc.alloc.rate.norm:              10048.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.172 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1334.200 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11000.931 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 190412.933 ops/s
[info]                  ·gc.alloc.rate:                   1215.784 MB/sec
[info]                  ·gc.alloc.rate.norm:              10048.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.860 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.089 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11083.603 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson":
[info]   192108.077 ±(99.9%) 6482.259 ops/s [Average]
[info]   (min, avg, max) = (190412.933, 192108.077, 193964.395), stdev = 1683.422
[info]   CI (99.9%): [185625.818, 198590.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1226.554 ±(99.9%) 41.026 MB/sec [Average]
[info]   (min, avg, max) = (1215.784, 1226.554, 1238.098), stdev = 10.654
[info]   CI (99.9%): [1185.528, 1267.580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   10048.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10048.002, 10048.002, 10048.002), stdev = 0.001
[info]   CI (99.9%): [10048.002, 10048.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.104), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.545 ±(99.9%) 1.173 B/op [Average]
[info]   (min, avg, max) = (0.172, 0.545, 0.860), stdev = 0.305
[info]   CI (99.9%): [≈ 0, 1.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1258.926 ±(99.9%) 570.076 MB/sec [Average]
[info]   (min, avg, max) = (995.216, 1258.926, 1341.089), stdev = 148.047
[info]   CI (99.9%): [688.850, 1829.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   10312.777 ±(99.9%) 4656.159 B/op [Average]
[info]   (min, avg, max) = (8179.891, 10312.777, 11083.603), stdev = 1209.190
[info]   CI (99.9%): [5656.618, 14968.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce
[info] # Run progress: 79.72% complete, ETA 00:09:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 490253.941 ops/s
[info] # Warmup Iteration   2: 708554.568 ops/s
[info] # Warmup Iteration   3: 719898.129 ops/s
[info] Iteration   1: 723840.341 ops/s
[info]                  ·gc.alloc.rate:                   2766.299 MB/sec
[info]                  ·gc.alloc.rate.norm:              6016.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.181 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3000.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6524.513 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 721124.204 ops/s
[info]                  ·gc.alloc.rate:                   2755.812 MB/sec
[info]                  ·gc.alloc.rate.norm:              6016.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.182 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2693.316 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5879.572 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 716275.636 ops/s
[info]                  ·gc.alloc.rate:                   2737.485 MB/sec
[info]                  ·gc.alloc.rate.norm:              6016.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.183 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2708.153 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5951.539 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 725515.455 ops/s
[info]                  ·gc.alloc.rate:                   2772.781 MB/sec
[info]                  ·gc.alloc.rate.norm:              6016.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.045 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2715.478 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5891.672 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 707125.094 ops/s
[info]                  ·gc.alloc.rate:                   2703.741 MB/sec
[info]                  ·gc.alloc.rate.norm:              6016.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.232 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2720.777 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6053.908 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce":
[info]   718776.146 ±(99.9%) 28464.653 ops/s [Average]
[info]   (min, avg, max) = (707125.094, 718776.146, 725515.455), stdev = 7392.180
[info]   CI (99.9%): [690311.494, 747240.799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.alloc.rate":
[info]   2747.223 ±(99.9%) 106.788 MB/sec [Average]
[info]   (min, avg, max) = (2703.741, 2747.223, 2772.781), stdev = 27.733
[info]   CI (99.9%): [2640.435, 2854.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   6016.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6016.001, 6016.001, 6016.001), stdev = 0.001
[info]   CI (99.9%): [6016.000, 6016.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.075, 0.104), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.165 ±(99.9%) 0.270 B/op [Average]
[info]   (min, avg, max) = (0.045, 0.165, 0.232), stdev = 0.070
[info]   CI (99.9%): [≈ 0, 0.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2767.570 ±(99.9%) 502.169 MB/sec [Average]
[info]   (min, avg, max) = (2693.316, 2767.570, 3000.125), stdev = 130.412
[info]   CI (99.9%): [2265.401, 3269.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   6060.241 ±(99.9%) 1034.064 B/op [Average]
[info]   (min, avg, max) = (5879.572, 6060.241, 6524.513), stdev = 268.543
[info]   CI (99.9%): [5026.176, 7094.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.count":
[info]   41.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.200, 9.000), stdev = 0.447
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.600, 8.000), stdev = 0.548
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala
[info] # Run progress: 80.18% complete, ETA 00:09:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3265259.288 ops/s
[info] # Warmup Iteration   2: 3759676.005 ops/s
[info] # Warmup Iteration   3: 3813501.961 ops/s
[info] Iteration   1: 3820409.433 ops/s
[info]                  ·gc.alloc.rate:                   2466.027 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.034 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2667.654 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1099.070 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 3781472.814 ops/s
[info]                  ·gc.alloc.rate:                   2440.576 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.043 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2354.625 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 980.219 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 3860155.773 ops/s
[info]                  ·gc.alloc.rate:                   2491.441 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2366.009 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 964.849 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 3802940.816 ops/s
[info]                  ·gc.alloc.rate:                   2454.607 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2714.081 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1123.400 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 3853261.261 ops/s
[info]                  ·gc.alloc.rate:                   2487.185 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.043 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2378.207 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 971.483 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala":
[info]   3823648.020 ±(99.9%) 128114.008 ops/s [Average]
[info]   (min, avg, max) = (3781472.814, 3823648.020, 3860155.773), stdev = 33270.801
[info]   CI (99.9%): [3695534.011, 3951762.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2467.967 ±(99.9%) 82.875 MB/sec [Average]
[info]   (min, avg, max) = (2440.576, 2467.967, 2491.441), stdev = 21.522
[info]   CI (99.9%): [2385.092, 2550.843] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1016.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1016.000, 1016.000, 1016.000), stdev = 0.001
[info]   CI (99.9%): [1016.000, 1016.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.096 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.125), stdev = 0.024
[info]   CI (99.9%): [0.004, 0.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.039 ±(99.9%) 0.038 B/op [Average]
[info]   (min, avg, max) = (0.025, 0.039, 0.052), stdev = 0.010
[info]   CI (99.9%): [0.001, 0.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   2496.115 ±(99.9%) 688.242 MB/sec [Average]
[info]   (min, avg, max) = (2354.625, 2496.115, 2714.081), stdev = 178.734
[info]   CI (99.9%): [1807.873, 3184.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1027.804 ±(99.9%) 295.881 B/op [Average]
[info]   (min, avg, max) = (964.849, 1027.804, 1123.400), stdev = 76.839
[info]   CI (99.9%): [731.923, 1323.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.count":
[info]   37.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.400, 8.000), stdev = 0.548
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 8.000), stdev = 0.894
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson
[info] # Run progress: 80.65% complete, ETA 00:08:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 64469.473 ops/s
[info] # Warmup Iteration   2: 249310.738 ops/s
[info] # Warmup Iteration   3: 261544.907 ops/s
[info] Iteration   1: 254044.277 ops/s
[info]                  ·gc.alloc.rate:                   1813.802 MB/sec
[info]                  ·gc.alloc.rate.norm:              11240.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.774 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1983.893 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12294.045 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 260252.560 ops/s
[info]                  ·gc.alloc.rate:                   1858.899 MB/sec
[info]                  ·gc.alloc.rate.norm:              11240.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.629 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1669.583 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10095.283 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 258484.417 ops/s
[info]                  ·gc.alloc.rate:                   1845.914 MB/sec
[info]                  ·gc.alloc.rate.norm:              11240.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.761 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2016.361 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12277.876 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 261619.230 ops/s
[info]                  ·gc.alloc.rate:                   1868.452 MB/sec
[info]                  ·gc.alloc.rate.norm:              11240.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.376 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1688.766 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10159.067 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 261677.629 ops/s
[info]                  ·gc.alloc.rate:                   1868.822 MB/sec
[info]                  ·gc.alloc.rate.norm:              11240.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.626 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032.451 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12224.145 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson":
[info]   259215.623 ±(99.9%) 12205.923 ops/s [Average]
[info]   (min, avg, max) = (254044.277, 259215.623, 261677.629), stdev = 3169.839
[info]   CI (99.9%): [247009.700, 271421.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1851.178 ±(99.9%) 88.104 MB/sec [Average]
[info]   (min, avg, max) = (1813.802, 1851.178, 1868.822), stdev = 22.880
[info]   CI (99.9%): [1763.074, 1939.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   11240.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11240.002, 11240.002, 11240.002), stdev = 0.001
[info]   CI (99.9%): [11240.001, 11240.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.104 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.104, 0.125), stdev = 0.025
[info]   CI (99.9%): [0.006, 0.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.633 ±(99.9%) 0.616 B/op [Average]
[info]   (min, avg, max) = (0.376, 0.633, 0.774), stdev = 0.160
[info]   CI (99.9%): [0.017, 1.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1878.211 ±(99.9%) 703.361 MB/sec [Average]
[info]   (min, avg, max) = (1669.583, 1878.211, 2032.451), stdev = 182.661
[info]   CI (99.9%): [1174.850, 2581.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   11410.083 ±(99.9%) 4511.539 B/op [Average]
[info]   (min, avg, max) = (10095.283, 11410.083, 12294.045), stdev = 1171.632
[info]   CI (99.9%): [6898.544, 15921.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 8.000), stdev = 0.837
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce
[info] # Run progress: 81.11% complete, ETA 00:08:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 550942.747 ops/s
[info] # Warmup Iteration   2: 794235.674 ops/s
[info] # Warmup Iteration   3: 802233.619 ops/s
[info] Iteration   1: 790318.489 ops/s
[info]                  ·gc.alloc.rate:                   1727.866 MB/sec
[info]                  ·gc.alloc.rate.norm:              3440.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.207 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1969.736 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3921.537 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 794993.240 ops/s
[info]                  ·gc.alloc.rate:                   1737.248 MB/sec
[info]                  ·gc.alloc.rate.norm:              3440.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.288 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1656.043 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3279.203 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 804068.625 ops/s
[info]                  ·gc.alloc.rate:                   1757.254 MB/sec
[info]                  ·gc.alloc.rate.norm:              3440.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.204 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1668.783 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3266.809 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 793660.040 ops/s
[info]                  ·gc.alloc.rate:                   1734.489 MB/sec
[info]                  ·gc.alloc.rate.norm:              3440.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.124 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1678.745 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3329.444 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 801975.752 ops/s
[info]                  ·gc.alloc.rate:                   1752.908 MB/sec
[info]                  ·gc.alloc.rate.norm:              3440.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.204 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2024.439 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3972.869 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce":
[info]   797003.229 ±(99.9%) 22332.782 ops/s [Average]
[info]   (min, avg, max) = (790318.489, 797003.229, 804068.625), stdev = 5799.753
[info]   CI (99.9%): [774670.447, 819336.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1741.953 ±(99.9%) 48.341 MB/sec [Average]
[info]   (min, avg, max) = (1727.866, 1741.953, 1757.254), stdev = 12.554
[info]   CI (99.9%): [1693.612, 1790.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   3440.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3440.001, 3440.001, 3440.001), stdev = 0.001
[info]   CI (99.9%): [3440.000, 3440.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.104 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.104, 0.146), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.206 ±(99.9%) 0.224 B/op [Average]
[info]   (min, avg, max) = (0.124, 0.206, 0.288), stdev = 0.058
[info]   CI (99.9%): [≈ 0, 0.430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1799.549 ±(99.9%) 699.045 MB/sec [Average]
[info]   (min, avg, max) = (1656.043, 1799.549, 2024.439), stdev = 181.540
[info]   CI (99.9%): [1100.504, 2498.594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3553.972 ±(99.9%) 1386.970 B/op [Average]
[info]   (min, avg, max) = (3266.809, 3553.972, 3972.869), stdev = 360.192
[info]   CI (99.9%): [2167.002, 4940.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 0.837
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala
[info] # Run progress: 81.57% complete, ETA 00:08:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_e598a460/target/5e31e36e/jackson-module-afterburner-2.9.4.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 701193.376 ops/s
[info] # Warmup Iteration   2: 1679784.589 ops/s
[info] # Warmup Iteration   3: 1662336.853 ops/s
[info] Iteration   1: 1690778.097 ops/s
[info]                  ·gc.alloc.rate:                   919.385 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.058 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      975.310 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 908.070 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1668644.442 ops/s
[info]                  ·gc.alloc.rate:                   907.730 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.137 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      981.072 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 925.163 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1675511.890 ops/s
[info]                  ·gc.alloc.rate:                   911.158 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.078 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      987.075 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 927.322 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1680254.952 ops/s
[info]                  ·gc.alloc.rate:                   913.758 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.058 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      991.112 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 928.465 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1694466.495 ops/s
[info]                  ·gc.alloc.rate:                   921.493 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.116 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      664.071 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 616.874 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala":
[info]   1681931.175 ±(99.9%) 41111.664 ops/s [Average]
[info]   (min, avg, max) = (1668644.442, 1681931.175, 1694466.495), stdev = 10676.569
[info]   CI (99.9%): [1640819.511, 1723042.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   914.705 ±(99.9%) 21.961 MB/sec [Average]
[info]   (min, avg, max) = (907.730, 914.705, 921.493), stdev = 5.703
[info]   CI (99.9%): [892.743, 936.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   856.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (856.000, 856.000, 856.000), stdev = 0.001
[info]   CI (99.9%): [856.000, 856.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.096 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.146), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.090 ±(99.9%) 0.137 B/op [Average]
[info]   (min, avg, max) = (0.058, 0.090, 0.137), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   919.728 ±(99.9%) 550.804 MB/sec [Average]
[info]   (min, avg, max) = (664.071, 919.728, 991.112), stdev = 143.042
[info]   CI (99.9%): [368.924, 1470.533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   861.179 ±(99.9%) 526.848 B/op [Average]
[info]   (min, avg, max) = (616.874, 861.179, 928.465), stdev = 136.821
[info]   CI (99.9%): [334.330, 1388.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala
[info] # Run progress: 82.03% complete, ETA 00:08:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4130072.161 ops/s
[info] # Warmup Iteration   2: 4668257.585 ops/s
[info] # Warmup Iteration   3: 4625943.094 ops/s
[info] Iteration   1: 4684252.788 ops/s
[info]                  ·gc.alloc.rate:                   357.177 MB/sec
[info]                  ·gc.alloc.rate.norm:              120.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.809 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 85.943 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 4684988.066 ops/s
[info]                  ·gc.alloc.rate:                   357.138 MB/sec
[info]                  ·gc.alloc.rate.norm:              120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.017 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.748 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 85.932 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 4634366.328 ops/s
[info]                  ·gc.alloc.rate:                   353.306 MB/sec
[info]                  ·gc.alloc.rate.norm:              120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.713 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.261 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.367 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 111.530 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 4635233.170 ops/s
[info]                  ·gc.alloc.rate:                   353.449 MB/sec
[info]                  ·gc.alloc.rate.norm:              120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.439 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 111.509 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 4632990.781 ops/s
[info]                  ·gc.alloc.rate:                   353.210 MB/sec
[info]                  ·gc.alloc.rate.norm:              120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.772 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 221.774 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala":
[info]   4654366.227 ±(99.9%) 106397.045 ops/s [Average]
[info]   (min, avg, max) = (4632990.781, 4654366.227, 4684988.066), stdev = 27630.975
[info]   CI (99.9%): [4547969.182, 4760763.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   354.856 ±(99.9%) 8.097 MB/sec [Average]
[info]   (min, avg, max) = (353.210, 354.856, 357.177), stdev = 2.103
[info]   CI (99.9%): [346.759, 362.953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   120.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (120.000, 120.000, 120.000), stdev = 0.001
[info]   CI (99.9%): [120.000, 120.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.763 ±(99.9%) 6.352 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.763, 3.713), stdev = 1.650
[info]   CI (99.9%): [≈ 0, 7.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.259 ±(99.9%) 2.158 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.259, 1.261), stdev = 0.560
[info]   CI (99.9%): [≈ 0, 2.417] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   364.227 ±(99.9%) 636.660 MB/sec [Average]
[info]   (min, avg, max) = (255.748, 364.227, 652.772), stdev = 165.339
[info]   CI (99.9%): [≈ 0, 1000.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   123.338 ±(99.9%) 217.540 B/op [Average]
[info]   (min, avg, max) = (85.932, 123.338, 221.774), stdev = 56.494
[info]   CI (99.9%): [≈ 0, 340.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 1.000
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson
[info] # Run progress: 82.49% complete, ETA 00:08:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 202809.462 ops/s
[info] # Warmup Iteration   2: 557900.623 ops/s
[info] # Warmup Iteration   3: 564383.447 ops/s
[info] Iteration   1: 566860.955 ops/s
[info]                  ·gc.alloc.rate:                   1921.466 MB/sec
[info]                  ·gc.alloc.rate.norm:              5336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.231 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1658.384 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4605.410 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 560544.965 ops/s
[info]                  ·gc.alloc.rate:                   1900.195 MB/sec
[info]                  ·gc.alloc.rate.norm:              5336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.526 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2006.124 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5633.463 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 562964.015 ops/s
[info]                  ·gc.alloc.rate:                   1908.581 MB/sec
[info]                  ·gc.alloc.rate.norm:              5336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.175 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2019.982 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5647.458 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 568178.957 ops/s
[info]                  ·gc.alloc.rate:                   1926.146 MB/sec
[info]                  ·gc.alloc.rate.norm:              5336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.058 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1689.493 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4680.401 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 565797.024 ops/s
[info]                  ·gc.alloc.rate:                   1918.564 MB/sec
[info]                  ·gc.alloc.rate.norm:              5336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.232 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2034.005 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5657.071 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson":
[info]   564869.183 ±(99.9%) 11885.832 ops/s [Average]
[info]   (min, avg, max) = (560544.965, 564869.183, 568178.957), stdev = 3086.713
[info]   CI (99.9%): [552983.352, 576755.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1914.990 ±(99.9%) 40.347 MB/sec [Average]
[info]   (min, avg, max) = (1900.195, 1914.990, 1926.146), stdev = 10.478
[info]   CI (99.9%): [1874.644, 1955.337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5336.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5336.001, 5336.001, 5336.001), stdev = 0.001
[info]   CI (99.9%): [5336.001, 5336.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.236 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.087, 0.187), stdev = 0.061
[info]   CI (99.9%): [≈ 0, 0.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.244 ±(99.9%) 0.665 B/op [Average]
[info]   (min, avg, max) = (0.058, 0.244, 0.526), stdev = 0.173
[info]   CI (99.9%): [≈ 0, 0.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1881.598 ±(99.9%) 732.164 MB/sec [Average]
[info]   (min, avg, max) = (1658.384, 1881.598, 2034.005), stdev = 190.141
[info]   CI (99.9%): [1149.434, 2613.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   5244.761 ±(99.9%) 2118.314 B/op [Average]
[info]   (min, avg, max) = (4605.410, 5244.761, 5657.071), stdev = 550.119
[info]   CI (99.9%): [3126.447, 7363.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.400, 7.000), stdev = 0.894
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala
[info] # Run progress: 82.95% complete, ETA 00:07:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2998994.063 ops/s
[info] # Warmup Iteration   2: 3399238.943 ops/s
[info] # Warmup Iteration   3: 3524773.986 ops/s
[info] Iteration   1: 3537673.506 ops/s
[info]                  ·gc.alloc.rate:                   1672.096 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.037 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1648.124 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 733.334 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 3517787.025 ops/s
[info]                  ·gc.alloc.rate:                   1662.600 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.056 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1660.655 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 743.130 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 3486459.140 ops/s
[info]                  ·gc.alloc.rate:                   1647.844 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.056 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1670.787 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 754.359 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 3541933.846 ops/s
[info]                  ·gc.alloc.rate:                   1674.463 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.056 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1681.537 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 747.143 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 3524703.666 ops/s
[info]                  ·gc.alloc.rate:                   1666.055 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.056 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1687.206 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 753.445 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala":
[info]   3521711.437 ±(99.9%) 84600.592 ops/s [Average]
[info]   (min, avg, max) = (3486459.140, 3521711.437, 3541933.846), stdev = 21970.505
[info]   CI (99.9%): [3437110.845, 3606312.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1664.612 ±(99.9%) 40.401 MB/sec [Average]
[info]   (min, avg, max) = (1647.844, 1664.612, 1674.463), stdev = 10.492
[info]   CI (99.9%): [1624.211, 1705.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   744.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (744.000, 744.000, 744.000), stdev = 0.001
[info]   CI (99.9%): [744.000, 744.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.117 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.117, 0.125), stdev = 0.019
[info]   CI (99.9%): [0.045, 0.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.052 ±(99.9%) 0.032 B/op [Average]
[info]   (min, avg, max) = (0.037, 0.052, 0.056), stdev = 0.008
[info]   CI (99.9%): [0.020, 0.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1669.662 ±(99.9%) 60.733 MB/sec [Average]
[info]   (min, avg, max) = (1648.124, 1669.662, 1687.206), stdev = 15.772
[info]   CI (99.9%): [1608.928, 1730.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   746.282 ±(99.9%) 33.062 B/op [Average]
[info]   (min, avg, max) = (733.334, 746.282, 754.359), stdev = 8.586
[info]   CI (99.9%): [713.220, 779.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson
[info] # Run progress: 83.41% complete, ETA 00:07:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 109819.286 ops/s
[info] # Warmup Iteration   2: 323197.329 ops/s
[info] # Warmup Iteration   3: 325272.281 ops/s
[info] Iteration   1: 326235.471 ops/s
[info]                  ·gc.alloc.rate:                   1790.418 MB/sec
[info]                  ·gc.alloc.rate.norm:              8640.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.402 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1654.550 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7984.342 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 325442.310 ops/s
[info]                  ·gc.alloc.rate:                   1786.366 MB/sec
[info]                  ·gc.alloc.rate.norm:              8640.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.403 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1669.168 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8073.156 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 320725.905 ops/s
[info]                  ·gc.alloc.rate:                   1761.292 MB/sec
[info]                  ·gc.alloc.rate.norm:              8640.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.409 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2017.046 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9894.601 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 325428.184 ops/s
[info]                  ·gc.alloc.rate:                   1786.308 MB/sec
[info]                  ·gc.alloc.rate.norm:              8640.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.302 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1688.497 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8166.906 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 325037.689 ops/s
[info]                  ·gc.alloc.rate:                   1784.173 MB/sec
[info]                  ·gc.alloc.rate.norm:              8640.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.504 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1693.148 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8199.207 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson":
[info]   324573.912 ±(99.9%) 8451.028 ops/s [Average]
[info]   (min, avg, max) = (320725.905, 324573.912, 326235.471), stdev = 2194.705
[info]   CI (99.9%): [316122.884, 333024.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1781.712 ±(99.9%) 44.807 MB/sec [Average]
[info]   (min, avg, max) = (1761.292, 1781.712, 1790.418), stdev = 11.636
[info]   CI (99.9%): [1736.904, 1826.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   8640.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8640.001, 8640.001, 8640.001), stdev = 0.001
[info]   CI (99.9%): [8640.001, 8640.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.083, 0.104), stdev = 0.015
[info]   CI (99.9%): [0.027, 0.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.404 ±(99.9%) 0.275 B/op [Average]
[info]   (min, avg, max) = (0.302, 0.404, 0.504), stdev = 0.071
[info]   CI (99.9%): [0.129, 0.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1744.482 ±(99.9%) 589.730 MB/sec [Average]
[info]   (min, avg, max) = (1654.550, 1744.482, 2017.046), stdev = 153.151
[info]   CI (99.9%): [1154.752, 2334.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   8463.642 ±(99.9%) 3097.214 B/op [Average]
[info]   (min, avg, max) = (7984.342, 8463.642, 9894.601), stdev = 804.337
[info]   CI (99.9%): [5366.429, 11560.856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 0.707
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce
[info] # Run progress: 83.87% complete, ETA 00:07:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 256556.537 ops/s
[info] # Warmup Iteration   2: 453491.055 ops/s
[info] # Warmup Iteration   3: 460510.238 ops/s
[info] Iteration   1: 454336.027 ops/s
[info]                  ·gc.alloc.rate:                   1161.552 MB/sec
[info]                  ·gc.alloc.rate.norm:              4024.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.144 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1303.517 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4515.815 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 462977.086 ops/s
[info]                  ·gc.alloc.rate:                   1183.777 MB/sec
[info]                  ·gc.alloc.rate.norm:              4024.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.283 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      981.291 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3335.693 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 462148.165 ops/s
[info]                  ·gc.alloc.rate:                   1181.380 MB/sec
[info]                  ·gc.alloc.rate.norm:              4024.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.284 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1315.077 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4479.397 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 459979.570 ops/s
[info]                  ·gc.alloc.rate:                   1175.947 MB/sec
[info]                  ·gc.alloc.rate.norm:              4024.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.285 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1324.836 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4533.488 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 462550.787 ops/s
[info]                  ·gc.alloc.rate:                   1182.426 MB/sec
[info]                  ·gc.alloc.rate.norm:              4024.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.283 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      998.702 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3398.757 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce":
[info]   460398.327 ±(99.9%) 13786.145 ops/s [Average]
[info]   (min, avg, max) = (454336.027, 460398.327, 462977.086), stdev = 3580.218
[info]   CI (99.9%): [446612.182, 474184.472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1177.016 ±(99.9%) 35.202 MB/sec [Average]
[info]   (min, avg, max) = (1161.552, 1177.016, 1183.777), stdev = 9.142
[info]   CI (99.9%): [1141.814, 1212.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   4024.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4024.001, 4024.001, 4024.001), stdev = 0.001
[info]   CI (99.9%): [4024.001, 4024.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.083), stdev = 0.019
[info]   CI (99.9%): [0.003, 0.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.256 ±(99.9%) 0.240 B/op [Average]
[info]   (min, avg, max) = (0.144, 0.256, 0.285), stdev = 0.062
[info]   CI (99.9%): [0.016, 0.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1184.685 ±(99.9%) 685.382 MB/sec [Average]
[info]   (min, avg, max) = (981.291, 1184.685, 1324.836), stdev = 177.992
[info]   CI (99.9%): [499.302, 1870.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4052.630 ±(99.9%) 2411.995 B/op [Average]
[info]   (min, avg, max) = (3335.693, 4052.630, 4533.488), stdev = 626.387
[info]   CI (99.9%): [1640.635, 6464.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala
[info] # Run progress: 84.33% complete, ETA 00:07:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2340881.185 ops/s
[info] # Warmup Iteration   2: 2794489.258 ops/s
[info] # Warmup Iteration   3: 2806123.215 ops/s
[info] Iteration   1: 2807179.206 ops/s
[info]                  ·gc.alloc.rate:                   570.758 MB/sec
[info]                  ·gc.alloc.rate.norm:              320.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.713 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.082 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.827 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 368.255 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2810470.612 ops/s
[info]                  ·gc.alloc.rate:                   571.293 MB/sec
[info]                  ·gc.alloc.rate.norm:              320.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      326.341 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 182.794 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 2810966.409 ops/s
[info]                  ·gc.alloc.rate:                   571.432 MB/sec
[info]                  ·gc.alloc.rate.norm:              320.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.070 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.722 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 365.522 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 2841692.765 ops/s
[info]                  ·gc.alloc.rate:                   577.715 MB/sec
[info]                  ·gc.alloc.rate.norm:              320.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.752 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 361.563 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 2808630.978 ops/s
[info]                  ·gc.alloc.rate:                   571.027 MB/sec
[info]                  ·gc.alloc.rate.norm:              320.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.035 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.112 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 366.000 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala":
[info]   2815787.994 ±(99.9%) 56063.362 ops/s [Average]
[info]   (min, avg, max) = (2807179.206, 2815787.994, 2841692.765), stdev = 14559.477
[info]   CI (99.9%): [2759724.632, 2871851.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   572.445 ±(99.9%) 11.388 MB/sec [Average]
[info]   (min, avg, max) = (570.758, 572.445, 577.715), stdev = 2.957
[info]   CI (99.9%): [561.057, 583.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   320.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (320.000, 320.000, 320.000), stdev = 0.001
[info]   CI (99.9%): [320.000, 320.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.788 ±(99.9%) 6.298 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.788, 3.713), stdev = 1.636
[info]   CI (99.9%): [≈ 0, 7.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.442 ±(99.9%) 3.531 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.442, 2.082), stdev = 0.917
[info]   CI (99.9%): [≈ 0, 3.973] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   588.351 ±(99.9%) 564.036 MB/sec [Average]
[info]   (min, avg, max) = (326.341, 588.351, 656.827), stdev = 146.478
[info]   CI (99.9%): [24.315, 1152.387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   328.827 ±(99.9%) 314.484 B/op [Average]
[info]   (min, avg, max) = (182.794, 328.827, 368.255), stdev = 81.670
[info]   CI (99.9%): [14.343, 643.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson
[info] # Run progress: 84.79% complete, ETA 00:07:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 81179.719 ops/s
[info] # Warmup Iteration   2: 339402.328 ops/s
[info] # Warmup Iteration   3: 336493.935 ops/s
[info] Iteration   1: 343267.419 ops/s
[info]                  ·gc.alloc.rate:                   1316.951 MB/sec
[info]                  ·gc.alloc.rate.norm:              6040.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.477 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1311.931 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6016.978 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 340269.161 ops/s
[info]                  ·gc.alloc.rate:                   1305.933 MB/sec
[info]                  ·gc.alloc.rate.norm:              6040.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.289 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1323.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6119.320 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 344313.406 ops/s
[info]                  ·gc.alloc.rate:                   1321.193 MB/sec
[info]                  ·gc.alloc.rate.norm:              6040.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.190 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1331.475 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6087.007 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 344079.930 ops/s
[info]                  ·gc.alloc.rate:                   1320.567 MB/sec
[info]                  ·gc.alloc.rate.norm:              6040.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.286 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.414 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6126.205 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 344508.903 ops/s
[info]                  ·gc.alloc.rate:                   1321.886 MB/sec
[info]                  ·gc.alloc.rate.norm:              6040.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.476 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.402 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6147.453 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson":
[info]   343287.764 ±(99.9%) 6747.705 ops/s [Average]
[info]   (min, avg, max) = (340269.161, 343287.764, 344508.903), stdev = 1752.358
[info]   CI (99.9%): [336540.059, 350035.469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1317.306 ±(99.9%) 25.555 MB/sec [Average]
[info]   (min, avg, max) = (1305.933, 1317.306, 1321.886), stdev = 6.637
[info]   CI (99.9%): [1291.751, 1342.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   6040.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6040.001, 6040.001, 6040.001), stdev = 0.001
[info]   CI (99.9%): [6040.001, 6040.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.107 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.104), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.344 ±(99.9%) 0.491 B/op [Average]
[info]   (min, avg, max) = (0.190, 0.344, 0.477), stdev = 0.128
[info]   CI (99.9%): [≈ 0, 0.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1330.261 ±(99.9%) 51.012 MB/sec [Average]
[info]   (min, avg, max) = (1311.931, 1330.261, 1345.402), stdev = 13.248
[info]   CI (99.9%): [1279.249, 1381.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   6099.393 ±(99.9%) 196.075 B/op [Average]
[info]   (min, avg, max) = (6016.978, 6099.393, 6147.453), stdev = 50.920
[info]   CI (99.9%): [5903.317, 6295.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce
[info] # Run progress: 85.25% complete, ETA 00:06:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 317392.026 ops/s
[info] # Warmup Iteration   2: 674501.808 ops/s
[info] # Warmup Iteration   3: 690793.535 ops/s
[info] Iteration   1: 696342.743 ops/s
[info]                  ·gc.alloc.rate:                   2144.508 MB/sec
[info]                  ·gc.alloc.rate.norm:              4848.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.329 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1978.043 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4471.681 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 691749.407 ops/s
[info]                  ·gc.alloc.rate:                   2130.448 MB/sec
[info]                  ·gc.alloc.rate.norm:              4848.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.332 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2331.489 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5305.483 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 677595.713 ops/s
[info]                  ·gc.alloc.rate:                   2087.194 MB/sec
[info]                  ·gc.alloc.rate.norm:              4848.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.193 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2014.488 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4679.126 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 694119.041 ops/s
[info]                  ·gc.alloc.rate:                   2137.848 MB/sec
[info]                  ·gc.alloc.rate.norm:              4848.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.189 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2025.544 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4593.327 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 697049.240 ops/s
[info]                  ·gc.alloc.rate:                   2146.911 MB/sec
[info]                  ·gc.alloc.rate.norm:              4848.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.235 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2371.289 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5354.674 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce":
[info]   691371.229 ±(99.9%) 30709.585 ops/s [Average]
[info]   (min, avg, max) = (677595.713, 691371.229, 697049.240), stdev = 7975.182
[info]   CI (99.9%): [660661.644, 722080.814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate":
[info]   2129.382 ±(99.9%) 94.100 MB/sec [Average]
[info]   (min, avg, max) = (2087.194, 2129.382, 2146.911), stdev = 24.437
[info]   CI (99.9%): [2035.282, 2223.481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4848.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4848.001, 4848.001, 4848.001), stdev = 0.001
[info]   CI (99.9%): [4848.001, 4848.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.112 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.112, 0.146), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.256 ±(99.9%) 0.272 B/op [Average]
[info]   (min, avg, max) = (0.189, 0.256, 0.332), stdev = 0.071
[info]   CI (99.9%): [≈ 0, 0.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2144.171 ±(99.9%) 733.542 MB/sec [Average]
[info]   (min, avg, max) = (1978.043, 2144.171, 2371.289), stdev = 190.499
[info]   CI (99.9%): [1410.628, 2877.713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4880.858 ±(99.9%) 1605.774 B/op [Average]
[info]   (min, avg, max) = (4471.681, 4880.858, 5354.674), stdev = 417.014
[info]   CI (99.9%): [3275.084, 6486.632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.count":
[info]   32.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala
[info] # Run progress: 85.71% complete, ETA 00:06:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 443328.782 ops/s
[info] # Warmup Iteration   2: 1550402.926 ops/s
[info] # Warmup Iteration   3: 1538370.181 ops/s
[info] Iteration   1: 1513932.302 ops/s
[info]                  ·gc.alloc.rate:                   1146.789 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.065 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      981.737 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1020.441 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1526051.080 ops/s
[info]                  ·gc.alloc.rate:                   1155.667 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.172 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1317.526 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1358.948 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 1533407.321 ops/s
[info]                  ·gc.alloc.rate:                   1161.210 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.064 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      994.713 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1021.088 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1535409.345 ops/s
[info]                  ·gc.alloc.rate:                   1162.717 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.085 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1334.765 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1368.381 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 1545049.113 ops/s
[info]                  ·gc.alloc.rate:                   1170.197 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.148 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1005.889 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1024.632 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala":
[info]   1530769.832 ±(99.9%) 44663.666 ops/s [Average]
[info]   (min, avg, max) = (1513932.302, 1530769.832, 1545049.113), stdev = 11599.012
[info]   CI (99.9%): [1486106.167, 1575433.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1159.316 ±(99.9%) 33.557 MB/sec [Average]
[info]   (min, avg, max) = (1146.789, 1159.316, 1170.197), stdev = 8.715
[info]   CI (99.9%): [1125.759, 1192.873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1192.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1192.000, 1192.000, 1192.000), stdev = 0.001
[info]   CI (99.9%): [1192.000, 1192.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.104 ±(99.9%) 0.188 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.104, 0.167), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.107 ±(99.9%) 0.192 B/op [Average]
[info]   (min, avg, max) = (0.064, 0.107, 0.172), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1126.926 ±(99.9%) 701.450 MB/sec [Average]
[info]   (min, avg, max) = (981.737, 1126.926, 1334.765), stdev = 182.164
[info]   CI (99.9%): [425.476, 1828.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1158.698 ±(99.9%) 720.627 B/op [Average]
[info]   (min, avg, max) = (1020.441, 1158.698, 1368.381), stdev = 187.145
[info]   CI (99.9%): [438.071, 1879.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 1.000
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala
[info] # Run progress: 86.18% complete, ETA 00:06:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6326963.889 ops/s
[info] # Warmup Iteration   2: 6818502.551 ops/s
[info] # Warmup Iteration   3: 7045728.583 ops/s
[info] Iteration   1: 7050149.779 ops/s
[info]                  ·gc.alloc.rate:                   214.978 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.019 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.747 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57.103 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 7046853.688 ops/s
[info]                  ·gc.alloc.rate:                   214.863 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.734 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57.131 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 7046812.102 ops/s
[info]                  ·gc.alloc.rate:                   214.878 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.751 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57.130 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 7095584.226 ops/s
[info]                  ·gc.alloc.rate:      216.363 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 7055383.056 ops/s
[info]                  ·gc.alloc.rate:                   215.189 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.005 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.818 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57.063 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala":
[info]   7058956.570 ±(99.9%) 79985.081 ops/s [Average]
[info]   (min, avg, max) = (7046812.102, 7058956.570, 7095584.226), stdev = 20771.872
[info]   CI (99.9%): [6978971.489, 7138941.651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   215.254 ±(99.9%) 2.439 MB/sec [Average]
[info]   (min, avg, max) = (214.863, 215.254, 216.363), stdev = 0.633
[info]   CI (99.9%): [212.815, 217.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.005 ±(99.9%) 0.031 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.019), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.001 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.004), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   204.610 ±(99.9%) 440.438 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.610, 255.818), stdev = 114.380
[info]   CI (99.9%): [≈ 0, 645.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   45.685 ±(99.9%) 98.341 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 45.685, 57.131), stdev = 25.539
[info]   CI (99.9%): [≈ 0, 144.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 3.000), stdev = 1.225
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson
[info] # Run progress: 86.64% complete, ETA 00:06:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 35145.335 ops/s
[info] # Warmup Iteration   2: 239039.416 ops/s
[info] # Warmup Iteration   3: 234532.937 ops/s
[info] Iteration   1: 237376.411 ops/s
[info]                  ·gc.alloc.rate:                   1633.299 MB/sec
[info]                  ·gc.alloc.rate.norm:              10832.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.552 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1317.310 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8736.367 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 240339.693 ops/s
[info]                  ·gc.alloc.rate:                   1654.077 MB/sec
[info]                  ·gc.alloc.rate.norm:              10832.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.818 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1661.018 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10877.453 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 240000.786 ops/s
[info]                  ·gc.alloc.rate:                   1651.617 MB/sec
[info]                  ·gc.alloc.rate.norm:              10832.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.546 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1673.851 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10977.818 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 240002.449 ops/s
[info]                  ·gc.alloc.rate:                   1651.577 MB/sec
[info]                  ·gc.alloc.rate.norm:              10832.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.683 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1682.448 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11034.469 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 239958.906 ops/s
[info]                  ·gc.alloc.rate:                   1651.815 MB/sec
[info]                  ·gc.alloc.rate.norm:              10832.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.546 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1689.696 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11080.415 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson":
[info]   239535.649 ±(99.9%) 4685.380 ops/s [Average]
[info]   (min, avg, max) = (237376.411, 239535.649, 240339.693), stdev = 1216.778
[info]   CI (99.9%): [234850.269, 244221.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1648.477 ±(99.9%) 32.919 MB/sec [Average]
[info]   (min, avg, max) = (1633.299, 1648.477, 1654.077), stdev = 8.549
[info]   CI (99.9%): [1615.559, 1681.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   10832.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10832.002, 10832.002, 10832.002), stdev = 0.001
[info]   CI (99.9%): [10832.001, 10832.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.096 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.096, 0.125), stdev = 0.019
[info]   CI (99.9%): [0.024, 0.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.629 ±(99.9%) 0.465 B/op [Average]
[info]   (min, avg, max) = (0.546, 0.629, 0.818), stdev = 0.121
[info]   CI (99.9%): [0.164, 1.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1604.864 ±(99.9%) 620.347 MB/sec [Average]
[info]   (min, avg, max) = (1317.310, 1604.864, 1689.696), stdev = 161.102
[info]   CI (99.9%): [984.518, 2225.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   10541.304 ±(99.9%) 3896.193 B/op [Average]
[info]   (min, avg, max) = (8736.367, 10541.304, 11080.415), stdev = 1011.829
[info]   CI (99.9%): [6645.111, 14437.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce
[info] # Run progress: 87.10% complete, ETA 00:05:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 452719.894 ops/s
[info] # Warmup Iteration   2: 919293.031 ops/s
[info] # Warmup Iteration   3: 941549.862 ops/s
[info] Iteration   1: 936429.810 ops/s
[info]                  ·gc.alloc.rate:                   1485.391 MB/sec
[info]                  ·gc.alloc.rate.norm:              2496.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.105 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1635.374 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2748.026 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 938983.321 ops/s
[info]                  ·gc.alloc.rate:                   1488.905 MB/sec
[info]                  ·gc.alloc.rate.norm:              2496.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.174 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1315.423 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2205.175 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 941880.660 ops/s
[info]                  ·gc.alloc.rate:                   1493.464 MB/sec
[info]                  ·gc.alloc.rate.norm:              2496.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.104 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1656.700 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2768.813 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 945859.223 ops/s
[info]                  ·gc.alloc.rate:                   1499.895 MB/sec
[info]                  ·gc.alloc.rate.norm:              2496.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.139 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1334.812 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2221.282 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 943050.576 ops/s
[info]                  ·gc.alloc.rate:                   1496.048 MB/sec
[info]                  ·gc.alloc.rate.norm:              2496.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.174 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1678.570 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2800.519 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce":
[info]   941240.718 ±(99.9%) 14050.416 ops/s [Average]
[info]   (min, avg, max) = (936429.810, 941240.718, 945859.223), stdev = 3648.848
[info]   CI (99.9%): [927190.302, 955291.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1492.741 ±(99.9%) 22.068 MB/sec [Average]
[info]   (min, avg, max) = (1485.391, 1492.741, 1499.895), stdev = 5.731
[info]   CI (99.9%): [1470.673, 1514.809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2496.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2496.000, 2496.000, 2496.000), stdev = 0.001
[info]   CI (99.9%): [2496.000, 2496.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.083, 0.104), stdev = 0.021
[info]   CI (99.9%): [0.003, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.139 ±(99.9%) 0.134 B/op [Average]
[info]   (min, avg, max) = (0.104, 0.139, 0.174), stdev = 0.035
[info]   CI (99.9%): [0.006, 0.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1524.176 ±(99.9%) 702.682 MB/sec [Average]
[info]   (min, avg, max) = (1315.423, 1524.176, 1678.570), stdev = 182.484
[info]   CI (99.9%): [821.494, 2226.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2548.763 ±(99.9%) 1181.848 B/op [Average]
[info]   (min, avg, max) = (2205.175, 2548.763, 2800.519), stdev = 306.922
[info]   CI (99.9%): [1366.915, 3730.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 10.000), stdev = 2.510
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala
[info] # Run progress: 87.56% complete, ETA 00:05:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_e598a460/target/5e31e36e/jackson-module-afterburner-2.9.4.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 828755.310 ops/s
[info] # Warmup Iteration   2: 2501961.885 ops/s
[info] # Warmup Iteration   3: 2528472.708 ops/s
[info] Iteration   1: 2497219.219 ops/s
[info]                  ·gc.alloc.rate:                   1028.129 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.079 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      978.546 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 616.749 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2482937.208 ops/s
[info]                  ·gc.alloc.rate:                   1022.606 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.092 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      985.886 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 624.731 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 2469167.429 ops/s
[info]                  ·gc.alloc.rate:                   1016.457 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.080 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      990.694 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 631.576 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 2481056.181 ops/s
[info]                  ·gc.alloc.rate:                   1021.405 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.040 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1329.510 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 843.468 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 2524823.460 ops/s
[info]                  ·gc.alloc.rate:                   1039.509 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1002.903 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 625.181 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala":
[info]   2491040.699 ±(99.9%) 82210.260 ops/s [Average]
[info]   (min, avg, max) = (2469167.429, 2491040.699, 2524823.460), stdev = 21349.743
[info]   CI (99.9%): [2408830.440, 2573250.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1025.621 ±(99.9%) 33.899 MB/sec [Average]
[info]   (min, avg, max) = (1016.457, 1025.621, 1039.509), stdev = 8.804
[info]   CI (99.9%): [991.722, 1059.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   648.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (648.000, 648.000, 648.000), stdev = 0.001
[info]   CI (99.9%): [648.000, 648.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.108 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.108, 0.146), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.068 ±(99.9%) 0.084 B/op [Average]
[info]   (min, avg, max) = (0.040, 0.068, 0.092), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1057.508 ±(99.9%) 586.499 MB/sec [Average]
[info]   (min, avg, max) = (978.546, 1057.508, 1329.510), stdev = 152.312
[info]   CI (99.9%): [471.009, 1644.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   668.341 ±(99.9%) 377.518 B/op [Average]
[info]   (min, avg, max) = (616.749, 668.341, 843.468), stdev = 98.040
[info]   CI (99.9%): [290.823, 1045.859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 5.000), stdev = 0.837
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala
[info] # Run progress: 88.02% complete, ETA 00:05:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4212434.692 ops/s
[info] # Warmup Iteration   2: 6028157.156 ops/s
[info] # Warmup Iteration   3: 6075998.677 ops/s
[info] Iteration   1: 6202290.196 ops/s
[info]                  ·gc.alloc.rate:                   693.467 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.027 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 166.498 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 6171018.217 ops/s
[info]                  ·gc.alloc.rate:                   689.906 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.317 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 166.666 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 6036608.651 ops/s
[info]                  ·gc.alloc.rate:                   674.952 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.071 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 170.294 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 6223528.766 ops/s
[info]                  ·gc.alloc.rate:                   695.890 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.769 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 165.347 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 6232712.749 ops/s
[info]                  ·gc.alloc.rate:                   696.858 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.048 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 165.440 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala":
[info]   6173231.716 ±(99.9%) 307948.873 ops/s [Average]
[info]   (min, avg, max) = (6036608.651, 6173231.716, 6232712.749), stdev = 79973.344
[info]   CI (99.9%): [5865282.843, 6481180.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   690.215 ±(99.9%) 34.440 MB/sec [Average]
[info]   (min, avg, max) = (674.952, 690.215, 696.858), stdev = 8.944
[info]   CI (99.9%): [655.775, 724.654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   176.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (176.000, 176.000, 176.000), stdev = 0.001
[info]   CI (99.9%): [176.000, 176.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.160 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.104), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.011 ±(99.9%) 0.041 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.027), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   654.246 ±(99.9%) 4.828 MB/sec [Average]
[info]   (min, avg, max) = (653.071, 654.246, 656.027), stdev = 1.254
[info]   CI (99.9%): [649.419, 659.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   166.849 ±(99.9%) 7.765 B/op [Average]
[info]   (min, avg, max) = (165.347, 166.849, 170.294), stdev = 2.017
[info]   CI (99.9%): [159.084, 174.615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 88.48% complete, ETA 00:05:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3917663.503 ops/s
[info] # Warmup Iteration   2: 5828205.225 ops/s
[info] # Warmup Iteration   3: 5870188.486 ops/s
[info] Iteration   1: 5775622.838 ops/s
[info]                  ·gc.alloc.rate:                   352.307 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.019 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.624 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 139.413 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 5802465.472 ops/s
[info]                  ·gc.alloc.rate:                   353.978 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.834 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69.383 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 5801845.703 ops/s
[info]                  ·gc.alloc.rate:                   353.893 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.718 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.742 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 89.177 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 5889299.359 ops/s
[info]                  ·gc.alloc.rate:                   359.272 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.783 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 87.853 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 5924781.711 ops/s
[info]                  ·gc.alloc.rate:                   361.478 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.154 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 86.884 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc":
[info]   5838803.016 ±(99.9%) 248211.352 ops/s [Average]
[info]   (min, avg, max) = (5775622.838, 5838803.016, 5924781.711), stdev = 64459.700
[info]   CI (99.9%): [5590591.664, 6087014.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   356.186 ±(99.9%) 15.247 MB/sec [Average]
[info]   (min, avg, max) = (352.307, 356.186, 361.478), stdev = 3.959
[info]   CI (99.9%): [340.939, 371.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   96.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (96.000, 96.000, 96.000), stdev = 0.001
[info]   CI (99.9%): [96.000, 96.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   0.756 ±(99.9%) 6.378 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.756, 3.718), stdev = 1.656
[info]   CI (99.9%): [≈ 0, 7.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   0.205 ±(99.9%) 1.730 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.205, 1.009), stdev = 0.449
[info]   CI (99.9%): [≈ 0, 1.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   350.427 ±(99.9%) 367.393 MB/sec [Average]
[info]   (min, avg, max) = (255.834, 350.427, 511.624), stdev = 95.411
[info]   CI (99.9%): [≈ 0, 717.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   94.542 ±(99.9%) 101.487 B/op [Average]
[info]   (min, avg, max) = (69.383, 94.542, 139.413), stdev = 26.356
[info]   CI (99.9%): [≈ 0, 196.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 5.000), stdev = 1.673
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson
[info] # Run progress: 88.94% complete, ETA 00:05:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 43513.483 ops/s
[info] # Warmup Iteration   2: 344856.210 ops/s
[info] # Warmup Iteration   3: 342519.879 ops/s
[info] Iteration   1: 349054.197 ops/s
[info]                  ·gc.alloc.rate:                   1963.529 MB/sec
[info]                  ·gc.alloc.rate.norm:              8856.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.469 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1984.574 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8950.918 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 344088.612 ops/s
[info]                  ·gc.alloc.rate:                   1936.369 MB/sec
[info]                  ·gc.alloc.rate.norm:              8856.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.571 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2004.680 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9168.420 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 347690.597 ops/s
[info]                  ·gc.alloc.rate:                   1956.154 MB/sec
[info]                  ·gc.alloc.rate.norm:              8856.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.848 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2018.149 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9136.669 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 349345.570 ops/s
[info]                  ·gc.alloc.rate:                   1965.374 MB/sec
[info]                  ·gc.alloc.rate.norm:              8856.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.375 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2026.698 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9132.327 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 348586.355 ops/s
[info]                  ·gc.alloc.rate:                   1961.314 MB/sec
[info]                  ·gc.alloc.rate.norm:              8856.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.658 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033.482 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9181.863 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson":
[info]   347753.066 ±(99.9%) 8248.719 ops/s [Average]
[info]   (min, avg, max) = (344088.612, 347753.066, 349345.570), stdev = 2142.166
[info]   CI (99.9%): [339504.347, 356001.786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1956.548 ±(99.9%) 45.427 MB/sec [Average]
[info]   (min, avg, max) = (1936.369, 1956.548, 1965.374), stdev = 11.797
[info]   CI (99.9%): [1911.121, 2001.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   8856.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8856.001, 8856.001, 8856.001), stdev = 0.001
[info]   CI (99.9%): [8856.001, 8856.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.129 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.129, 0.187), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.584 ±(99.9%) 0.700 B/op [Average]
[info]   (min, avg, max) = (0.375, 0.584, 0.848), stdev = 0.182
[info]   CI (99.9%): [≈ 0, 1.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   2013.517 ±(99.9%) 74.806 MB/sec [Average]
[info]   (min, avg, max) = (1984.574, 2013.517, 2033.482), stdev = 19.427
[info]   CI (99.9%): [1938.711, 2088.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   9114.039 ±(99.9%) 360.259 B/op [Average]
[info]   (min, avg, max) = (8950.918, 9114.039, 9181.863), stdev = 93.558
[info]   CI (99.9%): [8753.780, 9474.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.000, 7.000), stdev = 0.001
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce
[info] # Run progress: 89.40% complete, ETA 00:04:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 509716.026 ops/s
[info] # Warmup Iteration   2: 708638.343 ops/s
[info] # Warmup Iteration   3: 708609.522 ops/s
[info] Iteration   1: 720977.773 ops/s
[info]                  ·gc.alloc.rate:                   1608.455 MB/sec
[info]                  ·gc.alloc.rate.norm:              3512.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.227 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1641.983 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3585.207 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 714941.166 ops/s
[info]                  ·gc.alloc.rate:                   1595.416 MB/sec
[info]                  ·gc.alloc.rate.norm:              3512.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.229 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1654.446 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3641.943 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 721135.971 ops/s
[info]                  ·gc.alloc.rate:                   1608.887 MB/sec
[info]                  ·gc.alloc.rate.norm:              3512.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.182 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1667.417 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3639.763 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 723435.215 ops/s
[info]                  ·gc.alloc.rate:                   1614.810 MB/sec
[info]                  ·gc.alloc.rate.norm:              3512.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.181 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1676.421 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3645.996 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 717216.703 ops/s
[info]                  ·gc.alloc.rate:                   1600.169 MB/sec
[info]                  ·gc.alloc.rate.norm:              3512.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.228 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.402 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2957.235 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce":
[info]   719541.366 ±(99.9%) 13105.488 ops/s [Average]
[info]   (min, avg, max) = (714941.166, 719541.366, 723435.215), stdev = 3403.454
[info]   CI (99.9%): [706435.877, 732646.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   1605.548 ±(99.9%) 29.639 MB/sec [Average]
[info]   (min, avg, max) = (1595.416, 1605.548, 1614.810), stdev = 7.697
[info]   CI (99.9%): [1575.909, 1635.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   3512.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3512.001, 3512.001, 3512.001), stdev = 0.001
[info]   CI (99.9%): [3512.001, 3512.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.096 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.096, 0.104), stdev = 0.011
[info]   CI (99.9%): [0.052, 0.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.209 ±(99.9%) 0.099 B/op [Average]
[info]   (min, avg, max) = (0.181, 0.209, 0.229), stdev = 0.026
[info]   CI (99.9%): [0.111, 0.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1597.534 ±(99.9%) 540.764 MB/sec [Average]
[info]   (min, avg, max) = (1347.402, 1597.534, 1676.421), stdev = 140.435
[info]   CI (99.9%): [1056.770, 2138.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3494.029 ±(99.9%) 1159.472 B/op [Average]
[info]   (min, avg, max) = (2957.235, 3494.029, 3645.996), stdev = 301.111
[info]   CI (99.9%): [2334.557, 4653.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 0.837
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala
[info] # Run progress: 89.86% complete, ETA 00:04:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 498498.107 ops/s
[info] # Warmup Iteration   2: 1146794.444 ops/s
[info] # Warmup Iteration   3: 1142049.846 ops/s
[info] Iteration   1: 1145459.693 ops/s
[info]                  ·gc.alloc.rate:                   1501.821 MB/sec
[info]                  ·gc.alloc.rate.norm:              2064.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.143 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1640.982 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2255.254 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 1159461.841 ops/s
[info]                  ·gc.alloc.rate:                   1520.819 MB/sec
[info]                  ·gc.alloc.rate.norm:              2064.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.141 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1325.886 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1799.444 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 1156913.666 ops/s
[info]                  ·gc.alloc.rate:                   1516.969 MB/sec
[info]                  ·gc.alloc.rate.norm:              2064.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.170 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1669.136 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2271.040 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 1151418.459 ops/s
[info]                  ·gc.alloc.rate:                   1509.826 MB/sec
[info]                  ·gc.alloc.rate.norm:              2064.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.085 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.819 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1835.695 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 1140823.857 ops/s
[info]                  ·gc.alloc.rate:                   1495.966 MB/sec
[info]                  ·gc.alloc.rate.norm:              2064.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.115 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1685.905 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2326.062 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala":
[info]   1150815.503 ±(99.9%) 29878.366 ops/s [Average]
[info]   (min, avg, max) = (1140823.857, 1150815.503, 1159461.841), stdev = 7759.317
[info]   CI (99.9%): [1120937.137, 1180693.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1509.080 ±(99.9%) 39.704 MB/sec [Average]
[info]   (min, avg, max) = (1495.966, 1509.080, 1520.819), stdev = 10.311
[info]   CI (99.9%): [1469.376, 1548.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2064.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2064.000, 2064.000, 2064.000), stdev = 0.001
[info]   CI (99.9%): [2064.000, 2064.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.096 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.125), stdev = 0.024
[info]   CI (99.9%): [0.004, 0.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.131 ±(99.9%) 0.123 B/op [Average]
[info]   (min, avg, max) = (0.085, 0.131, 0.170), stdev = 0.032
[info]   CI (99.9%): [0.008, 0.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1532.946 ±(99.9%) 701.193 MB/sec [Average]
[info]   (min, avg, max) = (1325.886, 1532.946, 1685.905), stdev = 182.098
[info]   CI (99.9%): [831.753, 2234.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2097.499 ±(99.9%) 990.413 B/op [Average]
[info]   (min, avg, max) = (1799.444, 2097.499, 2326.062), stdev = 257.207
[info]   CI (99.9%): [1107.086, 3087.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala
[info] # Run progress: 90.32% complete, ETA 00:04:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 688444.061 ops/s
[info] # Warmup Iteration   2: 754945.809 ops/s
[info] # Warmup Iteration   3: 761147.679 ops/s
[info] Iteration   1: 762510.193 ops/s
[info]                  ·gc.alloc.rate:                   650.994 MB/sec
[info]                  ·gc.alloc.rate.norm:              1344.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.129 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      662.687 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1368.141 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 761196.535 ops/s
[info]                  ·gc.alloc.rate:                   650.176 MB/sec
[info]                  ·gc.alloc.rate.norm:              1344.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.215 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.335 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1365.000 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 763571.702 ops/s
[info]                  ·gc.alloc.rate:                   652.225 MB/sec
[info]                  ·gc.alloc.rate.norm:              1344.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      659.669 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1359.340 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 759711.778 ops/s
[info]                  ·gc.alloc.rate:                   648.877 MB/sec
[info]                  ·gc.alloc.rate.norm:              1344.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.086 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.267 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1367.594 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 758159.558 ops/s
[info]                  ·gc.alloc.rate:                   647.521 MB/sec
[info]                  ·gc.alloc.rate.norm:              1344.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      661.234 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1372.465 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala":
[info]   761029.953 ±(99.9%) 8315.987 ops/s [Average]
[info]   (min, avg, max) = (758159.558, 761029.953, 763571.702), stdev = 2159.635
[info]   CI (99.9%): [752713.966, 769345.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   649.958 ±(99.9%) 7.040 MB/sec [Average]
[info]   (min, avg, max) = (647.521, 649.958, 652.225), stdev = 1.828
[info]   CI (99.9%): [642.919, 656.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1344.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1344.001, 1344.001, 1344.001), stdev = 0.001
[info]   CI (99.9%): [1344.000, 1344.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.170 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.104), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.086 ±(99.9%) 0.351 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.086, 0.215), stdev = 0.091
[info]   CI (99.9%): [≈ 0, 0.438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   660.838 ±(99.9%) 4.524 MB/sec [Average]
[info]   (min, avg, max) = (659.669, 660.838, 662.687), stdev = 1.175
[info]   CI (99.9%): [656.315, 665.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1366.508 ±(99.9%) 18.565 B/op [Average]
[info]   (min, avg, max) = (1359.340, 1366.508, 1372.465), stdev = 4.821
[info]   CI (99.9%): [1347.943, 1385.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce
[info] # Run progress: 90.78% complete, ETA 00:04:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 191593.262 ops/s
[info] # Warmup Iteration   2: 293039.198 ops/s
[info] # Warmup Iteration   3: 297744.719 ops/s
[info] Iteration   1: 295802.795 ops/s
[info]                  ·gc.alloc.rate:                   1007.146 MB/sec
[info]                  ·gc.alloc.rate.norm:              5360.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.554 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      979.005 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5210.236 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 298429.583 ops/s
[info]                  ·gc.alloc.rate:                   1016.189 MB/sec
[info]                  ·gc.alloc.rate.norm:              5360.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.439 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      979.767 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5167.891 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 298838.359 ops/s
[info]                  ·gc.alloc.rate:                   1017.986 MB/sec
[info]                  ·gc.alloc.rate.norm:              5360.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.329 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      983.475 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5178.292 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 297159.973 ops/s
[info]                  ·gc.alloc.rate:                   1011.904 MB/sec
[info]                  ·gc.alloc.rate.norm:              5360.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.441 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1318.849 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6985.873 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 297764.140 ops/s
[info]                  ·gc.alloc.rate:                   1014.316 MB/sec
[info]                  ·gc.alloc.rate.norm:              5360.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.330 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      995.457 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5260.344 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce":
[info]   297598.970 ±(99.9%) 4585.439 ops/s [Average]
[info]   (min, avg, max) = (295802.795, 297598.970, 298838.359), stdev = 1190.824
[info]   CI (99.9%): [293013.531, 302184.409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1013.508 ±(99.9%) 16.216 MB/sec [Average]
[info]   (min, avg, max) = (1007.146, 1013.508, 1017.986), stdev = 4.211
[info]   CI (99.9%): [997.292, 1029.724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5360.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5360.001, 5360.001, 5360.001), stdev = 0.001
[info]   CI (99.9%): [5360.001, 5360.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.079, 0.104), stdev = 0.017
[info]   CI (99.9%): [0.012, 0.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.419 ±(99.9%) 0.361 B/op [Average]
[info]   (min, avg, max) = (0.329, 0.419, 0.554), stdev = 0.094
[info]   CI (99.9%): [0.058, 0.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1051.310 ±(99.9%) 576.455 MB/sec [Average]
[info]   (min, avg, max) = (979.005, 1051.310, 1318.849), stdev = 149.703
[info]   CI (99.9%): [474.856, 1627.765] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5560.527 ±(99.9%) 3071.291 B/op [Average]
[info]   (min, avg, max) = (5167.891, 5560.527, 6985.873), stdev = 797.604
[info]   CI (99.9%): [2489.237, 8631.818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala
[info] # Run progress: 91.24% complete, ETA 00:04:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 172125.428 ops/s
[info] # Warmup Iteration   2: 273236.882 ops/s
[info] # Warmup Iteration   3: 283992.240 ops/s
[info] Iteration   1: 283487.829 ops/s
[info]                  ·gc.alloc.rate:                   299.688 MB/sec
[info]                  ·gc.alloc.rate.norm:              1664.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.767 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1420.133 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 283630.076 ops/s
[info]                  ·gc.alloc.rate:                   299.865 MB/sec
[info]                  ·gc.alloc.rate.norm:              1664.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.789 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1419.417 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 283590.333 ops/s
[info]                  ·gc.alloc.rate:                   299.779 MB/sec
[info]                  ·gc.alloc.rate.norm:              1664.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.116 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      321.022 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1781.916 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 283960.966 ops/s
[info]                  ·gc.alloc.rate:                   300.205 MB/sec
[info]                  ·gc.alloc.rate.norm:              1664.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      321.057 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1779.582 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 283382.558 ops/s
[info]                  ·gc.alloc.rate:                   299.601 MB/sec
[info]                  ·gc.alloc.rate.norm:              1664.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.462 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      323.064 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1794.316 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala":
[info]   283610.352 ±(99.9%) 840.601 ops/s [Average]
[info]   (min, avg, max) = (283382.558, 283610.352, 283960.966), stdev = 218.301
[info]   CI (99.9%): [282769.751, 284450.954] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   299.827 ±(99.9%) 0.898 MB/sec [Average]
[info]   (min, avg, max) = (299.601, 299.827, 300.205), stdev = 0.233
[info]   CI (99.9%): [298.930, 300.725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1664.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1664.001, 1664.001, 1664.002), stdev = 0.001
[info]   CI (99.9%): [1664.001, 1664.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.139 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.083), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.116 ±(99.9%) 0.771 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.116, 0.462), stdev = 0.200
[info]   CI (99.9%): [≈ 0, 0.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   295.340 ±(99.9%) 139.101 MB/sec [Average]
[info]   (min, avg, max) = (255.767, 295.340, 323.064), stdev = 36.124
[info]   CI (99.9%): [156.238, 434.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1639.073 ±(99.9%) 771.164 B/op [Average]
[info]   (min, avg, max) = (1419.417, 1639.073, 1794.316), stdev = 200.269
[info]   CI (99.9%): [867.909, 2410.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 0.837
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala
[info] # Run progress: 91.71% complete, ETA 00:03:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 793233.164 ops/s
[info] # Warmup Iteration   2: 1042007.262 ops/s
[info] # Warmup Iteration   3: 1051949.989 ops/s
[info] Iteration   1: 1069587.693 ops/s
[info]                  ·gc.alloc.rate:                   902.612 MB/sec
[info]                  ·gc.alloc.rate.norm:              1328.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.184 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      980.701 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1442.891 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1075197.217 ops/s
[info]                  ·gc.alloc.rate:                   907.049 MB/sec
[info]                  ·gc.alloc.rate.norm:              1328.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.152 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      979.726 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1434.406 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1070981.048 ops/s
[info]                  ·gc.alloc.rate:                   903.706 MB/sec
[info]                  ·gc.alloc.rate.norm:              1328.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.153 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      982.927 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1444.417 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1068344.847 ops/s
[info]                  ·gc.alloc.rate:                   901.551 MB/sec
[info]                  ·gc.alloc.rate.norm:              1328.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.092 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.217 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 968.093 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1056191.944 ops/s
[info]                  ·gc.alloc.rate:                   891.107 MB/sec
[info]                  ·gc.alloc.rate.norm:              1328.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.155 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      989.122 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1474.070 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala":
[info]   1068060.550 ±(99.9%) 27413.916 ops/s [Average]
[info]   (min, avg, max) = (1056191.944, 1068060.550, 1075197.217), stdev = 7119.307
[info]   CI (99.9%): [1040646.633, 1095474.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   901.205 ±(99.9%) 23.141 MB/sec [Average]
[info]   (min, avg, max) = (891.107, 901.205, 907.049), stdev = 6.010
[info]   CI (99.9%): [878.064, 924.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1328.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1328.000, 1328.000, 1328.000), stdev = 0.001
[info]   CI (99.9%): [1328.000, 1328.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.100 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.100, 0.125), stdev = 0.023
[info]   CI (99.9%): [0.012, 0.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.147 ±(99.9%) 0.129 B/op [Average]
[info]   (min, avg, max) = (0.092, 0.147, 0.184), stdev = 0.034
[info]   CI (99.9%): [0.018, 0.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   917.939 ±(99.9%) 561.398 MB/sec [Average]
[info]   (min, avg, max) = (657.217, 917.939, 989.122), stdev = 145.793
[info]   CI (99.9%): [356.540, 1479.337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1352.775 ±(99.9%) 830.069 B/op [Average]
[info]   (min, avg, max) = (968.093, 1352.775, 1474.070), stdev = 215.566
[info]   CI (99.9%): [522.707, 2182.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 92.17% complete, ETA 00:03:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 667505.638 ops/s
[info] # Warmup Iteration   2: 924511.053 ops/s
[info] # Warmup Iteration   3: 928505.959 ops/s
[info] Iteration   1: 928015.637 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 926703.157 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 928915.777 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 925830.432 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 925973.915 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   927087.784 ±(99.9%) 5156.142 ops/s [Average]
[info]   (min, avg, max) = (925830.432, 927087.784, 928915.777), stdev = 1339.034
[info]   CI (99.9%): [921931.642, 932243.925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson
[info] # Run progress: 92.63% complete, ETA 00:03:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 252880.248 ops/s
[info] # Warmup Iteration   2: 328455.289 ops/s
[info] # Warmup Iteration   3: 328680.382 ops/s
[info] Iteration   1: 333123.902 ops/s
[info]                  ·gc.alloc.rate:                   355.517 MB/sec
[info]                  ·gc.alloc.rate.norm:              1680.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.011 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.745 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1208.526 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 335825.541 ops/s
[info]                  ·gc.alloc.rate:                   358.387 MB/sec
[info]                  ·gc.alloc.rate.norm:              1680.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.003 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.743 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1198.836 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 333419.664 ops/s
[info]                  ·gc.alloc.rate:                   355.845 MB/sec
[info]                  ·gc.alloc.rate.norm:              1680.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.810 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17.989 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.361 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1545.524 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 331545.809 ops/s
[info]                  ·gc.alloc.rate:                   353.922 MB/sec
[info]                  ·gc.alloc.rate.norm:              1680.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.099 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.433 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1554.259 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 333914.906 ops/s
[info]                  ·gc.alloc.rate:                   356.404 MB/sec
[info]                  ·gc.alloc.rate.norm:              1680.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.098 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      325.723 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1535.379 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson":
[info]   333565.964 ±(99.9%) 5942.138 ops/s [Average]
[info]   (min, avg, max) = (331545.809, 333565.964, 335825.541), stdev = 1543.154
[info]   CI (99.9%): [327623.827, 339508.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   356.015 ±(99.9%) 6.220 MB/sec [Average]
[info]   (min, avg, max) = (353.922, 356.015, 358.387), stdev = 1.615
[info]   CI (99.9%): [349.796, 362.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   1680.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1680.001, 1680.001, 1680.001), stdev = 0.001
[info]   CI (99.9%): [1680.001, 1680.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.773 ±(99.9%) 6.538 MB/sec [Average]
[info]   (min, avg, max) = (0.003, 0.773, 3.810), stdev = 1.698
[info]   CI (99.9%): [≈ 0, 7.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3.650 ±(99.9%) 30.865 B/op [Average]
[info]   (min, avg, max) = (0.014, 3.650, 17.989), stdev = 8.016
[info]   CI (99.9%): [≈ 0, 34.515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   298.401 ±(99.9%) 149.969 MB/sec [Average]
[info]   (min, avg, max) = (255.743, 298.401, 327.433), stdev = 38.946
[info]   CI (99.9%): [148.432, 448.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1408.505 ±(99.9%) 720.564 B/op [Average]
[info]   (min, avg, max) = (1198.836, 1408.505, 1554.259), stdev = 187.128
[info]   CI (99.9%): [687.941, 2129.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 3.000), stdev = 0.894
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce
[info] # Run progress: 93.09% complete, ETA 00:03:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 709920.664 ops/s
[info] # Warmup Iteration   2: 976307.418 ops/s
[info] # Warmup Iteration   3: 970626.041 ops/s
[info] Iteration   1: 982304.218 ops/s
[info]                  ·gc.alloc.rate:                   1468.023 MB/sec
[info]                  ·gc.alloc.rate.norm:              2352.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.267 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1640.088 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2627.676 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 988980.192 ops/s
[info]                  ·gc.alloc.rate:                   1478.089 MB/sec
[info]                  ·gc.alloc.rate.norm:              2352.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.232 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1321.090 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2102.177 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 973711.995 ops/s
[info]                  ·gc.alloc.rate:                   1454.984 MB/sec
[info]                  ·gc.alloc.rate.norm:              2352.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.168 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1328.826 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2148.064 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 985091.084 ops/s
[info]                  ·gc.alloc.rate:                   1472.022 MB/sec
[info]                  ·gc.alloc.rate.norm:              2352.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.133 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1672.261 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2671.941 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 988189.815 ops/s
[info]                  ·gc.alloc.rate:                   1476.812 MB/sec
[info]                  ·gc.alloc.rate.norm:              2352.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.166 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.318 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2140.988 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce":
[info]   983655.461 ±(99.9%) 23711.379 ops/s [Average]
[info]   (min, avg, max) = (973711.995, 983655.461, 988980.192), stdev = 6157.770
[info]   CI (99.9%): [959944.082, 1007366.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   1469.986 ±(99.9%) 35.777 MB/sec [Average]
[info]   (min, avg, max) = (1454.984, 1469.986, 1478.089), stdev = 9.291
[info]   CI (99.9%): [1434.209, 1505.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2352.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2352.000, 2352.000, 2352.000), stdev = 0.001
[info]   CI (99.9%): [2352.000, 2352.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.121 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.121, 0.167), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.193 ±(99.9%) 0.210 B/op [Average]
[info]   (min, avg, max) = (0.133, 0.193, 0.267), stdev = 0.055
[info]   CI (99.9%): [≈ 0, 0.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1461.317 ±(99.9%) 687.107 MB/sec [Average]
[info]   (min, avg, max) = (1321.090, 1461.317, 1672.261), stdev = 178.440
[info]   CI (99.9%): [774.209, 2148.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2338.169 ±(99.9%) 1099.173 B/op [Average]
[info]   (min, avg, max) = (2102.177, 2338.169, 2671.941), stdev = 285.452
[info]   CI (99.9%): [1238.996, 3437.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 1.000
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala
[info] # Run progress: 93.55% complete, ETA 00:02:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 574834.454 ops/s
[info] # Warmup Iteration   2: 1303817.305 ops/s
[info] # Warmup Iteration   3: 1304904.736 ops/s
[info] Iteration   1: 1308082.578 ops/s
[info]                  ·gc.alloc.rate:                   857.536 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.125 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      970.737 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1168.232 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1307213.188 ops/s
[info]                  ·gc.alloc.rate:                   857.032 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.150 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      977.454 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1177.007 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1297418.098 ops/s
[info]                  ·gc.alloc.rate:                   850.586 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.024 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 795.942 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1307971.860 ops/s
[info]                  ·gc.alloc.rate:                   857.565 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.125 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      989.437 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1190.697 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1298885.767 ops/s
[info]                  ·gc.alloc.rate:                   851.611 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      662.723 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 803.103 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala":
[info]   1303914.298 ±(99.9%) 20394.585 ops/s [Average]
[info]   (min, avg, max) = (1297418.098, 1303914.298, 1308082.578), stdev = 5296.409
[info]   CI (99.9%): [1283519.714, 1324308.883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   854.866 ±(99.9%) 13.342 MB/sec [Average]
[info]   (min, avg, max) = (850.586, 854.866, 857.565), stdev = 3.465
[info]   CI (99.9%): [841.524, 868.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1032.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1032.000, 1032.000, 1032.000), stdev = 0.001
[info]   CI (99.9%): [1032.000, 1032.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.217 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.071, 0.125), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.085 ±(99.9%) 0.261 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.085, 0.150), stdev = 0.068
[info]   CI (99.9%): [≈ 0, 0.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   851.275 ±(99.9%) 675.115 MB/sec [Average]
[info]   (min, avg, max) = (656.024, 851.275, 989.437), stdev = 175.325
[info]   CI (99.9%): [176.160, 1526.390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1026.996 ±(99.9%) 800.256 B/op [Average]
[info]   (min, avg, max) = (795.942, 1026.996, 1190.697), stdev = 207.824
[info]   CI (99.9%): [226.740, 1827.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala
[info] # Run progress: 94.01% complete, ETA 00:02:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2105616.410 ops/s
[info] # Warmup Iteration   2: 2280500.369 ops/s
[info] # Warmup Iteration   3: 2312590.887 ops/s
[info] Iteration   1: 2317407.101 ops/s
[info]                  ·gc.alloc.rate:                   565.284 MB/sec
[info]                  ·gc.alloc.rate.norm:              384.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.144 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.136 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      664.672 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 451.515 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2332612.171 ops/s
[info]                  ·gc.alloc.rate:                   569.097 MB/sec
[info]                  ·gc.alloc.rate.norm:              384.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.400 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 222.939 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 2333851.900 ops/s
[info]                  ·gc.alloc.rate:                   569.426 MB/sec
[info]                  ·gc.alloc.rate.norm:              384.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.070 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.165 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 445.191 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 2339063.352 ops/s
[info]                  ·gc.alloc.rate:                   570.718 MB/sec
[info]                  ·gc.alloc.rate.norm:              384.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      659.521 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 443.750 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 2334291.320 ops/s
[info]                  ·gc.alloc.rate:                   569.678 MB/sec
[info]                  ·gc.alloc.rate.norm:              384.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.056 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.335 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 445.109 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala":
[info]   2331445.169 ±(99.9%) 31657.287 ops/s [Average]
[info]   (min, avg, max) = (2317407.101, 2331445.169, 2339063.352), stdev = 8221.297
[info]   CI (99.9%): [2299787.882, 2363102.455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   568.841 ±(99.9%) 8.004 MB/sec [Average]
[info]   (min, avg, max) = (565.284, 568.841, 570.718), stdev = 2.079
[info]   CI (99.9%): [560.837, 576.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   384.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (384.000, 384.000, 384.000), stdev = 0.001
[info]   CI (99.9%): [384.000, 384.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.670 ±(99.9%) 5.328 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.670, 3.144), stdev = 1.384
[info]   CI (99.9%): [≈ 0, 5.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.455 ±(99.9%) 3.619 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.455, 2.136), stdev = 0.940
[info]   CI (99.9%): [≈ 0, 4.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   595.019 ±(99.9%) 569.666 MB/sec [Average]
[info]   (min, avg, max) = (330.400, 595.019, 664.672), stdev = 147.941
[info]   CI (99.9%): [25.352, 1164.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   401.701 ±(99.9%) 384.974 B/op [Average]
[info]   (min, avg, max) = (222.939, 401.701, 451.515), stdev = 99.977
[info]   CI (99.9%): [16.727, 786.675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.600, 5.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce
[info] # Run progress: 94.47% complete, ETA 00:02:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1286369.218 ops/s
[info] # Warmup Iteration   2: 1989250.834 ops/s
[info] # Warmup Iteration   3: 2003063.438 ops/s
[info] Iteration   1: 2000501.011 ops/s
[info]                  ·gc.alloc.rate:                   1382.685 MB/sec
[info]                  ·gc.alloc.rate.norm:              1088.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.082 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1307.401 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1028.761 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2002981.451 ops/s
[info]                  ·gc.alloc.rate:                   1384.399 MB/sec
[info]                  ·gc.alloc.rate.norm:              1088.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.115 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1644.770 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1292.625 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 1966476.115 ops/s
[info]                  ·gc.alloc.rate:                   1359.742 MB/sec
[info]                  ·gc.alloc.rate.norm:              1088.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.050 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1325.646 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1060.719 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 2012925.427 ops/s
[info]                  ·gc.alloc.rate:                   1391.282 MB/sec
[info]                  ·gc.alloc.rate.norm:              1088.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1333.422 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1042.752 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 2003438.546 ops/s
[info]                  ·gc.alloc.rate:                   1384.751 MB/sec
[info]                  ·gc.alloc.rate.norm:              1088.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.065 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1340.437 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1053.183 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce":
[info]   1997264.510 ±(99.9%) 68733.365 ops/s [Average]
[info]   (min, avg, max) = (1966476.115, 1997264.510, 2012925.427), stdev = 17849.837
[info]   CI (99.9%): [1928531.145, 2065997.875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1380.572 ±(99.9%) 46.575 MB/sec [Average]
[info]   (min, avg, max) = (1359.742, 1380.572, 1391.282), stdev = 12.095
[info]   CI (99.9%): [1333.997, 1427.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1088.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1088.000, 1088.000, 1088.000), stdev = 0.001
[info]   CI (99.9%): [1088.000, 1088.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.087, 0.146), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.069 ±(99.9%) 0.121 B/op [Average]
[info]   (min, avg, max) = (0.033, 0.069, 0.115), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1390.335 ±(99.9%) 549.741 MB/sec [Average]
[info]   (min, avg, max) = (1307.401, 1390.335, 1644.770), stdev = 142.766
[info]   CI (99.9%): [840.594, 1940.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1095.608 ±(99.9%) 426.602 B/op [Average]
[info]   (min, avg, max) = (1028.761, 1095.608, 1292.625), stdev = 110.787
[info]   CI (99.9%): [669.006, 1522.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 5.000), stdev = 0.837
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala
[info] # Run progress: 94.93% complete, ETA 00:02:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 933870.706 ops/s
[info] # Warmup Iteration   2: 3002813.015 ops/s
[info] # Warmup Iteration   3: 2979211.090 ops/s
[info] Iteration   1: 2979718.850 ops/s
[info]                  ·gc.alloc.rate:                   1090.773 MB/sec
[info]                  ·gc.alloc.rate.norm:              576.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      976.441 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 515.625 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 3018697.725 ops/s
[info]                  ·gc.alloc.rate:                   1104.797 MB/sec
[info]                  ·gc.alloc.rate.norm:              576.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.054 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      982.907 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 512.451 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 3000547.123 ops/s
[info]                  ·gc.alloc.rate:                   1098.217 MB/sec
[info]                  ·gc.alloc.rate.norm:              576.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1320.390 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 692.527 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 3017603.840 ops/s
[info]                  ·gc.alloc.rate:                   1104.471 MB/sec
[info]                  ·gc.alloc.rate.norm:              576.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      997.661 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 520.297 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 3012079.946 ops/s
[info]                  ·gc.alloc.rate:                   1102.416 MB/sec
[info]                  ·gc.alloc.rate.norm:              576.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.044 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1001.561 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 523.304 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala":
[info]   3005729.497 ±(99.9%) 62474.070 ops/s [Average]
[info]   (min, avg, max) = (2979718.850, 3005729.497, 3018697.725), stdev = 16224.318
[info]   CI (99.9%): [2943255.427, 3068203.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1100.135 ±(99.9%) 22.540 MB/sec [Average]
[info]   (min, avg, max) = (1090.773, 1100.135, 1104.797), stdev = 5.854
[info]   CI (99.9%): [1077.595, 1122.675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   576.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (576.000, 576.000, 576.000), stdev = 0.001
[info]   CI (99.9%): [576.000, 576.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.104), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.035 ±(99.9%) 0.054 B/op [Average]
[info]   (min, avg, max) = (0.022, 0.035, 0.054), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1055.792 ±(99.9%) 570.952 MB/sec [Average]
[info]   (min, avg, max) = (976.441, 1055.792, 1320.390), stdev = 148.274
[info]   CI (99.9%): [484.840, 1626.744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   552.841 ±(99.9%) 301.115 B/op [Average]
[info]   (min, avg, max) = (512.451, 552.841, 692.527), stdev = 78.199
[info]   CI (99.9%): [251.726, 853.956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala
[info] # Run progress: 95.39% complete, ETA 00:02:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2521342.727 ops/s
[info] # Warmup Iteration   2: 3298279.296 ops/s
[info] # Warmup Iteration   3: 3404978.841 ops/s
[info] Iteration   1: 3397939.823 ops/s
[info]                  ·gc.alloc.rate:                   673.570 MB/sec
[info]                  ·gc.alloc.rate.norm:              312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.123 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 303.919 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 3386238.442 ops/s
[info]                  ·gc.alloc.rate:                   671.210 MB/sec
[info]                  ·gc.alloc.rate.norm:              312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.418 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 303.730 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 3315547.872 ops/s
[info]                  ·gc.alloc.rate:                   657.259 MB/sec
[info]                  ·gc.alloc.rate.norm:              312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.156 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 310.052 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 3400330.932 ops/s
[info]                  ·gc.alloc.rate:                   674.022 MB/sec
[info]                  ·gc.alloc.rate.norm:              312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.029 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.116 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 302.786 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 3382320.786 ops/s
[info]                  ·gc.alloc.rate:                   670.400 MB/sec
[info]                  ·gc.alloc.rate.norm:              312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.382 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 305.011 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala":
[info]   3376475.571 ±(99.9%) 134379.434 ops/s [Average]
[info]   (min, avg, max) = (3315547.872, 3376475.571, 3400330.932), stdev = 34897.912
[info]   CI (99.9%): [3242096.137, 3510855.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   669.292 ±(99.9%) 26.563 MB/sec [Average]
[info]   (min, avg, max) = (657.259, 669.292, 674.022), stdev = 6.898
[info]   CI (99.9%): [642.729, 695.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   312.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (312.000, 312.000, 312.000), stdev = 0.001
[info]   CI (99.9%): [312.000, 312.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.058, 0.083), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.027 ±(99.9%) 0.048 B/op [Average]
[info]   (min, avg, max) = (0.010, 0.027, 0.039), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   654.439 ±(99.9%) 4.915 MB/sec [Average]
[info]   (min, avg, max) = (653.156, 654.439, 656.123), stdev = 1.276
[info]   CI (99.9%): [649.524, 659.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   305.100 ±(99.9%) 11.087 B/op [Average]
[info]   (min, avg, max) = (302.786, 305.100, 310.052), stdev = 2.879
[info]   CI (99.9%): [294.013, 316.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 95.85% complete, ETA 00:01:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2588968.958 ops/s
[info] # Warmup Iteration   2: 3435994.790 ops/s
[info] # Warmup Iteration   3: 3317727.961 ops/s
[info] Iteration   1: 3457600.904 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3448653.445 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3458452.651 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3455461.191 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3470155.298 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   3458064.698 ±(99.9%) 29944.677 ops/s [Average]
[info]   (min, avg, max) = (3448653.445, 3458064.698, 3470155.298), stdev = 7776.538
[info]   CI (99.9%): [3428120.020, 3488009.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson
[info] # Run progress: 96.31% complete, ETA 00:01:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2084501.799 ops/s
[info] # Warmup Iteration   2: 2774810.955 ops/s
[info] # Warmup Iteration   3: 2776922.347 ops/s
[info] Iteration   1: 2781206.408 ops/s
[info]                  ·gc.alloc.rate:                   1173.413 MB/sec
[info]                  ·gc.alloc.rate.norm:              664.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      976.590 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 552.624 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 2775949.706 ops/s
[info]                  ·gc.alloc.rate:                   1170.822 MB/sec
[info]                  ·gc.alloc.rate.norm:              664.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.118 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1306.606 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 741.006 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 2759984.522 ops/s
[info]                  ·gc.alloc.rate:                   1164.141 MB/sec
[info]                  ·gc.alloc.rate.norm:              664.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1314.692 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 749.871 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 2771168.817 ops/s
[info]                  ·gc.alloc.rate:                   1168.955 MB/sec
[info]                  ·gc.alloc.rate.norm:              664.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.035 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      993.090 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 564.104 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2760069.441 ops/s
[info]                  ·gc.alloc.rate:                   1164.561 MB/sec
[info]                  ·gc.alloc.rate.norm:              664.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.047 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1331.091 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 758.951 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson":
[info]   2769675.779 ±(99.9%) 36568.394 ops/s [Average]
[info]   (min, avg, max) = (2759984.522, 2769675.779, 2781206.408), stdev = 9496.696
[info]   CI (99.9%): [2733107.385, 2806244.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1168.378 ±(99.9%) 15.423 MB/sec [Average]
[info]   (min, avg, max) = (1164.141, 1168.378, 1173.413), stdev = 4.005
[info]   CI (99.9%): [1152.955, 1183.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   664.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (664.000, 664.000, 664.000), stdev = 0.001
[info]   CI (99.9%): [664.000, 664.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.257 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.092, 0.208), stdev = 0.067
[info]   CI (99.9%): [≈ 0, 0.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.052 ±(99.9%) 0.146 B/op [Average]
[info]   (min, avg, max) = (0.024, 0.052, 0.118), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1184.414 ±(99.9%) 702.712 MB/sec [Average]
[info]   (min, avg, max) = (976.590, 1184.414, 1331.091), stdev = 182.492
[info]   CI (99.9%): [481.702, 1887.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   673.311 ±(99.9%) 405.096 B/op [Average]
[info]   (min, avg, max) = (552.624, 673.311, 758.951), stdev = 105.202
[info]   CI (99.9%): [268.216, 1078.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 7.000), stdev = 1.517
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce
[info] # Run progress: 96.77% complete, ETA 00:01:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6075.619 ops/s
[info] # Warmup Iteration   2: 8751.443 ops/s
[info] # Warmup Iteration   3: 11114.951 ops/s
[info] Iteration   1: 10862.032 ops/s
[info]                  ·gc.alloc.rate:                   1586.292 MB/sec
[info]                  ·gc.alloc.rate.norm:              229784.041 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1632.782 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 236518.362 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   2: 11033.212 ops/s
[info]                  ·gc.alloc.rate:                   1610.645 MB/sec
[info]                  ·gc.alloc.rate.norm:              229779.571 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.126 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1314.811 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 187574.900 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   3: 12385.241 ops/s
[info]                  ·gc.alloc.rate:                   1802.375 MB/sec
[info]                  ·gc.alloc.rate.norm:              229080.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13.227 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1990.754 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 253022.819 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 12460.875 ops/s
[info]                  ·gc.alloc.rate:                   1813.884 MB/sec
[info]                  ·gc.alloc.rate.norm:              229116.146 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.189 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23.841 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1672.078 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 211204.272 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 12427.945 ops/s
[info]                  ·gc.alloc.rate:                   1809.350 MB/sec
[info]                  ·gc.alloc.rate.norm:              229120.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.065 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.273 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2018.348 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 255585.655 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce":
[info]   11833.861 ±(99.9%) 3125.666 ops/s [Average]
[info]   (min, avg, max) = (10862.032, 11833.861, 12460.875), stdev = 811.726
[info]   CI (99.9%): [8708.195, 14959.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   1724.509 ±(99.9%) 444.570 MB/sec [Average]
[info]   (min, avg, max) = (1586.292, 1724.509, 1813.884), stdev = 115.453
[info]   CI (99.9%): [1279.940, 2169.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   229375.965 ±(99.9%) 1427.866 B/op [Average]
[info]   (min, avg, max) = (229080.033, 229375.965, 229784.041), stdev = 370.812
[info]   CI (99.9%): [227948.099, 230803.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.101 ±(99.9%) 0.244 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.101, 0.189), stdev = 0.063
[info]   CI (99.9%): [≈ 0, 0.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   13.276 ±(99.9%) 31.309 B/op [Average]
[info]   (min, avg, max) = (3.016, 13.276, 23.841), stdev = 8.131
[info]   CI (99.9%): [≈ 0, 44.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1725.755 ±(99.9%) 1116.414 MB/sec [Average]
[info]   (min, avg, max) = (1314.811, 1725.755, 2018.348), stdev = 289.929
[info]   CI (99.9%): [609.340, 2842.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   228781.202 ±(99.9%) 111816.397 B/op [Average]
[info]   (min, avg, max) = (187574.900, 228781.202, 255585.655), stdev = 29038.363
[info]   CI (99.9%): [116964.805, 340597.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 0.837
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 9.400, 17.000), stdev = 5.320
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala
[info] # Run progress: 97.24% complete, ETA 00:01:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5379.987 ops/s
[info] # Warmup Iteration   2: 14898.017 ops/s
[info] # Warmup Iteration   3: 15423.962 ops/s
[info] Iteration   1: 15417.488 ops/s
[info]                  ·gc.alloc.rate:      217.654 MB/sec
[info]                  ·gc.alloc.rate.norm: 22224.026 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 15229.572 ops/s
[info]                  ·gc.alloc.rate:                   215.110 MB/sec
[info]                  ·gc.alloc.rate.norm:              22229.253 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.805 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26434.689 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 15480.714 ops/s
[info]                  ·gc.alloc.rate:                   218.722 MB/sec
[info]                  ·gc.alloc.rate.norm:              22240.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.116 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.744 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26004.468 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 15410.378 ops/s
[info]                  ·gc.alloc.rate:                   217.743 MB/sec
[info]                  ·gc.alloc.rate.norm:              22240.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.126 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.772 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26124.258 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 15387.807 ops/s
[info]                  ·gc.alloc.rate:                   217.370 MB/sec
[info]                  ·gc.alloc.rate.norm:              22236.835 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.666 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68.129 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      322.333 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 32974.517 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala":
[info]   15385.192 ±(99.9%) 360.330 ops/s [Average]
[info]   (min, avg, max) = (15229.572, 15385.192, 15480.714), stdev = 93.577
[info]   CI (99.9%): [15024.861, 15745.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   217.320 ±(99.9%) 5.146 MB/sec [Average]
[info]   (min, avg, max) = (215.110, 217.320, 218.722), stdev = 1.336
[info]   CI (99.9%): [212.174, 222.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   22234.033 ±(99.9%) 27.409 B/op [Average]
[info]   (min, avg, max) = (22224.026, 22234.033, 22240.026), stdev = 7.118
[info]   CI (99.9%): [22206.624, 22261.443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.142 ±(99.9%) 1.130 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.142, 0.666), stdev = 0.293
[info]   CI (99.9%): [≈ 0, 1.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   14.474 ±(99.9%) 115.568 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14.474, 68.129), stdev = 30.013
[info]   CI (99.9%): [≈ 0, 130.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   217.931 ±(99.9%) 482.061 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 217.931, 322.333), stdev = 125.190
[info]   CI (99.9%): [≈ 0, 699.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   22307.586 ±(99.9%) 49337.806 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 22307.586, 32974.517), stdev = 12812.871
[info]   CI (99.9%): [≈ 0, 71645.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 2.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala
[info] # Run progress: 97.70% complete, ETA 00:01:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16445.282 ops/s
[info] # Warmup Iteration   2: 35796.507 ops/s
[info] # Warmup Iteration   3: 37082.730 ops/s
[info] Iteration   1: 37129.773 ops/s
[info]                  ·gc.alloc.rate:                   344.562 MB/sec
[info]                  ·gc.alloc.rate.norm:              14608.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.748 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10842.664 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 37159.542 ops/s
[info]                  ·gc.alloc.rate:                   344.875 MB/sec
[info]                  ·gc.alloc.rate.norm:              14608.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.562 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21668.408 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 36869.994 ops/s
[info]                  ·gc.alloc.rate:                   342.177 MB/sec
[info]                  ·gc.alloc.rate.norm:              14608.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.367 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     143.762 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.692 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14075.036 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 37372.429 ops/s
[info]                  ·gc.alloc.rate:                   346.838 MB/sec
[info]                  ·gc.alloc.rate.norm:              14608.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.877 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.696 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13886.009 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 37759.838 ops/s
[info]                  ·gc.alloc.rate:                   350.558 MB/sec
[info]                  ·gc.alloc.rate.norm:              14608.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.818 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13660.419 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala":
[info]   37258.315 ±(99.9%) 1279.461 ops/s [Average]
[info]   (min, avg, max) = (36869.994, 37258.315, 37759.838), stdev = 332.272
[info]   CI (99.9%): [35978.854, 38537.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   345.802 ±(99.9%) 12.059 MB/sec [Average]
[info]   (min, avg, max) = (342.177, 345.802, 350.558), stdev = 3.132
[info]   CI (99.9%): [333.743, 357.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   14608.012 ±(99.9%) 0.005 B/op [Average]
[info]   (min, avg, max) = (14608.011, 14608.012, 14608.014), stdev = 0.001
[info]   CI (99.9%): [14608.007, 14608.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.678 ±(99.9%) 5.790 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.678, 3.367), stdev = 1.504
[info]   CI (99.9%): [≈ 0, 6.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   28.928 ±(99.9%) 247.193 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 28.928, 143.762), stdev = 64.195
[info]   CI (99.9%): [≈ 0, 276.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   350.903 ±(99.9%) 366.814 MB/sec [Average]
[info]   (min, avg, max) = (255.748, 350.903, 511.562), stdev = 95.260
[info]   CI (99.9%): [≈ 0, 717.717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   14826.507 ±(99.9%) 15581.031 B/op [Average]
[info]   (min, avg, max) = (10842.664, 14826.507, 21668.408), stdev = 4046.344
[info]   CI (99.9%): [≈ 0, 30407.539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 5.000), stdev = 1.673
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson
[info] # Run progress: 98.16% complete, ETA 00:00:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 772.546 ops/s
[info] # Warmup Iteration   2: 3124.227 ops/s
[info] # Warmup Iteration   3: 2860.561 ops/s
[info] Iteration   1: 3204.473 ops/s
[info]                  ·gc.alloc.rate:                   1028.818 MB/sec
[info]                  ·gc.alloc.rate.norm:              505380.129 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1301.419 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 639287.833 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         23.000 ms
[info] Iteration   2: 3651.995 ops/s
[info]                  ·gc.alloc.rate:                   1173.245 MB/sec
[info]                  ·gc.alloc.rate.norm:              505496.112 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35.881 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      985.014 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 424396.281 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 3627.313 ops/s
[info]                  ·gc.alloc.rate:                   1164.877 MB/sec
[info]                  ·gc.alloc.rate.norm:              505496.121 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.032 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1322.073 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 573710.959 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 3622.547 ops/s
[info]                  ·gc.alloc.rate:                   1163.850 MB/sec
[info]                  ·gc.alloc.rate.norm:              505496.113 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18.084 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      996.937 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 433000.547 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 3612.090 ops/s
[info]                  ·gc.alloc.rate:                   1160.214 MB/sec
[info]                  ·gc.alloc.rate.norm:              505496.113 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27.208 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1336.902 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 582477.728 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson":
[info]   3543.684 ±(99.9%) 732.351 ops/s [Average]
[info]   (min, avg, max) = (3204.473, 3543.684, 3651.995), stdev = 190.189
[info]   CI (99.9%): [2811.333, 4276.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1138.201 ±(99.9%) 236.169 MB/sec [Average]
[info]   (min, avg, max) = (1028.818, 1138.201, 1173.245), stdev = 61.332
[info]   CI (99.9%): [902.032, 1374.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   505472.917 ±(99.9%) 199.735 B/op [Average]
[info]   (min, avg, max) = (505380.129, 505472.917, 505496.121), stdev = 51.871
[info]   CI (99.9%): [505273.182, 505672.652] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.083), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   18.041 ±(99.9%) 54.760 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 18.041, 35.881), stdev = 14.221
[info]   CI (99.9%): [≈ 0, 72.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1188.469 ±(99.9%) 696.100 MB/sec [Average]
[info]   (min, avg, max) = (985.014, 1188.469, 1336.902), stdev = 180.775
[info]   CI (99.9%): [492.369, 1884.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   530574.670 ±(99.9%) 371181.794 B/op [Average]
[info]   (min, avg, max) = (424396.281, 530574.670, 639287.833), stdev = 96394.733
[info]   CI (99.9%): [159392.876, 901756.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 8.600, 23.000), stdev = 8.050
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala
[info] # Run progress: 98.62% complete, ETA 00:00:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_e598a460/target/5e31e36e/jackson-module-afterburner-2.9.4.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 19661.510 ops/s
[info] # Warmup Iteration   2: 49899.996 ops/s
[info] # Warmup Iteration   3: 49714.347 ops/s
[info] Iteration   1: 49748.436 ops/s
[info]                  ·gc.alloc.rate:                   651.184 MB/sec
[info]                  ·gc.alloc.rate.norm:              20604.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.976 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      646.374 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20451.847 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 49557.425 ops/s
[info]                  ·gc.alloc.rate:                   648.725 MB/sec
[info]                  ·gc.alloc.rate.norm:              20604.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.628 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      649.426 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20626.268 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 49636.995 ops/s
[info]                  ·gc.alloc.rate:                   649.903 MB/sec
[info]                  ·gc.alloc.rate.norm:              20603.978 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.980 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.249 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20678.348 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 49796.998 ops/s
[info]                  ·gc.alloc.rate:                   652.017 MB/sec
[info]                  ·gc.alloc.rate.norm:              20604.059 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.931 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20696.133 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 49847.231 ops/s
[info]                  ·gc.alloc.rate:                   652.688 MB/sec
[info]                  ·gc.alloc.rate.norm:              20603.988 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.944 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.588 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20758.675 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala":
[info]   49717.417 ±(99.9%) 456.476 ops/s [Average]
[info]   (min, avg, max) = (49557.425, 49717.417, 49847.231), stdev = 118.545
[info]   CI (99.9%): [49260.941, 50173.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   650.904 ±(99.9%) 6.163 MB/sec [Average]
[info]   (min, avg, max) = (648.725, 650.904, 652.688), stdev = 1.601
[info]   CI (99.9%): [644.740, 657.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   20604.016 ±(99.9%) 0.129 B/op [Average]
[info]   (min, avg, max) = (20603.978, 20604.016, 20604.059), stdev = 0.033
[info]   CI (99.9%): [20603.888, 20604.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.222 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.079, 0.146), stdev = 0.058
[info]   CI (99.9%): [≈ 0, 0.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2.505 ±(99.9%) 7.049 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.505, 4.628), stdev = 1.831
[info]   CI (99.9%): [≈ 0, 9.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   652.114 ±(99.9%) 17.014 MB/sec [Average]
[info]   (min, avg, max) = (646.374, 652.114, 657.588), stdev = 4.418
[info]   CI (99.9%): [635.100, 669.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   20642.254 ±(99.9%) 448.521 B/op [Average]
[info]   (min, avg, max) = (20451.847, 20642.254, 20758.675), stdev = 116.480
[info]   CI (99.9%): [20193.733, 21090.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala
[info] # Run progress: 99.08% complete, ETA 00:00:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 72542.153 ops/s
[info] # Warmup Iteration   2: 92601.684 ops/s
[info] # Warmup Iteration   3: 93233.350 ops/s
[info] Iteration   1: 93345.624 ops/s
[info]                  ·gc.alloc.rate:                   613.104 MB/sec
[info]                  ·gc.alloc.rate.norm:              10336.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.809 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64.213 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.897 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11074.292 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 93735.103 ops/s
[info]                  ·gc.alloc.rate:                   615.477 MB/sec
[info]                  ·gc.alloc.rate.norm:              10336.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.350 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.700 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10961.114 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 95366.437 ops/s
[info]                  ·gc.alloc.rate:                   626.257 MB/sec
[info]                  ·gc.alloc.rate.norm:              10336.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.374 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      651.437 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10751.581 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 95386.088 ops/s
[info]                  ·gc.alloc.rate:                   626.359 MB/sec
[info]                  ·gc.alloc.rate.norm:              10336.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.374 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.093 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10760.657 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 95047.877 ops/s
[info]                  ·gc.alloc.rate:                   624.139 MB/sec
[info]                  ·gc.alloc.rate.norm:              10336.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.379 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.410 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10820.751 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala":
[info]   94576.226 ±(99.9%) 3715.738 ops/s [Average]
[info]   (min, avg, max) = (93345.624, 94576.226, 95386.088), stdev = 964.965
[info]   CI (99.9%): [90860.488, 98291.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   621.067 ±(99.9%) 24.281 MB/sec [Average]
[info]   (min, avg, max) = (613.104, 621.067, 626.359), stdev = 6.306
[info]   CI (99.9%): [596.786, 645.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   10336.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10336.004, 10336.004, 10336.005), stdev = 0.001
[info]   CI (99.9%): [10336.004, 10336.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.816 ±(99.9%) 6.444 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.816, 3.809), stdev = 1.673
[info]   CI (99.9%): [≈ 0, 7.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   13.738 ±(99.9%) 108.665 B/op [Average]
[info]   (min, avg, max) = (0.350, 13.738, 64.213), stdev = 28.220
[info]   CI (99.9%): [≈ 0, 122.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   653.307 ±(99.9%) 8.223 MB/sec [Average]
[info]   (min, avg, max) = (651.437, 653.307, 656.897), stdev = 2.135
[info]   CI (99.9%): [645.085, 661.530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   10873.679 ±(99.9%) 539.000 B/op [Average]
[info]   (min, avg, max) = (10751.581, 10873.679, 11074.292), stdev = 139.977
[info]   CI (99.9%): [10334.679, 11412.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 4.000), stdev = 1.095
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 99.54% complete, ETA 00:00:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 84076.275 ops/s
[info] # Warmup Iteration   2: 104991.739 ops/s
[info] # Warmup Iteration   3: 105140.953 ops/s
[info] Iteration   1: 105059.226 ops/s
[info]                  ·gc.alloc.rate:      14.950 MB/sec
[info]                  ·gc.alloc.rate.norm: 224.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 104889.160 ops/s
[info]                  ·gc.alloc.rate:      14.930 MB/sec
[info]                  ·gc.alloc.rate.norm: 224.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 104769.623 ops/s
[info]                  ·gc.alloc.rate:      14.909 MB/sec
[info]                  ·gc.alloc.rate.norm: 224.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 104825.296 ops/s
[info]                  ·gc.alloc.rate:      14.917 MB/sec
[info]                  ·gc.alloc.rate.norm: 224.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 104783.695 ops/s
[info]                  ·gc.alloc.rate:      14.911 MB/sec
[info]                  ·gc.alloc.rate.norm: 224.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   104865.400 ±(99.9%) 453.944 ops/s [Average]
[info]   (min, avg, max) = (104769.623, 104865.400, 105059.226), stdev = 117.888
[info]   CI (99.9%): [104411.456, 105319.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   14.923 ±(99.9%) 0.065 MB/sec [Average]
[info]   (min, avg, max) = (14.909, 14.923, 14.950), stdev = 0.017
[info]   CI (99.9%): [14.859, 14.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   224.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (224.004, 224.004, 224.004), stdev = 0.001
[info]   CI (99.9%): [224.004, 224.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # Run complete. Total time: 00:46:19
[info] Benchmark                                                                               Mode  Cnt         Score        Error   Units
[info] AdtBenchmark.readCirce                                                                 thrpt    5    727424.566 ±  37257.941   ops/s
[info] AdtBenchmark.readCirce:·gc.alloc.rate                                                  thrpt    5      1922.859 ±     99.161  MB/sec
[info] AdtBenchmark.readCirce:·gc.alloc.rate.norm                                             thrpt    5      4160.001 ±      0.001    B/op
[info] AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         thrpt    5         0.079 ±      0.119  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    thrpt    5         0.172 ±      0.266    B/op
[info] AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     thrpt    5      1936.829 ±    636.058  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                thrpt    5      4189.007 ±   1297.489    B/op
[info] AdtBenchmark.readCirce:·gc.count                                                       thrpt    5        29.000               counts
[info] AdtBenchmark.readCirce:·gc.time                                                        thrpt    5        35.000                   ms
[info] AdtBenchmark.readJacksonScala                                                          thrpt    5   1695945.383 ±  71879.840   ops/s
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate                                           thrpt    5      1206.876 ±     51.495  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm                                      thrpt    5      1120.000 ±      0.001    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                  thrpt    5         0.104 ±      0.113  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                             thrpt    5         0.096 ±      0.103    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                              thrpt    5      1194.113 ±    690.267  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                         thrpt    5      1109.187 ±    669.926    B/op
[info] AdtBenchmark.readJacksonScala:·gc.count                                                thrpt    5        18.000               counts
[info] AdtBenchmark.readJacksonScala:·gc.time                                                 thrpt    5        22.000                   ms
[info] AdtBenchmark.readJsoniterScala                                                         thrpt    5   4002089.002 ± 247418.605   ops/s
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate                                          thrpt    5       264.426 ±     16.247  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     thrpt    5       104.000 ±      0.001    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 thrpt    5         0.631 ±      5.414  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            thrpt    5         0.253 ±      2.173    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             thrpt    5       219.936 ±    490.380  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        thrpt    5        86.342 ±    194.284    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.count                                               thrpt    5         4.000               counts
[info] AdtBenchmark.readJsoniterScala:·gc.time                                                thrpt    5         9.000                   ms
[info] AdtBenchmark.readPlayJson                                                              thrpt    5    176487.745 ±   2310.517   ops/s
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate                                               thrpt    5      1467.622 ±     19.495  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate.norm                                          thrpt    5     13088.002 ±      0.001    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      thrpt    5         0.083 ±      0.098  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 thrpt    5         0.743 ±      0.882    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  thrpt    5      1465.427 ±    669.292  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             thrpt    5     13070.197 ±   6040.405    B/op
[info] AdtBenchmark.readPlayJson:·gc.count                                                    thrpt    5        22.000               counts
[info] AdtBenchmark.readPlayJson:·gc.time                                                     thrpt    5        27.000                   ms
[info] AdtBenchmark.writeJacksonScala                                                         thrpt    5   2065187.652 ±  71697.502   ops/s
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate                                          thrpt    5       797.798 ±     27.219  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     thrpt    5       608.000 ±      0.001    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 thrpt    5         0.083 ±      0.139  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            thrpt    5         0.064 ±      0.106    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                             thrpt    5       783.275 ±    682.183  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                        thrpt    5       597.702 ±    537.178    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.count                                               thrpt    5        12.000               counts
[info] AdtBenchmark.writeJacksonScala:·gc.time                                                thrpt    5        15.000                   ms
[info] AdtBenchmark.writeJsoniterScala                                                        thrpt    5  13650782.572 ±  75100.718   ops/s
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate                                         thrpt    5       693.811 ±      3.746  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    thrpt    5        80.000 ±      0.001    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                thrpt    5         0.803 ±      6.378  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           thrpt    5         0.093 ±      0.737    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            thrpt    5       719.866 ±    564.653  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       thrpt    5        83.013 ±     65.355    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.count                                              thrpt    5        11.000               counts
[info] AdtBenchmark.writeJsoniterScala:·gc.time                                               thrpt    5        12.000                   ms
[info] AdtBenchmark.writePlayJson                                                             thrpt    5    314258.602 ±   7800.780   ops/s
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate                                              thrpt    5      1025.543 ±     25.992  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate.norm                                         thrpt    5      5136.001 ±      0.001    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                     thrpt    5         0.079 ±      0.174  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                thrpt    5         0.396 ±      0.866    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                 thrpt    5       991.577 ±     31.241  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                            thrpt    5      4965.929 ±    118.266    B/op
[info] AdtBenchmark.writePlayJson:·gc.count                                                   thrpt    5        15.000               counts
[info] AdtBenchmark.writePlayJson:·gc.time                                                    thrpt    5        18.000                   ms
[info] AnyRefsBenchmark.readCirce                                                             thrpt    5   1589066.463 ±  23691.952   ops/s
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate                                              thrpt    5      2479.521 ±     38.134  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm                                         thrpt    5      2456.000 ±      0.001    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                     thrpt    5         0.104 ±      0.098  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                thrpt    5         0.103 ±      0.097    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                 thrpt    5      2424.243 ±    600.644  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                            thrpt    5      2400.921 ±    566.234    B/op
[info] AnyRefsBenchmark.readCirce:·gc.count                                                   thrpt    5        36.000               counts
[info] AnyRefsBenchmark.readCirce:·gc.time                                                    thrpt    5        36.000                   ms
[info] AnyRefsBenchmark.readJacksonScala                                                      thrpt    5   2556755.047 ±  48534.226   ops/s
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate                                       thrpt    5      1793.527 ±     34.659  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                  thrpt    5      1104.000 ±      0.001    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                              thrpt    5         0.117 ±      0.108  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                         thrpt    5         0.072 ±      0.065    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                          thrpt    5      1811.698 ±    672.243  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                     thrpt    5      1115.610 ±    434.627    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.count                                            thrpt    5        27.000               counts
[info] AnyRefsBenchmark.readJacksonScala:·gc.time                                             thrpt    5        31.000                   ms
[info] AnyRefsBenchmark.readJsoniterScala                                                     thrpt    5  11254536.434 ± 307337.433   ops/s
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate                                      thrpt    5      1429.981 ±     39.099  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                 thrpt    5       200.000 ±      0.001    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                             thrpt    5         0.087 ±      0.154  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                        thrpt    5         0.012 ±      0.022    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                         thrpt    5      1466.922 ±    693.080  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    thrpt    5       205.282 ±    101.386    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.count                                           thrpt    5        22.000               counts
[info] AnyRefsBenchmark.readJsoniterScala:·gc.time                                            thrpt    5        20.000                   ms
[info] AnyRefsBenchmark.readPlayJson                                                          thrpt    5    649636.356 ±  10123.945   ops/s
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate                                           thrpt    5      1717.018 ±     26.031  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm                                      thrpt    5      4160.001 ±      0.001    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                  thrpt    5         0.104 ±      0.150  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                             thrpt    5         0.252 ±      0.359    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                              thrpt    5      1740.559 ±    516.866  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                         thrpt    5      4216.249 ±   1195.166    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.count                                                thrpt    5        26.000               counts
[info] AnyRefsBenchmark.readPlayJson:·gc.time                                                 thrpt    5        32.000                   ms
[info] AnyRefsBenchmark.writeCirce                                                            thrpt    5   2111163.000 ± 123748.341   ops/s
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate                                             thrpt    5      1899.083 ±    111.338  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm                                        thrpt    5      1416.000 ±      0.001    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                    thrpt    5         0.100 ±      0.119  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                               thrpt    5         0.075 ±      0.094    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                thrpt    5      1870.484 ±    689.452  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                           thrpt    5      1395.605 ±    551.513    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.count                                                  thrpt    5        28.000               counts
[info] AnyRefsBenchmark.writeCirce:·gc.time                                                   thrpt    5        29.000                   ms
[info] AnyRefsBenchmark.writeJacksonScala                                                     thrpt    5   6307084.132 ± 214573.143   ops/s
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate                                      thrpt    5      1731.363 ±     58.731  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                 thrpt    5       432.000 ±      0.001    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                             thrpt    5         0.125 ±      0.150  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                        thrpt    5         0.031 ±      0.038    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                         thrpt    5      1740.835 ±    588.534  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                    thrpt    5       434.282 ±    140.848    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.count                                           thrpt    5        26.000               counts
[info] AnyRefsBenchmark.writeJacksonScala:·gc.time                                            thrpt    5        31.000                   ms
[info] AnyRefsBenchmark.writeJsoniterScala                                                    thrpt    5  21795269.870 ± 118911.695   ops/s
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate                                     thrpt    5       664.699 ±      3.431  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                thrpt    5        48.000 ±      0.001    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                            thrpt    5         0.067 ±      0.154  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                       thrpt    5         0.005 ±      0.011    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                        thrpt    5       654.144 ±      5.060  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   thrpt    5        47.238 ±      0.591    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.count                                          thrpt    5        10.000               counts
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.time                                           thrpt    5         9.000                   ms
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc                                            thrpt    5  19291015.336 ± 704135.747   ops/s
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                             thrpt    5        ≈ 10⁻⁴               MB/sec
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                        thrpt    5        ≈ 10⁻⁵                 B/op
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                  thrpt    5           ≈ 0               counts
[info] AnyRefsBenchmark.writePlayJson                                                         thrpt    5   1427357.490 ±  36836.317   ops/s
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate                                          thrpt    5      2096.880 ±     54.241  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm                                     thrpt    5      2312.000 ±      0.001    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                 thrpt    5         0.096 ±      0.146  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                            thrpt    5         0.106 ±      0.163    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                             thrpt    5      2153.991 ±    695.954  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                        thrpt    5      2375.184 ±    778.508    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.count                                               thrpt    5        32.000               counts
[info] AnyRefsBenchmark.writePlayJson:·gc.time                                                thrpt    5        39.000                   ms
[info] ArrayOfBigIntsBenchmark.readCirce                                                      thrpt    5      8579.087 ±     62.799   ops/s
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate                                       thrpt    5      1264.560 ±      9.548  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm                                  thrpt    5    232009.875 ±     15.721    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                              thrpt    5         0.067 ±      0.088  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                         thrpt    5        12.223 ±     16.165    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                          thrpt    5      1259.169 ±    593.869  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                     thrpt    5    231021.788 ± 108984.620    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.count                                            thrpt    5        19.000               counts
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.time                                             thrpt    5        18.000                   ms
[info] ArrayOfBigIntsBenchmark.readJacksonScala                                               thrpt    5     24650.258 ±    800.168   ops/s
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate                                thrpt    5       911.992 ±     28.869  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                           thrpt    5     58227.725 ±     62.178    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                       thrpt    5         0.050 ±      0.044  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5         3.189 ±      2.773    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                   thrpt    5       926.081 ±    569.032  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5     59135.094 ±  36485.533    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count                                     thrpt    5        14.000               counts
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time                                      thrpt    5        17.000                   ms
[info] ArrayOfBigIntsBenchmark.readJsoniterScala                                              thrpt    5     28801.236 ±    389.043   ops/s
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate                               thrpt    5       522.752 ±      7.310  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                          thrpt    5     28568.015 ±      0.006    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                      thrpt    5         0.548 ±      4.362  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5        29.943 ±    238.389    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                  thrpt    5       463.081 ±    697.575  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5     25306.865 ±  38120.104    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count                                    thrpt    5         7.000               counts
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time                                     thrpt    5         8.000                   ms
[info] ArrayOfBigIntsBenchmark.writeJacksonScala                                              thrpt    5     15354.158 ±    274.441   ops/s
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate                               thrpt    5      1532.668 ±     28.154  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                          thrpt    5    157088.033 ±      0.056    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                      thrpt    5         0.096 ±      0.091  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5         9.823 ±      9.523    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                  thrpt    5      1473.061 ±    710.028  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5    151017.606 ±  74257.263    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count                                    thrpt    5        22.000               counts
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time                                     thrpt    5        25.000                   ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala                                             thrpt    5     17675.082 ±    263.476   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                              thrpt    5      1602.011 ±     23.829  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                         thrpt    5    142648.025 ±      0.010    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                     thrpt    5         0.108 ±      0.067  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                thrpt    5         9.637 ±      5.924    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                 thrpt    5      1597.845 ±    554.439  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5    142259.460 ±  48475.461    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count                                   thrpt    5        24.000               counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time                                    thrpt    5        22.000                   ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc                                     thrpt    5     17752.372 ±    364.259   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                      thrpt    5      1550.344 ±     31.456  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                 thrpt    5    137440.024 ±      0.010    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space             thrpt    5         0.083 ±      0.098  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm        thrpt    5         7.376 ±      8.607    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space         thrpt    5      1595.851 ±    573.713  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm    thrpt    5    141501.313 ±  52024.582    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                           thrpt    5        24.000               counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time                            thrpt    5        22.000                   ms
[info] ArrayOfBooleansBenchmark.readCirce                                                     thrpt    5     47145.581 ±   1650.032   ops/s
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate                                      thrpt    5      1635.336 ±     57.159  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                 thrpt    5     54600.009 ±      0.001    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                             thrpt    5         0.075 ±      0.091  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                        thrpt    5         2.499 ±      3.004    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                         thrpt    5      1666.244 ±     66.378  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                    thrpt    5     55636.977 ±   3406.181    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.count                                           thrpt    5        25.000               counts
[info] ArrayOfBooleansBenchmark.readCirce:·gc.time                                            thrpt    5        22.000                   ms
[info] ArrayOfBooleansBenchmark.readJacksonScala                                              thrpt    5    105233.020 ±   1343.850   ops/s
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                               thrpt    5       244.943 ±      3.094  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                          thrpt    5      3664.004 ±      0.001    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                      thrpt    5         0.042 ±      0.272  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5         0.624 ±      4.078    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                  thrpt    5       218.190 ±    483.137  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5      3262.705 ±   7232.817    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.count                                    thrpt    5         4.000               counts
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.time                                     thrpt    5         4.000                   ms
[info] ArrayOfBooleansBenchmark.readJsoniterScala                                             thrpt    5    232678.725 ±  11110.806   ops/s
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                              thrpt    5       316.931 ±     15.040  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                         thrpt    5      2144.002 ±      0.001    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                     thrpt    5         0.668 ±      5.522  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                thrpt    5         4.506 ±     37.260    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                 thrpt    5       351.149 ±    366.549  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5      2376.415 ±   2481.220    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count                                   thrpt    5         6.000               counts
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time                                    thrpt    5        13.000                   ms
[info] ArrayOfBooleansBenchmark.readPlayJson                                                  thrpt    5     12888.710 ±    381.700   ops/s
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                   thrpt    5      3930.483 ±    118.304  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                              thrpt    5    479960.442 ±      3.526    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                          thrpt    5         0.142 ±      0.154  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                     thrpt    5        17.270 ±     18.569    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                      thrpt    5      3941.455 ±    695.461  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                 thrpt    5    481206.025 ±  73116.808    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.count                                        thrpt    5        58.000               counts
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.time                                         thrpt    5        71.000                   ms
[info] ArrayOfBooleansBenchmark.writeCirce                                                    thrpt    5     45959.399 ±    824.404   ops/s
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                     thrpt    5       806.854 ±     14.532  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                thrpt    5     27632.009 ±      0.002    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                            thrpt    5         0.054 ±      0.091  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                       thrpt    5         1.854 ±      3.137    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                        thrpt    5       784.775 ±    687.294  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                   thrpt    5     26869.480 ±  23384.505    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.count                                          thrpt    5        12.000               counts
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.time                                           thrpt    5        11.000                   ms
[info] ArrayOfBooleansBenchmark.writeJacksonScala                                             thrpt    5    134054.522 ±    874.344   ops/s
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                              thrpt    5       957.915 ±      6.103  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                         thrpt    5     11248.003 ±      0.037    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                     thrpt    5         0.054 ±      0.091  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                thrpt    5         0.636 ±      1.074    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                 thrpt    5       921.417 ±    577.136  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5     10818.090 ±   6745.282    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count                                   thrpt    5        14.000               counts
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time                                    thrpt    5        16.000                   ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScala                                            thrpt    5    291634.299 ±   1543.745   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                             thrpt    5      1047.840 ±      5.580  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                        thrpt    5      5656.001 ±      0.001    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                    thrpt    5         0.083 ±      0.057  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm               thrpt    5         0.449 ±      0.308    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                thrpt    5      1051.774 ±    552.890  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5      5678.001 ±   3015.832    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count                                  thrpt    5        16.000               counts
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time                                   thrpt    5        15.000                   ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc                                    thrpt    5    317493.412 ±   1839.295   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                     thrpt    5        ≈ 10⁻⁴               MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                thrpt    5         0.001 ±      0.001    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                          thrpt    5           ≈ 0               counts
[info] ArrayOfBooleansBenchmark.writePlayJson                                                 thrpt    5     55896.037 ±   1248.911   ops/s
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                  thrpt    5       553.145 ±     12.282  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                             thrpt    5     15576.014 ±      0.140    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                         thrpt    5         0.827 ±      6.677  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                    thrpt    5        23.075 ±    186.105    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                     thrpt    5       517.960 ±    682.274  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                thrpt    5     14598.409 ±  19371.235    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.count                                       thrpt    5         8.000               counts
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.time                                        thrpt    5        11.000                   ms
[info] ArrayOfBytesBenchmark.readCirce                                                        thrpt    5     21573.758 ±    371.974   ops/s
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate                                         thrpt    5      1957.812 ±     32.300  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm                                    thrpt    5    142815.765 ±      1.378    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                thrpt    5         0.104 ±      0.150  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5         7.586 ±     10.868    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                            thrpt    5      1943.143 ±    554.001  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5    141724.746 ±  39101.988    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.count                                              thrpt    5        29.000               counts
[info] ArrayOfBytesBenchmark.readCirce:·gc.time                                               thrpt    5        30.000                   ms
[info] ArrayOfBytesBenchmark.readJacksonScala                                                 thrpt    5     53071.267 ±   3324.416   ops/s
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate                                  thrpt    5       123.547 ±      7.762  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm                             thrpt    5      3664.008 ±      0.001    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                         thrpt    5         0.008 ±      0.072  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5         0.247 ±      2.128    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                     thrpt    5       102.314 ±    539.472  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5      3077.502 ±  16229.090    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.count                                       thrpt    5         2.000               counts
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.time                                        thrpt    5         2.000                   ms
[info] ArrayOfBytesBenchmark.readJsoniterScala                                                thrpt    5    133565.680 ±   8339.366   ops/s
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate                                 thrpt    5       181.942 ±     11.370  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                            thrpt    5      2144.003 ±      0.001    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5         0.010 ±      0.051  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5         0.112 ±      0.600    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5       153.484 ±    539.517  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5      1821.681 ±   6405.348    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.count                                      thrpt    5         3.000               counts
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.time                                       thrpt    5         7.000                   ms
[info] ArrayOfBytesBenchmark.readPlayJson                                                     thrpt    5      9921.262 ±    387.844   ops/s
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate                                      thrpt    5      3323.952 ±    130.502  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm                                 thrpt    5    527320.042 ±      0.006    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                             thrpt    5         0.071 ±      0.108  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                        thrpt    5        11.200 ±     16.749    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                         thrpt    5      3323.359 ±    562.819  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                    thrpt    5    527100.400 ±  72501.434    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.count                                           thrpt    5        49.000               counts
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.time                                            thrpt    5        56.000                   ms
[info] ArrayOfBytesBenchmark.writeCirce                                                       thrpt    5     33964.928 ±   3153.122   ops/s
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate                                        thrpt    5      1316.483 ±    122.506  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm                                   thrpt    5     61009.743 ±     14.894    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                               thrpt    5         0.108 ±      0.222  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                          thrpt    5         5.054 ±     10.849    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                           thrpt    5      1322.518 ±     48.604  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                      thrpt    5     61321.869 ±   6756.624    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.count                                             thrpt    5        20.000               counts
[info] ArrayOfBytesBenchmark.writeCirce:·gc.time                                              thrpt    5        19.000                   ms
[info] ArrayOfBytesBenchmark.writeJsoniterScala                                               thrpt    5    235579.622 ±   7062.324   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate                                thrpt    5       562.766 ±     17.058  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                           thrpt    5      3760.002 ±      0.001    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5         0.789 ±      6.352  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5         5.294 ±     42.591    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5       588.831 ±    563.686  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5      3936.841 ±   3800.646    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count                                     thrpt    5         9.000               counts
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time                                      thrpt    5        10.000                   ms
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc                                       thrpt    5    251315.200 ±   2147.317   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                        thrpt    5        ≈ 10⁻⁴               MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                   thrpt    5         0.002 ±      0.001    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count                             thrpt    5           ≈ 0               counts
[info] ArrayOfBytesBenchmark.writePlayJson                                                    thrpt    5      5267.913 ±    115.699   ops/s
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate                                     thrpt    5      2111.200 ±     46.053  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm                                thrpt    5    630832.079 ±      0.011    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                            thrpt    5         0.087 ±      0.154  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                       thrpt    5        26.113 ±     45.969    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                        thrpt    5      2139.160 ±    675.094  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                   thrpt    5    639144.719 ± 198399.110    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.count                                          thrpt    5        32.000               counts
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.time                                           thrpt    5        31.000                   ms
[info] ArrayOfDoublesBenchmark.readCirce                                                      thrpt    5      2992.548 ±     61.116   ops/s
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate                                       thrpt    5      1408.451 ±     29.141  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm                                  thrpt    5    740720.280 ±      1.218    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space                              thrpt    5         0.112 ±      0.201  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                         thrpt    5        59.123 ±    105.758    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                          thrpt    5      1391.465 ±    573.155  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                     thrpt    5    731651.412 ± 293974.000    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.count                                            thrpt    5        21.000               counts
[info] ArrayOfDoublesBenchmark.readCirce:·gc.time                                             thrpt    5        22.000                   ms
[info] ArrayOfDoublesBenchmark.readJacksonScala                                               thrpt    5      6430.032 ±    133.032   ops/s
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate                                thrpt    5       913.059 ±     18.795  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm                           thrpt    5    223512.065 ±      0.010    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                       thrpt    5         0.083 ±      0.139  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5        20.386 ±     34.068    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                   thrpt    5       925.526 ±    569.718  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5    226586.674 ± 139921.187    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.count                                     thrpt    5        14.000               counts
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.time                                      thrpt    5        16.000                   ms
[info] ArrayOfDoublesBenchmark.readJsoniterScala                                              thrpt    5      8317.857 ±    291.218   ops/s
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate                               thrpt    5       590.871 ±     20.816  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                          thrpt    5    111808.051 ±      0.007    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                      thrpt    5         0.689 ±      5.531  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5       129.782 ±   1041.635    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                  thrpt    5       591.337 ±    566.138  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5    111699.123 ± 104494.490    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count                                    thrpt    5         9.000               counts
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time                                     thrpt    5        11.000                   ms
[info] ArrayOfDoublesBenchmark.readPlayJson                                                   thrpt    5      3766.948 ±     62.307   ops/s
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate                                    thrpt    5      1634.244 ±     27.497  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm                               thrpt    5    682880.181 ±      0.607    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                           thrpt    5         0.050 ±      0.146  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                      thrpt    5        20.918 ±     61.029    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                       thrpt    5      1670.191 ±     68.030  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                  thrpt    5    697887.040 ±  17948.866    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.count                                         thrpt    5        25.000               counts
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.time                                          thrpt    5        26.000                   ms
[info] ArrayOfDoublesBenchmark.writeCirce                                                     thrpt    5      5993.941 ±     68.735   ops/s
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate                                      thrpt    5       521.062 ±      6.144  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm                                 thrpt    5    136824.071 ±      0.012    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                             thrpt    5         0.714 ±      5.878  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                        thrpt    5       187.687 ±   1546.092    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                         thrpt    5       507.859 ±    645.751  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                    thrpt    5    133272.312 ± 168364.392    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.count                                           thrpt    5         8.000               counts
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.time                                            thrpt    5        12.000                   ms
[info] ArrayOfDoublesBenchmark.writeJacksonScala                                              thrpt    5      6939.401 ±     69.593   ops/s
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate                               thrpt    5       301.751 ±      2.992  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                          thrpt    5     68443.814 ±      0.723    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                      thrpt    5         0.021 ±      0.080  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5         4.728 ±     18.214    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                  thrpt    5       293.125 ±    131.315  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5     66497.559 ±  30182.318    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count                                    thrpt    5         5.000               counts
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time                                     thrpt    5         6.000                   ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScala                                             thrpt    5      7729.794 ±     77.048   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate                              thrpt    5       274.702 ±      2.870  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                         thrpt    5     55936.054 ±      0.008    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                     thrpt    5         0.773 ±      6.363  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                thrpt    5       157.028 ±   1292.299    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                 thrpt    5       284.951 ±    153.970  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5     58008.778 ±  30830.877    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count                                   thrpt    5         5.000               counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time                                    thrpt    5        12.000                   ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc                                     thrpt    5      7739.184 ±     45.508   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                      thrpt    5       203.209 ±      1.286  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                 thrpt    5     41328.053 ±      0.001    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space             thrpt    5         0.005 ±      0.040  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm        thrpt    5         0.955 ±      8.221    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space         thrpt    5       204.618 ±    440.456  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm    thrpt    5     41628.729 ±  89609.365    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count                           thrpt    5         4.000               counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time                            thrpt    5         9.000                   ms
[info] ArrayOfFloatsBenchmark.readCirce                                                       thrpt    5      4188.288 ±    144.988   ops/s
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate                                        thrpt    5      1470.567 ±     50.767  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm                                   thrpt    5    552600.100 ±      0.016    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space                               thrpt    5         0.117 ±      0.238  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                          thrpt    5        43.811 ±     88.858    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                           thrpt    5      1460.767 ±    717.596  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                      thrpt    5    548714.644 ± 260575.006    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.count                                             thrpt    5        22.000               counts
[info] ArrayOfFloatsBenchmark.readCirce:·gc.time                                              thrpt    5        20.000                   ms
[info] ArrayOfFloatsBenchmark.readJacksonScala                                                thrpt    5     11652.586 ±    246.120   ops/s
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate                                 thrpt    5       980.769 ±     21.301  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm                            thrpt    5    132471.595 ±     61.722    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                        thrpt    5         0.062 ±      0.057  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5         8.435 ±      7.663    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                    thrpt    5       927.473 ±    555.921  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5    125335.277 ±  76547.969    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.count                                      thrpt    5        14.000               counts
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.time                                       thrpt    5        16.000                   ms
[info] ArrayOfFloatsBenchmark.readJsoniterScala                                               thrpt    5     18757.428 ±    573.365   ops/s
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate                                thrpt    5        98.189 ±      2.993  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                           thrpt    5      8240.024 ±      0.009    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5         0.423 ±      3.577  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5        35.435 ±    299.604    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5       102.291 ±    539.351  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5      8581.487 ±  45247.793    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count                                     thrpt    5         2.000               counts
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time                                      thrpt    5         5.000                   ms
[info] ArrayOfFloatsBenchmark.readPlayJson                                                    thrpt    5      4397.800 ±     81.919   ops/s
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate                                     thrpt    5      1884.012 ±     38.154  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm                                thrpt    5    674346.363 ±   4083.591    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                            thrpt    5         0.067 ±      0.143  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                       thrpt    5        23.841 ±     51.171    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                        thrpt    5      1877.723 ±    693.725  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                   thrpt    5    672043.213 ± 245531.570    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.count                                          thrpt    5        28.000               counts
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.time                                           thrpt    5        31.000                   ms
[info] ArrayOfFloatsBenchmark.writeCirce                                                      thrpt    5      9255.014 ±   1523.361   ops/s
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate                                       thrpt    5       525.720 ±     86.834  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm                                  thrpt    5     89650.914 ±  27796.682    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                              thrpt    5         0.733 ±      5.817  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                         thrpt    5       126.399 ±   1004.858    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                          thrpt    5       573.368 ±    544.250  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                     thrpt    5     97435.930 ±  91081.578    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.count                                            thrpt    5         9.000               counts
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.time                                             thrpt    5        13.000                   ms
[info] ArrayOfFloatsBenchmark.writeJacksonScala                                               thrpt    5     11438.691 ±    715.889   ops/s
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate                                thrpt    5       341.201 ±     21.499  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                           thrpt    5     46941.867 ±      0.404    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                       thrpt    5         0.029 ±      0.134  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5         4.063 ±     18.956    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                   thrpt    5       359.592 ±    327.404  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5     49443.528 ±  44097.993    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count                                     thrpt    5         6.000               counts
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time                                      thrpt    5         6.000                   ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScala                                              thrpt    5     13037.885 ±     73.305   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate                               thrpt    5       318.501 ±      1.687  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                          thrpt    5     38448.034 ±      0.013    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                      thrpt    5         0.766 ±      6.433  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5        92.353 ±    775.767    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                  thrpt    5       350.249 ±    367.452  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5     42290.427 ±  44562.403    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count                                    thrpt    5         6.000               counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time                                     thrpt    5        11.000                   ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc                                      thrpt    5     13578.326 ±    122.265   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                       thrpt    5       247.699 ±      2.301  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                  thrpt    5     28712.032 ±      0.013    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space              thrpt    5         0.751 ±      6.451  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm         thrpt    5        87.354 ±    750.391    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space          thrpt    5       219.208 ±    487.261  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm     thrpt    5     25434.833 ±  56589.068    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count                            thrpt    5         4.000               counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time                             thrpt    5        10.000                   ms
[info] ArrayOfInstantsBenchmark.readCirce                                                     thrpt    5     10297.293 ±     62.332   ops/s
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate                                      thrpt    5      1677.807 ±     10.100  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm                                 thrpt    5    256445.334 ±     28.903    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space                             thrpt    5         0.071 ±      0.091  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                        thrpt    5        10.814 ±     13.933    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                         thrpt    5      1733.705 ±    517.912  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                    thrpt    5    265012.564 ±  80724.425    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.count                                           thrpt    5        26.000               counts
[info] ArrayOfInstantsBenchmark.readCirce:·gc.time                                            thrpt    5        26.000                   ms
[info] ArrayOfInstantsBenchmark.readJacksonScala                                              thrpt    5     10042.326 ±    254.493   ops/s
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate                               thrpt    5      1551.369 ±     39.488  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm                          thrpt    5    243144.387 ±     53.435    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                      thrpt    5         0.087 ±      0.174  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5        13.728 ±     27.427    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                  thrpt    5      1540.004 ±    679.698  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5    241487.444 ± 111298.311    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.count                                    thrpt    5        23.000               counts
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.time                                     thrpt    5        28.000                   ms
[info] ArrayOfInstantsBenchmark.readJsoniterScala                                             thrpt    5    100789.076 ±   4345.383   ops/s
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate                              thrpt    5       655.729 ±     28.333  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                         thrpt    5     10240.004 ±      0.001    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                     thrpt    5         0.067 ±      0.143  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                thrpt    5         1.041 ±      2.247    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                 thrpt    5       660.702 ±      3.229  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5     10318.812 ±    494.213    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count                                   thrpt    5        10.000               counts
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time                                    thrpt    5        10.000                   ms
[info] ArrayOfInstantsBenchmark.readPlayJson                                                  thrpt    5      5992.942 ±     50.030   ops/s
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate                                   thrpt    5      1582.385 ±     13.631  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm                              thrpt    5    415600.070 ±      0.011    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                          thrpt    5         0.058 ±      0.154  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                     thrpt    5        15.310 ±     40.467    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                      thrpt    5      1608.859 ±    575.975  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                 thrpt    5    422574.356 ± 152183.805    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.count                                        thrpt    5        24.000               counts
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.time                                         thrpt    5        25.000                   ms
[info] ArrayOfInstantsBenchmark.writeCirce                                                    thrpt    5     25096.870 ±    845.855   ops/s
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate                                     thrpt    5      1410.604 ±     47.785  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm                                thrpt    5     88463.659 ±     42.442    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                            thrpt    5         0.087 ±      0.119  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                       thrpt    5         5.495 ±      7.594    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                        thrpt    5      1393.036 ±    574.704  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                   thrpt    5     87376.262 ±  36579.562    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.count                                          thrpt    5        21.000               counts
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.time                                           thrpt    5        21.000                   ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScala                                            thrpt    5    233796.668 ±   4417.027   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate                             thrpt    5      1428.224 ±     26.951  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                        thrpt    5      9616.002 ±      0.001    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                    thrpt    5         0.083 ±      0.150  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm               thrpt    5         0.561 ±      1.016    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                thrpt    5      1393.219 ±    575.293  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5      9380.427 ±   3876.162    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count                                  thrpt    5        21.000               counts
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time                                   thrpt    5        19.000                   ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc                                    thrpt    5    233214.793 ±   2958.548   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                     thrpt    5       910.327 ±     11.737  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                thrpt    5      6144.002 ±      0.001    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space            thrpt    5         0.096 ±      0.134  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm       thrpt    5         0.646 ±      0.908    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space        thrpt    5       918.434 ±    560.525  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm   thrpt    5      6199.671 ±   3805.131    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count                          thrpt    5        14.000               counts
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.time                           thrpt    5        12.000                   ms
[info] ArrayOfInstantsBenchmark.writePlayJson                                                 thrpt    5     27870.445 ±    682.316   ops/s
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate                                  thrpt    5      1466.099 ±     35.651  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm                             thrpt    5     82792.016 ±      0.006    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                         thrpt    5         0.079 ±      0.132  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                    thrpt    5         4.469 ±      7.461    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                     thrpt    5      1451.569 ±    679.804  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                thrpt    5     81956.691 ±  37729.579    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.count                                       thrpt    5        22.000               counts
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.time                                        thrpt    5        27.000                   ms
[info] ArrayOfIntsBenchmark.readCirce                                                         thrpt    5     16720.083 ±    249.949   ops/s
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate                                          thrpt    5      2079.658 ±     30.139  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                     thrpt    5    195748.980 ±     24.221    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                 thrpt    5         0.142 ±      0.360  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5        13.324 ±     33.975    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                             thrpt    5      2080.634 ±    616.826  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5    195852.966 ±  58809.702    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.count                                               thrpt    5        31.000               counts
[info] ArrayOfIntsBenchmark.readCirce:·gc.time                                                thrpt    5        29.000                   ms
[info] ArrayOfIntsBenchmark.readJacksonScala                                                  thrpt    5     40870.364 ±   1260.907   ops/s
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                   thrpt    5       293.500 ±      9.100  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                              thrpt    5     11304.483 ±      4.075    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                          thrpt    5         0.029 ±      0.251  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5         1.122 ±      9.660    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                      thrpt    5       296.901 ±    144.720  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5     11438.124 ±   5661.808    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.count                                        thrpt    5         5.000               counts
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.time                                         thrpt    5         6.000                   ms
[info] ArrayOfIntsBenchmark.readJsoniterScala                                                 thrpt    5     91315.963 ±   1296.570   ops/s
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                  thrpt    5       478.057 ±      6.935  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                             thrpt    5      8240.005 ±      0.001    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                         thrpt    5         0.673 ±      5.614  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5        11.642 ±     97.161    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                     thrpt    5       445.614 ±    624.939  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5      7689.020 ±  10894.447    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.count                                       thrpt    5         7.000               counts
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.time                                        thrpt    5        10.000                   ms
[info] ArrayOfIntsBenchmark.readPlayJson                                                      thrpt    5      8620.586 ±    133.789   ops/s
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                       thrpt    5      3049.297 ±     46.177  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                  thrpt    5    556707.450 ±   2143.157    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                              thrpt    5         0.104 ±      0.204  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                         thrpt    5        18.996 ±     37.337    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                          thrpt    5      3048.702 ±     62.755  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5    556609.823 ±  17078.101    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.count                                            thrpt    5        45.000               counts
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.time                                             thrpt    5        49.000                   ms
[info] ArrayOfIntsBenchmark.writeCirce                                                        thrpt    5     25216.802 ±   7067.248   ops/s
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate                                         thrpt    5      1359.647 ±    381.272  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                    thrpt    5     84863.619 ±     42.324    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                thrpt    5         0.092 ±      0.134  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5         5.683 ±      7.975    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                            thrpt    5      1322.430 ±    886.755  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5     82583.351 ±  52043.712    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.count                                              thrpt    5        20.000               counts
[info] ArrayOfIntsBenchmark.writeCirce:·gc.time                                               thrpt    5        19.000                   ms
[info] ArrayOfIntsBenchmark.writeJacksonScala                                                 thrpt    5    100680.459 ±   1267.771   ops/s
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                  thrpt    5       812.037 ±     10.731  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                             thrpt    5     12692.323 ±      0.038    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                         thrpt    5         0.075 ±      0.185  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5         1.169 ±      2.873    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                     thrpt    5       850.934 ±    680.913  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5     13298.645 ±  10609.300    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.count                                       thrpt    5        13.000               counts
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.time                                        thrpt    5        15.000                   ms
[info] ArrayOfIntsBenchmark.writeJsoniterScala                                                thrpt    5    118159.251 ±   2739.672   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                 thrpt    5       503.368 ±     11.760  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                            thrpt    5      6704.004 ±      0.001    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5         0.759 ±      6.271  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5        10.152 ±     83.829    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5       509.388 ±    651.207  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5      6794.723 ±   8807.243    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count                                      thrpt    5         8.000               counts
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time                                       thrpt    5        11.000                   ms
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc                                        thrpt    5    154273.779 ±   1063.617   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                         thrpt    5        ≈ 10⁻⁴               MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                    thrpt    5         0.003 ±      0.001    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                              thrpt    5           ≈ 0               counts
[info] ArrayOfIntsBenchmark.writePlayJson                                                     thrpt    5      4192.645 ±    101.634   ops/s
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                      thrpt    5      1803.924 ±     43.634  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                 thrpt    5    677212.427 ±      0.485    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                             thrpt    5         0.029 ±      0.044  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                        thrpt    5        10.930 ±     16.347    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                         thrpt    5      1795.569 ±    727.874  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                    thrpt    5    673974.048 ± 267667.494    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.count                                           thrpt    5        27.000               counts
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.time                                            thrpt    5        28.000                   ms
[info] ArrayOfLocalDatesBenchmark.readCirce                                                   thrpt    5     28116.627 ±    742.611   ops/s
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate                                    thrpt    5      1526.465 ±     41.082  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm                               thrpt    5     85451.061 ±     95.114    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space                           thrpt    5         0.079 ±      0.104  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                      thrpt    5         4.428 ±      5.828    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                       thrpt    5      1529.129 ±    672.384  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                  thrpt    5     85560.429 ±  35905.741    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.count                                         thrpt    5        23.000               counts
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.time                                          thrpt    5        22.000                   ms
[info] ArrayOfLocalDatesBenchmark.readJacksonScala                                            thrpt    5     31292.715 ±    873.302   ops/s
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate                             thrpt    5      1429.075 ±     40.132  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm                        thrpt    5     71862.086 ±     52.273    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                    thrpt    5         0.062 ±      0.150  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm               thrpt    5         3.146 ±      7.584    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                thrpt    5      1404.885 ±    563.149  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5     70659.272 ±  28940.185    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count                                  thrpt    5        21.000               counts
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time                                   thrpt    5        25.000                   ms
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala                                           thrpt    5    270497.261 ±  19499.994   ops/s
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate                            thrpt    5       703.968 ±     50.903  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                       thrpt    5      4096.002 ±      0.001    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                   thrpt    5         0.075 ±      0.122  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm              thrpt    5         0.438 ±      0.726    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space               thrpt    5       727.708 ±    567.701  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm          thrpt    5      4231.308 ±   3193.495    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count                                 thrpt    5        11.000               counts
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time                                  thrpt    5        10.000                   ms
[info] ArrayOfLocalDatesBenchmark.readPlayJson                                                thrpt    5     17899.545 ±    319.977   ops/s
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate                                 thrpt    5      1819.114 ±     32.560  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm                            thrpt    5    159960.025 ±      0.013    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                        thrpt    5         0.058 ±      0.119  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                   thrpt    5         5.115 ±     10.349    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                    thrpt    5      1883.778 ±    706.856  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm               thrpt    5    165655.699 ±  62512.841    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count                                      thrpt    5        28.000               counts
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time                                       thrpt    5        33.000                   ms
[info] ArrayOfLocalDatesBenchmark.writeCirce                                                  thrpt    5     51957.536 ±   1172.520   ops/s
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate                                   thrpt    5      1371.047 ±     30.215  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm                              thrpt    5     41528.008 ±      0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                          thrpt    5         0.075 ±      0.134  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                     thrpt    5         2.271 ±      4.080    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                      thrpt    5      1325.830 ±     48.907  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                 thrpt    5     40160.866 ±   2255.320    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.count                                        thrpt    5        20.000               counts
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.time                                         thrpt    5        20.000                   ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala                                          thrpt    5   1151585.652 ±  39717.845   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate                           thrpt    5      1235.094 ±     42.950  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                      thrpt    5      1688.000 ±      0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                  thrpt    5         0.079 ±      0.067  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm             thrpt    5         0.108 ±      0.094    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space              thrpt    5      1188.559 ±    687.538  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm         thrpt    5      1624.401 ±    938.723    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count                                thrpt    5        18.000               counts
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time                                 thrpt    5        17.000                   ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc                                  thrpt    5   1409537.480 ±   1144.598   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                   thrpt    5        ≈ 10⁻⁴               MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm              thrpt    5        ≈ 10⁻⁴                 B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count                        thrpt    5           ≈ 0               counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson                                               thrpt    5     60215.939 ±    798.170   ops/s
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate                                thrpt    5      1401.252 ±     18.466  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm                           thrpt    5     36624.007 ±      0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                       thrpt    5         0.087 ±      0.164  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                  thrpt    5         2.287 ±      4.311    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                   thrpt    5      1384.511 ±    598.063  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm              thrpt    5     36187.269 ±  15671.802    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count                                     thrpt    5        21.000               counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time                                      thrpt    5        21.000                   ms
[info] ArrayOfLocalTimesBenchmark.readCirce                                                   thrpt    5     18316.030 ±    470.201   ops/s
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate                                    thrpt    5      1484.078 ±     38.304  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm                               thrpt    5    127509.789 ±     17.435    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                           thrpt    5         0.071 ±      0.091  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                      thrpt    5         6.088 ±      7.912    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                       thrpt    5      1529.788 ±    702.261  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                  thrpt    5    131466.589 ±  61370.784    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.count                                         thrpt    5        23.000               counts
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.time                                          thrpt    5        23.000                   ms
[info] ArrayOfLocalTimesBenchmark.readJacksonScala                                            thrpt    5     18733.431 ±    441.190   ops/s
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate                             thrpt    5      1360.792 ±     32.561  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                        thrpt    5    114328.717 ±     56.038    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                    thrpt    5         0.083 ±      0.098  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm               thrpt    5         7.002 ±      8.326    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                thrpt    5      1402.543 ±    559.985  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5    117808.719 ±  45467.674    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count                                  thrpt    5        21.000               counts
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time                                   thrpt    5        26.000                   ms
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala                                           thrpt    5    299133.032 ±   8254.981   ops/s
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate                            thrpt    5       764.811 ±     20.910  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                       thrpt    5      4024.001 ±      0.001    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                   thrpt    5         0.071 ±      0.166  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm              thrpt    5         0.373 ±      0.873    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space               thrpt    5       727.749 ±    567.505  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm          thrpt    5      3829.128 ±   2986.336    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count                                 thrpt    5        11.000               counts
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time                                  thrpt    5        10.000                   ms
[info] ArrayOfLocalTimesBenchmark.readPlayJson                                                thrpt    5     13701.566 ±    182.954   ops/s
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate                                 thrpt    5      1744.739 ±     23.817  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                            thrpt    5    200400.201 ±      0.884    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                        thrpt    5         0.058 ±      0.154  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                   thrpt    5         6.686 ±     17.654    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                    thrpt    5      1748.279 ±    589.135  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm               thrpt    5    200783.174 ±  66107.548    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count                                      thrpt    5        26.000               counts
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time                                       thrpt    5        30.000                   ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala                                          thrpt    5   1457290.725 ±  40116.326   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                           thrpt    5      1207.392 ±     33.566  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                      thrpt    5      1304.000 ±      0.001    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                  thrpt    5         0.083 ±      0.098  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm             thrpt    5         0.090 ±      0.107    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space              thrpt    5      1188.795 ±    706.995  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm         thrpt    5      1283.703 ±    756.591    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count                                thrpt    5        18.000               counts
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time                                 thrpt    5        16.000                   ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc                                  thrpt    5   1495716.781 ±  45669.284   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                   thrpt    5        ≈ 10⁻⁴               MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm              thrpt    5        ≈ 10⁻⁴                 B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                        thrpt    5           ≈ 0               counts
[info] ArrayOfLongsBenchmark.readCirce                                                        thrpt    5     16120.677 ±    268.532   ops/s
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate                                         thrpt    5      2168.318 ±     37.104  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm                                    thrpt    5    211684.528 ±     26.957    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                thrpt    5         0.112 ±      0.193  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5        10.959 ±     18.702    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                            thrpt    5      2216.219 ±    676.811  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5    216326.704 ±  63941.318    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.count                                              thrpt    5        33.000               counts
[info] ArrayOfLongsBenchmark.readCirce:·gc.time                                               thrpt    5        32.000                   ms
[info] ArrayOfLongsBenchmark.readJacksonScala                                                 thrpt    5     30912.581 ±    156.626   ops/s
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate                                  thrpt    5       422.322 ±      2.641  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm                             thrpt    5     21501.807 ±     49.880    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                         thrpt    5         0.029 ±      0.176  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5         1.485 ±      8.947    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                     thrpt    5       441.930 ±    743.976  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5     22505.843 ±  37944.833    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.count                                       thrpt    5         7.000               counts
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.time                                        thrpt    5         8.000                   ms
[info] ArrayOfLongsBenchmark.readJsoniterScala                                                thrpt    5     58826.436 ±    459.741   ops/s
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate                                 thrpt    5       611.706 ±      4.824  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                            thrpt    5     16368.007 ±      0.001    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5         0.699 ±      5.568  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5        18.751 ±    149.515    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5       657.115 ±      6.795  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5     17583.197 ±    304.752    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.count                                      thrpt    5        10.000               counts
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.time                                       thrpt    5        11.000                   ms
[info] ArrayOfLongsBenchmark.readPlayJson                                                     thrpt    5      8183.820 ±    141.160   ops/s
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate                                      thrpt    5      2969.303 ±     51.412  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm                                 thrpt    5    571088.116 ±      0.560    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                             thrpt    5         0.067 ±      0.088  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                        thrpt    5        12.814 ±     16.937    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                         thrpt    5      2912.315 ±    698.709  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                    thrpt    5    560117.415 ± 133309.268    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.count                                           thrpt    5        43.000               counts
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.time                                            thrpt    5        45.000                   ms
[info] ArrayOfLongsBenchmark.writeCirce                                                       thrpt    5     22270.971 ±   4930.515   ops/s
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate                                        thrpt    5      1547.014 ±    342.487  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm                                   thrpt    5    109320.101 ±     39.777    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                               thrpt    5         0.112 ±      0.185  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                          thrpt    5         7.828 ±     11.599    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                           thrpt    5      1593.254 ±    551.770  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                      thrpt    5    112689.106 ±  38197.718    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.count                                             thrpt    5        24.000               counts
[info] ArrayOfLongsBenchmark.writeCirce:·gc.time                                              thrpt    5        24.000                   ms
[info] ArrayOfLongsBenchmark.writeJacksonScala                                                thrpt    5     57352.844 ±    661.766   ops/s
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate                                 thrpt    5       714.795 ±      8.359  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                            thrpt    5     19616.256 ±      0.090    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                        thrpt    5         0.067 ±      0.154  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5         1.829 ±      4.243    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                    thrpt    5       718.269 ±    584.194  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5     19708.846 ±  15950.545    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.count                                      thrpt    5        11.000               counts
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.time                                       thrpt    5        13.000                   ms
[info] ArrayOfLongsBenchmark.writeJsoniterScala                                               thrpt    5     63078.615 ±   4090.735   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate                                thrpt    5       420.694 ±     27.062  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                           thrpt    5     10496.007 ±      0.001    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5         0.762 ±      6.385  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5        19.588 ±    164.224    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5       378.266 ±    609.945  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5      9492.555 ±  16162.474    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count                                     thrpt    5         6.000               counts
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time                                      thrpt    5         8.000                   ms
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc                                       thrpt    5     77116.326 ±    231.289   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                        thrpt    5        ≈ 10⁻⁴               MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                   thrpt    5         0.005 ±      0.001    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count                             thrpt    5           ≈ 0               counts
[info] ArrayOfLongsBenchmark.writePlayJson                                                    thrpt    5      3635.747 ±    130.456   ops/s
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate                                     thrpt    5      1572.633 ±     56.074  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm                                thrpt    5    680768.585 ±      3.517    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                            thrpt    5         0.037 ±      0.119  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                       thrpt    5        16.202 ±     51.198    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                        thrpt    5      1587.956 ±    598.745  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                   thrpt    5    687560.078 ± 264966.210    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.count                                          thrpt    5        24.000               counts
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.time                                           thrpt    5        24.000                   ms
[info] ArrayOfShortsBenchmark.readCirce                                                       thrpt    5     18095.163 ±    404.976   ops/s
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate                                        thrpt    5      2351.401 ±     53.400  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm                                   thrpt    5    204534.030 ±     15.336    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space                               thrpt    5         0.137 ±      0.122  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                          thrpt    5        11.955 ±     10.700    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                           thrpt    5      2356.267 ±     79.295  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                      thrpt    5    204959.402 ±   6519.922    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.count                                             thrpt    5        35.000               counts
[info] ArrayOfShortsBenchmark.readCirce:·gc.time                                              thrpt    5        35.000                   ms
[info] ArrayOfShortsBenchmark.readJacksonScala                                                thrpt    5     44384.824 ±   3246.814   ops/s
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate                                 thrpt    5       175.051 ±     12.818  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm                            thrpt    5      6208.009 ±      0.001    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                        thrpt    5         0.008 ±      0.044  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5         0.297 ±      1.567    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                    thrpt    5       204.609 ±    440.435  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5      7281.375 ±  15686.188    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.count                                      thrpt    5         4.000               counts
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.time                                       thrpt    5         5.000                   ms
[info] ArrayOfShortsBenchmark.readJsoniterScala                                               thrpt    5    100309.669 ±   1586.768   ops/s
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate                                thrpt    5       266.148 ±      4.157  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                           thrpt    5      4176.004 ±      0.001    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5         0.654 ±      5.556  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5        10.325 ±     87.787    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5       219.498 ±    488.459  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5      3445.605 ±   7686.875    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.count                                     thrpt    5         4.000               counts
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.time                                      thrpt    5        10.000                   ms
[info] ArrayOfShortsBenchmark.readPlayJson                                                    thrpt    5      9383.332 ±    123.620   ops/s
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate                                     thrpt    5      3356.258 ±     34.166  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm                                thrpt    5    563013.956 ±   1979.610    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                            thrpt    5         0.092 ±      0.146  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                       thrpt    5        15.351 ±     24.341    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                        thrpt    5      3324.078 ±    576.781  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                   thrpt    5    557630.298 ±  98131.182    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.count                                          thrpt    5        49.000               counts
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.time                                           thrpt    5        51.000                   ms
[info] ArrayOfShortsBenchmark.writeCirce                                                      thrpt    5     26477.351 ±   6267.301   ops/s
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate                                       thrpt    5      1473.907 ±    350.272  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm                                  thrpt    5     87614.641 ±     40.376    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                              thrpt    5         0.125 ±      0.204  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                         thrpt    5         7.508 ±     12.528    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                          thrpt    5      1458.765 ±    686.561  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                     thrpt    5     86738.701 ±  37149.077    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.count                                            thrpt    5        22.000               counts
[info] ArrayOfShortsBenchmark.writeCirce:·gc.time                                             thrpt    5        21.000                   ms
[info] ArrayOfShortsBenchmark.writeJacksonScala                                               thrpt    5    111305.300 ±   2236.696   ops/s
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate                                thrpt    5       849.419 ±     17.086  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                           thrpt    5     12011.364 ±      0.041    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                       thrpt    5         0.054 ±      0.134  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5         0.766 ±      1.900    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                   thrpt    5       852.972 ±    701.009  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5     12070.425 ±  10094.258    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.count                                     thrpt    5        13.000               counts
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.time                                      thrpt    5        14.000                   ms
[info] ArrayOfShortsBenchmark.writeJsoniterScala                                              thrpt    5    133304.382 ±   5283.087   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate                               thrpt    5       535.930 ±     21.304  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                          thrpt    5      6328.003 ±      0.001    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                      thrpt    5         0.781 ±      6.188  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5         9.167 ±     72.624    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                  thrpt    5       523.392 ±    688.408  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5      6187.277 ±   8218.672    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count                                    thrpt    5         8.000               counts
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time                                     thrpt    5         9.000                   ms
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc                                      thrpt    5    164235.125 ±   7464.336   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                       thrpt    5        ≈ 10⁻⁴               MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                  thrpt    5         0.002 ±      0.001    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count                            thrpt    5           ≈ 0               counts
[info] ArrayOfShortsBenchmark.writePlayJson                                                   thrpt    5      4225.969 ±    144.405   ops/s
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate                                    thrpt    5      1942.171 ±     66.788  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm                               thrpt    5    723379.480 ±      0.748    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                           thrpt    5         0.025 ±      0.067  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                      thrpt    5         9.326 ±     25.034    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                       thrpt    5      1933.308 ±    607.055  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                  thrpt    5    720120.548 ± 226966.621    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.count                                         thrpt    5        29.000               counts
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.time                                          thrpt    5        38.000                   ms
[info] ArrayOfUUIDsBenchmark.readCirce                                                        thrpt    5     41144.684 ±   1588.882   ops/s
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate                                         thrpt    5       821.568 ±     32.154  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm                                    thrpt    5     31424.010 ±      0.002    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                thrpt    5         0.071 ±      0.201  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5         2.720 ±      7.784    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                            thrpt    5       786.222 ±    687.871  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5     30085.177 ±  26582.579    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.count                                              thrpt    5        12.000               counts
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.time                                               thrpt    5        11.000                   ms
[info] ArrayOfUUIDsBenchmark.readJacksonScala                                                 thrpt    5     82837.357 ±   2639.903   ops/s
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate                                  thrpt    5       871.558 ±     27.639  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm                             thrpt    5     16560.005 ±      0.001    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                         thrpt    5         0.042 ±      0.098  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5         0.793 ±      1.873    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                     thrpt    5       858.756 ±    704.138  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5     16326.060 ±  13567.984    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count                                       thrpt    5        13.000               counts
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time                                        thrpt    5        15.000                   ms
[info] ArrayOfUUIDsBenchmark.readJsoniterScala                                                thrpt    5    240713.609 ±   6430.922   ops/s
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate                                 thrpt    5       783.032 ±     21.336  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                            thrpt    5      5120.002 ±      0.001    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5         0.054 ±      0.185  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5         0.353 ±      1.201    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5       789.480 ±    696.990  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5      5159.679 ±   4497.966    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count                                      thrpt    5        12.000               counts
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time                                       thrpt    5        12.000                   ms
[info] ArrayOfUUIDsBenchmark.readPlayJson                                                     thrpt    5     24620.095 ±   1173.871   ops/s
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate                                      thrpt    5      1156.972 ±     54.943  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm                                 thrpt    5     73960.018 ±      0.009    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                             thrpt    5         0.046 ±      0.132  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                        thrpt    5         2.941 ±      8.582    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                         thrpt    5      1192.105 ±    698.433  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                    thrpt    5     76217.986 ±  44851.645    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.count                                           thrpt    5        18.000               counts
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.time                                            thrpt    5        19.000                   ms
[info] ArrayOfUUIDsBenchmark.writeCirce                                                       thrpt    5     52504.168 ±   1424.971   ops/s
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate                                        thrpt    5      1112.977 ±     30.472  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm                                   thrpt    5     33360.008 ±      0.001    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                               thrpt    5         0.062 ±      0.080  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                          thrpt    5         1.873 ±      2.405    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                           thrpt    5      1118.752 ±    674.514  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                      thrpt    5     33556.328 ±  20937.328    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.count                                             thrpt    5        17.000               counts
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.time                                              thrpt    5        16.000                   ms
[info] ArrayOfUUIDsBenchmark.writeJacksonScala                                                thrpt    5     89198.763 ±   1000.423   ops/s
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate                                 thrpt    5      1221.970 ±     13.655  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                            thrpt    5     21560.000 ±      0.072    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                        thrpt    5         0.100 ±      0.088  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5         1.764 ±      1.562    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                    thrpt    5      1265.112 ±    574.000  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5     22323.834 ±  10212.115    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count                                      thrpt    5        19.000               counts
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time                                       thrpt    5        23.000                   ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala                                               thrpt    5    245496.897 ±  12043.394   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate                                thrpt    5       782.378 ±     38.304  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                           thrpt    5      5016.002 ±      0.001    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5         0.062 ±      0.150  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5         0.402 ±      0.976    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5       785.498 ±    692.492  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5      5043.644 ±   4605.026    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count                                     thrpt    5        12.000               counts
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time                                      thrpt    5        11.000                   ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc                                       thrpt    5    274734.451 ±    224.877   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                        thrpt    5        ≈ 10⁻⁴               MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                   thrpt    5         0.001 ±      0.001    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count                             thrpt    5           ≈ 0               counts
[info] ArrayOfUUIDsBenchmark.writePlayJson                                                    thrpt    5     71841.253 ±   1166.334   ops/s
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate                                     thrpt    5      1065.516 ±     17.302  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm                                thrpt    5     23344.006 ±      0.108    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                            thrpt    5         0.087 ±      0.207  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                       thrpt    5         1.914 ±      4.526    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                        thrpt    5      1044.990 ±    559.079  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                   thrpt    5     22895.242 ±  12274.679    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.count                                          thrpt    5        16.000               counts
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.time                                           thrpt    5        17.000                   ms
[info] ArrayOfZoneIdsBenchmark.readCirce                                                      thrpt    5     67905.885 ±   2261.445   ops/s
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate                                       thrpt    5      1472.798 ±     49.236  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm                                  thrpt    5     34136.006 ±      0.001    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space                              thrpt    5         0.071 ±      0.091  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                         thrpt    5         1.638 ±      2.089    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                          thrpt    5      1517.024 ±    696.663  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                     thrpt    5     35180.697 ±  16843.140    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.count                                            thrpt    5        23.000               counts
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.time                                             thrpt    5        24.000                   ms
[info] ArrayOfZoneIdsBenchmark.readJacksonScala                                               thrpt    5     73275.373 ±   1148.484   ops/s
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate                                thrpt    5      1044.002 ±     15.711  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm                           thrpt    5     22424.006 ±      0.001    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                       thrpt    5         0.071 ±      0.134  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5         1.521 ±      2.889    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                   thrpt    5      1059.959 ±    601.543  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5     22773.688 ±  13180.785    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count                                     thrpt    5        16.000               counts
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time                                      thrpt    5        19.000                   ms
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala                                              thrpt    5     89724.446 ±   1081.243   ops/s
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate                               thrpt    5      1181.188 ±     14.366  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                          thrpt    5     20720.005 ±      0.001    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                      thrpt    5         0.096 ±      0.146  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5         1.679 ±      2.540    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                  thrpt    5      1184.784 ±    695.565  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5     20783.354 ±  12209.949    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count                                    thrpt    5        18.000               counts
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time                                     thrpt    5        18.000                   ms
[info] ArrayOfZoneIdsBenchmark.readPlayJson                                                   thrpt    5     42057.310 ±   1093.071   ops/s
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate                                    thrpt    5      2065.277 ±     54.085  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm                               thrpt    5     77287.932 ±      0.670    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                           thrpt    5         0.067 ±      0.036  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                      thrpt    5         2.494 ±      1.378    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                       thrpt    5      2088.614 ±    608.293  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                  thrpt    5     78144.545 ±  21453.985    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count                                         thrpt    5        31.000               counts
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time                                          thrpt    5        36.000                   ms
[info] ArrayOfZoneIdsBenchmark.writeCirce                                                     thrpt    5    111027.653 ±   5046.405   ops/s
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate                                      thrpt    5       787.714 ±     35.757  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm                                 thrpt    5     11168.004 ±      0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                             thrpt    5         0.062 ±      0.170  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                        thrpt    5         0.888 ±      2.432    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                         thrpt    5       778.063 ±    688.580  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                    thrpt    5     11045.635 ±  10074.328    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.count                                           thrpt    5        12.000               counts
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.time                                            thrpt    5        13.000                   ms
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala                                              thrpt    5    147912.690 ±   1759.262   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate                               thrpt    5       514.204 ±      6.097  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                          thrpt    5      5472.003 ±      0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                      thrpt    5         0.071 ±      0.251  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5         0.754 ±      2.673    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                  thrpt    5       520.868 ±    685.615  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5      5546.123 ±   7334.892    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count                                    thrpt    5         8.000               counts
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time                                     thrpt    5        10.000                   ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala                                             thrpt    5    770095.778 ±  28020.837   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate                              thrpt    5       994.146 ±     36.080  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                         thrpt    5      2032.001 ±      0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                     thrpt    5         0.087 ±      0.119  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                thrpt    5         0.178 ±      0.238    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                 thrpt    5       983.329 ±     25.274  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5      2010.111 ±    117.373    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count                                   thrpt    5        15.000               counts
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time                                    thrpt    5        14.000                   ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc                                     thrpt    5    781205.407 ±   6749.763   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                      thrpt    5        ≈ 10⁻⁴               MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                 thrpt    5         0.001 ±      0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count                           thrpt    5           ≈ 0               counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson                                                  thrpt    5    183161.999 ±   5093.862   ops/s
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate                                   thrpt    5       963.544 ±     26.997  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm                              thrpt    5      8280.002 ±      0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                          thrpt    5         0.067 ±      0.105  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                     thrpt    5         0.572 ±      0.896    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                      thrpt    5       970.783 ±     31.210  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                 thrpt    5      8342.312 ±    223.793    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count                                        thrpt    5        15.000               counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time                                         thrpt    5        17.000                   ms
[info] ArraysBenchmark.readCirce                                                              thrpt    5    934349.877 ±  18906.516   ops/s
[info] ArraysBenchmark.readCirce:·gc.alloc.rate                                               thrpt    5      3025.422 ±     61.232  MB/sec
[info] ArraysBenchmark.readCirce:·gc.alloc.rate.norm                                          thrpt    5      5096.000 ±      0.001    B/op
[info] ArraysBenchmark.readCirce:·gc.churn.PS_Eden_Space                                      thrpt    5         0.142 ±      0.036  MB/sec
[info] ArraysBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                 thrpt    5         0.238 ±      0.063    B/op
[info] ArraysBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                  thrpt    5      2977.674 ±    551.317  MB/sec
[info] ArraysBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                             thrpt    5      5015.168 ±    885.485    B/op
[info] ArraysBenchmark.readCirce:·gc.count                                                    thrpt    5        44.000               counts
[info] ArraysBenchmark.readCirce:·gc.time                                                     thrpt    5        40.000                   ms
[info] ArraysBenchmark.readJacksonScala                                                       thrpt    5   1769796.958 ±  65689.169   ops/s
[info] ArraysBenchmark.readJacksonScala:·gc.alloc.rate                                        thrpt    5      1664.101 ±     61.513  MB/sec
[info] ArraysBenchmark.readJacksonScala:·gc.alloc.rate.norm                                   thrpt    5      1480.000 ±      0.001    B/op
[info] ArraysBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                               thrpt    5         0.100 ±      0.119  MB/sec
[info] ArraysBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                          thrpt    5         0.089 ±      0.104    B/op
[info] ArraysBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                           thrpt    5      1675.166 ±     60.328  MB/sec
[info] ArraysBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                      thrpt    5      1489.854 ±     22.715    B/op
[info] ArraysBenchmark.readJacksonScala:·gc.count                                             thrpt    5        25.000               counts
[info] ArraysBenchmark.readJacksonScala:·gc.time                                              thrpt    5        30.000                   ms
[info] ArraysBenchmark.readJsoniterScala                                                      thrpt    5   9199575.331 ± 251984.666   ops/s
[info] ArraysBenchmark.readJsoniterScala:·gc.alloc.rate                                       thrpt    5      2290.952 ±     62.887  MB/sec
[info] ArraysBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                  thrpt    5       392.000 ±      0.001    B/op
[info] ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                              thrpt    5         0.079 ±      0.119  MB/sec
[info] ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                         thrpt    5         0.014 ±      0.020    B/op
[info] ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                          thrpt    5      2291.995 ±    602.119  MB/sec
[info] ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     thrpt    5       392.169 ±    101.875    B/op
[info] ArraysBenchmark.readJsoniterScala:·gc.count                                            thrpt    5        34.000               counts
[info] ArraysBenchmark.readJsoniterScala:·gc.time                                             thrpt    5        31.000                   ms
[info] ArraysBenchmark.readPlayJson                                                           thrpt    5    326820.030 ±  15124.884   ops/s
[info] ArraysBenchmark.readPlayJson:·gc.alloc.rate                                            thrpt    5      1925.369 ±     89.471  MB/sec
[info] ArraysBenchmark.readPlayJson:·gc.alloc.rate.norm                                       thrpt    5      9272.001 ±      0.001    B/op
[info] ArraysBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                   thrpt    5         0.092 ±      0.091  MB/sec
[info] ArraysBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                              thrpt    5         0.441 ±      0.440    B/op
[info] ArraysBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                               thrpt    5      1880.062 ±    675.075  MB/sec
[info] ArraysBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                          thrpt    5      9050.709 ±   3065.658    B/op
[info] ArraysBenchmark.readPlayJson:·gc.count                                                 thrpt    5        28.000               counts
[info] ArraysBenchmark.readPlayJson:·gc.time                                                  thrpt    5        34.000                   ms
[info] ArraysBenchmark.writeCirce                                                             thrpt    5   1016086.591 ±  37976.824   ops/s
[info] ArraysBenchmark.writeCirce:·gc.alloc.rate                                              thrpt    5      2236.158 ±     84.125  MB/sec
[info] ArraysBenchmark.writeCirce:·gc.alloc.rate.norm                                         thrpt    5      3464.000 ±      0.001    B/op
[info] ArraysBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                     thrpt    5         0.117 ±      0.185  MB/sec
[info] ArraysBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                thrpt    5         0.181 ±      0.284    B/op
[info] ArraysBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                 thrpt    5      2216.101 ±    741.192  MB/sec
[info] ArraysBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                            thrpt    5      3434.071 ±   1201.180    B/op
[info] ArraysBenchmark.writeCirce:·gc.count                                                   thrpt    5        33.000               counts
[info] ArraysBenchmark.writeCirce:·gc.time                                                    thrpt    5        32.000                   ms
[info] ArraysBenchmark.writeJacksonScala                                                      thrpt    5   3808944.314 ± 103572.590   ops/s
[info] ArraysBenchmark.writeJacksonScala:·gc.alloc.rate                                       thrpt    5      2168.471 ±     59.369  MB/sec
[info] ArraysBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                  thrpt    5       896.000 ±      0.001    B/op
[info] ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                              thrpt    5         0.108 ±      0.067  MB/sec
[info] ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                         thrpt    5         0.045 ±      0.027    B/op
[info] ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                          thrpt    5      2222.967 ±    706.056  MB/sec
[info] ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                     thrpt    5       918.612 ±    295.754    B/op
[info] ArraysBenchmark.writeJacksonScala:·gc.count                                            thrpt    5        33.000               counts
[info] ArraysBenchmark.writeJacksonScala:·gc.time                                             thrpt    5        38.000                   ms
[info] ArraysBenchmark.writeJsoniterScala                                                     thrpt    5  20201616.477 ± 680321.640   ops/s
[info] ArraysBenchmark.writeJsoniterScala:·gc.alloc.rate                                      thrpt    5       924.169 ±     31.379  MB/sec
[info] ArraysBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                 thrpt    5        72.000 ±      0.001    B/op
[info] ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                             thrpt    5         0.087 ±      0.088  MB/sec
[info] ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                        thrpt    5         0.007 ±      0.007    B/op
[info] ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                         thrpt    5       918.830 ±    571.466  MB/sec
[info] ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    thrpt    5        71.608 ±     45.029    B/op
[info] ArraysBenchmark.writeJsoniterScala:·gc.count                                           thrpt    5        14.000               counts
[info] ArraysBenchmark.writeJsoniterScala:·gc.time                                            thrpt    5        14.000                   ms
[info] ArraysBenchmark.writePlayJson                                                          thrpt    5    462730.254 ±  10322.681   ops/s
[info] ArraysBenchmark.writePlayJson:·gc.alloc.rate                                           thrpt    5      1618.291 ±     36.070  MB/sec
[info] ArraysBenchmark.writePlayJson:·gc.alloc.rate.norm                                      thrpt    5      5504.001 ±      0.001    B/op
[info] ArraysBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                  thrpt    5         0.087 ±      0.143  MB/sec
[info] ArraysBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                             thrpt    5         0.297 ±      0.483    B/op
[info] ArraysBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                              thrpt    5      1604.806 ±    593.841  MB/sec
[info] ArraysBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                         thrpt    5      5459.396 ±   2071.886    B/op
[info] ArraysBenchmark.writePlayJson:·gc.count                                                thrpt    5        24.000               counts
[info] ArraysBenchmark.writePlayJson:·gc.time                                                 thrpt    5        29.000                   ms
[info] BitSetsBenchmark.readJacksonScala                                                      thrpt    5   2442749.808 ±  40853.398   ops/s
[info] BitSetsBenchmark.readJacksonScala:·gc.alloc.rate                                       thrpt    5      1477.542 ±     25.384  MB/sec
[info] BitSetsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                  thrpt    5       952.000 ±      0.001    B/op
[info] BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                              thrpt    5         0.112 ±      0.146  MB/sec
[info] BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                         thrpt    5         0.073 ±      0.095    B/op
[info] BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                          thrpt    5      1469.817 ±    711.179  MB/sec
[info] BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                     thrpt    5       947.014 ±    457.610    B/op
[info] BitSetsBenchmark.readJacksonScala:·gc.count                                            thrpt    5        22.000               counts
[info] BitSetsBenchmark.readJacksonScala:·gc.time                                             thrpt    5        26.000                   ms
[info] BitSetsBenchmark.readJsoniterScala                                                     thrpt    5   5198075.310 ± 146071.294   ops/s
[info] BitSetsBenchmark.readJsoniterScala:·gc.alloc.rate                                      thrpt    5       686.888 ±     19.224  MB/sec
[info] BitSetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                 thrpt    5       208.000 ±      0.001    B/op
[info] BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                             thrpt    5         0.079 ±      0.200  MB/sec
[info] BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                        thrpt    5         0.024 ±      0.060    B/op
[info] BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                         thrpt    5       657.667 ±      4.988  MB/sec
[info] BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    thrpt    5       199.162 ±      6.795    B/op
[info] BitSetsBenchmark.readJsoniterScala:·gc.count                                           thrpt    5        10.000               counts
[info] BitSetsBenchmark.readJsoniterScala:·gc.time                                            thrpt    5         9.000                   ms
[info] BitSetsBenchmark.readPlayJson                                                          thrpt    5    416484.974 ±  11043.939   ops/s
[info] BitSetsBenchmark.readPlayJson:·gc.alloc.rate                                           thrpt    5      1890.252 ±     50.081  MB/sec
[info] BitSetsBenchmark.readPlayJson:·gc.alloc.rate.norm                                      thrpt    5      7144.001 ±      0.001    B/op
[info] BitSetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                  thrpt    5         0.108 ±      0.143  MB/sec
[info] BitSetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                             thrpt    5         0.410 ±      0.551    B/op
[info] BitSetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                              thrpt    5      1879.946 ±    695.591  MB/sec
[info] BitSetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                         thrpt    5      7104.965 ±   2615.484    B/op
[info] BitSetsBenchmark.readPlayJson:·gc.count                                                thrpt    5        28.000               counts
[info] BitSetsBenchmark.readPlayJson:·gc.time                                                 thrpt    5        32.000                   ms
[info] BitSetsBenchmark.writeJacksonScala                                                     thrpt    5   2714978.096 ± 107604.913   ops/s
[info] BitSetsBenchmark.writeJacksonScala:·gc.alloc.rate                                      thrpt    5      1435.125 ±     56.754  MB/sec
[info] BitSetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                 thrpt    5       832.000 ±      0.001    B/op
[info] BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                             thrpt    5         0.100 ±      0.143  MB/sec
[info] BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                        thrpt    5         0.058 ±      0.086    B/op
[info] BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                         thrpt    5      1400.868 ±    557.418  MB/sec
[info] BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                    thrpt    5       812.745 ±    352.046    B/op
[info] BitSetsBenchmark.writeJacksonScala:·gc.count                                           thrpt    5        21.000               counts
[info] BitSetsBenchmark.writeJacksonScala:·gc.time                                            thrpt    5        25.000                   ms
[info] BitSetsBenchmark.writeJsoniterScala                                                    thrpt    5   7062847.878 ± 131151.091   ops/s
[info] BitSetsBenchmark.writeJsoniterScala:·gc.alloc.rate                                     thrpt    5      1076.912 ±     19.995  MB/sec
[info] BitSetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                thrpt    5       240.000 ±      0.001    B/op
[info] BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                            thrpt    5         0.092 ±      0.122  MB/sec
[info] BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                       thrpt    5         0.020 ±      0.027    B/op
[info] BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                        thrpt    5      1118.555 ±    698.632  MB/sec
[info] BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   thrpt    5       249.311 ±    156.519    B/op
[info] BitSetsBenchmark.writeJsoniterScala:·gc.count                                          thrpt    5        17.000               counts
[info] BitSetsBenchmark.writeJsoniterScala:·gc.time                                           thrpt    5        15.000                   ms
[info] BitSetsBenchmark.writePlayJson                                                         thrpt    5    714881.510 ±   7343.420   ops/s
[info] BitSetsBenchmark.writePlayJson:·gc.alloc.rate                                          thrpt    5      2071.291 ±     21.756  MB/sec
[info] BitSetsBenchmark.writePlayJson:·gc.alloc.rate.norm                                     thrpt    5      4560.001 ±      0.001    B/op
[info] BitSetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                 thrpt    5         0.117 ±      0.091  MB/sec
[info] BitSetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                            thrpt    5         0.257 ±      0.203    B/op
[info] BitSetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                             thrpt    5      2019.500 ±     63.171  MB/sec
[info] BitSetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                        thrpt    5      4445.956 ±    114.477    B/op
[info] BitSetsBenchmark.writePlayJson:·gc.count                                               thrpt    5        30.000               counts
[info] BitSetsBenchmark.writePlayJson:·gc.time                                                thrpt    5        35.000                   ms
[info] ExtractFieldsBenchmark.readCirce                                                       thrpt    5    800475.999 ±   9811.140   ops/s
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate                                        thrpt    5      2604.416 ±     32.077  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm                                   thrpt    5      5120.001 ±      0.001    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space                               thrpt    5         0.108 ±      0.067  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                          thrpt    5         0.213 ±      0.131    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                           thrpt    5      2628.266 ±    552.318  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                      thrpt    5      5166.510 ±   1052.043    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.count                                             thrpt    5        39.000               counts
[info] ExtractFieldsBenchmark.readCirce:·gc.time                                              thrpt    5        35.000                   ms
[info] ExtractFieldsBenchmark.readJacksonScala                                                thrpt    5    979468.505 ±  39359.738   ops/s
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate                                 thrpt    5      1214.838 ±     49.125  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm                            thrpt    5      1952.000 ±      0.001    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                        thrpt    5         0.087 ±      0.067  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5         0.141 ±      0.108    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                    thrpt    5      1261.604 ±    570.369  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5      2028.300 ±    951.804    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.count                                      thrpt    5        19.000               counts
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.time                                       thrpt    5        22.000                   ms
[info] ExtractFieldsBenchmark.readJsoniterScala                                               thrpt    5   8418806.396 ± 237847.244   ops/s
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate                                thrpt    5       385.127 ±     10.893  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                           thrpt    5        72.000 ±      0.001    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5         0.646 ±      5.286  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5         0.121 ±      0.993    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5       367.422 ±    310.091  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5        68.677 ±     57.544    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.count                                     thrpt    5         6.000               counts
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.time                                      thrpt    5        10.000                   ms
[info] ExtractFieldsBenchmark.readPlayJson                                                    thrpt    5    338064.538 ±   1052.461   ops/s
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate                                     thrpt    5      1876.319 ±      6.439  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm                                thrpt    5      8736.001 ±      0.001    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                            thrpt    5         0.075 ±      0.091  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                       thrpt    5         0.349 ±      0.426    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                        thrpt    5      1878.212 ±    733.612  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                   thrpt    5      8744.521 ±   3401.867    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.count                                          thrpt    5        28.000               counts
[info] ExtractFieldsBenchmark.readPlayJson:·gc.time                                           thrpt    5        33.000                   ms
[info] GoogleMapsAPIBenchmark.readCirce                                                       thrpt    5      7785.637 ±    141.493   ops/s
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate                                        thrpt    5      1873.785 ±     33.525  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm                                   thrpt    5    378792.054 ±      0.009    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space                               thrpt    5         0.107 ±      0.274  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                          thrpt    5        21.709 ±     55.489    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space                           thrpt    5      1870.383 ±    733.861  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                      thrpt    5    378225.068 ± 153644.828    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.count                                             thrpt    5        28.000               counts
[info] GoogleMapsAPIBenchmark.readCirce:·gc.time                                              thrpt    5        28.000                   ms
[info] GoogleMapsAPIBenchmark.readJacksonScala                                                thrpt    5     14666.366 ±    443.813   ops/s
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate                                 thrpt    5       371.693 ±     11.238  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                            thrpt    5     39888.030 ±      0.011    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                        thrpt    5         0.087 ±      0.753  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5         9.406 ±     80.987    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                    thrpt    5       361.022 ±    324.180  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5     38786.780 ±  35938.724    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.count                                      thrpt    5         6.000               counts
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.time                                       thrpt    5         7.000                   ms
[info] GoogleMapsAPIBenchmark.readJsoniterScala                                               thrpt    5     24634.130 ±    838.207   ops/s
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                thrpt    5       420.946 ±     14.500  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                           thrpt    5     26896.018 ±      0.008    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5         0.700 ±      5.669  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5        44.657 ±    361.541    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5       430.814 ±    571.214  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5     27549.464 ±  36719.977    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count                                     thrpt    5         7.000               counts
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time                                      thrpt    5        12.000                   ms
[info] GoogleMapsAPIBenchmark.readPlayJson                                                    thrpt    5      2453.230 ±     32.303   ops/s
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate                                     thrpt    5      1485.005 ±     19.876  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                thrpt    5    952664.179 ±      0.083    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                            thrpt    5         0.033 ±      0.134  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                       thrpt    5        21.408 ±     86.289    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                        thrpt    5      1533.926 ±    703.368  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                   thrpt    5    984268.453 ± 459481.650    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.count                                          thrpt    5        23.000               counts
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.time                                           thrpt    5        29.000                   ms
[info] GoogleMapsAPIBenchmark.writeCirce                                                      thrpt    5      7610.158 ±    116.296   ops/s
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate                                       thrpt    5      1637.006 ±     25.182  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm                                  thrpt    5    338568.055 ±      0.009    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space                              thrpt    5         0.071 ±      0.193  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                         thrpt    5        14.665 ±     40.054    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                          thrpt    5      1595.529 ±    553.142  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                     thrpt    5    330052.824 ± 117176.500    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.count                                            thrpt    5        24.000               counts
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.time                                             thrpt    5        24.000                   ms
[info] GoogleMapsAPIBenchmark.writeJacksonScala                                               thrpt    5     42595.107 ±    848.478   ops/s
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                thrpt    5       617.260 ±     12.020  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                           thrpt    5     22807.847 ±      0.334    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                       thrpt    5         0.150 ±      0.988  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5         5.561 ±     36.727    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                   thrpt    5       651.583 ±     19.361  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5     24076.499 ±    817.509    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count                                     thrpt    5        10.000               counts
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time                                      thrpt    5        12.000                   ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScala                                              thrpt    5     62097.641 ±   2947.715   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                               thrpt    5       469.058 ±     22.509  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                          thrpt    5     11888.007 ±      0.001    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                      thrpt    5         0.793 ±      6.473  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5        20.289 ±    165.613    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                  thrpt    5       443.405 ±    621.435  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5     11263.259 ±  16113.402    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count                                    thrpt    5         7.000               counts
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time                                     thrpt    5        11.000                   ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc                                      thrpt    5     75449.118 ±   1717.356   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                       thrpt    5         1.151 ±      0.026  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                  thrpt    5        24.005 ±      0.001    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                            thrpt    5           ≈ 0               counts
[info] GoogleMapsAPIBenchmark.writePlayJson                                                   thrpt    5      5342.901 ±     58.198   ops/s
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate                                    thrpt    5      1653.817 ±     17.935  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm                               thrpt    5    487216.171 ±      2.797    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                           thrpt    5         0.037 ±      0.143  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                      thrpt    5        11.053 ±     42.425    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                       thrpt    5      1672.165 ±     62.296  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                  thrpt    5    492615.902 ±  14491.149    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.count                                         thrpt    5        25.000               counts
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.time                                          thrpt    5        31.000                   ms
[info] IntAndLongMapsBenchmark.readJsoniterScala                                              thrpt    5   5543654.688 ±  75602.548   ops/s
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.alloc.rate                               thrpt    5      1662.462 ±     22.321  MB/sec
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                          thrpt    5       472.000 ±      0.001    B/op
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                      thrpt    5         0.100 ±      0.174  MB/sec
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5         0.028 ±      0.049    B/op
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                  thrpt    5      1669.206 ±    887.643  MB/sec
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5       473.808 ±    248.900    B/op
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.count                                    thrpt    5        25.000               counts
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.time                                     thrpt    5        24.000                   ms
[info] IntAndLongMapsBenchmark.readPlayJson                                                   thrpt    5    374699.721 ±   2366.719   ops/s
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.alloc.rate                                    thrpt    5      2093.014 ±     12.652  MB/sec
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.alloc.rate.norm                               thrpt    5      8792.001 ±      0.001    B/op
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                           thrpt    5         0.083 ±      0.113  MB/sec
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                      thrpt    5         0.350 ±      0.476    B/op
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                       thrpt    5      2153.794 ±    696.070  MB/sec
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                  thrpt    5      9047.788 ±   2951.978    B/op
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.count                                         thrpt    5        32.000               counts
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.time                                          thrpt    5        39.000                   ms
[info] IntAndLongMapsBenchmark.writeJsoniterScala                                             thrpt    5   3330372.445 ± 132472.850   ops/s
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.alloc.rate                              thrpt    5       541.747 ±     21.551  MB/sec
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                         thrpt    5       256.000 ±      0.001    B/op
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                     thrpt    5         0.786 ±      6.276  MB/sec
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                thrpt    5         0.371 ±      2.960    B/op
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                 thrpt    5       523.103 ±    687.917  MB/sec
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5       246.782 ±    319.913    B/op
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.count                                   thrpt    5         8.000               counts
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.time                                    thrpt    5        10.000                   ms
[info] IntAndLongMapsBenchmark.writePlayJson                                                  thrpt    5    346993.286 ±   1488.571   ops/s
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.alloc.rate                                   thrpt    5      1331.621 ±      5.953  MB/sec
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.alloc.rate.norm                              thrpt    5      6040.001 ±      0.001    B/op
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                          thrpt    5         0.087 ±      0.143  MB/sec
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                     thrpt    5         0.397 ±      0.651    B/op
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                      thrpt    5      1330.742 ±     49.030  MB/sec
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                 thrpt    5      6035.986 ±    206.857    B/op
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.count                                        thrpt    5        20.000               counts
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.time                                         thrpt    5        24.000                   ms
[info] IterablesBenchmark.readCirce                                                           thrpt    5    626774.899 ±   5615.085   ops/s
[info] IterablesBenchmark.readCirce:·gc.alloc.rate                                            thrpt    5      2264.943 ±     20.374  MB/sec
[info] IterablesBenchmark.readCirce:·gc.alloc.rate.norm                                       thrpt    5      5688.001 ±      0.001    B/op
[info] IterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                   thrpt    5         0.108 ±      0.088  MB/sec
[info] IterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                              thrpt    5         0.272 ±      0.220    B/op
[info] IterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                               thrpt    5      2218.067 ±    730.780  MB/sec
[info] IterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                          thrpt    5      5570.428 ±   1842.245    B/op
[info] IterablesBenchmark.readCirce:·gc.count                                                 thrpt    5        33.000               counts
[info] IterablesBenchmark.readCirce:·gc.time                                                  thrpt    5        32.000                   ms
[info] IterablesBenchmark.readJacksonScala                                                    thrpt    5    644915.477 ±  22080.169   ops/s
[info] IterablesBenchmark.readJacksonScala:·gc.alloc.rate                                     thrpt    5       750.636 ±     25.784  MB/sec
[info] IterablesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                thrpt    5      1832.001 ±      0.001    B/op
[info] IterablesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                            thrpt    5         0.067 ±      0.164  MB/sec
[info] IterablesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                       thrpt    5         0.163 ±      0.403    B/op
[info] IterablesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                        thrpt    5       785.595 ±    690.119  MB/sec
[info] IterablesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                   thrpt    5      1915.156 ±   1633.328    B/op
[info] IterablesBenchmark.readJacksonScala:·gc.count                                          thrpt    5        12.000               counts
[info] IterablesBenchmark.readJacksonScala:·gc.time                                           thrpt    5        13.000                   ms
[info] IterablesBenchmark.readJsoniterScala                                                   thrpt    5   3613862.502 ±  57517.165   ops/s
[info] IterablesBenchmark.readJsoniterScala:·gc.alloc.rate                                    thrpt    5      1506.222 ±     24.436  MB/sec
[info] IterablesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                               thrpt    5       656.000 ±      0.001    B/op
[info] IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                           thrpt    5         0.096 ±      0.156  MB/sec
[info] IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5         0.042 ±      0.068    B/op
[info] IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                       thrpt    5      1532.805 ±    704.716  MB/sec
[info] IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5       667.480 ±    302.964    B/op
[info] IterablesBenchmark.readJsoniterScala:·gc.count                                         thrpt    5        23.000               counts
[info] IterablesBenchmark.readJsoniterScala:·gc.time                                          thrpt    5        21.000                   ms
[info] IterablesBenchmark.readPlayJson                                                        thrpt    5    233191.475 ±   5838.915   ops/s
[info] IterablesBenchmark.readPlayJson:·gc.alloc.rate                                         thrpt    5      1622.554 ±     41.323  MB/sec
[info] IterablesBenchmark.readPlayJson:·gc.alloc.rate.norm                                    thrpt    5     10952.002 ±      0.001    B/op
[info] IterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                thrpt    5         0.087 ±      0.067  MB/sec
[info] IterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                           thrpt    5         0.590 ±      0.458    B/op
[info] IterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                            thrpt    5      1604.675 ±    593.698  MB/sec
[info] IterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                       thrpt    5     10828.440 ±   3868.474    B/op
[info] IterablesBenchmark.readPlayJson:·gc.count                                              thrpt    5        24.000               counts
[info] IterablesBenchmark.readPlayJson:·gc.time                                               thrpt    5        29.000                   ms
[info] IterablesBenchmark.writeCirce                                                          thrpt    5    853640.798 ±  22614.031   ops/s
[info] IterablesBenchmark.writeCirce:·gc.alloc.rate                                           thrpt    5      1961.307 ±     51.810  MB/sec
[info] IterablesBenchmark.writeCirce:·gc.alloc.rate.norm                                      thrpt    5      3616.000 ±      0.001    B/op
[info] IterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                  thrpt    5         0.112 ±      0.193  MB/sec
[info] IterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                             thrpt    5         0.207 ±      0.355    B/op
[info] IterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                              thrpt    5      1940.440 ±    553.513  MB/sec
[info] IterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                         thrpt    5      3578.517 ±   1074.767    B/op
[info] IterablesBenchmark.writeCirce:·gc.count                                                thrpt    5        29.000               counts
[info] IterablesBenchmark.writeCirce:·gc.time                                                 thrpt    5        32.000                   ms
[info] IterablesBenchmark.writeJacksonScala                                                   thrpt    5   1581311.713 ±  40761.292   ops/s
[info] IterablesBenchmark.writeJacksonScala:·gc.alloc.rate                                    thrpt    5      1036.910 ±     26.831  MB/sec
[info] IterablesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                               thrpt    5      1032.000 ±      0.001    B/op
[info] IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                           thrpt    5         0.096 ±      0.122  MB/sec
[info] IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5         0.095 ±      0.119    B/op
[info] IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                       thrpt    5      1055.507 ±    570.860  MB/sec
[info] IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5      1050.309 ±    559.061    B/op
[info] IterablesBenchmark.writeJacksonScala:·gc.count                                         thrpt    5        16.000               counts
[info] IterablesBenchmark.writeJacksonScala:·gc.time                                          thrpt    5        20.000                   ms
[info] IterablesBenchmark.writeJsoniterScala                                                  thrpt    5   6970254.181 ± 141794.623   ops/s
[info] IterablesBenchmark.writeJsoniterScala:·gc.alloc.rate                                   thrpt    5       779.505 ±     15.861  MB/sec
[info] IterablesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                              thrpt    5       176.000 ±      0.001    B/op
[info] IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                          thrpt    5         0.058 ±      0.132  MB/sec
[info] IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5         0.013 ±      0.030    B/op
[info] IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                      thrpt    5       785.233 ±    692.830  MB/sec
[info] IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5       177.394 ±    158.662    B/op
[info] IterablesBenchmark.writeJsoniterScala:·gc.count                                        thrpt    5        12.000               counts
[info] IterablesBenchmark.writeJsoniterScala:·gc.time                                         thrpt    5        11.000                   ms
[info] IterablesBenchmark.writePlayJson                                                       thrpt    5    522728.539 ±  10120.134   ops/s
[info] IterablesBenchmark.writePlayJson:·gc.alloc.rate                                        thrpt    5      1803.930 ±     34.873  MB/sec
[info] IterablesBenchmark.writePlayJson:·gc.alloc.rate.norm                                   thrpt    5      5432.001 ±      0.001    B/op
[info] IterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                               thrpt    5         0.108 ±      0.119  MB/sec
[info] IterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                          thrpt    5         0.326 ±      0.356    B/op
[info] IterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                           thrpt    5      1809.849 ±    670.433  MB/sec
[info] IterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5      5450.765 ±   2064.535    B/op
[info] IterablesBenchmark.writePlayJson:·gc.count                                             thrpt    5        27.000               counts
[info] IterablesBenchmark.writePlayJson:·gc.time                                              thrpt    5        32.000                   ms
[info] MapsBenchmark.readCirce                                                                thrpt    5    647246.931 ±  18756.506   ops/s
[info] MapsBenchmark.readCirce:·gc.alloc.rate                                                 thrpt    5      2243.731 ±     64.763  MB/sec
[info] MapsBenchmark.readCirce:·gc.alloc.rate.norm                                            thrpt    5      5456.001 ±      0.001    B/op
[info] MapsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                        thrpt    5         0.096 ±      0.201  MB/sec
[info] MapsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                   thrpt    5         0.233 ±      0.489    B/op
[info] MapsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                    thrpt    5      2216.198 ±    665.733  MB/sec
[info] MapsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                               thrpt    5      5387.762 ±   1530.366    B/op
[info] MapsBenchmark.readCirce:·gc.count                                                      thrpt    5        33.000               counts
[info] MapsBenchmark.readCirce:·gc.time                                                       thrpt    5        30.000                   ms
[info] MapsBenchmark.readJsoniterScala                                                        thrpt    5   5686203.158 ±  25958.292   ops/s
[info] MapsBenchmark.readJsoniterScala:·gc.alloc.rate                                         thrpt    5      1416.156 ±      6.916  MB/sec
[info] MapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                    thrpt    5       392.000 ±      0.001    B/op
[info] MapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                thrpt    5         0.087 ±      0.236  MB/sec
[info] MapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                           thrpt    5         0.024 ±      0.066    B/op
[info] MapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                            thrpt    5      1396.169 ±    553.824  MB/sec
[info] MapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       thrpt    5       386.506 ±    155.308    B/op
[info] MapsBenchmark.readJsoniterScala:·gc.count                                              thrpt    5        21.000               counts
[info] MapsBenchmark.readJsoniterScala:·gc.time                                               thrpt    5        19.000                   ms
[info] MapsBenchmark.readPlayJson                                                             thrpt    5    388332.151 ±   5537.149   ops/s
[info] MapsBenchmark.readPlayJson:·gc.alloc.rate                                              thrpt    5      2080.604 ±     29.013  MB/sec
[info] MapsBenchmark.readPlayJson:·gc.alloc.rate.norm                                         thrpt    5      8432.001 ±      0.001    B/op
[info] MapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                     thrpt    5         0.108 ±      0.119  MB/sec
[info] MapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                thrpt    5         0.439 ±      0.487    B/op
[info] MapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                 thrpt    5      2087.883 ±    620.659  MB/sec
[info] MapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                            thrpt    5      8462.581 ±   2585.094    B/op
[info] MapsBenchmark.readPlayJson:·gc.count                                                   thrpt    5        31.000               counts
[info] MapsBenchmark.readPlayJson:·gc.time                                                    thrpt    5        36.000                   ms
[info] MapsBenchmark.writeCirce                                                               thrpt    5    468271.010 ±  10929.207   ops/s
[info] MapsBenchmark.writeCirce:·gc.alloc.rate                                                thrpt    5      1225.766 ±     29.069  MB/sec
[info] MapsBenchmark.writeCirce:·gc.alloc.rate.norm                                           thrpt    5      4120.001 ±      0.001    B/op
[info] MapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                       thrpt    5         0.087 ±      0.154  MB/sec
[info] MapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                  thrpt    5         0.294 ±      0.519    B/op
[info] MapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                   thrpt    5      1251.428 ±    555.563  MB/sec
[info] MapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                              thrpt    5      4207.370 ±   1903.108    B/op
[info] MapsBenchmark.writeCirce:·gc.count                                                     thrpt    5        19.000               counts
[info] MapsBenchmark.writeCirce:·gc.time                                                      thrpt    5        18.000                   ms
[info] MapsBenchmark.writeJsoniterScala                                                       thrpt    5   3386669.381 ± 126723.066   ops/s
[info] MapsBenchmark.writeJsoniterScala:·gc.alloc.rate                                        thrpt    5       654.146 ±     24.167  MB/sec
[info] MapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                   thrpt    5       304.000 ±      0.001    B/op
[info] MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                               thrpt    5         0.058 ±      0.143  MB/sec
[info] MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                          thrpt    5         0.027 ±      0.067    B/op
[info] MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                           thrpt    5       653.612 ±      3.691  MB/sec
[info] MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      thrpt    5       303.774 ±     11.089    B/op
[info] MapsBenchmark.writeJsoniterScala:·gc.count                                             thrpt    5        10.000               counts
[info] MapsBenchmark.writeJsoniterScala:·gc.time                                              thrpt    5         9.000                   ms
[info] MapsBenchmark.writePlayJson                                                            thrpt    5    349315.768 ±   2046.379   ops/s
[info] MapsBenchmark.writePlayJson:·gc.alloc.rate                                             thrpt    5      1269.494 ±      6.884  MB/sec
[info] MapsBenchmark.writePlayJson:·gc.alloc.rate.norm                                        thrpt    5      5720.001 ±      0.001    B/op
[info] MapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                    thrpt    5         0.075 ±      0.201  MB/sec
[info] MapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                               thrpt    5         0.338 ±      0.907    B/op
[info] MapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                thrpt    5      1263.201 ±    603.405  MB/sec
[info] MapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                           thrpt    5      5692.396 ±   2742.749    B/op
[info] MapsBenchmark.writePlayJson:·gc.count                                                  thrpt    5        19.000               counts
[info] MapsBenchmark.writePlayJson:·gc.time                                                   thrpt    5        22.000                   ms
[info] MissingReqFieldBenchmark.readCirce                                                     thrpt    5   2131569.482 ±  39151.664   ops/s
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate                                      thrpt    5      3087.757 ±     57.380  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm                                 thrpt    5      2280.000 ±      0.001    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space                             thrpt    5         0.137 ±      0.122  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                        thrpt    5         0.101 ±      0.088    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space                         thrpt    5      3043.690 ±     85.051  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                    thrpt    5      2247.551 ±     98.124    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.count                                           thrpt    5        45.000               counts
[info] MissingReqFieldBenchmark.readCirce:·gc.time                                            thrpt    5        42.000                   ms
[info] MissingReqFieldBenchmark.readJacksonScala                                              thrpt    5    298139.412 ±   2819.743   ops/s
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate                               thrpt    5       536.473 ±      5.157  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm                          thrpt    5      2832.001 ±      0.001    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                      thrpt    5         0.071 ±      0.399  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5         0.374 ±      2.109    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                  thrpt    5       506.738 ±    647.066  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5      2675.663 ±   3423.741    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.count                                    thrpt    5         8.000               counts
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.time                                     thrpt    5        11.000                   ms
[info] MissingReqFieldBenchmark.readJsoniterScala                                             thrpt    5    644898.554 ±  27643.143   ops/s
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate                              thrpt    5       409.708 ±     17.594  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm                         thrpt    5      1000.001 ±      0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                     thrpt    5         0.650 ±      5.296  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                thrpt    5         1.583 ±     12.901    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                 thrpt    5       433.346 ±    574.334  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5      1055.979 ±   1370.603    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.count                                   thrpt    5         7.000               counts
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.time                                    thrpt    5        11.000                   ms
[info] MissingReqFieldBenchmark.readJsoniterStackless                                         thrpt    5   3805714.403 ±  70208.193   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate                          thrpt    5      1238.000 ±     22.753  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm                     thrpt    5       512.000 ±      0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space                 thrpt    5         0.079 ±      0.088  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space.norm            thrpt    5         0.033 ±      0.036    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space             thrpt    5      1196.730 ±    707.571  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space.norm        thrpt    5       494.823 ±    289.194    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.count                               thrpt    5        18.000               counts
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.time                                thrpt    5        19.000                   ms
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump                                   thrpt    5   4018014.863 ± 152603.432   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate                    thrpt    5       347.199 ±     13.136  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm               thrpt    5       136.000 ±      0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space           thrpt    5         0.641 ±      5.352  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space.norm      thrpt    5         0.249 ±      2.080    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space       thrpt    5       301.370 ±    160.164  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space.norm  thrpt    5       117.971 ±     59.965    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count                         thrpt    5         5.000               counts
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time                          thrpt    5         9.000                   ms
[info] MissingReqFieldBenchmark.readPlayJson                                                  thrpt    5    192108.077 ±   6482.259   ops/s
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate                                   thrpt    5      1226.554 ±     41.026  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm                              thrpt    5     10048.002 ±      0.001    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                          thrpt    5         0.067 ±      0.143  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                     thrpt    5         0.545 ±      1.173    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                      thrpt    5      1258.926 ±    570.076  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                 thrpt    5     10312.777 ±   4656.159    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.count                                        thrpt    5        19.000               counts
[info] MissingReqFieldBenchmark.readPlayJson:·gc.time                                         thrpt    5        24.000                   ms
[info] MutableIterablesBenchmark.readCirce                                                    thrpt    5    718776.146 ±  28464.653   ops/s
[info] MutableIterablesBenchmark.readCirce:·gc.alloc.rate                                     thrpt    5      2747.223 ±    106.788  MB/sec
[info] MutableIterablesBenchmark.readCirce:·gc.alloc.rate.norm                                thrpt    5      6016.001 ±      0.001    B/op
[info] MutableIterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space                            thrpt    5         0.075 ±      0.122  MB/sec
[info] MutableIterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                       thrpt    5         0.165 ±      0.270    B/op
[info] MutableIterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                        thrpt    5      2767.570 ±    502.169  MB/sec
[info] MutableIterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                   thrpt    5      6060.241 ±   1034.064    B/op
[info] MutableIterablesBenchmark.readCirce:·gc.count                                          thrpt    5        41.000               counts
[info] MutableIterablesBenchmark.readCirce:·gc.time                                           thrpt    5        38.000                   ms
[info] MutableIterablesBenchmark.readJsoniterScala                                            thrpt    5   3823648.020 ± 128114.008   ops/s
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.alloc.rate                             thrpt    5      2467.967 ±     82.875  MB/sec
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                        thrpt    5      1016.000 ±      0.001    B/op
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                    thrpt    5         0.096 ±      0.091  MB/sec
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm               thrpt    5         0.039 ±      0.038    B/op
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                thrpt    5      2496.115 ±    688.242  MB/sec
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5      1027.804 ±    295.881    B/op
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.count                                  thrpt    5        37.000               counts
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.time                                   thrpt    5        33.000                   ms
[info] MutableIterablesBenchmark.readPlayJson                                                 thrpt    5    259215.623 ±  12205.923   ops/s
[info] MutableIterablesBenchmark.readPlayJson:·gc.alloc.rate                                  thrpt    5      1851.178 ±     88.104  MB/sec
[info] MutableIterablesBenchmark.readPlayJson:·gc.alloc.rate.norm                             thrpt    5     11240.002 ±      0.001    B/op
[info] MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                         thrpt    5         0.104 ±      0.098  MB/sec
[info] MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                    thrpt    5         0.633 ±      0.616    B/op
[info] MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                     thrpt    5      1878.211 ±    703.361  MB/sec
[info] MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                thrpt    5     11410.083 ±   4511.539    B/op
[info] MutableIterablesBenchmark.readPlayJson:·gc.count                                       thrpt    5        28.000               counts
[info] MutableIterablesBenchmark.readPlayJson:·gc.time                                        thrpt    5        34.000                   ms
[info] MutableIterablesBenchmark.writeCirce                                                   thrpt    5    797003.229 ±  22332.782   ops/s
[info] MutableIterablesBenchmark.writeCirce:·gc.alloc.rate                                    thrpt    5      1741.953 ±     48.341  MB/sec
[info] MutableIterablesBenchmark.writeCirce:·gc.alloc.rate.norm                               thrpt    5      3440.001 ±      0.001    B/op
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                           thrpt    5         0.104 ±      0.113  MB/sec
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                      thrpt    5         0.206 ±      0.224    B/op
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                       thrpt    5      1799.549 ±    699.045  MB/sec
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                  thrpt    5      3553.972 ±   1386.970    B/op
[info] MutableIterablesBenchmark.writeCirce:·gc.count                                         thrpt    5        27.000               counts
[info] MutableIterablesBenchmark.writeCirce:·gc.time                                          thrpt    5        26.000                   ms
[info] MutableIterablesBenchmark.writeJacksonScala                                            thrpt    5   1681931.175 ±  41111.664   ops/s
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.alloc.rate                             thrpt    5       914.705 ±     21.961  MB/sec
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                        thrpt    5       856.000 ±      0.001    B/op
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                    thrpt    5         0.096 ±      0.146  MB/sec
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm               thrpt    5         0.090 ±      0.137    B/op
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                thrpt    5       919.728 ±    550.804  MB/sec
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5       861.179 ±    526.848    B/op
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.count                                  thrpt    5        14.000               counts
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.time                                   thrpt    5        17.000                   ms
[info] MutableIterablesBenchmark.writeJsoniterScala                                           thrpt    5   4654366.227 ± 106397.045   ops/s
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.alloc.rate                            thrpt    5       354.856 ±      8.097  MB/sec
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                       thrpt    5       120.000 ±      0.001    B/op
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                   thrpt    5         0.763 ±      6.352  MB/sec
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm              thrpt    5         0.259 ±      2.158    B/op
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space               thrpt    5       364.227 ±    636.660  MB/sec
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm          thrpt    5       123.338 ±    217.540    B/op
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.count                                 thrpt    5         6.000               counts
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.time                                  thrpt    5        10.000                   ms
[info] MutableIterablesBenchmark.writePlayJson                                                thrpt    5    564869.183 ±  11885.832   ops/s
[info] MutableIterablesBenchmark.writePlayJson:·gc.alloc.rate                                 thrpt    5      1914.990 ±     40.347  MB/sec
[info] MutableIterablesBenchmark.writePlayJson:·gc.alloc.rate.norm                            thrpt    5      5336.001 ±      0.001    B/op
[info] MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                        thrpt    5         0.087 ±      0.236  MB/sec
[info] MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                   thrpt    5         0.244 ±      0.665    B/op
[info] MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                    thrpt    5      1881.598 ±    732.164  MB/sec
[info] MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm               thrpt    5      5244.761 ±   2118.314    B/op
[info] MutableIterablesBenchmark.writePlayJson:·gc.count                                      thrpt    5        28.000               counts
[info] MutableIterablesBenchmark.writePlayJson:·gc.time                                       thrpt    5        32.000                   ms
[info] MutableMapsBenchmark.readJsoniterScala                                                 thrpt    5   3521711.437 ±  84600.592   ops/s
[info] MutableMapsBenchmark.readJsoniterScala:·gc.alloc.rate                                  thrpt    5      1664.612 ±     40.401  MB/sec
[info] MutableMapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                             thrpt    5       744.000 ±      0.001    B/op
[info] MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                         thrpt    5         0.117 ±      0.072  MB/sec
[info] MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5         0.052 ±      0.032    B/op
[info] MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                     thrpt    5      1669.662 ±     60.733  MB/sec
[info] MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5       746.282 ±     33.062    B/op
[info] MutableMapsBenchmark.readJsoniterScala:·gc.count                                       thrpt    5        25.000               counts
[info] MutableMapsBenchmark.readJsoniterScala:·gc.time                                        thrpt    5        22.000                   ms
[info] MutableMapsBenchmark.readPlayJson                                                      thrpt    5    324573.912 ±   8451.028   ops/s
[info] MutableMapsBenchmark.readPlayJson:·gc.alloc.rate                                       thrpt    5      1781.712 ±     44.807  MB/sec
[info] MutableMapsBenchmark.readPlayJson:·gc.alloc.rate.norm                                  thrpt    5      8640.001 ±      0.001    B/op
[info] MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                              thrpt    5         0.083 ±      0.057  MB/sec
[info] MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                         thrpt    5         0.404 ±      0.275    B/op
[info] MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                          thrpt    5      1744.482 ±    589.730  MB/sec
[info] MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5      8463.642 ±   3097.214    B/op
[info] MutableMapsBenchmark.readPlayJson:·gc.count                                            thrpt    5        26.000               counts
[info] MutableMapsBenchmark.readPlayJson:·gc.time                                             thrpt    5        30.000                   ms
[info] MutableMapsBenchmark.writeCirce                                                        thrpt    5    460398.327 ±  13786.145   ops/s
[info] MutableMapsBenchmark.writeCirce:·gc.alloc.rate                                         thrpt    5      1177.016 ±     35.202  MB/sec
[info] MutableMapsBenchmark.writeCirce:·gc.alloc.rate.norm                                    thrpt    5      4024.001 ±      0.001    B/op
[info] MutableMapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                thrpt    5         0.075 ±      0.072  MB/sec
[info] MutableMapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5         0.256 ±      0.240    B/op
[info] MutableMapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                            thrpt    5      1184.685 ±    685.382  MB/sec
[info] MutableMapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5      4052.630 ±   2411.995    B/op
[info] MutableMapsBenchmark.writeCirce:·gc.count                                              thrpt    5        18.000               counts
[info] MutableMapsBenchmark.writeCirce:·gc.time                                               thrpt    5        17.000                   ms
[info] MutableMapsBenchmark.writeJsoniterScala                                                thrpt    5   2815787.994 ±  56063.362   ops/s
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.alloc.rate                                 thrpt    5       572.445 ±     11.388  MB/sec
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                            thrpt    5       320.000 ±      0.001    B/op
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5         0.788 ±      6.298  MB/sec
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5         0.442 ±      3.531    B/op
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5       588.351 ±    564.036  MB/sec
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5       328.827 ±    314.484    B/op
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.count                                      thrpt    5         9.000               counts
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.time                                       thrpt    5        10.000                   ms
[info] MutableMapsBenchmark.writePlayJson                                                     thrpt    5    343287.764 ±   6747.705   ops/s
[info] MutableMapsBenchmark.writePlayJson:·gc.alloc.rate                                      thrpt    5      1317.306 ±     25.555  MB/sec
[info] MutableMapsBenchmark.writePlayJson:·gc.alloc.rate.norm                                 thrpt    5      6040.001 ±      0.001    B/op
[info] MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                             thrpt    5         0.075 ±      0.107  MB/sec
[info] MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                        thrpt    5         0.344 ±      0.491    B/op
[info] MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                         thrpt    5      1330.261 ±     51.012  MB/sec
[info] MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                    thrpt    5      6099.393 ±    196.075    B/op
[info] MutableMapsBenchmark.writePlayJson:·gc.count                                           thrpt    5        20.000               counts
[info] MutableMapsBenchmark.writePlayJson:·gc.time                                            thrpt    5        24.000                   ms
[info] PrimitivesBenchmark.readCirce                                                          thrpt    5    691371.229 ±  30709.585   ops/s
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate                                           thrpt    5      2129.382 ±     94.100  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm                                      thrpt    5      4848.001 ±      0.001    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  thrpt    5         0.112 ±      0.122  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             thrpt    5         0.256 ±      0.272    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              thrpt    5      2144.171 ±    733.542  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         thrpt    5      4880.858 ±   1605.774    B/op
[info] PrimitivesBenchmark.readCirce:·gc.count                                                thrpt    5        32.000               counts
[info] PrimitivesBenchmark.readCirce:·gc.time                                                 thrpt    5        29.000                   ms
[info] PrimitivesBenchmark.readJacksonScala                                                   thrpt    5   1530769.832 ±  44663.666   ops/s
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate                                    thrpt    5      1159.316 ±     33.557  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm                               thrpt    5      1192.000 ±      0.001    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                           thrpt    5         0.104 ±      0.188  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5         0.107 ±      0.192    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                       thrpt    5      1126.926 ±    701.450  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5      1158.698 ±    720.627    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.count                                         thrpt    5        17.000               counts
[info] PrimitivesBenchmark.readJacksonScala:·gc.time                                          thrpt    5        20.000                   ms
[info] PrimitivesBenchmark.readJsoniterScala                                                  thrpt    5   7058956.570 ±  79985.081   ops/s
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate                                   thrpt    5       215.254 ±      2.439  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              thrpt    5        48.000 ±      0.001    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          thrpt    5         0.005 ±      0.031  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5         0.001 ±      0.007    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      thrpt    5       204.610 ±    440.438  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5        45.685 ±     98.341    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.count                                        thrpt    5         4.000               counts
[info] PrimitivesBenchmark.readJsoniterScala:·gc.time                                         thrpt    5        10.000                   ms
[info] PrimitivesBenchmark.readPlayJson                                                       thrpt    5    239535.649 ±   4685.380   ops/s
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate                                        thrpt    5      1648.477 ±     32.919  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm                                   thrpt    5     10832.002 ±      0.001    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               thrpt    5         0.096 ±      0.072  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          thrpt    5         0.629 ±      0.465    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           thrpt    5      1604.864 ±    620.347  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5     10541.304 ±   3896.193    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.count                                             thrpt    5        24.000               counts
[info] PrimitivesBenchmark.readPlayJson:·gc.time                                              thrpt    5        28.000                   ms
[info] PrimitivesBenchmark.writeCirce                                                         thrpt    5    941240.718 ±  14050.416   ops/s
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate                                          thrpt    5      1492.741 ±     22.068  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm                                     thrpt    5      2496.000 ±      0.001    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 thrpt    5         0.083 ±      0.080  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5         0.139 ±      0.134    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             thrpt    5      1524.176 ±    702.682  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5      2548.763 ±   1181.848    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.count                                               thrpt    5        23.000               counts
[info] PrimitivesBenchmark.writeCirce:·gc.time                                                thrpt    5        28.000                   ms
[info] PrimitivesBenchmark.writeJacksonScala                                                  thrpt    5   2491040.699 ±  82210.260   ops/s
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate                                   thrpt    5      1025.621 ±     33.899  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                              thrpt    5       648.000 ±      0.001    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                          thrpt    5         0.108 ±      0.132  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5         0.068 ±      0.084    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                      thrpt    5      1057.508 ±    586.499  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5       668.341 ±    377.518    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.count                                        thrpt    5        16.000               counts
[info] PrimitivesBenchmark.writeJacksonScala:·gc.time                                         thrpt    5        19.000                   ms
[info] PrimitivesBenchmark.writeJsoniterScala                                                 thrpt    5   6173231.716 ± 307948.873   ops/s
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate                                  thrpt    5       690.215 ±     34.440  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                             thrpt    5       176.000 ±      0.001    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                         thrpt    5         0.042 ±      0.160  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5         0.011 ±      0.041    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                     thrpt    5       654.246 ±      4.828  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5       166.849 ±      7.765    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.count                                       thrpt    5        10.000               counts
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.time                                        thrpt    5         9.000                   ms
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc                                         thrpt    5   5838803.016 ± 248211.352   ops/s
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                          thrpt    5       356.186 ±     15.247  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                     thrpt    5        96.000 ±      0.001    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                 thrpt    5         0.756 ±      6.378  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm            thrpt    5         0.205 ±      1.730    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space             thrpt    5       350.427 ±    367.393  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm        thrpt    5        94.542 ±    101.487    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count                               thrpt    5         6.000               counts
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time                                thrpt    5        12.000                   ms
[info] PrimitivesBenchmark.writePlayJson                                                      thrpt    5    347753.066 ±   8248.719   ops/s
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate                                       thrpt    5      1956.548 ±     45.427  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm                                  thrpt    5      8856.001 ±      0.001    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                              thrpt    5         0.129 ±      0.154  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                         thrpt    5         0.584 ±      0.700    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                          thrpt    5      2013.517 ±     74.806  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5      9114.039 ±    360.259    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.count                                            thrpt    5        30.000               counts
[info] PrimitivesBenchmark.writePlayJson:·gc.time                                             thrpt    5        35.000                   ms
[info] StringOfAsciiCharsBenchmark.readCirce                                                  thrpt    5    719541.366 ±  13105.488   ops/s
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                   thrpt    5      1605.548 ±     29.639  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                              thrpt    5      3512.001 ±      0.001    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                          thrpt    5         0.096 ±      0.044  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                     thrpt    5         0.209 ±      0.099    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                      thrpt    5      1597.534 ±    540.764  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                 thrpt    5      3494.029 ±   1159.472    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.count                                        thrpt    5        24.000               counts
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.time                                         thrpt    5        21.000                   ms
[info] StringOfAsciiCharsBenchmark.readJacksonScala                                           thrpt    5   1150815.503 ±  29878.366   ops/s
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                            thrpt    5      1509.080 ±     39.704  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                       thrpt    5      2064.000 ±      0.001    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                   thrpt    5         0.096 ±      0.091  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm              thrpt    5         0.131 ±      0.123    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space               thrpt    5      1532.946 ±    701.193  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm          thrpt    5      2097.499 ±    990.413    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count                                 thrpt    5        23.000               counts
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time                                  thrpt    5        25.000                   ms
[info] StringOfAsciiCharsBenchmark.readJsoniterScala                                          thrpt    5    761029.953 ±   8315.987   ops/s
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                           thrpt    5       649.958 ±      7.040  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                      thrpt    5      1344.001 ±      0.001    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                  thrpt    5         0.042 ±      0.170  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm             thrpt    5         0.086 ±      0.351    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space              thrpt    5       660.838 ±      4.524  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm         thrpt    5      1366.508 ±     18.565    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count                                thrpt    5        10.000               counts
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time                                 thrpt    5         9.000                   ms
[info] StringOfAsciiCharsBenchmark.writeCirce                                                 thrpt    5    297598.970 ±   4585.439   ops/s
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                  thrpt    5      1013.508 ±     16.216  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                             thrpt    5      5360.001 ±      0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                         thrpt    5         0.079 ±      0.067  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                    thrpt    5         0.419 ±      0.361    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                     thrpt    5      1051.310 ±    576.455  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                thrpt    5      5560.527 ±   3071.291    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.count                                       thrpt    5        16.000               counts
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.time                                        thrpt    5        15.000                   ms
[info] StringOfAsciiCharsBenchmark.writeJacksonScala                                          thrpt    5    283610.352 ±    840.601   ops/s
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                           thrpt    5       299.827 ±      0.898  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                      thrpt    5      1664.001 ±      0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                  thrpt    5         0.021 ±      0.139  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm             thrpt    5         0.116 ±      0.771    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space              thrpt    5       295.340 ±    139.101  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm         thrpt    5      1639.073 ±    771.164    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count                                thrpt    5         5.000               counts
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time                                 thrpt    5         6.000                   ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala                                         thrpt    5   1068060.550 ±  27413.916   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                          thrpt    5       901.205 ±     23.141  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                     thrpt    5      1328.000 ±      0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                 thrpt    5         0.100 ±      0.088  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm            thrpt    5         0.147 ±      0.129    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space             thrpt    5       917.939 ±    561.398  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm        thrpt    5      1352.775 ±    830.069    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count                               thrpt    5        14.000               counts
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time                                thrpt    5        13.000                   ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                 thrpt    5    927087.784 ±   5156.142   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                  thrpt    5        ≈ 10⁻⁴               MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm             thrpt    5        ≈ 10⁻³                 B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                       thrpt    5           ≈ 0               counts
[info] StringOfAsciiCharsBenchmark.writePlayJson                                              thrpt    5    333565.964 ±   5942.138   ops/s
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                               thrpt    5       356.015 ±      6.220  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                          thrpt    5      1680.001 ±      0.001    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                      thrpt    5         0.773 ±      6.538  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                 thrpt    5         3.650 ±     30.865    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                  thrpt    5       298.401 ±    149.969  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm             thrpt    5      1408.505 ±    720.564    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.count                                    thrpt    5         5.000               counts
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.time                                     thrpt    5        12.000                   ms
[info] StringOfNonAsciiCharsBenchmark.readCirce                                               thrpt    5    983655.461 ±  23711.379   ops/s
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                thrpt    5      1469.986 ±     35.777  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                           thrpt    5      2352.000 ±      0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                       thrpt    5         0.121 ±      0.132  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                  thrpt    5         0.193 ±      0.210    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                   thrpt    5      1461.317 ±    687.107  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm              thrpt    5      2338.169 ±   1099.173    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.count                                     thrpt    5        22.000               counts
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.time                                      thrpt    5        20.000                   ms
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala                                        thrpt    5   1303914.298 ±  20394.585   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                         thrpt    5       854.866 ±     13.342  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                    thrpt    5      1032.000 ±      0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                thrpt    5         0.071 ±      0.217  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm           thrpt    5         0.085 ±      0.261    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space            thrpt    5       851.275 ±    675.115  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm       thrpt    5      1026.996 ±    800.256    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count                              thrpt    5        13.000               counts
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time                               thrpt    5        15.000                   ms
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala                                       thrpt    5   2331445.169 ±  31657.287   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                        thrpt    5       568.841 ±      8.004  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                   thrpt    5       384.000 ±      0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space               thrpt    5         0.670 ±      5.328  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm          thrpt    5         0.455 ±      3.619    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space           thrpt    5       595.019 ±    569.666  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm      thrpt    5       401.701 ±    384.974    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count                             thrpt    5         9.000               counts
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time                              thrpt    5        13.000                   ms
[info] StringOfNonAsciiCharsBenchmark.writeCirce                                              thrpt    5   1997264.510 ±  68733.365   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                               thrpt    5      1380.572 ±     46.575  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                          thrpt    5      1088.000 ±      0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                      thrpt    5         0.087 ±      0.154  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                 thrpt    5         0.069 ±      0.121    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                  thrpt    5      1390.335 ±    549.741  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm             thrpt    5      1095.608 ±    426.602    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count                                    thrpt    5        21.000               counts
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time                                     thrpt    5        19.000                   ms
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala                                       thrpt    5   3005729.497 ±  62474.070   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                        thrpt    5      1100.135 ±     22.540  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                   thrpt    5       576.000 ±      0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space               thrpt    5         0.067 ±      0.105  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm          thrpt    5         0.035 ±      0.054    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space           thrpt    5      1055.792 ±    570.952  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm      thrpt    5       552.841 ±    301.115    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count                             thrpt    5        16.000               counts
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time                              thrpt    5        18.000                   ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala                                      thrpt    5   3376475.571 ± 134379.434   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                       thrpt    5       669.292 ±     26.563  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                  thrpt    5       312.000 ±      0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space              thrpt    5         0.058 ±      0.105  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm         thrpt    5         0.027 ±      0.048    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space          thrpt    5       654.439 ±      4.915  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm     thrpt    5       305.100 ±     11.087    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count                            thrpt    5        10.000               counts
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time                             thrpt    5         9.000                   ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc                              thrpt    5   3458064.698 ±  29944.677   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate               thrpt    5        ≈ 10⁻⁴               MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm          thrpt    5        ≈ 10⁻⁴                 B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                    thrpt    5           ≈ 0               counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson                                           thrpt    5   2769675.779 ±  36568.394   ops/s
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                            thrpt    5      1168.378 ±     15.423  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                       thrpt    5       664.000 ±      0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                   thrpt    5         0.092 ±      0.257  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm              thrpt    5         0.052 ±      0.146    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space               thrpt    5      1184.414 ±    702.712  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm          thrpt    5       673.311 ±    405.096    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count                                 thrpt    5        18.000               counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time                                  thrpt    5        22.000                   ms
[info] TwitterAPIBenchmark.readCirce                                                          thrpt    5     11833.861 ±   3125.666   ops/s
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate                                           thrpt    5      1724.509 ±    444.570  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm                                      thrpt    5    229375.965 ±   1427.866    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  thrpt    5         0.101 ±      0.244  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             thrpt    5        13.276 ±     31.309    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              thrpt    5      1725.755 ±   1116.414  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         thrpt    5    228781.202 ± 111816.397    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.count                                                thrpt    5        26.000               counts
[info] TwitterAPIBenchmark.readCirce:·gc.time                                                 thrpt    5        47.000                   ms
[info] TwitterAPIBenchmark.readJacksonScala                                                   thrpt    5     15385.192 ±    360.330   ops/s
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate                                    thrpt    5       217.320 ±      5.146  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                               thrpt    5     22234.033 ±     27.409    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                           thrpt    5         0.142 ±      1.130  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5        14.474 ±    115.568    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                       thrpt    5       217.931 ±    482.061  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5     22307.586 ±  49337.806    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.count                                         thrpt    5         4.000               counts
[info] TwitterAPIBenchmark.readJacksonScala:·gc.time                                          thrpt    5         7.000                   ms
[info] TwitterAPIBenchmark.readJsoniterScala                                                  thrpt    5     37258.315 ±   1279.461   ops/s
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                   thrpt    5       345.802 ±     12.059  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              thrpt    5     14608.012 ±      0.005    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          thrpt    5         0.678 ±      5.790  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5        28.928 ±    247.193    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      thrpt    5       350.903 ±    366.814  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5     14826.507 ±  15581.031    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.count                                        thrpt    5         6.000               counts
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.time                                         thrpt    5        12.000                   ms
[info] TwitterAPIBenchmark.readPlayJson                                                       thrpt    5      3543.684 ±    732.351   ops/s
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate                                        thrpt    5      1138.201 ±    236.169  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                   thrpt    5    505472.917 ±    199.735    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               thrpt    5         0.042 ±      0.127  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          thrpt    5        18.041 ±     54.760    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           thrpt    5      1188.469 ±    696.100  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5    530574.670 ± 371181.794    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.count                                             thrpt    5        18.000               counts
[info] TwitterAPIBenchmark.readPlayJson:·gc.time                                              thrpt    5        43.000                   ms
[info] TwitterAPIBenchmark.writeJacksonScala                                                  thrpt    5     49717.417 ±    456.476   ops/s
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                   thrpt    5       650.904 ±      6.163  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                              thrpt    5     20604.016 ±      0.129    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                          thrpt    5         0.079 ±      0.222  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5         2.505 ±      7.049    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                      thrpt    5       652.114 ±     17.014  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5     20642.254 ±    448.521    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.count                                        thrpt    5        10.000               counts
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.time                                         thrpt    5        13.000                   ms
[info] TwitterAPIBenchmark.writeJsoniterScala                                                 thrpt    5     94576.226 ±   3715.738   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                  thrpt    5       621.067 ±     24.281  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                             thrpt    5     10336.004 ±      0.001    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                         thrpt    5         0.816 ±      6.444  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5        13.738 ±    108.665    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                     thrpt    5       653.307 ±      8.223  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5     10873.679 ±    539.000    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.count                                       thrpt    5        10.000               counts
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.time                                        thrpt    5        11.000                   ms
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc                                         thrpt    5    104865.400 ±    453.944   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                          thrpt    5        14.923 ±      0.065  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                     thrpt    5       224.004 ±      0.001    B/op
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                               thrpt    5           ≈ 0               counts
[info] Benchmark result is saved to jdk9.json
[success] Total time: 2824 s, completed Jan 31, 2018, 2:17:16 PM
