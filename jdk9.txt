[info] Loading settings from idea.sbt,build.sbt ...
[info] Loading global plugins from /home/andriy/.sbt/1.0/plugins
[info] Loading settings from plugins.sbt ...
[info] Loading project definition from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/project
[info] Loading settings from release.sbt,build.sbt,version.sbt ...
[info] Set current project to jsoniter-scala (in build file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[info] Setting Scala version to 2.12.5 on 4 projects.
[info] Reapplying settings...
[info] Set current project to jsoniter-scala (in build file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[success] Total time: 0 s, completed Apr 8, 2018 9:49:14 AM
[info] Updating core...
[info] Done updating.
[info] Updating macros...
[info] Done updating.
[info] Updating benchmark...
[info] Done updating.
[info] Compiling 5 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/classes ...
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1026:69: constructor String in class String is deprecated: see corresponding Javadoc for more information.
[warn]   private[this] def toDouble: Double = java.lang.Double.parseDouble(new String(buf, 0, mark, head - mark))
[warn]                                                                     ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:444:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos)
[warn]       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:452:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos + 1)
[warn]       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:941:14: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]       zoneId.getBytes(0, len, buf, pos)
[warn]              ^
[warn] four warnings found
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/core_2.12-0.22.3-SNAPSHOT.jar ...
[info] Compiling 1 Scala source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/classes ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/macros_2.12-0.22.3-SNAPSHOT.jar ...
[info] Compiling 49 Scala sources and 1 Java source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done packaging.
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/ArrayOfBytesBenchmark.scala:7:69: Unused import
[warn] import com.github.plokhotnyuk.jsoniter_scala.macros.DslPlatformJson._
[warn]                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:14:48: Generated JSON codec for type 'Int':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Int] {
[info]       def nullValue: Int = 0;
[info]       def decodeValue(in: JsonReader, default: Int): Int = in.readInt();
[info]       def encodeValue(x: Int, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val intCodec: JsonValueCodec[Int] = make[Int](CodecMakerConfig()) // don't define implicit for supported types
[info]                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:15:57: Generated JSON codec for type 'String':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[String] {
[info]       def nullValue: String = null;
[info]       def decodeValue(in: JsonReader, default: String): String = in.readString(default);
[info]       def encodeValue(x: String, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val stringCodec: JsonValueCodec[String] = make[String](CodecMakerConfig()) // don't define implicit for supported types
[info]                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:16:69: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("s", "bd");
[info]       private[this] def d1(in: JsonReader, default: Option[String]): Option[String] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(in.readString(null))
[info]         };
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _bd: scala.math.BigDecimal = null;
[info]           var _os: Option[String] = None;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readString(_s);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3138 => if (in.isCharBufEqualsTo(l, "bd"))
[info]                       {
[info]                         _bd = in.readBigDecimal(_bd);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556 => if (in.isCharBufEqualsTo(l, "os"))
[info]                       _os = d1(in, _os)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs(s = _s, bd = _bd, os = _os)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("bd");
[info]           out.writeVal(x.bd)
[info]         };
[info]         {
[info]           val v = x.os;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("os");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val anyRefsCodec: JsonValueCodec[AnyRefs] = make[AnyRefs](CodecMakerConfig())
[info]                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:17:66: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Arrays':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Arrays] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays): com.github.plokhotnyuk.jsoniter_scala.macros.Arrays = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Array[Int]] = new Array[Array[Int]](0);
[info]       private[this] val v1: Array[BigInt] = new Array[scala.math.BigInt](0);
[info]       private[this] val v2: Array[Int] = new Array[Int](0);
[info]       private[this] def d1(in: JsonReader, default: Array[Array[Int]]): Array[Array[Int]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Array[Int]](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, JsoniterCodecs.this.intArrayCodec.decodeValue(in, v2));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays): com.github.plokhotnyuk.jsoniter_scala.macros.Arrays = if (in.isNextToken('{'))
[info]         {
[info]           var _aa: Array[Array[Int]] = v0;
[info]           var _a: Array[BigInt] = v1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3104 => if (in.isCharBufEqualsTo(l, "aa"))
[info]                       _aa = d1(in, _aa)
[info]                     else
[info]                       in.skip()
[info]                     case 97 => if (in.isCharBufEqualsTo(l, "a"))
[info]                       _a = JsoniterCodecs.this.bigIntArrayCodec.decodeValue(in, _a)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Arrays(aa = _aa, a = _a)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: Array[Array[Int]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             JsoniterCodecs.this.intArrayCodec.encodeValue(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.aa;
[info]           if (v.length.>(0))
[info]             {
[info]               out.writeNonEscapedAsciiKey("aa");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.a;
[info]           if (v.length.>(0))
[info]             {
[info]               out.writeNonEscapedAsciiKey("a");
[info]               JsoniterCodecs.this.bigIntArrayCodec.encodeValue(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val arraysCodec: JsonValueCodec[Arrays] = make[Arrays](CodecMakerConfig())
[info]                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:18:97: Generated JSON codec for type 'Array[BigDecimal]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[BigDecimal]] {
[info]       def nullValue: Array[BigDecimal] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[BigDecimal]): Array[BigDecimal] = d0(in, default);
[info]       def encodeValue(x: Array[BigDecimal], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[BigDecimal] = new Array[scala.math.BigDecimal](0);
[info]       private[this] def d0(in: JsonReader, default: Array[BigDecimal]): Array[BigDecimal] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigDecimal](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigDecimal(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[BigDecimal], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bigDecimalArrayCodec: JsonValueCodec[Array[BigDecimal]] = make[Array[BigDecimal]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:19:85: Generated JSON codec for type 'Array[BigInt]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[BigInt]] {
[info]       def nullValue: Array[BigInt] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[BigInt]): Array[BigInt] = d0(in, default);
[info]       def encodeValue(x: Array[BigInt], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[BigInt] = new Array[scala.math.BigInt](0);
[info]       private[this] def d0(in: JsonReader, default: Array[BigInt]): Array[BigInt] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigInt](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigInt(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[BigInt], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bigIntArrayCodec: JsonValueCodec[Array[BigInt]] = make[Array[BigInt]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:20:69: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.BitSets':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.BitSets] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets): com.github.plokhotnyuk.jsoniter_scala.macros.BitSets = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = BitSet.newBuilder;
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d2(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               BitSet.empty;
[info]             do 
[info]               x.add(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets): com.github.plokhotnyuk.jsoniter_scala.macros.BitSets = if (in.isNextToken('{'))
[info]         {
[info]           var _bs: scala.collection.immutable.BitSet = BitSet.empty;
[info]           var _mbs: scala.collection.mutable.BitSet = BitSet.empty;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3153 => if (in.isCharBufEqualsTo(l, "bs"))
[info]                       _bs = d1(in, _bs)
[info]                     else
[info]                       in.skip()
[info]                     case 107902 => if (in.isCharBufEqualsTo(l, "mbs"))
[info]                       _mbs = d2(in, _mbs)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.BitSets(bs = _bs, mbs = _mbs)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e2(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.bs;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("bs");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.mbs;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("mbs");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bitSetsCodec: JsonValueCodec[BitSets] = make[BitSets](CodecMakerConfig())
[info]                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:21:88: Generated JSON codec for type 'Array[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Boolean]] {
[info]       def nullValue: Array[Boolean] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Boolean]): Array[Boolean] = d0(in, default);
[info]       def encodeValue(x: Array[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Boolean] = new Array[Boolean](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Boolean]): Array[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Boolean](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBoolean());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanArrayCodec: JsonValueCodec[Array[Boolean]] = make[Array[Boolean]](CodecMakerConfig())
[info]                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:22:79: Generated JSON codec for type 'Array[Byte]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Byte]] {
[info]       def nullValue: Array[Byte] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Byte]): Array[Byte] = d0(in, default);
[info]       def encodeValue(x: Array[Byte], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Byte] = new Array[Byte](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Byte]): Array[Byte] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Byte](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readByte());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Byte], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val byteArrayCodec: JsonValueCodec[Array[Byte]] = make[Array[Byte]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:23:79: Generated JSON codec for type 'Array[Char]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Char]] {
[info]       def nullValue: Array[Char] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Char]): Array[Char] = d0(in, default);
[info]       def encodeValue(x: Array[Char], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Char] = new Array[Char](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Char]): Array[Char] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Char](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readChar());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Char], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val charArrayCodec: JsonValueCodec[Array[Char]] = make[Array[Char]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:24:85: Generated JSON codec for type 'Array[Double]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Double]] {
[info]       def nullValue: Array[Double] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Double]): Array[Double] = d0(in, default);
[info]       def encodeValue(x: Array[Double], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Double] = new Array[Double](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Double]): Array[Double] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Double](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDouble());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Double], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val doubleArrayCodec: JsonValueCodec[Array[Double]] = make[Array[Double]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:25:91: Generated JSON codec for type 'Array[java.time.Duration]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Duration]] {
[info]       def nullValue: Array[java.time.Duration] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Duration]): Array[java.time.Duration] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Duration], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Duration] = new Array[java.time.Duration](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Duration]): Array[java.time.Duration] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Duration](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDuration(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Duration], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val durationArrayCodec: JsonValueCodec[Array[Duration]] = make[Array[Duration]](CodecMakerConfig())
[info]                                                                                           ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:26:82: Generated JSON codec for type 'Array[Float]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Float]] {
[info]       def nullValue: Array[Float] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Float]): Array[Float] = d0(in, default);
[info]       def encodeValue(x: Array[Float], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Float] = new Array[Float](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Float]): Array[Float] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Float](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readFloat());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Float], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val floatArrayCodec: JsonValueCodec[Array[Float]] = make[Array[Float]](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:27:88: Generated JSON codec for type 'Array[java.time.Instant]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Instant]] {
[info]       def nullValue: Array[java.time.Instant] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Instant], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Instant] = new Array[java.time.Instant](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Instant](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInstant(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Instant], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val instantArrayCodec: JsonValueCodec[Array[Instant]] = make[Array[Instant]](CodecMakerConfig())
[info]                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:28:94: Generated JSON codec for type 'Array[java.time.LocalDate]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalDate]] {
[info]       def nullValue: Array[java.time.LocalDate] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalDate], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.LocalDate] = new Array[java.time.LocalDate](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDate](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDate(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalDate], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localDateArrayCodec: JsonValueCodec[Array[LocalDate]] = make[Array[LocalDate]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:29:106: Generated JSON codec for type 'Array[java.time.LocalDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalDateTime]] {
[info]       def nullValue: Array[java.time.LocalDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalDateTime]): Array[java.time.LocalDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.LocalDateTime] = new Array[java.time.LocalDateTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalDateTime]): Array[java.time.LocalDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localDateTimeArrayCodec: JsonValueCodec[Array[LocalDateTime]] = make[Array[LocalDateTime]](CodecMakerConfig())
[info]                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:30:109: Generated JSON codec for type 'Array[java.time.OffsetDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.OffsetDateTime]] {
[info]       def nullValue: Array[java.time.OffsetDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.OffsetDateTime]): Array[java.time.OffsetDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.OffsetDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.OffsetDateTime] = new Array[java.time.OffsetDateTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.OffsetDateTime]): Array[java.time.OffsetDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.OffsetDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readOffsetDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.OffsetDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val offsetDateTimeArrayCodec: JsonValueCodec[Array[OffsetDateTime]] = make[Array[OffsetDateTime]](CodecMakerConfig())
[info]                                                                                                             ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:31:97: Generated JSON codec for type 'Array[java.time.OffsetTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.OffsetTime]] {
[info]       def nullValue: Array[java.time.OffsetTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.OffsetTime]): Array[java.time.OffsetTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.OffsetTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.OffsetTime] = new Array[java.time.OffsetTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.OffsetTime]): Array[java.time.OffsetTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.OffsetTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readOffsetTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.OffsetTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val offsetTimeArrayCodec: JsonValueCodec[Array[OffsetTime]] = make[Array[OffsetTime]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:32:94: Generated JSON codec for type 'Array[java.time.LocalTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalTime]] {
[info]       def nullValue: Array[java.time.LocalTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.LocalTime] = new Array[java.time.LocalTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localTimeArrayCodec: JsonValueCodec[Array[LocalTime]] = make[Array[LocalTime]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:33:85: Generated JSON codec for type 'Array[java.time.Period]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Period]] {
[info]       def nullValue: Array[java.time.Period] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Period]): Array[java.time.Period] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Period], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Period] = new Array[java.time.Period](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Period]): Array[java.time.Period] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Period](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readPeriod(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Period], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val periodArrayCodec: JsonValueCodec[Array[Period]] = make[Array[Period]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:34:106: Generated JSON codec for type 'Array[java.time.ZonedDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZonedDateTime]] {
[info]       def nullValue: Array[java.time.ZonedDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZonedDateTime]): Array[java.time.ZonedDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZonedDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.ZonedDateTime] = new Array[java.time.ZonedDateTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZonedDateTime]): Array[java.time.ZonedDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZonedDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZonedDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZonedDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zonedDateTimeArrayCodec: JsonValueCodec[Array[ZonedDateTime]] = make[Array[ZonedDateTime]](CodecMakerConfig())
[info]                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:35:97: Generated JSON codec for type 'Array[java.time.ZoneOffset]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZoneOffset]] {
[info]       def nullValue: Array[java.time.ZoneOffset] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZoneOffset]): Array[java.time.ZoneOffset] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZoneOffset], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.ZoneOffset] = new Array[java.time.ZoneOffset](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZoneOffset]): Array[java.time.ZoneOffset] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneOffset](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneOffset(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZoneOffset], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zoneOffsetArrayCodec: JsonValueCodec[Array[ZoneOffset]] = make[Array[ZoneOffset]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:36:85: Generated JSON codec for type 'Array[java.time.ZoneId]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZoneId]] {
[info]       def nullValue: Array[java.time.ZoneId] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZoneId], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.ZoneId] = new Array[java.time.ZoneId](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneId](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneId(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZoneId], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zoneIdArrayCodec: JsonValueCodec[Array[ZoneId]] = make[Array[ZoneId]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:37:83: Generated JSON codec for type 'Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]] {
[info]       def nullValue: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = d0(in, default);
[info]       def encodeValue(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](0);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Suit): com.github.plokhotnyuk.jsoniter_scala.macros.Suit = if (in.isNextToken('\"'))
[info]         {
[info]           in.rollbackToken();
[info]           val v = in.readString(null);
[info]           try {
[info]             Suit.valueOf(v)
[info]           } catch {
[info]             case ((_): IllegalArgumentException) => in.enumValueError(v)
[info]           }
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '\"');
[info]       private[this] def d0(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, d1(in, null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Suit, out: JsonWriter): Unit = out.writeVal(x.name);
[info]       private[this] def e0(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e1(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val javaEnumArrayCodec: JsonValueCodec[Array[Suit]] = make[Array[Suit]](CodecMakerConfig())
[info]                                                                                   ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:38:87: Generated JSON codec for type 'Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]] {
[info]       def nullValue: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = d0(in, default);
[info]       def encodeValue(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](0);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value): com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value = if (in.isNextToken('\"'))
[info]         {
[info]           in.rollbackToken();
[info]           val len = in.readStringAsCharBuf();
[info]           SuitEnum.values.iterator.find(((e) => in.isCharBufEqualsTo(len, e.toString))).getOrElse(in.enumValueError(len))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '\"');
[info]       private[this] def d0(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, d1(in, null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value, out: JsonWriter): Unit = out.writeVal(x.toString);
[info]       private[this] def e0(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e1(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val enumArrayCodec: JsonValueCodec[Array[SuitEnum]] = make[Array[SuitEnum]](CodecMakerConfig())
[info]                                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:39:76: Generated JSON codec for type 'Array[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Int]] {
[info]       def nullValue: Array[Int] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Int]): Array[Int] = d0(in, default);
[info]       def encodeValue(x: Array[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Int] = new Array[Int](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Int]): Array[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Int](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInt());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intArrayCodec: JsonValueCodec[Array[Int]] = make[Array[Int]](CodecMakerConfig())
[info]                                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:40:82: Generated JSON codec for type 'Array[Short]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Short]] {
[info]       def nullValue: Array[Short] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Short]): Array[Short] = d0(in, default);
[info]       def encodeValue(x: Array[Short], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Short] = new Array[Short](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Short]): Array[Short] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Short](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readShort());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Short], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val shortArrayCodec: JsonValueCodec[Array[Short]] = make[Array[Short]](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:41:79: Generated JSON codec for type 'Array[Long]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Long]] {
[info]       def nullValue: Array[Long] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Long]): Array[Long] = d0(in, default);
[info]       def encodeValue(x: Array[Long], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Long] = new Array[Long](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Long]): Array[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLong());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Long], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val longArrayCodec: JsonValueCodec[Array[Long]] = make[Array[Long]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:42:79: Generated JSON codec for type 'Array[java.util.UUID]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.util.UUID]] {
[info]       def nullValue: Array[java.util.UUID] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = d0(in, default);
[info]       def encodeValue(x: Array[java.util.UUID], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.util.UUID] = new Array[java.util.UUID](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.util.UUID](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readUUID(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.util.UUID], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val uuidArrayCodec: JsonValueCodec[Array[UUID]] = make[Array[UUID]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:43:75: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Iterables':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Iterables] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables): com.github.plokhotnyuk.jsoniter_scala.macros.Iterables = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: scala.collection.immutable.Vector[String]): scala.collection.immutable.Vector[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Vector.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d2(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Set.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d4(in: JsonReader, default: scala.collection.immutable.HashSet[Long]): scala.collection.immutable.HashSet[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = HashSet.newBuilder[Long];
[info]             do 
[info]               x.+=(in.readLong())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d3(in: JsonReader, default: List[scala.collection.immutable.HashSet[Long]]): List[scala.collection.immutable.HashSet[Long]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = List.newBuilder[scala.collection.immutable.HashSet[Long]];
[info]             do 
[info]               x.+=(d4(in, HashSet.empty[Long]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables): com.github.plokhotnyuk.jsoniter_scala.macros.Iterables = if (in.isNextToken('{'))
[info]         {
[info]           var _l: scala.collection.immutable.Vector[String] = Vector.empty[String];
[info]           var _s: scala.collection.immutable.Set[Int] = Set.empty[Int];
[info]           var _ls: List[scala.collection.immutable.HashSet[Long]] = List.empty[scala.collection.immutable.HashSet[Long]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       _l = d1(in, _l)
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       _s = d2(in, _s)
[info]                     else
[info]                       in.skip()
[info]                     case 3463 => if (in.isCharBufEqualsTo(l, "ls"))
[info]                       _ls = d3(in, _ls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Iterables(l = _l, s = _s, ls = _ls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: scala.collection.immutable.Vector[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e2(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e4(x: scala.collection.immutable.HashSet[Long], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e3(x: List[scala.collection.immutable.HashSet[Long]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e4(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.l;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("l");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.s;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("s");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.ls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("ls");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val iterablesCodec: JsonValueCodec[Iterables] = make[Iterables](CodecMakerConfig())
[info]                                                                           ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:44:60: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Maps':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Maps] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Maps = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Maps): com.github.plokhotnyuk.jsoniter_scala.macros.Maps = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.Maps, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: scala.collection.immutable.HashMap[String,Double]): scala.collection.immutable.HashMap[String,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = HashMap.empty[String, Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsString(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: scala.collection.immutable.HashMap[Long,Double]): scala.collection.immutable.HashMap[Long,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = HashMap.empty[Long, Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsLong(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]]): scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = Map.empty[Int, scala.collection.immutable.HashMap[Long,Double]];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), d3(in, HashMap.empty[Long, Double]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Maps): com.github.plokhotnyuk.jsoniter_scala.macros.Maps = if (in.isNextToken('{'))
[info]         {
[info]           var _m: scala.collection.immutable.HashMap[String,Double] = HashMap.empty[String, Double];
[info]           var _mm: scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]] = Map.empty[Int, scala.collection.immutable.HashMap[Long,Double]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 109 => if (in.isCharBufEqualsTo(l, "m"))
[info]                       _m = d1(in, _m)
[info]                     else
[info]                       in.skip()
[info]                     case 3488 => if (in.isCharBufEqualsTo(l, "mm"))
[info]                       _mm = d2(in, _mm)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Maps(m = _m, mm = _mm)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: scala.collection.immutable.HashMap[String,Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: scala.collection.immutable.HashMap[Long,Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           e3(kv._2, out)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Maps, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.m;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("m");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.mm;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("mm");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mapsCodec: JsonValueCodec[Maps] = make[Maps](CodecMakerConfig())
[info]                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:45:95: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("s", "i");
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _i: Int = 0;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readString(_s);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         _i = in.readInt();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields(s = _s, i = _i)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           out.writeVal(x.i)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val missingReqFieldCodec: JsonValueCodec[MissingReqFields] = make[MissingReqFields](CodecMakerConfig())
[info]                                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:46:96: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables): com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[String]): scala.collection.mutable.ArrayBuffer[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               ArrayBuffer.empty[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d2(in: JsonReader, default: scala.collection.mutable.TreeSet[Int]): scala.collection.mutable.TreeSet[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               TreeSet.empty[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d4(in: JsonReader, default: scala.collection.mutable.Set[Long]): scala.collection.mutable.Set[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               Set.empty[Long];
[info]             do 
[info]               x.+=(in.readLong())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d3(in: JsonReader, default: scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]]): scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = ResizableArray.newBuilder[scala.collection.mutable.Set[Long]];
[info]             do 
[info]               x.+=(d4(in, Set.empty[Long]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables): com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables = if (in.isNextToken('{'))
[info]         {
[info]           var _l: scala.collection.mutable.ArrayBuffer[String] = ArrayBuffer.empty[String];
[info]           var _s: scala.collection.mutable.TreeSet[Int] = TreeSet.empty[Int];
[info]           var _ls: scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]] = ResizableArray.empty[scala.collection.mutable.Set[Long]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       _l = d1(in, _l)
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       _s = d2(in, _s)
[info]                     else
[info]                       in.skip()
[info]                     case 3463 => if (in.isCharBufEqualsTo(l, "ls"))
[info]                       _ls = d3(in, _ls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables(l = _l, s = _s, ls = _ls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: scala.collection.mutable.ArrayBuffer[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e2(x: scala.collection.mutable.TreeSet[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e4(x: scala.collection.mutable.Set[Long], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e3(x: scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e4(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.l;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("l");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.s;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("s");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.ls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("ls");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableIterablesCodec: JsonValueCodec[MutableIterables] = make[MutableIterables](CodecMakerConfig())
[info]                                                                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:47:81: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps): com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: scala.collection.mutable.HashMap[String,Double]): scala.collection.mutable.HashMap[String,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               HashMap.empty[String, Double];
[info]             do 
[info]               x.update(in.readKeyAsString(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: scala.collection.mutable.OpenHashMap[Long,Double]): scala.collection.mutable.OpenHashMap[Long,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               OpenHashMap.empty[Long, Double];
[info]             do 
[info]               x.update(in.readKeyAsLong(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]]): scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               Map.empty[Int, scala.collection.mutable.OpenHashMap[Long,Double]];
[info]             do 
[info]               x.update(in.readKeyAsInt(), d3(in, OpenHashMap.empty[Long, Double]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps): com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps = if (in.isNextToken('{'))
[info]         {
[info]           var _m: scala.collection.mutable.HashMap[String,Double] = HashMap.empty[String, Double];
[info]           var _mm: scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]] = Map.empty[Int, scala.collection.mutable.OpenHashMap[Long,Double]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 109 => if (in.isCharBufEqualsTo(l, "m"))
[info]                       _m = d1(in, _m)
[info]                     else
[info]                       in.skip()
[info]                     case 3488 => if (in.isCharBufEqualsTo(l, "mm"))
[info]                       _mm = d2(in, _mm)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps(m = _m, mm = _mm)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: scala.collection.mutable.HashMap[String,Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: scala.collection.mutable.OpenHashMap[Long,Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           e3(kv._2, out)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.m;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("m");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.mm;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("mm");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableMapsCodec: JsonValueCodec[MutableMaps] = make[MutableMaps](CodecMakerConfig())
[info]                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:48:90: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps): com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: scala.collection.immutable.IntMap[Double]): scala.collection.immutable.IntMap[Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = IntMap.empty[Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: scala.collection.immutable.LongMap[Double]): scala.collection.immutable.LongMap[Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = LongMap.empty[Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsLong(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]]): scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               LongMap.empty[scala.collection.immutable.LongMap[Double]];
[info]             do 
[info]               x.update(in.readKeyAsLong(), d3(in, LongMap.empty[Double]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps): com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps = if (in.isNextToken('{'))
[info]         {
[info]           var _m: scala.collection.immutable.IntMap[Double] = IntMap.empty[Double];
[info]           var _mm: scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]] = LongMap.empty[scala.collection.immutable.LongMap[Double]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 109 => if (in.isCharBufEqualsTo(l, "m"))
[info]                       _m = d1(in, _m)
[info]                     else
[info]                       in.skip()
[info]                     case 3488 => if (in.isCharBufEqualsTo(l, "mm"))
[info]                       _mm = d2(in, _mm)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps(m = _m, mm = _mm)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: scala.collection.immutable.IntMap[Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: scala.collection.immutable.LongMap[Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           e3(kv._2, out)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.m;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("m");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.mm;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("mm");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intAndLongMapsCodec: JsonValueCodec[IntAndLongMaps] = make[IntAndLongMaps](CodecMakerConfig())
[info]                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:49:78: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Primitives':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Primitives] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("b", "s", "i", "l", "bl", "ch", "dbl", "f");
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = if (in.isNextToken('{'))
[info]         {
[info]           var _b: Byte = ((0): Byte);
[info]           var _s: Short = ((0): Short);
[info]           var _i: Int = 0;
[info]           var _l: Long = 0L;
[info]           var _bl: Boolean = false;
[info]           var _ch: Char = '\u0000';
[info]           var _dbl: Double = 0.0;
[info]           var _f: Float = 0.0F;
[info]           var req0 = 255;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         _b = in.readByte();
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readShort();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         _i = in.readInt();
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         _l = in.readLong();
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3146 => if (in.isCharBufEqualsTo(l, "bl"))
[info]                       {
[info]                         _bl = in.readBoolean();
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3173 => if (in.isCharBufEqualsTo(l, "ch"))
[info]                       {
[info]                         _ch = in.readChar();
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 99246 => if (in.isCharBufEqualsTo(l, "dbl"))
[info]                       {
[info]                         _dbl = in.readDouble();
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102 => if (in.isCharBufEqualsTo(l, "f"))
[info]                       {
[info]                         _f = in.readFloat();
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Primitives(b = _b, s = _s, i = _i, l = _l, bl = _bl, ch = _ch, dbl = _dbl, f = _f)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("b");
[info]           out.writeVal(x.b)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           out.writeVal(x.i)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           out.writeVal(x.l)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("bl");
[info]           out.writeVal(x.bl)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("ch");
[info]           out.writeVal(x.ch)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("dbl");
[info]           out.writeVal(x.dbl)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("f");
[info]           out.writeVal(x.f)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val primitivesCodec: JsonValueCodec[Primitives] = make[Primitives](CodecMakerConfig())
[info]                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:50:87: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("s", "l");
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _l: Long = 0L;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readString(_s);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         _l = in.readLong();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields(s = _s, l = _l)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           out.writeVal(x.l)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val extractFieldsCodec: JsonValueCodec[ExtractFields] = make[ExtractFields](CodecMakerConfig())
[info]                                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:51:65: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("a");
[info]       private[this] val r1: Array[String] = Array("b");
[info]       private[this] val r2: Array[String] = Array("l", "r");
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.A): com.github.plokhotnyuk.jsoniter_scala.macros.A = if (in.isNextToken('{'))
[info]         {
[info]           var _a: Int = 0;
[info]           var req0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 97 => if (in.isCharBufEqualsTo(l, "a"))
[info]                       {
[info]                         _a = in.readInt();
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.A(a = _a)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.B): com.github.plokhotnyuk.jsoniter_scala.macros.B = if (in.isNextToken('{'))
[info]         {
[info]           var _b: String = null;
[info]           var req0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         _b = in.readString(_b);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r1(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.B(b = _b)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.C): com.github.plokhotnyuk.jsoniter_scala.macros.C = if (in.isNextToken('{'))
[info]         {
[info]           var _l: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var _r: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         _l = JsoniterCodecs.this.adtCodec.decodeValue(in, _l);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 114 => if (in.isCharBufEqualsTo(l, "r"))
[info]                       {
[info]                         _r = JsoniterCodecs.this.adtCodec.decodeValue(in, _r);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r2(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.C(l = _l, r = _r)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case 65 => if (in.isCharBufEqualsTo(l, "A"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d1(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 66 => if (in.isCharBufEqualsTo(l, "B"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d2(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 67 => if (in.isCharBufEqualsTo(l, "C"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d3(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.A, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("A")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("a");
[info]           out.writeVal(x.a)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.B, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("B")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("b");
[info]           out.writeVal(x.b)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.C, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("C")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           JsoniterCodecs.this.adtCodec.encodeValue(x.l, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("r");
[info]           JsoniterCodecs.this.adtCodec.encodeValue(x.r, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.A)) => e1(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.B)) => e2(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.C)) => e3(x, out)
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val adtCodec: JsonValueCodec[AdtBase] = make[AdtBase](CodecMakerConfig())
[info]                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:52:89: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("status");
[info]       private[this] val r1: Array[String] = Array("distance", "duration", "status");
[info]       private[this] val r2: Array[String] = Array("text", "value");
[info]       private[this] def d1(in: JsonReader, default: Seq[String]): Seq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Value): com.github.plokhotnyuk.jsoniter_scala.macros.Value = if (in.isNextToken('{'))
[info]         {
[info]           var _text: String = null;
[info]           var _value: Int = 0;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         _text = in.readString(_text);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 111972721 => if (in.isCharBufEqualsTo(l, "value"))
[info]                       {
[info]                         _value = in.readInt();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r2(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Value(text = _text, value = _value)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Elements): com.github.plokhotnyuk.jsoniter_scala.macros.Elements = if (in.isNextToken('{'))
[info]         {
[info]           var _distance: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _duration: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _status: String = null;
[info]           var req0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 288459765 => if (in.isCharBufEqualsTo(l, "distance"))
[info]                       {
[info]                         _distance = d6(in, _distance);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1992012396 => if (in.isCharBufEqualsTo(l, "duration"))
[info]                       {
[info]                         _duration = d6(in, _duration);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         _status = in.readString(_status);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r1(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Elements(distance = _distance, duration = _duration, status = _status)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d4(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Rows): com.github.plokhotnyuk.jsoniter_scala.macros.Rows = if (in.isNextToken('{'))
[info]         {
[info]           var _elements: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -8339209 => if (in.isCharBufEqualsTo(l, "elements"))
[info]                       _elements = d4(in, _elements)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Rows(elements = _elements)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]             do 
[info]               x.+=(d3(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = if (in.isNextToken('{'))
[info]         {
[info]           var _destination_addresses: Seq[String] = Seq.empty[String];
[info]           var _origin_addresses: Seq[String] = Seq.empty[String];
[info]           var _rows: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]           var _status: String = null;
[info]           var req0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 715423921 => if (in.isCharBufEqualsTo(l, "destination_addresses"))
[info]                       _destination_addresses = d1(in, _destination_addresses)
[info]                     else
[info]                       in.skip()
[info]                     case 1780936137 => if (in.isCharBufEqualsTo(l, "origin_addresses"))
[info]                       _origin_addresses = d1(in, _origin_addresses)
[info]                     else
[info]                       in.skip()
[info]                     case 3506649 => if (in.isCharBufEqualsTo(l, "rows"))
[info]                       _rows = d2(in, _rows)
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         _status = in.readString(_status);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix(destination_addresses = _destination_addresses, origin_addresses = _origin_addresses, rows = _rows, status = _status)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: Seq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: com.github.plokhotnyuk.jsoniter_scala.macros.Value, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("value");
[info]           out.writeVal(x.value)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.Elements, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("distance");
[info]           e6(x.distance, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("duration");
[info]           e6(x.duration, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("status");
[info]           out.writeVal(x.status)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e4(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e5(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.Rows, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.elements;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("elements");
[info]               e4(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e3(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.destination_addresses;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("destination_addresses");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.origin_addresses;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("origin_addresses");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.rows;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("rows");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("status");
[info]           out.writeVal(x.status)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val googleMapsAPICodec: JsonValueCodec[DistanceMatrix] = make[DistanceMatrix](CodecMakerConfig())
[info]                                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:53:78: Generated JSON codec for type 'Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]] {
[info]       def nullValue: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]       def decodeValue(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = d0(in, default);
[info]       def encodeValue(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "user", "retweeted_status", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "possibly_sensitive", "lang");
[info]       private[this] val r1: Array[String] = Array("screen_name", "name", "id", "id_str");
[info]       private[this] val r2: Array[String] = Array("url", "expanded_url", "display_url");
[info]       private[this] val r3: Array[String] = Array("id", "id_str", "name", "screen_name", "location", "description", "url", "entities", "protected", "followers_count", "friends_count", "listed_count", "created_at", "favourites_count", "utc_offset", "time_zone", "geo_enabled", "verified", "statuses_count", "lang", "contributors_enabled", "is_translator", "is_translation_enabled", "profile_background_color", "profile_background_image_url", "profile_background_image_url_https", "profile_background_tile", "profile_image_url", "profile_image_url_https", "profile_banner_url", "profile_link_color", "profile_sidebar_border_color", "profile_sidebar_fill_color", "profile_text_color", "profile_use_background_image", "has_extended_profile", "default_profile", "default_profile_image", "following", "follow_request_sent", "notifications", "translator_type");
[info]       private[this] val r4: Array[String] = Array("url", "description");
[info]       private[this] val r5: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "user", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "possibly_sensitive", "lang");
[info]       private[this] def d3(in: JsonReader, default: Seq[String]): Seq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: Seq[Int]): Seq[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions): com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions = if (in.isNextToken('{'))
[info]         {
[info]           var _screen_name: String = null;
[info]           var _name: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var req0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         _screen_name = in.readString(_screen_name);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         _name = in.readString(_name);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = in.readString(_id_str);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       _indices = d6(in, _indices)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r1(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions(screen_name = _screen_name, name = _name, id = _id, id_str = _id_str, indices = _indices)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d4(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d8(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Urls): com.github.plokhotnyuk.jsoniter_scala.macros.Urls = if (in.isNextToken('{'))
[info]         {
[info]           var _url: String = null;
[info]           var _expanded_url: String = null;
[info]           var _display_url: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var req0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         _url = in.readString(_url);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -518939415 => if (in.isCharBufEqualsTo(l, "expanded_url"))
[info]                       {
[info]                         _expanded_url = in.readString(_expanded_url);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1714674802 => if (in.isCharBufEqualsTo(l, "display_url"))
[info]                       {
[info]                         _display_url = in.readString(_display_url);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       _indices = d6(in, _indices)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r2(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Urls(url = _url, expanded_url = _expanded_url, display_url = _display_url, indices = _indices)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d7(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]             do 
[info]               x.+=(d8(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Entities): com.github.plokhotnyuk.jsoniter_scala.macros.Entities = if (in.isNextToken('{'))
[info]         {
[info]           var _hashtags: Seq[String] = Seq.empty[String];
[info]           var _symbols: Seq[String] = Seq.empty[String];
[info]           var _user_mentions: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 149143079 => if (in.isCharBufEqualsTo(l, "hashtags"))
[info]                       _hashtags = d3(in, _hashtags)
[info]                     else
[info]                       in.skip()
[info]                     case -1743438373 => if (in.isCharBufEqualsTo(l, "symbols"))
[info]                       _symbols = d3(in, _symbols)
[info]                     else
[info]                       in.skip()
[info]                     case -553518659 => if (in.isCharBufEqualsTo(l, "user_mentions"))
[info]                       _user_mentions = d4(in, _user_mentions)
[info]                     else
[info]                       in.skip()
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       _urls = d7(in, _urls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Entities(hashtags = _hashtags, symbols = _symbols, user_mentions = _user_mentions, urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d9(in: JsonReader, default: Option[String]): Option[String] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(in.readString(null))
[info]         };
[info]       private[this] def d12(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Url): com.github.plokhotnyuk.jsoniter_scala.macros.Url = if (in.isNextToken('{'))
[info]         {
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       _urls = d7(in, _urls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Url(urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d11(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities): com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = if (in.isNextToken('{'))
[info]         {
[info]           var _url: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var _description: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         _url = d12(in, _url);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         _description = d12(in, _description);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r4(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities(url = _url, description = _description)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d10(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.User): com.github.plokhotnyuk.jsoniter_scala.macros.User = if (in.isNextToken('{'))
[info]         {
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _name: String = null;
[info]           var _screen_name: String = null;
[info]           var _location: String = null;
[info]           var _description: String = null;
[info]           var _url: String = null;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = null;
[info]           var _protected: Boolean = false;
[info]           var _followers_count: Int = 0;
[info]           var _friends_count: Int = 0;
[info]           var _listed_count: Int = 0;
[info]           var _created_at: String = null;
[info]           var _favourites_count: Int = 0;
[info]           var _utc_offset: Int = 0;
[info]           var _time_zone: String = null;
[info]           var _geo_enabled: Boolean = false;
[info]           var _verified: Boolean = false;
[info]           var _statuses_count: Int = 0;
[info]           var _lang: String = null;
[info]           var _contributors_enabled: Boolean = false;
[info]           var _is_translator: Boolean = false;
[info]           var _is_translation_enabled: Boolean = false;
[info]           var _profile_background_color: String = null;
[info]           var _profile_background_image_url: String = null;
[info]           var _profile_background_image_url_https: String = null;
[info]           var _profile_background_tile: Boolean = false;
[info]           var _profile_image_url: String = null;
[info]           var _profile_image_url_https: String = null;
[info]           var _profile_banner_url: String = null;
[info]           var _profile_link_color: String = null;
[info]           var _profile_sidebar_border_color: String = null;
[info]           var _profile_sidebar_fill_color: String = null;
[info]           var _profile_text_color: String = null;
[info]           var _profile_use_background_image: Boolean = false;
[info]           var _has_extended_profile: Boolean = false;
[info]           var _default_profile: Boolean = false;
[info]           var _default_profile_image: Boolean = false;
[info]           var _following: Boolean = false;
[info]           var _follow_request_sent: Boolean = false;
[info]           var _notifications: Boolean = false;
[info]           var _translator_type: String = null;
[info]           var req0 = -1;
[info]           var req1 = 1023;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = in.readString(_id_str);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         _name = in.readString(_name);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         _screen_name = in.readString(_screen_name);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1901043637 => if (in.isCharBufEqualsTo(l, "location"))
[info]                       {
[info]                         _location = in.readString(_location);
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         _description = in.readString(_description);
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         _url = in.readString(_url);
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         _entities = d11(in, _entities);
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -608539730 => if (in.isCharBufEqualsTo(l, "protected"))
[info]                       {
[info]                         _protected = in.readBoolean();
[info]                         req0.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -460163995 => if (in.isCharBufEqualsTo(l, "followers_count"))
[info]                       {
[info]                         _followers_count = in.readInt();
[info]                         req0.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1666926107 => if (in.isCharBufEqualsTo(l, "friends_count"))
[info]                       {
[info]                         _friends_count = in.readInt();
[info]                         req0.&=(-1025)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1974943731 => if (in.isCharBufEqualsTo(l, "listed_count"))
[info]                       {
[info]                         _listed_count = in.readInt();
[info]                         req0.&=(-2049)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         _created_at = in.readString(_created_at);
[info]                         req0.&=(-4097)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 226316666 => if (in.isCharBufEqualsTo(l, "favourites_count"))
[info]                       {
[info]                         _favourites_count = in.readInt();
[info]                         req0.&=(-8193)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1699658638 => if (in.isCharBufEqualsTo(l, "utc_offset"))
[info]                       {
[info]                         _utc_offset = in.readInt();
[info]                         req0.&=(-16385)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 36848094 => if (in.isCharBufEqualsTo(l, "time_zone"))
[info]                       {
[info]                         _time_zone = in.readString(_time_zone);
[info]                         req0.&=(-32769)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1085743021 => if (in.isCharBufEqualsTo(l, "geo_enabled"))
[info]                       {
[info]                         _geo_enabled = in.readBoolean();
[info]                         req0.&=(-65537)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1994383672 => if (in.isCharBufEqualsTo(l, "verified"))
[info]                       {
[info]                         _verified = in.readBoolean();
[info]                         req0.&=(-131073)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1824078800 => if (in.isCharBufEqualsTo(l, "statuses_count"))
[info]                       {
[info]                         _statuses_count = in.readInt();
[info]                         req0.&=(-262145)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         _lang = in.readString(_lang);
[info]                         req0.&=(-524289)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 647263482 => if (in.isCharBufEqualsTo(l, "contributors_enabled"))
[info]                       {
[info]                         _contributors_enabled = in.readBoolean();
[info]                         req0.&=(-1048577)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 583435343 => if (in.isCharBufEqualsTo(l, "is_translator"))
[info]                       {
[info]                         _is_translator = in.readBoolean();
[info]                         req0.&=(-2097153)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1690715422 => if (in.isCharBufEqualsTo(l, "is_translation_enabled"))
[info]                       {
[info]                         _is_translation_enabled = in.readBoolean();
[info]                         req0.&=(-4194305)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1592986856 => if (in.isCharBufEqualsTo(l, "profile_background_color"))
[info]                       {
[info]                         _profile_background_color = in.readString(_profile_background_color);
[info]                         req0.&=(-8388609)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1189803120 => if (in.isCharBufEqualsTo(l, "profile_background_image_url"))
[info]                       {
[info]                         _profile_background_image_url = in.readString(_profile_background_image_url);
[info]                         req0.&=(-16777217)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 594447228 => if (in.isCharBufEqualsTo(l, "profile_background_image_url_https"))
[info]                       {
[info]                         _profile_background_image_url_https = in.readString(_profile_background_image_url_https);
[info]                         req0.&=(-33554433)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1021718665 => if (in.isCharBufEqualsTo(l, "profile_background_tile"))
[info]                       {
[info]                         _profile_background_tile = in.readBoolean();
[info]                         req0.&=(-67108865)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -174080651 => if (in.isCharBufEqualsTo(l, "profile_image_url"))
[info]                       {
[info]                         _profile_image_url = in.readString(_profile_image_url);
[info]                         req0.&=(-134217729)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -782008927 => if (in.isCharBufEqualsTo(l, "profile_image_url_https"))
[info]                       {
[info]                         _profile_image_url_https = in.readString(_profile_image_url_https);
[info]                         req0.&=(-268435457)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -690137550 => if (in.isCharBufEqualsTo(l, "profile_banner_url"))
[info]                       {
[info]                         _profile_banner_url = in.readString(_profile_banner_url);
[info]                         req0.&=(-536870913)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1512257332 => if (in.isCharBufEqualsTo(l, "profile_link_color"))
[info]                       {
[info]                         _profile_link_color = in.readString(_profile_link_color);
[info]                         req0.&=(-1073741825)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1412739479 => if (in.isCharBufEqualsTo(l, "profile_sidebar_border_color"))
[info]                       {
[info]                         _profile_sidebar_border_color = in.readString(_profile_sidebar_border_color);
[info]                         req0.&=(2147483647)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 486184128 => if (in.isCharBufEqualsTo(l, "profile_sidebar_fill_color"))
[info]                       {
[info]                         _profile_sidebar_fill_color = in.readString(_profile_sidebar_fill_color);
[info]                         req1.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1774134745 => if (in.isCharBufEqualsTo(l, "profile_text_color"))
[info]                       {
[info]                         _profile_text_color = in.readString(_profile_text_color);
[info]                         req1.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -101767272 => if (in.isCharBufEqualsTo(l, "profile_use_background_image"))
[info]                       {
[info]                         _profile_use_background_image = in.readBoolean();
[info]                         req1.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 284519336 => if (in.isCharBufEqualsTo(l, "has_extended_profile"))
[info]                       {
[info]                         _has_extended_profile = in.readBoolean();
[info]                         req1.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -312724053 => if (in.isCharBufEqualsTo(l, "default_profile"))
[info]                       {
[info]                         _default_profile = in.readBoolean();
[info]                         req1.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 545330631 => if (in.isCharBufEqualsTo(l, "default_profile_image"))
[info]                       {
[info]                         _default_profile_image = in.readBoolean();
[info]                         req1.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 765915793 => if (in.isCharBufEqualsTo(l, "following"))
[info]                       {
[info]                         _following = in.readBoolean();
[info]                         req1.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 585125142 => if (in.isCharBufEqualsTo(l, "follow_request_sent"))
[info]                       {
[info]                         _follow_request_sent = in.readBoolean();
[info]                         req1.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1272354024 => if (in.isCharBufEqualsTo(l, "notifications"))
[info]                       {
[info]                         _notifications = in.readBoolean();
[info]                         req1.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -475640257 => if (in.isCharBufEqualsTo(l, "translator_type"))
[info]                       {
[info]                         _translator_type = in.readString(_translator_type);
[info]                         req1.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r3(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           if (req1.!=(0))
[info]             in.requiredFieldError(r3(Integer.numberOfTrailingZeros(req1).+(32)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.User(id = _id, id_str = _id_str, name = _name, screen_name = _screen_name, location = _location, description = _description, url = _url, entities = _entities, `protected` = _protected, followers_count = _followers_count, friends_count = _friends_count, listed_count = _listed_count, created_at = _created_at, favourites_count = _favourites_count, utc_offset = _utc_offset, time_zone = _time_zone, geo_enabled = _geo_enabled, verified = _verified, statuses_count = _statuses_count, lang = _lang, contributors_enabled = _contributors_enabled, is_translator = _is_translator, is_translation_enabled = _is_translation_enabled, profile_background_color = _profile_background_color, profile_background_image_url = _profile_background_image_url, profile_background_image_url_https = _profile_background_image_url_https, profile_background_tile = _profile_background_tile, profile_image_url = _profile_image_url, profile_image_url_https = _profile_image_url_https, profile_banner_url = _profile_banner_url, profile_link_color = _profile_link_color, profile_sidebar_border_color = _profile_sidebar_border_color, profile_sidebar_fill_color = _profile_sidebar_fill_color, profile_text_color = _profile_text_color, profile_use_background_image = _profile_use_background_image, has_extended_profile = _has_extended_profile, default_profile = _default_profile, default_profile_image = _default_profile_image, following = _following, follow_request_sent = _follow_request_sent, notifications = _notifications, translator_type = _translator_type)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d13(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus): com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var req0 = 32767;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         _created_at = in.readString(_created_at);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = in.readString(_id_str);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         _text = in.readString(_text);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         _truncated = in.readBoolean();
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         _entities = d2(in, _entities);
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         _source = in.readString(_source);
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         _user = d10(in, _user);
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       _geo = d9(in, _geo)
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       _coordinates = d9(in, _coordinates)
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       _place = d9(in, _place)
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       _contributors = d9(in, _contributors)
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         _is_quote_status = in.readBoolean();
[info]                         req0.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         _retweet_count = in.readInt();
[info]                         req0.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         _favorite_count = in.readInt();
[info]                         req0.&=(-1025)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         _favorited = in.readBoolean();
[info]                         req0.&=(-2049)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         _retweeted = in.readBoolean();
[info]                         req0.&=(-4097)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         _possibly_sensitive = in.readBoolean();
[info]                         req0.&=(-8193)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         _lang = in.readString(_lang);
[info]                         req0.&=(-16385)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r5(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet): com.github.plokhotnyuk.jsoniter_scala.macros.Tweet = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _retweeted_status: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = null;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var req0 = 65535;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         _created_at = in.readString(_created_at);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = in.readString(_id_str);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         _text = in.readString(_text);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         _truncated = in.readBoolean();
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         _entities = d2(in, _entities);
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         _source = in.readString(_source);
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         _user = d10(in, _user);
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       _geo = d9(in, _geo)
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       _coordinates = d9(in, _coordinates)
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       _place = d9(in, _place)
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       _contributors = d9(in, _contributors)
[info]                     else
[info]                       in.skip()
[info]                     case 364396852 => if (in.isCharBufEqualsTo(l, "retweeted_status"))
[info]                       {
[info]                         _retweeted_status = d13(in, _retweeted_status);
[info]                         req0.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         _is_quote_status = in.readBoolean();
[info]                         req0.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         _retweet_count = in.readInt();
[info]                         req0.&=(-1025)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         _favorite_count = in.readInt();
[info]                         req0.&=(-2049)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         _favorited = in.readBoolean();
[info]                         req0.&=(-4097)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         _retweeted = in.readBoolean();
[info]                         req0.&=(-8193)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         _possibly_sensitive = in.readBoolean();
[info]                         req0.&=(-16385)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         _lang = in.readString(_lang);
[info]                         req0.&=(-32769)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Tweet(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, retweeted_status = _retweeted_status, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]             do 
[info]               x.+=(d1(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e3(x: Seq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: Seq[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("screen_name");
[info]           out.writeVal(x.screen_name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("name");
[info]           out.writeVal(x.name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           val v = x.indices;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("indices");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e4(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e5(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e8(x: com.github.plokhotnyuk.jsoniter_scala.macros.Urls, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           out.writeVal(x.url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("expanded_url");
[info]           out.writeVal(x.expanded_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("display_url");
[info]           out.writeVal(x.display_url)
[info]         };
[info]         {
[info]           val v = x.indices;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("indices");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e7(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e8(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.Entities, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.hashtags;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("hashtags");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.symbols;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("symbols");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.user_mentions;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("user_mentions");
[info]               e4(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.urls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("urls");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e11(x: com.github.plokhotnyuk.jsoniter_scala.macros.Url, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.urls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("urls");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e10(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           e11(x.url, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("description");
[info]           e11(x.description, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e9(x: com.github.plokhotnyuk.jsoniter_scala.macros.User, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("name");
[info]           out.writeVal(x.name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("screen_name");
[info]           out.writeVal(x.screen_name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("location");
[info]           out.writeVal(x.location)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("description");
[info]           out.writeVal(x.description)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           out.writeVal(x.url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e10(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("protected");
[info]           out.writeVal(x.`protected`)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("followers_count");
[info]           out.writeVal(x.followers_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("friends_count");
[info]           out.writeVal(x.friends_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("listed_count");
[info]           out.writeVal(x.listed_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favourites_count");
[info]           out.writeVal(x.favourites_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("utc_offset");
[info]           out.writeVal(x.utc_offset)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("time_zone");
[info]           out.writeVal(x.time_zone)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("geo_enabled");
[info]           out.writeVal(x.geo_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("verified");
[info]           out.writeVal(x.verified)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("statuses_count");
[info]           out.writeVal(x.statuses_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("contributors_enabled");
[info]           out.writeVal(x.contributors_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_translator");
[info]           out.writeVal(x.is_translator)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_translation_enabled");
[info]           out.writeVal(x.is_translation_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_color");
[info]           out.writeVal(x.profile_background_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_image_url");
[info]           out.writeVal(x.profile_background_image_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_image_url_https");
[info]           out.writeVal(x.profile_background_image_url_https)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_tile");
[info]           out.writeVal(x.profile_background_tile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_image_url");
[info]           out.writeVal(x.profile_image_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_image_url_https");
[info]           out.writeVal(x.profile_image_url_https)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_banner_url");
[info]           out.writeVal(x.profile_banner_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_link_color");
[info]           out.writeVal(x.profile_link_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_sidebar_border_color");
[info]           out.writeVal(x.profile_sidebar_border_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_sidebar_fill_color");
[info]           out.writeVal(x.profile_sidebar_fill_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_text_color");
[info]           out.writeVal(x.profile_text_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_use_background_image");
[info]           out.writeVal(x.profile_use_background_image)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("has_extended_profile");
[info]           out.writeVal(x.has_extended_profile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("default_profile");
[info]           out.writeVal(x.default_profile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("default_profile_image");
[info]           out.writeVal(x.default_profile_image)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("following");
[info]           out.writeVal(x.following)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("follow_request_sent");
[info]           out.writeVal(x.follow_request_sent)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("notifications");
[info]           out.writeVal(x.notifications)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("translator_type");
[info]           out.writeVal(x.translator_type)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e12(x: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("truncated");
[info]           out.writeVal(x.truncated)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e2(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("source");
[info]           out.writeVal(x.source)
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_screen_name;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("user");
[info]           e9(x.user, out)
[info]         };
[info]         {
[info]           val v = x.geo;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geo");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.place;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("place");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.contributors;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("contributors");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_quote_status");
[info]           out.writeVal(x.is_quote_status)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweet_count");
[info]           out.writeVal(x.retweet_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorite_count");
[info]           out.writeVal(x.favorite_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorited");
[info]           out.writeVal(x.favorited)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted");
[info]           out.writeVal(x.retweeted)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]           out.writeVal(x.possibly_sensitive)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("truncated");
[info]           out.writeVal(x.truncated)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e2(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("source");
[info]           out.writeVal(x.source)
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_screen_name;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("user");
[info]           e9(x.user, out)
[info]         };
[info]         {
[info]           val v = x.geo;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geo");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.place;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("place");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.contributors;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("contributors");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted_status");
[info]           e12(x.retweeted_status, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_quote_status");
[info]           out.writeVal(x.is_quote_status)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweet_count");
[info]           out.writeVal(x.retweet_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorite_count");
[info]           out.writeVal(x.favorite_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorited");
[info]           out.writeVal(x.favorited)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted");
[info]           out.writeVal(x.retweeted)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]           out.writeVal(x.possibly_sensitive)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e1(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val twitterAPICodec: JsonValueCodec[Seq[Tweet]] = make[Seq[Tweet]](CodecMakerConfig())
[info]                                                                              ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:17:18: local val v1 in value arraysFormat is never used
[warn]     implicit val v1: Format[Array[BigInt]] = Format(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:23:18: local val v1 in value bitSetsFormat is never used
[warn]     implicit val v1: Reads[BitSet] = Reads[BitSet](js => JsSuccess(BitSet(js.as[Array[Int]]: _*)))
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:24:18: local val v2 in value bitSetsFormat is never used
[warn]     implicit val v2: Reads[mutable.BitSet] =
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:31:18: local val v1 in value mapsFormat is never used
[warn]     implicit val v1: OFormat[HashMap[String, Double]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:34:18: local val v2 in value mapsFormat is never used
[warn]     implicit val v2: OFormat[Map[Int, HashMap[Long, Double]]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:46:18: local val v1 in value mutableMapsFormat is never used
[warn]     implicit val v1: OFormat[mutable.HashMap[String, Double]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:49:18: local val v2 in value mutableMapsFormat is never used
[warn]     implicit val v2: OFormat[mutable.Map[Int, mutable.OpenHashMap[Long, Double]]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:66:18: local val v1 in value intAndLongMapsFormat is never used
[warn]     implicit val v1: OFormat[IntMap[Double]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:71:18: local val v2 in value intAndLongMapsFormat is never used
[warn]     implicit val v2: OFormat[mutable.LongMap[LongMap[Double]]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:83:18: local val v1 in value primitivesFormat is never used
[warn]     implicit val v1: Format[Char] = Format(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:90:23: local val v1 in value adtFormat is never used
[warn]     implicit lazy val v1: OFormat[A] = Json.format[A]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:91:23: local val v2 in value adtFormat is never used
[warn]     implicit lazy val v2: OFormat[B] = Json.format[B]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:92:23: local val v3 in value adtFormat is never used
[warn]     implicit lazy val v3: OFormat[C] = Json.format[C]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:97:18: local val v1 in value googleMapsAPIFormat is never used
[warn]     implicit val v1: OFormat[Value] = Json.format[Value]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:98:18: local val v2 in value googleMapsAPIFormat is never used
[warn]     implicit val v2: OFormat[Elements] = Json.format[Elements]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:99:18: local val v3 in value googleMapsAPIFormat is never used
[warn]     implicit val v3: OFormat[Rows] = Json.format[Rows]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:103:18: local val v1 in value twitterAPIFormat is never used
[warn]     implicit val v1: OFormat[Urls] = Json.format[Urls]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:104:18: local val v2 in value twitterAPIFormat is never used
[warn]     implicit val v2: OFormat[Url] = Json.format[Url]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:105:18: local val v3 in value twitterAPIFormat is never used
[warn]     implicit val v3: OFormat[UserEntities] = Json.format[UserEntities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:106:18: local val v4 in value twitterAPIFormat is never used
[warn]     implicit val v4: OFormat[UserMentions] = Json.format[UserMentions]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:107:18: local val v5 in value twitterAPIFormat is never used
[warn]     implicit val v5: OFormat[Entities] = Json.format[Entities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:108:18: local val v6 in value twitterAPIFormat is never used
[warn]     implicit val v6: Format[User] = Jsonx.formatCaseClass[User]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:109:18: local val v7 in value twitterAPIFormat is never used
[warn]     implicit val v7: Format[RetweetedStatus] = Jsonx.formatCaseClass[RetweetedStatus]
[warn]                  ^
[warn] 24 warnings found
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.22.3-SNAPSHOT.jar ...
[info] Compiling 42 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/test-classes ...
Processing 345 classes from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes with "reflection" generator
Writing out Java source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/src_managed/jmh and resources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/resource_managed/jmh
[info] Done packaging.
[info] Compiling 536 Java sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.22.3-SNAPSHOT-tests.jar ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.22.3-SNAPSHOT-jmh.jar ...
[info] Done packaging.
[info] Running (fork) org.openjdk.jmh.Main -jvm /usr/lib/jvm/java-9-oracle/bin/java -prof gc -rf json -rff jdk9.json .*Benchmark.*
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce
[info] # Run progress: 0.00% complete, ETA 00:49:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 336524.053 ops/s
[info] # Warmup Iteration   2: 689355.823 ops/s
[info] # Warmup Iteration   3: 691049.228 ops/s
[info] Iteration   1: 696698.813 ops/s
[info]                  ·gc.alloc.rate:                                  1841.234 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4160.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.058 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.131 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2032.156 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4591.361 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                7.524 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        14.000 ms
[info] Iteration   2: 704533.869 ops/s
[info]                  ·gc.alloc.rate:                                  1862.268 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4160.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.110 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3802.235 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 682120.760 ops/s
[info]                  ·gc.alloc.rate:                                  1802.762 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4160.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.833 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3927.101 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 698284.807 ops/s
[info]                  ·gc.alloc.rate:                                  1845.576 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4160.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.309 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4603.443 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 706158.644 ops/s
[info]                  ·gc.alloc.rate:                                  1866.212 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4160.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.713 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3793.314 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce":
[info]   697559.378 ±(99.9%) 36642.303 ops/s [Average]
[info]   (min, avg, max) = (682120.760, 697559.378, 706158.644), stdev = 9515.890
[info]   CI (99.9%): [660917.075, 734201.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate":
[info]   1843.610 ±(99.9%) 96.977 MB/sec [Average]
[info]   (min, avg, max) = (1802.762, 1843.610, 1866.212), stdev = 25.185
[info]   CI (99.9%): [1746.633, 1940.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4160.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4160.001, 4160.001, 4160.001), stdev = 0.001
[info]   CI (99.9%): [4160.001, 4160.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.012 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.012, 0.058), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.028 ±(99.9%) 0.221 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 0.028, 0.131), stdev = 0.057
[info]   CI (99.9%): [≈ 0, 0.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1836.024 ±(99.9%) 707.409 MB/sec [Average]
[info]   (min, avg, max) = (1701.713, 1836.024, 2042.309), stdev = 183.712
[info]   CI (99.9%): [1128.615, 2543.433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   4143.491 ±(99.9%) 1608.592 B/op [Average]
[info]   (min, avg, max) = (3793.314, 4143.491, 4603.443), stdev = 417.746
[info]   CI (99.9%): [2534.899, 5752.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   1.505 ±(99.9%) 12.957 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.505, 7.524), stdev = 3.365
[info]   CI (99.9%): [≈ 0, 14.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 14.000), stdev = 4.382
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala
[info] # Run progress: 0.27% complete, ETA 01:20:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 253188.004 ops/s
[info] # Warmup Iteration   2: 1417331.316 ops/s
[info] # Warmup Iteration   3: 1454251.706 ops/s
[info] Iteration   1: 1453871.901 ops/s
[info]                  ·gc.alloc.rate:            1034.446 MB/sec
[info]                  ·gc.alloc.rate.norm:       1120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.715 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1091.058 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   2: 1454238.733 ops/s
[info]                  ·gc.alloc.rate:            1034.906 MB/sec
[info]                  ·gc.alloc.rate.norm:       1120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.245 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1090.066 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   3: 1453080.645 ops/s
[info]                  ·gc.alloc.rate:                   1033.880 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1007.060 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1090.946 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 5.051 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   4: 1463619.025 ops/s
[info]                  ·gc.alloc.rate:                                  1041.652 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1120.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.198 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.213 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.291 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1098.108 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 1409298.036 ops/s
[info]                  ·gc.alloc.rate:                                  1003.060 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1120.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.388 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1140.465 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala":
[info]   1446821.668 ±(99.9%) 82453.868 ops/s [Average]
[info]   (min, avg, max) = (1409298.036, 1446821.668, 1463619.025), stdev = 21413.008
[info]   CI (99.9%): [1364367.800, 1529275.536] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1029.589 ±(99.9%) 58.385 MB/sec [Average]
[info]   (min, avg, max) = (1003.060, 1029.589, 1041.652), stdev = 15.162
[info]   CI (99.9%): [971.204, 1087.973] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1120.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1120.000, 1120.000, 1120.000), stdev = 0.001
[info]   CI (99.9%): [1120.000, 1120.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.040 ±(99.9%) 0.341 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.040, 0.198), stdev = 0.089
[info]   CI (99.9%): [≈ 0, 0.381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.043 ±(99.9%) 0.367 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.043, 0.213), stdev = 0.095
[info]   CI (99.9%): [≈ 0, 0.409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1012.940 ±(99.9%) 29.541 MB/sec [Average]
[info]   (min, avg, max) = (1007.060, 1012.940, 1021.388), stdev = 7.672
[info]   CI (99.9%): [983.399, 1042.481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1102.129 ±(99.9%) 83.457 B/op [Average]
[info]   (min, avg, max) = (1090.066, 1102.129, 1140.465), stdev = 21.673
[info]   CI (99.9%): [1018.672, 1185.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.010 ±(99.9%) 8.698 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.010, 5.051), stdev = 2.259
[info]   CI (99.9%): [≈ 0, 9.708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.time":
[info]   49.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 9.800, 14.000), stdev = 5.762
[info]   CI (99.9%): [49.000, 49.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala
[info] # Run progress: 0.54% complete, ETA 01:19:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2382747.981 ops/s
[info] # Warmup Iteration   2: 3115542.135 ops/s
[info] # Warmup Iteration   3: 3218243.279 ops/s
[info] Iteration   1: 3292099.754 ops/s
[info]                  ·gc.alloc.rate:                   217.501 MB/sec
[info]                  ·gc.alloc.rate.norm:              104.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             336.337 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        160.823 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.318 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 3304658.886 ops/s
[info]                  ·gc.alloc.rate:            218.386 MB/sec
[info]                  ·gc.alloc.rate.norm:       104.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.085 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 160.527 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   3: 3325093.181 ops/s
[info]                  ·gc.alloc.rate:      219.689 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3306622.519 ops/s
[info]                  ·gc.alloc.rate:            218.477 MB/sec
[info]                  ·gc.alloc.rate.norm:       104.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.038 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 160.438 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 3331881.499 ops/s
[info]                  ·gc.alloc.rate:            220.133 MB/sec
[info]                  ·gc.alloc.rate.norm:       104.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.010 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 159.218 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala":
[info]   3312071.168 ±(99.9%) 62254.002 ops/s [Average]
[info]   (min, avg, max) = (3292099.754, 3312071.168, 3331881.499), stdev = 16167.166
[info]   CI (99.9%): [3249817.166, 3374325.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   218.837 ±(99.9%) 4.095 MB/sec [Average]
[info]   (min, avg, max) = (217.501, 218.837, 220.133), stdev = 1.063
[info]   CI (99.9%): [214.742, 222.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   104.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (104.000, 104.000, 104.000), stdev = 0.001
[info]   CI (99.9%): [104.000, 104.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   269.494 ±(99.9%) 580.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.494, 337.085), stdev = 150.652
[info]   CI (99.9%): [≈ 0, 849.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   128.201 ±(99.9%) 275.973 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 128.201, 160.823), stdev = 71.669
[info]   CI (99.9%): [≈ 0, 404.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.064 ±(99.9%) 0.548 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.064, 0.318), stdev = 0.142
[info]   CI (99.9%): [≈ 0, 0.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 3.000), stdev = 1.304
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson
[info] # Run progress: 0.81% complete, ETA 01:18:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13046.446 ops/s
[info] # Warmup Iteration   2: 152560.603 ops/s
[info] # Warmup Iteration   3: 152856.030 ops/s
[info] Iteration   1: 156534.317 ops/s
[info]                  ·gc.alloc.rate:                   1237.124 MB/sec
[info]                  ·gc.alloc.rate.norm:              12440.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1343.439 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        13509.056 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      1.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 13.395 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   2: 159518.101 ops/s
[info]                  ·gc.alloc.rate:                   1261.034 MB/sec
[info]                  ·gc.alloc.rate.norm:              12440.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1344.490 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        13263.297 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 46.007 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   3: 161098.912 ops/s
[info]                  ·gc.alloc.rate:                                  1273.308 MB/sec
[info]                  ·gc.alloc.rate.norm:                             12440.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.031 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.303 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.181 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9976.769 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 163312.629 ops/s
[info]                  ·gc.alloc.rate:                                  1290.927 MB/sec
[info]                  ·gc.alloc.rate.norm:                             12440.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.671 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       13121.724 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 161558.959 ops/s
[info]                  ·gc.alloc.rate:                                  1276.735 MB/sec
[info]                  ·gc.alloc.rate.norm:                             12440.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.353 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       13264.489 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson":
[info]   160404.584 ±(99.9%) 9824.090 ops/s [Average]
[info]   (min, avg, max) = (156534.317, 160404.584, 163312.629), stdev = 2551.285
[info]   CI (99.9%): [150580.494, 170228.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1267.825 ±(99.9%) 77.774 MB/sec [Average]
[info]   (min, avg, max) = (1237.124, 1267.825, 1290.927), stdev = 20.198
[info]   CI (99.9%): [1190.051, 1345.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   12440.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (12440.003, 12440.003, 12440.003), stdev = 0.001
[info]   CI (99.9%): [12440.002, 12440.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.007 ±(99.9%) 0.053 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.031), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.065 ±(99.9%) 0.514 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.065, 0.303), stdev = 0.133
[info]   CI (99.9%): [≈ 0, 0.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1286.427 ±(99.9%) 571.962 MB/sec [Average]
[info]   (min, avg, max) = (1021.181, 1286.427, 1361.671), stdev = 148.537
[info]   CI (99.9%): [714.465, 1858.389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   12627.067 ±(99.9%) 5730.143 B/op [Average]
[info]   (min, avg, max) = (9976.769, 12627.067, 13509.056), stdev = 1488.100
[info]   CI (99.9%): [6896.924, 18357.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.199 ±(99.9%) 7.781 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.199, 4.664), stdev = 2.021
[info]   CI (99.9%): [≈ 0, 8.981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   11.881 ±(99.9%) 76.781 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.881, 46.007), stdev = 19.940
[info]   CI (99.9%): [≈ 0, 88.662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.time":
[info]   50.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 10.000, 19.000), stdev = 8.216
[info]   CI (99.9%): [50.000, 50.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce
[info] # Run progress: 1.08% complete, ETA 01:18:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 172296.045 ops/s
[info] # Warmup Iteration   2: 517592.799 ops/s
[info] # Warmup Iteration   3: 522626.544 ops/s
[info] Iteration   1: 522951.093 ops/s
[info]                  ·gc.alloc.rate:                   1706.129 MB/sec
[info]                  ·gc.alloc.rate.norm:              5136.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1684.240 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5070.107 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 12.029 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   2: 529757.647 ops/s
[info]                  ·gc.alloc.rate:                                  1728.526 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5136.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.144 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.427 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.205 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6068.043 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 529452.325 ops/s
[info]                  ·gc.alloc.rate:                                  1727.520 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5136.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.786 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5059.491 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 530269.984 ops/s
[info]                  ·gc.alloc.rate:                                  1730.278 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5136.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.870 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5051.677 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 530897.319 ops/s
[info]                  ·gc.alloc.rate:                                  1732.837 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5136.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.377 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5045.722 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce":
[info]   528665.674 ±(99.9%) 12480.737 ops/s [Average]
[info]   (min, avg, max) = (522951.093, 528665.674, 530897.319), stdev = 3241.208
[info]   CI (99.9%): [516184.937, 541146.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.alloc.rate":
[info]   1725.058 ±(99.9%) 41.479 MB/sec [Average]
[info]   (min, avg, max) = (1706.129, 1725.058, 1732.837), stdev = 10.772
[info]   CI (99.9%): [1683.579, 1766.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5136.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5136.001, 5136.001, 5136.001), stdev = 0.001
[info]   CI (99.9%): [5136.001, 5136.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.031 ±(99.9%) 0.242 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.031, 0.144), stdev = 0.063
[info]   CI (99.9%): [≈ 0, 0.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.092 ±(99.9%) 0.720 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.092, 0.427), stdev = 0.187
[info]   CI (99.9%): [≈ 0, 0.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1766.496 ±(99.9%) 594.226 MB/sec [Average]
[info]   (min, avg, max) = (1684.240, 1766.496, 2042.205), stdev = 154.319
[info]   CI (99.9%): [1172.270, 2360.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   5259.008 ±(99.9%) 1741.863 B/op [Average]
[info]   (min, avg, max) = (5045.722, 5259.008, 6068.043), stdev = 452.356
[info]   CI (99.9%): [3517.145, 7000.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   2.406 ±(99.9%) 20.714 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.406, 12.029), stdev = 5.379
[info]   CI (99.9%): [≈ 0, 23.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.200, 18.000), stdev = 6.058
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala
[info] # Run progress: 1.34% complete, ETA 01:18:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_227b1689/target/5e31e36e/jackson-module-afterburner-2.9.4.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 489201.915 ops/s
[info] # Warmup Iteration   2: 1697158.846 ops/s
[info] # Warmup Iteration   3: 1674682.897 ops/s
[info] Iteration   1: 1652556.378 ops/s
[info]                  ·gc.alloc.rate:            638.506 MB/sec
[info]                  ·gc.alloc.rate.norm:       608.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.567 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 639.482 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 1710237.065 ops/s
[info]                  ·gc.alloc.rate:            660.567 MB/sec
[info]                  ·gc.alloc.rate.norm:       608.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.354 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 617.929 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 1633213.868 ops/s
[info]                  ·gc.alloc.rate:            630.843 MB/sec
[info]                  ·gc.alloc.rate.norm:       608.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.378 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 647.068 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 1711076.932 ops/s
[info]                  ·gc.alloc.rate:            661.026 MB/sec
[info]                  ·gc.alloc.rate.norm:       608.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.485 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 617.620 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 1664353.087 ops/s
[info]                  ·gc.alloc.rate:            642.886 MB/sec
[info]                  ·gc.alloc.rate.norm:       608.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.393 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 634.960 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala":
[info]   1674287.466 ±(99.9%) 134824.937 ops/s [Average]
[info]   (min, avg, max) = (1633213.868, 1674287.466, 1711076.932), stdev = 35013.608
[info]   CI (99.9%): [1539462.529, 1809112.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   646.766 ±(99.9%) 52.042 MB/sec [Average]
[info]   (min, avg, max) = (630.843, 646.766, 661.026), stdev = 13.515
[info]   CI (99.9%): [594.723, 698.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   608.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (608.000, 608.000, 608.000), stdev = 0.001
[info]   CI (99.9%): [608.000, 608.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   671.435 ±(99.9%) 0.341 MB/sec [Average]
[info]   (min, avg, max) = (671.354, 671.435, 671.567), stdev = 0.088
[info]   CI (99.9%): [671.095, 671.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   631.412 ±(99.9%) 50.751 B/op [Average]
[info]   (min, avg, max) = (617.620, 631.412, 647.068), stdev = 13.180
[info]   CI (99.9%): [580.660, 682.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 9.200, 10.000), stdev = 0.447
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala
[info] # Run progress: 1.61% complete, ETA 01:17:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8628179.540 ops/s
[info] # Warmup Iteration   2: 8064396.162 ops/s
[info] # Warmup Iteration   3: 7906791.899 ops/s
[info] Iteration   1: 7979665.475 ops/s
[info]                  ·gc.alloc.rate:            405.526 MB/sec
[info]                  ·gc.alloc.rate.norm:       80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.327 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 66.349 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 8268892.369 ops/s
[info]                  ·gc.alloc.rate:            420.280 MB/sec
[info]                  ·gc.alloc.rate.norm:       80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.754 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 128.058 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 8094944.074 ops/s
[info]                  ·gc.alloc.rate:            411.407 MB/sec
[info]                  ·gc.alloc.rate.norm:       80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.365 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 65.408 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 8123858.897 ops/s
[info]                  ·gc.alloc.rate:            412.878 MB/sec
[info]                  ·gc.alloc.rate.norm:       80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.359 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 65.174 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 8319263.720 ops/s
[info]                  ·gc.alloc.rate:            422.790 MB/sec
[info]                  ·gc.alloc.rate.norm:       80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.337 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 63.641 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala":
[info]   8157324.907 ±(99.9%) 528134.078 ops/s [Average]
[info]   (min, avg, max) = (7979665.475, 8157324.907, 8319263.720), stdev = 137154.743
[info]   CI (99.9%): [7629190.829, 8685458.985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   414.576 ±(99.9%) 26.875 MB/sec [Average]
[info]   (min, avg, max) = (405.526, 414.576, 422.790), stdev = 6.979
[info]   CI (99.9%): [387.701, 441.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   80.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (80.000, 80.000, 80.000), stdev = 0.001
[info]   CI (99.9%): [80.000, 80.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   403.628 ±(99.9%) 579.313 MB/sec [Average]
[info]   (min, avg, max) = (336.327, 403.628, 672.754), stdev = 150.446
[info]   CI (99.9%): [≈ 0, 982.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   77.726 ±(99.9%) 108.409 B/op [Average]
[info]   (min, avg, max) = (63.641, 77.726, 128.058), stdev = 28.153
[info]   CI (99.9%): [≈ 0, 186.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 6.000), stdev = 1.304
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson
[info] # Run progress: 1.88% complete, ETA 01:17:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 52867.227 ops/s
[info] # Warmup Iteration   2: 305804.812 ops/s
[info] # Warmup Iteration   3: 308128.251 ops/s
[info] Iteration   1: 308465.227 ops/s
[info]                  ·gc.alloc.rate:                   1045.794 MB/sec
[info]                  ·gc.alloc.rate.norm:              5336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1007.810 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5142.194 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.399 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 305498.818 ops/s
[info]                  ·gc.alloc.rate:                   1035.879 MB/sec
[info]                  ·gc.alloc.rate.norm:              5336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1342.611 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        6916.032 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.429 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   3: 306481.653 ops/s
[info]                  ·gc.alloc.rate:                   1039.402 MB/sec
[info]                  ·gc.alloc.rate.norm:              5336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1011.544 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5192.986 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.665 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 23.947 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   4: 304964.022 ops/s
[info]                  ·gc.alloc.rate:                                  1034.084 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5336.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.195 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.341 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5270.245 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 310156.718 ops/s
[info]                  ·gc.alloc.rate:            1051.417 MB/sec
[info]                  ·gc.alloc.rate.norm:       5336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.056 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5181.917 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson":
[info]   307113.288 ±(99.9%) 8329.110 ops/s [Average]
[info]   (min, avg, max) = (304964.022, 307113.288, 310156.718), stdev = 2163.043
[info]   CI (99.9%): [298784.177, 315442.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1041.315 ±(99.9%) 27.741 MB/sec [Average]
[info]   (min, avg, max) = (1034.084, 1041.315, 1051.417), stdev = 7.204
[info]   CI (99.9%): [1013.574, 1069.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5336.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5336.001, 5336.001, 5336.001), stdev = 0.001
[info]   CI (99.9%): [5336.001, 5336.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.039 ±(99.9%) 0.336 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.039, 0.195), stdev = 0.087
[info]   CI (99.9%): [≈ 0, 0.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.201 ±(99.9%) 1.732 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.201, 1.006), stdev = 0.450
[info]   CI (99.9%): [≈ 0, 1.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1080.872 ±(99.9%) 563.871 MB/sec [Average]
[info]   (min, avg, max) = (1007.810, 1080.872, 1342.611), stdev = 146.435
[info]   CI (99.9%): [517.002, 1644.743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   5540.675 ±(99.9%) 2965.946 B/op [Average]
[info]   (min, avg, max) = (5142.194, 5540.675, 6916.032), stdev = 770.247
[info]   CI (99.9%): [2574.729, 8506.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.199 ±(99.9%) 7.569 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.199, 4.665), stdev = 1.966
[info]   CI (99.9%): [≈ 0, 8.768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   6.155 ±(99.9%) 38.858 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.155, 23.947), stdev = 10.091
[info]   CI (99.9%): [≈ 0, 45.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.time":
[info]   49.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 9.800, 18.000), stdev = 6.686
[info]   CI (99.9%): [49.000, 49.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce
[info] # Run progress: 2.15% complete, ETA 01:17:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 801718.207 ops/s
[info] # Warmup Iteration   2: 1402606.460 ops/s
[info] # Warmup Iteration   3: 1415993.587 ops/s
[info] Iteration   1: 1449740.401 ops/s
[info]                  ·gc.alloc.rate:                                  2276.960 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2472.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.073 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.079 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.323 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2217.265 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 1490220.005 ops/s
[info]                  ·gc.alloc.rate:                                  2340.899 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2472.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2383.119 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2516.585 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 1462432.845 ops/s
[info]                  ·gc.alloc.rate:                                  2296.860 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2472.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.698 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2564.383 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 1482149.494 ops/s
[info]                  ·gc.alloc.rate:                                  2327.773 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2472.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.669 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2530.298 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 1487131.634 ops/s
[info]                  ·gc.alloc.rate:            2335.563 MB/sec
[info]                  ·gc.alloc.rate.norm:       2472.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2382.668 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2521.858 B/op
[info]                  ·gc.count:                 7.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce":
[info]   1474334.876 ±(99.9%) 67350.755 ops/s [Average]
[info]   (min, avg, max) = (1449740.401, 1474334.876, 1490220.005), stdev = 17490.777
[info]   CI (99.9%): [1406984.121, 1541685.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate":
[info]   2315.611 ±(99.9%) 105.997 MB/sec [Average]
[info]   (min, avg, max) = (2276.960, 2315.611, 2340.899), stdev = 27.527
[info]   CI (99.9%): [2209.614, 2421.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2472.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2472.000, 2472.000, 2472.000), stdev = 0.001
[info]   CI (99.9%): [2472.000, 2472.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.016 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.073), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.018 ±(99.9%) 0.133 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.079), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2314.695 ±(99.9%) 586.303 MB/sec [Average]
[info]   (min, avg, max) = (2042.323, 2314.695, 2383.119), stdev = 152.261
[info]   CI (99.9%): [1728.392, 2900.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   2470.078 ±(99.9%) 548.897 B/op [Average]
[info]   (min, avg, max) = (2217.265, 2470.078, 2564.383), stdev = 142.547
[info]   CI (99.9%): [1921.180, 3018.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.count":
[info]   34.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava
[info] # Run progress: 2.42% complete, ETA 01:17:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.883 ops/s
[info] # Warmup Iteration   2: 9145562.446 ops/s
[info] # Warmup Iteration   3: 9715401.615 ops/s
[info] Iteration   1: 9933691.470 ops/s
[info]                  ·gc.alloc.rate:            1211.724 MB/sec
[info]                  ·gc.alloc.rate.norm:       192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1001.116 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 158.629 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   2: 9983701.728 ops/s
[info]                  ·gc.alloc.rate:            1217.862 MB/sec
[info]                  ·gc.alloc.rate.norm:       192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1334.862 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 210.446 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  20.000 ms
[info] Iteration   3: 9822606.849 ops/s
[info]                  ·gc.alloc.rate:                                  1198.160 MB/sec
[info]                  ·gc.alloc.rate.norm:                             192.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.503 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.081 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1011.743 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       162.128 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     6.661 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1.067 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   4: 9284316.652 ops/s
[info]                  ·gc.alloc.rate:                                  1132.520 MB/sec
[info]                  ·gc.alloc.rate.norm:                             192.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.095 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.508 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       230.821 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 9687032.267 ops/s
[info]                  ·gc.alloc.rate:                                  1181.623 MB/sec
[info]                  ·gc.alloc.rate.norm:                             192.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.086 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       165.915 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava":
[info]   9742269.793 ±(99.9%) 1079139.001 ops/s [Average]
[info]   (min, avg, max) = (9284316.652, 9742269.793, 9983701.728), stdev = 280248.972
[info]   CI (99.9%): [8663130.792, 10821408.794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   1188.378 ±(99.9%) 131.652 MB/sec [Average]
[info]   (min, avg, max) = (1132.520, 1188.378, 1217.862), stdev = 34.190
[info]   CI (99.9%): [1056.725, 1320.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   192.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (192.000, 192.000, 192.000), stdev = 0.001
[info]   CI (99.9%): [192.000, 192.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.120 ±(99.9%) 0.839 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.120, 0.503), stdev = 0.218
[info]   CI (99.9%): [≈ 0, 0.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.019 ±(99.9%) 0.134 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.081), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   1146.063 ±(99.9%) 711.933 MB/sec [Average]
[info]   (min, avg, max) = (1001.116, 1146.063, 1361.508), stdev = 184.887
[info]   CI (99.9%): [434.131, 1857.996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   185.588 ±(99.9%) 126.665 B/op [Average]
[info]   (min, avg, max) = (158.629, 185.588, 230.821), stdev = 32.894
[info]   CI (99.9%): [58.923, 312.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   1.332 ±(99.9%) 11.470 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.332, 6.661), stdev = 2.979
[info]   CI (99.9%): [≈ 0, 12.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   0.213 ±(99.9%) 1.838 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.213, 1.067), stdev = 0.477
[info]   CI (99.9%): [≈ 0, 2.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.time":
[info]   51.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 10.200, 20.000), stdev = 7.259
[info]   CI (99.9%): [51.000, 51.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala
[info] # Run progress: 2.69% complete, ETA 01:16:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 674859.830 ops/s
[info] # Warmup Iteration   2: 2132526.394 ops/s
[info] # Warmup Iteration   3: 2156778.411 ops/s
[info] Iteration   1: 2201004.665 ops/s
[info]                  ·gc.alloc.rate:                   1543.647 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1680.345 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1201.766 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.334 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         24.000 ms
[info] Iteration   2: 2221915.944 ops/s
[info]                  ·gc.alloc.rate:                                  1558.543 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1104.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.124 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.088 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.553 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       964.462 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 2248421.299 ops/s
[info]                  ·gc.alloc.rate:                                  1576.741 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1104.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.523 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1191.370 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 2248626.898 ops/s
[info]                  ·gc.alloc.rate:                                  1577.056 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1104.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.360 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       953.005 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 2224488.540 ops/s
[info]                  ·gc.alloc.rate:                                  1560.446 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1104.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.052 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1204.184 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala":
[info]   2228891.469 ±(99.9%) 77411.807 ops/s [Average]
[info]   (min, avg, max) = (2201004.665, 2228891.469, 2248626.898), stdev = 20103.600
[info]   CI (99.9%): [2151479.662, 2306303.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1563.287 ±(99.9%) 54.009 MB/sec [Average]
[info]   (min, avg, max) = (1543.647, 1563.287, 1577.056), stdev = 14.026
[info]   CI (99.9%): [1509.278, 1617.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1104.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1104.000, 1104.000, 1104.000), stdev = 0.001
[info]   CI (99.9%): [1104.000, 1104.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.026 ±(99.9%) 0.211 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.124), stdev = 0.055
[info]   CI (99.9%): [≈ 0, 0.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.018 ±(99.9%) 0.150 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.088), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1561.367 ±(99.9%) 703.520 MB/sec [Average]
[info]   (min, avg, max) = (1361.360, 1561.367, 1702.052), stdev = 182.702
[info]   CI (99.9%): [857.847, 2264.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1102.957 ±(99.9%) 507.546 B/op [Average]
[info]   (min, avg, max) = (953.005, 1102.957, 1204.184), stdev = 131.808
[info]   CI (99.9%): [595.411, 1610.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.667 ±(99.9%) 5.742 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.667, 3.334), stdev = 1.491
[info]   CI (99.9%): [≈ 0, 6.409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 8.400, 24.000), stdev = 8.735
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala
[info] # Run progress: 2.96% complete, ETA 01:16:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8697862.519 ops/s
[info] # Warmup Iteration   2: 10190049.900 ops/s
[info] # Warmup Iteration   3: 10271505.819 ops/s
[info] Iteration   1: 10082711.560 ops/s
[info]                  ·gc.alloc.rate:            1281.068 MB/sec
[info]                  ·gc.alloc.rate.norm:       200.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.040 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 157.843 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 9907778.078 ops/s
[info]                  ·gc.alloc.rate:                                  1259.225 MB/sec
[info]                  ·gc.alloc.rate.norm:                             200.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.117 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1355.127 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       215.232 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                0.529 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 9607512.021 ops/s
[info]                  ·gc.alloc.rate:                                  1220.925 MB/sec
[info]                  ·gc.alloc.rate.norm:                             200.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.009 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.642 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       223.051 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 9339568.457 ops/s
[info]                  ·gc.alloc.rate:            1186.864 MB/sec
[info]                  ·gc.alloc.rate.norm:       200.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.214 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 172.086 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 9339265.195 ops/s
[info]                  ·gc.alloc.rate:            1186.923 MB/sec
[info]                  ·gc.alloc.rate.norm:       200.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.720 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 229.454 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala":
[info]   9655367.062 ±(99.9%) 1289065.810 ops/s [Average]
[info]   (min, avg, max) = (9339265.195, 9655367.062, 10082711.560), stdev = 334766.297
[info]   CI (99.9%): [8366301.253, 10944432.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1227.001 ±(99.9%) 163.548 MB/sec [Average]
[info]   (min, avg, max) = (1186.864, 1227.001, 1281.068), stdev = 42.473
[info]   CI (99.9%): [1063.454, 1390.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   200.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (200.000, 200.000, 200.000), stdev = 0.001
[info]   CI (99.9%): [200.000, 200.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.025 ±(99.9%) 0.198 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.117), stdev = 0.051
[info]   CI (99.9%): [≈ 0, 0.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.004 ±(99.9%) 0.031 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.019), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1222.149 ±(99.9%) 724.401 MB/sec [Average]
[info]   (min, avg, max) = (1011.040, 1222.149, 1361.720), stdev = 188.125
[info]   CI (99.9%): [497.747, 1946.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   199.533 ±(99.9%) 124.570 B/op [Average]
[info]   (min, avg, max) = (157.843, 199.533, 229.454), stdev = 32.350
[info]   CI (99.9%): [74.964, 324.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.737 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.106 ±(99.9%) 0.911 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.106, 0.529), stdev = 0.237
[info]   CI (99.9%): [≈ 0, 1.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 9.000), stdev = 3.033
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson
[info] # Run progress: 3.23% complete, ETA 01:16:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 87005.464 ops/s
[info] # Warmup Iteration   2: 553765.952 ops/s
[info] # Warmup Iteration   3: 579424.840 ops/s
[info] Iteration   1: 580222.415 ops/s
[info]                  ·gc.alloc.rate:                   1492.141 MB/sec
[info]                  ·gc.alloc.rate.norm:              4048.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1343.333 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3644.302 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.807 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   2: 581818.106 ops/s
[info]                  ·gc.alloc.rate:                                  1496.104 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4048.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.198 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.536 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1692.271 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4578.769 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                12.614 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        13.000 ms
[info] Iteration   3: 584576.315 ops/s
[info]                  ·gc.alloc.rate:            1503.371 MB/sec
[info]                  ·gc.alloc.rate.norm:       4048.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.485 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3665.955 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 589186.579 ops/s
[info]                  ·gc.alloc.rate:            1515.215 MB/sec
[info]                  ·gc.alloc.rate.norm:       4048.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.830 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4546.554 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 580302.909 ops/s
[info]                  ·gc.alloc.rate:                                  1492.311 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4048.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.370 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3692.812 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson":
[info]   583221.265 ±(99.9%) 14523.091 ops/s [Average]
[info]   (min, avg, max) = (580222.415, 583221.265, 589186.579), stdev = 3771.601
[info]   CI (99.9%): [568698.174, 597744.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1499.828 ±(99.9%) 37.471 MB/sec [Average]
[info]   (min, avg, max) = (1492.141, 1499.828, 1515.215), stdev = 9.731
[info]   CI (99.9%): [1462.357, 1537.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   4048.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4048.001, 4048.001, 4048.001), stdev = 0.001
[info]   CI (99.9%): [4048.001, 4048.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.040 ±(99.9%) 0.341 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.040, 0.198), stdev = 0.089
[info]   CI (99.9%): [≈ 0, 0.381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.108 ±(99.9%) 0.923 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.108, 0.536), stdev = 0.240
[info]   CI (99.9%): [≈ 0, 1.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1492.057 ±(99.9%) 721.257 MB/sec [Average]
[info]   (min, avg, max) = (1343.333, 1492.057, 1701.830), stdev = 187.308
[info]   CI (99.9%): [770.800, 2213.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   4025.678 ±(99.9%) 1889.241 B/op [Average]
[info]   (min, avg, max) = (3644.302, 4025.678, 4578.769), stdev = 490.630
[info]   CI (99.9%): [2136.437, 5914.919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.821 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.662), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   2.884 ±(99.9%) 21.159 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.884, 12.614), stdev = 5.495
[info]   CI (99.9%): [≈ 0, 24.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 8.800, 19.000), stdev = 6.907
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce
[info] # Run progress: 3.49% complete, ETA 01:16:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 925434.470 ops/s
[info] # Warmup Iteration   2: 1777216.510 ops/s
[info] # Warmup Iteration   3: 1795522.754 ops/s
[info] Iteration   1: 1772895.713 ops/s
[info]                  ·gc.alloc.rate:                                  1666.798 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1480.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.055 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.049 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1688.283 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1499.077 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                2.957 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        15.000 ms
[info] Iteration   2: 1788075.838 ops/s
[info]                  ·gc.alloc.rate:                                  1681.146 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1480.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.042 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.037 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.735 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1498.126 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 1819211.588 ops/s
[info]                  ·gc.alloc.rate:                                  1711.008 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1480.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.315 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1472.480 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 1819753.693 ops/s
[info]                  ·gc.alloc.rate:            1711.820 MB/sec
[info]                  ·gc.alloc.rate.norm:       1480.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1702.564 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1471.997 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 1798714.594 ops/s
[info]                  ·gc.alloc.rate:                                  1691.460 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1480.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.013 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1489.233 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce":
[info]   1799730.285 ±(99.9%) 77908.006 ops/s [Average]
[info]   (min, avg, max) = (1772895.713, 1799730.285, 1819753.693), stdev = 20232.462
[info]   CI (99.9%): [1721822.279, 1877638.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1692.447 ±(99.9%) 74.726 MB/sec [Average]
[info]   (min, avg, max) = (1666.798, 1692.447, 1711.820), stdev = 19.406
[info]   CI (99.9%): [1617.721, 1767.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1480.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1480.000, 1480.000, 1480.000), stdev = 0.001
[info]   CI (99.9%): [1480.000, 1480.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.020 ±(99.9%) 0.102 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.055), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.018 ±(99.9%) 0.091 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.049), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1699.382 ±(99.9%) 23.921 MB/sec [Average]
[info]   (min, avg, max) = (1688.283, 1699.382, 1702.564), stdev = 6.212
[info]   CI (99.9%): [1675.461, 1723.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   1486.183 ±(99.9%) 51.200 B/op [Average]
[info]   (min, avg, max) = (1471.997, 1486.183, 1499.077), stdev = 13.297
[info]   CI (99.9%): [1434.982, 1537.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   0.591 ±(99.9%) 5.092 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.591, 2.957), stdev = 1.322
[info]   CI (99.9%): [≈ 0, 5.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 15.000), stdev = 4.827
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava
[info] # Run progress: 3.76% complete, ETA 01:16:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.891 ops/s
[info] # Warmup Iteration   2: 16950057.527 ops/s
[info] # Warmup Iteration   3: 17204628.694 ops/s
[info] Iteration   1: 18278824.148 ops/s
[info]                  ·gc.alloc.rate:                   557.488 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             333.082 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        28.679 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.057 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 17552814.775 ops/s
[info]                  ·gc.alloc.rate:            535.227 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.342 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 59.848 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 16944544.727 ops/s
[info]                  ·gc.alloc.rate:            516.711 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.377 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 61.996 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 18099946.601 ops/s
[info]                  ·gc.alloc.rate:            551.962 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.705 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 29.020 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 18199007.795 ops/s
[info]                  ·gc.alloc.rate:            554.958 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.378 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 57.724 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava":
[info]   17815027.609 ±(99.9%) 2169918.029 ops/s [Average]
[info]   (min, avg, max) = (16944544.727, 17815027.609, 18278824.148), stdev = 563520.821
[info]   CI (99.9%): [15645109.581, 19984945.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   543.269 ±(99.9%) 66.260 MB/sec [Average]
[info]   (min, avg, max) = (516.711, 543.269, 557.488), stdev = 17.208
[info]   CI (99.9%): [477.009, 609.530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   533.777 ±(99.9%) 704.375 MB/sec [Average]
[info]   (min, avg, max) = (333.082, 533.777, 667.378), stdev = 182.924
[info]   CI (99.9%): [≈ 0, 1238.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   47.453 ±(99.9%) 65.656 B/op [Average]
[info]   (min, avg, max) = (28.679, 47.453, 61.996), stdev = 17.051
[info]   CI (99.9%): [≈ 0, 113.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   0.011 ±(99.9%) 0.099 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.057), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.600, 10.000), stdev = 3.286
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJavaPrealloc
[info] # Run progress: 4.03% complete, ETA 01:15:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.903 ops/s
[info] # Warmup Iteration   2: 18142040.962 ops/s
[info] # Warmup Iteration   3: 19109128.770 ops/s
[info] Iteration   1: 19280729.290 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 19310948.324 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 20154785.757 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 20144616.649 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 19719004.849 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJavaPrealloc":
[info]   19722016.974 ±(99.9%) 1644545.775 ops/s [Average]
[info]   (min, avg, max) = (19280729.290, 19722016.974, 20154785.757), stdev = 427083.315
[info]   CI (99.9%): [18077471.199, 21366562.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJavaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJavaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJavaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala
[info] # Run progress: 4.30% complete, ETA 01:15:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_227b1689/target/5e31e36e/jackson-module-afterburner-2.9.4.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 1550994.116 ops/s
[info] # Warmup Iteration   2: 4836535.035 ops/s
[info] # Warmup Iteration   3: 4852311.898 ops/s
[info] Iteration   1: 4858800.813 ops/s
[info]                  ·gc.alloc.rate:            1333.388 MB/sec
[info]                  ·gc.alloc.rate.norm:       432.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1342.622 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 434.992 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   2: 4838659.474 ops/s
[info]                  ·gc.alloc.rate:                                  1327.818 MB/sec
[info]                  ·gc.alloc.rate.norm:                             432.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.032 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1351.277 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       439.632 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1.517 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   3: 4880297.379 ops/s
[info]                  ·gc.alloc.rate:                                  1339.762 MB/sec
[info]                  ·gc.alloc.rate.norm:                             432.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.030 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.797 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       439.105 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 4862102.972 ops/s
[info]                  ·gc.alloc.rate:            1334.695 MB/sec
[info]                  ·gc.alloc.rate.norm:       432.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.716 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 440.746 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 4882004.920 ops/s
[info]                  ·gc.alloc.rate:                                  1340.358 MB/sec
[info]                  ·gc.alloc.rate.norm:                             432.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.438 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       329.212 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala":
[info]   4864373.112 ±(99.9%) 68392.525 ops/s [Average]
[info]   (min, avg, max) = (4838659.474, 4864373.112, 4882004.920), stdev = 17761.321
[info]   CI (99.9%): [4795980.587, 4932765.636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1335.204 ±(99.9%) 19.771 MB/sec [Average]
[info]   (min, avg, max) = (1327.818, 1335.204, 1340.358), stdev = 5.135
[info]   CI (99.9%): [1315.433, 1354.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   432.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (432.000, 432.000, 432.000), stdev = 0.001
[info]   CI (99.9%): [432.000, 432.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.013 ±(99.9%) 0.065 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.032), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.004 ±(99.9%) 0.021 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.011), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1287.770 ±(99.9%) 574.129 MB/sec [Average]
[info]   (min, avg, max) = (1021.438, 1287.770, 1361.797), stdev = 149.099
[info]   CI (99.9%): [713.641, 1861.899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   416.737 ±(99.9%) 188.592 B/op [Average]
[info]   (min, avg, max) = (329.212, 416.737, 440.746), stdev = 48.977
[info]   CI (99.9%): [228.145, 605.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.303 ±(99.9%) 2.612 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.303, 1.517), stdev = 0.678
[info]   CI (99.9%): [≈ 0, 2.915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.800, 18.000), stdev = 6.611
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala
[info] # Run progress: 4.57% complete, ETA 01:15:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13227120.530 ops/s
[info] # Warmup Iteration   2: 20433212.889 ops/s
[info] # Warmup Iteration   3: 21395935.524 ops/s
[info] Iteration   1: 21873562.842 ops/s
[info]                  ·gc.alloc.rate:            666.981 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.676 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 48.410 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 21909853.868 ops/s
[info]                  ·gc.alloc.rate:            668.102 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.686 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 48.329 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 21815022.522 ops/s
[info]                  ·gc.alloc.rate:                   665.413 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.883 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        48.539 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.048 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 21773928.051 ops/s
[info]                  ·gc.alloc.rate:            664.162 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.095 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 24.362 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 20887188.350 ops/s
[info]                  ·gc.alloc.rate:            636.940 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.705 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 50.695 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala":
[info]   21651911.127 ±(99.9%) 1658414.631 ops/s [Average]
[info]   (min, avg, max) = (20887188.350, 21651911.127, 21909853.868), stdev = 430685.013
[info]   CI (99.9%): [19993496.496, 23310325.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   660.320 ±(99.9%) 50.656 MB/sec [Average]
[info]   (min, avg, max) = (636.940, 660.320, 668.102), stdev = 13.155
[info]   CI (99.9%): [609.664, 710.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   605.609 ±(99.9%) 577.997 MB/sec [Average]
[info]   (min, avg, max) = (337.095, 605.609, 672.883), stdev = 150.104
[info]   CI (99.9%): [27.612, 1183.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   44.067 ±(99.9%) 42.585 B/op [Average]
[info]   (min, avg, max) = (24.362, 44.067, 50.695), stdev = 11.059
[info]   CI (99.9%): [1.482, 86.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.010 ±(99.9%) 0.083 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.048), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 10.000), stdev = 2.510
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 4.84% complete, ETA 01:15:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14979768.897 ops/s
[info] # Warmup Iteration   2: 20448194.680 ops/s
[info] # Warmup Iteration   3: 20688756.011 ops/s
[info] Iteration   1: 20812941.003 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 20833353.580 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 20446008.295 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 20828230.560 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 20828771.215 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc":
[info]   20749860.931 ±(99.9%) 654737.360 ops/s [Average]
[info]   (min, avg, max) = (20446008.295, 20749860.931, 20833353.580), stdev = 170033.213
[info]   CI (99.9%): [20095123.571, 21404598.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson
[info] # Run progress: 5.11% complete, ETA 01:15:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 211379.821 ops/s
[info] # Warmup Iteration   2: 1251805.408 ops/s
[info] # Warmup Iteration   3: 1263943.956 ops/s
[info] Iteration   1: 1283183.576 ops/s
[info]                  ·gc.alloc.rate:                                  1871.546 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2296.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.198 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.243 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2024.023 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2483.058 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     5.328 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                6.537 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        21.000 ms
[info] Iteration   2: 1300609.937 ops/s
[info]                  ·gc.alloc.rate:                                  1896.948 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2296.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.028 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.033 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.915 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2471.463 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 1316120.054 ops/s
[info]                  ·gc.alloc.rate:                                  1919.730 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2296.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.747 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2035.292 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 1307719.692 ops/s
[info]                  ·gc.alloc.rate:                                  1907.550 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2296.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.247 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2458.126 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 1309340.303 ops/s
[info]                  ·gc.alloc.rate:                                  1909.711 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2296.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.670 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2045.878 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson":
[info]   1303394.712 ±(99.9%) 48410.835 ops/s [Average]
[info]   (min, avg, max) = (1283183.576, 1303394.712, 1316120.054), stdev = 12572.140
[info]   CI (99.9%): [1254983.877, 1351805.548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1901.097 ±(99.9%) 70.832 MB/sec [Average]
[info]   (min, avg, max) = (1871.546, 1901.097, 1919.730), stdev = 18.395
[info]   CI (99.9%): [1830.265, 1971.930] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2296.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2296.000, 2296.000, 2296.000), stdev = 0.001
[info]   CI (99.9%): [2296.000, 2296.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.047 ±(99.9%) 0.329 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.047, 0.198), stdev = 0.085
[info]   CI (99.9%): [≈ 0, 0.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.057 ±(99.9%) 0.404 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.057, 0.243), stdev = 0.105
[info]   CI (99.9%): [≈ 0, 0.461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1902.320 ±(99.9%) 705.751 MB/sec [Average]
[info]   (min, avg, max) = (1701.670, 1902.320, 2042.247), stdev = 183.281
[info]   CI (99.9%): [1196.570, 2608.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   2298.763 ±(99.9%) 908.284 B/op [Average]
[info]   (min, avg, max) = (2035.292, 2298.763, 2483.058), stdev = 235.878
[info]   CI (99.9%): [1390.479, 3207.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 9.175 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 5.328), stdev = 2.383
[info]   CI (99.9%): [≈ 0, 10.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   1.307 ±(99.9%) 11.256 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.307, 6.537), stdev = 2.923
[info]   CI (99.9%): [≈ 0, 12.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 8.200, 21.000), stdev = 7.155
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce
[info] # Run progress: 5.38% complete, ETA 01:14:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14635.224 ops/s
[info] # Warmup Iteration   2: 18904.663 ops/s
[info] # Warmup Iteration   3: 19053.050 ops/s
[info] Iteration   1: 19188.620 ops/s
[info]                  ·gc.alloc.rate:            1200.820 MB/sec
[info]                  ·gc.alloc.rate.norm:       98480.070 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.473 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 110589.225 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 19272.973 ops/s
[info]                  ·gc.alloc.rate:                                  1205.674 MB/sec
[info]                  ·gc.alloc.rate.norm:                             98480.021 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.071 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.797 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1351.215 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       110367.832 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                271.976 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   3: 19390.273 ops/s
[info]                  ·gc.alloc.rate:                                  1213.140 MB/sec
[info]                  ·gc.alloc.rate.norm:                             98480.026 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.021 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.723 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.027 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       82884.759 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 19227.472 ops/s
[info]                  ·gc.alloc.rate:                                  1202.970 MB/sec
[info]                  ·gc.alloc.rate.norm:                             98480.023 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.017 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.424 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.399 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       111449.708 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 19360.545 ops/s
[info]                  ·gc.alloc.rate:                                  1211.552 MB/sec
[info]                  ·gc.alloc.rate.norm:                             98480.021 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.320 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.271 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       83013.169 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce":
[info]   19287.977 ±(99.9%) 330.619 ops/s [Average]
[info]   (min, avg, max) = (19188.620, 19287.977, 19390.273), stdev = 85.861
[info]   CI (99.9%): [18957.358, 19618.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate":
[info]   1206.831 ±(99.9%) 20.599 MB/sec [Average]
[info]   (min, avg, max) = (1200.820, 1206.831, 1213.140), stdev = 5.350
[info]   CI (99.9%): [1186.232, 1227.430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   98480.032 ±(99.9%) 0.082 B/op [Average]
[info]   (min, avg, max) = (98480.021, 98480.032, 98480.070), stdev = 0.021
[info]   CI (99.9%): [98479.951, 98480.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.023 ±(99.9%) 0.109 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.071), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.853 ±(99.9%) 8.935 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.853, 5.797), stdev = 2.321
[info]   CI (99.9%): [≈ 0, 10.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1220.677 ±(99.9%) 701.614 MB/sec [Average]
[info]   (min, avg, max) = (1021.027, 1220.677, 1361.399), stdev = 182.207
[info]   CI (99.9%): [519.063, 1922.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   99660.939 ±(99.9%) 58765.815 B/op [Average]
[info]   (min, avg, max) = (82884.759, 99660.939, 111449.708), stdev = 15261.296
[info]   CI (99.9%): [40895.124, 158426.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   54.395 ±(99.9%) 468.359 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 54.395, 271.976), stdev = 121.631
[info]   CI (99.9%): [≈ 0, 522.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.600, 13.000), stdev = 4.980
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala
[info] # Run progress: 5.65% complete, ETA 01:14:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19250.214 ops/s
[info] # Warmup Iteration   2: 31551.700 ops/s
[info] # Warmup Iteration   3: 31500.083 ops/s
[info] Iteration   1: 31610.830 ops/s
[info]                  ·gc.alloc.rate:            792.360 MB/sec
[info]                  ·gc.alloc.rate.norm:       39456.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.703 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 33497.652 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 31786.776 ops/s
[info]                  ·gc.alloc.rate:            796.709 MB/sec
[info]                  ·gc.alloc.rate.norm:       39456.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.630 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 33311.162 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 31509.540 ops/s
[info]                  ·gc.alloc.rate:            789.829 MB/sec
[info]                  ·gc.alloc.rate.norm:       39456.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.056 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 50407.509 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   4: 31590.102 ops/s
[info]                  ·gc.alloc.rate:                   791.845 MB/sec
[info]                  ·gc.alloc.rate.norm:              39456.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.692 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        33518.856 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 199.122 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 31896.849 ops/s
[info]                  ·gc.alloc.rate:                                  799.524 MB/sec
[info]                  ·gc.alloc.rate.norm:                             39456.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.159 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 7.826 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.693 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       33591.771 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala":
[info]   31678.820 ±(99.9%) 609.875 ops/s [Average]
[info]   (min, avg, max) = (31509.540, 31678.820, 31896.849), stdev = 158.383
[info]   CI (99.9%): [31068.944, 32288.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   794.053 ±(99.9%) 15.229 MB/sec [Average]
[info]   (min, avg, max) = (789.829, 794.053, 799.524), stdev = 3.955
[info]   CI (99.9%): [778.824, 809.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   39456.014 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (39456.013, 39456.014, 39456.016), stdev = 0.001
[info]   CI (99.9%): [39456.008, 39456.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.032 ±(99.9%) 0.273 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.032, 0.159), stdev = 0.071
[info]   CI (99.9%): [≈ 0, 0.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.565 ±(99.9%) 13.477 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.565, 7.826), stdev = 3.500
[info]   CI (99.9%): [≈ 0, 15.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   741.555 ±(99.9%) 575.972 MB/sec [Average]
[info]   (min, avg, max) = (672.630, 741.555, 1009.056), stdev = 149.578
[info]   CI (99.9%): [165.583, 1317.526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   36865.390 ±(99.9%) 29153.155 B/op [Average]
[info]   (min, avg, max) = (33311.162, 36865.390, 50407.509), stdev = 7570.982
[info]   CI (99.9%): [7712.235, 66018.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   39.824 ±(99.9%) 342.900 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 39.824, 199.122), stdev = 89.050
[info]   CI (99.9%): [≈ 0, 382.724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.200, 13.000), stdev = 3.962
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala
[info] # Run progress: 5.91% complete, ETA 01:14:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29202.299 ops/s
[info] # Warmup Iteration   2: 33190.315 ops/s
[info] # Warmup Iteration   3: 33241.104 ops/s
[info] Iteration   1: 32613.249 ops/s
[info]                  ·gc.alloc.rate:            438.051 MB/sec
[info]                  ·gc.alloc.rate.norm:       21144.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.979 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 32531.927 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 33213.718 ops/s
[info]                  ·gc.alloc.rate:            446.220 MB/sec
[info]                  ·gc.alloc.rate.norm:       21144.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.064 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 15971.687 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 32554.981 ops/s
[info]                  ·gc.alloc.rate:            437.299 MB/sec
[info]                  ·gc.alloc.rate.norm:       21144.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.021 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 16295.438 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 33104.827 ops/s
[info]                  ·gc.alloc.rate:            444.683 MB/sec
[info]                  ·gc.alloc.rate.norm:       21144.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.038 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 32049.499 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 33190.211 ops/s
[info]                  ·gc.alloc.rate:            445.867 MB/sec
[info]                  ·gc.alloc.rate.norm:       21144.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.031 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 15982.753 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala":
[info]   32935.397 ±(99.9%) 1247.149 ops/s [Average]
[info]   (min, avg, max) = (32554.981, 32935.397, 33213.718), stdev = 323.881
[info]   CI (99.9%): [31688.248, 34182.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   442.424 ±(99.9%) 16.869 MB/sec [Average]
[info]   (min, avg, max) = (437.299, 442.424, 446.220), stdev = 4.381
[info]   CI (99.9%): [425.555, 459.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   21144.013 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (21144.012, 21144.013, 21144.017), stdev = 0.002
[info]   CI (99.9%): [21144.006, 21144.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   471.827 ±(99.9%) 710.698 MB/sec [Average]
[info]   (min, avg, max) = (337.021, 471.827, 674.038), stdev = 184.566
[info]   CI (99.9%): [≈ 0, 1182.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   22566.261 ±(99.9%) 34192.791 B/op [Average]
[info]   (min, avg, max) = (15971.687, 22566.261, 32531.927), stdev = 8879.759
[info]   CI (99.9%): [≈ 0, 56759.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 6.000), stdev = 1.643
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson
[info] # Run progress: 6.18% complete, ETA 01:14:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14085.655 ops/s
[info] # Warmup Iteration   2: 24726.562 ops/s
[info] # Warmup Iteration   3: 25117.788 ops/s
[info] Iteration   1: 24737.368 ops/s
[info]                  ·gc.alloc.rate:            1310.652 MB/sec
[info]                  ·gc.alloc.rate.norm:       83400.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.018 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 64206.315 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 25078.755 ops/s
[info]                  ·gc.alloc.rate:                                  1329.083 MB/sec
[info]                  ·gc.alloc.rate.norm:                             83400.022 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.104 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 6.519 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1353.724 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       84946.236 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                250.825 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   3: 25746.816 ops/s
[info]                  ·gc.alloc.rate:                                  1364.578 MB/sec
[info]                  ·gc.alloc.rate.norm:                             83400.017 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.392 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.764 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       83228.073 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 25740.308 ops/s
[info]                  ·gc.alloc.rate:            1363.786 MB/sec
[info]                  ·gc.alloc.rate.norm:       83400.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.344 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 83250.703 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 25706.409 ops/s
[info]                  ·gc.alloc.rate:                                  1362.265 MB/sec
[info]                  ·gc.alloc.rate.norm:                             83400.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.625 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       83360.793 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson":
[info]   25401.931 ±(99.9%) 1798.128 ops/s [Average]
[info]   (min, avg, max) = (24737.368, 25401.931, 25746.816), stdev = 466.968
[info]   CI (99.9%): [23603.803, 27200.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1346.073 ±(99.9%) 95.526 MB/sec [Average]
[info]   (min, avg, max) = (1310.652, 1346.073, 1364.578), stdev = 24.808
[info]   CI (99.9%): [1250.547, 1441.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   83400.017 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (83400.016, 83400.017, 83400.022), stdev = 0.002
[info]   CI (99.9%): [83400.008, 83400.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.022 ±(99.9%) 0.176 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.104), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.386 ±(99.9%) 11.067 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.386, 6.519), stdev = 2.874
[info]   CI (99.9%): [≈ 0, 12.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1289.495 ±(99.9%) 603.890 MB/sec [Average]
[info]   (min, avg, max) = (1009.018, 1289.495, 1361.764), stdev = 156.828
[info]   CI (99.9%): [685.605, 1893.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   79798.424 ±(99.9%) 33678.556 B/op [Average]
[info]   (min, avg, max) = (64206.315, 79798.424, 84946.236), stdev = 8746.214
[info]   CI (99.9%): [46119.868, 113476.979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   50.165 ±(99.9%) 431.937 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 50.165, 250.825), stdev = 112.173
[info]   CI (99.9%): [≈ 0, 482.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.800, 13.000), stdev = 4.817
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce
[info] # Run progress: 6.45% complete, ETA 01:14:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17680.484 ops/s
[info] # Warmup Iteration   2: 27329.343 ops/s
[info] # Warmup Iteration   3: 27418.767 ops/s
[info] Iteration   1: 27046.409 ops/s
[info]                  ·gc.alloc.rate:                                  1640.887 MB/sec
[info]                  ·gc.alloc.rate.norm:                             95480.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.137 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 7.959 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1690.875 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       98388.734 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.328 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                193.679 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   2: 27615.053 ops/s
[info]                  ·gc.alloc.rate:                                  1674.972 MB/sec
[info]                  ·gc.alloc.rate.norm:                             95478.590 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.009 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.523 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.315 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       77599.180 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 27729.572 ops/s
[info]                  ·gc.alloc.rate:                                  1682.017 MB/sec
[info]                  ·gc.alloc.rate.norm:                             95480.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.132 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.752 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       96600.262 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 27675.158 ops/s
[info]                  ·gc.alloc.rate:            1679.483 MB/sec
[info]                  ·gc.alloc.rate.norm:       95480.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1702.503 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 96788.717 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 27761.421 ops/s
[info]                  ·gc.alloc.rate:                                  1684.429 MB/sec
[info]                  ·gc.alloc.rate.norm:                             95480.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.009 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.520 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.228 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       96488.932 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce":
[info]   27565.522 ±(99.9%) 1137.799 ops/s [Average]
[info]   (min, avg, max) = (27046.409, 27565.522, 27761.421), stdev = 295.483
[info]   CI (99.9%): [26427.724, 28703.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1672.357 ±(99.9%) 69.071 MB/sec [Average]
[info]   (min, avg, max) = (1640.887, 1672.357, 1684.429), stdev = 17.937
[info]   CI (99.9%): [1603.287, 1741.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   95479.730 ±(99.9%) 2.455 B/op [Average]
[info]   (min, avg, max) = (95478.590, 95479.730, 95480.016), stdev = 0.637
[info]   CI (99.9%): [95477.276, 95482.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.031 ±(99.9%) 0.227 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.031, 0.137), stdev = 0.059
[info]   CI (99.9%): [≈ 0, 0.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.827 ±(99.9%) 13.230 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.827, 7.959), stdev = 3.436
[info]   CI (99.9%): [≈ 0, 15.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1631.734 ±(99.9%) 582.403 MB/sec [Average]
[info]   (min, avg, max) = (1361.315, 1631.734, 1702.503), stdev = 151.248
[info]   CI (99.9%): [1049.331, 2214.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   93173.165 ±(99.9%) 33655.305 B/op [Average]
[info]   (min, avg, max) = (77599.180, 93173.165, 98388.734), stdev = 8740.176
[info]   CI (99.9%): [59517.860, 126828.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.732 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.328), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   38.736 ±(99.9%) 333.526 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 38.736, 193.679), stdev = 86.616
[info]   CI (99.9%): [≈ 0, 372.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 12.000), stdev = 3.271
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala
[info] # Run progress: 6.72% complete, ETA 01:13:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12968.971 ops/s
[info] # Warmup Iteration   2: 27763.526 ops/s
[info] # Warmup Iteration   3: 27555.490 ops/s
[info] Iteration   1: 27431.600 ops/s
[info]                  ·gc.alloc.rate:                   1502.355 MB/sec
[info]                  ·gc.alloc.rate.norm:              86208.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1344.746 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        77164.125 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 267.533 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   2: 28093.636 ops/s
[info]                  ·gc.alloc.rate:                                  1538.592 MB/sec
[info]                  ·gc.alloc.rate.norm:                             86208.071 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.069 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.841 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.732 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       95348.839 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 28359.190 ops/s
[info]                  ·gc.alloc.rate:                                  1553.387 MB/sec
[info]                  ·gc.alloc.rate.norm:                             86208.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.013 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.711 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.586 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       75563.720 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 28371.892 ops/s
[info]                  ·gc.alloc.rate:                                  1553.759 MB/sec
[info]                  ·gc.alloc.rate.norm:                             86208.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.145 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.611 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       94411.378 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 28398.009 ops/s
[info]                  ·gc.alloc.rate:                                  1555.339 MB/sec
[info]                  ·gc.alloc.rate.norm:                             86208.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.199 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.426 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       75459.964 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala":
[info]   28130.866 ±(99.9%) 1578.236 ops/s [Average]
[info]   (min, avg, max) = (27431.600, 28130.866, 28398.009), stdev = 409.863
[info]   CI (99.9%): [26552.630, 29709.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1540.686 ±(99.9%) 86.545 MB/sec [Average]
[info]   (min, avg, max) = (1502.355, 1540.686, 1555.339), stdev = 22.476
[info]   CI (99.9%): [1454.141, 1627.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   86208.026 ±(99.9%) 0.098 B/op [Average]
[info]   (min, avg, max) = (86208.014, 86208.026, 86208.071), stdev = 0.025
[info]   CI (99.9%): [86207.928, 86208.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.018 ±(99.9%) 0.111 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.069), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.979 ±(99.9%) 6.247 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.979, 3.841), stdev = 1.622
[info]   CI (99.9%): [≈ 0, 7.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1494.220 ±(99.9%) 729.696 MB/sec [Average]
[info]   (min, avg, max) = (1344.746, 1494.220, 1701.732), stdev = 189.500
[info]   CI (99.9%): [764.524, 2223.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   83589.605 ±(99.9%) 39793.338 B/op [Average]
[info]   (min, avg, max) = (75459.964, 83589.605, 95348.839), stdev = 10334.204
[info]   CI (99.9%): [43796.267, 123382.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   53.507 ±(99.9%) 460.708 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 53.507, 267.533), stdev = 119.644
[info]   CI (99.9%): [≈ 0, 514.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.200, 18.000), stdev = 6.058
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala
[info] # Run progress: 6.99% complete, ETA 01:13:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24037.852 ops/s
[info] # Warmup Iteration   2: 31204.813 ops/s
[info] # Warmup Iteration   3: 31268.861 ops/s
[info] Iteration   1: 31242.500 ops/s
[info]                  ·gc.alloc.rate:                                  1612.109 MB/sec
[info]                  ·gc.alloc.rate.norm:                             81224.017 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.138 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 6.958 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1689.640 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       85130.318 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                201.333 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   2: 31808.973 ops/s
[info]                  ·gc.alloc.rate:                                  1641.498 MB/sec
[info]                  ·gc.alloc.rate.norm:                             81224.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.284 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.459 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       67367.259 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   3: 31593.620 ops/s
[info]                  ·gc.alloc.rate:                                  1630.838 MB/sec
[info]                  ·gc.alloc.rate.norm:                             81224.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.023 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.330 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       84784.698 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 31209.546 ops/s
[info]                  ·gc.alloc.rate:                                  1610.461 MB/sec
[info]                  ·gc.alloc.rate.norm:                             81224.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.117 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.795 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       85830.450 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 31426.995 ops/s
[info]                  ·gc.alloc.rate:                                  1621.757 MB/sec
[info]                  ·gc.alloc.rate.norm:                             81224.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.403 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.845 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       85235.164 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala":
[info]   31456.327 ±(99.9%) 963.993 ops/s [Average]
[info]   (min, avg, max) = (31209.546, 31456.327, 31808.973), stdev = 250.346
[info]   CI (99.9%): [30492.334, 32420.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1623.332 ±(99.9%) 50.222 MB/sec [Average]
[info]   (min, avg, max) = (1610.461, 1623.332, 1641.498), stdev = 13.042
[info]   CI (99.9%): [1573.111, 1673.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   81224.014 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (81224.013, 81224.014, 81224.017), stdev = 0.002
[info]   CI (99.9%): [81224.007, 81224.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.031 ±(99.9%) 0.231 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 0.031, 0.138), stdev = 0.060
[info]   CI (99.9%): [≈ 0, 0.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.557 ±(99.9%) 11.640 B/op [Average]
[info]   (min, avg, max) = (0.023, 1.557, 6.958), stdev = 3.023
[info]   CI (99.9%): [≈ 0, 13.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1631.414 ±(99.9%) 581.463 MB/sec [Average]
[info]   (min, avg, max) = (1361.459, 1631.414, 1702.330), stdev = 151.004
[info]   CI (99.9%): [1049.951, 2212.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   81669.578 ±(99.9%) 30820.989 B/op [Average]
[info]   (min, avg, max) = (67367.259, 81669.578, 85830.450), stdev = 8004.113
[info]   CI (99.9%): [50848.589, 112490.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   40.267 ±(99.9%) 346.708 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 40.267, 201.333), stdev = 90.039
[info]   CI (99.9%): [≈ 0, 386.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 12.000), stdev = 3.647
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 7.26% complete, ETA 01:13:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24603.332 ops/s
[info] # Warmup Iteration   2: 31212.362 ops/s
[info] # Warmup Iteration   3: 31773.693 ops/s
[info] Iteration   1: 31258.415 ops/s
[info]                  ·gc.alloc.rate:                                  1552.053 MB/sec
[info]                  ·gc.alloc.rate.norm:                             78168.063 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.038 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.892 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1349.187 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       67950.837 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                201.236 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   2: 32252.408 ops/s
[info]                  ·gc.alloc.rate:                                  1602.311 MB/sec
[info]                  ·gc.alloc.rate.norm:                             78168.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.067 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.269 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.438 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       83052.628 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 32203.142 ops/s
[info]                  ·gc.alloc.rate:                                  1599.303 MB/sec
[info]                  ·gc.alloc.rate.norm:                             78168.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.248 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.826 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       83178.977 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 32271.147 ops/s
[info]                  ·gc.alloc.rate:            1602.524 MB/sec
[info]                  ·gc.alloc.rate.norm:       78168.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.329 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 66402.991 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 31851.812 ops/s
[info]                  ·gc.alloc.rate:                                  1581.848 MB/sec
[info]                  ·gc.alloc.rate.norm:                             78168.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.194 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.798 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       84095.413 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc":
[info]   31967.385 ±(99.9%) 1661.906 ops/s [Average]
[info]   (min, avg, max) = (31258.415, 31967.385, 32271.147), stdev = 431.592
[info]   CI (99.9%): [30305.479, 33629.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1587.608 ±(99.9%) 83.319 MB/sec [Average]
[info]   (min, avg, max) = (1552.053, 1587.608, 1602.524), stdev = 21.638
[info]   CI (99.9%): [1504.289, 1670.927] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   78168.023 ±(99.9%) 0.087 B/op [Average]
[info]   (min, avg, max) = (78168.013, 78168.023, 78168.063), stdev = 0.023
[info]   CI (99.9%): [78167.936, 78168.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.023 ±(99.9%) 0.112 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.067), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.121 ±(99.9%) 5.475 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.121, 3.269), stdev = 1.422
[info]   CI (99.9%): [≈ 0, 6.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen":
[info]   1563.316 ±(99.9%) 731.539 MB/sec [Average]
[info]   (min, avg, max) = (1349.187, 1563.316, 1702.438), stdev = 189.978
[info]   CI (99.9%): [831.777, 2294.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   76936.169 ±(99.9%) 34404.729 B/op [Average]
[info]   (min, avg, max) = (66402.991, 76936.169, 84095.413), stdev = 8934.799
[info]   CI (99.9%): [42531.440, 111340.899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm":
[info]   40.247 ±(99.9%) 346.541 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 40.247, 201.236), stdev = 89.996
[info]   CI (99.9%): [≈ 0, 386.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 11.000), stdev = 3.209
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson
[info] # Run progress: 7.53% complete, ETA 01:13:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4619.772 ops/s
[info] # Warmup Iteration   2: 7498.799 ops/s
[info] # Warmup Iteration   3: 8051.004 ops/s
[info] Iteration   1: 8035.292 ops/s
[info]                  ·gc.alloc.rate:            1044.739 MB/sec
[info]                  ·gc.alloc.rate.norm:       204656.051 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.199 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 263513.750 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   2: 7931.348 ops/s
[info]                  ·gc.alloc.rate:            1031.333 MB/sec
[info]                  ·gc.alloc.rate.norm:       204656.055 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.136 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 200251.184 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 8056.540 ops/s
[info]                  ·gc.alloc.rate:                                  1047.761 MB/sec
[info]                  ·gc.alloc.rate.norm:                             204656.051 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.096 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 18.678 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1013.178 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       197900.992 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                780.675 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   4: 8002.552 ops/s
[info]                  ·gc.alloc.rate:                                  1040.538 MB/sec
[info]                  ·gc.alloc.rate.norm:                             204656.051 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.025 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.946 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.101 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       200832.960 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 7943.436 ops/s
[info]                  ·gc.alloc.rate:            1032.836 MB/sec
[info]                  ·gc.alloc.rate.norm:       204656.051 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.069 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 202324.356 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson":
[info]   7993.834 ±(99.9%) 212.408 ops/s [Average]
[info]   (min, avg, max) = (7931.348, 7993.834, 8056.540), stdev = 55.162
[info]   CI (99.9%): [7781.426, 8206.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1039.442 ±(99.9%) 27.758 MB/sec [Average]
[info]   (min, avg, max) = (1031.333, 1039.442, 1047.761), stdev = 7.209
[info]   CI (99.9%): [1011.684, 1067.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   204656.052 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (204656.051, 204656.052, 204656.055), stdev = 0.002
[info]   CI (99.9%): [204656.044, 204656.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.024 ±(99.9%) 0.159 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.024, 0.096), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   4.725 ±(99.9%) 31.147 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.725, 18.678), stdev = 8.089
[info]   CI (99.9%): [≈ 0, 35.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1081.936 ±(99.9%) 567.042 MB/sec [Average]
[info]   (min, avg, max) = (1009.136, 1081.936, 1345.199), stdev = 147.259
[info]   CI (99.9%): [514.894, 1648.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   212964.648 ±(99.9%) 108983.279 B/op [Average]
[info]   (min, avg, max) = (197900.992, 212964.648, 263513.750), stdev = 28302.611
[info]   CI (99.9%): [103981.369, 321947.927] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   156.135 ±(99.9%) 1344.369 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 156.135, 780.675), stdev = 349.128
[info]   CI (99.9%): [≈ 0, 1500.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.400, 16.000), stdev = 5.941
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce
[info] # Run progress: 7.80% complete, ETA 01:13:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14771.653 ops/s
[info] # Warmup Iteration   2: 19705.742 ops/s
[info] # Warmup Iteration   3: 19451.297 ops/s
[info] Iteration   1: 19552.632 ops/s
[info]                  ·gc.alloc.rate:                   1493.541 MB/sec
[info]                  ·gc.alloc.rate.norm:              120233.883 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.027 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        108519.600 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 268.082 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 20042.414 ops/s
[info]                  ·gc.alloc.rate:                                  1530.945 MB/sec
[info]                  ·gc.alloc.rate.norm:                             120240.020 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.110 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 8.663 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.663 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       133648.193 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 20032.669 ops/s
[info]                  ·gc.alloc.rate:                                  1530.125 MB/sec
[info]                  ·gc.alloc.rate.norm:                             120239.210 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.010 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.747 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.290 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       106971.918 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 20223.805 ops/s
[info]                  ·gc.alloc.rate:                                  1545.480 MB/sec
[info]                  ·gc.alloc.rate.norm:                             120240.020 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.272 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.363 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       132445.703 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 19957.145 ops/s
[info]                  ·gc.alloc.rate:            1525.062 MB/sec
[info]                  ·gc.alloc.rate.norm:       120240.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.943 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 107379.226 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce":
[info]   19961.733 ±(99.9%) 958.044 ops/s [Average]
[info]   (min, avg, max) = (19552.632, 19961.733, 20223.805), stdev = 248.801
[info]   CI (99.9%): [19003.689, 20919.777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1525.031 ±(99.9%) 73.836 MB/sec [Average]
[info]   (min, avg, max) = (1493.541, 1525.031, 1545.480), stdev = 19.175
[info]   CI (99.9%): [1451.195, 1598.866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   120238.631 ±(99.9%) 10.308 B/op [Average]
[info]   (min, avg, max) = (120233.883, 120238.631, 120240.020), stdev = 2.677
[info]   CI (99.9%): [120228.322, 120248.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.025 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.110), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.936 ±(99.9%) 14.527 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.936, 8.663), stdev = 3.773
[info]   CI (99.9%): [≈ 0, 16.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1495.057 ±(99.9%) 727.795 MB/sec [Average]
[info]   (min, avg, max) = (1348.027, 1495.057, 1702.363), stdev = 189.006
[info]   CI (99.9%): [767.263, 2222.852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   117792.928 ±(99.9%) 53689.470 B/op [Average]
[info]   (min, avg, max) = (106971.918, 117792.928, 133648.193), stdev = 13942.985
[info]   CI (99.9%): [64103.458, 171482.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   53.616 ±(99.9%) 461.653 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 53.616, 268.082), stdev = 119.890
[info]   CI (99.9%): [≈ 0, 515.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 14.000), stdev = 4.472
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala
[info] # Run progress: 8.06% complete, ETA 01:12:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24804.805 ops/s
[info] # Warmup Iteration   2: 38230.606 ops/s
[info] # Warmup Iteration   3: 39572.408 ops/s
[info] Iteration   1: 39752.009 ops/s
[info]                  ·gc.alloc.rate:            980.818 MB/sec
[info]                  ·gc.alloc.rate.norm:       38823.187 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.400 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 39954.543 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 39022.531 ops/s
[info]                  ·gc.alloc.rate:                   962.416 MB/sec
[info]                  ·gc.alloc.rate.norm:              38824.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.325 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        40676.012 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 26.867 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   3: 38588.244 ops/s
[info]                  ·gc.alloc.rate:                                  951.751 MB/sec
[info]                  ·gc.alloc.rate.norm:                             38824.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.066 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.706 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1013.027 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       41323.594 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                163.012 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   4: 40240.352 ops/s
[info]                  ·gc.alloc.rate:                                  992.565 MB/sec
[info]                  ·gc.alloc.rate.norm:                             38824.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.040 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.558 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.097 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       39940.045 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 39552.431 ops/s
[info]                  ·gc.alloc.rate:            975.688 MB/sec
[info]                  ·gc.alloc.rate.norm:       38824.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.829 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 27091.151 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala":
[info]   39431.113 ±(99.9%) 2473.066 ops/s [Average]
[info]   (min, avg, max) = (38588.244, 39431.113, 40240.352), stdev = 642.247
[info]   CI (99.9%): [36958.047, 41904.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   972.648 ±(99.9%) 61.310 MB/sec [Average]
[info]   (min, avg, max) = (951.751, 972.648, 992.565), stdev = 15.922
[info]   CI (99.9%): [911.338, 1033.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   38823.846 ±(99.9%) 1.418 B/op [Average]
[info]   (min, avg, max) = (38823.187, 38823.846, 38824.011), stdev = 0.368
[info]   CI (99.9%): [38822.427, 38825.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.021 ±(99.9%) 0.118 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.066), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.853 ±(99.9%) 4.761 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.853, 2.706), stdev = 1.236
[info]   CI (99.9%): [≈ 0, 5.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   946.536 ±(99.9%) 572.280 MB/sec [Average]
[info]   (min, avg, max) = (680.829, 946.536, 1021.097), stdev = 148.619
[info]   CI (99.9%): [374.256, 1518.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   37797.069 ±(99.9%) 23151.018 B/op [Average]
[info]   (min, avg, max) = (27091.151, 37797.069, 41323.594), stdev = 6012.246
[info]   CI (99.9%): [14646.051, 60948.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   37.976 ±(99.9%) 272.853 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 37.976, 163.012), stdev = 70.859
[info]   CI (99.9%): [≈ 0, 310.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.800, 13.000), stdev = 5.404
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala
[info] # Run progress: 8.33% complete, ETA 01:12:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 52772.138 ops/s
[info] # Warmup Iteration   2: 59367.756 ops/s
[info] # Warmup Iteration   3: 59434.178 ops/s
[info] Iteration   1: 59579.492 ops/s
[info]                  ·gc.alloc.rate:            769.907 MB/sec
[info]                  ·gc.alloc.rate.norm:       20336.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.174 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 17807.369 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 59650.385 ops/s
[info]                  ·gc.alloc.rate:            770.941 MB/sec
[info]                  ·gc.alloc.rate.norm:       20336.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.449 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 26680.160 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 59817.689 ops/s
[info]                  ·gc.alloc.rate:            773.078 MB/sec
[info]                  ·gc.alloc.rate.norm:       20336.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.270 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 17736.827 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 59915.750 ops/s
[info]                  ·gc.alloc.rate:            774.089 MB/sec
[info]                  ·gc.alloc.rate.norm:       20336.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.047 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 17707.822 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 59011.825 ops/s
[info]                  ·gc.alloc.rate:                                  762.691 MB/sec
[info]                  ·gc.alloc.rate.norm:                             20336.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.028 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.734 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1018.122 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       27146.679 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                88.831 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala":
[info]   59595.028 ±(99.9%) 1355.776 ops/s [Average]
[info]   (min, avg, max) = (59011.825, 59595.028, 59915.750), stdev = 352.091
[info]   CI (99.9%): [58239.252, 60950.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   770.141 ±(99.9%) 17.265 MB/sec [Average]
[info]   (min, avg, max) = (762.691, 770.141, 774.089), stdev = 4.484
[info]   CI (99.9%): [752.877, 787.406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   20336.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (20336.007, 20336.007, 20336.007), stdev = 0.001
[info]   CI (99.9%): [20336.006, 20336.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.006 ±(99.9%) 0.047 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.028), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.147 ±(99.9%) 1.264 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.147, 0.734), stdev = 0.328
[info]   CI (99.9%): [≈ 0, 1.411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   810.413 ±(99.9%) 718.457 MB/sec [Average]
[info]   (min, avg, max) = (674.047, 810.413, 1018.122), stdev = 186.581
[info]   CI (99.9%): [91.955, 1528.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   21415.771 ±(99.9%) 19335.944 B/op [Average]
[info]   (min, avg, max) = (17707.822, 21415.771, 27146.679), stdev = 5021.483
[info]   CI (99.9%): [2079.827, 40751.716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.737 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.332), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   17.766 ±(99.9%) 152.972 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17.766, 88.831), stdev = 39.726
[info]   CI (99.9%): [≈ 0, 170.738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.400, 9.000), stdev = 1.517
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson
[info] # Run progress: 8.60% complete, ETA 01:12:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11378.637 ops/s
[info] # Warmup Iteration   2: 29327.794 ops/s
[info] # Warmup Iteration   3: 29181.118 ops/s
[info] Iteration   1: 30223.294 ops/s
[info]                  ·gc.alloc.rate:                                  2019.314 MB/sec
[info]                  ·gc.alloc.rate.norm:                             105144.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.013 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.690 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1697.385 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       88381.464 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                242.806 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   2: 30023.283 ops/s
[info]                  ·gc.alloc.rate:            2005.293 MB/sec
[info]                  ·gc.alloc.rate.norm:       105144.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2041.853 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 107060.975 B/op
[info]                  ·gc.count:                 6.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 29700.274 ops/s
[info]                  ·gc.alloc.rate:                                  1984.058 MB/sec
[info]                  ·gc.alloc.rate.norm:                             105144.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.010 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.556 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.129 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       108221.430 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 29783.575 ops/s
[info]                  ·gc.alloc.rate:                                  1989.785 MB/sec
[info]                  ·gc.alloc.rate.norm:                             105144.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.454 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       107927.152 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 30028.372 ops/s
[info]                  ·gc.alloc.rate:                                  2006.759 MB/sec
[info]                  ·gc.alloc.rate.norm:                             105144.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.086 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2043.074 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       107046.716 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson":
[info]   29951.760 ±(99.9%) 808.285 ops/s [Average]
[info]   (min, avg, max) = (29700.274, 29951.760, 30223.294), stdev = 209.909
[info]   CI (99.9%): [29143.475, 30760.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2001.042 ±(99.9%) 54.449 MB/sec [Average]
[info]   (min, avg, max) = (1984.058, 2001.042, 2019.314), stdev = 14.140
[info]   CI (99.9%): [1946.593, 2055.491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   105144.015 ±(99.9%) 0.005 B/op [Average]
[info]   (min, avg, max) = (105144.014, 105144.015, 105144.017), stdev = 0.001
[info]   CI (99.9%): [105144.009, 105144.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.005 ±(99.9%) 0.024 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.013), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.270 ±(99.9%) 1.260 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.270, 0.690), stdev = 0.327
[info]   CI (99.9%): [≈ 0, 1.530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1973.379 ±(99.9%) 594.100 MB/sec [Average]
[info]   (min, avg, max) = (1697.385, 1973.379, 2043.074), stdev = 154.286
[info]   CI (99.9%): [1379.279, 2567.479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   103727.547 ±(99.9%) 33094.406 B/op [Average]
[info]   (min, avg, max) = (88381.464, 103727.547, 108221.430), stdev = 8594.512
[info]   CI (99.9%): [70633.141, 136821.954] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 8.030 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.663), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   48.561 ±(99.9%) 418.127 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 48.561, 242.806), stdev = 108.586
[info]   CI (99.9%): [≈ 0, 466.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.600, 10.000), stdev = 1.949
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala
[info] # Run progress: 8.87% complete, ETA 01:12:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17020.117 ops/s
[info] # Warmup Iteration   2: 31267.705 ops/s
[info] # Warmup Iteration   3: 31498.015 ops/s
[info] Iteration   1: 31751.554 ops/s
[info]                  ·gc.alloc.rate:                                  1798.080 MB/sec
[info]                  ·gc.alloc.rate.norm:                             89144.018 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.110 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.478 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1692.983 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       83933.627 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                231.131 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        13.000 ms
[info] Iteration   2: 31884.693 ops/s
[info]                  ·gc.alloc.rate:                                  1805.568 MB/sec
[info]                  ·gc.alloc.rate.norm:                             89144.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.192 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.922 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       100813.233 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 31789.397 ops/s
[info]                  ·gc.alloc.rate:                                  1800.309 MB/sec
[info]                  ·gc.alloc.rate.norm:                             89144.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.130 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.715 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       84262.044 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 32097.886 ops/s
[info]                  ·gc.alloc.rate:                                  1817.789 MB/sec
[info]                  ·gc.alloc.rate.norm:                             89144.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.064 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.700 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       83451.024 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 32008.052 ops/s
[info]                  ·gc.alloc.rate:                                  1812.773 MB/sec
[info]                  ·gc.alloc.rate.norm:                             89144.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.064 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.130 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       100422.753 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala":
[info]   31906.317 ±(99.9%) 561.779 ops/s [Average]
[info]   (min, avg, max) = (31751.554, 31906.317, 32097.886), stdev = 145.892
[info]   CI (99.9%): [31344.538, 32468.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1806.904 ±(99.9%) 31.990 MB/sec [Average]
[info]   (min, avg, max) = (1798.080, 1806.904, 1817.789), stdev = 8.308
[info]   CI (99.9%): [1774.913, 1838.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   89144.014 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (89144.013, 89144.014, 89144.018), stdev = 0.002
[info]   CI (99.9%): [89144.005, 89144.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.024 ±(99.9%) 0.186 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.024, 0.110), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.186 ±(99.9%) 9.241 B/op [Average]
[info]   (min, avg, max) = (0.064, 1.186, 5.478), stdev = 2.400
[info]   CI (99.9%): [≈ 0, 10.427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1836.090 ±(99.9%) 724.024 MB/sec [Average]
[info]   (min, avg, max) = (1692.983, 1836.090, 2042.130), stdev = 188.027
[info]   CI (99.9%): [1112.066, 2560.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   90576.536 ±(99.9%) 35318.610 B/op [Average]
[info]   (min, avg, max) = (83451.024, 90576.536, 100813.233), stdev = 9172.131
[info]   CI (99.9%): [55257.926, 125895.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   46.226 ±(99.9%) 398.022 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 46.226, 231.131), stdev = 103.365
[info]   CI (99.9%): [≈ 0, 444.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.600, 13.000), stdev = 3.578
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala
[info] # Run progress: 9.14% complete, ETA 01:12:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 36874.629 ops/s
[info] # Warmup Iteration   2: 43194.918 ops/s
[info] # Warmup Iteration   3: 44318.955 ops/s
[info] Iteration   1: 44151.958 ops/s
[info]                  ·gc.alloc.rate:                                  1840.075 MB/sec
[info]                  ·gc.alloc.rate.norm:                             65600.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.132 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.703 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1697.744 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       60525.820 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                142.470 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   2: 44518.527 ops/s
[info]                  ·gc.alloc.rate:                                  1855.506 MB/sec
[info]                  ·gc.alloc.rate.norm:                             65600.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.046 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.288 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       72203.522 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 44150.578 ops/s
[info]                  ·gc.alloc.rate:                                  1839.945 MB/sec
[info]                  ·gc.alloc.rate.norm:                             65600.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.077 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.698 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       60671.038 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 43992.821 ops/s
[info]                  ·gc.alloc.rate:                                  1833.632 MB/sec
[info]                  ·gc.alloc.rate.norm:                             65600.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.141 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.385 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       73068.343 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 44377.131 ops/s
[info]                  ·gc.alloc.rate:                                  1849.614 MB/sec
[info]                  ·gc.alloc.rate.norm:                             65600.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.047 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.968 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       60363.465 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala":
[info]   44238.203 ±(99.9%) 801.293 ops/s [Average]
[info]   (min, avg, max) = (43992.821, 44238.203, 44518.527), stdev = 208.093
[info]   CI (99.9%): [43436.910, 45039.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1843.755 ±(99.9%) 33.512 MB/sec [Average]
[info]   (min, avg, max) = (1833.632, 1843.755, 1855.506), stdev = 8.703
[info]   CI (99.9%): [1810.243, 1877.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   65600.010 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (65600.009, 65600.010, 65600.010), stdev = 0.001
[info]   CI (99.9%): [65600.008, 65600.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.028 ±(99.9%) 0.223 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.028, 0.132), stdev = 0.058
[info]   CI (99.9%): [≈ 0, 0.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.003 ±(99.9%) 7.967 B/op [Average]
[info]   (min, avg, max) = (0.046, 1.003, 4.703), stdev = 2.069
[info]   CI (99.9%): [≈ 0, 8.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1837.217 ±(99.9%) 721.053 MB/sec [Average]
[info]   (min, avg, max) = (1697.744, 1837.217, 2042.385), stdev = 187.255
[info]   CI (99.9%): [1116.163, 2558.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   65366.438 ±(99.9%) 25583.838 B/op [Average]
[info]   (min, avg, max) = (60363.465, 65366.438, 73068.343), stdev = 6644.042
[info]   CI (99.9%): [39782.599, 90950.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   28.494 ±(99.9%) 245.341 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 28.494, 142.470), stdev = 63.714
[info]   CI (99.9%): [≈ 0, 273.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 7.000), stdev = 1.304
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 9.41% complete, ETA 01:11:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 36298.523 ops/s
[info] # Warmup Iteration   2: 44897.539 ops/s
[info] # Warmup Iteration   3: 45179.110 ops/s
[info] Iteration   1: 45976.382 ops/s
[info]                  ·gc.alloc.rate:                                  1686.343 MB/sec
[info]                  ·gc.alloc.rate.norm:                             57736.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.133 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.560 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1689.713 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       57851.368 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                136.818 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   2: 46149.313 ops/s
[info]                  ·gc.alloc.rate:                                  1692.806 MB/sec
[info]                  ·gc.alloc.rate.norm:                             57736.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.269 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.820 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       58043.453 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 45483.254 ops/s
[info]                  ·gc.alloc.rate:            1668.910 MB/sec
[info]                  ·gc.alloc.rate.norm:       57736.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1702.360 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 58893.225 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 46018.844 ops/s
[info]                  ·gc.alloc.rate:                                  1688.191 MB/sec
[info]                  ·gc.alloc.rate.norm:                             57736.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.090 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.011 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       58208.658 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 46072.256 ops/s
[info]                  ·gc.alloc.rate:                                  1689.925 MB/sec
[info]                  ·gc.alloc.rate.norm:                             57736.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.090 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.800 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       58141.706 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   45940.010 ±(99.9%) 1014.154 ops/s [Average]
[info]   (min, avg, max) = (45483.254, 45940.010, 46149.313), stdev = 263.373
[info]   CI (99.9%): [44925.855, 46954.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1685.235 ±(99.9%) 36.316 MB/sec [Average]
[info]   (min, avg, max) = (1668.910, 1685.235, 1692.806), stdev = 9.431
[info]   CI (99.9%): [1648.919, 1721.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   57736.009 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (57736.009, 57736.009, 57736.009), stdev = 0.001
[info]   CI (99.9%): [57736.009, 57736.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.029 ±(99.9%) 0.224 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.133), stdev = 0.058
[info]   CI (99.9%): [≈ 0, 0.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.002 ±(99.9%) 7.668 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.002, 4.560), stdev = 1.991
[info]   CI (99.9%): [≈ 0, 8.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen":
[info]   1699.541 ±(99.9%) 21.173 MB/sec [Average]
[info]   (min, avg, max) = (1689.713, 1699.541, 1702.360), stdev = 5.499
[info]   CI (99.9%): [1678.367, 1720.714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   58227.682 ±(99.9%) 1523.626 B/op [Average]
[info]   (min, avg, max) = (57851.368, 58227.682, 58893.225), stdev = 395.681
[info]   CI (99.9%): [56704.056, 59751.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm":
[info]   27.364 ±(99.9%) 235.609 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 27.364, 136.818), stdev = 61.187
[info]   CI (99.9%): [≈ 0, 262.973] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 12.000), stdev = 3.715
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce
[info] # Run progress: 9.68% complete, ETA 01:11:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 266190.663 ops/s
[info] # Warmup Iteration   2: 341955.676 ops/s
[info] # Warmup Iteration   3: 341973.235 ops/s
[info] Iteration   1: 346234.160 ops/s
[info]                  ·gc.alloc.rate:                                  1751.092 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7960.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.111 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.504 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1695.249 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7706.155 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                15.140 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   2: 346421.966 ops/s
[info]                  ·gc.alloc.rate:                                  1751.667 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7960.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.590 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7732.437 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 341794.818 ops/s
[info]                  ·gc.alloc.rate:            1728.350 MB/sec
[info]                  ·gc.alloc.rate.norm:       7960.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.555 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7836.593 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 340534.983 ops/s
[info]                  ·gc.alloc.rate:                                  1722.035 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7960.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.688 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7865.952 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 341292.309 ops/s
[info]                  ·gc.alloc.rate:                                  1725.885 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7960.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.691 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7848.416 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce":
[info]   343255.647 ±(99.9%) 10940.141 ops/s [Average]
[info]   (min, avg, max) = (340534.983, 343255.647, 346421.966), stdev = 2841.120
[info]   CI (99.9%): [332315.506, 354195.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1735.806 ±(99.9%) 55.432 MB/sec [Average]
[info]   (min, avg, max) = (1722.035, 1735.806, 1751.667), stdev = 14.396
[info]   CI (99.9%): [1680.374, 1791.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   7960.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7960.001, 7960.001, 7960.001), stdev = 0.001
[info]   CI (99.9%): [7960.001, 7960.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.024 ±(99.9%) 0.188 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.024, 0.111), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.108 ±(99.9%) 0.854 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.108, 0.504), stdev = 0.222
[info]   CI (99.9%): [≈ 0, 0.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1700.355 ±(99.9%) 10.992 MB/sec [Average]
[info]   (min, avg, max) = (1695.249, 1700.355, 1701.691), stdev = 2.855
[info]   CI (99.9%): [1689.363, 1711.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   7797.910 ±(99.9%) 281.536 B/op [Average]
[info]   (min, avg, max) = (7706.155, 7797.910, 7865.952), stdev = 73.114
[info]   CI (99.9%): [7516.375, 8079.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   3.028 ±(99.9%) 26.072 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.028, 15.140), stdev = 6.771
[info]   CI (99.9%): [≈ 0, 29.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 10.000), stdev = 2.608
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava
[info] # Run progress: 9.95% complete, ETA 01:11:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28768.763 ops/s
[info] # Warmup Iteration   2: 1559410.643 ops/s
[info] # Warmup Iteration   3: 1582233.572 ops/s
[info] Iteration   1: 1606519.909 ops/s
[info]                  ·gc.alloc.rate:            506.461 MB/sec
[info]                  ·gc.alloc.rate.norm:       496.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.849 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 326.953 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 1598130.457 ops/s
[info]                  ·gc.alloc.rate:                   503.717 MB/sec
[info]                  ·gc.alloc.rate.norm:              496.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             666.889 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        656.672 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.656 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 1606814.444 ops/s
[info]                  ·gc.alloc.rate:            506.308 MB/sec
[info]                  ·gc.alloc.rate.norm:       496.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.694 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 326.901 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 1597418.111 ops/s
[info]                  ·gc.alloc.rate:                   503.380 MB/sec
[info]                  ·gc.alloc.rate.norm:              496.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             666.752 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        656.976 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.656 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 1601378.252 ops/s
[info]                  ·gc.alloc.rate:            504.623 MB/sec
[info]                  ·gc.alloc.rate.norm:       496.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.704 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 328.002 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava":
[info]   1602052.234 ±(99.9%) 17215.054 ops/s [Average]
[info]   (min, avg, max) = (1597418.111, 1602052.234, 1606814.444), stdev = 4470.695
[info]   CI (99.9%): [1584837.181, 1619267.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   504.898 ±(99.9%) 5.515 MB/sec [Average]
[info]   (min, avg, max) = (503.380, 504.898, 506.461), stdev = 1.432
[info]   CI (99.9%): [499.383, 510.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   496.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (496.000, 496.000, 496.000), stdev = 0.001
[info]   CI (99.9%): [496.000, 496.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   466.978 ±(99.9%) 702.475 MB/sec [Average]
[info]   (min, avg, max) = (333.694, 466.978, 666.889), stdev = 182.431
[info]   CI (99.9%): [≈ 0, 1169.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   459.101 ±(99.9%) 695.028 B/op [Average]
[info]   (min, avg, max) = (326.901, 459.101, 656.976), stdev = 180.497
[info]   CI (99.9%): [≈ 0, 1154.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   0.262 ±(99.9%) 1.384 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.262, 0.656), stdev = 0.359
[info]   CI (99.9%): [≈ 0, 1.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.000, 10.000), stdev = 2.739
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala
[info] # Run progress: 10.22% complete, ETA 01:11:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 399460.081 ops/s
[info] # Warmup Iteration   2: 625201.715 ops/s
[info] # Warmup Iteration   3: 615212.217 ops/s
[info] Iteration   1: 632661.905 ops/s
[info]                  ·gc.alloc.rate:            537.055 MB/sec
[info]                  ·gc.alloc.rate.norm:       1336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.398 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 836.839 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 609865.284 ops/s
[info]                  ·gc.alloc.rate:            517.550 MB/sec
[info]                  ·gc.alloc.rate.norm:       1336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.631 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1736.326 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 610297.038 ops/s
[info]                  ·gc.alloc.rate:            517.933 MB/sec
[info]                  ·gc.alloc.rate.norm:       1336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.310 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 867.506 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 607340.203 ops/s
[info]                  ·gc.alloc.rate:            515.679 MB/sec
[info]                  ·gc.alloc.rate.norm:       1336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.949 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1743.452 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 609409.881 ops/s
[info]                  ·gc.alloc.rate:            517.228 MB/sec
[info]                  ·gc.alloc.rate.norm:       1336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.358 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 868.813 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala":
[info]   613914.862 ±(99.9%) 40590.078 ops/s [Average]
[info]   (min, avg, max) = (607340.203, 613914.862, 632661.905), stdev = 10541.114
[info]   CI (99.9%): [573324.785, 654504.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   521.089 ±(99.9%) 34.525 MB/sec [Average]
[info]   (min, avg, max) = (515.679, 521.089, 537.055), stdev = 8.966
[info]   CI (99.9%): [486.563, 555.614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1336.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1336.001, 1336.001, 1336.001), stdev = 0.001
[info]   CI (99.9%): [1336.001, 1336.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   470.929 ±(99.9%) 709.570 MB/sec [Average]
[info]   (min, avg, max) = (336.310, 470.929, 672.949), stdev = 184.273
[info]   CI (99.9%): [≈ 0, 1180.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1210.587 ±(99.9%) 1861.248 B/op [Average]
[info]   (min, avg, max) = (836.839, 1210.587, 1743.452), stdev = 483.360
[info]   CI (99.9%): [≈ 0, 3071.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 9.000), stdev = 2.345
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala
[info] # Run progress: 10.48% complete, ETA 01:11:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1631167.498 ops/s
[info] # Warmup Iteration   2: 1697168.531 ops/s
[info] # Warmup Iteration   3: 1726703.125 ops/s
[info] Iteration   1: 1726873.745 ops/s
[info]                  ·gc.alloc.rate:            333.508 MB/sec
[info]                  ·gc.alloc.rate.norm:       304.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.998 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 307.182 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 1724848.566 ops/s
[info]                  ·gc.alloc.rate:            333.094 MB/sec
[info]                  ·gc.alloc.rate.norm:       304.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.986 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 307.552 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 1727844.871 ops/s
[info]                  ·gc.alloc.rate:            333.685 MB/sec
[info]                  ·gc.alloc.rate.norm:       304.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.006 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 307.026 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 1727212.240 ops/s
[info]                  ·gc.alloc.rate:            333.602 MB/sec
[info]                  ·gc.alloc.rate.norm:       304.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.035 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 307.129 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 1728590.044 ops/s
[info]                  ·gc.alloc.rate:            333.826 MB/sec
[info]                  ·gc.alloc.rate.norm:       304.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.006 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 306.896 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala":
[info]   1727073.893 ±(99.9%) 5412.998 ops/s [Average]
[info]   (min, avg, max) = (1724848.566, 1727073.893, 1728590.044), stdev = 1405.738
[info]   CI (99.9%): [1721660.895, 1732486.891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   333.543 ±(99.9%) 1.067 MB/sec [Average]
[info]   (min, avg, max) = (333.094, 333.543, 333.826), stdev = 0.277
[info]   CI (99.9%): [332.476, 334.610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   304.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (304.000, 304.000, 304.000), stdev = 0.001
[info]   CI (99.9%): [304.000, 304.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   337.006 ±(99.9%) 0.071 MB/sec [Average]
[info]   (min, avg, max) = (336.986, 337.006, 337.035), stdev = 0.018
[info]   CI (99.9%): [336.935, 337.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   307.157 ±(99.9%) 0.949 B/op [Average]
[info]   (min, avg, max) = (306.896, 307.157, 307.552), stdev = 0.246
[info]   CI (99.9%): [306.208, 308.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson
[info] # Run progress: 10.75% complete, ETA 01:10:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 53568.683 ops/s
[info] # Warmup Iteration   2: 91612.830 ops/s
[info] # Warmup Iteration   3: 93911.272 ops/s
[info] Iteration   1: 94934.665 ops/s
[info]                  ·gc.alloc.rate:                                  3449.213 MB/sec
[info]                  ·gc.alloc.rate.norm:                             57176.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3404.405 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       56433.241 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   2: 95529.917 ops/s
[info]                  ·gc.alloc.rate:                                  3470.284 MB/sec
[info]                  ·gc.alloc.rate.norm:                             57176.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.043 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3744.180 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       61688.688 B/op
[info]                  ·gc.count:                                       11.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   3: 94141.401 ops/s
[info]                  ·gc.alloc.rate:                                  3420.342 MB/sec
[info]                  ·gc.alloc.rate.norm:                             57176.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.049 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3404.270 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       56907.329 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   4: 93820.536 ops/s
[info]                  ·gc.alloc.rate:                                  3409.340 MB/sec
[info]                  ·gc.alloc.rate.norm:                             57176.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.050 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3405.036 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       57103.827 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   5: 93900.808 ops/s
[info]                  ·gc.alloc.rate:                                  3411.329 MB/sec
[info]                  ·gc.alloc.rate.norm:                             57176.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.038 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3403.975 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       57052.753 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson":
[info]   94465.465 ±(99.9%) 2851.164 ops/s [Average]
[info]   (min, avg, max) = (93820.536, 94465.465, 95529.917), stdev = 740.438
[info]   CI (99.9%): [91614.302, 97316.629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3432.102 ±(99.9%) 102.578 MB/sec [Average]
[info]   (min, avg, max) = (3409.340, 3432.102, 3470.284), stdev = 26.639
[info]   CI (99.9%): [3329.524, 3534.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   57176.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (57176.004, 57176.004, 57176.005), stdev = 0.001
[info]   CI (99.9%): [57176.004, 57176.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.002 ±(99.9%) 0.003 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.002, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.039 ±(99.9%) 0.054 B/op [Average]
[info]   (min, avg, max) = (0.016, 0.039, 0.050), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   3472.373 ±(99.9%) 585.087 MB/sec [Average]
[info]   (min, avg, max) = (3403.975, 3472.373, 3744.180), stdev = 151.945
[info]   CI (99.9%): [2887.286, 4057.460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   57837.167 ±(99.9%) 8353.083 B/op [Average]
[info]   (min, avg, max) = (56433.241, 57837.167, 61688.688), stdev = 2169.269
[info]   CI (99.9%): [49484.084, 66190.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   51.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (10.000, 10.200, 11.000), stdev = 0.447
[info]   CI (99.9%): [51.000, 51.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 9.400, 12.000), stdev = 1.517
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce
[info] # Run progress: 11.02% complete, ETA 01:10:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 245420.747 ops/s
[info] # Warmup Iteration   2: 316780.587 ops/s
[info] # Warmup Iteration   3: 318750.617 ops/s
[info] Iteration   1: 320365.962 ops/s
[info]                  ·gc.alloc.rate:            784.719 MB/sec
[info]                  ·gc.alloc.rate.norm:       3856.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.965 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3311.775 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 315834.657 ops/s
[info]                  ·gc.alloc.rate:            773.683 MB/sec
[info]                  ·gc.alloc.rate.norm:       3856.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.018 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5038.869 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 315830.872 ops/s
[info]                  ·gc.alloc.rate:            773.635 MB/sec
[info]                  ·gc.alloc.rate.norm:       3856.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.008 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3359.437 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 319753.910 ops/s
[info]                  ·gc.alloc.rate:            783.353 MB/sec
[info]                  ·gc.alloc.rate.norm:       3856.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.069 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3318.061 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 317231.385 ops/s
[info]                  ·gc.alloc.rate:                                  777.418 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3856.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.154 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.765 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1018.137 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5049.970 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                16.525 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce":
[info]   317803.357 ±(99.9%) 8273.337 ops/s [Average]
[info]   (min, avg, max) = (315830.872, 317803.357, 320365.962), stdev = 2148.559
[info]   CI (99.9%): [309530.020, 326076.694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   778.561 ±(99.9%) 20.215 MB/sec [Average]
[info]   (min, avg, max) = (773.635, 778.561, 784.719), stdev = 5.250
[info]   CI (99.9%): [758.346, 798.777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   3856.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3856.001, 3856.001, 3856.001), stdev = 0.001
[info]   CI (99.9%): [3856.001, 3856.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.031 ±(99.9%) 0.266 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.031, 0.154), stdev = 0.069
[info]   CI (99.9%): [≈ 0, 0.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.153 ±(99.9%) 1.317 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.153, 0.765), stdev = 0.342
[info]   CI (99.9%): [≈ 0, 1.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   810.240 ±(99.9%) 718.342 MB/sec [Average]
[info]   (min, avg, max) = (673.965, 810.240, 1018.137), stdev = 186.551
[info]   CI (99.9%): [91.897, 1528.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   4015.622 ±(99.9%) 3617.085 B/op [Average]
[info]   (min, avg, max) = (3311.775, 4015.622, 5049.970), stdev = 939.346
[info]   CI (99.9%): [398.537, 7632.708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.737 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.332), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   3.305 ±(99.9%) 28.457 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.305, 16.525), stdev = 7.390
[info]   CI (99.9%): [≈ 0, 31.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.200, 10.000), stdev = 1.643
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava
[info] # Run progress: 11.29% complete, ETA 01:10:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 45765.327 ops/s
[info] # Warmup Iteration   2: 1190095.682 ops/s
[info] # Warmup Iteration   3: 1272756.227 ops/s
[info] Iteration   1: 1154372.050 ops/s
[info]                  ·gc.alloc.rate:            533.903 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.403 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 910.034 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 1201111.231 ops/s
[info]                  ·gc.alloc.rate:            555.449 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.658 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 437.310 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 1191541.453 ops/s
[info]                  ·gc.alloc.rate:            551.045 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.355 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 881.661 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 1195844.021 ops/s
[info]                  ·gc.alloc.rate:                   553.090 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             666.741 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        877.592 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.877 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 1196496.849 ops/s
[info]                  ·gc.alloc.rate:            553.348 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.677 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 438.995 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava":
[info]   1187873.121 ±(99.9%) 73287.018 ops/s [Average]
[info]   (min, avg, max) = (1154372.050, 1187873.121, 1201111.231), stdev = 19032.406
[info]   CI (99.9%): [1114586.103, 1261160.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   549.367 ±(99.9%) 33.825 MB/sec [Average]
[info]   (min, avg, max) = (533.903, 549.367, 555.449), stdev = 8.784
[info]   CI (99.9%): [515.542, 583.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   728.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (728.000, 728.000, 728.000), stdev = 0.001
[info]   CI (99.9%): [728.000, 728.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   533.767 ±(99.9%) 703.377 MB/sec [Average]
[info]   (min, avg, max) = (333.658, 533.767, 667.403), stdev = 182.665
[info]   CI (99.9%): [≈ 0, 1237.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   709.118 ±(99.9%) 953.701 B/op [Average]
[info]   (min, avg, max) = (437.310, 709.118, 910.034), stdev = 247.673
[info]   CI (99.9%): [≈ 0, 1662.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   0.175 ±(99.9%) 1.510 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.175, 0.877), stdev = 0.392
[info]   CI (99.9%): [≈ 0, 1.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.800, 10.000), stdev = 2.588
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJavaPrealloc
[info] # Run progress: 11.56% complete, ETA 01:10:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24441.097 ops/s
[info] # Warmup Iteration   2: 1239317.391 ops/s
[info] # Warmup Iteration   3: 1314020.898 ops/s
[info] Iteration   1: 1203310.973 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1203855.896 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1201977.993 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1202023.079 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1202777.882 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJavaPrealloc":
[info]   1202789.165 ±(99.9%) 3137.277 ops/s [Average]
[info]   (min, avg, max) = (1201977.993, 1202789.165, 1203855.896), stdev = 814.741
[info]   CI (99.9%): [1199651.887, 1205926.442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJavaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJavaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJavaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala
[info] # Run progress: 11.83% complete, ETA 01:10:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 694194.444 ops/s
[info] # Warmup Iteration   2: 1065704.779 ops/s
[info] # Warmup Iteration   3: 1052091.391 ops/s
[info] Iteration   1: 1069580.445 ops/s
[info]                  ·gc.alloc.rate:            755.547 MB/sec
[info]                  ·gc.alloc.rate.norm:       1112.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.658 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 990.006 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 1072408.144 ops/s
[info]                  ·gc.alloc.rate:            757.649 MB/sec
[info]                  ·gc.alloc.rate.norm:       1112.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.752 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 987.397 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 1071087.795 ops/s
[info]                  ·gc.alloc.rate:            756.758 MB/sec
[info]                  ·gc.alloc.rate.norm:       1112.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.788 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 988.613 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 1065832.630 ops/s
[info]                  ·gc.alloc.rate:                   753.061 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.212 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1490.243 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 5.902 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   5: 1056375.023 ops/s
[info]                  ·gc.alloc.rate:                                  746.319 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1112.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.072 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.107 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.768 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1014.330 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala":
[info]   1067056.807 ±(99.9%) 24869.731 ops/s [Average]
[info]   (min, avg, max) = (1056375.023, 1067056.807, 1072408.144), stdev = 6458.590
[info]   CI (99.9%): [1042187.077, 1091926.538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   753.867 ±(99.9%) 17.551 MB/sec [Average]
[info]   (min, avg, max) = (746.319, 753.867, 757.649), stdev = 4.558
[info]   CI (99.9%): [736.316, 771.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1112.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1112.000, 1112.000, 1112.000), stdev = 0.001
[info]   CI (99.9%): [1112.000, 1112.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.014 ±(99.9%) 0.123 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.072), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.021 ±(99.9%) 0.184 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.107), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   741.636 ±(99.9%) 576.134 MB/sec [Average]
[info]   (min, avg, max) = (672.658, 741.636, 1009.212), stdev = 149.620
[info]   CI (99.9%): [165.502, 1317.770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1094.118 ±(99.9%) 853.768 B/op [Average]
[info]   (min, avg, max) = (987.397, 1094.118, 1490.243), stdev = 221.721
[info]   CI (99.9%): [240.349, 1947.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.180 ±(99.9%) 10.164 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.180, 5.902), stdev = 2.639
[info]   CI (99.9%): [≈ 0, 11.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.000, 13.000), stdev = 3.937
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala
[info] # Run progress: 12.10% complete, ETA 01:09:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1899492.676 ops/s
[info] # Warmup Iteration   2: 2100181.151 ops/s
[info] # Warmup Iteration   3: 2134212.864 ops/s
[info] Iteration   1: 2157822.168 ops/s
[info]                  ·gc.alloc.rate:            998.431 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.470 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 736.049 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 2063931.911 ops/s
[info]                  ·gc.alloc.rate:            954.454 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.983 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 769.592 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 1985158.756 ops/s
[info]                  ·gc.alloc.rate:                                  918.128 MB/sec
[info]                  ·gc.alloc.rate.norm:                             728.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.056 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.044 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1013.093 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       803.300 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                3.169 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   4: 2153457.603 ops/s
[info]                  ·gc.alloc.rate:                                  996.236 MB/sec
[info]                  ·gc.alloc.rate.norm:                             728.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.038 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.028 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.890 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       497.561 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 2155202.947 ops/s
[info]                  ·gc.alloc.rate:            996.730 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.983 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 745.715 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala":
[info]   2103114.677 ±(99.9%) 296333.234 ops/s [Average]
[info]   (min, avg, max) = (1985158.756, 2103114.677, 2157822.168), stdev = 76956.800
[info]   CI (99.9%): [1806781.443, 2399447.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   972.796 ±(99.9%) 137.556 MB/sec [Average]
[info]   (min, avg, max) = (918.128, 972.796, 998.431), stdev = 35.723
[info]   CI (99.9%): [835.240, 1110.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   728.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (728.000, 728.000, 728.000), stdev = 0.001
[info]   CI (99.9%): [728.000, 728.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.019 ±(99.9%) 0.101 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.056), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.014 ±(99.9%) 0.079 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.044), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   946.684 ±(99.9%) 572.440 MB/sec [Average]
[info]   (min, avg, max) = (680.890, 946.684, 1020.983), stdev = 148.661
[info]   CI (99.9%): [374.244, 1519.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   710.443 ±(99.9%) 469.003 B/op [Average]
[info]   (min, avg, max) = (497.561, 710.443, 803.300), stdev = 121.799
[info]   CI (99.9%): [241.441, 1179.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.634 ±(99.9%) 5.457 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.634, 3.169), stdev = 1.417
[info]   CI (99.9%): [≈ 0, 6.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.200, 10.000), stdev = 3.899
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 12.37% complete, ETA 01:09:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1910908.923 ops/s
[info] # Warmup Iteration   2: 2213444.763 ops/s
[info] # Warmup Iteration   3: 2209982.609 ops/s
[info] Iteration   1: 2207310.310 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2211200.624 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2207929.973 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2205747.131 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2208848.303 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2208207.268 ±(99.9%) 7774.298 ops/s [Average]
[info]   (min, avg, max) = (2205747.131, 2208207.268, 2211200.624), stdev = 2018.960
[info]   CI (99.9%): [2200432.971, 2215981.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson
[info] # Run progress: 12.63% complete, ETA 01:09:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 302123.224 ops/s
[info] # Warmup Iteration   2: 407210.250 ops/s
[info] # Warmup Iteration   3: 408498.743 ops/s
[info] Iteration   1: 423910.768 ops/s
[info]                  ·gc.alloc.rate:            495.525 MB/sec
[info]                  ·gc.alloc.rate.norm:       1840.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.687 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2497.846 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 412350.933 ops/s
[info]                  ·gc.alloc.rate:            481.973 MB/sec
[info]                  ·gc.alloc.rate.norm:       1840.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.334 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1284.004 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 424136.856 ops/s
[info]                  ·gc.alloc.rate:            495.783 MB/sec
[info]                  ·gc.alloc.rate.norm:       1840.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.695 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2496.574 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 426161.681 ops/s
[info]                  ·gc.alloc.rate:            498.161 MB/sec
[info]                  ·gc.alloc.rate.norm:       1840.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.355 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1242.357 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 424753.560 ops/s
[info]                  ·gc.alloc.rate:            496.703 MB/sec
[info]                  ·gc.alloc.rate.norm:       1840.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.946 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2492.878 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson":
[info]   422262.759 ±(99.9%) 21601.234 ops/s [Average]
[info]   (min, avg, max) = (412350.933, 422262.759, 426161.681), stdev = 5609.772
[info]   CI (99.9%): [400661.526, 443863.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   493.629 ±(99.9%) 25.403 MB/sec [Average]
[info]   (min, avg, max) = (481.973, 493.629, 498.161), stdev = 6.597
[info]   CI (99.9%): [468.226, 519.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   1840.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1840.001, 1840.001, 1840.001), stdev = 0.001
[info]   CI (99.9%): [1840.001, 1840.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   538.203 ±(99.9%) 709.562 MB/sec [Average]
[info]   (min, avg, max) = (336.334, 538.203, 672.946), stdev = 184.271
[info]   CI (99.9%): [≈ 0, 1247.765] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   2002.732 ±(99.9%) 2600.256 B/op [Average]
[info]   (min, avg, max) = (1242.357, 2002.732, 2497.846), stdev = 675.278
[info]   CI (99.9%): [≈ 0, 4602.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 8.000), stdev = 2.049
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce
[info] # Run progress: 12.90% complete, ETA 01:09:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 137829.689 ops/s
[info] # Warmup Iteration   2: 168379.716 ops/s
[info] # Warmup Iteration   3: 172132.353 ops/s
[info] Iteration   1: 173802.630 ops/s
[info]                  ·gc.alloc.rate:                                  2086.971 MB/sec
[info]                  ·gc.alloc.rate.norm:                             18904.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.068 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.619 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.773 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       18494.595 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 173643.464 ops/s
[info]                  ·gc.alloc.rate:                                  2085.224 MB/sec
[info]                  ·gc.alloc.rate.norm:                             18904.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.071 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.943 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       18511.634 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 173719.129 ops/s
[info]                  ·gc.alloc.rate:                                  2086.324 MB/sec
[info]                  ·gc.alloc.rate.norm:                             18904.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.030 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.080 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       18503.111 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 174325.485 ops/s
[info]                  ·gc.alloc.rate:                                  2093.702 MB/sec
[info]                  ·gc.alloc.rate.norm:                             18904.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.010 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.095 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.214 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       18439.118 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 171142.805 ops/s
[info]                  ·gc.alloc.rate:                                  2056.012 MB/sec
[info]                  ·gc.alloc.rate.norm:                             18904.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.045 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.731 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       18781.892 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce":
[info]   173326.703 ±(99.9%) 4812.465 ops/s [Average]
[info]   (min, avg, max) = (171142.805, 173326.703, 174325.485), stdev = 1249.782
[info]   CI (99.9%): [168514.237, 178139.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate":
[info]   2081.647 ±(99.9%) 56.641 MB/sec [Average]
[info]   (min, avg, max) = (2056.012, 2081.647, 2093.702), stdev = 14.709
[info]   CI (99.9%): [2025.006, 2138.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   18904.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (18904.002, 18904.002, 18904.003), stdev = 0.001
[info]   CI (99.9%): [18904.002, 18904.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.019 ±(99.9%) 0.107 MB/sec [Average]
[info]   (min, avg, max) = (0.003, 0.019, 0.068), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.172 ±(99.9%) 0.966 B/op [Average]
[info]   (min, avg, max) = (0.030, 0.172, 0.619), stdev = 0.251
[info]   CI (99.9%): [≈ 0, 1.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2042.148 ±(99.9%) 1.404 MB/sec [Average]
[info]   (min, avg, max) = (2041.773, 2042.148, 2042.731), stdev = 0.365
[info]   CI (99.9%): [2040.744, 2043.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   18546.070 ±(99.9%) 519.236 B/op [Average]
[info]   (min, avg, max) = (18439.118, 18546.070, 18781.892), stdev = 134.844
[info]   CI (99.9%): [18026.834, 19065.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala
[info] # Run progress: 13.17% complete, ETA 01:09:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 237598.981 ops/s
[info] # Warmup Iteration   2: 379350.617 ops/s
[info] # Warmup Iteration   3: 363406.279 ops/s
[info] Iteration   1: 369002.699 ops/s
[info]                  ·gc.alloc.rate:            313.169 MB/sec
[info]                  ·gc.alloc.rate.norm:       1336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.320 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1434.767 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 371740.610 ops/s
[info]                  ·gc.alloc.rate:            315.494 MB/sec
[info]                  ·gc.alloc.rate.norm:       1336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.330 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1424.236 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 372359.194 ops/s
[info]                  ·gc.alloc.rate:                   316.167 MB/sec
[info]                  ·gc.alloc.rate.norm:              1336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             335.822 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1419.053 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.816 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 372178.824 ops/s
[info]                  ·gc.alloc.rate:            315.894 MB/sec
[info]                  ·gc.alloc.rate.norm:       1336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.370 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1422.602 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 372477.270 ops/s
[info]                  ·gc.alloc.rate:            316.181 MB/sec
[info]                  ·gc.alloc.rate.norm:       1336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.397 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1421.422 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala":
[info]   371551.719 ±(99.9%) 5591.760 ops/s [Average]
[info]   (min, avg, max) = (369002.699, 371551.719, 372477.270), stdev = 1452.162
[info]   CI (99.9%): [365959.959, 377143.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   315.381 ±(99.9%) 4.881 MB/sec [Average]
[info]   (min, avg, max) = (313.169, 315.381, 316.181), stdev = 1.268
[info]   CI (99.9%): [310.500, 320.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1336.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1336.001, 1336.001, 1336.001), stdev = 0.001
[info]   CI (99.9%): [1336.001, 1336.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   336.248 ±(99.9%) 0.925 MB/sec [Average]
[info]   (min, avg, max) = (335.822, 336.248, 336.397), stdev = 0.240
[info]   CI (99.9%): [335.323, 337.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1424.416 ±(99.9%) 23.438 B/op [Average]
[info]   (min, avg, max) = (1419.053, 1424.416, 1434.767), stdev = 6.087
[info]   CI (99.9%): [1400.978, 1447.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.563 ±(99.9%) 4.849 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.563, 2.816), stdev = 1.259
[info]   CI (99.9%): [≈ 0, 5.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala
[info] # Run progress: 13.44% complete, ETA 01:08:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1005339.259 ops/s
[info] # Warmup Iteration   2: 1000018.242 ops/s
[info] # Warmup Iteration   3: 1058417.107 ops/s
[info] Iteration   1: 1052039.935 ops/s
[info]                  ·gc.alloc.rate:                   203.174 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             334.991 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        501.232 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      1.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.989 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1034232.331 ops/s
[info]                  ·gc.alloc.rate:            199.723 MB/sec
[info]                  ·gc.alloc.rate.norm:       304.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.991 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 512.937 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 1042467.375 ops/s
[info]                  ·gc.alloc.rate:      201.348 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1056862.673 ops/s
[info]                  ·gc.alloc.rate:            204.150 MB/sec
[info]                  ·gc.alloc.rate.norm:       304.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.085 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 501.954 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 1063832.577 ops/s
[info]                  ·gc.alloc.rate:      205.546 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala":
[info]   1049886.978 ±(99.9%) 45066.263 ops/s [Average]
[info]   (min, avg, max) = (1034232.331, 1049886.978, 1063832.577), stdev = 11703.565
[info]   CI (99.9%): [1004820.715, 1094953.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   202.788 ±(99.9%) 8.840 MB/sec [Average]
[info]   (min, avg, max) = (199.723, 202.788, 205.546), stdev = 2.296
[info]   CI (99.9%): [193.949, 211.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   304.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (304.000, 304.000, 304.000), stdev = 0.001
[info]   CI (99.9%): [304.000, 304.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   201.813 ±(99.9%) 709.410 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 201.813, 337.085), stdev = 184.231
[info]   CI (99.9%): [≈ 0, 911.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   303.225 ±(99.9%) 1066.027 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 303.225, 512.937), stdev = 276.844
[info]   CI (99.9%): [≈ 0, 1369.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.400 ±(99.9%) 3.441 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.998), stdev = 0.894
[info]   CI (99.9%): [≈ 0, 3.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.598 ±(99.9%) 5.148 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.598, 2.989), stdev = 1.337
[info]   CI (99.9%): [≈ 0, 5.746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson
[info] # Run progress: 13.71% complete, ETA 01:08:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 41593.043 ops/s
[info] # Warmup Iteration   2: 76598.069 ops/s
[info] # Warmup Iteration   3: 78942.629 ops/s
[info] Iteration   1: 79760.918 ops/s
[info]                  ·gc.alloc.rate:                                  3396.521 MB/sec
[info]                  ·gc.alloc.rate.norm:                             67016.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.106 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3404.287 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       67169.224 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   2: 79946.531 ops/s
[info]                  ·gc.alloc.rate:                                  3403.569 MB/sec
[info]                  ·gc.alloc.rate.norm:                             67016.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.129 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3403.244 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       67009.622 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 79423.994 ops/s
[info]                  ·gc.alloc.rate:                                  3381.941 MB/sec
[info]                  ·gc.alloc.rate.norm:                             67016.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.157 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3403.968 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       67452.489 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   4: 77615.471 ops/s
[info]                  ·gc.alloc.rate:                                  3304.221 MB/sec
[info]                  ·gc.alloc.rate.norm:                             67016.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.009 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.173 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3403.111 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       69021.697 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   5: 77966.800 ops/s
[info]                  ·gc.alloc.rate:                                  3320.064 MB/sec
[info]                  ·gc.alloc.rate.norm:                             67016.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.106 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3404.037 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       68711.028 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson":
[info]   78942.743 ±(99.9%) 4139.540 ops/s [Average]
[info]   (min, avg, max) = (77615.471, 78942.743, 79946.531), stdev = 1075.025
[info]   CI (99.9%): [74803.203, 83082.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3361.263 ±(99.9%) 176.581 MB/sec [Average]
[info]   (min, avg, max) = (3304.221, 3361.263, 3403.569), stdev = 45.858
[info]   CI (99.9%): [3184.682, 3537.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   67016.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (67016.005, 67016.005, 67016.006), stdev = 0.001
[info]   CI (99.9%): [67016.004, 67016.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.007 ±(99.9%) 0.006 MB/sec [Average]
[info]   (min, avg, max) = (0.005, 0.007, 0.009), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.134 ±(99.9%) 0.117 B/op [Average]
[info]   (min, avg, max) = (0.106, 0.134, 0.173), stdev = 0.030
[info]   CI (99.9%): [0.018, 0.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   3403.730 ±(99.9%) 2.001 MB/sec [Average]
[info]   (min, avg, max) = (3403.111, 3403.730, 3404.287), stdev = 0.520
[info]   CI (99.9%): [3401.729, 3405.730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   67872.812 ±(99.9%) 3570.601 B/op [Average]
[info]   (min, avg, max) = (67009.622, 67872.812, 69021.697), stdev = 927.274
[info]   CI (99.9%): [64302.210, 71443.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.count":
[info]   50.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (10.000, 10.000, 10.000), stdev = 0.001
[info]   CI (99.9%): [50.000, 50.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.600, 9.000), stdev = 0.548
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce
[info] # Run progress: 13.98% complete, ETA 01:08:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 226904.667 ops/s
[info] # Warmup Iteration   2: 301479.536 ops/s
[info] # Warmup Iteration   3: 304501.865 ops/s
[info] Iteration   1: 305626.037 ops/s
[info]                  ·gc.alloc.rate:                   1519.037 MB/sec
[info]                  ·gc.alloc.rate.norm:              7824.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1347.996 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        6943.031 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 17.152 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 301791.802 ops/s
[info]                  ·gc.alloc.rate:                                  1499.971 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7824.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.140 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.729 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.642 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8875.933 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 310953.361 ops/s
[info]                  ·gc.alloc.rate:                                  1545.603 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7824.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.359 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6891.340 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 302695.808 ops/s
[info]                  ·gc.alloc.rate:                                  1504.643 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7824.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.024 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.794 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8849.166 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 310460.772 ops/s
[info]                  ·gc.alloc.rate:            1543.207 MB/sec
[info]                  ·gc.alloc.rate.norm:       7824.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.402 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6902.259 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce":
[info]   306305.556 ±(99.9%) 16419.950 ops/s [Average]
[info]   (min, avg, max) = (301791.802, 306305.556, 310953.361), stdev = 4264.209
[info]   CI (99.9%): [289885.606, 322725.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1522.492 ±(99.9%) 81.706 MB/sec [Average]
[info]   (min, avg, max) = (1499.971, 1522.492, 1545.603), stdev = 21.219
[info]   CI (99.9%): [1440.787, 1604.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   7824.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7824.001, 7824.001, 7824.001), stdev = 0.001
[info]   CI (99.9%): [7824.001, 7824.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.029 ±(99.9%) 0.238 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.140), stdev = 0.062
[info]   CI (99.9%): [≈ 0, 0.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.153 ±(99.9%) 1.240 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.153, 0.729), stdev = 0.322
[info]   CI (99.9%): [≈ 0, 1.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1494.838 ±(99.9%) 727.514 MB/sec [Average]
[info]   (min, avg, max) = (1347.996, 1494.838, 1701.794), stdev = 188.933
[info]   CI (99.9%): [767.325, 2222.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   7692.346 ±(99.9%) 4114.263 B/op [Average]
[info]   (min, avg, max) = (6891.340, 7692.346, 8875.933), stdev = 1068.461
[info]   CI (99.9%): [3578.083, 11806.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   3.430 ±(99.9%) 29.536 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.430, 17.152), stdev = 7.670
[info]   CI (99.9%): [≈ 0, 32.967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 14.000), stdev = 4.528
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala
[info] # Run progress: 14.25% complete, ETA 01:08:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1047487.716 ops/s
[info] # Warmup Iteration   2: 1777263.870 ops/s
[info] # Warmup Iteration   3: 1795719.120 ops/s
[info] Iteration   1: 1808763.436 ops/s
[info]                  ·gc.alloc.rate:            928.399 MB/sec
[info]                  ·gc.alloc.rate.norm:       808.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.637 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 585.406 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 1804145.033 ops/s
[info]                  ·gc.alloc.rate:            926.017 MB/sec
[info]                  ·gc.alloc.rate.norm:       808.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.967 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 880.378 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 1806603.973 ops/s
[info]                  ·gc.alloc.rate:                   927.288 MB/sec
[info]                  ·gc.alloc.rate.norm:              808.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.003 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        879.204 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.482 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   4: 1817854.205 ops/s
[info]                  ·gc.alloc.rate:                                  933.191 MB/sec
[info]                  ·gc.alloc.rate.norm:                             808.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.131 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.114 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.167 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       884.174 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 1824245.900 ops/s
[info]                  ·gc.alloc.rate:                                  936.747 MB/sec
[info]                  ·gc.alloc.rate.norm:                             808.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.962 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       587.370 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala":
[info]   1812322.509 ±(99.9%) 32503.556 ops/s [Average]
[info]   (min, avg, max) = (1804145.033, 1812322.509, 1824245.900), stdev = 8441.070
[info]   CI (99.9%): [1779818.953, 1844826.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   930.328 ±(99.9%) 17.323 MB/sec [Average]
[info]   (min, avg, max) = (926.017, 930.328, 936.747), stdev = 4.499
[info]   CI (99.9%): [913.005, 947.651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   808.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (808.000, 808.000, 808.000), stdev = 0.001
[info]   CI (99.9%): [808.000, 808.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.027 ±(99.9%) 0.225 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.131), stdev = 0.059
[info]   CI (99.9%): [≈ 0, 0.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.023 ±(99.9%) 0.195 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.114), stdev = 0.051
[info]   CI (99.9%): [≈ 0, 0.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   878.547 ±(99.9%) 709.520 MB/sec [Average]
[info]   (min, avg, max) = (672.637, 878.547, 1021.167), stdev = 184.260
[info]   CI (99.9%): [169.027, 1588.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   763.306 ±(99.9%) 621.939 B/op [Average]
[info]   (min, avg, max) = (585.406, 763.306, 884.174), stdev = 161.515
[info]   CI (99.9%): [141.368, 1385.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.696 ±(99.9%) 5.996 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.696, 3.482), stdev = 1.557
[info]   CI (99.9%): [≈ 0, 6.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.600, 13.000), stdev = 5.030
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala
[info] # Run progress: 14.52% complete, ETA 01:08:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1729118.111 ops/s
[info] # Warmup Iteration   2: 1940156.369 ops/s
[info] # Warmup Iteration   3: 1928061.925 ops/s
[info] Iteration   1: 1900817.775 ops/s
[info]                  ·gc.alloc.rate:            512.013 MB/sec
[info]                  ·gc.alloc.rate.norm:       424.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.698 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 557.064 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 1912287.747 ops/s
[info]                  ·gc.alloc.rate:            515.040 MB/sec
[info]                  ·gc.alloc.rate.norm:       424.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.315 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 276.867 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 1918180.276 ops/s
[info]                  ·gc.alloc.rate:            516.663 MB/sec
[info]                  ·gc.alloc.rate.norm:       424.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.630 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 551.995 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 1930429.073 ops/s
[info]                  ·gc.alloc.rate:            520.007 MB/sec
[info]                  ·gc.alloc.rate.norm:       424.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.367 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 274.265 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 1918158.174 ops/s
[info]                  ·gc.alloc.rate:            516.663 MB/sec
[info]                  ·gc.alloc.rate.norm:       424.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.646 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 552.008 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala":
[info]   1915974.609 ±(99.9%) 41378.167 ops/s [Average]
[info]   (min, avg, max) = (1900817.775, 1915974.609, 1930429.073), stdev = 10745.779
[info]   CI (99.9%): [1874596.442, 1957352.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   516.077 ±(99.9%) 11.181 MB/sec [Average]
[info]   (min, avg, max) = (512.013, 516.077, 520.007), stdev = 2.904
[info]   CI (99.9%): [504.896, 527.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   424.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (424.000, 424.000, 424.000), stdev = 0.001
[info]   CI (99.9%): [424.000, 424.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   538.131 ±(99.9%) 709.321 MB/sec [Average]
[info]   (min, avg, max) = (336.315, 538.131, 672.698), stdev = 184.208
[info]   CI (99.9%): [≈ 0, 1247.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   442.440 ±(99.9%) 586.649 B/op [Average]
[info]   (min, avg, max) = (274.265, 442.440, 557.064), stdev = 152.351
[info]   CI (99.9%): [≈ 0, 1029.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 7.000), stdev = 1.871
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 14.78% complete, ETA 01:07:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1646966.963 ops/s
[info] # Warmup Iteration   2: 1999945.969 ops/s
[info] # Warmup Iteration   3: 1961113.662 ops/s
[info] Iteration   1: 2002637.665 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2003820.530 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2002828.598 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2003887.145 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2003194.668 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc":
[info]   2003273.721 ±(99.9%) 2181.858 ops/s [Average]
[info]   (min, avg, max) = (2002637.665, 2003273.721, 2003887.145), stdev = 566.622
[info]   CI (99.9%): [2001091.863, 2005455.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson
[info] # Run progress: 15.05% complete, ETA 01:07:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26019.616 ops/s
[info] # Warmup Iteration   2: 40256.003 ops/s
[info] # Warmup Iteration   3: 40110.255 ops/s
[info] Iteration   1: 40131.009 ops/s
[info]                  ·gc.alloc.rate:                                  1690.978 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66321.678 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.224 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 8.798 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1689.846 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       66277.276 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                156.746 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        15.000 ms
[info] Iteration   2: 41144.228 ops/s
[info]                  ·gc.alloc.rate:                                  1733.360 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66320.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.050 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.630 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       65105.995 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 40422.592 ops/s
[info]                  ·gc.alloc.rate:                                  1703.019 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66320.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.051 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.617 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       66265.439 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 40973.898 ops/s
[info]                  ·gc.alloc.rate:                                  1726.273 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66320.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.050 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.661 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       65374.483 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 41219.754 ops/s
[info]                  ·gc.alloc.rate:                                  1737.531 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66320.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.050 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.539 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       64984.396 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson":
[info]   40778.296 ±(99.9%) 1839.219 ops/s [Average]
[info]   (min, avg, max) = (40131.009, 40778.296, 41219.754), stdev = 477.639
[info]   CI (99.9%): [38939.078, 42617.515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1718.232 ±(99.9%) 77.974 MB/sec [Average]
[info]   (min, avg, max) = (1690.978, 1718.232, 1737.531), stdev = 20.250
[info]   CI (99.9%): [1640.258, 1796.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   66320.344 ±(99.9%) 2.872 B/op [Average]
[info]   (min, avg, max) = (66320.010, 66320.344, 66321.678), stdev = 0.746
[info]   CI (99.9%): [66317.471, 66323.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.046 ±(99.9%) 0.384 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.046, 0.224), stdev = 0.100
[info]   CI (99.9%): [≈ 0, 0.430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.800 ±(99.9%) 15.064 B/op [Average]
[info]   (min, avg, max) = (0.050, 1.800, 8.798), stdev = 3.912
[info]   CI (99.9%): [≈ 0, 16.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1699.459 ±(99.9%) 20.747 MB/sec [Average]
[info]   (min, avg, max) = (1689.846, 1699.459, 1702.539), stdev = 5.388
[info]   CI (99.9%): [1678.711, 1720.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   65601.518 ±(99.9%) 2416.542 B/op [Average]
[info]   (min, avg, max) = (64984.396, 65601.518, 66277.276), stdev = 627.568
[info]   CI (99.9%): [63184.975, 68018.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   31.349 ±(99.9%) 269.925 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 31.349, 156.746), stdev = 70.099
[info]   CI (99.9%): [≈ 0, 301.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 15.000), stdev = 4.827
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce
[info] # Run progress: 15.32% complete, ETA 01:07:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 184385.316 ops/s
[info] # Warmup Iteration   2: 225760.471 ops/s
[info] # Warmup Iteration   3: 230751.038 ops/s
[info] Iteration   1: 231837.251 ops/s
[info]                  ·gc.alloc.rate:                                  2383.461 MB/sec
[info]                  ·gc.alloc.rate.norm:                             16184.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.011 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.074 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.208 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       16175.490 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 231352.783 ops/s
[info]                  ·gc.alloc.rate:                                  2378.609 MB/sec
[info]                  ·gc.alloc.rate.norm:                             16184.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.054 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.310 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       16209.183 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 230551.887 ops/s
[info]                  ·gc.alloc.rate:                                  2371.197 MB/sec
[info]                  ·gc.alloc.rate.norm:                             16184.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.045 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2383.219 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       16266.052 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 229415.376 ops/s
[info]                  ·gc.alloc.rate:                                  2358.727 MB/sec
[info]                  ·gc.alloc.rate.norm:                             16184.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.012 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.081 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.350 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       16346.085 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 229712.826 ops/s
[info]                  ·gc.alloc.rate:                                  2361.855 MB/sec
[info]                  ·gc.alloc.rate.norm:                             16184.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.045 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.498 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       16325.452 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce":
[info]   230574.025 ±(99.9%) 3986.312 ops/s [Average]
[info]   (min, avg, max) = (229415.376, 230574.025, 231837.251), stdev = 1035.233
[info]   CI (99.9%): [226587.713, 234560.337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   2370.770 ±(99.9%) 40.715 MB/sec [Average]
[info]   (min, avg, max) = (2358.727, 2370.770, 2383.461), stdev = 10.574
[info]   CI (99.9%): [2330.055, 2411.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   16184.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16184.002, 16184.002, 16184.002), stdev = 0.001
[info]   CI (99.9%): [16184.002, 16184.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.009 ±(99.9%) 0.009 MB/sec [Average]
[info]   (min, avg, max) = (0.007, 0.009, 0.012), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.060 ±(99.9%) 0.065 B/op [Average]
[info]   (min, avg, max) = (0.045, 0.060, 0.081), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2382.517 ±(99.9%) 1.564 MB/sec [Average]
[info]   (min, avg, max) = (2382.208, 2382.517, 2383.219), stdev = 0.406
[info]   CI (99.9%): [2380.953, 2384.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   16264.452 ±(99.9%) 281.364 B/op [Average]
[info]   (min, avg, max) = (16175.490, 16264.452, 16346.085), stdev = 73.069
[info]   CI (99.9%): [15983.088, 16545.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.count":
[info]   35.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.000, 7.000), stdev = 0.001
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala
[info] # Run progress: 15.59% complete, ETA 01:07:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 189056.451 ops/s
[info] # Warmup Iteration   2: 312896.482 ops/s
[info] # Warmup Iteration   3: 305670.668 ops/s
[info] Iteration   1: 309528.310 ops/s
[info]                  ·gc.alloc.rate:                                  1497.388 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7616.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.111 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.566 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1685.480 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8572.675 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                20.322 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        19.000 ms
[info] Iteration   2: 312109.990 ops/s
[info]                  ·gc.alloc.rate:                                  1510.446 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7616.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.078 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.394 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.706 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6866.018 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   3: 312426.186 ops/s
[info]                  ·gc.alloc.rate:                                  1511.595 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7616.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.376 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6859.140 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 320559.695 ops/s
[info]                  ·gc.alloc.rate:                                  1551.542 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7616.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.319 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8356.112 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 317882.698 ops/s
[info]                  ·gc.alloc.rate:                                  1538.123 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7616.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.799 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8426.443 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala":
[info]   314501.376 ±(99.9%) 17529.219 ops/s [Average]
[info]   (min, avg, max) = (309528.310, 314501.376, 320559.695), stdev = 4552.282
[info]   CI (99.9%): [296972.157, 332030.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1521.819 ±(99.9%) 85.673 MB/sec [Average]
[info]   (min, avg, max) = (1497.388, 1521.819, 1551.542), stdev = 22.249
[info]   CI (99.9%): [1436.146, 1607.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   7616.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7616.001, 7616.001, 7616.001), stdev = 0.001
[info]   CI (99.9%): [7616.001, 7616.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.038 ±(99.9%) 0.204 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.038, 0.111), stdev = 0.053
[info]   CI (99.9%): [≈ 0, 0.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.194 ±(99.9%) 1.033 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.194, 0.566), stdev = 0.268
[info]   CI (99.9%): [≈ 0, 1.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1562.536 ±(99.9%) 707.008 MB/sec [Average]
[info]   (min, avg, max) = (1361.376, 1562.536, 1702.319), stdev = 183.608
[info]   CI (99.9%): [855.528, 2269.543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   7816.078 ±(99.9%) 3365.166 B/op [Average]
[info]   (min, avg, max) = (6859.140, 7816.078, 8572.675), stdev = 873.923
[info]   CI (99.9%): [4450.912, 11181.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   4.064 ±(99.9%) 34.996 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.064, 20.322), stdev = 9.088
[info]   CI (99.9%): [≈ 0, 39.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.800, 19.000), stdev = 6.834
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala
[info] # Run progress: 15.86% complete, ETA 01:07:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1169259.806 ops/s
[info] # Warmup Iteration   2: 1247291.466 ops/s
[info] # Warmup Iteration   3: 1219983.247 ops/s
[info] Iteration   1: 1219959.761 ops/s
[info]                  ·gc.alloc.rate:            421.585 MB/sec
[info]                  ·gc.alloc.rate.norm:       544.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.008 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 869.720 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 1270534.726 ops/s
[info]                  ·gc.alloc.rate:            439.149 MB/sec
[info]                  ·gc.alloc.rate.norm:       544.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.060 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 417.537 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 1236217.562 ops/s
[info]                  ·gc.alloc.rate:            427.326 MB/sec
[info]                  ·gc.alloc.rate.norm:       544.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.103 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 429.143 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 1275369.441 ops/s
[info]                  ·gc.alloc.rate:            440.834 MB/sec
[info]                  ·gc.alloc.rate.norm:       544.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.071 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 415.954 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 1270680.813 ops/s
[info]                  ·gc.alloc.rate:            439.168 MB/sec
[info]                  ·gc.alloc.rate.norm:       544.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.075 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 834.982 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala":
[info]   1254552.461 ±(99.9%) 95913.631 ops/s [Average]
[info]   (min, avg, max) = (1219959.761, 1254552.461, 1275369.441), stdev = 24908.465
[info]   CI (99.9%): [1158638.830, 1350466.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   433.612 ±(99.9%) 33.228 MB/sec [Average]
[info]   (min, avg, max) = (421.585, 433.612, 440.834), stdev = 8.629
[info]   CI (99.9%): [400.384, 466.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   544.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (544.000, 544.000, 544.000), stdev = 0.001
[info]   CI (99.9%): [544.000, 544.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   471.864 ±(99.9%) 710.684 MB/sec [Average]
[info]   (min, avg, max) = (337.060, 471.864, 674.075), stdev = 184.562
[info]   CI (99.9%): [≈ 0, 1182.548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   593.467 ±(99.9%) 911.451 B/op [Average]
[info]   (min, avg, max) = (415.954, 593.467, 869.720), stdev = 236.701
[info]   CI (99.9%): [≈ 0, 1504.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 6.000), stdev = 1.643
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson
[info] # Run progress: 16.13% complete, ETA 01:06:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29838.251 ops/s
[info] # Warmup Iteration   2: 72223.766 ops/s
[info] # Warmup Iteration   3: 74571.308 ops/s
[info] Iteration   1: 75100.589 ops/s
[info]                  ·gc.alloc.rate:                                  3156.516 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66160.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.057 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.015 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       64200.240 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   2: 75562.448 ops/s
[info]                  ·gc.alloc.rate:                                  3177.065 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66160.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.144 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3064.068 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       63806.941 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 74686.768 ops/s
[info]                  ·gc.alloc.rate:                                  3140.621 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66160.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.159 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3064.358 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       64553.451 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   4: 74354.168 ops/s
[info]                  ·gc.alloc.rate:                                  3124.983 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66160.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.012 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.250 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3403.195 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       72050.120 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   5: 76528.951 ops/s
[info]                  ·gc.alloc.rate:                                  3216.684 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66160.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.115 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.327 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       63005.801 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson":
[info]   75246.585 ±(99.9%) 3264.741 ops/s [Average]
[info]   (min, avg, max) = (74354.168, 75246.585, 76528.951), stdev = 847.843
[info]   CI (99.9%): [71981.844, 78511.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3163.174 ±(99.9%) 137.060 MB/sec [Average]
[info]   (min, avg, max) = (3124.983, 3163.174, 3216.684), stdev = 35.594
[info]   CI (99.9%): [3026.113, 3300.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   66160.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (66160.005, 66160.006, 66160.006), stdev = 0.001
[info]   CI (99.9%): [66160.005, 66160.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.007 ±(99.9%) 0.013 MB/sec [Average]
[info]   (min, avg, max) = (0.003, 0.007, 0.012), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.145 ±(99.9%) 0.271 B/op [Average]
[info]   (min, avg, max) = (0.057, 0.145, 0.250), stdev = 0.070
[info]   CI (99.9%): [≈ 0, 0.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   3131.592 ±(99.9%) 584.649 MB/sec [Average]
[info]   (min, avg, max) = (3063.015, 3131.592, 3403.195), stdev = 151.831
[info]   CI (99.9%): [2546.944, 3716.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   65523.311 ±(99.9%) 14223.187 B/op [Average]
[info]   (min, avg, max) = (63005.801, 65523.311, 72050.120), stdev = 3693.717
[info]   CI (99.9%): [51300.124, 79746.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.count":
[info]   46.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.200, 10.000), stdev = 0.447
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 9.200, 12.000), stdev = 1.643
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce
[info] # Run progress: 16.40% complete, ETA 01:06:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 166699.378 ops/s
[info] # Warmup Iteration   2: 212833.352 ops/s
[info] # Warmup Iteration   3: 215995.828 ops/s
[info] Iteration   1: 218438.132 ops/s
[info]                  ·gc.alloc.rate:                                  1995.929 MB/sec
[info]                  ·gc.alloc.rate.norm:                             14384.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.122 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.880 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.906 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       14715.341 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   2: 214115.092 ops/s
[info]                  ·gc.alloc.rate:                                  1956.467 MB/sec
[info]                  ·gc.alloc.rate.norm:                             14384.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.639 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       12510.503 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 218893.409 ops/s
[info]                  ·gc.alloc.rate:                                  2000.932 MB/sec
[info]                  ·gc.alloc.rate.norm:                             14384.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.714 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       14684.355 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 219264.695 ops/s
[info]                  ·gc.alloc.rate:                                  2004.354 MB/sec
[info]                  ·gc.alloc.rate.norm:                             14384.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.028 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.857 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       14660.316 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 215462.587 ops/s
[info]                  ·gc.alloc.rate:                                  1969.011 MB/sec
[info]                  ·gc.alloc.rate.norm:                             14384.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.048 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.205 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       14918.695 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce":
[info]   217234.783 ±(99.9%) 8863.339 ops/s [Average]
[info]   (min, avg, max) = (214115.092, 217234.783, 219264.695), stdev = 2301.781
[info]   CI (99.9%): [208371.444, 226098.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1985.339 ±(99.9%) 82.071 MB/sec [Average]
[info]   (min, avg, max) = (1956.467, 1985.339, 2004.354), stdev = 21.313
[info]   CI (99.9%): [1903.268, 2067.409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   14384.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (14384.002, 14384.002, 14384.002), stdev = 0.001
[info]   CI (99.9%): [14384.002, 14384.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.027 ±(99.9%) 0.205 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.027, 0.122), stdev = 0.053
[info]   CI (99.9%): [≈ 0, 0.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.196 ±(99.9%) 1.474 B/op [Average]
[info]   (min, avg, max) = (0.004, 0.196, 0.880), stdev = 0.383
[info]   CI (99.9%): [≈ 0, 1.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1974.264 ±(99.9%) 586.847 MB/sec [Average]
[info]   (min, avg, max) = (1701.639, 1974.264, 2042.857), stdev = 152.402
[info]   CI (99.9%): [1387.417, 2561.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   14297.842 ±(99.9%) 3867.514 B/op [Average]
[info]   (min, avg, max) = (12510.503, 14297.842, 14918.695), stdev = 1004.381
[info]   CI (99.9%): [10430.328, 18165.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 8.000), stdev = 1.517
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala
[info] # Run progress: 16.67% complete, ETA 01:06:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 694311.507 ops/s
[info] # Warmup Iteration   2: 1023790.700 ops/s
[info] # Warmup Iteration   3: 1067476.031 ops/s
[info] Iteration   1: 1061511.969 ops/s
[info]                  ·gc.alloc.rate:            620.668 MB/sec
[info]                  ·gc.alloc.rate.norm:       920.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.974 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 997.533 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 1062219.908 ops/s
[info]                  ·gc.alloc.rate:            620.769 MB/sec
[info]                  ·gc.alloc.rate.norm:       920.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.634 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 996.866 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 1065686.811 ops/s
[info]                  ·gc.alloc.rate:            622.908 MB/sec
[info]                  ·gc.alloc.rate.norm:       920.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.756 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 993.624 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 1060148.122 ops/s
[info]                  ·gc.alloc.rate:            619.662 MB/sec
[info]                  ·gc.alloc.rate.norm:       920.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.758 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 998.831 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 1055372.766 ops/s
[info]                  ·gc.alloc.rate:            616.860 MB/sec
[info]                  ·gc.alloc.rate.norm:       920.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.755 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1003.363 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala":
[info]   1060987.915 ±(99.9%) 14421.576 ops/s [Average]
[info]   (min, avg, max) = (1055372.766, 1060987.915, 1065686.811), stdev = 3745.238
[info]   CI (99.9%): [1046566.339, 1075409.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   620.173 ±(99.9%) 8.461 MB/sec [Average]
[info]   (min, avg, max) = (616.860, 620.173, 622.908), stdev = 2.197
[info]   CI (99.9%): [611.712, 628.635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   920.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (920.000, 920.000, 920.000), stdev = 0.001
[info]   CI (99.9%): [920.000, 920.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   672.776 ±(99.9%) 0.473 MB/sec [Average]
[info]   (min, avg, max) = (672.634, 672.776, 672.974), stdev = 0.123
[info]   CI (99.9%): [672.302, 673.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   998.043 ±(99.9%) 13.628 B/op [Average]
[info]   (min, avg, max) = (993.624, 998.043, 1003.363), stdev = 3.539
[info]   CI (99.9%): [984.416, 1011.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.200, 9.000), stdev = 0.447
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala
[info] # Run progress: 16.94% complete, ETA 01:06:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2640983.625 ops/s
[info] # Warmup Iteration   2: 2891666.474 ops/s
[info] # Warmup Iteration   3: 2927258.558 ops/s
[info] Iteration   1: 2940426.013 ops/s
[info]                  ·gc.alloc.rate:            1001.235 MB/sec
[info]                  ·gc.alloc.rate.norm:       536.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.067 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 540.193 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 2951683.385 ops/s
[info]                  ·gc.alloc.rate:            1004.986 MB/sec
[info]                  ·gc.alloc.rate.norm:       536.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.945 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 538.112 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 2960496.424 ops/s
[info]                  ·gc.alloc.rate:                                  1008.106 MB/sec
[info]                  ·gc.alloc.rate.norm:                             536.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.063 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.034 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1013.066 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       538.637 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                2.125 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 2967225.629 ops/s
[info]                  ·gc.alloc.rate:                                  1010.439 MB/sec
[info]                  ·gc.alloc.rate.norm:                             536.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.046 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.024 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.103 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       541.657 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 2966802.574 ops/s
[info]                  ·gc.alloc.rate:                                  1010.231 MB/sec
[info]                  ·gc.alloc.rate.norm:                             536.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.075 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       541.753 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala":
[info]   2957326.805 ±(99.9%) 43705.587 ops/s [Average]
[info]   (min, avg, max) = (2940426.013, 2957326.805, 2967225.629), stdev = 11350.202
[info]   CI (99.9%): [2913621.218, 3001032.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1007.000 ±(99.9%) 15.011 MB/sec [Average]
[info]   (min, avg, max) = (1001.235, 1007.000, 1010.439), stdev = 3.898
[info]   CI (99.9%): [991.989, 1022.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   536.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (536.000, 536.000, 536.000), stdev = 0.001
[info]   CI (99.9%): [536.000, 536.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.022 ±(99.9%) 0.117 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.063), stdev = 0.030
[info]   CI (99.9%): [≈ 0, 0.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.012 ±(99.9%) 0.062 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.034), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1014.651 ±(99.9%) 23.513 MB/sec [Average]
[info]   (min, avg, max) = (1008.945, 1014.651, 1021.103), stdev = 6.106
[info]   CI (99.9%): [991.138, 1038.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   540.070 ±(99.9%) 6.459 B/op [Average]
[info]   (min, avg, max) = (538.112, 540.070, 541.753), stdev = 1.677
[info]   CI (99.9%): [533.611, 546.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.425 ±(99.9%) 3.659 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.425, 2.125), stdev = 0.950
[info]   CI (99.9%): [≈ 0, 4.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.400, 10.000), stdev = 3.782
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 17.20% complete, ETA 01:05:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1857527.158 ops/s
[info] # Warmup Iteration   2: 2214208.844 ops/s
[info] # Warmup Iteration   3: 2200341.848 ops/s
[info] Iteration   1: 2215782.136 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2178274.811 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2215770.119 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2215105.453 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2209189.529 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   2206824.409 ±(99.9%) 62373.170 ops/s [Average]
[info]   (min, avg, max) = (2178274.811, 2206824.409, 2215782.136), stdev = 16198.114
[info]   CI (99.9%): [2144451.239, 2269197.580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson
[info] # Run progress: 17.47% complete, ETA 01:05:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 139687.028 ops/s
[info] # Warmup Iteration   2: 251368.576 ops/s
[info] # Warmup Iteration   3: 250091.098 ops/s
[info] Iteration   1: 258732.909 ops/s
[info]                  ·gc.alloc.rate:                                  2115.403 MB/sec
[info]                  ·gc.alloc.rate.norm:                             12864.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.188 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.146 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.342 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       12419.709 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                4.052 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   2: 261201.958 ops/s
[info]                  ·gc.alloc.rate:                                  2134.535 MB/sec
[info]                  ·gc.alloc.rate.norm:                             12864.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.328 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       14357.347 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 256123.122 ops/s
[info]                  ·gc.alloc.rate:                                  2093.618 MB/sec
[info]                  ·gc.alloc.rate.norm:                             12864.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.025 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.507 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       12549.953 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 256123.478 ops/s
[info]                  ·gc.alloc.rate:                                  2093.164 MB/sec
[info]                  ·gc.alloc.rate.norm:                             12864.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.032 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.056 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       12549.904 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 255100.671 ops/s
[info]                  ·gc.alloc.rate:                                  2084.691 MB/sec
[info]                  ·gc.alloc.rate.norm:                             12864.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.936 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       12600.173 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson":
[info]   257456.428 ±(99.9%) 9580.765 ops/s [Average]
[info]   (min, avg, max) = (255100.671, 257456.428, 261201.958), stdev = 2488.094
[info]   CI (99.9%): [247875.663, 267037.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2104.282 ±(99.9%) 78.446 MB/sec [Average]
[info]   (min, avg, max) = (2084.691, 2104.282, 2134.535), stdev = 20.372
[info]   CI (99.9%): [2025.837, 2182.728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   12864.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (12864.002, 12864.002, 12864.002), stdev = 0.001
[info]   CI (99.9%): [12864.001, 12864.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.041 ±(99.9%) 0.318 MB/sec [Average]
[info]   (min, avg, max) = (0.002, 0.041, 0.188), stdev = 0.083
[info]   CI (99.9%): [≈ 0, 0.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.247 ±(99.9%) 1.936 B/op [Average]
[info]   (min, avg, max) = (0.013, 0.247, 1.146), stdev = 0.503
[info]   CI (99.9%): [≈ 0, 2.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   2110.234 ±(99.9%) 585.703 MB/sec [Average]
[info]   (min, avg, max) = (2041.936, 2110.234, 2382.328), stdev = 152.105
[info]   CI (99.9%): [1524.530, 2695.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   12895.417 ±(99.9%) 3157.428 B/op [Average]
[info]   (min, avg, max) = (12419.709, 12895.417, 14357.347), stdev = 819.974
[info]   CI (99.9%): [9737.989, 16052.846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   0.810 ±(99.9%) 6.978 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.810, 4.052), stdev = 1.812
[info]   CI (99.9%): [≈ 0, 7.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 8.000), stdev = 1.304
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce
[info] # Run progress: 17.74% complete, ETA 01:05:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18898.843 ops/s
[info] # Warmup Iteration   2: 25918.847 ops/s
[info] # Warmup Iteration   3: 25317.013 ops/s
[info] Iteration   1: 25591.797 ops/s
[info]                  ·gc.alloc.rate:                   1498.917 MB/sec
[info]                  ·gc.alloc.rate.norm:              92192.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1347.996 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        82909.517 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 204.816 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 25547.847 ops/s
[info]                  ·gc.alloc.rate:                                  1496.176 MB/sec
[info]                  ·gc.alloc.rate.norm:                             92192.020 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.140 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 8.642 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.591 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       104849.393 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 25747.168 ops/s
[info]                  ·gc.alloc.rate:                                  1508.041 MB/sec
[info]                  ·gc.alloc.rate.norm:                             92192.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.011 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.670 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.412 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       83228.073 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 25927.708 ops/s
[info]                  ·gc.alloc.rate:                                  1518.543 MB/sec
[info]                  ·gc.alloc.rate.norm:                             92192.017 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.010 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.621 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.722 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       103312.960 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 26276.797 ops/s
[info]                  ·gc.alloc.rate:                                  1539.053 MB/sec
[info]                  ·gc.alloc.rate.norm:                             92192.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.010 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.604 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.390 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       81549.705 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce":
[info]   25818.263 ±(99.9%) 1141.795 ops/s [Average]
[info]   (min, avg, max) = (25547.847, 25818.263, 26276.797), stdev = 296.521
[info]   CI (99.9%): [24676.468, 26960.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate":
[info]   1512.146 ±(99.9%) 67.023 MB/sec [Average]
[info]   (min, avg, max) = (1496.176, 1512.146, 1539.053), stdev = 17.406
[info]   CI (99.9%): [1445.123, 1579.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   92192.017 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (92192.016, 92192.017, 92192.020), stdev = 0.002
[info]   CI (99.9%): [92192.010, 92192.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.034 ±(99.9%) 0.229 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.034, 0.140), stdev = 0.059
[info]   CI (99.9%): [≈ 0, 0.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.107 ±(99.9%) 14.107 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.107, 8.642), stdev = 3.663
[info]   CI (99.9%): [≈ 0, 16.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1494.822 ±(99.9%) 727.357 MB/sec [Average]
[info]   (min, avg, max) = (1347.996, 1494.822, 1701.722), stdev = 188.892
[info]   CI (99.9%): [767.465, 2222.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   91169.930 ±(99.9%) 45497.811 B/op [Average]
[info]   (min, avg, max) = (81549.705, 91169.930, 104849.393), stdev = 11815.637
[info]   CI (99.9%): [45672.119, 136667.741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   40.963 ±(99.9%) 352.706 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 40.963, 204.816), stdev = 91.597
[info]   CI (99.9%): [≈ 0, 393.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.600, 13.000), stdev = 4.037
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava
[info] # Run progress: 18.01% complete, ETA 01:05:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 640.660 ops/s
[info] # Warmup Iteration   2: 91350.130 ops/s
[info] # Warmup Iteration   3: 99600.969 ops/s
[info] Iteration   1: 99197.256 ops/s
[info]                  ·gc.alloc.rate:            893.652 MB/sec
[info]                  ·gc.alloc.rate.norm:       14176.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.596 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10590.075 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 99773.794 ops/s
[info]                  ·gc.alloc.rate:            898.525 MB/sec
[info]                  ·gc.alloc.rate.norm:       14176.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1001.043 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 15793.421 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   3: 99790.413 ops/s
[info]                  ·gc.alloc.rate:                   899.051 MB/sec
[info]                  ·gc.alloc.rate.norm:              14176.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1000.116 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        15769.561 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      1.333 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 21.012 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   4: 100487.893 ops/s
[info]                  ·gc.alloc.rate:                   904.995 MB/sec
[info]                  ·gc.alloc.rate.norm:              14176.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1005.084 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        15743.820 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      6.661 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 104.333 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   5: 104118.674 ops/s
[info]                  ·gc.alloc.rate:                                  937.765 MB/sec
[info]                  ·gc.alloc.rate.norm:                             14176.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.517 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 7.818 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.734 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       10290.522 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava":
[info]   100673.606 ±(99.9%) 7622.010 ops/s [Average]
[info]   (min, avg, max) = (99197.256, 100673.606, 104118.674), stdev = 1979.412
[info]   CI (99.9%): [93051.596, 108295.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   906.798 ±(99.9%) 68.437 MB/sec [Average]
[info]   (min, avg, max) = (893.652, 906.798, 937.765), stdev = 17.773
[info]   CI (99.9%): [838.361, 975.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   14176.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (14176.004, 14176.004, 14176.004), stdev = 0.001
[info]   CI (99.9%): [14176.004, 14176.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.103 ±(99.9%) 0.891 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.103, 0.517), stdev = 0.231
[info]   CI (99.9%): [≈ 0, 0.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.564 ±(99.9%) 13.463 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.564, 7.818), stdev = 3.496
[info]   CI (99.9%): [≈ 0, 15.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   870.914 ±(99.9%) 691.871 MB/sec [Average]
[info]   (min, avg, max) = (667.596, 870.914, 1005.084), stdev = 179.677
[info]   CI (99.9%): [179.044, 1562.785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   13637.480 ±(99.9%) 11246.142 B/op [Average]
[info]   (min, avg, max) = (10290.522, 13637.480, 15793.421), stdev = 2920.587
[info]   CI (99.9%): [2391.338, 24883.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   1.599 ±(99.9%) 11.120 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.599, 6.661), stdev = 2.888
[info]   CI (99.9%): [≈ 0, 12.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   25.069 ±(99.9%) 174.181 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 25.069, 104.333), stdev = 45.234
[info]   CI (99.9%): [≈ 0, 199.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.time":
[info]   56.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 11.200, 15.000), stdev = 4.970
[info]   CI (99.9%): [56.000, 56.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala
[info] # Run progress: 18.28% complete, ETA 01:05:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 36035.524 ops/s
[info] # Warmup Iteration   2: 58903.073 ops/s
[info] # Warmup Iteration   3: 58866.797 ops/s
[info] Iteration   1: 59084.918 ops/s
[info]                  ·gc.alloc.rate:            976.230 MB/sec
[info]                  ·gc.alloc.rate.norm:       26008.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.985 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 26880.650 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 58176.247 ops/s
[info]                  ·gc.alloc.rate:            961.228 MB/sec
[info]                  ·gc.alloc.rate.norm:       26008.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.035 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 27301.504 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   3: 57405.817 ops/s
[info]                  ·gc.alloc.rate:                                  948.532 MB/sec
[info]                  ·gc.alloc.rate.norm:                             26008.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.118 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.226 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1013.056 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       27777.211 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                109.575 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   4: 59409.734 ops/s
[info]                  ·gc.alloc.rate:                                  981.761 MB/sec
[info]                  ·gc.alloc.rate.norm:                             26008.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.057 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.521 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.177 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       27052.170 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 59978.463 ops/s
[info]                  ·gc.alloc.rate:            991.365 MB/sec
[info]                  ·gc.alloc.rate.norm:       26008.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.946 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 17864.317 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala":
[info]   58811.036 ±(99.9%) 3933.473 ops/s [Average]
[info]   (min, avg, max) = (57405.817, 58811.036, 59978.463), stdev = 1021.510
[info]   CI (99.9%): [54877.563, 62744.509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   971.823 ±(99.9%) 65.427 MB/sec [Average]
[info]   (min, avg, max) = (948.532, 971.823, 991.365), stdev = 16.991
[info]   CI (99.9%): [906.396, 1037.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   26008.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (26008.007, 26008.007, 26008.007), stdev = 0.001
[info]   CI (99.9%): [26008.006, 26008.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.035 ±(99.9%) 0.202 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.035, 0.118), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.949 ±(99.9%) 5.517 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.949, 3.226), stdev = 1.433
[info]   CI (99.9%): [≈ 0, 6.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   946.640 ±(99.9%) 572.245 MB/sec [Average]
[info]   (min, avg, max) = (680.946, 946.640, 1021.177), stdev = 148.610
[info]   CI (99.9%): [374.395, 1518.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   25375.170 ±(99.9%) 16219.883 B/op [Average]
[info]   (min, avg, max) = (17864.317, 25375.170, 27777.211), stdev = 4212.252
[info]   CI (99.9%): [9155.288, 41595.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   21.915 ±(99.9%) 188.694 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 21.915, 109.575), stdev = 49.003
[info]   CI (99.9%): [≈ 0, 210.609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.000, 13.000), stdev = 5.292
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala
[info] # Run progress: 18.55% complete, ETA 01:04:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 71559.212 ops/s
[info] # Warmup Iteration   2: 82042.048 ops/s
[info] # Warmup Iteration   3: 82517.344 ops/s
[info] Iteration   1: 82313.092 ops/s
[info]                  ·gc.alloc.rate:            530.411 MB/sec
[info]                  ·gc.alloc.rate.norm:       10144.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.995 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12890.031 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 80810.593 ops/s
[info]                  ·gc.alloc.rate:            520.853 MB/sec
[info]                  ·gc.alloc.rate.norm:       10144.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.067 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6564.628 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 82242.531 ops/s
[info]                  ·gc.alloc.rate:            530.092 MB/sec
[info]                  ·gc.alloc.rate.norm:       10144.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.172 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12901.158 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 82763.510 ops/s
[info]                  ·gc.alloc.rate:            533.381 MB/sec
[info]                  ·gc.alloc.rate.norm:       10144.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.030 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6409.745 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 82342.106 ops/s
[info]                  ·gc.alloc.rate:            530.661 MB/sec
[info]                  ·gc.alloc.rate.norm:       10144.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.018 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12884.397 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala":
[info]   82094.366 ±(99.9%) 2873.182 ops/s [Average]
[info]   (min, avg, max) = (80810.593, 82094.366, 82763.510), stdev = 746.156
[info]   CI (99.9%): [79221.185, 84967.548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   529.080 ±(99.9%) 18.414 MB/sec [Average]
[info]   (min, avg, max) = (520.853, 529.080, 533.381), stdev = 4.782
[info]   CI (99.9%): [510.666, 547.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   10144.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10144.005, 10144.005, 10144.005), stdev = 0.001
[info]   CI (99.9%): [10144.004, 10144.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   539.256 ±(99.9%) 710.790 MB/sec [Average]
[info]   (min, avg, max) = (337.030, 539.256, 674.172), stdev = 184.590
[info]   CI (99.9%): [≈ 0, 1250.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   10329.992 ±(99.9%) 13509.668 B/op [Average]
[info]   (min, avg, max) = (6409.745, 10329.992, 12901.158), stdev = 3508.418
[info]   CI (99.9%): [≈ 0, 23839.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 6.000), stdev = 1.643
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson
[info] # Run progress: 18.82% complete, ETA 01:04:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16006.842 ops/s
[info] # Warmup Iteration   2: 32641.531 ops/s
[info] # Warmup Iteration   3: 32253.147 ops/s
[info] Iteration   1: 32412.161 ops/s
[info]                  ·gc.alloc.rate:                                  1694.131 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82248.017 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.030 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.435 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1689.550 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       82025.625 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                226.411 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        15.000 ms
[info] Iteration   2: 33956.275 ops/s
[info]                  ·gc.alloc.rate:                                  1774.030 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82248.012 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.018 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.833 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.505 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       78885.569 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 33541.193 ops/s
[info]                  ·gc.alloc.rate:                                  1752.734 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82248.012 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.293 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.190 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       95830.870 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 33952.782 ops/s
[info]                  ·gc.alloc.rate:                                  1773.980 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82248.012 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.304 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.607 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       78892.537 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 33887.970 ops/s
[info]                  ·gc.alloc.rate:                                  1770.681 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82248.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.009 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.426 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.649 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       79041.501 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson":
[info]   33550.076 ±(99.9%) 2536.951 ops/s [Average]
[info]   (min, avg, max) = (32412.161, 33550.076, 33956.275), stdev = 658.838
[info]   CI (99.9%): [31013.125, 36087.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1753.111 ±(99.9%) 131.440 MB/sec [Average]
[info]   (min, avg, max) = (1694.131, 1753.111, 1774.030), stdev = 34.134
[info]   CI (99.9%): [1621.672, 1884.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   82248.013 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (82248.012, 82248.013, 82248.017), stdev = 0.002
[info]   CI (99.9%): [82248.005, 82248.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.014 ±(99.9%) 0.038 MB/sec [Average]
[info]   (min, avg, max) = (0.006, 0.014, 0.030), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.658 ±(99.9%) 1.873 B/op [Average]
[info]   (min, avg, max) = (0.293, 0.658, 1.435), stdev = 0.486
[info]   CI (99.9%): [≈ 0, 2.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1767.300 ±(99.9%) 592.060 MB/sec [Average]
[info]   (min, avg, max) = (1689.550, 1767.300, 2042.190), stdev = 153.756
[info]   CI (99.9%): [1175.240, 2359.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   82935.220 ±(99.9%) 28232.675 B/op [Average]
[info]   (min, avg, max) = (78885.569, 82935.220, 95830.870), stdev = 7331.936
[info]   CI (99.9%): [54702.545, 111167.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 8.031 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.664), stdev = 2.086
[info]   CI (99.9%): [≈ 0, 8.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   45.282 ±(99.9%) 389.894 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 45.282, 226.411), stdev = 101.254
[info]   CI (99.9%): [≈ 0, 435.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.600, 15.000), stdev = 4.722
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce
[info] # Run progress: 19.09% complete, ETA 01:04:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26805.060 ops/s
[info] # Warmup Iteration   2: 39635.771 ops/s
[info] # Warmup Iteration   3: 38331.661 ops/s
[info] Iteration   1: 38552.680 ops/s
[info]                  ·gc.alloc.rate:            519.371 MB/sec
[info]                  ·gc.alloc.rate.norm:       21206.949 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.995 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13760.198 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 39632.775 ops/s
[info]                  ·gc.alloc.rate:            533.975 MB/sec
[info]                  ·gc.alloc.rate.norm:       21208.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.996 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 26769.227 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 38887.000 ops/s
[info]                  ·gc.alloc.rate:            523.936 MB/sec
[info]                  ·gc.alloc.rate.norm:       21208.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.021 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13642.030 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 39394.672 ops/s
[info]                  ·gc.alloc.rate:            530.831 MB/sec
[info]                  ·gc.alloc.rate.norm:       21208.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.074 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 26930.917 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 39574.635 ops/s
[info]                  ·gc.alloc.rate:            533.175 MB/sec
[info]                  ·gc.alloc.rate.norm:       21208.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.971 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 26808.451 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce":
[info]   39208.352 ±(99.9%) 1808.354 ops/s [Average]
[info]   (min, avg, max) = (38552.680, 39208.352, 39632.775), stdev = 469.624
[info]   CI (99.9%): [37399.998, 41016.706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate":
[info]   528.258 ±(99.9%) 24.441 MB/sec [Average]
[info]   (min, avg, max) = (519.371, 528.258, 533.975), stdev = 6.347
[info]   CI (99.9%): [503.817, 552.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   21207.798 ±(99.9%) 1.827 B/op [Average]
[info]   (min, avg, max) = (21206.949, 21207.798, 21208.011), stdev = 0.475
[info]   CI (99.9%): [21205.971, 21209.626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   539.211 ±(99.9%) 710.773 MB/sec [Average]
[info]   (min, avg, max) = (336.995, 539.211, 674.074), stdev = 184.585
[info]   CI (99.9%): [≈ 0, 1249.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   21582.164 ±(99.9%) 27704.423 B/op [Average]
[info]   (min, avg, max) = (13642.030, 21582.164, 26930.917), stdev = 7194.751
[info]   CI (99.9%): [≈ 0, 49286.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 7.000), stdev = 1.949
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala
[info] # Run progress: 19.35% complete, ETA 01:04:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26464.178 ops/s
[info] # Warmup Iteration   2: 40982.517 ops/s
[info] # Warmup Iteration   3: 41818.274 ops/s
[info] Iteration   1: 42143.414 ops/s
[info]                  ·gc.alloc.rate:            380.580 MB/sec
[info]                  ·gc.alloc.rate.norm:       14216.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.319 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12562.712 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 42166.848 ops/s
[info]                  ·gc.alloc.rate:                   380.811 MB/sec
[info]                  ·gc.alloc.rate.norm:              14216.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:             335.658 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        12530.404 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 24.862 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 42093.133 ops/s
[info]                  ·gc.alloc.rate:            380.137 MB/sec
[info]                  ·gc.alloc.rate.norm:       14216.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.343 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12578.229 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 42134.728 ops/s
[info]                  ·gc.alloc.rate:                   380.530 MB/sec
[info]                  ·gc.alloc.rate.norm:              14216.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:             335.665 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        12539.918 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 24.881 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 42146.150 ops/s
[info]                  ·gc.alloc.rate:            380.704 MB/sec
[info]                  ·gc.alloc.rate.norm:       14216.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.405 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12561.818 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala":
[info]   42136.855 ±(99.9%) 104.487 ops/s [Average]
[info]   (min, avg, max) = (42093.133, 42136.855, 42166.848), stdev = 27.135
[info]   CI (99.9%): [42032.368, 42241.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   380.553 ±(99.9%) 0.988 MB/sec [Average]
[info]   (min, avg, max) = (380.137, 380.553, 380.811), stdev = 0.257
[info]   CI (99.9%): [379.564, 381.541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   14216.010 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (14216.010, 14216.010, 14216.010), stdev = 0.001
[info]   CI (99.9%): [14216.009, 14216.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   336.078 ±(99.9%) 1.470 MB/sec [Average]
[info]   (min, avg, max) = (335.658, 336.078, 336.405), stdev = 0.382
[info]   CI (99.9%): [334.609, 337.548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   12554.616 ±(99.9%) 74.001 B/op [Average]
[info]   (min, avg, max) = (12530.404, 12554.616, 12578.229), stdev = 19.218
[info]   CI (99.9%): [12480.616, 12628.617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   9.949 ±(99.9%) 52.456 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.949, 24.881), stdev = 13.623
[info]   CI (99.9%): [≈ 0, 62.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala
[info] # Run progress: 19.62% complete, ETA 01:04:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37494.291 ops/s
[info] # Warmup Iteration   2: 45514.442 ops/s
[info] # Warmup Iteration   3: 45211.721 ops/s
[info] Iteration   1: 45681.655 ops/s
[info]                  ·gc.alloc.rate:            401.404 MB/sec
[info]                  ·gc.alloc.rate.norm:       13832.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.338 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11589.899 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 46115.015 ops/s
[info]                  ·gc.alloc.rate:            405.387 MB/sec
[info]                  ·gc.alloc.rate.norm:       13832.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.479 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11480.842 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 45551.629 ops/s
[info]                  ·gc.alloc.rate:            400.282 MB/sec
[info]                  ·gc.alloc.rate.norm:       13832.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.680 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23244.919 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 46050.541 ops/s
[info]                  ·gc.alloc.rate:            404.667 MB/sec
[info]                  ·gc.alloc.rate.norm:       13832.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.356 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11497.045 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 46135.077 ops/s
[info]                  ·gc.alloc.rate:            405.402 MB/sec
[info]                  ·gc.alloc.rate.norm:       13832.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.360 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11476.363 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala":
[info]   45906.783 ±(99.9%) 1042.100 ops/s [Average]
[info]   (min, avg, max) = (45551.629, 45906.783, 46135.077), stdev = 270.630
[info]   CI (99.9%): [44864.684, 46948.883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   403.428 ±(99.9%) 9.286 MB/sec [Average]
[info]   (min, avg, max) = (400.282, 403.428, 405.402), stdev = 2.412
[info]   CI (99.9%): [394.142, 412.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   13832.009 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (13832.009, 13832.009, 13832.010), stdev = 0.001
[info]   CI (99.9%): [13832.008, 13832.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   403.643 ±(99.9%) 579.123 MB/sec [Average]
[info]   (min, avg, max) = (336.338, 403.643, 672.680), stdev = 150.396
[info]   CI (99.9%): [≈ 0, 982.766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   13857.814 ±(99.9%) 20207.235 B/op [Average]
[info]   (min, avg, max) = (11476.363, 13857.814, 23244.919), stdev = 5247.755
[info]   CI (99.9%): [≈ 0, 34065.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 6.000), stdev = 1.304
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 19.89% complete, ETA 01:03:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37004.207 ops/s
[info] # Warmup Iteration   2: 45808.405 ops/s
[info] # Warmup Iteration   3: 45530.879 ops/s
[info] Iteration   1: 46259.345 ops/s
[info]                  ·gc.alloc.rate:            353.612 MB/sec
[info]                  ·gc.alloc.rate.norm:       12032.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.727 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 22890.219 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 46380.069 ops/s
[info]                  ·gc.alloc.rate:            354.495 MB/sec
[info]                  ·gc.alloc.rate.norm:       12032.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.324 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11415.256 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 46366.043 ops/s
[info]                  ·gc.alloc.rate:            354.425 MB/sec
[info]                  ·gc.alloc.rate.norm:       12032.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.359 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11418.702 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 46394.642 ops/s
[info]                  ·gc.alloc.rate:            354.640 MB/sec
[info]                  ·gc.alloc.rate.norm:       12032.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.360 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11411.812 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 46160.341 ops/s
[info]                  ·gc.alloc.rate:            352.845 MB/sec
[info]                  ·gc.alloc.rate.norm:       12032.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.354 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11469.652 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc":
[info]   46312.088 ±(99.9%) 385.819 ops/s [Average]
[info]   (min, avg, max) = (46160.341, 46312.088, 46394.642), stdev = 100.196
[info]   CI (99.9%): [45926.269, 46697.906] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   354.003 ±(99.9%) 2.933 MB/sec [Average]
[info]   (min, avg, max) = (352.845, 354.003, 354.640), stdev = 0.762
[info]   CI (99.9%): [351.071, 356.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   12032.009 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (12032.009, 12032.009, 12032.009), stdev = 0.001
[info]   CI (99.9%): [12032.009, 12032.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen":
[info]   403.625 ±(99.9%) 579.262 MB/sec [Average]
[info]   (min, avg, max) = (336.324, 403.625, 672.727), stdev = 150.433
[info]   CI (99.9%): [≈ 0, 982.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   13721.128 ±(99.9%) 19737.370 B/op [Average]
[info]   (min, avg, max) = (11411.812, 13721.128, 22890.219), stdev = 5125.732
[info]   CI (99.9%): [≈ 0, 33458.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 6.000), stdev = 1.304
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce
[info] # Run progress: 20.16% complete, ETA 01:03:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14904.539 ops/s
[info] # Warmup Iteration   2: 18738.178 ops/s
[info] # Warmup Iteration   3: 19487.478 ops/s
[info] Iteration   1: 19922.474 ops/s
[info]                  ·gc.alloc.rate:            747.440 MB/sec
[info]                  ·gc.alloc.rate.norm:       59040.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.354 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 79886.493 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 20181.455 ops/s
[info]                  ·gc.alloc.rate:            756.910 MB/sec
[info]                  ·gc.alloc.rate.norm:       59040.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.017 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 52574.262 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 19869.010 ops/s
[info]                  ·gc.alloc.rate:            745.428 MB/sec
[info]                  ·gc.alloc.rate.norm:       59040.026 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.214 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 53399.704 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 20036.753 ops/s
[info]                  ·gc.alloc.rate:            751.933 MB/sec
[info]                  ·gc.alloc.rate.norm:       59040.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.397 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 52952.042 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 19855.284 ops/s
[info]                  ·gc.alloc.rate:                                  744.674 MB/sec
[info]                  ·gc.alloc.rate.norm:                             59040.022 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.032 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.517 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1014.289 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       80415.995 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                264.005 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce":
[info]   19972.995 ±(99.9%) 526.363 ops/s [Average]
[info]   (min, avg, max) = (19855.284, 19972.995, 20181.455), stdev = 136.695
[info]   CI (99.9%): [19446.633, 20499.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate":
[info]   749.277 ±(99.9%) 19.701 MB/sec [Average]
[info]   (min, avg, max) = (744.674, 749.277, 756.910), stdev = 5.116
[info]   CI (99.9%): [729.577, 768.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   59040.022 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (59040.020, 59040.022, 59040.026), stdev = 0.002
[info]   CI (99.9%): [59040.015, 59040.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.006 ±(99.9%) 0.055 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.032), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.503 ±(99.9%) 4.334 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.503, 2.517), stdev = 1.126
[info]   CI (99.9%): [≈ 0, 4.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   809.655 ±(99.9%) 714.173 MB/sec [Average]
[info]   (min, avg, max) = (674.017, 809.655, 1014.289), stdev = 185.469
[info]   CI (99.9%): [95.481, 1523.828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   63845.699 ±(99.9%) 57331.861 B/op [Average]
[info]   (min, avg, max) = (52574.262, 63845.699, 80415.995), stdev = 14888.902
[info]   CI (99.9%): [6513.838, 121177.561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   52.801 ±(99.9%) 454.633 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 52.801, 264.005), stdev = 118.067
[info]   CI (99.9%): [≈ 0, 507.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.600, 10.000), stdev = 1.517
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala
[info] # Run progress: 20.43% complete, ETA 01:03:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12760.930 ops/s
[info] # Warmup Iteration   2: 19344.092 ops/s
[info] # Warmup Iteration   3: 19217.294 ops/s
[info] Iteration   1: 18907.646 ops/s
[info]                  ·gc.alloc.rate:            536.435 MB/sec
[info]                  ·gc.alloc.rate.norm:       44662.986 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.315 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 28001.210 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 18888.755 ops/s
[info]                  ·gc.alloc.rate:                   536.157 MB/sec
[info]                  ·gc.alloc.rate.norm:              44680.023 B/op
[info]                  ·gc.churn.G1_Old_Gen:             671.999 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        56000.274 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 55.501 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 18943.895 ops/s
[info]                  ·gc.alloc.rate:                   537.912 MB/sec
[info]                  ·gc.alloc.rate.norm:              44680.027 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.277 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        55840.671 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 55.343 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 19641.390 ops/s
[info]                  ·gc.alloc.rate:            557.644 MB/sec
[info]                  ·gc.alloc.rate.norm:       44678.356 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.434 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 26954.995 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 19251.295 ops/s
[info]                  ·gc.alloc.rate:            546.463 MB/sec
[info]                  ·gc.alloc.rate.norm:       44680.023 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.705 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 55001.909 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala":
[info]   19126.596 ±(99.9%) 1245.447 ops/s [Average]
[info]   (min, avg, max) = (18888.755, 19126.596, 19641.390), stdev = 323.439
[info]   CI (99.9%): [17881.150, 20372.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   542.922 ±(99.9%) 35.617 MB/sec [Average]
[info]   (min, avg, max) = (536.157, 542.922, 557.644), stdev = 9.250
[info]   CI (99.9%): [507.305, 578.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   44676.283 ±(99.9%) 28.758 B/op [Average]
[info]   (min, avg, max) = (44662.986, 44676.283, 44680.027), stdev = 7.468
[info]   CI (99.9%): [44647.525, 44705.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   537.946 ±(99.9%) 708.554 MB/sec [Average]
[info]   (min, avg, max) = (336.315, 537.946, 672.705), stdev = 184.009
[info]   CI (99.9%): [≈ 0, 1246.500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   44359.812 ±(99.9%) 59376.637 B/op [Average]
[info]   (min, avg, max) = (26954.995, 44359.812, 56000.274), stdev = 15419.924
[info]   CI (99.9%): [≈ 0, 103736.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   22.169 ±(99.9%) 116.889 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 22.169, 55.501), stdev = 30.356
[info]   CI (99.9%): [≈ 0, 139.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.600, 9.000), stdev = 2.408
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala
[info] # Run progress: 20.70% complete, ETA 01:03:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 72889.911 ops/s
[info] # Warmup Iteration   2: 74636.607 ops/s
[info] # Warmup Iteration   3: 74204.953 ops/s
[info] Iteration   1: 75753.906 ops/s
[info]                  ·gc.alloc.rate:                   197.119 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:             335.678 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        6975.191 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      1.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 41.519 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 76884.329 ops/s
[info]                  ·gc.alloc.rate:      200.055 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 75667.536 ops/s
[info]                  ·gc.alloc.rate:            196.897 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.685 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7024.776 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 76533.788 ops/s
[info]                  ·gc.alloc.rate:            199.191 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.763 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6945.482 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 76726.608 ops/s
[info]                  ·gc.alloc.rate:      199.653 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala":
[info]   76313.234 ±(99.9%) 2174.374 ops/s [Average]
[info]   (min, avg, max) = (75667.536, 76313.234, 76884.329), stdev = 564.678
[info]   CI (99.9%): [74138.860, 78487.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   198.583 ±(99.9%) 5.669 MB/sec [Average]
[info]   (min, avg, max) = (196.897, 198.583, 200.055), stdev = 1.472
[info]   CI (99.9%): [192.915, 204.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.005, 4096.006, 4096.006), stdev = 0.001
[info]   CI (99.9%): [4096.005, 4096.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   202.225 ±(99.9%) 710.858 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 202.225, 337.763), stdev = 184.607
[info]   CI (99.9%): [≈ 0, 913.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   4189.090 ±(99.9%) 14725.645 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4189.090, 7024.776), stdev = 3824.203
[info]   CI (99.9%): [≈ 0, 18914.735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.400 ±(99.9%) 3.441 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.998), stdev = 0.894
[info]   CI (99.9%): [≈ 0, 3.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   8.304 ±(99.9%) 71.498 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.304, 41.519), stdev = 18.568
[info]   CI (99.9%): [≈ 0, 79.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson
[info] # Run progress: 20.97% complete, ETA 01:03:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9106.954 ops/s
[info] # Warmup Iteration   2: 16115.402 ops/s
[info] # Warmup Iteration   3: 16175.398 ops/s
[info] Iteration   1: 16224.174 ops/s
[info]                  ·gc.alloc.rate:            1051.781 MB/sec
[info]                  ·gc.alloc.rate.norm:       102048.025 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.009 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 97898.111 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 16126.131 ops/s
[info]                  ·gc.alloc.rate:            1045.922 MB/sec
[info]                  ·gc.alloc.rate.norm:       102048.748 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.478 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 98492.941 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 15853.242 ops/s
[info]                  ·gc.alloc.rate:                                  1027.817 MB/sec
[info]                  ·gc.alloc.rate.norm:                             102048.028 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.031 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.074 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.084 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       100982.313 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                396.787 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 15883.999 ops/s
[info]                  ·gc.alloc.rate:                                  1029.784 MB/sec
[info]                  ·gc.alloc.rate.norm:                             102048.032 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.841 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.037 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       101181.281 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 16287.416 ops/s
[info]                  ·gc.alloc.rate:                                  1055.979 MB/sec
[info]                  ·gc.alloc.rate.norm:                             102048.025 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁵ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.108 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       98678.147 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson":
[info]   16074.992 ±(99.9%) 759.577 ops/s [Average]
[info]   (min, avg, max) = (15853.242, 16074.992, 16287.416), stdev = 197.260
[info]   CI (99.9%): [15315.415, 16834.570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1042.257 ±(99.9%) 49.332 MB/sec [Average]
[info]   (min, avg, max) = (1027.817, 1042.257, 1055.979), stdev = 12.811
[info]   CI (99.9%): [992.925, 1091.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   102048.172 ±(99.9%) 1.242 B/op [Average]
[info]   (min, avg, max) = (102048.025, 102048.172, 102048.748), stdev = 0.322
[info]   CI (99.9%): [102046.930, 102049.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.008 ±(99.9%) 0.052 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.031), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.784 ±(99.9%) 5.126 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.784, 3.074), stdev = 1.331
[info]   CI (99.9%): [≈ 0, 5.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1015.543 ±(99.9%) 23.024 MB/sec [Average]
[info]   (min, avg, max) = (1009.009, 1015.543, 1021.108), stdev = 5.979
[info]   CI (99.9%): [992.519, 1038.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   99446.558 ±(99.9%) 5860.491 B/op [Average]
[info]   (min, avg, max) = (97898.111, 99446.558, 101181.281), stdev = 1521.951
[info]   CI (99.9%): [93586.067, 105307.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   79.357 ±(99.9%) 683.291 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 79.357, 396.787), stdev = 177.449
[info]   CI (99.9%): [≈ 0, 762.649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.400, 13.000), stdev = 5.030
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce
[info] # Run progress: 21.24% complete, ETA 01:02:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 45347.109 ops/s
[info] # Warmup Iteration   2: 61907.793 ops/s
[info] # Warmup Iteration   3: 61097.182 ops/s
[info] Iteration   1: 60945.348 ops/s
[info]                  ·gc.alloc.rate:            997.147 MB/sec
[info]                  ·gc.alloc.rate.norm:       25752.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.122 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 26112.907 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 61535.139 ops/s
[info]                  ·gc.alloc.rate:            1006.848 MB/sec
[info]                  ·gc.alloc.rate.norm:       25752.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.204 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 25863.421 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 62329.008 ops/s
[info]                  ·gc.alloc.rate:                                  1019.657 MB/sec
[info]                  ·gc.alloc.rate.norm:                             25752.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.048 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.222 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1014.290 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       25616.458 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                84.099 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   4: 61879.897 ops/s
[info]                  ·gc.alloc.rate:                                  1012.635 MB/sec
[info]                  ·gc.alloc.rate.norm:                             25752.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.041 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.034 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.341 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       25973.388 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 61634.361 ops/s
[info]                  ·gc.alloc.rate:                                  1008.391 MB/sec
[info]                  ·gc.alloc.rate.norm:                             25752.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.118 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       26077.041 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce":
[info]   61664.751 ±(99.9%) 1947.136 ops/s [Average]
[info]   (min, avg, max) = (60945.348, 61664.751, 62329.008), stdev = 505.665
[info]   CI (99.9%): [59717.615, 63611.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1008.936 ±(99.9%) 31.768 MB/sec [Average]
[info]   (min, avg, max) = (997.147, 1008.936, 1019.657), stdev = 8.250
[info]   CI (99.9%): [977.168, 1040.704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   25752.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (25752.007, 25752.007, 25752.007), stdev = 0.001
[info]   CI (99.9%): [25752.006, 25752.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.018 ±(99.9%) 0.094 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.048), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.455 ±(99.9%) 2.380 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.455, 1.222), stdev = 0.618
[info]   CI (99.9%): [≈ 0, 2.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1015.815 ±(99.9%) 19.660 MB/sec [Average]
[info]   (min, avg, max) = (1011.122, 1015.815, 1021.341), stdev = 5.106
[info]   CI (99.9%): [996.155, 1035.475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   25928.643 ±(99.9%) 769.383 B/op [Average]
[info]   (min, avg, max) = (25616.458, 25928.643, 26112.907), stdev = 199.806
[info]   CI (99.9%): [25159.260, 26698.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   16.820 ±(99.9%) 144.823 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16.820, 84.099), stdev = 37.610
[info]   CI (99.9%): [≈ 0, 161.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.400, 13.000), stdev = 4.393
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala
[info] # Run progress: 21.51% complete, ETA 01:02:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 52404.816 ops/s
[info] # Warmup Iteration   2: 84096.917 ops/s
[info] # Warmup Iteration   3: 84554.723 ops/s
[info] Iteration   1: 84715.044 ops/s
[info]                  ·gc.alloc.rate:                   1004.733 MB/sec
[info]                  ·gc.alloc.rate.norm:              18664.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.636 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        18736.505 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 12.375 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 87438.827 ops/s
[info]                  ·gc.alloc.rate:            1037.186 MB/sec
[info]                  ·gc.alloc.rate.norm:       18664.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1344.165 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 24188.052 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   3: 88334.009 ops/s
[info]                  ·gc.alloc.rate:                                  1047.333 MB/sec
[info]                  ·gc.alloc.rate.norm:                             18664.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.044 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.777 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.015 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       18123.712 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                71.213 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 89030.392 ops/s
[info]                  ·gc.alloc.rate:                                  1055.803 MB/sec
[info]                  ·gc.alloc.rate.norm:                             18664.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.037 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.656 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.199 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       18052.299 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 88849.719 ops/s
[info]                  ·gc.alloc.rate:                                  1053.514 MB/sec
[info]                  ·gc.alloc.rate.norm:                             18664.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.023 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.026 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       18088.458 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala":
[info]   87673.598 ±(99.9%) 6798.445 ops/s [Average]
[info]   (min, avg, max) = (84715.044, 87673.598, 89030.392), stdev = 1765.535
[info]   CI (99.9%): [80875.153, 94472.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1039.714 ±(99.9%) 80.252 MB/sec [Average]
[info]   (min, avg, max) = (1004.733, 1039.714, 1055.803), stdev = 20.841
[info]   CI (99.9%): [959.462, 1119.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   18664.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (18664.005, 18664.005, 18664.005), stdev = 0.001
[info]   CI (99.9%): [18664.004, 18664.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.016 ±(99.9%) 0.085 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.044), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.291 ±(99.9%) 1.504 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.291, 0.777), stdev = 0.391
[info]   CI (99.9%): [≈ 0, 1.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1082.408 ±(99.9%) 563.793 MB/sec [Average]
[info]   (min, avg, max) = (1008.636, 1082.408, 1344.165), stdev = 146.415
[info]   CI (99.9%): [518.615, 1646.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   19437.805 ±(99.9%) 10282.710 B/op [Average]
[info]   (min, avg, max) = (18052.299, 19437.805, 24188.052), stdev = 2670.387
[info]   CI (99.9%): [9155.095, 29720.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   16.718 ±(99.9%) 119.106 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16.718, 71.213), stdev = 30.932
[info]   CI (99.9%): [≈ 0, 135.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.400, 17.000), stdev = 6.309
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala
[info] # Run progress: 21.77% complete, ETA 01:02:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 229745.802 ops/s
[info] # Warmup Iteration   2: 253014.888 ops/s
[info] # Warmup Iteration   3: 264388.865 ops/s
[info] Iteration   1: 261818.127 ops/s
[info]                  ·gc.alloc.rate:            415.159 MB/sec
[info]                  ·gc.alloc.rate.norm:       2496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.367 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2022.291 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 255161.284 ops/s
[info]                  ·gc.alloc.rate:            404.593 MB/sec
[info]                  ·gc.alloc.rate.norm:       2496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.680 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4149.880 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 254745.743 ops/s
[info]                  ·gc.alloc.rate:            403.945 MB/sec
[info]                  ·gc.alloc.rate.norm:       2496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.335 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2078.238 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 254435.146 ops/s
[info]                  ·gc.alloc.rate:                   403.443 MB/sec
[info]                  ·gc.alloc.rate.norm:              2496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             336.350 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2080.917 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 4.121 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 260662.975 ops/s
[info]                  ·gc.alloc.rate:            413.345 MB/sec
[info]                  ·gc.alloc.rate.norm:       2496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.023 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2035.125 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala":
[info]   257364.655 ±(99.9%) 13750.613 ops/s [Average]
[info]   (min, avg, max) = (254435.146, 257364.655, 261818.127), stdev = 3570.990
[info]   CI (99.9%): [243614.042, 271115.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   408.097 ±(99.9%) 21.834 MB/sec [Average]
[info]   (min, avg, max) = (403.443, 408.097, 415.159), stdev = 5.670
[info]   CI (99.9%): [386.263, 429.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2496.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2496.002, 2496.002, 2496.002), stdev = 0.001
[info]   CI (99.9%): [2496.001, 2496.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   403.751 ±(99.9%) 578.891 MB/sec [Average]
[info]   (min, avg, max) = (336.335, 403.751, 672.680), stdev = 150.336
[info]   CI (99.9%): [≈ 0, 982.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   2473.290 ±(99.9%) 3610.358 B/op [Average]
[info]   (min, avg, max) = (2022.291, 2473.290, 4149.880), stdev = 937.599
[info]   CI (99.9%): [≈ 0, 6083.649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.824 ±(99.9%) 7.096 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.824, 4.121), stdev = 1.843
[info]   CI (99.9%): [≈ 0, 7.920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 6.000), stdev = 1.304
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 22.04% complete, ETA 01:02:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 294553.661 ops/s
[info] # Warmup Iteration   2: 330923.581 ops/s
[info] # Warmup Iteration   3: 334973.685 ops/s
[info] Iteration   1: 335489.672 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 335344.259 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 335226.886 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 335456.500 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 335521.510 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc":
[info]   335407.765 ±(99.9%) 466.754 ops/s [Average]
[info]   (min, avg, max) = (335226.886, 335407.765, 335521.510), stdev = 121.215
[info]   CI (99.9%): [334941.011, 335874.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson
[info] # Run progress: 22.31% complete, ETA 01:01:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 48184.177 ops/s
[info] # Warmup Iteration   2: 69144.188 ops/s
[info] # Warmup Iteration   3: 69116.470 ops/s
[info] Iteration   1: 69771.030 ops/s
[info]                  ·gc.alloc.rate:            1086.812 MB/sec
[info]                  ·gc.alloc.rate.norm:       24520.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.955 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 22763.446 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 69491.600 ops/s
[info]                  ·gc.alloc.rate:            1082.999 MB/sec
[info]                  ·gc.alloc.rate.norm:       24520.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.993 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 30474.405 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   3: 71659.688 ops/s
[info]                  ·gc.alloc.rate:                                  1116.285 MB/sec
[info]                  ·gc.alloc.rate.norm:                             24520.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.078 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.707 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.054 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       22340.322 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                87.781 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 70305.465 ops/s
[info]                  ·gc.alloc.rate:                                  1095.434 MB/sec
[info]                  ·gc.alloc.rate.norm:                             24520.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.027 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.602 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.257 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       22859.640 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 72223.969 ops/s
[info]                  ·gc.alloc.rate:                                  1125.370 MB/sec
[info]                  ·gc.alloc.rate.norm:                             24520.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.146 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.764 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       29670.654 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson":
[info]   70690.351 ±(99.9%) 4605.462 ops/s [Average]
[info]   (min, avg, max) = (69491.600, 70690.351, 72223.969), stdev = 1196.024
[info]   CI (99.9%): [66084.889, 75295.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1101.380 ±(99.9%) 71.603 MB/sec [Average]
[info]   (min, avg, max) = (1082.999, 1101.380, 1125.370), stdev = 18.595
[info]   CI (99.9%): [1029.777, 1172.983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   24520.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (24520.006, 24520.006, 24520.006), stdev = 0.001
[info]   CI (99.9%): [24520.005, 24520.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.022 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.078), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.491 ±(99.9%) 2.786 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.491, 1.707), stdev = 0.723
[info]   CI (99.9%): [≈ 0, 3.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1151.005 ±(99.9%) 713.658 MB/sec [Average]
[info]   (min, avg, max) = (1008.955, 1151.005, 1361.764), stdev = 185.335
[info]   CI (99.9%): [437.347, 1864.662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   25621.693 ±(99.9%) 15701.565 B/op [Average]
[info]   (min, avg, max) = (22340.322, 25621.693, 30474.405), stdev = 4077.647
[info]   CI (99.9%): [9920.129, 41323.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   17.556 ±(99.9%) 151.165 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17.556, 87.781), stdev = 39.257
[info]   CI (99.9%): [≈ 0, 168.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.200, 16.000), stdev = 5.762
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce
[info] # Run progress: 22.58% complete, ETA 01:01:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19901.462 ops/s
[info] # Warmup Iteration   2: 27366.651 ops/s
[info] # Warmup Iteration   3: 27626.521 ops/s
[info] Iteration   1: 27553.082 ops/s
[info]                  ·gc.alloc.rate:            573.183 MB/sec
[info]                  ·gc.alloc.rate.norm:       32736.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.242 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 38507.781 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 27620.916 ops/s
[info]                  ·gc.alloc.rate:            574.388 MB/sec
[info]                  ·gc.alloc.rate.norm:       32736.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.997 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 38412.992 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 27662.329 ops/s
[info]                  ·gc.alloc.rate:            575.227 MB/sec
[info]                  ·gc.alloc.rate.norm:       32736.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.978 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19177.340 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 27678.975 ops/s
[info]                  ·gc.alloc.rate:            575.728 MB/sec
[info]                  ·gc.alloc.rate.norm:       32736.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.154 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 38332.511 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 27713.480 ops/s
[info]                  ·gc.alloc.rate:            576.480 MB/sec
[info]                  ·gc.alloc.rate.norm:       32736.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.133 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 38281.346 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce":
[info]   27645.756 ±(99.9%) 237.137 ops/s [Average]
[info]   (min, avg, max) = (27553.082, 27645.756, 27713.480), stdev = 61.584
[info]   CI (99.9%): [27408.620, 27882.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate":
[info]   575.001 ±(99.9%) 4.889 MB/sec [Average]
[info]   (min, avg, max) = (573.183, 575.001, 576.480), stdev = 1.270
[info]   CI (99.9%): [570.112, 579.891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   32736.016 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (32736.015, 32736.016, 32736.020), stdev = 0.002
[info]   CI (99.9%): [32736.008, 32736.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   606.701 ±(99.9%) 580.598 MB/sec [Average]
[info]   (min, avg, max) = (336.978, 606.701, 674.242), stdev = 150.779
[info]   CI (99.9%): [26.103, 1187.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   34542.394 ±(99.9%) 33076.083 B/op [Average]
[info]   (min, avg, max) = (19177.340, 34542.394, 38507.781), stdev = 8589.754
[info]   CI (99.9%): [1466.311, 67618.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 7.000), stdev = 1.304
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala
[info] # Run progress: 22.85% complete, ETA 01:01:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17583.526 ops/s
[info] # Warmup Iteration   2: 28138.629 ops/s
[info] # Warmup Iteration   3: 27286.620 ops/s
[info] Iteration   1: 28186.455 ops/s
[info]                  ·gc.alloc.rate:            370.462 MB/sec
[info]                  ·gc.alloc.rate.norm:       20688.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.337 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18782.353 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 28036.492 ops/s
[info]                  ·gc.alloc.rate:                   368.410 MB/sec
[info]                  ·gc.alloc.rate.norm:              20686.852 B/op
[info]                  ·gc.churn.G1_Old_Gen:             671.947 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        37730.936 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 37.394 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 28096.393 ops/s
[info]                  ·gc.alloc.rate:            369.341 MB/sec
[info]                  ·gc.alloc.rate.norm:       20688.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.405 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18843.174 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 28179.081 ops/s
[info]                  ·gc.alloc.rate:            370.344 MB/sec
[info]                  ·gc.alloc.rate.norm:       20688.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.337 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18788.351 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 28177.271 ops/s
[info]                  ·gc.alloc.rate:            370.312 MB/sec
[info]                  ·gc.alloc.rate.norm:       20688.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.333 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18789.684 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala":
[info]   28135.138 ±(99.9%) 255.218 ops/s [Average]
[info]   (min, avg, max) = (28036.492, 28135.138, 28186.455), stdev = 66.279
[info]   CI (99.9%): [27879.920, 28390.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   369.774 ±(99.9%) 3.409 MB/sec [Average]
[info]   (min, avg, max) = (368.410, 369.774, 370.462), stdev = 0.885
[info]   CI (99.9%): [366.365, 373.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   20687.782 ±(99.9%) 2.003 B/op [Average]
[info]   (min, avg, max) = (20686.852, 20687.782, 20688.016), stdev = 0.520
[info]   CI (99.9%): [20685.780, 20689.785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   403.472 ±(99.9%) 577.913 MB/sec [Average]
[info]   (min, avg, max) = (336.333, 403.472, 671.947), stdev = 150.082
[info]   CI (99.9%): [≈ 0, 981.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   22586.900 ±(99.9%) 32598.818 B/op [Average]
[info]   (min, avg, max) = (18782.353, 22586.900, 37730.936), stdev = 8465.809
[info]   CI (99.9%): [≈ 0, 55185.717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   7.479 ±(99.9%) 64.395 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.479, 37.394), stdev = 16.723
[info]   CI (99.9%): [≈ 0, 71.874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 9.000), stdev = 2.168
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala
[info] # Run progress: 23.12% complete, ETA 01:01:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 103311.776 ops/s
[info] # Warmup Iteration   2: 121807.555 ops/s
[info] # Warmup Iteration   3: 121452.823 ops/s
[info] Iteration   1: 119305.136 ops/s
[info]                  ·gc.alloc.rate:            465.636 MB/sec
[info]                  ·gc.alloc.rate.norm:       6144.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.996 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4446.619 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 122939.502 ops/s
[info]                  ·gc.alloc.rate:            479.951 MB/sec
[info]                  ·gc.alloc.rate.norm:       6144.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.088 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4315.163 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 120171.657 ops/s
[info]                  ·gc.alloc.rate:            469.067 MB/sec
[info]                  ·gc.alloc.rate.norm:       6144.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.061 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8829.085 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 120314.339 ops/s
[info]                  ·gc.alloc.rate:            469.724 MB/sec
[info]                  ·gc.alloc.rate.norm:       6144.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.096 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4409.223 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 119718.509 ops/s
[info]                  ·gc.alloc.rate:            467.257 MB/sec
[info]                  ·gc.alloc.rate.norm:       6144.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.990 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8862.340 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala":
[info]   120489.829 ±(99.9%) 5490.159 ops/s [Average]
[info]   (min, avg, max) = (119305.136, 120489.829, 122939.502), stdev = 1425.777
[info]   CI (99.9%): [114999.670, 125979.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   470.327 ±(99.9%) 21.612 MB/sec [Average]
[info]   (min, avg, max) = (465.636, 470.327, 479.951), stdev = 5.613
[info]   CI (99.9%): [448.715, 491.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   6144.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6144.003, 6144.003, 6144.004), stdev = 0.001
[info]   CI (99.9%): [6144.003, 6144.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   471.846 ±(99.9%) 710.688 MB/sec [Average]
[info]   (min, avg, max) = (336.996, 471.846, 674.061), stdev = 184.564
[info]   CI (99.9%): [≈ 0, 1182.534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   6172.486 ±(99.9%) 9398.687 B/op [Average]
[info]   (min, avg, max) = (4315.163, 6172.486, 8862.340), stdev = 2440.809
[info]   CI (99.9%): [≈ 0, 15571.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 6.000), stdev = 1.643
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson
[info] # Run progress: 23.39% complete, ETA 01:01:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8785.963 ops/s
[info] # Warmup Iteration   2: 20716.217 ops/s
[info] # Warmup Iteration   3: 20718.460 ops/s
[info] Iteration   1: 20438.730 ops/s
[info]                  ·gc.alloc.rate:            1128.646 MB/sec
[info]                  ·gc.alloc.rate.norm:       86920.124 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.035 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 77554.513 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   2: 20729.091 ops/s
[info]                  ·gc.alloc.rate:                   1145.144 MB/sec
[info]                  ·gc.alloc.rate.norm:              86920.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1344.619 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        102060.790 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      5.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 404.602 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   3: 21212.202 ops/s
[info]                  ·gc.alloc.rate:                                  1171.318 MB/sec
[info]                  ·gc.alloc.rate.norm:                             86920.024 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.057 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.236 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.971 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       75763.162 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 21307.769 ops/s
[info]                  ·gc.alloc.rate:                                  1176.598 MB/sec
[info]                  ·gc.alloc.rate.norm:                             86920.019 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.607 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.398 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       100571.974 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 21388.111 ops/s
[info]                  ·gc.alloc.rate:                                  1181.471 MB/sec
[info]                  ·gc.alloc.rate.norm:                             86920.021 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.024 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.395 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       75143.372 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson":
[info]   21015.181 ±(99.9%) 1584.909 ops/s [Average]
[info]   (min, avg, max) = (20438.730, 21015.181, 21388.111), stdev = 411.596
[info]   CI (99.9%): [19430.272, 22600.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1160.635 ±(99.9%) 87.520 MB/sec [Average]
[info]   (min, avg, max) = (1128.646, 1160.635, 1181.471), stdev = 22.729
[info]   CI (99.9%): [1073.116, 1248.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   86920.042 ±(99.9%) 0.176 B/op [Average]
[info]   (min, avg, max) = (86920.019, 86920.042, 86920.124), stdev = 0.046
[info]   CI (99.9%): [86919.865, 86920.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.013 ±(99.9%) 0.096 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.057), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.973 ±(99.9%) 7.094 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.973, 4.236), stdev = 1.842
[info]   CI (99.9%): [≈ 0, 8.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1151.084 ±(99.9%) 710.511 MB/sec [Average]
[info]   (min, avg, max) = (1007.035, 1151.084, 1361.398), stdev = 184.518
[info]   CI (99.9%): [440.572, 1861.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   86218.762 ±(99.9%) 53218.268 B/op [Average]
[info]   (min, avg, max) = (75143.372, 86218.762, 102060.790), stdev = 13820.615
[info]   CI (99.9%): [33000.494, 139437.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 9.179 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 5.331), stdev = 2.384
[info]   CI (99.9%): [≈ 0, 10.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   80.920 ±(99.9%) 696.749 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 80.920, 404.602), stdev = 180.943
[info]   CI (99.9%): [≈ 0, 777.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.600, 19.000), stdev = 7.436
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce
[info] # Run progress: 23.66% complete, ETA 01:00:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 129740.091 ops/s
[info] # Warmup Iteration   2: 164758.960 ops/s
[info] # Warmup Iteration   3: 166357.432 ops/s
[info] Iteration   1: 165931.408 ops/s
[info]                  ·gc.alloc.rate:            831.491 MB/sec
[info]                  ·gc.alloc.rate.norm:       7888.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.030 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9591.212 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 166259.867 ops/s
[info]                  ·gc.alloc.rate:            833.215 MB/sec
[info]                  ·gc.alloc.rate.norm:       7888.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.077 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6381.452 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 166090.914 ops/s
[info]                  ·gc.alloc.rate:            832.318 MB/sec
[info]                  ·gc.alloc.rate.norm:       7888.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.030 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9581.686 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 166225.140 ops/s
[info]                  ·gc.alloc.rate:                   833.035 MB/sec
[info]                  ·gc.alloc.rate.norm:              7888.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             674.061 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        6382.680 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 31.535 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 166804.736 ops/s
[info]                  ·gc.alloc.rate:                                  835.964 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7888.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.098 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.923 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.147 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9635.359 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce":
[info]   166262.413 ±(99.9%) 1269.087 ops/s [Average]
[info]   (min, avg, max) = (165931.408, 166262.413, 166804.736), stdev = 329.578
[info]   CI (99.9%): [164993.326, 167531.500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate":
[info]   833.205 ±(99.9%) 6.491 MB/sec [Average]
[info]   (min, avg, max) = (831.491, 833.205, 835.964), stdev = 1.686
[info]   CI (99.9%): [826.714, 839.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   7888.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7888.002, 7888.003, 7888.003), stdev = 0.001
[info]   CI (99.9%): [7888.002, 7888.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.020 ±(99.9%) 0.169 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.098), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.185 ±(99.9%) 1.590 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.185, 0.923), stdev = 0.413
[info]   CI (99.9%): [≈ 0, 1.775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   878.269 ±(99.9%) 717.968 MB/sec [Average]
[info]   (min, avg, max) = (674.061, 878.269, 1021.147), stdev = 186.454
[info]   CI (99.9%): [160.301, 1596.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   8314.478 ±(99.9%) 6793.147 B/op [Average]
[info]   (min, avg, max) = (6381.452, 8314.478, 9635.359), stdev = 1764.159
[info]   CI (99.9%): [1521.331, 15107.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   6.307 ±(99.9%) 54.305 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.307, 31.535), stdev = 14.103
[info]   CI (99.9%): [≈ 0, 60.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.400, 10.000), stdev = 2.881
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala
[info] # Run progress: 23.92% complete, ETA 01:00:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 185430.280 ops/s
[info] # Warmup Iteration   2: 274629.401 ops/s
[info] # Warmup Iteration   3: 280411.088 ops/s
[info] Iteration   1: 284365.435 ops/s
[info]                  ·gc.alloc.rate:                   287.613 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             335.715 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1858.256 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.687 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 285090.348 ops/s
[info]                  ·gc.alloc.rate:      288.304 MB/sec
[info]                  ·gc.alloc.rate.norm: 1592.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 284289.827 ops/s
[info]                  ·gc.alloc.rate:            287.531 MB/sec
[info]                  ·gc.alloc.rate.norm:       1592.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.373 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1862.427 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 268720.302 ops/s
[info]                  ·gc.alloc.rate:            271.770 MB/sec
[info]                  ·gc.alloc.rate.norm:       1592.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.348 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1970.296 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 276489.742 ops/s
[info]                  ·gc.alloc.rate:            279.713 MB/sec
[info]                  ·gc.alloc.rate.norm:       1592.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.425 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1914.781 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala":
[info]   279791.131 ±(99.9%) 27411.787 ops/s [Average]
[info]   (min, avg, max) = (268720.302, 279791.131, 285090.348), stdev = 7118.754
[info]   CI (99.9%): [252379.344, 307202.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   282.986 ±(99.9%) 27.691 MB/sec [Average]
[info]   (min, avg, max) = (271.770, 282.986, 288.304), stdev = 7.191
[info]   CI (99.9%): [255.295, 310.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1592.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1592.001, 1592.002, 1592.002), stdev = 0.001
[info]   CI (99.9%): [1592.001, 1592.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   268.972 ±(99.9%) 578.985 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 268.972, 336.425), stdev = 150.360
[info]   CI (99.9%): [≈ 0, 847.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1521.152 ±(99.9%) 3279.093 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1521.152, 1970.296), stdev = 851.570
[info]   CI (99.9%): [≈ 0, 4800.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.737 ±(99.9%) 6.349 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.737, 3.687), stdev = 1.649
[info]   CI (99.9%): [≈ 0, 7.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.400, 5.000), stdev = 1.949
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala
[info] # Run progress: 24.19% complete, ETA 01:00:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 479571.698 ops/s
[info] # Warmup Iteration   2: 542259.957 ops/s
[info] # Warmup Iteration   3: 546594.253 ops/s
[info] Iteration   1: 547764.676 ops/s
[info]                  ·gc.alloc.rate:            420.369 MB/sec
[info]                  ·gc.alloc.rate.norm:       1208.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.339 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 966.525 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 544715.197 ops/s
[info]                  ·gc.alloc.rate:            417.991 MB/sec
[info]                  ·gc.alloc.rate.norm:       1208.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.640 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1943.942 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 545534.570 ops/s
[info]                  ·gc.alloc.rate:            418.663 MB/sec
[info]                  ·gc.alloc.rate.norm:       1208.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.355 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 970.510 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 543836.066 ops/s
[info]                  ·gc.alloc.rate:            417.338 MB/sec
[info]                  ·gc.alloc.rate.norm:       1208.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.337 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 973.540 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 546544.210 ops/s
[info]                  ·gc.alloc.rate:            419.436 MB/sec
[info]                  ·gc.alloc.rate.norm:       1208.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.354 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 968.721 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala":
[info]   545678.944 ±(99.9%) 5916.980 ops/s [Average]
[info]   (min, avg, max) = (543836.066, 545678.944, 547764.676), stdev = 1536.621
[info]   CI (99.9%): [539761.964, 551595.923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   418.760 ±(99.9%) 4.584 MB/sec [Average]
[info]   (min, avg, max) = (417.338, 418.760, 420.369), stdev = 1.190
[info]   CI (99.9%): [414.175, 423.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1208.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1208.001, 1208.001, 1208.001), stdev = 0.001
[info]   CI (99.9%): [1208.001, 1208.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   403.605 ±(99.9%) 579.118 MB/sec [Average]
[info]   (min, avg, max) = (336.337, 403.605, 672.640), stdev = 150.395
[info]   CI (99.9%): [≈ 0, 982.724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1164.648 ±(99.9%) 1677.520 B/op [Average]
[info]   (min, avg, max) = (966.525, 1164.648, 1943.942), stdev = 435.647
[info]   CI (99.9%): [≈ 0, 2842.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 6.000), stdev = 1.304
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 24.46% complete, ETA 01:00:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 498685.810 ops/s
[info] # Warmup Iteration   2: 550875.220 ops/s
[info] # Warmup Iteration   3: 551128.400 ops/s
[info] Iteration   1: 551156.490 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 551190.629 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 550435.424 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 550648.307 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 549908.593 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc":
[info]   550667.889 ±(99.9%) 2058.332 ops/s [Average]
[info]   (min, avg, max) = (549908.593, 550667.889, 551190.629), stdev = 534.542
[info]   CI (99.9%): [548609.557, 552726.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson
[info] # Run progress: 24.73% complete, ETA 01:00:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 143968.534 ops/s
[info] # Warmup Iteration   2: 282114.459 ops/s
[info] # Warmup Iteration   3: 281319.764 ops/s
[info] Iteration   1: 289593.962 ops/s
[info]                  ·gc.alloc.rate:                   797.743 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.388 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5480.924 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.620 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 290692.275 ops/s
[info]                  ·gc.alloc.rate:            800.741 MB/sec
[info]                  ·gc.alloc.rate.norm:       4336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.005 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3638.898 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 289810.859 ops/s
[info]                  ·gc.alloc.rate:                   798.307 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1007.686 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5473.241 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.617 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   4: 281493.576 ops/s
[info]                  ·gc.alloc.rate:                   775.475 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             671.443 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3754.319 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 22.347 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 282947.222 ops/s
[info]                  ·gc.alloc.rate:                   779.689 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             680.264 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3783.079 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.705 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson":
[info]   286907.579 ±(99.9%) 16669.938 ops/s [Average]
[info]   (min, avg, max) = (281493.576, 286907.579, 290692.275), stdev = 4329.130
[info]   CI (99.9%): [270237.641, 303577.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   790.391 ±(99.9%) 45.596 MB/sec [Average]
[info]   (min, avg, max) = (775.475, 790.391, 800.741), stdev = 11.841
[info]   CI (99.9%): [744.795, 835.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4336.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4336.001, 4336.001, 4336.002), stdev = 0.001
[info]   CI (99.9%): [4336.001, 4336.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   807.957 ±(99.9%) 703.437 MB/sec [Average]
[info]   (min, avg, max) = (671.443, 807.957, 1008.388), stdev = 182.680
[info]   CI (99.9%): [104.520, 1511.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   4426.092 ±(99.9%) 3700.232 B/op [Average]
[info]   (min, avg, max) = (3638.898, 4426.092, 5480.924), stdev = 960.938
[info]   CI (99.9%): [725.860, 8126.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.199 ±(99.9%) 6.124 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.199, 3.997), stdev = 1.590
[info]   CI (99.9%): [≈ 0, 7.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   6.658 ±(99.9%) 34.316 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.658, 22.347), stdev = 8.912
[info]   CI (99.9%): [≈ 0, 40.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.time":
[info]   49.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 9.800, 14.000), stdev = 4.324
[info]   CI (99.9%): [49.000, 49.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce
[info] # Run progress: 25.00% complete, ETA 00:59:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29494.741 ops/s
[info] # Warmup Iteration   2: 36649.213 ops/s
[info] # Warmup Iteration   3: 37175.037 ops/s
[info] Iteration   1: 36624.842 ops/s
[info]                  ·gc.alloc.rate:                                  1633.413 MB/sec
[info]                  ·gc.alloc.rate.norm:                             70200.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.134 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.780 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1691.733 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       72706.460 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                143.123 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   2: 37550.942 ops/s
[info]                  ·gc.alloc.rate:                                  1674.648 MB/sec
[info]                  ·gc.alloc.rate.norm:                             70200.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.016 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.654 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.758 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       71336.449 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 37674.051 ops/s
[info]                  ·gc.alloc.rate:            1680.713 MB/sec
[info]                  ·gc.alloc.rate.norm:       70200.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1702.211 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 71097.916 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 37477.162 ops/s
[info]                  ·gc.alloc.rate:                                  1671.918 MB/sec
[info]                  ·gc.alloc.rate.norm:                             70200.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.308 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.248 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       71473.473 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 36816.927 ops/s
[info]                  ·gc.alloc.rate:            1642.376 MB/sec
[info]                  ·gc.alloc.rate.norm:       70200.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1702.001 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 72748.573 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce":
[info]   37228.785 ±(99.9%) 1824.604 ops/s [Average]
[info]   (min, avg, max) = (36624.842, 37228.785, 37674.051), stdev = 473.844
[info]   CI (99.9%): [35404.181, 39053.389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate":
[info]   1660.614 ±(99.9%) 81.713 MB/sec [Average]
[info]   (min, avg, max) = (1633.413, 1660.614, 1680.713), stdev = 21.221
[info]   CI (99.9%): [1578.900, 1742.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   70200.011 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (70200.011, 70200.011, 70200.012), stdev = 0.001
[info]   CI (99.9%): [70200.010, 70200.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.031 ±(99.9%) 0.223 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.031, 0.134), stdev = 0.058
[info]   CI (99.9%): [≈ 0, 0.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.348 ±(99.9%) 9.595 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.348, 5.780), stdev = 2.492
[info]   CI (99.9%): [≈ 0, 10.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1699.990 ±(99.9%) 17.791 MB/sec [Average]
[info]   (min, avg, max) = (1691.733, 1699.990, 1702.248), stdev = 4.620
[info]   CI (99.9%): [1682.199, 1717.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   71872.574 ±(99.9%) 3050.007 B/op [Average]
[info]   (min, avg, max) = (71097.916, 71872.574, 72748.573), stdev = 792.077
[info]   CI (99.9%): [68822.567, 74922.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   28.625 ±(99.9%) 246.466 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 28.625, 143.123), stdev = 64.007
[info]   CI (99.9%): [≈ 0, 275.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 12.000), stdev = 3.493
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava
[info] # Run progress: 25.27% complete, ETA 00:59:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7031.608 ops/s
[info] # Warmup Iteration   2: 302707.344 ops/s
[info] # Warmup Iteration   3: 306547.582 ops/s
[info] Iteration   1: 309245.097 ops/s
[info]                  ·gc.alloc.rate:      320.775 MB/sec
[info]                  ·gc.alloc.rate.norm: 1632.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 308878.314 ops/s
[info]                  ·gc.alloc.rate:            320.204 MB/sec
[info]                  ·gc.alloc.rate.norm:       1632.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.647 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1700.520 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 299868.447 ops/s
[info]                  ·gc.alloc.rate:            310.906 MB/sec
[info]                  ·gc.alloc.rate.norm:       1632.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.693 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1751.612 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 309616.206 ops/s
[info]                  ·gc.alloc.rate:            321.029 MB/sec
[info]                  ·gc.alloc.rate.norm:       1632.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.710 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1696.467 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 310197.804 ops/s
[info]                  ·gc.alloc.rate:            321.605 MB/sec
[info]                  ·gc.alloc.rate.norm:       1632.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.691 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1693.334 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava":
[info]   307561.174 ±(99.9%) 16665.269 ops/s [Average]
[info]   (min, avg, max) = (299868.447, 307561.174, 310197.804), stdev = 4327.917
[info]   CI (99.9%): [290895.905, 324226.443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   318.904 ±(99.9%) 17.324 MB/sec [Average]
[info]   (min, avg, max) = (310.906, 318.904, 321.605), stdev = 4.499
[info]   CI (99.9%): [301.580, 336.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   1632.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1632.001, 1632.001, 1632.001), stdev = 0.001
[info]   CI (99.9%): [1632.001, 1632.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   266.948 ±(99.9%) 574.626 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 266.948, 333.710), stdev = 149.229
[info]   CI (99.9%): [≈ 0, 841.575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   1368.387 ±(99.9%) 2946.991 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1368.387, 1751.612), stdev = 765.324
[info]   CI (99.9%): [≈ 0, 4315.378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.800, 5.000), stdev = 2.168
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala
[info] # Run progress: 25.54% complete, ETA 00:59:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 62612.132 ops/s
[info] # Warmup Iteration   2: 98082.979 ops/s
[info] # Warmup Iteration   3: 98418.580 ops/s
[info] Iteration   1: 95451.185 ops/s
[info]                  ·gc.alloc.rate:            1054.595 MB/sec
[info]                  ·gc.alloc.rate.norm:       17392.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.041 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 16640.751 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 95165.136 ops/s
[info]                  ·gc.alloc.rate:            1051.340 MB/sec
[info]                  ·gc.alloc.rate.norm:       17392.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.950 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 16690.755 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 97484.660 ops/s
[info]                  ·gc.alloc.rate:                                  1077.117 MB/sec
[info]                  ·gc.alloc.rate.norm:                             17392.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.220 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.559 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.083 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       16422.650 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                64.529 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 99563.087 ops/s
[info]                  ·gc.alloc.rate:                                  1100.246 MB/sec
[info]                  ·gc.alloc.rate.norm:                             17392.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.088 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.680 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       21524.588 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 98684.858 ops/s
[info]                  ·gc.alloc.rate:            1090.823 MB/sec
[info]                  ·gc.alloc.rate.norm:       17392.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.500 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 16286.723 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala":
[info]   97269.785 ±(99.9%) 7467.840 ops/s [Average]
[info]   (min, avg, max) = (95165.136, 97269.785, 99563.087), stdev = 1939.374
[info]   CI (99.9%): [89801.945, 104737.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1074.824 ±(99.9%) 83.218 MB/sec [Average]
[info]   (min, avg, max) = (1051.340, 1074.824, 1100.246), stdev = 21.611
[info]   CI (99.9%): [991.606, 1158.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   17392.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (17392.004, 17392.004, 17392.005), stdev = 0.001
[info]   CI (99.9%): [17392.003, 17392.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.045 ±(99.9%) 0.377 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.045, 0.220), stdev = 0.098
[info]   CI (99.9%): [≈ 0, 0.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.729 ±(99.9%) 6.092 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.729, 3.559), stdev = 1.582
[info]   CI (99.9%): [≈ 0, 6.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1083.651 ±(99.9%) 598.838 MB/sec [Average]
[info]   (min, avg, max) = (1008.950, 1083.651, 1361.680), stdev = 155.516
[info]   CI (99.9%): [484.813, 1682.489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   17513.093 ±(99.9%) 8658.035 B/op [Average]
[info]   (min, avg, max) = (16286.723, 17513.093, 21524.588), stdev = 2248.464
[info]   CI (99.9%): [8855.059, 26171.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   12.906 ±(99.9%) 111.123 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 12.906, 64.529), stdev = 28.858
[info]   CI (99.9%): [≈ 0, 124.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.600, 13.000), stdev = 4.827
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala
[info] # Run progress: 25.81% complete, ETA 00:59:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 145438.764 ops/s
[info] # Warmup Iteration   2: 147412.217 ops/s
[info] # Warmup Iteration   3: 153145.952 ops/s
[info] Iteration   1: 150826.894 ops/s
[info]                  ·gc.alloc.rate:            98.119 MB/sec
[info]                  ·gc.alloc.rate.norm:       1024.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      341.003 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3558.830 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 153662.673 ops/s
[info]                  ·gc.alloc.rate:      99.962 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 152409.973 ops/s
[info]                  ·gc.alloc.rate:      99.149 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 151965.922 ops/s
[info]                  ·gc.alloc.rate:                   98.862 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             335.029 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3470.187 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      1.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 20.697 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 153261.604 ops/s
[info]                  ·gc.alloc.rate:      99.700 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala":
[info]   152425.413 ±(99.9%) 4303.714 ops/s [Average]
[info]   (min, avg, max) = (150826.894, 152425.413, 153662.673), stdev = 1117.661
[info]   CI (99.9%): [148121.699, 156729.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   99.159 ±(99.9%) 2.796 MB/sec [Average]
[info]   (min, avg, max) = (98.119, 99.159, 99.962), stdev = 0.726
[info]   CI (99.9%): [96.363, 101.954] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1024.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1024.003, 1024.003, 1024.003), stdev = 0.001
[info]   CI (99.9%): [1024.002, 1024.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   135.206 ±(99.9%) 712.950 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 135.206, 341.003), stdev = 185.151
[info]   CI (99.9%): [≈ 0, 848.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1405.803 ±(99.9%) 7413.378 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1405.803, 3558.830), stdev = 1925.231
[info]   CI (99.9%): [≈ 0, 8819.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.400 ±(99.9%) 3.441 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.998), stdev = 0.894
[info]   CI (99.9%): [≈ 0, 3.841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   4.139 ±(99.9%) 35.641 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.139, 20.697), stdev = 9.256
[info]   CI (99.9%): [≈ 0, 39.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.643
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson
[info] # Run progress: 26.08% complete, ETA 00:58:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18936.942 ops/s
[info] # Warmup Iteration   2: 37979.147 ops/s
[info] # Warmup Iteration   3: 38130.259 ops/s
[info] Iteration   1: 39202.462 ops/s
[info]                  ·gc.alloc.rate:                                  2092.557 MB/sec
[info]                  ·gc.alloc.rate.norm:                             84016.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.074 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.990 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.215 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       81994.798 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   2: 38974.136 ops/s
[info]                  ·gc.alloc.rate:                                  2080.513 MB/sec
[info]                  ·gc.alloc.rate.norm:                             84016.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.080 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.338 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       82474.385 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 39242.452 ops/s
[info]                  ·gc.alloc.rate:                                  2094.469 MB/sec
[info]                  ·gc.alloc.rate.norm:                             84016.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.013 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.520 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.946 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       81909.147 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 39327.542 ops/s
[info]                  ·gc.alloc.rate:                                  2098.883 MB/sec
[info]                  ·gc.alloc.rate.norm:                             84016.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.017 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.696 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.880 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       81734.225 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 38900.264 ops/s
[info]                  ·gc.alloc.rate:                                  2076.281 MB/sec
[info]                  ·gc.alloc.rate.norm:                             84016.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.318 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.112 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       82633.373 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson":
[info]   39129.371 ±(99.9%) 704.756 ops/s [Average]
[info]   (min, avg, max) = (38900.264, 39129.371, 39327.542), stdev = 183.023
[info]   CI (99.9%): [38424.615, 39834.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2088.541 ±(99.9%) 37.183 MB/sec [Average]
[info]   (min, avg, max) = (2076.281, 2088.541, 2098.883), stdev = 9.656
[info]   CI (99.9%): [2051.358, 2125.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   84016.011 ±(99.9%) 0.004 B/op [Average]
[info]   (min, avg, max) = (84016.010, 84016.011, 84016.013), stdev = 0.001
[info]   CI (99.9%): [84016.007, 84016.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.023 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (0.002, 0.023, 0.074), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.921 ±(99.9%) 4.541 B/op [Average]
[info]   (min, avg, max) = (0.080, 0.921, 2.990), stdev = 1.179
[info]   CI (99.9%): [≈ 0, 5.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2042.098 ±(99.9%) 0.726 MB/sec [Average]
[info]   (min, avg, max) = (2041.880, 2042.098, 2042.338), stdev = 0.188
[info]   CI (99.9%): [2041.373, 2042.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   82149.186 ±(99.9%) 1483.671 B/op [Average]
[info]   (min, avg, max) = (81734.225, 82149.186, 82633.373), stdev = 385.305
[info]   CI (99.9%): [80665.514, 83632.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 8.000), stdev = 1.304
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce
[info] # Run progress: 26.34% complete, ETA 00:58:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 67199.174 ops/s
[info] # Warmup Iteration   2: 86745.848 ops/s
[info] # Warmup Iteration   3: 87341.195 ops/s
[info] Iteration   1: 87196.193 ops/s
[info]                  ·gc.alloc.rate:            557.516 MB/sec
[info]                  ·gc.alloc.rate.norm:       10064.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.055 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12167.719 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 87264.205 ops/s
[info]                  ·gc.alloc.rate:            557.886 MB/sec
[info]                  ·gc.alloc.rate.norm:       10064.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.989 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6079.119 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 87005.483 ops/s
[info]                  ·gc.alloc.rate:            556.238 MB/sec
[info]                  ·gc.alloc.rate.norm:       10064.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.979 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12194.285 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 86896.752 ops/s
[info]                  ·gc.alloc.rate:            555.594 MB/sec
[info]                  ·gc.alloc.rate.norm:       10064.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.051 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12209.719 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 86589.883 ops/s
[info]                  ·gc.alloc.rate:                   553.603 MB/sec
[info]                  ·gc.alloc.rate.norm:              10064.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:             336.342 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        6114.393 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 12.108 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce":
[info]   86990.503 ±(99.9%) 1030.957 ops/s [Average]
[info]   (min, avg, max) = (86589.883, 86990.503, 87264.205), stdev = 267.736
[info]   CI (99.9%): [85959.546, 88021.460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate":
[info]   556.168 ±(99.9%) 6.580 MB/sec [Average]
[info]   (min, avg, max) = (553.603, 556.168, 557.886), stdev = 1.709
[info]   CI (99.9%): [549.587, 562.748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   10064.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10064.005, 10064.005, 10064.005), stdev = 0.001
[info]   CI (99.9%): [10064.004, 10064.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   539.083 ±(99.9%) 711.527 MB/sec [Average]
[info]   (min, avg, max) = (336.342, 539.083, 674.055), stdev = 184.781
[info]   CI (99.9%): [≈ 0, 1250.611] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   9753.047 ±(99.9%) 12852.598 B/op [Average]
[info]   (min, avg, max) = (6079.119, 9753.047, 12209.719), stdev = 3337.779
[info]   CI (99.9%): [≈ 0, 22605.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   2.422 ±(99.9%) 20.850 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.422, 12.108), stdev = 5.415
[info]   CI (99.9%): [≈ 0, 23.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 7.000), stdev = 1.517
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava
[info] # Run progress: 26.61% complete, ETA 00:58:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1082.406 ops/s
[info] # Warmup Iteration   2: 110902.468 ops/s
[info] # Warmup Iteration   3: 109747.609 ops/s
[info] Iteration   1: 109341.816 ops/s
[info]                  ·gc.alloc.rate:            334.688 MB/sec
[info]                  ·gc.alloc.rate.norm:       4816.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.853 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4804.000 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 112788.598 ops/s
[info]                  ·gc.alloc.rate:            345.071 MB/sec
[info]                  ·gc.alloc.rate.norm:       4816.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.693 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4657.198 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 111796.522 ops/s
[info]                  ·gc.alloc.rate:            342.215 MB/sec
[info]                  ·gc.alloc.rate.norm:       4816.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.866 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4698.518 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 113263.584 ops/s
[info]                  ·gc.alloc.rate:            346.564 MB/sec
[info]                  ·gc.alloc.rate.norm:       4816.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.731 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4637.669 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 112854.107 ops/s
[info]                  ·gc.alloc.rate:            345.278 MB/sec
[info]                  ·gc.alloc.rate.norm:       4816.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.688 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4654.351 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava":
[info]   112008.925 ±(99.9%) 6105.116 ops/s [Average]
[info]   (min, avg, max) = (109341.816, 112008.925, 113263.584), stdev = 1585.479
[info]   CI (99.9%): [105903.809, 118114.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   342.763 ±(99.9%) 18.428 MB/sec [Average]
[info]   (min, avg, max) = (334.688, 342.763, 346.564), stdev = 4.786
[info]   CI (99.9%): [324.335, 361.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   4816.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4816.004, 4816.004, 4816.004), stdev = 0.001
[info]   CI (99.9%): [4816.003, 4816.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   333.766 ±(99.9%) 0.335 MB/sec [Average]
[info]   (min, avg, max) = (333.688, 333.766, 333.866), stdev = 0.087
[info]   CI (99.9%): [333.431, 334.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   4690.347 ±(99.9%) 259.406 B/op [Average]
[info]   (min, avg, max) = (4637.669, 4690.347, 4804.000), stdev = 67.367
[info]   CI (99.9%): [4430.941, 4949.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJavaPrealloc
[info] # Run progress: 26.88% complete, ETA 00:58:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3449.393 ops/s
[info] # Warmup Iteration   2: 114004.770 ops/s
[info] # Warmup Iteration   3: 112250.910 ops/s
[info] Iteration   1: 114851.287 ops/s
[info]                  ·gc.alloc.rate:                   260.922 MB/sec
[info]                  ·gc.alloc.rate.norm:              3576.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             330.369 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        4527.790 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 45.643 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 115940.175 ops/s
[info]                  ·gc.alloc.rate:            263.359 MB/sec
[info]                  ·gc.alloc.rate.norm:       3576.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.656 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4530.521 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 115924.180 ops/s
[info]                  ·gc.alloc.rate:                   263.431 MB/sec
[info]                  ·gc.alloc.rate.norm:              3576.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             333.127 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        4522.102 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 9.044 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 117221.932 ops/s
[info]                  ·gc.alloc.rate:      266.320 MB/sec
[info]                  ·gc.alloc.rate.norm: 3576.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 116373.044 ops/s
[info]                  ·gc.alloc.rate:            264.415 MB/sec
[info]                  ·gc.alloc.rate.norm:       3576.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.744 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4513.627 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJavaPrealloc":
[info]   116062.124 ±(99.9%) 3302.279 ops/s [Average]
[info]   (min, avg, max) = (114851.287, 116062.124, 117221.932), stdev = 857.591
[info]   CI (99.9%): [112759.844, 119364.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJavaPrealloc:·gc.alloc.rate":
[info]   263.690 ±(99.9%) 7.526 MB/sec [Average]
[info]   (min, avg, max) = (260.922, 263.690, 266.320), stdev = 1.954
[info]   CI (99.9%): [256.163, 271.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJavaPrealloc:·gc.alloc.rate.norm":
[info]   3576.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3576.003, 3576.004, 3576.004), stdev = 0.001
[info]   CI (99.9%): [3576.003, 3576.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJavaPrealloc:·gc.churn.G1_Old_Gen":
[info]   266.179 ±(99.9%) 572.995 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 266.179, 333.744), stdev = 148.805
[info]   CI (99.9%): [≈ 0, 839.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJavaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   3618.808 ±(99.9%) 7789.797 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3618.808, 4530.521), stdev = 2022.986
[info]   CI (99.9%): [≈ 0, 11408.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJavaPrealloc:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.560 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.330), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJavaPrealloc:·gc.churn.G1_Survivor_Space.norm":
[info]   10.937 ±(99.9%) 76.213 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.937, 45.643), stdev = 19.792
[info]   CI (99.9%): [≈ 0, 87.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJavaPrealloc:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJavaPrealloc:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.000, 5.000), stdev = 2.236
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala
[info] # Run progress: 27.15% complete, ETA 00:58:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 70374.780 ops/s
[info] # Warmup Iteration   2: 97403.081 ops/s
[info] # Warmup Iteration   3: 101017.305 ops/s
[info] Iteration   1: 101578.066 ops/s
[info]                  ·gc.alloc.rate:                   335.548 MB/sec
[info]                  ·gc.alloc.rate.norm:              5200.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             335.674 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5201.956 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 10.321 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 101824.741 ops/s
[info]                  ·gc.alloc.rate:            336.353 MB/sec
[info]                  ·gc.alloc.rate.norm:       5200.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.339 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5199.789 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 101488.288 ops/s
[info]                  ·gc.alloc.rate:            335.264 MB/sec
[info]                  ·gc.alloc.rate.norm:       5200.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.363 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5217.053 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 101796.162 ops/s
[info]                  ·gc.alloc.rate:            336.302 MB/sec
[info]                  ·gc.alloc.rate.norm:       5200.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.374 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5201.117 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 101528.631 ops/s
[info]                  ·gc.alloc.rate:            335.442 MB/sec
[info]                  ·gc.alloc.rate.norm:       5200.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.399 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5214.844 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala":
[info]   101643.178 ±(99.9%) 601.861 ops/s [Average]
[info]   (min, avg, max) = (101488.288, 101643.178, 101824.741), stdev = 156.302
[info]   CI (99.9%): [101041.316, 102245.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   335.782 ±(99.9%) 1.960 MB/sec [Average]
[info]   (min, avg, max) = (335.264, 335.782, 336.353), stdev = 0.509
[info]   CI (99.9%): [333.822, 337.742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   5200.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5200.004, 5200.004, 5200.004), stdev = 0.001
[info]   CI (99.9%): [5200.004, 5200.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   336.230 ±(99.9%) 1.199 MB/sec [Average]
[info]   (min, avg, max) = (335.674, 336.230, 336.399), stdev = 0.311
[info]   CI (99.9%): [335.031, 337.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   5206.952 ±(99.9%) 31.907 B/op [Average]
[info]   (min, avg, max) = (5199.789, 5206.952, 5217.053), stdev = 8.286
[info]   CI (99.9%): [5175.045, 5238.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   2.064 ±(99.9%) 17.774 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.064, 10.321), stdev = 4.616
[info]   CI (99.9%): [≈ 0, 19.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala
[info] # Run progress: 27.42% complete, ETA 00:57:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 99770.937 ops/s
[info] # Warmup Iteration   2: 115465.949 ops/s
[info] # Warmup Iteration   3: 117492.269 ops/s
[info] Iteration   1: 117972.305 ops/s
[info]                  ·gc.alloc.rate:            360.994 MB/sec
[info]                  ·gc.alloc.rate.norm:       4816.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.391 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4487.778 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 118062.518 ops/s
[info]                  ·gc.alloc.rate:            361.237 MB/sec
[info]                  ·gc.alloc.rate.norm:       4816.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.361 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4484.358 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 114494.549 ops/s
[info]                  ·gc.alloc.rate:            350.422 MB/sec
[info]                  ·gc.alloc.rate.norm:       4816.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.478 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4624.360 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 115894.474 ops/s
[info]                  ·gc.alloc.rate:            354.786 MB/sec
[info]                  ·gc.alloc.rate.norm:       4816.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.533 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4568.229 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 115162.393 ops/s
[info]                  ·gc.alloc.rate:            352.528 MB/sec
[info]                  ·gc.alloc.rate.norm:       4816.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.516 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4597.261 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala":
[info]   116317.248 ±(99.9%) 6274.256 ops/s [Average]
[info]   (min, avg, max) = (114494.549, 116317.248, 118062.518), stdev = 1629.404
[info]   CI (99.9%): [110042.991, 122591.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   355.993 ±(99.9%) 18.964 MB/sec [Average]
[info]   (min, avg, max) = (350.422, 355.993, 361.237), stdev = 4.925
[info]   CI (99.9%): [337.030, 374.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   4816.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4816.003, 4816.004, 4816.004), stdev = 0.001
[info]   CI (99.9%): [4816.003, 4816.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   336.456 ±(99.9%) 0.293 MB/sec [Average]
[info]   (min, avg, max) = (336.361, 336.456, 336.533), stdev = 0.076
[info]   CI (99.9%): [336.163, 336.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   4552.397 ±(99.9%) 245.410 B/op [Average]
[info]   (min, avg, max) = (4484.358, 4552.397, 4624.360), stdev = 63.732
[info]   CI (99.9%): [4306.988, 4797.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 27.69% complete, ETA 00:57:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 104430.443 ops/s
[info] # Warmup Iteration   2: 114532.236 ops/s
[info] # Warmup Iteration   3: 116232.923 ops/s
[info] Iteration   1: 116461.894 ops/s
[info]                  ·gc.alloc.rate:            264.582 MB/sec
[info]                  ·gc.alloc.rate.norm:       3576.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.347 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4545.954 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 116602.502 ops/s
[info]                  ·gc.alloc.rate:      264.849 MB/sec
[info]                  ·gc.alloc.rate.norm: 3576.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 115569.428 ops/s
[info]                  ·gc.alloc.rate:            262.539 MB/sec
[info]                  ·gc.alloc.rate.norm:       3576.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.345 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4581.311 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 110840.523 ops/s
[info]                  ·gc.alloc.rate:            251.794 MB/sec
[info]                  ·gc.alloc.rate.norm:       3576.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.341 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4776.745 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 116235.195 ops/s
[info]                  ·gc.alloc.rate:            264.044 MB/sec
[info]                  ·gc.alloc.rate.norm:       3576.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.319 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4554.830 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc":
[info]   115141.908 ±(99.9%) 9383.976 ops/s [Average]
[info]   (min, avg, max) = (110840.523, 115141.908, 116602.502), stdev = 2436.989
[info]   CI (99.9%): [105757.933, 124525.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   261.562 ±(99.9%) 21.305 MB/sec [Average]
[info]   (min, avg, max) = (251.794, 261.562, 264.849), stdev = 5.533
[info]   CI (99.9%): [240.256, 282.867] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   3576.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3576.003, 3576.004, 3576.004), stdev = 0.001
[info]   CI (99.9%): [3576.003, 3576.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen":
[info]   269.070 ±(99.9%) 579.194 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.070, 336.347), stdev = 150.415
[info]   CI (99.9%): [≈ 0, 848.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   3691.768 ±(99.9%) 7955.127 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3691.768, 4776.745), stdev = 2065.921
[info]   CI (99.9%): [≈ 0, 11646.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce
[info] # Run progress: 27.96% complete, ETA 00:57:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5305.706 ops/s
[info] # Warmup Iteration   2: 8231.614 ops/s
[info] # Warmup Iteration   3: 8374.417 ops/s
[info] Iteration   1: 8376.700 ops/s
[info]                  ·gc.alloc.rate:            1386.420 MB/sec
[info]                  ·gc.alloc.rate.norm:       260552.053 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1347.779 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 253290.109 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 8377.131 ops/s
[info]                  ·gc.alloc.rate:                                  1386.549 MB/sec
[info]                  ·gc.alloc.rate.norm:                             260552.049 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.027 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.032 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1694.870 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       318489.786 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                625.717 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   3: 8281.896 ops/s
[info]                  ·gc.alloc.rate:                                  1371.201 MB/sec
[info]                  ·gc.alloc.rate.norm:                             260552.049 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.162 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.593 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       258726.381 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 8351.958 ops/s
[info]                  ·gc.alloc.rate:                                  1382.632 MB/sec
[info]                  ·gc.alloc.rate.norm:                             260552.049 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.804 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.440 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       256558.456 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 8289.794 ops/s
[info]                  ·gc.alloc.rate:                                  1372.342 MB/sec
[info]                  ·gc.alloc.rate.norm:                             260552.053 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.498 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.411 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       258476.766 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce":
[info]   8335.496 ±(99.9%) 179.208 ops/s [Average]
[info]   (min, avg, max) = (8281.896, 8335.496, 8377.131), stdev = 46.540
[info]   CI (99.9%): [8156.287, 8514.704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate":
[info]   1379.829 ±(99.9%) 29.005 MB/sec [Average]
[info]   (min, avg, max) = (1371.201, 1379.829, 1386.549), stdev = 7.533
[info]   CI (99.9%): [1350.824, 1408.834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   260552.050 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (260552.049, 260552.050, 260552.053), stdev = 0.002
[info]   CI (99.9%): [260552.042, 260552.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.007 ±(99.9%) 0.043 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.027), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.299 ±(99.9%) 8.123 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.299, 5.032), stdev = 2.109
[info]   CI (99.9%): [≈ 0, 9.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1425.419 ±(99.9%) 580.464 MB/sec [Average]
[info]   (min, avg, max) = (1347.779, 1425.419, 1694.870), stdev = 150.745
[info]   CI (99.9%): [844.955, 2005.883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   269108.300 ±(99.9%) 106626.317 B/op [Average]
[info]   (min, avg, max) = (253290.109, 269108.300, 318489.786), stdev = 27690.516
[info]   CI (99.9%): [162481.983, 375734.617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   125.143 ±(99.9%) 1077.522 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 125.143, 625.717), stdev = 279.829
[info]   CI (99.9%): [≈ 0, 1202.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.600, 13.000), stdev = 4.615
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala
[info] # Run progress: 28.23% complete, ETA 00:57:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4228.720 ops/s
[info] # Warmup Iteration   2: 8362.839 ops/s
[info] # Warmup Iteration   3: 8364.263 ops/s
[info] Iteration   1: 8467.947 ops/s
[info]                  ·gc.alloc.rate:            1319.244 MB/sec
[info]                  ·gc.alloc.rate.norm:       245184.048 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.553 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 250073.615 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   2: 8500.574 ops/s
[info]                  ·gc.alloc.rate:                                  1324.052 MB/sec
[info]                  ·gc.alloc.rate.norm:                             245184.048 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.074 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 13.638 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1352.541 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       250459.586 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                863.229 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   3: 8563.859 ops/s
[info]                  ·gc.alloc.rate:                                  1334.024 MB/sec
[info]                  ·gc.alloc.rate.norm:                             245184.048 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.011 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.029 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.364 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       250208.889 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 8562.254 ops/s
[info]                  ·gc.alloc.rate:            1333.742 MB/sec
[info]                  ·gc.alloc.rate.norm:       245184.051 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.394 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 250267.322 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 8508.917 ops/s
[info]                  ·gc.alloc.rate:            1325.485 MB/sec
[info]                  ·gc.alloc.rate.norm:       245192.507 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.344 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 251825.795 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala":
[info]   8520.710 ±(99.9%) 160.117 ops/s [Average]
[info]   (min, avg, max) = (8467.947, 8520.710, 8563.859), stdev = 41.582
[info]   CI (99.9%): [8360.594, 8680.827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1327.309 ±(99.9%) 24.765 MB/sec [Average]
[info]   (min, avg, max) = (1319.244, 1327.309, 1334.024), stdev = 6.432
[info]   CI (99.9%): [1302.544, 1352.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   245185.740 ±(99.9%) 14.565 B/op [Average]
[info]   (min, avg, max) = (245184.048, 245185.740, 245192.507), stdev = 3.782
[info]   CI (99.9%): [245171.175, 245200.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.017 ±(99.9%) 0.123 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.074), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   3.134 ±(99.9%) 22.864 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.134, 13.638), stdev = 5.938
[info]   CI (99.9%): [≈ 0, 25.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1356.439 ±(99.9%) 27.671 MB/sec [Average]
[info]   (min, avg, max) = (1345.553, 1356.439, 1361.394), stdev = 7.186
[info]   CI (99.9%): [1328.768, 1384.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   250567.041 ±(99.9%) 2761.735 B/op [Average]
[info]   (min, avg, max) = (250073.615, 250567.041, 251825.795), stdev = 717.214
[info]   CI (99.9%): [247805.306, 253328.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   172.646 ±(99.9%) 1486.532 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 172.646, 863.229), stdev = 386.048
[info]   CI (99.9%): [≈ 0, 1659.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.800, 17.000), stdev = 6.058
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala
[info] # Run progress: 28.49% complete, ETA 00:57:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 85671.279 ops/s
[info] # Warmup Iteration   2: 87556.380 ops/s
[info] # Warmup Iteration   3: 90245.628 ops/s
[info] Iteration   1: 90602.541 ops/s
[info]                  ·gc.alloc.rate:      235.790 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 90236.733 ops/s
[info]                  ·gc.alloc.rate:            234.897 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.795 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5890.289 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 90250.437 ops/s
[info]                  ·gc.alloc.rate:            234.852 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.701 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5889.767 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 90616.911 ops/s
[info]                  ·gc.alloc.rate:      235.786 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 90218.965 ops/s
[info]                  ·gc.alloc.rate:            234.743 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.660 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5891.790 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala":
[info]   90385.117 ±(99.9%) 790.941 ops/s [Average]
[info]   (min, avg, max) = (90218.965, 90385.117, 90616.911), stdev = 205.405
[info]   CI (99.9%): [89594.176, 91176.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   235.214 ±(99.9%) 2.031 MB/sec [Average]
[info]   (min, avg, max) = (234.743, 235.214, 235.790), stdev = 0.527
[info]   CI (99.9%): [233.183, 237.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.005, 4096.005, 4096.005), stdev = 0.001
[info]   CI (99.9%): [4096.004, 4096.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   202.631 ±(99.9%) 712.277 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 202.631, 337.795), stdev = 184.976
[info]   CI (99.9%): [≈ 0, 914.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   3534.369 ±(99.9%) 12423.806 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3534.369, 5891.790), stdev = 3226.423
[info]   CI (99.9%): [≈ 0, 15958.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson
[info] # Run progress: 28.76% complete, ETA 00:56:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1838.843 ops/s
[info] # Warmup Iteration   2: 4620.787 ops/s
[info] # Warmup Iteration   3: 4697.206 ops/s
[info] Iteration   1: 4756.259 ops/s
[info]                  ·gc.alloc.rate:            1262.069 MB/sec
[info]                  ·gc.alloc.rate.norm:       417664.092 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.470 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 445264.562 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   2: 4749.173 ops/s
[info]                  ·gc.alloc.rate:                                  1259.905 MB/sec
[info]                  ·gc.alloc.rate.norm:                             417664.093 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.085 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 28.160 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1349.139 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       447245.258 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.995 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1324.517 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        14.000 ms
[info] Iteration   3: 4816.220 ops/s
[info]                  ·gc.alloc.rate:                                  1277.970 MB/sec
[info]                  ·gc.alloc.rate.norm:                             417664.085 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.040 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 13.031 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.438 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       444942.774 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 4834.978 ops/s
[info]                  ·gc.alloc.rate:                                  1282.954 MB/sec
[info]                  ·gc.alloc.rate.norm:                             417664.098 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.040 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.033 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       332395.990 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 4758.555 ops/s
[info]                  ·gc.alloc.rate:                                  1262.630 MB/sec
[info]                  ·gc.alloc.rate.norm:                             417664.086 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.009 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.035 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.203 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       450270.871 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson":
[info]   4783.037 ±(99.9%) 152.358 ops/s [Average]
[info]   (min, avg, max) = (4749.173, 4783.037, 4834.978), stdev = 39.567
[info]   CI (99.9%): [4630.679, 4935.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1269.106 ±(99.9%) 40.681 MB/sec [Average]
[info]   (min, avg, max) = (1259.905, 1269.106, 1282.954), stdev = 10.565
[info]   CI (99.9%): [1228.425, 1309.787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   417664.091 ±(99.9%) 0.021 B/op [Average]
[info]   (min, avg, max) = (417664.085, 417664.091, 417664.098), stdev = 0.005
[info]   CI (99.9%): [417664.070, 417664.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.027 ±(99.9%) 0.140 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.085), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   8.853 ±(99.9%) 46.372 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.853, 28.160), stdev = 12.043
[info]   CI (99.9%): [≈ 0, 55.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1287.656 ±(99.9%) 574.583 MB/sec [Average]
[info]   (min, avg, max) = (1021.033, 1287.656, 1361.438), stdev = 149.217
[info]   CI (99.9%): [713.074, 1862.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   424023.891 ±(99.9%) 197404.885 B/op [Average]
[info]   (min, avg, max) = (332395.990, 424023.891, 450270.871), stdev = 51265.422
[info]   CI (99.9%): [226619.006, 621428.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.880 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.995), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   264.903 ±(99.9%) 2280.898 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 264.903, 1324.517), stdev = 592.342
[info]   CI (99.9%): [≈ 0, 2545.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.400, 17.000), stdev = 6.656
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce
[info] # Run progress: 29.03% complete, ETA 00:56:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15336.379 ops/s
[info] # Warmup Iteration   2: 24241.634 ops/s
[info] # Warmup Iteration   3: 24078.295 ops/s
[info] Iteration   1: 23749.369 ops/s
[info]                  ·gc.alloc.rate:            1334.922 MB/sec
[info]                  ·gc.alloc.rate.norm:       88480.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.039 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 89349.464 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   2: 23788.961 ops/s
[info]                  ·gc.alloc.rate:                                  1337.273 MB/sec
[info]                  ·gc.alloc.rate.norm:                             88478.302 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.022 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.439 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1354.831 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       89639.961 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                220.354 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   3: 24612.972 ops/s
[info]                  ·gc.alloc.rate:                                  1383.683 MB/sec
[info]                  ·gc.alloc.rate.norm:                             88480.017 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.021 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.359 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.561 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       87065.416 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   4: 24551.985 ops/s
[info]                  ·gc.alloc.rate:                                  1380.330 MB/sec
[info]                  ·gc.alloc.rate.norm:                             88480.017 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.504 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.580 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       87278.142 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 24218.870 ops/s
[info]                  ·gc.alloc.rate:            1361.546 MB/sec
[info]                  ·gc.alloc.rate.norm:       88480.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.401 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 88470.624 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce":
[info]   24184.431 ±(99.9%) 1570.767 ops/s [Average]
[info]   (min, avg, max) = (23749.369, 24184.431, 24612.972), stdev = 407.923
[info]   CI (99.9%): [22613.665, 25755.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1359.551 ±(99.9%) 88.669 MB/sec [Average]
[info]   (min, avg, max) = (1334.922, 1359.551, 1383.683), stdev = 23.027
[info]   CI (99.9%): [1270.881, 1448.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   88479.674 ±(99.9%) 2.954 B/op [Average]
[info]   (min, avg, max) = (88478.302, 88479.674, 88480.019), stdev = 0.767
[info]   CI (99.9%): [88476.720, 88482.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.010 ±(99.9%) 0.042 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.022), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.660 ±(99.9%) 2.717 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.660, 1.439), stdev = 0.706
[info]   CI (99.9%): [≈ 0, 3.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1357.482 ±(99.9%) 23.183 MB/sec [Average]
[info]   (min, avg, max) = (1348.039, 1357.482, 1361.580), stdev = 6.021
[info]   CI (99.9%): [1334.299, 1380.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   88360.722 ±(99.9%) 4505.392 B/op [Average]
[info]   (min, avg, max) = (87065.416, 88360.722, 89639.961), stdev = 1170.036
[info]   CI (99.9%): [83855.329, 92866.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   44.071 ±(99.9%) 379.463 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 44.071, 220.354), stdev = 98.545
[info]   CI (99.9%): [≈ 0, 423.533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.600, 14.000), stdev = 4.393
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala
[info] # Run progress: 29.30% complete, ETA 00:56:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15109.294 ops/s
[info] # Warmup Iteration   2: 28346.481 ops/s
[info] # Warmup Iteration   3: 28379.823 ops/s
[info] Iteration   1: 28343.339 ops/s
[info]                  ·gc.alloc.rate:            1384.780 MB/sec
[info]                  ·gc.alloc.rate.norm:       76912.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.288 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 74718.623 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   2: 28517.382 ops/s
[info]                  ·gc.alloc.rate:                                  1393.234 MB/sec
[info]                  ·gc.alloc.rate.norm:                             76912.019 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.104 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.753 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1357.184 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       74921.919 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                220.575 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 29553.849 ops/s
[info]                  ·gc.alloc.rate:            1444.038 MB/sec
[info]                  ·gc.alloc.rate.norm:       76912.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.709 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 90636.073 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 29681.519 ops/s
[info]                  ·gc.alloc.rate:            1451.068 MB/sec
[info]                  ·gc.alloc.rate.norm:       76912.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.097 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 72196.225 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 29656.804 ops/s
[info]                  ·gc.alloc.rate:                                  1449.798 MB/sec
[info]                  ·gc.alloc.rate.norm:                             76912.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.139 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.006 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       72254.639 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala":
[info]   29150.579 ±(99.9%) 2549.407 ops/s [Average]
[info]   (min, avg, max) = (28343.339, 29150.579, 29681.519), stdev = 662.073
[info]   CI (99.9%): [26601.172, 31699.985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1424.584 ±(99.9%) 125.998 MB/sec [Average]
[info]   (min, avg, max) = (1384.780, 1424.584, 1451.068), stdev = 32.721
[info]   CI (99.9%): [1298.585, 1550.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   76912.015 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (76912.014, 76912.015, 76912.019), stdev = 0.002
[info]   CI (99.9%): [76912.006, 76912.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.021 ±(99.9%) 0.178 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.104), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.178 ±(99.9%) 9.850 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.178, 5.753), stdev = 2.558
[info]   CI (99.9%): [≈ 0, 11.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1425.657 ±(99.9%) 594.809 MB/sec [Average]
[info]   (min, avg, max) = (1345.288, 1425.657, 1701.709), stdev = 154.470
[info]   CI (99.9%): [830.848, 2020.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   76945.496 ±(99.9%) 29891.852 B/op [Average]
[info]   (min, avg, max) = (72196.225, 76945.496, 90636.073), stdev = 7762.819
[info]   CI (99.9%): [47053.644, 106837.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   44.115 ±(99.9%) 379.843 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 44.115, 220.575), stdev = 98.644
[info]   CI (99.9%): [≈ 0, 423.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.400, 17.000), stdev = 5.639
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala
[info] # Run progress: 29.57% complete, ETA 00:56:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 300182.154 ops/s
[info] # Warmup Iteration   2: 326375.223 ops/s
[info] # Warmup Iteration   3: 346857.840 ops/s
[info] Iteration   1: 351361.647 ops/s
[info]                  ·gc.alloc.rate:            775.045 MB/sec
[info]                  ·gc.alloc.rate.norm:       3472.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.701 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3013.527 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 350516.649 ops/s
[info]                  ·gc.alloc.rate:            773.156 MB/sec
[info]                  ·gc.alloc.rate.norm:       3472.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.076 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4531.443 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 347403.422 ops/s
[info]                  ·gc.alloc.rate:            766.285 MB/sec
[info]                  ·gc.alloc.rate.norm:       3472.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.710 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3048.019 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 351643.671 ops/s
[info]                  ·gc.alloc.rate:                   775.671 MB/sec
[info]                  ·gc.alloc.rate.norm:              3472.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.739 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3011.265 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.981 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 352331.078 ops/s
[info]                  ·gc.alloc.rate:                                  777.265 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3472.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.076 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.339 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.899 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4546.903 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                14.879 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala":
[info]   350651.293 ±(99.9%) 7426.325 ops/s [Average]
[info]   (min, avg, max) = (347403.422, 350651.293, 352331.078), stdev = 1928.593
[info]   CI (99.9%): [343224.968, 358077.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   773.484 ±(99.9%) 16.500 MB/sec [Average]
[info]   (min, avg, max) = (766.285, 773.484, 777.265), stdev = 4.285
[info]   CI (99.9%): [756.984, 789.985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3472.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3472.001, 3472.001, 3472.001), stdev = 0.001
[info]   CI (99.9%): [3472.001, 3472.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.015 ±(99.9%) 0.131 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.076), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.068 ±(99.9%) 0.583 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.068, 0.339), stdev = 0.151
[info]   CI (99.9%): [≈ 0, 0.651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   809.025 ±(99.9%) 718.815 MB/sec [Average]
[info]   (min, avg, max) = (672.701, 809.025, 1017.899), stdev = 186.674
[info]   CI (99.9%): [90.210, 1527.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   3630.231 ±(99.9%) 3195.620 B/op [Average]
[info]   (min, avg, max) = (3011.265, 3630.231, 4546.903), stdev = 829.892
[info]   CI (99.9%): [434.611, 6825.852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.561 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.331), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   3.572 ±(99.9%) 24.841 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.572, 14.879), stdev = 6.451
[info]   CI (99.9%): [≈ 0, 28.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.000, 9.000), stdev = 1.225
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 29.84% complete, ETA 00:55:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 344143.012 ops/s
[info] # Warmup Iteration   2: 370686.322 ops/s
[info] # Warmup Iteration   3: 377103.521 ops/s
[info] Iteration   1: 377002.065 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 362788.097 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 376738.089 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 361630.778 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 378039.709 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc":
[info]   371239.748 ±(99.9%) 31837.063 ops/s [Average]
[info]   (min, avg, max) = (361630.778, 371239.748, 378039.709), stdev = 8267.984
[info]   CI (99.9%): [339402.685, 403076.810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson
[info] # Run progress: 30.11% complete, ETA 00:55:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16286.006 ops/s
[info] # Warmup Iteration   2: 27661.248 ops/s
[info] # Warmup Iteration   3: 27883.466 ops/s
[info] Iteration   1: 27922.067 ops/s
[info]                  ·gc.alloc.rate:            1469.011 MB/sec
[info]                  ·gc.alloc.rate.norm:       82792.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.747 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 75845.007 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   2: 28042.387 ops/s
[info]                  ·gc.alloc.rate:                                  1475.242 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82792.018 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.091 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.090 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1698.080 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       95297.901 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                224.318 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   3: 27567.942 ops/s
[info]                  ·gc.alloc.rate:                                  1450.525 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82792.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.135 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.864 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       77731.453 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 28282.861 ops/s
[info]                  ·gc.alloc.rate:            1487.687 MB/sec
[info]                  ·gc.alloc.rate.norm:       82792.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.450 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 75766.733 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 27528.909 ops/s
[info]                  ·gc.alloc.rate:                                  1447.951 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82792.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.159 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.777 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       97305.476 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson":
[info]   27868.833 ±(99.9%) 1233.495 ops/s [Average]
[info]   (min, avg, max) = (27528.909, 27868.833, 28282.861), stdev = 320.335
[info]   CI (99.9%): [26635.338, 29102.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1466.083 ±(99.9%) 64.720 MB/sec [Average]
[info]   (min, avg, max) = (1447.951, 1466.083, 1487.687), stdev = 16.808
[info]   CI (99.9%): [1401.363, 1530.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   82792.016 ±(99.9%) 0.005 B/op [Average]
[info]   (min, avg, max) = (82792.014, 82792.016, 82792.018), stdev = 0.001
[info]   CI (99.9%): [82792.011, 82792.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.019 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.091), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.077 ±(99.9%) 8.644 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.077, 5.090), stdev = 2.245
[info]   CI (99.9%): [≈ 0, 9.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1493.783 ±(99.9%) 725.078 MB/sec [Average]
[info]   (min, avg, max) = (1345.747, 1493.783, 1701.777), stdev = 188.300
[info]   CI (99.9%): [768.706, 2218.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   84389.314 ±(99.9%) 42071.951 B/op [Average]
[info]   (min, avg, max) = (75766.733, 84389.314, 97305.476), stdev = 10925.952
[info]   CI (99.9%): [42317.363, 126461.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   44.864 ±(99.9%) 386.290 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 44.864, 224.318), stdev = 100.318
[info]   CI (99.9%): [≈ 0, 431.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.200, 15.000), stdev = 4.919
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce
[info] # Run progress: 30.38% complete, ETA 00:55:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 104742.883 ops/s
[info] # Warmup Iteration   2: 132444.480 ops/s
[info] # Warmup Iteration   3: 133763.039 ops/s
[info] Iteration   1: 136432.083 ops/s
[info]                  ·gc.alloc.rate:                                  2222.450 MB/sec
[info]                  ·gc.alloc.rate.norm:                             25640.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.045 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.266 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       23561.261 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 135154.862 ops/s
[info]                  ·gc.alloc.rate:                                  2201.711 MB/sec
[info]                  ·gc.alloc.rate.norm:                             25640.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.009 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.104 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.657 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       27747.206 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 134883.043 ops/s
[info]                  ·gc.alloc.rate:                                  2197.054 MB/sec
[info]                  ·gc.alloc.rate.norm:                             25640.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.076 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.081 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       23831.449 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 135568.318 ops/s
[info]                  ·gc.alloc.rate:                                  2208.653 MB/sec
[info]                  ·gc.alloc.rate.norm:                             25640.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.031 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.924 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       27663.097 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 132731.810 ops/s
[info]                  ·gc.alloc.rate:                                  2162.164 MB/sec
[info]                  ·gc.alloc.rate.norm:                             25640.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.043 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.138 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       24216.682 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce":
[info]   134954.023 ±(99.9%) 5288.725 ops/s [Average]
[info]   (min, avg, max) = (132731.810, 134954.023, 136432.083), stdev = 1373.465
[info]   CI (99.9%): [129665.298, 140242.748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   2198.406 ±(99.9%) 86.304 MB/sec [Average]
[info]   (min, avg, max) = (2162.164, 2198.406, 2222.450), stdev = 22.413
[info]   CI (99.9%): [2112.102, 2284.710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   25640.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (25640.003, 25640.003, 25640.003), stdev = 0.001
[info]   CI (99.9%): [25640.003, 25640.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.005 ±(99.9%) 0.010 MB/sec [Average]
[info]   (min, avg, max) = (0.003, 0.005, 0.009), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.060 ±(99.9%) 0.115 B/op [Average]
[info]   (min, avg, max) = (0.031, 0.060, 0.104), stdev = 0.030
[info]   CI (99.9%): [≈ 0, 0.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2178.413 ±(99.9%) 718.414 MB/sec [Average]
[info]   (min, avg, max) = (2042.081, 2178.413, 2382.924), stdev = 186.570
[info]   CI (99.9%): [1459.999, 2896.828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   25403.939 ±(99.9%) 8139.460 B/op [Average]
[info]   (min, avg, max) = (23561.261, 25403.939, 27747.206), stdev = 2113.792
[info]   CI (99.9%): [17264.479, 33543.399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.count":
[info]   32.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava
[info] # Run progress: 30.65% complete, ETA 00:55:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.976 ops/s
[info] # Warmup Iteration   2: 457347.261 ops/s
[info] # Warmup Iteration   3: 476448.669 ops/s
[info] Iteration   1: 481321.979 ops/s
[info]                  ·gc.alloc.rate:                   499.113 MB/sec
[info]                  ·gc.alloc.rate.norm:              1632.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             333.078 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1089.099 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.178 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 479280.702 ops/s
[info]                  ·gc.alloc.rate:            497.207 MB/sec
[info]                  ·gc.alloc.rate.norm:       1632.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.286 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2190.258 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 482213.940 ops/s
[info]                  ·gc.alloc.rate:            499.964 MB/sec
[info]                  ·gc.alloc.rate.norm:       1632.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.688 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1089.236 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 479110.544 ops/s
[info]                  ·gc.alloc.rate:            497.409 MB/sec
[info]                  ·gc.alloc.rate.norm:       1632.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      665.868 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2184.715 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 474373.691 ops/s
[info]                  ·gc.alloc.rate:            491.835 MB/sec
[info]                  ·gc.alloc.rate.norm:       1632.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.680 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1107.214 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava":
[info]   479260.171 ±(99.9%) 11691.683 ops/s [Average]
[info]   (min, avg, max) = (474373.691, 479260.171, 482213.940), stdev = 3036.293
[info]   CI (99.9%): [467568.488, 490951.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   497.106 ±(99.9%) 12.189 MB/sec [Average]
[info]   (min, avg, max) = (491.835, 497.106, 499.964), stdev = 3.166
[info]   CI (99.9%): [484.916, 509.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   1632.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1632.001, 1632.001, 1632.001), stdev = 0.001
[info]   CI (99.9%): [1632.001, 1632.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   466.720 ±(99.9%) 702.529 MB/sec [Average]
[info]   (min, avg, max) = (333.078, 466.720, 667.286), stdev = 182.445
[info]   CI (99.9%): [≈ 0, 1169.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   1532.104 ±(99.9%) 2303.947 B/op [Average]
[info]   (min, avg, max) = (1089.099, 1532.104, 2190.258), stdev = 598.328
[info]   CI (99.9%): [≈ 0, 3836.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   0.436 ±(99.9%) 3.751 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.436, 2.178), stdev = 0.974
[info]   CI (99.9%): [≈ 0, 4.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.000, 10.000), stdev = 2.739
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala
[info] # Run progress: 30.91% complete, ETA 00:55:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 180814.355 ops/s
[info] # Warmup Iteration   2: 279721.465 ops/s
[info] # Warmup Iteration   3: 279712.959 ops/s
[info] Iteration   1: 281716.701 ops/s
[info]                  ·gc.alloc.rate:            403.744 MB/sec
[info]                  ·gc.alloc.rate.norm:       2256.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.327 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1879.295 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 281812.693 ops/s
[info]                  ·gc.alloc.rate:            403.847 MB/sec
[info]                  ·gc.alloc.rate.norm:       2256.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.306 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1878.695 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 281618.957 ops/s
[info]                  ·gc.alloc.rate:            403.610 MB/sec
[info]                  ·gc.alloc.rate.norm:       2256.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.345 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1880.016 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 281495.411 ops/s
[info]                  ·gc.alloc.rate:            403.450 MB/sec
[info]                  ·gc.alloc.rate.norm:       2256.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.356 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1880.830 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 280851.691 ops/s
[info]                  ·gc.alloc.rate:            402.538 MB/sec
[info]                  ·gc.alloc.rate.norm:       2256.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.732 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3770.285 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala":
[info]   281499.091 ±(99.9%) 1465.280 ops/s [Average]
[info]   (min, avg, max) = (280851.691, 281499.091, 281812.693), stdev = 380.529
[info]   CI (99.9%): [280033.810, 282964.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   403.438 ±(99.9%) 2.020 MB/sec [Average]
[info]   (min, avg, max) = (402.538, 403.438, 403.847), stdev = 0.525
[info]   CI (99.9%): [401.418, 405.458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2256.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2256.001, 2256.001, 2256.002), stdev = 0.001
[info]   CI (99.9%): [2256.001, 2256.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   403.613 ±(99.9%) 579.299 MB/sec [Average]
[info]   (min, avg, max) = (336.306, 403.613, 672.732), stdev = 150.442
[info]   CI (99.9%): [≈ 0, 982.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   2257.824 ±(99.9%) 3255.687 B/op [Average]
[info]   (min, avg, max) = (1878.695, 2257.824, 3770.285), stdev = 845.492
[info]   CI (99.9%): [≈ 0, 5513.512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 8.000), stdev = 1.732
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala
[info] # Run progress: 31.18% complete, ETA 00:54:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 668746.945 ops/s
[info] # Warmup Iteration   2: 729878.041 ops/s
[info] # Warmup Iteration   3: 733517.387 ops/s
[info] Iteration   1: 738095.635 ops/s
[info]                  ·gc.alloc.rate:            480.105 MB/sec
[info]                  ·gc.alloc.rate.norm:       1024.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.979 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 718.732 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 734751.519 ops/s
[info]                  ·gc.alloc.rate:            477.923 MB/sec
[info]                  ·gc.alloc.rate.norm:       1024.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.957 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1444.025 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 737897.622 ops/s
[info]                  ·gc.alloc.rate:            480.020 MB/sec
[info]                  ·gc.alloc.rate.norm:       1024.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.006 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 718.916 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 737861.091 ops/s
[info]                  ·gc.alloc.rate:            480.024 MB/sec
[info]                  ·gc.alloc.rate.norm:       1024.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.032 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 718.965 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 735072.174 ops/s
[info]                  ·gc.alloc.rate:            478.186 MB/sec
[info]                  ·gc.alloc.rate.norm:       1024.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.031 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1443.388 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala":
[info]   736735.608 ±(99.9%) 6434.806 ops/s [Average]
[info]   (min, avg, max) = (734751.519, 736735.608, 738095.635), stdev = 1671.099
[info]   CI (99.9%): [730300.802, 743170.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   479.252 ±(99.9%) 4.226 MB/sec [Average]
[info]   (min, avg, max) = (477.923, 479.252, 480.105), stdev = 1.097
[info]   CI (99.9%): [475.026, 483.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1024.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1024.001, 1024.001, 1024.001), stdev = 0.001
[info]   CI (99.9%): [1024.000, 1024.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   471.801 ±(99.9%) 710.737 MB/sec [Average]
[info]   (min, avg, max) = (336.979, 471.801, 674.031), stdev = 184.576
[info]   CI (99.9%): [≈ 0, 1182.538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1008.805 ±(99.9%) 1528.740 B/op [Average]
[info]   (min, avg, max) = (718.732, 1008.805, 1444.025), stdev = 397.009
[info]   CI (99.9%): [≈ 0, 2537.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 6.000), stdev = 1.643
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson
[info] # Run progress: 31.45% complete, ETA 00:54:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37773.236 ops/s
[info] # Warmup Iteration   2: 68675.016 ops/s
[info] # Warmup Iteration   3: 68817.680 ops/s
[info] Iteration   1: 70795.217 ops/s
[info]                  ·gc.alloc.rate:                                  3099.664 MB/sec
[info]                  ·gc.alloc.rate.norm:                             68920.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.015 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.326 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.110 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       68107.237 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   2: 70450.242 ops/s
[info]                  ·gc.alloc.rate:                                  3084.241 MB/sec
[info]                  ·gc.alloc.rate.norm:                             68920.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.012 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.264 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3403.102 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       76045.236 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   3: 69969.822 ops/s
[info]                  ·gc.alloc.rate:                                  3064.623 MB/sec
[info]                  ·gc.alloc.rate.norm:                             68920.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.059 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.966 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       68905.224 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   4: 70948.096 ops/s
[info]                  ·gc.alloc.rate:                                  3106.590 MB/sec
[info]                  ·gc.alloc.rate.norm:                             68920.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.018 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.407 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.291 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       67959.428 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   5: 70598.883 ops/s
[info]                  ·gc.alloc.rate:                                  3091.265 MB/sec
[info]                  ·gc.alloc.rate.norm:                             68920.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.146 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.246 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       68295.323 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson":
[info]   70552.452 ±(99.9%) 1450.433 ops/s [Average]
[info]   (min, avg, max) = (69969.822, 70552.452, 70948.096), stdev = 376.673
[info]   CI (99.9%): [69102.019, 72002.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3089.277 ±(99.9%) 62.231 MB/sec [Average]
[info]   (min, avg, max) = (3064.623, 3089.277, 3106.590), stdev = 16.161
[info]   CI (99.9%): [3027.045, 3151.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   68920.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (68920.006, 68920.006, 68920.006), stdev = 0.001
[info]   CI (99.9%): [68920.005, 68920.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.011 ±(99.9%) 0.024 MB/sec [Average]
[info]   (min, avg, max) = (0.003, 0.011, 0.018), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.240 ±(99.9%) 0.536 B/op [Average]
[info]   (min, avg, max) = (0.059, 0.240, 0.407), stdev = 0.139
[info]   CI (99.9%): [≈ 0, 0.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   3131.343 ±(99.9%) 584.983 MB/sec [Average]
[info]   (min, avg, max) = (3063.110, 3131.343, 3403.102), stdev = 151.918
[info]   CI (99.9%): [2546.360, 3716.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   69862.490 ±(99.9%) 13380.818 B/op [Average]
[info]   (min, avg, max) = (67959.428, 69862.490, 76045.236), stdev = 3474.956
[info]   CI (99.9%): [56481.672, 83243.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.count":
[info]   46.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.200, 10.000), stdev = 0.447
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.200, 9.000), stdev = 0.447
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce
[info] # Run progress: 31.72% complete, ETA 00:54:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 171889.488 ops/s
[info] # Warmup Iteration   2: 220889.836 ops/s
[info] # Warmup Iteration   3: 221401.397 ops/s
[info] Iteration   1: 219692.695 ops/s
[info]                  ·gc.alloc.rate:                                  1542.065 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11048.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.033 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.239 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1688.525 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       12097.302 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                23.861 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        15.000 ms
[info] Iteration   2: 223652.332 ops/s
[info]                  ·gc.alloc.rate:                                  1570.054 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11048.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.050 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.349 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.077 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11977.002 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   3: 223635.934 ops/s
[info]                  ·gc.alloc.rate:                                  1569.582 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11048.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.282 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9581.816 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 219621.647 ops/s
[info]                  ·gc.alloc.rate:                                  1541.936 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11048.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.270 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       12196.796 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 220722.220 ops/s
[info]                  ·gc.alloc.rate:                                  1549.918 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11048.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.038 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9708.773 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce":
[info]   221464.966 ±(99.9%) 7841.549 ops/s [Average]
[info]   (min, avg, max) = (219621.647, 221464.966, 223652.332), stdev = 2036.425
[info]   CI (99.9%): [213623.417, 229306.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1554.711 ±(99.9%) 54.546 MB/sec [Average]
[info]   (min, avg, max) = (1541.936, 1554.711, 1570.054), stdev = 14.165
[info]   CI (99.9%): [1500.165, 1609.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   11048.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11048.002, 11048.002, 11048.002), stdev = 0.001
[info]   CI (99.9%): [11048.002, 11048.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.018 ±(99.9%) 0.087 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.018, 0.050), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.125 ±(99.9%) 0.614 B/op [Average]
[info]   (min, avg, max) = (0.007, 0.125, 0.349), stdev = 0.160
[info]   CI (99.9%): [≈ 0, 0.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1563.238 ±(99.9%) 708.902 MB/sec [Average]
[info]   (min, avg, max) = (1361.282, 1563.238, 1702.270), stdev = 184.100
[info]   CI (99.9%): [854.336, 2272.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   11112.338 ±(99.9%) 5168.455 B/op [Average]
[info]   (min, avg, max) = (9581.816, 11112.338, 12196.796), stdev = 1342.231
[info]   CI (99.9%): [5943.883, 16280.793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   4.772 ±(99.9%) 41.089 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.772, 23.861), stdev = 10.671
[info]   CI (99.9%): [≈ 0, 45.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.400, 15.000), stdev = 4.980
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava
[info] # Run progress: 31.99% complete, ETA 00:54:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16100.426 ops/s
[info] # Warmup Iteration   2: 1149643.073 ops/s
[info] # Warmup Iteration   3: 1150128.338 ops/s
[info] Iteration   1: 1177910.509 ops/s
[info]                  ·gc.alloc.rate:            640.566 MB/sec
[info]                  ·gc.alloc.rate.norm:       856.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.391 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 891.847 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 1160462.599 ops/s
[info]                  ·gc.alloc.rate:            631.025 MB/sec
[info]                  ·gc.alloc.rate.norm:       856.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.343 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 905.267 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 1180316.017 ops/s
[info]                  ·gc.alloc.rate:            641.911 MB/sec
[info]                  ·gc.alloc.rate.norm:       856.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.396 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 889.985 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 1181275.995 ops/s
[info]                  ·gc.alloc.rate:            642.452 MB/sec
[info]                  ·gc.alloc.rate.norm:       856.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.418 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 889.266 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 1181146.613 ops/s
[info]                  ·gc.alloc.rate:            642.319 MB/sec
[info]                  ·gc.alloc.rate.norm:       856.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.359 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 889.371 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava":
[info]   1176222.347 ±(99.9%) 34320.744 ops/s [Average]
[info]   (min, avg, max) = (1160462.599, 1176222.347, 1181275.995), stdev = 8912.988
[info]   CI (99.9%): [1141901.602, 1210543.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   639.654 ±(99.9%) 18.797 MB/sec [Average]
[info]   (min, avg, max) = (631.025, 639.654, 642.452), stdev = 4.882
[info]   CI (99.9%): [620.857, 658.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   856.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (856.000, 856.000, 856.000), stdev = 0.001
[info]   CI (99.9%): [856.000, 856.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   667.381 ±(99.9%) 0.116 MB/sec [Average]
[info]   (min, avg, max) = (667.343, 667.381, 667.418), stdev = 0.030
[info]   CI (99.9%): [667.265, 667.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   893.147 ±(99.9%) 26.392 B/op [Average]
[info]   (min, avg, max) = (889.266, 893.147, 905.267), stdev = 6.854
[info]   CI (99.9%): [866.755, 919.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.time":
[info]   49.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 9.800, 10.000), stdev = 0.447
[info]   CI (99.9%): [49.000, 49.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJavaPrealloc
[info] # Run progress: 32.26% complete, ETA 00:54:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13579.997 ops/s
[info] # Warmup Iteration   2: 1225512.192 ops/s
[info] # Warmup Iteration   3: 1226265.168 ops/s
[info] Iteration   1: 1229627.571 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1229264.601 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1229949.709 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1229915.771 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1226895.990 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJavaPrealloc":
[info]   1229130.729 ±(99.9%) 4925.909 ops/s [Average]
[info]   (min, avg, max) = (1226895.990, 1229130.729, 1229949.709), stdev = 1279.243
[info]   CI (99.9%): [1224204.820, 1234056.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJavaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJavaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJavaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala
[info] # Run progress: 32.53% complete, ETA 00:53:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 541090.413 ops/s
[info] # Warmup Iteration   2: 834212.519 ops/s
[info] # Warmup Iteration   3: 840459.857 ops/s
[info] Iteration   1: 838328.349 ops/s
[info]                  ·gc.alloc.rate:            660.340 MB/sec
[info]                  ·gc.alloc.rate.norm:       1240.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.635 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1263.090 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 838073.729 ops/s
[info]                  ·gc.alloc.rate:            660.148 MB/sec
[info]                  ·gc.alloc.rate.norm:       1240.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.650 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1263.485 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 845376.942 ops/s
[info]                  ·gc.alloc.rate:            666.035 MB/sec
[info]                  ·gc.alloc.rate.norm:       1240.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.784 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1252.566 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 848422.839 ops/s
[info]                  ·gc.alloc.rate:            668.578 MB/sec
[info]                  ·gc.alloc.rate.norm:       1240.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.932 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1248.077 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 841158.909 ops/s
[info]                  ·gc.alloc.rate:                   662.752 MB/sec
[info]                  ·gc.alloc.rate.norm:              1240.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.155 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1257.593 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 8.725 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala":
[info]   842272.154 ±(99.9%) 17422.869 ops/s [Average]
[info]   (min, avg, max) = (838073.729, 842272.154, 848422.839), stdev = 4524.664
[info]   CI (99.9%): [824849.285, 859695.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   663.570 ±(99.9%) 14.144 MB/sec [Average]
[info]   (min, avg, max) = (660.148, 663.570, 668.578), stdev = 3.673
[info]   CI (99.9%): [649.426, 677.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1240.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1240.000, 1240.000, 1240.001), stdev = 0.001
[info]   CI (99.9%): [1240.000, 1240.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   672.631 ±(99.9%) 1.125 MB/sec [Average]
[info]   (min, avg, max) = (672.155, 672.631, 672.932), stdev = 0.292
[info]   CI (99.9%): [671.506, 673.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1256.962 ±(99.9%) 25.743 B/op [Average]
[info]   (min, avg, max) = (1248.077, 1256.962, 1263.485), stdev = 6.685
[info]   CI (99.9%): [1231.219, 1282.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 8.030 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.663), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.745 ±(99.9%) 15.024 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.745, 8.725), stdev = 3.902
[info]   CI (99.9%): [≈ 0, 16.769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.200, 9.000), stdev = 0.447
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala
[info] # Run progress: 32.80% complete, ETA 00:53:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 924036.072 ops/s
[info] # Warmup Iteration   2: 1047732.116 ops/s
[info] # Warmup Iteration   3: 1056793.818 ops/s
[info] Iteration   1: 1041935.231 ops/s
[info]                  ·gc.alloc.rate:            566.627 MB/sec
[info]                  ·gc.alloc.rate.norm:       856.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.699 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1016.243 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 1055084.420 ops/s
[info]                  ·gc.alloc.rate:            573.730 MB/sec
[info]                  ·gc.alloc.rate.norm:       856.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.649 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1003.587 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 1051232.508 ops/s
[info]                  ·gc.alloc.rate:            571.665 MB/sec
[info]                  ·gc.alloc.rate.norm:       856.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.701 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1007.290 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 1058572.152 ops/s
[info]                  ·gc.alloc.rate:            575.677 MB/sec
[info]                  ·gc.alloc.rate.norm:       856.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.365 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 500.156 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 1056091.845 ops/s
[info]                  ·gc.alloc.rate:            574.281 MB/sec
[info]                  ·gc.alloc.rate.norm:       856.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.668 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1002.653 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala":
[info]   1052583.231 ±(99.9%) 25076.374 ops/s [Average]
[info]   (min, avg, max) = (1041935.231, 1052583.231, 1058572.152), stdev = 6512.255
[info]   CI (99.9%): [1027506.857, 1077659.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   572.396 ±(99.9%) 13.602 MB/sec [Average]
[info]   (min, avg, max) = (566.627, 572.396, 575.677), stdev = 3.533
[info]   CI (99.9%): [558.794, 585.999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   856.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (856.000, 856.000, 856.000), stdev = 0.001
[info]   CI (99.9%): [856.000, 856.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   605.417 ±(99.9%) 579.154 MB/sec [Average]
[info]   (min, avg, max) = (336.365, 605.417, 672.701), stdev = 150.405
[info]   CI (99.9%): [26.262, 1184.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   905.986 ±(99.9%) 873.824 B/op [Average]
[info]   (min, avg, max) = (500.156, 905.986, 1016.243), stdev = 226.929
[info]   CI (99.9%): [32.162, 1779.810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 7.000), stdev = 1.643
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 33.06% complete, ETA 00:53:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1016319.509 ops/s
[info] # Warmup Iteration   2: 1115004.309 ops/s
[info] # Warmup Iteration   3: 1112439.113 ops/s
[info] Iteration   1: 1114375.033 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1115840.520 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1073657.819 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1115146.596 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1116684.987 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   1107140.991 ±(99.9%) 72149.846 ops/s [Average]
[info]   (min, avg, max) = (1073657.819, 1107140.991, 1116684.987), stdev = 18737.086
[info]   CI (99.9%): [1034991.145, 1179290.837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson
[info] # Run progress: 33.33% complete, ETA 00:53:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17765.791 ops/s
[info] # Warmup Iteration   2: 29842.612 ops/s
[info] # Warmup Iteration   3: 29870.635 ops/s
[info] Iteration   1: 30094.933 ops/s
[info]                  ·gc.alloc.rate:                   1577.314 MB/sec
[info]                  ·gc.alloc.rate.norm:              82504.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.327 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        70369.552 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 209.018 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   2: 30425.941 ops/s
[info]                  ·gc.alloc.rate:                                  1595.140 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82489.591 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.144 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 7.426 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.449 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       88038.897 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 30638.090 ops/s
[info]                  ·gc.alloc.rate:                                  1605.634 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82488.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.137 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.771 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       87426.957 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 30533.014 ops/s
[info]                  ·gc.alloc.rate:            1600.030 MB/sec
[info]                  ·gc.alloc.rate.norm:       82488.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.718 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 87730.424 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 30183.250 ops/s
[info]                  ·gc.alloc.rate:                                  1581.710 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82488.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.068 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.389 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       70998.057 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson":
[info]   30375.046 ±(99.9%) 886.454 ops/s [Average]
[info]   (min, avg, max) = (30094.933, 30375.046, 30638.090), stdev = 230.209
[info]   CI (99.9%): [29488.592, 31261.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1591.965 ±(99.9%) 46.440 MB/sec [Average]
[info]   (min, avg, max) = (1577.314, 1591.965, 1605.634), stdev = 12.060
[info]   CI (99.9%): [1545.525, 1638.406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   82491.530 ±(99.9%) 27.008 B/op [Average]
[info]   (min, avg, max) = (82488.013, 82491.530, 82504.017), stdev = 7.014
[info]   CI (99.9%): [82464.521, 82518.538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.030 ±(99.9%) 0.246 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.144), stdev = 0.064
[info]   CI (99.9%): [≈ 0, 0.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.526 ±(99.9%) 12.701 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.526, 7.426), stdev = 3.298
[info]   CI (99.9%): [≈ 0, 14.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1562.531 ±(99.9%) 735.598 MB/sec [Average]
[info]   (min, avg, max) = (1345.327, 1562.531, 1702.449), stdev = 191.032
[info]   CI (99.9%): [826.933, 2298.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   80912.777 ±(99.9%) 35976.108 B/op [Average]
[info]   (min, avg, max) = (70369.552, 80912.777, 88038.897), stdev = 9342.881
[info]   CI (99.9%): [44936.669, 116888.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   41.804 ±(99.9%) 359.942 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 41.804, 209.018), stdev = 93.476
[info]   CI (99.9%): [≈ 0, 401.746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.600, 16.000), stdev = 5.273
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce
[info] # Run progress: 33.60% complete, ETA 00:52:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 89292.814 ops/s
[info] # Warmup Iteration   2: 118171.248 ops/s
[info] # Warmup Iteration   3: 116076.905 ops/s
[info] Iteration   1: 114906.302 ops/s
[info]                  ·gc.alloc.rate:                   1418.109 MB/sec
[info]                  ·gc.alloc.rate.norm:              19424.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1684.646 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        23074.803 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 54.744 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         20.000 ms
[info] Iteration   2: 117175.383 ops/s
[info]                  ·gc.alloc.rate:                                  1446.172 MB/sec
[info]                  ·gc.alloc.rate.norm:                             19424.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.057 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.769 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.657 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       18288.856 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 120266.892 ops/s
[info]                  ·gc.alloc.rate:                                  1484.697 MB/sec
[info]                  ·gc.alloc.rate.norm:                             19424.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.028 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.916 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       17817.685 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 118833.959 ops/s
[info]                  ·gc.alloc.rate:                                  1466.450 MB/sec
[info]                  ·gc.alloc.rate.norm:                             19424.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.014 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.184 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.816 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       22541.578 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 118656.461 ops/s
[info]                  ·gc.alloc.rate:                                  1464.242 MB/sec
[info]                  ·gc.alloc.rate.norm:                             19424.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.063 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.397 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       18059.702 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce":
[info]   117967.799 ±(99.9%) 7823.302 ops/s [Average]
[info]   (min, avg, max) = (114906.302, 117967.799, 120266.892), stdev = 2031.687
[info]   CI (99.9%): [110144.498, 125791.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate":
[info]   1455.934 ±(99.9%) 96.899 MB/sec [Average]
[info]   (min, avg, max) = (1418.109, 1455.934, 1484.697), stdev = 25.164
[info]   CI (99.9%): [1359.035, 1552.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   19424.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (19424.003, 19424.004, 19424.004), stdev = 0.001
[info]   CI (99.9%): [19424.003, 19424.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.016 ±(99.9%) 0.092 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.057), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.209 ±(99.9%) 1.236 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.209, 0.769), stdev = 0.321
[info]   CI (99.9%): [≈ 0, 1.444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1494.286 ±(99.9%) 699.710 MB/sec [Average]
[info]   (min, avg, max) = (1361.397, 1494.286, 1701.816), stdev = 181.713
[info]   CI (99.9%): [794.576, 2193.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   19956.525 ±(99.9%) 10070.714 B/op [Average]
[info]   (min, avg, max) = (17817.685, 19956.525, 23074.803), stdev = 2615.332
[info]   CI (99.9%): [9885.811, 30027.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   10.949 ±(99.9%) 94.273 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.949, 54.744), stdev = 24.482
[info]   CI (99.9%): [≈ 0, 105.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.600, 20.000), stdev = 7.092
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala
[info] # Run progress: 33.87% complete, ETA 00:52:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 98576.280 ops/s
[info] # Warmup Iteration   2: 172322.891 ops/s
[info] # Warmup Iteration   3: 173388.402 ops/s
[info] Iteration   1: 174062.321 ops/s
[info]                  ·gc.alloc.rate:            929.041 MB/sec
[info]                  ·gc.alloc.rate.norm:       8400.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.494 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6071.369 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 173568.538 ops/s
[info]                  ·gc.alloc.rate:                   926.314 MB/sec
[info]                  ·gc.alloc.rate.norm:              8400.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.434 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        9144.681 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 6.040 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   3: 171028.656 ops/s
[info]                  ·gc.alloc.rate:                   912.634 MB/sec
[info]                  ·gc.alloc.rate.norm:              8400.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.329 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        9280.790 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 42.910 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   4: 174359.890 ops/s
[info]                  ·gc.alloc.rate:                                  930.490 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8400.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.099 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.898 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.070 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9217.709 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 173406.281 ops/s
[info]                  ·gc.alloc.rate:            925.480 MB/sec
[info]                  ·gc.alloc.rate.norm:       8400.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.772 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6178.941 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala":
[info]   173285.137 ±(99.9%) 5074.167 ops/s [Average]
[info]   (min, avg, max) = (171028.656, 173285.137, 174359.890), stdev = 1317.745
[info]   CI (99.9%): [168210.971, 178359.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   924.792 ±(99.9%) 27.305 MB/sec [Average]
[info]   (min, avg, max) = (912.634, 924.792, 930.490), stdev = 7.091
[info]   CI (99.9%): [897.487, 952.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   8400.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8400.002, 8400.002, 8400.003), stdev = 0.001
[info]   CI (99.9%): [8400.002, 8400.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.020 ±(99.9%) 0.171 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.099), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.180 ±(99.9%) 1.546 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.180, 0.898), stdev = 0.402
[info]   CI (99.9%): [≈ 0, 1.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   878.020 ±(99.9%) 710.053 MB/sec [Average]
[info]   (min, avg, max) = (671.494, 878.020, 1021.070), stdev = 184.398
[info]   CI (99.9%): [167.967, 1588.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   7978.698 ±(99.9%) 6519.749 B/op [Average]
[info]   (min, avg, max) = (6071.369, 7978.698, 9280.790), stdev = 1693.158
[info]   CI (99.9%): [1458.949, 14498.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.821 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.662), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   9.790 ±(99.9%) 72.001 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.790, 42.910), stdev = 18.698
[info]   CI (99.9%): [≈ 0, 81.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.000, 13.000), stdev = 5.292
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala
[info] # Run progress: 34.14% complete, ETA 00:52:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 245836.001 ops/s
[info] # Warmup Iteration   2: 257951.474 ops/s
[info] # Warmup Iteration   3: 263517.801 ops/s
[info] Iteration   1: 265775.601 ops/s
[info]                  ·gc.alloc.rate:            691.580 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.011 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3991.945 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 265505.759 ops/s
[info]                  ·gc.alloc.rate:            690.803 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.976 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3996.230 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 253984.742 ops/s
[info]                  ·gc.alloc.rate:            660.887 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.034 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4177.479 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 258131.123 ops/s
[info]                  ·gc.alloc.rate:            671.830 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.170 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4110.263 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 258369.419 ops/s
[info]                  ·gc.alloc.rate:                   672.504 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             674.227 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        4106.493 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 20.289 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala":
[info]   260353.329 ±(99.9%) 19764.494 ops/s [Average]
[info]   (min, avg, max) = (253984.742, 260353.329, 265775.601), stdev = 5132.776
[info]   CI (99.9%): [240588.834, 280117.823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   677.521 ±(99.9%) 51.240 MB/sec [Average]
[info]   (min, avg, max) = (660.887, 677.521, 691.580), stdev = 13.307
[info]   CI (99.9%): [626.281, 728.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.002, 4096.002, 4096.002), stdev = 0.001
[info]   CI (99.9%): [4096.001, 4096.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   674.083 ±(99.9%) 0.418 MB/sec [Average]
[info]   (min, avg, max) = (673.976, 674.083, 674.227), stdev = 0.109
[info]   CI (99.9%): [673.665, 674.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   4076.482 ±(99.9%) 309.426 B/op [Average]
[info]   (min, avg, max) = (3991.945, 4076.482, 4177.479), stdev = 80.357
[info]   CI (99.9%): [3767.056, 4385.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   4.058 ±(99.9%) 34.939 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.058, 20.289), stdev = 9.074
[info]   CI (99.9%): [≈ 0, 38.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson
[info] # Run progress: 34.41% complete, ETA 00:52:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24640.860 ops/s
[info] # Warmup Iteration   2: 64138.913 ops/s
[info] # Warmup Iteration   3: 64738.751 ops/s
[info] Iteration   1: 66355.403 ops/s
[info]                  ·gc.alloc.rate:                                  2801.806 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66464.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.185 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.806 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       64589.981 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   2: 65804.977 ops/s
[info]                  ·gc.alloc.rate:                                  2779.405 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66464.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.196 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2723.608 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       65129.736 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 65507.643 ops/s
[info]                  ·gc.alloc.rate:                                  2766.535 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66464.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.012 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.284 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2723.286 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       65424.971 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 65696.700 ops/s
[info]                  ·gc.alloc.rate:                                  2775.155 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66464.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.009 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.212 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3064.449 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       73392.500 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   5: 66606.036 ops/s
[info]                  ·gc.alloc.rate:                                  2812.584 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66464.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.151 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.900 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       64344.687 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson":
[info]   65994.152 ±(99.9%) 1791.543 ops/s [Average]
[info]   (min, avg, max) = (65507.643, 65994.152, 66606.036), stdev = 465.258
[info]   CI (99.9%): [64202.609, 67785.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2787.097 ±(99.9%) 74.332 MB/sec [Average]
[info]   (min, avg, max) = (2766.535, 2787.097, 2812.584), stdev = 19.304
[info]   CI (99.9%): [2712.765, 2861.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   66464.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (66464.006, 66464.006, 66464.007), stdev = 0.001
[info]   CI (99.9%): [66464.005, 66464.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.009 ±(99.9%) 0.008 MB/sec [Average]
[info]   (min, avg, max) = (0.006, 0.009, 0.012), stdev = 0.002
[info]   CI (99.9%): [0.001, 0.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.206 ±(99.9%) 0.188 B/op [Average]
[info]   (min, avg, max) = (0.151, 0.206, 0.284), stdev = 0.049
[info]   CI (99.9%): [0.018, 0.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2791.410 ±(99.9%) 587.738 MB/sec [Average]
[info]   (min, avg, max) = (2722.806, 2791.410, 3064.449), stdev = 152.634
[info]   CI (99.9%): [2203.672, 3379.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   66576.375 ±(99.9%) 14764.126 B/op [Average]
[info]   (min, avg, max) = (64344.687, 66576.375, 73392.500), stdev = 3834.197
[info]   CI (99.9%): [51812.249, 81340.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.count":
[info]   41.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.200, 9.000), stdev = 0.447
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 8.400, 11.000), stdev = 1.673
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce
[info] # Run progress: 34.68% complete, ETA 00:52:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 126548.159 ops/s
[info] # Warmup Iteration   2: 161124.818 ops/s
[info] # Warmup Iteration   3: 165037.912 ops/s
[info] Iteration   1: 161044.219 ops/s
[info]                  ·gc.alloc.rate:            807.033 MB/sec
[info]                  ·gc.alloc.rate.norm:       7888.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.063 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9882.216 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 167016.146 ops/s
[info]                  ·gc.alloc.rate:            836.913 MB/sec
[info]                  ·gc.alloc.rate.norm:       7888.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.001 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6352.533 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 165474.407 ops/s
[info]                  ·gc.alloc.rate:            829.232 MB/sec
[info]                  ·gc.alloc.rate.norm:       7888.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.092 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9617.929 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 166664.979 ops/s
[info]                  ·gc.alloc.rate:                   835.433 MB/sec
[info]                  ·gc.alloc.rate.norm:              7888.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             674.233 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        6365.986 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 31.452 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 166166.061 ops/s
[info]                  ·gc.alloc.rate:                                  832.734 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7888.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.231 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.189 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.095 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9672.232 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce":
[info]   165273.163 ±(99.9%) 9372.360 ops/s [Average]
[info]   (min, avg, max) = (161044.219, 165273.163, 167016.146), stdev = 2433.972
[info]   CI (99.9%): [155900.803, 174645.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate":
[info]   828.269 ±(99.9%) 47.078 MB/sec [Average]
[info]   (min, avg, max) = (807.033, 828.269, 836.913), stdev = 12.226
[info]   CI (99.9%): [781.191, 875.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   7888.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7888.002, 7888.003, 7888.003), stdev = 0.001
[info]   CI (99.9%): [7888.002, 7888.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.046 ±(99.9%) 0.398 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.231), stdev = 0.103
[info]   CI (99.9%): [≈ 0, 0.444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.438 ±(99.9%) 3.769 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.438, 2.189), stdev = 0.979
[info]   CI (99.9%): [≈ 0, 4.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   878.297 ±(99.9%) 717.893 MB/sec [Average]
[info]   (min, avg, max) = (674.001, 878.297, 1021.095), stdev = 186.435
[info]   CI (99.9%): [160.403, 1596.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   8378.179 ±(99.9%) 7106.979 B/op [Average]
[info]   (min, avg, max) = (6352.533, 8378.179, 9882.216), stdev = 1845.660
[info]   CI (99.9%): [1271.200, 15485.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.737 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   6.290 ±(99.9%) 54.163 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.290, 31.452), stdev = 14.066
[info]   CI (99.9%): [≈ 0, 60.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.400, 10.000), stdev = 2.881
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala
[info] # Run progress: 34.95% complete, ETA 00:51:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 334063.883 ops/s
[info] # Warmup Iteration   2: 545806.634 ops/s
[info] # Warmup Iteration   3: 552438.927 ops/s
[info] Iteration   1: 536041.185 ops/s
[info]                  ·gc.alloc.rate:            542.072 MB/sec
[info]                  ·gc.alloc.rate.norm:       1592.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.316 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 987.721 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 526578.402 ops/s
[info]                  ·gc.alloc.rate:                   532.520 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             671.948 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2008.831 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.991 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 527133.399 ops/s
[info]                  ·gc.alloc.rate:                   533.173 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.103 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2006.831 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.989 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 534146.188 ops/s
[info]                  ·gc.alloc.rate:            540.242 MB/sec
[info]                  ·gc.alloc.rate.norm:       1592.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.369 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 991.222 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 530839.035 ops/s
[info]                  ·gc.alloc.rate:            536.916 MB/sec
[info]                  ·gc.alloc.rate.norm:       1592.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.716 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1994.658 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala":
[info]   530947.642 ±(99.9%) 16088.295 ops/s [Average]
[info]   (min, avg, max) = (526578.402, 530947.642, 536041.185), stdev = 4178.079
[info]   CI (99.9%): [514859.347, 547035.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   536.985 ±(99.9%) 16.218 MB/sec [Average]
[info]   (min, avg, max) = (532.520, 536.985, 542.072), stdev = 4.212
[info]   CI (99.9%): [520.766, 553.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1592.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1592.001, 1592.001, 1592.001), stdev = 0.001
[info]   CI (99.9%): [1592.001, 1592.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   537.891 ±(99.9%) 708.470 MB/sec [Average]
[info]   (min, avg, max) = (336.316, 537.891, 672.716), stdev = 183.987
[info]   CI (99.9%): [≈ 0, 1246.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1597.853 ±(99.9%) 2138.652 B/op [Average]
[info]   (min, avg, max) = (987.721, 1597.853, 2008.831), stdev = 555.401
[info]   CI (99.9%): [≈ 0, 3736.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.796 ±(99.9%) 4.197 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.796, 1.991), stdev = 1.090
[info]   CI (99.9%): [≈ 0, 4.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.000, 9.000), stdev = 2.739
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala
[info] # Run progress: 35.22% complete, ETA 00:51:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 475170.537 ops/s
[info] # Warmup Iteration   2: 546992.852 ops/s
[info] # Warmup Iteration   3: 551078.300 ops/s
[info] Iteration   1: 549407.813 ops/s
[info]                  ·gc.alloc.rate:            421.610 MB/sec
[info]                  ·gc.alloc.rate.norm:       1208.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.332 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 963.659 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 548049.982 ops/s
[info]                  ·gc.alloc.rate:            420.672 MB/sec
[info]                  ·gc.alloc.rate.norm:       1208.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.814 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1932.052 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 550269.644 ops/s
[info]                  ·gc.alloc.rate:            422.351 MB/sec
[info]                  ·gc.alloc.rate.norm:       1208.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.400 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 962.166 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 535902.755 ops/s
[info]                  ·gc.alloc.rate:            411.267 MB/sec
[info]                  ·gc.alloc.rate.norm:       1208.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.353 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 987.960 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 535840.825 ops/s
[info]                  ·gc.alloc.rate:            411.223 MB/sec
[info]                  ·gc.alloc.rate.norm:       1208.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.354 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 988.067 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala":
[info]   543894.204 ±(99.9%) 28364.167 ops/s [Average]
[info]   (min, avg, max) = (535840.825, 543894.204, 550269.644), stdev = 7366.084
[info]   CI (99.9%): [515530.037, 572258.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   417.425 ±(99.9%) 21.844 MB/sec [Average]
[info]   (min, avg, max) = (411.223, 417.425, 422.351), stdev = 5.673
[info]   CI (99.9%): [395.581, 439.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1208.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1208.001, 1208.001, 1208.001), stdev = 0.001
[info]   CI (99.9%): [1208.001, 1208.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   403.651 ±(99.9%) 579.395 MB/sec [Average]
[info]   (min, avg, max) = (336.332, 403.651, 672.814), stdev = 150.467
[info]   CI (99.9%): [≈ 0, 983.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1166.781 ±(99.9%) 1648.013 B/op [Average]
[info]   (min, avg, max) = (962.166, 1166.781, 1932.052), stdev = 427.984
[info]   CI (99.9%): [≈ 0, 2814.794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 7.000), stdev = 1.732
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 35.48% complete, ETA 00:51:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 488543.235 ops/s
[info] # Warmup Iteration   2: 538133.799 ops/s
[info] # Warmup Iteration   3: 530343.393 ops/s
[info] Iteration   1: 537303.871 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 538004.906 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 526805.287 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 537717.531 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 538867.388 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc":
[info]   535739.797 ±(99.9%) 19358.418 ops/s [Average]
[info]   (min, avg, max) = (526805.287, 535739.797, 538867.388), stdev = 5027.320
[info]   CI (99.9%): [516381.379, 555098.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson
[info] # Run progress: 35.75% complete, ETA 00:51:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 163158.676 ops/s
[info] # Warmup Iteration   2: 292720.441 ops/s
[info] # Warmup Iteration   3: 291878.425 ops/s
[info] Iteration   1: 297729.562 ops/s
[info]                  ·gc.alloc.rate:                   817.113 MB/sec
[info]                  ·gc.alloc.rate.norm:              4320.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.022 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3552.919 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.521 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 301393.098 ops/s
[info]                  ·gc.alloc.rate:            827.108 MB/sec
[info]                  ·gc.alloc.rate.norm:       4320.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.662 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5263.038 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   3: 303746.151 ops/s
[info]                  ·gc.alloc.rate:                   833.648 MB/sec
[info]                  ·gc.alloc.rate.norm:              4320.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.031 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3482.495 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.451 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 303258.307 ops/s
[info]                  ·gc.alloc.rate:                   832.265 MB/sec
[info]                  ·gc.alloc.rate.norm:              4320.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1011.024 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5247.876 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 24.200 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   5: 296117.951 ops/s
[info]                  ·gc.alloc.rate:                                  812.803 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4320.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.065 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.345 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.768 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3618.245 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson":
[info]   300449.014 ±(99.9%) 13030.898 ops/s [Average]
[info]   (min, avg, max) = (296117.951, 300449.014, 303746.151), stdev = 3384.083
[info]   CI (99.9%): [287418.116, 313479.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   824.588 ±(99.9%) 35.613 MB/sec [Average]
[info]   (min, avg, max) = (812.803, 824.588, 833.648), stdev = 9.249
[info]   CI (99.9%): [788.974, 860.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4320.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4320.001, 4320.001, 4320.001), stdev = 0.001
[info]   CI (99.9%): [4320.001, 4320.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.013 ±(99.9%) 0.112 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.065), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.069 ±(99.9%) 0.593 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.069, 0.345), stdev = 0.154
[info]   CI (99.9%): [≈ 0, 0.662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   808.702 ±(99.9%) 705.432 MB/sec [Average]
[info]   (min, avg, max) = (672.022, 808.702, 1011.024), stdev = 183.198
[info]   CI (99.9%): [103.269, 1514.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   4232.915 ±(99.9%) 3599.190 B/op [Average]
[info]   (min, avg, max) = (3482.495, 4232.915, 5263.038), stdev = 934.698
[info]   CI (99.9%): [633.725, 7832.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.199 ±(99.9%) 7.565 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.199, 4.662), stdev = 1.964
[info]   CI (99.9%): [≈ 0, 8.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   6.234 ±(99.9%) 39.250 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.234, 24.200), stdev = 10.193
[info]   CI (99.9%): [≈ 0, 45.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 9.000, 14.000), stdev = 4.416
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce
[info] # Run progress: 36.02% complete, ETA 00:51:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6011.235 ops/s
[info] # Warmup Iteration   2: 8508.751 ops/s
[info] # Warmup Iteration   3: 8737.883 ops/s
[info] Iteration   1: 8565.700 ops/s
[info]                  ·gc.alloc.rate:            1095.231 MB/sec
[info]                  ·gc.alloc.rate.norm:       201280.048 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1347.990 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 247731.741 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 8720.695 ops/s
[info]                  ·gc.alloc.rate:            1115.257 MB/sec
[info]                  ·gc.alloc.rate.norm:       201280.047 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.067 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 182476.025 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 8783.362 ops/s
[info]                  ·gc.alloc.rate:                                  1123.465 MB/sec
[info]                  ·gc.alloc.rate.norm:                             201280.046 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.028 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.100 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.983 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       182381.802 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                596.799 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 8796.606 ops/s
[info]                  ·gc.alloc.rate:                                  1124.958 MB/sec
[info]                  ·gc.alloc.rate.norm:                             201280.050 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.013 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.338 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.391 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       243583.287 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 8641.127 ops/s
[info]                  ·gc.alloc.rate:            1105.197 MB/sec
[info]                  ·gc.alloc.rate.norm:       201280.047 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.095 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 185963.328 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce":
[info]   8701.498 ±(99.9%) 376.308 ops/s [Average]
[info]   (min, avg, max) = (8565.700, 8701.498, 8796.606), stdev = 97.726
[info]   CI (99.9%): [8325.190, 9077.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1112.822 ±(99.9%) 48.481 MB/sec [Average]
[info]   (min, avg, max) = (1095.231, 1112.822, 1124.958), stdev = 12.590
[info]   CI (99.9%): [1064.340, 1161.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   201280.048 ±(99.9%) 0.005 B/op [Average]
[info]   (min, avg, max) = (201280.046, 201280.048, 201280.050), stdev = 0.001
[info]   CI (99.9%): [201280.042, 201280.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.008 ±(99.9%) 0.049 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.028), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.487 ±(99.9%) 8.698 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.487, 5.100), stdev = 2.259
[info]   CI (99.9%): [≈ 0, 10.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1151.905 ±(99.9%) 713.189 MB/sec [Average]
[info]   (min, avg, max) = (1011.067, 1151.905, 1361.391), stdev = 185.213
[info]   CI (99.9%): [438.716, 1865.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   208427.237 ±(99.9%) 131109.325 B/op [Average]
[info]   (min, avg, max) = (182381.802, 208427.237, 247731.741), stdev = 34048.675
[info]   CI (99.9%): [77317.911, 339536.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   119.360 ±(99.9%) 1027.724 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 119.360, 596.799), stdev = 266.897
[info]   CI (99.9%): [≈ 0, 1147.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.000, 13.000), stdev = 4.472
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala
[info] # Run progress: 36.29% complete, ETA 00:50:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4914.674 ops/s
[info] # Warmup Iteration   2: 8858.542 ops/s
[info] # Warmup Iteration   3: 9231.010 ops/s
[info] Iteration   1: 9241.796 ops/s
[info]                  ·gc.alloc.rate:            1053.212 MB/sec
[info]                  ·gc.alloc.rate.norm:       179376.044 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.029 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 171851.216 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 9157.464 ops/s
[info]                  ·gc.alloc.rate:            1043.984 MB/sec
[info]                  ·gc.alloc.rate.norm:       179376.048 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.961 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 231261.439 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   3: 9162.985 ops/s
[info]                  ·gc.alloc.rate:                                  1044.270 MB/sec
[info]                  ·gc.alloc.rate.norm:                             179376.045 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.080 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 13.792 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.079 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       174705.461 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                686.465 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 9343.814 ops/s
[info]                  ·gc.alloc.rate:                                  1065.175 MB/sec
[info]                  ·gc.alloc.rate.norm:                             179376.044 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.683 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.346 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       171995.186 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 9265.337 ops/s
[info]                  ·gc.alloc.rate:            1056.020 MB/sec
[info]                  ·gc.alloc.rate.norm:       179404.916 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.035 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 173461.423 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala":
[info]   9234.279 ±(99.9%) 298.284 ops/s [Average]
[info]   (min, avg, max) = (9157.464, 9234.279, 9343.814), stdev = 77.463
[info]   CI (99.9%): [8935.996, 9532.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1052.532 ±(99.9%) 34.107 MB/sec [Average]
[info]   (min, avg, max) = (1043.984, 1052.532, 1065.175), stdev = 8.857
[info]   CI (99.9%): [1018.425, 1086.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   179381.819 ±(99.9%) 49.718 B/op [Average]
[info]   (min, avg, max) = (179376.044, 179381.819, 179404.916), stdev = 12.912
[info]   CI (99.9%): [179332.101, 179431.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.017 ±(99.9%) 0.137 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.080), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.895 ±(99.9%) 23.484 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.895, 13.792), stdev = 6.099
[info]   CI (99.9%): [≈ 0, 26.378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1082.890 ±(99.9%) 566.603 MB/sec [Average]
[info]   (min, avg, max) = (1009.029, 1082.890, 1345.961), stdev = 147.145
[info]   CI (99.9%): [516.287, 1649.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   184654.945 ±(99.9%) 100424.643 B/op [Average]
[info]   (min, avg, max) = (171851.216, 184654.945, 231261.439), stdev = 26079.961
[info]   CI (99.9%): [84230.302, 285079.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   137.293 ±(99.9%) 1182.135 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 137.293, 686.465), stdev = 306.997
[info]   CI (99.9%): [≈ 0, 1319.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.600, 17.000), stdev = 6.229
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala
[info] # Run progress: 36.56% complete, ETA 00:50:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 97145.880 ops/s
[info] # Warmup Iteration   2: 105887.185 ops/s
[info] # Warmup Iteration   3: 104503.440 ops/s
[info] Iteration   1: 104346.742 ops/s
[info]                  ·gc.alloc.rate:            678.876 MB/sec
[info]                  ·gc.alloc.rate.norm:       10240.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.425 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10187.958 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 106191.959 ops/s
[info]                  ·gc.alloc.rate:            690.936 MB/sec
[info]                  ·gc.alloc.rate.norm:       10240.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1013.185 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 15015.903 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 107557.436 ops/s
[info]                  ·gc.alloc.rate:            699.723 MB/sec
[info]                  ·gc.alloc.rate.norm:       10240.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.368 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9883.583 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 107603.399 ops/s
[info]                  ·gc.alloc.rate:            700.046 MB/sec
[info]                  ·gc.alloc.rate.norm:       10240.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.410 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9879.634 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 107569.912 ops/s
[info]                  ·gc.alloc.rate:                   699.743 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             675.330 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        9882.756 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      2.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 38.985 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala":
[info]   106653.890 ±(99.9%) 5477.320 ops/s [Average]
[info]   (min, avg, max) = (104346.742, 106653.890, 107603.399), stdev = 1422.443
[info]   CI (99.9%): [101176.569, 112131.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   693.865 ±(99.9%) 35.518 MB/sec [Average]
[info]   (min, avg, max) = (678.876, 693.865, 700.046), stdev = 9.224
[info]   CI (99.9%): [658.347, 729.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   10240.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10240.004, 10240.004, 10240.004), stdev = 0.001
[info]   CI (99.9%): [10240.003, 10240.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   742.944 ±(99.9%) 581.715 MB/sec [Average]
[info]   (min, avg, max) = (675.330, 742.944, 1013.185), stdev = 151.070
[info]   CI (99.9%): [161.228, 1324.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   10969.967 ±(99.9%) 8724.114 B/op [Average]
[info]   (min, avg, max) = (9879.634, 10969.967, 15015.903), stdev = 2265.625
[info]   CI (99.9%): [2245.853, 19694.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.533 ±(99.9%) 4.588 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.533, 2.664), stdev = 1.191
[info]   CI (99.9%): [≈ 0, 5.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   7.797 ±(99.9%) 67.135 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.797, 38.985), stdev = 17.435
[info]   CI (99.9%): [≈ 0, 74.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 8.000), stdev = 0.894
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson
[info] # Run progress: 36.83% complete, ETA 00:50:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3497.383 ops/s
[info] # Warmup Iteration   2: 6510.506 ops/s
[info] # Warmup Iteration   3: 6837.828 ops/s
[info] Iteration   1: 6914.191 ops/s
[info]                  ·gc.alloc.rate:            1287.426 MB/sec
[info]                  ·gc.alloc.rate.norm:       293096.064 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.267 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 306264.245 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   2: 6839.363 ops/s
[info]                  ·gc.alloc.rate:                                  1273.379 MB/sec
[info]                  ·gc.alloc.rate.norm:                             293096.060 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.086 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 19.796 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1012.879 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       233136.105 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                919.669 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   3: 6894.219 ops/s
[info]                  ·gc.alloc.rate:                                  1283.946 MB/sec
[info]                  ·gc.alloc.rate.norm:                             293096.064 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.011 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.439 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.509 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       310801.819 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 6907.888 ops/s
[info]                  ·gc.alloc.rate:                                  1286.254 MB/sec
[info]                  ·gc.alloc.rate.norm:                             293096.059 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.271 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.192 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       310172.119 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 6976.762 ops/s
[info]                  ·gc.alloc.rate:                                  1298.988 MB/sec
[info]                  ·gc.alloc.rate.norm:                             293096.058 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.225 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.272 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       307149.519 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson":
[info]   6906.485 ±(99.9%) 189.192 ops/s [Average]
[info]   (min, avg, max) = (6839.363, 6906.485, 6976.762), stdev = 49.133
[info]   CI (99.9%): [6717.292, 7095.677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1285.999 ±(99.9%) 35.202 MB/sec [Average]
[info]   (min, avg, max) = (1273.379, 1285.999, 1298.988), stdev = 9.142
[info]   CI (99.9%): [1250.797, 1321.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   293096.061 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (293096.058, 293096.061, 293096.064), stdev = 0.003
[info]   CI (99.9%): [293096.051, 293096.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.021 ±(99.9%) 0.142 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.086), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   4.746 ±(99.9%) 32.609 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.746, 19.796), stdev = 8.469
[info]   CI (99.9%): [≈ 0, 37.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1288.424 ±(99.9%) 593.736 MB/sec [Average]
[info]   (min, avg, max) = (1012.879, 1288.424, 1361.509), stdev = 154.191
[info]   CI (99.9%): [694.688, 1882.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   293504.762 ±(99.9%) 130160.131 B/op [Average]
[info]   (min, avg, max) = (233136.105, 293504.762, 310801.819), stdev = 33802.173
[info]   CI (99.9%): [163344.631, 423664.892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   183.934 ±(99.9%) 1583.726 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 183.934, 919.669), stdev = 411.289
[info]   CI (99.9%): [≈ 0, 1767.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.600, 16.000), stdev = 5.367
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce
[info] # Run progress: 37.10% complete, ETA 00:50:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15357.241 ops/s
[info] # Warmup Iteration   2: 21235.096 ops/s
[info] # Warmup Iteration   3: 21322.151 ops/s
[info] Iteration   1: 21189.361 ops/s
[info]                  ·gc.alloc.rate:            965.918 MB/sec
[info]                  ·gc.alloc.rate.norm:       71749.407 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.116 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 75106.798 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 21157.252 ops/s
[info]                  ·gc.alloc.rate:            964.327 MB/sec
[info]                  ·gc.alloc.rate.norm:       71760.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1010.827 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 75220.376 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 20987.728 ops/s
[info]                  ·gc.alloc.rate:                   956.581 MB/sec
[info]                  ·gc.alloc.rate.norm:              71744.696 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1011.045 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        75829.564 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 249.768 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   4: 21258.727 ops/s
[info]                  ·gc.alloc.rate:                                  969.375 MB/sec
[info]                  ·gc.alloc.rate.norm:                             71736.019 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.100 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 7.395 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.627 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       75602.813 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 21442.921 ops/s
[info]                  ·gc.alloc.rate:            977.283 MB/sec
[info]                  ·gc.alloc.rate.norm:       71736.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.125 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 74954.164 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce":
[info]   21207.198 ±(99.9%) 636.232 ops/s [Average]
[info]   (min, avg, max) = (20987.728, 21207.198, 21442.921), stdev = 165.227
[info]   CI (99.9%): [20570.965, 21843.430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   966.697 ±(99.9%) 29.059 MB/sec [Average]
[info]   (min, avg, max) = (956.581, 966.697, 977.283), stdev = 7.547
[info]   CI (99.9%): [937.638, 995.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   71745.233 ±(99.9%) 38.804 B/op [Average]
[info]   (min, avg, max) = (71736.019, 71745.233, 71760.022), stdev = 10.077
[info]   CI (99.9%): [71706.429, 71784.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.020 ±(99.9%) 0.172 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.100), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.479 ±(99.9%) 12.734 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.479, 7.395), stdev = 3.307
[info]   CI (99.9%): [≈ 0, 14.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1015.148 ±(99.9%) 21.906 MB/sec [Average]
[info]   (min, avg, max) = (1010.827, 1015.148, 1021.627), stdev = 5.689
[info]   CI (99.9%): [993.242, 1037.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   75342.743 ±(99.9%) 1396.712 B/op [Average]
[info]   (min, avg, max) = (74954.164, 75342.743, 75829.564), stdev = 362.722
[info]   CI (99.9%): [73946.031, 76739.455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   49.954 ±(99.9%) 430.116 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 49.954, 249.768), stdev = 111.700
[info]   CI (99.9%): [≈ 0, 480.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 9.000, 17.000), stdev = 5.701
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala
[info] # Run progress: 37.37% complete, ETA 00:49:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15101.750 ops/s
[info] # Warmup Iteration   2: 25296.945 ops/s
[info] # Warmup Iteration   3: 25681.874 ops/s
[info] Iteration   1: 25741.606 ops/s
[info]                  ·gc.alloc.rate:            990.089 MB/sec
[info]                  ·gc.alloc.rate.norm:       60552.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.901 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 61702.503 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 25123.181 ops/s
[info]                  ·gc.alloc.rate:            966.292 MB/sec
[info]                  ·gc.alloc.rate.norm:       60552.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.908 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 63222.535 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 24983.549 ops/s
[info]                  ·gc.alloc.rate:                                  961.179 MB/sec
[info]                  ·gc.alloc.rate.norm:                             60552.018 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.098 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 6.180 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1013.149 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       63826.000 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                251.779 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   4: 25886.561 ops/s
[info]                  ·gc.alloc.rate:                                  995.788 MB/sec
[info]                  ·gc.alloc.rate.norm:                             60552.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.051 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.121 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.013 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       62085.938 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 26087.728 ops/s
[info]                  ·gc.alloc.rate:            1003.537 MB/sec
[info]                  ·gc.alloc.rate.norm:       60552.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.993 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 61605.297 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala":
[info]   25564.525 ±(99.9%) 1867.785 ops/s [Average]
[info]   (min, avg, max) = (24983.549, 25564.525, 26087.728), stdev = 485.058
[info]   CI (99.9%): [23696.740, 27432.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   983.377 ±(99.9%) 71.784 MB/sec [Average]
[info]   (min, avg, max) = (961.179, 983.377, 1003.537), stdev = 18.642
[info]   CI (99.9%): [911.593, 1055.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   60552.017 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (60552.016, 60552.017, 60552.020), stdev = 0.002
[info]   CI (99.9%): [60552.009, 60552.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.030 ±(99.9%) 0.170 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.098), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.860 ±(99.9%) 10.656 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.860, 6.180), stdev = 2.767
[info]   CI (99.9%): [≈ 0, 12.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1014.593 ±(99.9%) 23.500 MB/sec [Average]
[info]   (min, avg, max) = (1008.901, 1014.593, 1021.013), stdev = 6.103
[info]   CI (99.9%): [991.092, 1038.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   62488.455 ±(99.9%) 3796.162 B/op [Average]
[info]   (min, avg, max) = (61605.297, 62488.455, 63826.000), stdev = 985.851
[info]   CI (99.9%): [58692.292, 66284.617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   50.356 ±(99.9%) 433.579 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 50.356, 251.779), stdev = 112.599
[info]   CI (99.9%): [≈ 0, 483.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.200, 13.000), stdev = 4.868
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala
[info] # Run progress: 37.63% complete, ETA 00:49:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 653966.102 ops/s
[info] # Warmup Iteration   2: 719576.053 ops/s
[info] # Warmup Iteration   3: 722675.854 ops/s
[info] Iteration   1: 713212.327 ops/s
[info]                  ·gc.alloc.rate:            1286.756 MB/sec
[info]                  ·gc.alloc.rate.norm:       2840.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1346.019 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2970.799 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 739216.489 ops/s
[info]                  ·gc.alloc.rate:                                  1334.012 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2840.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.157 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.334 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1357.708 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2890.448 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                8.510 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 739697.105 ops/s
[info]                  ·gc.alloc.rate:            1335.171 MB/sec
[info]                  ·gc.alloc.rate.norm:       2840.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.043 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2897.159 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 740889.643 ops/s
[info]                  ·gc.alloc.rate:                                  1337.521 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2840.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1360.877 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2889.593 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 743888.811 ops/s
[info]                  ·gc.alloc.rate:                                  1342.401 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2840.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.204 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2160.472 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala":
[info]   735380.875 ±(99.9%) 48229.902 ops/s [Average]
[info]   (min, avg, max) = (713212.327, 735380.875, 743888.811), stdev = 12525.153
[info]   CI (99.9%): [687150.973, 783610.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1327.172 ±(99.9%) 87.876 MB/sec [Average]
[info]   (min, avg, max) = (1286.756, 1327.172, 1342.401), stdev = 22.821
[info]   CI (99.9%): [1239.296, 1415.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2840.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2840.001, 2840.001, 2840.001), stdev = 0.001
[info]   CI (99.9%): [2840.000, 2840.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.032 ±(99.9%) 0.269 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.032, 0.157), stdev = 0.070
[info]   CI (99.9%): [≈ 0, 0.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.068 ±(99.9%) 0.573 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.068, 0.334), stdev = 0.149
[info]   CI (99.9%): [≈ 0, 0.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1289.570 ±(99.9%) 578.195 MB/sec [Average]
[info]   (min, avg, max) = (1021.204, 1289.570, 1362.043), stdev = 150.155
[info]   CI (99.9%): [711.375, 1867.765] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   2761.694 ±(99.9%) 1300.810 B/op [Average]
[info]   (min, avg, max) = (2160.472, 2761.694, 2970.799), stdev = 337.816
[info]   CI (99.9%): [1460.884, 4062.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.702 ±(99.9%) 14.654 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.702, 8.510), stdev = 3.806
[info]   CI (99.9%): [≈ 0, 16.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.600, 13.000), stdev = 4.393
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 37.90% complete, ETA 00:49:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 460185.853 ops/s
[info] # Warmup Iteration   2: 498856.177 ops/s
[info] # Warmup Iteration   3: 500742.688 ops/s
[info] Iteration   1: 500328.169 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 500786.311 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 501781.032 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 501971.481 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 500441.807 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   501061.760 ±(99.9%) 2947.262 ops/s [Average]
[info]   (min, avg, max) = (500328.169, 501061.760, 501971.481), stdev = 765.395
[info]   CI (99.9%): [498114.498, 504009.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson
[info] # Run progress: 38.17% complete, ETA 00:49:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16830.127 ops/s
[info] # Warmup Iteration   2: 24245.699 ops/s
[info] # Warmup Iteration   3: 24378.808 ops/s
[info] Iteration   1: 24340.059 ops/s
[info]                  ·gc.alloc.rate:            1026.903 MB/sec
[info]                  ·gc.alloc.rate.norm:       66408.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.090 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 65256.024 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 24317.538 ops/s
[info]                  ·gc.alloc.rate:            1025.837 MB/sec
[info]                  ·gc.alloc.rate.norm:       66404.956 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.041 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 65317.735 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 23694.674 ops/s
[info]                  ·gc.alloc.rate:                                  999.358 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66392.019 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.055 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.675 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1012.945 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       67294.688 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                265.462 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   4: 24693.937 ops/s
[info]                  ·gc.alloc.rate:                                  1041.646 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66392.017 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.051 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.233 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.139 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       65084.906 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 24645.612 ops/s
[info]                  ·gc.alloc.rate:            1039.576 MB/sec
[info]                  ·gc.alloc.rate.norm:       66392.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.135 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 65214.289 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson":
[info]   24338.364 ±(99.9%) 1534.962 ops/s [Average]
[info]   (min, avg, max) = (23694.674, 24338.364, 24693.937), stdev = 398.625
[info]   CI (99.9%): [22803.402, 25873.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1026.664 ±(99.9%) 64.937 MB/sec [Average]
[info]   (min, avg, max) = (999.358, 1026.664, 1041.646), stdev = 16.864
[info]   CI (99.9%): [961.727, 1091.601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   66397.805 ±(99.9%) 30.800 B/op [Average]
[info]   (min, avg, max) = (66392.017, 66397.805, 66408.017), stdev = 7.999
[info]   CI (99.9%): [66367.005, 66428.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.021 ±(99.9%) 0.112 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.055), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.382 ±(99.9%) 7.310 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.382, 3.675), stdev = 1.898
[info]   CI (99.9%): [≈ 0, 8.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1014.670 ±(99.9%) 23.536 MB/sec [Average]
[info]   (min, avg, max) = (1009.041, 1014.670, 1021.139), stdev = 6.112
[info]   CI (99.9%): [991.134, 1038.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   65633.528 ±(99.9%) 3590.833 B/op [Average]
[info]   (min, avg, max) = (65084.906, 65633.528, 67294.688), stdev = 932.528
[info]   CI (99.9%): [62042.695, 69224.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   53.092 ±(99.9%) 457.142 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 53.092, 265.462), stdev = 118.718
[info]   CI (99.9%): [≈ 0, 510.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.800, 12.000), stdev = 4.919
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce
[info] # Run progress: 38.44% complete, ETA 00:49:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16577.070 ops/s
[info] # Warmup Iteration   2: 23630.700 ops/s
[info] # Warmup Iteration   3: 24050.162 ops/s
[info] Iteration   1: 23871.934 ops/s
[info]                  ·gc.alloc.rate:            1295.932 MB/sec
[info]                  ·gc.alloc.rate.norm:       85440.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.191 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 88885.447 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   2: 23835.506 ops/s
[info]                  ·gc.alloc.rate:                                  1293.680 MB/sec
[info]                  ·gc.alloc.rate.norm:                             85440.023 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.037 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.427 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1354.654 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       89466.990 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                219.929 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   3: 23949.965 ops/s
[info]                  ·gc.alloc.rate:                                  1299.937 MB/sec
[info]                  ·gc.alloc.rate.norm:                             85440.017 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.027 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.766 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.956 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       67103.611 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 24138.793 ops/s
[info]                  ·gc.alloc.rate:                                  1310.347 MB/sec
[info]                  ·gc.alloc.rate.norm:                             85440.017 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.066 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.434 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       88771.096 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 24647.090 ops/s
[info]                  ·gc.alloc.rate:                                  1337.898 MB/sec
[info]                  ·gc.alloc.rate.norm:                             85440.018 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.407 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.414 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       86941.804 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce":
[info]   24088.658 ±(99.9%) 1283.846 ops/s [Average]
[info]   (min, avg, max) = (23835.506, 24088.658, 24647.090), stdev = 333.411
[info]   CI (99.9%): [22804.812, 25372.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate":
[info]   1307.559 ±(99.9%) 69.795 MB/sec [Average]
[info]   (min, avg, max) = (1293.680, 1307.559, 1337.898), stdev = 18.126
[info]   CI (99.9%): [1237.763, 1377.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   85440.018 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (85440.017, 85440.018, 85440.023), stdev = 0.003
[info]   CI (99.9%): [85440.009, 85440.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.014 ±(99.9%) 0.064 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.037), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.933 ±(99.9%) 4.228 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 2.427), stdev = 1.098
[info]   CI (99.9%): [≈ 0, 5.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1289.330 ±(99.9%) 578.083 MB/sec [Average]
[info]   (min, avg, max) = (1020.956, 1289.330, 1361.434), stdev = 150.126
[info]   CI (99.9%): [711.246, 1867.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   84233.790 ±(99.9%) 37053.711 B/op [Average]
[info]   (min, avg, max) = (67103.611, 84233.790, 89466.990), stdev = 9622.731
[info]   CI (99.9%): [47180.079, 121287.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   43.986 ±(99.9%) 378.730 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 43.986, 219.929), stdev = 98.355
[info]   CI (99.9%): [≈ 0, 422.716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.600, 14.000), stdev = 4.827
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala
[info] # Run progress: 38.71% complete, ETA 00:48:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15039.237 ops/s
[info] # Warmup Iteration   2: 27295.483 ops/s
[info] # Warmup Iteration   3: 27421.536 ops/s
[info] Iteration   1: 27332.718 ops/s
[info]                  ·gc.alloc.rate:            1301.505 MB/sec
[info]                  ·gc.alloc.rate.norm:       74960.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.243 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 77479.096 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   2: 26912.586 ops/s
[info]                  ·gc.alloc.rate:                                  1281.581 MB/sec
[info]                  ·gc.alloc.rate.norm:                             74960.535 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.100 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.846 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1353.300 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       79155.451 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                233.727 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   3: 27169.258 ops/s
[info]                  ·gc.alloc.rate:                                  1293.906 MB/sec
[info]                  ·gc.alloc.rate.norm:                             74960.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.437 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.446 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       78872.795 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 27887.715 ops/s
[info]                  ·gc.alloc.rate:                                  1328.462 MB/sec
[info]                  ·gc.alloc.rate.norm:                             74960.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.074 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.774 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       76839.685 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 27986.948 ops/s
[info]                  ·gc.alloc.rate:                                  1333.184 MB/sec
[info]                  ·gc.alloc.rate.norm:                             74960.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.144 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.781 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       76567.925 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala":
[info]   27457.845 ±(99.9%) 1786.492 ops/s [Average]
[info]   (min, avg, max) = (26912.586, 27457.845, 27986.948), stdev = 463.946
[info]   CI (99.9%): [25671.353, 29244.337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1307.728 ±(99.9%) 85.916 MB/sec [Average]
[info]   (min, avg, max) = (1281.581, 1307.728, 1333.184), stdev = 22.312
[info]   CI (99.9%): [1221.811, 1393.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   74960.119 ±(99.9%) 0.896 B/op [Average]
[info]   (min, avg, max) = (74960.015, 74960.119, 74960.535), stdev = 0.233
[info]   CI (99.9%): [74959.223, 74961.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.022 ±(99.9%) 0.168 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.100), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.300 ±(99.9%) 9.807 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.300, 5.846), stdev = 2.547
[info]   CI (99.9%): [≈ 0, 11.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1356.709 ±(99.9%) 28.356 MB/sec [Average]
[info]   (min, avg, max) = (1345.243, 1356.709, 1361.781), stdev = 7.364
[info]   CI (99.9%): [1328.353, 1385.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   77782.990 ±(99.9%) 4527.531 B/op [Average]
[info]   (min, avg, max) = (76567.925, 77782.990, 79155.451), stdev = 1175.785
[info]   CI (99.9%): [73255.460, 82310.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   46.745 ±(99.9%) 402.492 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 46.745, 233.727), stdev = 104.526
[info]   CI (99.9%): [≈ 0, 449.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.800, 17.000), stdev = 6.380
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala
[info] # Run progress: 38.98% complete, ETA 00:48:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 255166.262 ops/s
[info] # Warmup Iteration   2: 271634.295 ops/s
[info] # Warmup Iteration   3: 268056.331 ops/s
[info] Iteration   1: 261783.939 ops/s
[info]                  ·gc.alloc.rate:            681.145 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.281 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4060.740 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 263436.170 ops/s
[info]                  ·gc.alloc.rate:            685.488 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.339 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4035.357 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 262593.404 ops/s
[info]                  ·gc.alloc.rate:            683.476 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.538 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4048.433 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 260927.468 ops/s
[info]                  ·gc.alloc.rate:            679.005 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.404 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4074.278 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 263173.532 ops/s
[info]                  ·gc.alloc.rate:                   685.051 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             675.586 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        4039.404 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      2.665 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 15.935 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala":
[info]   262382.903 ±(99.9%) 3971.872 ops/s [Average]
[info]   (min, avg, max) = (260927.468, 262382.903, 263436.170), stdev = 1031.483
[info]   CI (99.9%): [258411.030, 266354.775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   682.833 ±(99.9%) 10.526 MB/sec [Average]
[info]   (min, avg, max) = (679.005, 682.833, 685.488), stdev = 2.734
[info]   CI (99.9%): [672.307, 693.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.002, 4096.002, 4096.002), stdev = 0.001
[info]   CI (99.9%): [4096.001, 4096.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   675.430 ±(99.9%) 0.498 MB/sec [Average]
[info]   (min, avg, max) = (675.281, 675.430, 675.586), stdev = 0.129
[info]   CI (99.9%): [674.932, 675.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   4051.642 ±(99.9%) 61.502 B/op [Average]
[info]   (min, avg, max) = (4035.357, 4051.642, 4074.278), stdev = 15.972
[info]   CI (99.9%): [3990.140, 4113.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.533 ±(99.9%) 4.589 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.533, 2.665), stdev = 1.192
[info]   CI (99.9%): [≈ 0, 5.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   3.187 ±(99.9%) 27.440 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.187, 15.935), stdev = 7.126
[info]   CI (99.9%): [≈ 0, 30.627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson
[info] # Run progress: 39.25% complete, ETA 00:48:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6906.258 ops/s
[info] # Warmup Iteration   2: 14931.321 ops/s
[info] # Warmup Iteration   3: 15351.540 ops/s
[info] Iteration   1: 15345.944 ops/s
[info]                  ·gc.alloc.rate:                   1579.870 MB/sec
[info]                  ·gc.alloc.rate.norm:              162056.029 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.325 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        137997.493 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 409.894 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   2: 15986.883 ops/s
[info]                  ·gc.alloc.rate:                                  1645.823 MB/sec
[info]                  ·gc.alloc.rate.norm:                             162056.046 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.077 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 7.585 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.611 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       167549.198 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 15862.542 ops/s
[info]                  ·gc.alloc.rate:                                  1633.785 MB/sec
[info]                  ·gc.alloc.rate.norm:                             162056.026 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.130 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.367 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       168858.671 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 15938.510 ops/s
[info]                  ·gc.alloc.rate:                                  1640.826 MB/sec
[info]                  ·gc.alloc.rate.norm:                             162056.026 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.129 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.553 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       168053.675 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 16055.879 ops/s
[info]                  ·gc.alloc.rate:            1653.186 MB/sec
[info]                  ·gc.alloc.rate.norm:       162056.034 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.880 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 166829.297 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson":
[info]   15837.952 ±(99.9%) 1093.307 ops/s [Average]
[info]   (min, avg, max) = (15345.944, 15837.952, 16055.879), stdev = 283.928
[info]   CI (99.9%): [14744.645, 16931.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1630.698 ±(99.9%) 112.761 MB/sec [Average]
[info]   (min, avg, max) = (1579.870, 1630.698, 1653.186), stdev = 29.284
[info]   CI (99.9%): [1517.937, 1743.459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   162056.032 ±(99.9%) 0.033 B/op [Average]
[info]   (min, avg, max) = (162056.026, 162056.032, 162056.046), stdev = 0.009
[info]   CI (99.9%): [162055.999, 162056.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.016 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.077), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.569 ±(99.9%) 12.953 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.569, 7.585), stdev = 3.364
[info]   CI (99.9%): [≈ 0, 14.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1630.547 ±(99.9%) 613.963 MB/sec [Average]
[info]   (min, avg, max) = (1345.325, 1630.547, 1702.367), stdev = 159.444
[info]   CI (99.9%): [1016.584, 2244.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   161857.667 ±(99.9%) 51439.728 B/op [Average]
[info]   (min, avg, max) = (137997.493, 161857.667, 168858.671), stdev = 13358.734
[info]   CI (99.9%): [110417.938, 213297.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   81.979 ±(99.9%) 705.861 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 81.979, 409.894), stdev = 183.310
[info]   CI (99.9%): [≈ 0, 787.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.200, 17.000), stdev = 5.495
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce
[info] # Run progress: 39.52% complete, ETA 00:48:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 38099.915 ops/s
[info] # Warmup Iteration   2: 52432.676 ops/s
[info] # Warmup Iteration   3: 51888.637 ops/s
[info] Iteration   1: 51522.210 ops/s
[info]                  ·gc.alloc.rate:            1359.605 MB/sec
[info]                  ·gc.alloc.rate.norm:       41528.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.410 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 41186.063 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   2: 51893.847 ops/s
[info]                  ·gc.alloc.rate:                                  1369.000 MB/sec
[info]                  ·gc.alloc.rate.norm:                             41528.008 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.079 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.402 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1357.960 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       41193.119 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                101.013 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        15.000 ms
[info] Iteration   3: 50856.320 ops/s
[info]                  ·gc.alloc.rate:                                  1341.770 MB/sec
[info]                  ·gc.alloc.rate.norm:                             41528.008 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.149 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.387 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       42135.163 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 51384.024 ops/s
[info]                  ·gc.alloc.rate:            1355.693 MB/sec
[info]                  ·gc.alloc.rate.norm:       41528.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.435 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 41703.916 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 51113.522 ops/s
[info]                  ·gc.alloc.rate:                                  1348.967 MB/sec
[info]                  ·gc.alloc.rate.norm:                             41528.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.095 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.729 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       41920.890 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce":
[info]   51353.985 ±(99.9%) 1523.496 ops/s [Average]
[info]   (min, avg, max) = (50856.320, 51353.985, 51893.847), stdev = 395.647
[info]   CI (99.9%): [49830.489, 52877.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1355.007 ±(99.9%) 39.884 MB/sec [Average]
[info]   (min, avg, max) = (1341.770, 1355.007, 1369.000), stdev = 10.358
[info]   CI (99.9%): [1315.123, 1394.891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   41528.008 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (41528.008, 41528.008, 41528.009), stdev = 0.001
[info]   CI (99.9%): [41528.006, 41528.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.017 ±(99.9%) 0.133 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.079), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.529 ±(99.9%) 4.039 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.529, 2.402), stdev = 1.049
[info]   CI (99.9%): [≈ 0, 4.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1358.184 ±(99.9%) 21.865 MB/sec [Average]
[info]   (min, avg, max) = (1348.410, 1358.184, 1361.729), stdev = 5.678
[info]   CI (99.9%): [1336.319, 1380.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   41627.830 ±(99.9%) 1648.588 B/op [Average]
[info]   (min, avg, max) = (41186.063, 41627.830, 42135.163), stdev = 428.133
[info]   CI (99.9%): [39979.242, 43276.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   20.203 ±(99.9%) 173.951 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 20.203, 101.013), stdev = 45.174
[info]   CI (99.9%): [≈ 0, 194.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.000, 15.000), stdev = 5.958
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala
[info] # Run progress: 39.78% complete, ETA 00:48:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 74481.591 ops/s
[info] # Warmup Iteration   2: 115706.432 ops/s
[info] # Warmup Iteration   3: 118415.210 ops/s
[info] Iteration   1: 118544.234 ops/s
[info]                  ·gc.alloc.rate:            1004.338 MB/sec
[info]                  ·gc.alloc.rate.norm:       13336.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.053 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13398.609 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 112259.470 ops/s
[info]                  ·gc.alloc.rate:            950.956 MB/sec
[info]                  ·gc.alloc.rate.norm:       13336.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.919 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14148.870 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   3: 118120.439 ops/s
[info]                  ·gc.alloc.rate:                                  1000.755 MB/sec
[info]                  ·gc.alloc.rate.norm:                             13336.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.085 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.134 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1013.033 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       13499.607 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                53.253 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   4: 118931.392 ops/s
[info]                  ·gc.alloc.rate:                                  1007.638 MB/sec
[info]                  ·gc.alloc.rate.norm:                             13336.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.039 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.516 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.064 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       13513.691 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 115657.276 ops/s
[info]                  ·gc.alloc.rate:                                  979.807 MB/sec
[info]                  ·gc.alloc.rate.norm:                             13336.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.962 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       13896.168 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala":
[info]   116702.562 ±(99.9%) 10754.867 ops/s [Average]
[info]   (min, avg, max) = (112259.470, 116702.562, 118931.392), stdev = 2793.005
[info]   CI (99.9%): [105947.695, 127457.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   988.699 ±(99.9%) 91.372 MB/sec [Average]
[info]   (min, avg, max) = (950.956, 988.699, 1007.638), stdev = 23.729
[info]   CI (99.9%): [897.326, 1080.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   13336.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (13336.003, 13336.004, 13336.004), stdev = 0.001
[info]   CI (99.9%): [13336.003, 13336.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.025 ±(99.9%) 0.145 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.085), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.332 ±(99.9%) 1.926 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.332, 1.134), stdev = 0.500
[info]   CI (99.9%): [≈ 0, 2.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1014.606 ±(99.9%) 23.404 MB/sec [Average]
[info]   (min, avg, max) = (1008.919, 1014.606, 1021.064), stdev = 6.078
[info]   CI (99.9%): [991.203, 1038.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   13691.389 ±(99.9%) 1225.721 B/op [Average]
[info]   (min, avg, max) = (13398.609, 13691.389, 14148.870), stdev = 318.316
[info]   CI (99.9%): [12465.667, 14917.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   10.651 ±(99.9%) 91.705 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.651, 53.253), stdev = 23.815
[info]   CI (99.9%): [≈ 0, 102.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.400, 13.000), stdev = 5.079
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala
[info] # Run progress: 40.05% complete, ETA 00:47:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 980084.774 ops/s
[info] # Warmup Iteration   2: 1139349.066 ops/s
[info] # Warmup Iteration   3: 1128477.308 ops/s
[info] Iteration   1: 1135895.714 ops/s
[info]                  ·gc.alloc.rate:            1218.373 MB/sec
[info]                  ·gc.alloc.rate.norm:       1688.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.682 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1864.381 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 1121898.760 ops/s
[info]                  ·gc.alloc.rate:                                  1203.192 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1688.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.086 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.121 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1013.143 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1421.374 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                5.607 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 1120585.084 ops/s
[info]                  ·gc.alloc.rate:                                  1201.709 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1688.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.079 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.111 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.422 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1912.343 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 1116065.683 ops/s
[info]                  ·gc.alloc.rate:            1197.298 MB/sec
[info]                  ·gc.alloc.rate.norm:       1688.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.411 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1440.028 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   5: 1136303.888 ops/s
[info]                  ·gc.alloc.rate:            1218.570 MB/sec
[info]                  ·gc.alloc.rate.norm:       1688.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.354 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1885.789 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala":
[info]   1126149.826 ±(99.9%) 35958.456 ops/s [Average]
[info]   (min, avg, max) = (1116065.683, 1126149.826, 1136303.888), stdev = 9338.297
[info]   CI (99.9%): [1090191.369, 1162108.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1207.829 ±(99.9%) 38.333 MB/sec [Average]
[info]   (min, avg, max) = (1197.298, 1207.829, 1218.570), stdev = 9.955
[info]   CI (99.9%): [1169.496, 1246.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1688.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1688.000, 1688.000, 1688.000), stdev = 0.001
[info]   CI (99.9%): [1688.000, 1688.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.033 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.086), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.046 ±(99.9%) 0.245 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.121), stdev = 0.064
[info]   CI (99.9%): [≈ 0, 0.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1220.602 ±(99.9%) 715.232 MB/sec [Average]
[info]   (min, avg, max) = (1013.143, 1220.602, 1361.422), stdev = 185.744
[info]   CI (99.9%): [505.370, 1935.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1704.783 ±(99.9%) 965.990 B/op [Average]
[info]   (min, avg, max) = (1421.374, 1704.783, 1912.343), stdev = 250.864
[info]   CI (99.9%): [738.793, 2670.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.121 ±(99.9%) 9.656 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.121, 5.607), stdev = 2.508
[info]   CI (99.9%): [≈ 0, 10.777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.800, 13.000), stdev = 4.438
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 40.32% complete, ETA 00:47:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 580335.538 ops/s
[info] # Warmup Iteration   2: 653523.807 ops/s
[info] # Warmup Iteration   3: 656440.649 ops/s
[info] Iteration   1: 645814.751 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 657551.968 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 650689.518 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 655676.014 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 658456.605 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc":
[info]   653637.771 ±(99.9%) 20429.142 ops/s [Average]
[info]   (min, avg, max) = (645814.751, 653637.771, 658456.605), stdev = 5305.383
[info]   CI (99.9%): [633208.630, 674066.913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson
[info] # Run progress: 40.59% complete, ETA 00:47:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 40561.347 ops/s
[info] # Warmup Iteration   2: 56068.590 ops/s
[info] # Warmup Iteration   3: 58370.610 ops/s
[info] Iteration   1: 58549.681 ops/s
[info]                  ·gc.alloc.rate:            1361.672 MB/sec
[info]                  ·gc.alloc.rate.norm:       36608.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.362 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 36169.524 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   2: 58755.246 ops/s
[info]                  ·gc.alloc.rate:                                  1366.916 MB/sec
[info]                  ·gc.alloc.rate.norm:                             36608.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.109 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.920 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1353.850 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       36258.086 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                107.061 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   3: 57531.251 ops/s
[info]                  ·gc.alloc.rate:                                  1337.996 MB/sec
[info]                  ·gc.alloc.rate.norm:                             36608.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.032 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.867 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.389 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       37248.038 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 57313.587 ops/s
[info]                  ·gc.alloc.rate:            1332.891 MB/sec
[info]                  ·gc.alloc.rate.norm:       36608.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.352 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 37389.693 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 57661.990 ops/s
[info]                  ·gc.alloc.rate:            1341.009 MB/sec
[info]                  ·gc.alloc.rate.norm:       36608.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.307 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 37162.141 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson":
[info]   57962.351 ±(99.9%) 2488.510 ops/s [Average]
[info]   (min, avg, max) = (57313.587, 57962.351, 58755.246), stdev = 646.258
[info]   CI (99.9%): [55473.841, 60450.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1348.097 ±(99.9%) 58.458 MB/sec [Average]
[info]   (min, avg, max) = (1332.891, 1348.097, 1366.916), stdev = 15.181
[info]   CI (99.9%): [1289.638, 1406.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   36608.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (36608.007, 36608.007, 36608.007), stdev = 0.001
[info]   CI (99.9%): [36608.006, 36608.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.028 ±(99.9%) 0.182 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.109), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.757 ±(99.9%) 4.874 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.757, 2.920), stdev = 1.266
[info]   CI (99.9%): [≈ 0, 5.632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1356.652 ±(99.9%) 27.331 MB/sec [Average]
[info]   (min, avg, max) = (1345.362, 1356.652, 1361.389), stdev = 7.098
[info]   CI (99.9%): [1329.321, 1383.983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   36845.496 ±(99.9%) 2245.657 B/op [Average]
[info]   (min, avg, max) = (36169.524, 36845.496, 37389.693), stdev = 583.190
[info]   CI (99.9%): [34599.840, 39091.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.800 ±(99.9%) 6.884 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.800, 3.998), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   21.412 ±(99.9%) 184.366 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 21.412, 107.061), stdev = 47.879
[info]   CI (99.9%): [≈ 0, 205.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.600, 16.000), stdev = 5.413
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce
[info] # Run progress: 40.86% complete, ETA 00:47:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9858.692 ops/s
[info] # Warmup Iteration   2: 14097.033 ops/s
[info] # Warmup Iteration   3: 13825.655 ops/s
[info] Iteration   1: 13706.931 ops/s
[info]                  ·gc.alloc.rate:            1223.805 MB/sec
[info]                  ·gc.alloc.rate.norm:       140480.032 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.347 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 116092.070 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   2: 14139.668 ops/s
[info]                  ·gc.alloc.rate:                                  1262.094 MB/sec
[info]                  ·gc.alloc.rate.norm:                             140480.051 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.044 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.866 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1351.600 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       150442.703 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                370.731 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   3: 14386.798 ops/s
[info]                  ·gc.alloc.rate:                                  1283.922 MB/sec
[info]                  ·gc.alloc.rate.norm:                             140480.033 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.041 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.481 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.269 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       148942.970 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 13990.438 ops/s
[info]                  ·gc.alloc.rate:            1249.012 MB/sec
[info]                  ·gc.alloc.rate.norm:       140480.029 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.370 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 114876.510 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 14032.125 ops/s
[info]                  ·gc.alloc.rate:                                  1252.220 MB/sec
[info]                  ·gc.alloc.rate.norm:                             140480.036 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.649 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.239 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       152710.320 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce":
[info]   14051.192 ±(99.9%) 949.146 ops/s [Average]
[info]   (min, avg, max) = (13706.931, 14051.192, 14386.798), stdev = 246.490
[info]   CI (99.9%): [13102.046, 15000.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1254.210 ±(99.9%) 83.931 MB/sec [Average]
[info]   (min, avg, max) = (1223.805, 1254.210, 1283.922), stdev = 21.797
[info]   CI (99.9%): [1170.279, 1338.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   140480.036 ±(99.9%) 0.034 B/op [Average]
[info]   (min, avg, max) = (140480.029, 140480.036, 140480.051), stdev = 0.009
[info]   CI (99.9%): [140480.002, 140480.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.018 ±(99.9%) 0.086 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.044), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.999 ±(99.9%) 9.471 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.999, 4.866), stdev = 2.460
[info]   CI (99.9%): [≈ 0, 11.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1221.365 ±(99.9%) 720.916 MB/sec [Average]
[info]   (min, avg, max) = (1011.347, 1221.365, 1361.269), stdev = 187.220
[info]   CI (99.9%): [500.449, 1942.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   136612.915 ±(99.9%) 74467.813 B/op [Average]
[info]   (min, avg, max) = (114876.510, 136612.915, 152710.320), stdev = 19339.055
[info]   CI (99.9%): [62145.101, 211080.728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   74.146 ±(99.9%) 638.421 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 74.146, 370.731), stdev = 165.796
[info]   CI (99.9%): [≈ 0, 712.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.200, 15.000), stdev = 5.848
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala
[info] # Run progress: 41.13% complete, ETA 00:46:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7933.522 ops/s
[info] # Warmup Iteration   2: 14016.849 ops/s
[info] # Warmup Iteration   3: 14210.564 ops/s
[info] Iteration   1: 14089.127 ops/s
[info]                  ·gc.alloc.rate:                   1138.739 MB/sec
[info]                  ·gc.alloc.rate.norm:              127184.029 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1344.436 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        150157.988 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      1.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 148.819 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   2: 14112.916 ops/s
[info]                  ·gc.alloc.rate:                   1140.199 MB/sec
[info]                  ·gc.alloc.rate.norm:              127184.031 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.236 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        112464.159 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 519.980 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   3: 14001.391 ops/s
[info]                  ·gc.alloc.rate:                                  1131.354 MB/sec
[info]                  ·gc.alloc.rate.norm:                             127184.029 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.174 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 19.513 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.071 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       114786.276 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 14400.717 ops/s
[info]                  ·gc.alloc.rate:            1163.728 MB/sec
[info]                  ·gc.alloc.rate.norm:       127184.028 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.591 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 148808.536 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 14397.568 ops/s
[info]                  ·gc.alloc.rate:                                  1163.583 MB/sec
[info]                  ·gc.alloc.rate.norm:                             127184.036 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.143 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.208 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       111621.902 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala":
[info]   14200.344 ±(99.9%) 716.887 ops/s [Average]
[info]   (min, avg, max) = (14001.391, 14200.344, 14400.717), stdev = 186.173
[info]   CI (99.9%): [13483.457, 14917.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1147.521 ±(99.9%) 58.167 MB/sec [Average]
[info]   (min, avg, max) = (1131.354, 1147.521, 1163.728), stdev = 15.106
[info]   CI (99.9%): [1089.354, 1205.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   127184.031 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (127184.028, 127184.031, 127184.036), stdev = 0.003
[info]   CI (99.9%): [127184.019, 127184.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.035 ±(99.9%) 0.298 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.035, 0.174), stdev = 0.077
[info]   CI (99.9%): [≈ 0, 0.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   3.931 ±(99.9%) 33.542 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.931, 19.513), stdev = 8.711
[info]   CI (99.9%): [≈ 0, 37.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1151.309 ±(99.9%) 709.696 MB/sec [Average]
[info]   (min, avg, max) = (1008.236, 1151.309, 1361.591), stdev = 184.306
[info]   CI (99.9%): [441.612, 1861.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   127567.772 ±(99.9%) 77187.031 B/op [Average]
[info]   (min, avg, max) = (111621.902, 127567.772, 150157.988), stdev = 20045.227
[info]   CI (99.9%): [50380.741, 204754.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.199 ±(99.9%) 7.778 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.199, 4.662), stdev = 2.020
[info]   CI (99.9%): [≈ 0, 8.977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   133.760 ±(99.9%) 867.608 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 133.760, 519.980), stdev = 225.315
[info]   CI (99.9%): [≈ 0, 1001.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.000, 17.000), stdev = 6.964
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala
[info] # Run progress: 41.40% complete, ETA 00:46:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 259022.142 ops/s
[info] # Warmup Iteration   2: 282843.067 ops/s
[info] # Warmup Iteration   3: 286400.215 ops/s
[info] Iteration   1: 285473.974 ops/s
[info]                  ·gc.alloc.rate:            742.777 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.300 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3723.902 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 286011.832 ops/s
[info]                  ·gc.alloc.rate:            744.435 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.539 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3716.925 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 284714.238 ops/s
[info]                  ·gc.alloc.rate:            741.091 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1013.362 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5600.840 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 285538.815 ops/s
[info]                  ·gc.alloc.rate:            743.059 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.428 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3723.198 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 285530.090 ops/s
[info]                  ·gc.alloc.rate:                                  742.972 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4096.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.029 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.159 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            678.013 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3737.885 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     2.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                14.687 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala":
[info]   285453.790 ±(99.9%) 1797.685 ops/s [Average]
[info]   (min, avg, max) = (284714.238, 285453.790, 286011.832), stdev = 466.853
[info]   CI (99.9%): [283656.105, 287251.475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   742.867 ±(99.9%) 4.584 MB/sec [Average]
[info]   (min, avg, max) = (741.091, 742.867, 744.435), stdev = 1.190
[info]   CI (99.9%): [738.283, 747.451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.001, 4096.001, 4096.002), stdev = 0.001
[info]   CI (99.9%): [4096.001, 4096.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.006 ±(99.9%) 0.050 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.029), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.032 ±(99.9%) 0.274 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.032, 0.159), stdev = 0.071
[info]   CI (99.9%): [≈ 0, 0.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   743.528 ±(99.9%) 580.852 MB/sec [Average]
[info]   (min, avg, max) = (675.300, 743.528, 1013.362), stdev = 150.846
[info]   CI (99.9%): [162.676, 1324.381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   4100.550 ±(99.9%) 3229.622 B/op [Average]
[info]   (min, avg, max) = (3716.925, 4100.550, 5600.840), stdev = 838.723
[info]   CI (99.9%): [870.928, 7330.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.533 ±(99.9%) 4.588 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.533, 2.664), stdev = 1.191
[info]   CI (99.9%): [≈ 0, 5.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   2.937 ±(99.9%) 25.292 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.937, 14.687), stdev = 6.568
[info]   CI (99.9%): [≈ 0, 28.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 8.000), stdev = 1.414
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson
[info] # Run progress: 41.67% complete, ETA 00:46:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5466.250 ops/s
[info] # Warmup Iteration   2: 9961.493 ops/s
[info] # Warmup Iteration   3: 10495.214 ops/s
[info] Iteration   1: 10725.088 ops/s
[info]                  ·gc.alloc.rate:            1480.910 MB/sec
[info]                  ·gc.alloc.rate.norm:       217352.041 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.233 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 197438.807 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   2: 10800.372 ops/s
[info]                  ·gc.alloc.rate:                                  1491.975 MB/sec
[info]                  ·gc.alloc.rate.norm:                             217352.038 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.090 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 13.092 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1698.492 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       247437.532 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                582.434 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 10689.800 ops/s
[info]                  ·gc.alloc.rate:                                  1476.124 MB/sec
[info]                  ·gc.alloc.rate.norm:                             217352.038 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.049 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.385 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       200457.290 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 10607.395 ops/s
[info]                  ·gc.alloc.rate:                                  1464.708 MB/sec
[info]                  ·gc.alloc.rate.norm:                             217353.562 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.148 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.415 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       202025.577 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 10845.596 ops/s
[info]                  ·gc.alloc.rate:                                  1497.699 MB/sec
[info]                  ·gc.alloc.rate.norm:                             217352.038 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.695 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.775 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       246968.260 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson":
[info]   10733.650 ±(99.9%) 359.784 ops/s [Average]
[info]   (min, avg, max) = (10607.395, 10733.650, 10845.596), stdev = 93.435
[info]   CI (99.9%): [10373.866, 11093.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1482.283 ±(99.9%) 50.217 MB/sec [Average]
[info]   (min, avg, max) = (1464.708, 1482.283, 1497.699), stdev = 13.041
[info]   CI (99.9%): [1432.066, 1532.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   217352.343 ±(99.9%) 2.623 B/op [Average]
[info]   (min, avg, max) = (217352.038, 217352.343, 217353.562), stdev = 0.681
[info]   CI (99.9%): [217349.720, 217354.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.019 ±(99.9%) 0.152 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.090), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.797 ±(99.9%) 22.186 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.797, 13.092), stdev = 5.762
[info]   CI (99.9%): [≈ 0, 24.983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1493.660 ±(99.9%) 726.241 MB/sec [Average]
[info]   (min, avg, max) = (1345.233, 1493.660, 1701.775), stdev = 188.603
[info]   CI (99.9%): [767.419, 2219.901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   218865.493 ±(99.9%) 99814.056 B/op [Average]
[info]   (min, avg, max) = (197438.807, 218865.493, 247437.532), stdev = 25921.393
[info]   CI (99.9%): [119051.437, 318679.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.800 ±(99.9%) 6.885 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.800, 3.998), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   116.487 ±(99.9%) 1002.987 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 116.487, 582.434), stdev = 260.473
[info]   CI (99.9%): [≈ 0, 1119.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.600, 17.000), stdev = 5.505
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce
[info] # Run progress: 41.94% complete, ETA 00:46:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26439.323 ops/s
[info] # Warmup Iteration   2: 38269.586 ops/s
[info] # Warmup Iteration   3: 38242.064 ops/s
[info] Iteration   1: 38539.714 ops/s
[info]                  ·gc.alloc.rate:            1267.721 MB/sec
[info]                  ·gc.alloc.rate.norm:       51771.054 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.155 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 41293.444 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 38274.795 ops/s
[info]                  ·gc.alloc.rate:                                  1258.720 MB/sec
[info]                  ·gc.alloc.rate.norm:                             51768.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.045 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.852 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1351.346 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       55577.459 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                136.958 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   3: 38603.036 ops/s
[info]                  ·gc.alloc.rate:                                  1269.631 MB/sec
[info]                  ·gc.alloc.rate.norm:                             51768.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.037 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.506 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.471 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       55512.687 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 38141.092 ops/s
[info]                  ·gc.alloc.rate:                                  1254.493 MB/sec
[info]                  ·gc.alloc.rate.norm:                             51768.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.073 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.459 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       56182.058 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 39132.891 ops/s
[info]                  ·gc.alloc.rate:                                  1286.942 MB/sec
[info]                  ·gc.alloc.rate.norm:                             51768.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.111 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.983 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       41069.673 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce":
[info]   38538.306 ±(99.9%) 1472.512 ops/s [Average]
[info]   (min, avg, max) = (38141.092, 38538.306, 39132.891), stdev = 382.407
[info]   CI (99.9%): [37065.794, 40010.818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1267.502 ±(99.9%) 48.280 MB/sec [Average]
[info]   (min, avg, max) = (1254.493, 1267.502, 1286.942), stdev = 12.538
[info]   CI (99.9%): [1219.221, 1315.782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   51768.619 ±(99.9%) 5.240 B/op [Average]
[info]   (min, avg, max) = (51768.010, 51768.619, 51771.054), stdev = 1.361
[info]   CI (99.9%): [51763.379, 51773.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.017 ±(99.9%) 0.084 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.045), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.709 ±(99.9%) 3.448 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.709, 1.852), stdev = 0.895
[info]   CI (99.9%): [≈ 0, 4.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1221.283 ±(99.9%) 721.654 MB/sec [Average]
[info]   (min, avg, max) = (1011.155, 1221.283, 1361.471), stdev = 187.411
[info]   CI (99.9%): [499.629, 1942.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   49927.064 ±(99.9%) 30759.625 B/op [Average]
[info]   (min, avg, max) = (41069.673, 49927.064, 56182.058), stdev = 7988.177
[info]   CI (99.9%): [19167.439, 80686.689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   27.392 ±(99.9%) 235.850 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 27.392, 136.958), stdev = 61.249
[info]   CI (99.9%): [≈ 0, 263.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.600, 11.000), stdev = 4.037
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala
[info] # Run progress: 42.20% complete, ETA 00:46:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27696.011 ops/s
[info] # Warmup Iteration   2: 46421.465 ops/s
[info] # Warmup Iteration   3: 45967.272 ops/s
[info] Iteration   1: 46204.060 ops/s
[info]                  ·gc.alloc.rate:                   1226.009 MB/sec
[info]                  ·gc.alloc.rate.norm:              41752.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.234 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        45812.234 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 22.691 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   2: 46521.012 ops/s
[info]                  ·gc.alloc.rate:                                  1234.401 MB/sec
[info]                  ·gc.alloc.rate.norm:                             41752.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.104 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.517 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1013.452 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       34278.679 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                135.222 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   3: 46640.602 ops/s
[info]                  ·gc.alloc.rate:                                  1237.189 MB/sec
[info]                  ·gc.alloc.rate.norm:                             41752.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.116 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.900 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.494 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       45946.992 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 46957.467 ops/s
[info]                  ·gc.alloc.rate:            1245.710 MB/sec
[info]                  ·gc.alloc.rate.norm:       41752.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.589 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 45635.885 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 46363.324 ops/s
[info]                  ·gc.alloc.rate:                                  1229.848 MB/sec
[info]                  ·gc.alloc.rate.norm:                             41752.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.089 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.103 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       34665.351 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala":
[info]   46537.293 ±(99.9%) 1103.990 ops/s [Average]
[info]   (min, avg, max) = (46204.060, 46537.293, 46957.467), stdev = 286.703
[info]   CI (99.9%): [45433.303, 47641.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1234.631 ±(99.9%) 28.979 MB/sec [Average]
[info]   (min, avg, max) = (1226.009, 1234.631, 1245.710), stdev = 7.526
[info]   CI (99.9%): [1205.652, 1263.611] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   41752.009 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (41752.009, 41752.009, 41752.009), stdev = 0.001
[info]   CI (99.9%): [41752.008, 41752.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.044 ±(99.9%) 0.230 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.044, 0.116), stdev = 0.060
[info]   CI (99.9%): [≈ 0, 0.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.501 ±(99.9%) 7.778 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.501, 3.900), stdev = 2.020
[info]   CI (99.9%): [≈ 0, 9.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1220.574 ±(99.9%) 715.153 MB/sec [Average]
[info]   (min, avg, max) = (1013.452, 1220.574, 1361.589), stdev = 185.723
[info]   CI (99.9%): [505.421, 1935.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   41267.828 ±(99.9%) 23897.816 B/op [Average]
[info]   (min, avg, max) = (34278.679, 41267.828, 45946.992), stdev = 6206.187
[info]   CI (99.9%): [17370.012, 65165.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 6.691 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.998), stdev = 1.738
[info]   CI (99.9%): [≈ 0, 7.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   31.582 ±(99.9%) 226.276 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 31.582, 135.222), stdev = 58.763
[info]   CI (99.9%): [≈ 0, 257.859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.200, 16.000), stdev = 5.718
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala
[info] # Run progress: 42.47% complete, ETA 00:45:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1169699.096 ops/s
[info] # Warmup Iteration   2: 1328281.752 ops/s
[info] # Warmup Iteration   3: 1291600.560 ops/s
[info] Iteration   1: 1292613.752 ops/s
[info]                  ·gc.alloc.rate:            1175.913 MB/sec
[info]                  ·gc.alloc.rate.norm:       1432.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.951 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1228.677 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 1288028.076 ops/s
[info]                  ·gc.alloc.rate:                                  1171.630 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1432.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.059 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.072 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1349.251 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1649.095 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                4.884 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   3: 1331348.472 ops/s
[info]                  ·gc.alloc.rate:                                  1211.176 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1432.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.074 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.087 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.051 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1207.211 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 1313325.697 ops/s
[info]                  ·gc.alloc.rate:            1194.816 MB/sec
[info]                  ·gc.alloc.rate.norm:       1432.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.437 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1631.697 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 1334889.427 ops/s
[info]                  ·gc.alloc.rate:                                  1214.628 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1432.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.203 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1203.960 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala":
[info]   1312041.085 ±(99.9%) 82822.821 ops/s [Average]
[info]   (min, avg, max) = (1288028.076, 1312041.085, 1334889.427), stdev = 21508.824
[info]   CI (99.9%): [1229218.264, 1394863.906] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1193.633 ±(99.9%) 75.752 MB/sec [Average]
[info]   (min, avg, max) = (1171.630, 1193.633, 1214.628), stdev = 19.673
[info]   CI (99.9%): [1117.880, 1269.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1432.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1432.000, 1432.000, 1432.000), stdev = 0.001
[info]   CI (99.9%): [1432.000, 1432.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.027 ±(99.9%) 0.141 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.074), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.032 ±(99.9%) 0.169 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.032, 0.087), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1152.379 ±(99.9%) 713.902 MB/sec [Average]
[info]   (min, avg, max) = (1008.951, 1152.379, 1361.437), stdev = 185.398
[info]   CI (99.9%): [438.476, 1866.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1384.128 ±(99.9%) 901.870 B/op [Average]
[info]   (min, avg, max) = (1203.960, 1384.128, 1649.095), stdev = 234.213
[info]   CI (99.9%): [482.258, 2285.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.977 ±(99.9%) 8.410 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.977, 4.884), stdev = 2.184
[info]   CI (99.9%): [≈ 0, 9.387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.600, 11.000), stdev = 4.099
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 42.74% complete, ETA 00:45:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1248889.821 ops/s
[info] # Warmup Iteration   2: 1425866.918 ops/s
[info] # Warmup Iteration   3: 1429739.956 ops/s
[info] Iteration   1: 1429396.005 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1429268.684 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1429303.741 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1429367.313 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1429182.280 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   1429303.605 ±(99.9%) 325.236 ops/s [Average]
[info]   (min, avg, max) = (1429182.280, 1429303.605, 1429396.005), stdev = 84.463
[info]   CI (99.9%): [1428978.369, 1429628.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson
[info] # Run progress: 43.01% complete, ETA 00:45:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25872.955 ops/s
[info] # Warmup Iteration   2: 35424.354 ops/s
[info] # Warmup Iteration   3: 35462.747 ops/s
[info] Iteration   1: 35359.902 ops/s
[info]                  ·gc.alloc.rate:            1070.031 MB/sec
[info]                  ·gc.alloc.rate.norm:       47621.734 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.726 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 59891.521 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   2: 36195.884 ops/s
[info]                  ·gc.alloc.rate:            1095.360 MB/sec
[info]                  ·gc.alloc.rate.norm:       47616.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.476 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 43882.562 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 36682.898 ops/s
[info]                  ·gc.alloc.rate:                                  1109.981 MB/sec
[info]                  ·gc.alloc.rate.norm:                             47616.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.125 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.380 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.366 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       43643.032 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                171.485 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 36938.786 ops/s
[info]                  ·gc.alloc.rate:                                  1117.615 MB/sec
[info]                  ·gc.alloc.rate.norm:                             47616.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.029 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.236 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.235 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       43509.731 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 36977.328 ops/s
[info]                  ·gc.alloc.rate:                                  1118.823 MB/sec
[info]                  ·gc.alloc.rate.norm:                             47616.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.167 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.681 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       57951.799 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson":
[info]   36430.959 ±(99.9%) 2599.046 ops/s [Average]
[info]   (min, avg, max) = (35359.902, 36430.959, 36977.328), stdev = 674.964
[info]   CI (99.9%): [33831.914, 39030.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1102.362 ±(99.9%) 78.348 MB/sec [Average]
[info]   (min, avg, max) = (1070.031, 1102.362, 1118.823), stdev = 20.347
[info]   CI (99.9%): [1024.014, 1180.710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   47617.156 ±(99.9%) 9.855 B/op [Average]
[info]   (min, avg, max) = (47616.011, 47617.156, 47621.734), stdev = 2.559
[info]   CI (99.9%): [47607.301, 47627.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.032 ±(99.9%) 0.207 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.032, 0.125), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.357 ±(99.9%) 8.885 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.357, 5.380), stdev = 2.307
[info]   CI (99.9%): [≈ 0, 10.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1151.097 ±(99.9%) 712.709 MB/sec [Average]
[info]   (min, avg, max) = (1009.476, 1151.097, 1361.681), stdev = 185.088
[info]   CI (99.9%): [438.388, 1863.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   49775.729 ±(99.9%) 32261.611 B/op [Average]
[info]   (min, avg, max) = (43509.731, 49775.729, 59891.521), stdev = 8378.238
[info]   CI (99.9%): [17514.118, 82037.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.800 ±(99.9%) 6.884 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.800, 3.998), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   34.297 ±(99.9%) 295.308 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 34.297, 171.485), stdev = 76.691
[info]   CI (99.9%): [≈ 0, 329.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.200, 16.000), stdev = 5.762
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce
[info] # Run progress: 43.28% complete, ETA 00:45:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 101669.096 ops/s
[info] # Warmup Iteration   2: 123418.580 ops/s
[info] # Warmup Iteration   3: 122455.360 ops/s
[info] Iteration   1: 124969.742 ops/s
[info]                  ·gc.alloc.rate:                                  2144.218 MB/sec
[info]                  ·gc.alloc.rate.norm:                             27000.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.066 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.826 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2383.135 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       30008.451 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 125020.680 ops/s
[info]                  ·gc.alloc.rate:                                  2145.422 MB/sec
[info]                  ·gc.alloc.rate.norm:                             27000.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.040 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2043.049 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       25711.656 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 124983.755 ops/s
[info]                  ·gc.alloc.rate:                                  2143.770 MB/sec
[info]                  ·gc.alloc.rate.norm:                             27000.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.087 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.983 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       25718.032 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 124867.046 ops/s
[info]                  ·gc.alloc.rate:                                  2142.592 MB/sec
[info]                  ·gc.alloc.rate.norm:                             27000.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.050 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2383.292 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       30033.201 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 124895.854 ops/s
[info]                  ·gc.alloc.rate:            2143.108 MB/sec
[info]                  ·gc.alloc.rate.norm:       27000.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2042.806 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 25736.355 B/op
[info]                  ·gc.count:                 6.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce":
[info]   124947.415 ±(99.9%) 245.842 ops/s [Average]
[info]   (min, avg, max) = (124867.046, 124947.415, 125020.680), stdev = 63.844
[info]   CI (99.9%): [124701.573, 125193.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate":
[info]   2143.822 ±(99.9%) 4.192 MB/sec [Average]
[info]   (min, avg, max) = (2142.592, 2143.822, 2145.422), stdev = 1.089
[info]   CI (99.9%): [2139.630, 2148.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   27000.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (27000.003, 27000.003, 27000.004), stdev = 0.001
[info]   CI (99.9%): [27000.003, 27000.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.016 ±(99.9%) 0.107 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.066), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.201 ±(99.9%) 1.352 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.201, 0.826), stdev = 0.351
[info]   CI (99.9%): [≈ 0, 1.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2178.853 ±(99.9%) 718.357 MB/sec [Average]
[info]   (min, avg, max) = (2041.983, 2178.853, 2383.292), stdev = 186.555
[info]   CI (99.9%): [1460.496, 2897.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   27441.539 ±(99.9%) 9066.687 B/op [Average]
[info]   (min, avg, max) = (25711.656, 27441.539, 30033.201), stdev = 2354.590
[info]   CI (99.9%): [18374.852, 36508.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.count":
[info]   32.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava
[info] # Run progress: 43.55% complete, ETA 00:45:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6648.711 ops/s
[info] # Warmup Iteration   2: 337475.760 ops/s
[info] # Warmup Iteration   3: 348294.361 ops/s
[info] Iteration   1: 348716.975 ops/s
[info]                  ·gc.alloc.rate:            698.377 MB/sec
[info]                  ·gc.alloc.rate.norm:       3152.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.467 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3012.493 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 342772.714 ops/s
[info]                  ·gc.alloc.rate:            686.469 MB/sec
[info]                  ·gc.alloc.rate.norm:       3152.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.467 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3064.751 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 348792.240 ops/s
[info]                  ·gc.alloc.rate:                   698.451 MB/sec
[info]                  ·gc.alloc.rate.norm:              3152.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             666.727 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3008.839 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.006 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 348346.508 ops/s
[info]                  ·gc.alloc.rate:            697.585 MB/sec
[info]                  ·gc.alloc.rate.norm:       3152.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.419 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3015.701 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 348139.468 ops/s
[info]                  ·gc.alloc.rate:                   697.169 MB/sec
[info]                  ·gc.alloc.rate.norm:              3152.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             666.752 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3014.482 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.011 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava":
[info]   347353.581 ±(99.9%) 9914.276 ops/s [Average]
[info]   (min, avg, max) = (342772.714, 347353.581, 348792.240), stdev = 2574.706
[info]   CI (99.9%): [337439.305, 357267.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   695.610 ±(99.9%) 19.786 MB/sec [Average]
[info]   (min, avg, max) = (686.469, 695.610, 698.451), stdev = 5.138
[info]   CI (99.9%): [675.824, 715.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   3152.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3152.001, 3152.001, 3152.001), stdev = 0.001
[info]   CI (99.9%): [3152.001, 3152.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   667.167 ±(99.9%) 1.502 MB/sec [Average]
[info]   (min, avg, max) = (666.727, 667.167, 667.467), stdev = 0.390
[info]   CI (99.9%): [665.664, 668.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   3023.253 ±(99.9%) 89.885 B/op [Average]
[info]   (min, avg, max) = (3008.839, 3023.253, 3064.751), stdev = 23.343
[info]   CI (99.9%): [2933.368, 3113.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   1.203 ±(99.9%) 6.346 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.203, 3.011), stdev = 1.648
[info]   CI (99.9%): [≈ 0, 7.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.time":
[info]   49.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 9.800, 10.000), stdev = 0.447
[info]   CI (99.9%): [49.000, 49.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala
[info] # Run progress: 43.82% complete, ETA 00:44:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 152811.617 ops/s
[info] # Warmup Iteration   2: 231572.565 ops/s
[info] # Warmup Iteration   3: 232636.538 ops/s
[info] Iteration   1: 234388.818 ops/s
[info]                  ·gc.alloc.rate:                   519.446 MB/sec
[info]                  ·gc.alloc.rate.norm:              3488.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             335.715 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2254.281 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 4.473 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 233996.817 ops/s
[info]                  ·gc.alloc.rate:            518.551 MB/sec
[info]                  ·gc.alloc.rate.norm:       3488.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.752 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4525.228 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 235368.227 ops/s
[info]                  ·gc.alloc.rate:            521.675 MB/sec
[info]                  ·gc.alloc.rate.norm:       3488.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.436 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2249.465 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 234173.586 ops/s
[info]                  ·gc.alloc.rate:            519.119 MB/sec
[info]                  ·gc.alloc.rate.norm:       3488.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.978 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4521.789 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 235398.748 ops/s
[info]                  ·gc.alloc.rate:            521.665 MB/sec
[info]                  ·gc.alloc.rate.norm:       3488.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.381 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2249.140 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala":
[info]   234665.239 ±(99.9%) 2581.042 ops/s [Average]
[info]   (min, avg, max) = (233996.817, 234665.239, 235398.748), stdev = 670.288
[info]   CI (99.9%): [232084.197, 237246.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   520.091 ±(99.9%) 5.685 MB/sec [Average]
[info]   (min, avg, max) = (518.551, 520.091, 521.675), stdev = 1.476
[info]   CI (99.9%): [514.406, 525.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3488.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3488.002, 3488.002, 3488.002), stdev = 0.001
[info]   CI (99.9%): [3488.002, 3488.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   470.853 ±(99.9%) 710.104 MB/sec [Average]
[info]   (min, avg, max) = (335.715, 470.853, 672.978), stdev = 184.412
[info]   CI (99.9%): [≈ 0, 1180.956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   3159.981 ±(99.9%) 4793.001 B/op [Average]
[info]   (min, avg, max) = (2249.140, 3159.981, 4525.228), stdev = 1244.727
[info]   CI (99.9%): [≈ 0, 7952.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.895 ±(99.9%) 7.702 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.895, 4.473), stdev = 2.000
[info]   CI (99.9%): [≈ 0, 8.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 9.000), stdev = 2.345
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala
[info] # Run progress: 44.09% complete, ETA 00:44:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 463888.781 ops/s
[info] # Warmup Iteration   2: 489143.318 ops/s
[info] # Warmup Iteration   3: 486178.139 ops/s
[info] Iteration   1: 489054.799 ops/s
[info]                  ·gc.alloc.rate:            616.405 MB/sec
[info]                  ·gc.alloc.rate.norm:       1984.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.003 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2169.389 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 480375.921 ops/s
[info]                  ·gc.alloc.rate:            605.416 MB/sec
[info]                  ·gc.alloc.rate.norm:       1984.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.008 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2208.783 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 480782.043 ops/s
[info]                  ·gc.alloc.rate:            606.026 MB/sec
[info]                  ·gc.alloc.rate.norm:       1984.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.056 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1103.452 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 480008.343 ops/s
[info]                  ·gc.alloc.rate:            605.063 MB/sec
[info]                  ·gc.alloc.rate.norm:       1984.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.118 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2210.435 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 479514.657 ops/s
[info]                  ·gc.alloc.rate:            604.626 MB/sec
[info]                  ·gc.alloc.rate.norm:       1984.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.334 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2212.739 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala":
[info]   481947.153 ±(99.9%) 15405.092 ops/s [Average]
[info]   (min, avg, max) = (479514.657, 481947.153, 489054.799), stdev = 4000.653
[info]   CI (99.9%): [466542.061, 497352.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   607.507 ±(99.9%) 19.255 MB/sec [Average]
[info]   (min, avg, max) = (604.626, 607.507, 616.405), stdev = 5.000
[info]   CI (99.9%): [588.252, 626.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1984.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1984.001, 1984.001, 1984.001), stdev = 0.001
[info]   CI (99.9%): [1984.001, 1984.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   606.704 ±(99.9%) 580.437 MB/sec [Average]
[info]   (min, avg, max) = (337.056, 606.704, 674.334), stdev = 150.738
[info]   CI (99.9%): [26.267, 1187.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1980.960 ±(99.9%) 1890.161 B/op [Average]
[info]   (min, avg, max) = (1103.452, 1980.960, 2212.739), stdev = 490.869
[info]   CI (99.9%): [90.798, 3871.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 6.000), stdev = 1.342
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson
[info] # Run progress: 44.35% complete, ETA 00:44:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37716.059 ops/s
[info] # Warmup Iteration   2: 65867.424 ops/s
[info] # Warmup Iteration   3: 68536.334 ops/s
[info] Iteration   1: 69360.457 ops/s
[info]                  ·gc.alloc.rate:                                  3094.523 MB/sec
[info]                  ·gc.alloc.rate.norm:                             70232.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.060 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.023 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       69517.097 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   2: 69312.766 ops/s
[info]                  ·gc.alloc.rate:                                  3093.531 MB/sec
[info]                  ·gc.alloc.rate.norm:                             70232.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.017 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.389 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3404.525 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       77292.472 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   3: 69349.572 ops/s
[info]                  ·gc.alloc.rate:                                  3095.510 MB/sec
[info]                  ·gc.alloc.rate.norm:                             70232.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.172 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3064.353 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       69525.115 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   4: 68916.515 ops/s
[info]                  ·gc.alloc.rate:                                  3074.717 MB/sec
[info]                  ·gc.alloc.rate.norm:                             70232.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.009 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.210 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3062.935 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       69962.875 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   5: 67806.555 ops/s
[info]                  ·gc.alloc.rate:                                  3025.662 MB/sec
[info]                  ·gc.alloc.rate.norm:                             70232.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.164 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.581 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       71112.175 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson":
[info]   68949.173 ±(99.9%) 2560.256 ops/s [Average]
[info]   (min, avg, max) = (67806.555, 68949.173, 69360.457), stdev = 664.890
[info]   CI (99.9%): [66388.917, 71509.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3076.789 ±(99.9%) 114.932 MB/sec [Average]
[info]   (min, avg, max) = (3025.662, 3076.789, 3095.510), stdev = 29.847
[info]   CI (99.9%): [2961.857, 3191.720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   70232.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (70232.006, 70232.006, 70232.006), stdev = 0.001
[info]   CI (99.9%): [70232.005, 70232.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.009 ±(99.9%) 0.020 MB/sec [Average]
[info]   (min, avg, max) = (0.003, 0.009, 0.017), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.199 ±(99.9%) 0.463 B/op [Average]
[info]   (min, avg, max) = (0.060, 0.199, 0.389), stdev = 0.120
[info]   CI (99.9%): [≈ 0, 0.662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   3131.683 ±(99.9%) 587.316 MB/sec [Average]
[info]   (min, avg, max) = (3062.935, 3131.683, 3404.525), stdev = 152.524
[info]   CI (99.9%): [2544.367, 3719.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   71481.947 ±(99.9%) 12756.089 B/op [Average]
[info]   (min, avg, max) = (69517.097, 71481.947, 77292.472), stdev = 3312.716
[info]   CI (99.9%): [58725.858, 84238.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.count":
[info]   46.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.200, 10.000), stdev = 0.447
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.800, 10.000), stdev = 1.095
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce
[info] # Run progress: 44.62% complete, ETA 00:44:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 144569.656 ops/s
[info] # Warmup Iteration   2: 187726.097 ops/s
[info] # Warmup Iteration   3: 186564.287 ops/s
[info] Iteration   1: 190884.565 ops/s
[info]                  ·gc.alloc.rate:                                  1645.247 MB/sec
[info]                  ·gc.alloc.rate.norm:                             13568.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.158 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.303 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1691.635 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       13950.549 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                27.462 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        16.000 ms
[info] Iteration   2: 193700.261 ops/s
[info]                  ·gc.alloc.rate:                                  1669.565 MB/sec
[info]                  ·gc.alloc.rate.norm:                             13568.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.034 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.614 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       13828.458 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 192814.853 ops/s
[info]                  ·gc.alloc.rate:                                  1661.856 MB/sec
[info]                  ·gc.alloc.rate.norm:                             13568.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.557 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       13892.133 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 190628.585 ops/s
[info]                  ·gc.alloc.rate:                                  1643.738 MB/sec
[info]                  ·gc.alloc.rate.norm:                             13568.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.835 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11241.067 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 191217.157 ops/s
[info]                  ·gc.alloc.rate:                                  1648.259 MB/sec
[info]                  ·gc.alloc.rate.norm:                             13568.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.798 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       14008.720 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce":
[info]   191849.084 ±(99.9%) 5158.575 ops/s [Average]
[info]   (min, avg, max) = (190628.585, 191849.084, 193700.261), stdev = 1339.665
[info]   CI (99.9%): [186690.510, 197007.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1653.733 ±(99.9%) 43.840 MB/sec [Average]
[info]   (min, avg, max) = (1643.738, 1653.733, 1669.565), stdev = 11.385
[info]   CI (99.9%): [1609.893, 1697.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   13568.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (13568.002, 13568.002, 13568.002), stdev = 0.001
[info]   CI (99.9%): [13568.002, 13568.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.033 ±(99.9%) 0.269 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.033, 0.158), stdev = 0.070
[info]   CI (99.9%): [≈ 0, 0.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.272 ±(99.9%) 2.218 B/op [Average]
[info]   (min, avg, max) = (0.005, 0.272, 1.303), stdev = 0.576
[info]   CI (99.9%): [≈ 0, 2.491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1631.688 ±(99.9%) 581.120 MB/sec [Average]
[info]   (min, avg, max) = (1361.835, 1631.688, 1701.798), stdev = 150.915
[info]   CI (99.9%): [1050.568, 2212.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   13384.186 ±(99.9%) 4620.434 B/op [Average]
[info]   (min, avg, max) = (11241.067, 13384.186, 14008.720), stdev = 1199.912
[info]   CI (99.9%): [8763.752, 18004.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   5.492 ±(99.9%) 47.291 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.492, 27.462), stdev = 12.281
[info]   CI (99.9%): [≈ 0, 52.783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.800, 16.000), stdev = 5.215
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava
[info] # Run progress: 44.89% complete, ETA 00:43:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23670.562 ops/s
[info] # Warmup Iteration   2: 718622.973 ops/s
[info] # Warmup Iteration   3: 728664.560 ops/s
[info] Iteration   1: 718954.387 ops/s
[info]                  ·gc.alloc.rate:            562.728 MB/sec
[info]                  ·gc.alloc.rate.norm:       1232.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.401 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1461.166 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 725942.611 ops/s
[info]                  ·gc.alloc.rate:            568.157 MB/sec
[info]                  ·gc.alloc.rate.norm:       1232.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.676 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 723.549 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 722299.073 ops/s
[info]                  ·gc.alloc.rate:            565.293 MB/sec
[info]                  ·gc.alloc.rate.norm:       1232.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.340 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1454.402 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 725467.933 ops/s
[info]                  ·gc.alloc.rate:            567.848 MB/sec
[info]                  ·gc.alloc.rate.norm:       1232.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.429 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1448.052 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 724854.099 ops/s
[info]                  ·gc.alloc.rate:                   567.353 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             666.736 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1447.810 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.446 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava":
[info]   723503.621 ±(99.9%) 11189.658 ops/s [Average]
[info]   (min, avg, max) = (718954.387, 723503.621, 725942.611), stdev = 2905.919
[info]   CI (99.9%): [712313.963, 734693.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   566.276 ±(99.9%) 8.765 MB/sec [Average]
[info]   (min, avg, max) = (562.728, 566.276, 568.157), stdev = 2.276
[info]   CI (99.9%): [557.510, 575.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   1232.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1232.001, 1232.001, 1232.001), stdev = 0.001
[info]   CI (99.9%): [1232.000, 1232.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   600.516 ±(99.9%) 574.395 MB/sec [Average]
[info]   (min, avg, max) = (333.676, 600.516, 667.429), stdev = 149.168
[info]   CI (99.9%): [26.122, 1174.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   1306.996 ±(99.9%) 1256.090 B/op [Average]
[info]   (min, avg, max) = (723.549, 1306.996, 1461.166), stdev = 326.202
[info]   CI (99.9%): [50.906, 2563.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   0.289 ±(99.9%) 2.491 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.289, 1.446), stdev = 0.647
[info]   CI (99.9%): [≈ 0, 2.780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 8.600, 10.000), stdev = 2.608
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJavaPrealloc
[info] # Run progress: 45.16% complete, ETA 00:43:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 33620.697 ops/s
[info] # Warmup Iteration   2: 748751.293 ops/s
[info] # Warmup Iteration   3: 755796.969 ops/s
[info] Iteration   1: 753255.138 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 753750.323 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 750876.038 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 753986.568 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 750581.176 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJavaPrealloc":
[info]   752489.848 ±(99.9%) 6286.714 ops/s [Average]
[info]   (min, avg, max) = (750581.176, 752489.848, 753986.568), stdev = 1632.640
[info]   CI (99.9%): [746203.135, 758776.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJavaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJavaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 10⁻³, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJavaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala
[info] # Run progress: 45.43% complete, ETA 00:43:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 311396.358 ops/s
[info] # Warmup Iteration   2: 458037.872 ops/s
[info] # Warmup Iteration   3: 474027.863 ops/s
[info] Iteration   1: 469818.436 ops/s
[info]                  ·gc.alloc.rate:            482.309 MB/sec
[info]                  ·gc.alloc.rate.norm:       1616.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.670 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2253.812 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 467173.209 ops/s
[info]                  ·gc.alloc.rate:            479.801 MB/sec
[info]                  ·gc.alloc.rate.norm:       1616.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.489 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1133.317 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 461852.600 ops/s
[info]                  ·gc.alloc.rate:            474.099 MB/sec
[info]                  ·gc.alloc.rate.norm:       1616.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.656 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2292.798 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 470624.828 ops/s
[info]                  ·gc.alloc.rate:            483.185 MB/sec
[info]                  ·gc.alloc.rate.norm:       1616.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.377 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1125.005 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 472044.264 ops/s
[info]                  ·gc.alloc.rate:            484.617 MB/sec
[info]                  ·gc.alloc.rate.norm:       1616.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.706 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2243.200 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala":
[info]   468302.667 ±(99.9%) 15470.843 ops/s [Average]
[info]   (min, avg, max) = (461852.600, 468302.667, 472044.264), stdev = 4017.729
[info]   CI (99.9%): [452831.825, 483773.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   480.802 ±(99.9%) 15.929 MB/sec [Average]
[info]   (min, avg, max) = (474.099, 480.802, 484.617), stdev = 4.137
[info]   CI (99.9%): [464.874, 496.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1616.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1616.001, 1616.001, 1616.001), stdev = 0.001
[info]   CI (99.9%): [1616.001, 1616.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   538.180 ±(99.9%) 709.167 MB/sec [Average]
[info]   (min, avg, max) = (336.377, 538.180, 672.706), stdev = 184.168
[info]   CI (99.9%): [≈ 0, 1247.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1809.626 ±(99.9%) 2393.016 B/op [Average]
[info]   (min, avg, max) = (1125.005, 1809.626, 2292.798), stdev = 621.459
[info]   CI (99.9%): [≈ 0, 4202.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.600, 9.000), stdev = 2.408
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala
[info] # Run progress: 45.70% complete, ETA 00:43:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 532285.418 ops/s
[info] # Warmup Iteration   2: 599886.950 ops/s
[info] # Warmup Iteration   3: 624820.694 ops/s
[info] Iteration   1: 638371.730 ops/s
[info]                  ·gc.alloc.rate:            499.645 MB/sec
[info]                  ·gc.alloc.rate.norm:       1232.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.362 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 829.385 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 622206.483 ops/s
[info]                  ·gc.alloc.rate:            486.936 MB/sec
[info]                  ·gc.alloc.rate.norm:       1232.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.637 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1701.843 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 638548.424 ops/s
[info]                  ·gc.alloc.rate:            499.747 MB/sec
[info]                  ·gc.alloc.rate.norm:       1232.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.333 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 829.146 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 638469.607 ops/s
[info]                  ·gc.alloc.rate:            499.798 MB/sec
[info]                  ·gc.alloc.rate.norm:       1232.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.819 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1658.497 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 638151.051 ops/s
[info]                  ·gc.alloc.rate:            499.651 MB/sec
[info]                  ·gc.alloc.rate.norm:       1232.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.489 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 829.688 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala":
[info]   635149.459 ±(99.9%) 27866.637 ops/s [Average]
[info]   (min, avg, max) = (622206.483, 635149.459, 638548.424), stdev = 7236.877
[info]   CI (99.9%): [607282.822, 663016.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   497.155 ±(99.9%) 21.998 MB/sec [Average]
[info]   (min, avg, max) = (486.936, 497.155, 499.798), stdev = 5.713
[info]   CI (99.9%): [475.157, 519.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1232.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1232.001, 1232.001, 1232.001), stdev = 0.001
[info]   CI (99.9%): [1232.001, 1232.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   470.928 ±(99.9%) 709.356 MB/sec [Average]
[info]   (min, avg, max) = (336.333, 470.928, 672.819), stdev = 184.218
[info]   CI (99.9%): [≈ 0, 1180.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1169.712 ±(99.9%) 1795.303 B/op [Average]
[info]   (min, avg, max) = (829.146, 1169.712, 1701.843), stdev = 466.234
[info]   CI (99.9%): [≈ 0, 2965.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 7.000), stdev = 1.949
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 45.97% complete, ETA 00:43:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 576832.116 ops/s
[info] # Warmup Iteration   2: 637429.364 ops/s
[info] # Warmup Iteration   3: 639089.486 ops/s
[info] Iteration   1: 637881.937 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 638945.446 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 638852.813 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 636093.865 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 638790.879 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc":
[info]   638112.988 ±(99.9%) 4648.809 ops/s [Average]
[info]   (min, avg, max) = (636093.865, 638112.988, 638945.446), stdev = 1207.281
[info]   CI (99.9%): [633464.179, 642761.797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson
[info] # Run progress: 46.24% complete, ETA 00:42:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18802.677 ops/s
[info] # Warmup Iteration   2: 27605.112 ops/s
[info] # Warmup Iteration   3: 27945.969 ops/s
[info] Iteration   1: 27940.463 ops/s
[info]                  ·gc.alloc.rate:            1432.553 MB/sec
[info]                  ·gc.alloc.rate.norm:       80704.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.387 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 75793.442 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   2: 28068.761 ops/s
[info]                  ·gc.alloc.rate:                                  1438.768 MB/sec
[info]                  ·gc.alloc.rate.norm:                             80692.732 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.133 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 7.435 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1357.238 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       76120.178 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                224.103 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 28401.439 ops/s
[info]                  ·gc.alloc.rate:                                  1455.935 MB/sec
[info]                  ·gc.alloc.rate.norm:                             80688.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.089 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.821 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       94314.993 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 28458.293 ops/s
[info]                  ·gc.alloc.rate:                                  1458.710 MB/sec
[info]                  ·gc.alloc.rate.norm:                             80688.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.219 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.320 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       75300.894 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 28453.270 ops/s
[info]                  ·gc.alloc.rate:                                  1458.556 MB/sec
[info]                  ·gc.alloc.rate.norm:                             80688.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.073 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.367 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       75311.478 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson":
[info]   28264.445 ±(99.9%) 933.841 ops/s [Average]
[info]   (min, avg, max) = (27940.463, 28264.445, 28458.293), stdev = 242.516
[info]   CI (99.9%): [27330.604, 29198.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1448.904 ±(99.9%) 47.508 MB/sec [Average]
[info]   (min, avg, max) = (1432.553, 1448.904, 1458.710), stdev = 12.338
[info]   CI (99.9%): [1401.396, 1496.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   80692.159 ±(99.9%) 26.713 B/op [Average]
[info]   (min, avg, max) = (80688.014, 80692.159, 80704.018), stdev = 6.937
[info]   CI (99.9%): [80665.446, 80718.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.028 ±(99.9%) 0.225 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.133), stdev = 0.059
[info]   CI (99.9%): [≈ 0, 0.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.563 ±(99.9%) 12.643 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.563, 7.435), stdev = 3.283
[info]   CI (99.9%): [≈ 0, 14.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1425.426 ±(99.9%) 595.491 MB/sec [Average]
[info]   (min, avg, max) = (1345.387, 1425.426, 1701.821), stdev = 154.647
[info]   CI (99.9%): [829.935, 2020.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   79368.197 ±(99.9%) 32201.557 B/op [Average]
[info]   (min, avg, max) = (75300.894, 79368.197, 94314.993), stdev = 8362.642
[info]   CI (99.9%): [47166.640, 111569.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   44.821 ±(99.9%) 385.918 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 44.821, 224.103), stdev = 100.222
[info]   CI (99.9%): [≈ 0, 430.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.800, 16.000), stdev = 5.357
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce
[info] # Run progress: 46.51% complete, ETA 00:42:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4141.520 ops/s
[info] # Warmup Iteration   2: 6387.415 ops/s
[info] # Warmup Iteration   3: 6540.005 ops/s
[info] Iteration   1: 6530.951 ops/s
[info]                  ·gc.alloc.rate:            1005.359 MB/sec
[info]                  ·gc.alloc.rate.norm:       242296.062 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1010.959 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 243645.855 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 6554.903 ops/s
[info]                  ·gc.alloc.rate:            1009.127 MB/sec
[info]                  ·gc.alloc.rate.norm:       242296.067 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.189 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 242791.087 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 6541.182 ops/s
[info]                  ·gc.alloc.rate:                   1006.997 MB/sec
[info]                  ·gc.alloc.rate.norm:              242296.062 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1011.060 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        243273.478 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 801.296 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 6575.950 ops/s
[info]                  ·gc.alloc.rate:                                  1012.539 MB/sec
[info]                  ·gc.alloc.rate.norm:                             242296.067 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.062 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 14.886 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.207 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       244370.175 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 6499.962 ops/s
[info]                  ·gc.alloc.rate:                                  1000.935 MB/sec
[info]                  ·gc.alloc.rate.norm:                             242296.063 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.905 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.303 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       247226.547 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce":
[info]   6540.589 ±(99.9%) 108.897 ops/s [Average]
[info]   (min, avg, max) = (6499.962, 6540.589, 6575.950), stdev = 28.280
[info]   CI (99.9%): [6431.692, 6649.487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1006.991 ±(99.9%) 16.639 MB/sec [Average]
[info]   (min, avg, max) = (1000.935, 1006.991, 1012.539), stdev = 4.321
[info]   CI (99.9%): [990.353, 1023.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   242296.064 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (242296.062, 242296.064, 242296.067), stdev = 0.002
[info]   CI (99.9%): [242296.055, 242296.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.014 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   3.358 ±(99.9%) 25.017 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.358, 14.886), stdev = 6.497
[info]   CI (99.9%): [≈ 0, 28.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1015.143 ±(99.9%) 21.485 MB/sec [Average]
[info]   (min, avg, max) = (1010.959, 1015.143, 1021.303), stdev = 5.579
[info]   CI (99.9%): [993.659, 1036.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   244261.428 ±(99.9%) 6758.026 B/op [Average]
[info]   (min, avg, max) = (242791.087, 244261.428, 247226.547), stdev = 1755.038
[info]   CI (99.9%): [237503.402, 251019.455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   160.259 ±(99.9%) 1379.880 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 160.259, 801.296), stdev = 358.350
[info]   CI (99.9%): [≈ 0, 1540.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.200, 10.000), stdev = 3.834
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala
[info] # Run progress: 46.77% complete, ETA 00:42:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3066.138 ops/s
[info] # Warmup Iteration   2: 6178.069 ops/s
[info] # Warmup Iteration   3: 6423.929 ops/s
[info] Iteration   1: 6531.471 ops/s
[info]                  ·gc.alloc.rate:                   928.597 MB/sec
[info]                  ·gc.alloc.rate.norm:              223792.067 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.159 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        242966.646 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 160.480 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 6478.390 ops/s
[info]                  ·gc.alloc.rate:            921.193 MB/sec
[info]                  ·gc.alloc.rate.norm:       223792.063 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.122 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 245153.185 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 6536.851 ops/s
[info]                  ·gc.alloc.rate:            929.477 MB/sec
[info]                  ·gc.alloc.rate.norm:       223792.067 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.776 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 161985.586 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 6474.109 ops/s
[info]                  ·gc.alloc.rate:                                  920.393 MB/sec
[info]                  ·gc.alloc.rate.norm:                             223792.063 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.109 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 26.392 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.016 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       247285.800 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                971.653 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   5: 6536.789 ops/s
[info]                  ·gc.alloc.rate:            929.437 MB/sec
[info]                  ·gc.alloc.rate.norm:       223792.062 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.954 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 245827.651 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala":
[info]   6511.522 ±(99.9%) 124.408 ops/s [Average]
[info]   (min, avg, max) = (6474.109, 6511.522, 6536.851), stdev = 32.308
[info]   CI (99.9%): [6387.114, 6635.930] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   925.819 ±(99.9%) 17.753 MB/sec [Average]
[info]   (min, avg, max) = (920.393, 925.819, 929.477), stdev = 4.610
[info]   CI (99.9%): [908.066, 943.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   223792.065 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (223792.062, 223792.065, 223792.067), stdev = 0.002
[info]   CI (99.9%): [223792.055, 223792.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.022 ±(99.9%) 0.187 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.109), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   5.278 ±(99.9%) 45.449 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.278, 26.392), stdev = 11.803
[info]   CI (99.9%): [≈ 0, 50.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   945.605 ±(99.9%) 587.650 MB/sec [Average]
[info]   (min, avg, max) = (672.776, 945.605, 1020.954), stdev = 152.611
[info]   CI (99.9%): [357.955, 1533.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   228643.773 ±(99.9%) 143611.856 B/op [Average]
[info]   (min, avg, max) = (161985.586, 228643.773, 247285.800), stdev = 37295.543
[info]   CI (99.9%): [85031.917, 372255.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   226.427 ±(99.9%) 1626.321 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 226.427, 971.653), stdev = 422.350
[info]   CI (99.9%): [≈ 0, 1852.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 9.000, 13.000), stdev = 3.937
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala
[info] # Run progress: 47.04% complete, ETA 00:42:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 83562.556 ops/s
[info] # Warmup Iteration   2: 95154.358 ops/s
[info] # Warmup Iteration   3: 96805.827 ops/s
[info] Iteration   1: 98588.684 ops/s
[info]                  ·gc.alloc.rate:            955.260 MB/sec
[info]                  ·gc.alloc.rate.norm:       15248.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1013.312 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 16174.639 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 98375.716 ops/s
[info]                  ·gc.alloc.rate:            952.872 MB/sec
[info]                  ·gc.alloc.rate.norm:       15248.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1012.957 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 16209.490 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 99373.190 ops/s
[info]                  ·gc.alloc.rate:                   962.585 MB/sec
[info]                  ·gc.alloc.rate.norm:              15248.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1013.008 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        16046.726 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      2.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 42.200 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 97945.245 ops/s
[info]                  ·gc.alloc.rate:                                  949.230 MB/sec
[info]                  ·gc.alloc.rate.norm:                             15248.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.095 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.521 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.480 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       16408.585 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 100120.433 ops/s
[info]                  ·gc.alloc.rate:            969.932 MB/sec
[info]                  ·gc.alloc.rate.norm:       15248.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.087 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 16052.197 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala":
[info]   98880.654 ±(99.9%) 3331.888 ops/s [Average]
[info]   (min, avg, max) = (97945.245, 98880.654, 100120.433), stdev = 865.281
[info]   CI (99.9%): [95548.766, 102212.541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   957.976 ±(99.9%) 31.876 MB/sec [Average]
[info]   (min, avg, max) = (949.230, 957.976, 969.932), stdev = 8.278
[info]   CI (99.9%): [926.100, 989.851] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   15248.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (15248.004, 15248.004, 15248.004), stdev = 0.001
[info]   CI (99.9%): [15248.003, 15248.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.019 ±(99.9%) 0.163 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.095), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.304 ±(99.9%) 2.618 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.304, 1.521), stdev = 0.680
[info]   CI (99.9%): [≈ 0, 2.923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1016.369 ±(99.9%) 17.292 MB/sec [Average]
[info]   (min, avg, max) = (1012.957, 1016.369, 1021.480), stdev = 4.491
[info]   CI (99.9%): [999.077, 1033.660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   16178.327 ±(99.9%) 568.642 B/op [Average]
[info]   (min, avg, max) = (16046.726, 16178.327, 16408.585), stdev = 147.674
[info]   CI (99.9%): [15609.686, 16746.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.533 ±(99.9%) 4.588 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.533, 2.664), stdev = 1.191
[info]   CI (99.9%): [≈ 0, 5.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   8.440 ±(99.9%) 72.672 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.440, 42.200), stdev = 18.873
[info]   CI (99.9%): [≈ 0, 81.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.600, 9.000), stdev = 3.286
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson
[info] # Run progress: 47.31% complete, ETA 00:42:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2818.446 ops/s
[info] # Warmup Iteration   2: 6197.378 ops/s
[info] # Warmup Iteration   3: 6367.190 ops/s
[info] Iteration   1: 6479.883 ops/s
[info]                  ·gc.alloc.rate:                   1178.552 MB/sec
[info]                  ·gc.alloc.rate.norm:              286280.063 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.265 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        244915.777 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 161.767 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 6411.972 ops/s
[info]                  ·gc.alloc.rate:                   1166.219 MB/sec
[info]                  ·gc.alloc.rate.norm:              286280.064 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.276 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        330234.412 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 980.894 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         20.000 ms
[info] Iteration   3: 6462.340 ops/s
[info]                  ·gc.alloc.rate:                                  1175.690 MB/sec
[info]                  ·gc.alloc.rate.norm:                             286280.068 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.126 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 30.559 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.274 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       248679.921 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 6545.466 ops/s
[info]                  ·gc.alloc.rate:            1190.456 MB/sec
[info]                  ·gc.alloc.rate.norm:       286280.062 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.321 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 327369.687 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 6542.681 ops/s
[info]                  ·gc.alloc.rate:                                  1189.989 MB/sec
[info]                  ·gc.alloc.rate.norm:                             286280.062 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.641 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.059 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       245639.824 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson":
[info]   6488.469 ±(99.9%) 217.790 ops/s [Average]
[info]   (min, avg, max) = (6411.972, 6488.469, 6545.466), stdev = 56.559
[info]   CI (99.9%): [6270.678, 6706.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1180.181 ±(99.9%) 39.435 MB/sec [Average]
[info]   (min, avg, max) = (1166.219, 1180.181, 1190.456), stdev = 10.241
[info]   CI (99.9%): [1140.746, 1219.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   286280.064 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (286280.062, 286280.064, 286280.068), stdev = 0.002
[info]   CI (99.9%): [286280.055, 286280.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.026 ±(99.9%) 0.215 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.126), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   6.240 ±(99.9%) 52.360 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.240, 30.559), stdev = 13.598
[info]   CI (99.9%): [≈ 0, 58.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1151.439 ±(99.9%) 710.191 MB/sec [Average]
[info]   (min, avg, max) = (1008.265, 1151.439, 1361.321), stdev = 184.434
[info]   CI (99.9%): [441.247, 1861.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   279367.924 ±(99.9%) 173896.735 B/op [Average]
[info]   (min, avg, max) = (244915.777, 279367.924, 330234.412), stdev = 45160.430
[info]   CI (99.9%): [105471.190, 453264.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.687 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   228.532 ±(99.9%) 1641.823 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 228.532, 980.894), stdev = 426.376
[info]   CI (99.9%): [≈ 0, 1870.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.400, 20.000), stdev = 7.829
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce
[info] # Run progress: 47.58% complete, ETA 00:41:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13101.992 ops/s
[info] # Warmup Iteration   2: 17975.600 ops/s
[info] # Warmup Iteration   3: 17507.990 ops/s
[info] Iteration   1: 18075.373 ops/s
[info]                  ·gc.alloc.rate:            901.379 MB/sec
[info]                  ·gc.alloc.rate.norm:       78506.555 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.919 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 58695.664 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 17801.022 ops/s
[info]                  ·gc.alloc.rate:            888.245 MB/sec
[info]                  ·gc.alloc.rate.norm:       78552.025 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1010.949 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 89403.413 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   3: 17927.009 ops/s
[info]                  ·gc.alloc.rate:            894.806 MB/sec
[info]                  ·gc.alloc.rate.norm:       78552.029 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.260 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 88775.146 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 18159.581 ops/s
[info]                  ·gc.alloc.rate:                                  906.103 MB/sec
[info]                  ·gc.alloc.rate.norm:                             78535.229 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.022 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.871 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            677.402 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       58712.866 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                288.657 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 18241.993 ops/s
[info]                  ·gc.alloc.rate:                                  910.063 MB/sec
[info]                  ·gc.alloc.rate.norm:                             78528.022 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.020 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.735 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.045 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       88104.522 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce":
[info]   18040.996 ±(99.9%) 684.030 ops/s [Average]
[info]   (min, avg, max) = (17801.022, 18040.996, 18241.993), stdev = 177.641
[info]   CI (99.9%): [17356.965, 18725.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   900.119 ±(99.9%) 33.652 MB/sec [Average]
[info]   (min, avg, max) = (888.245, 900.119, 910.063), stdev = 8.739
[info]   CI (99.9%): [866.467, 933.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   78534.772 ±(99.9%) 72.996 B/op [Average]
[info]   (min, avg, max) = (78506.555, 78534.772, 78552.029), stdev = 18.957
[info]   CI (99.9%): [78461.776, 78607.768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.022), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.721 ±(99.9%) 3.807 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.721, 1.871), stdev = 0.989
[info]   CI (99.9%): [≈ 0, 4.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   878.915 ±(99.9%) 714.656 MB/sec [Average]
[info]   (min, avg, max) = (673.919, 878.915, 1021.045), stdev = 185.594
[info]   CI (99.9%): [164.259, 1593.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   76738.322 ±(99.9%) 63416.924 B/op [Average]
[info]   (min, avg, max) = (58695.664, 76738.322, 89403.413), stdev = 16469.174
[info]   CI (99.9%): [13321.399, 140155.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   57.731 ±(99.9%) 497.085 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 57.731, 288.657), stdev = 129.091
[info]   CI (99.9%): [≈ 0, 554.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.000, 11.000), stdev = 3.674
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala
[info] # Run progress: 47.85% complete, ETA 00:41:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12407.653 ops/s
[info] # Warmup Iteration   2: 20108.151 ops/s
[info] # Warmup Iteration   3: 20554.552 ops/s
[info] Iteration   1: 20111.879 ops/s
[info]                  ·gc.alloc.rate:                   852.106 MB/sec
[info]                  ·gc.alloc.rate.norm:              66696.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1007.556 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        78863.423 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 52.124 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 20587.668 ops/s
[info]                  ·gc.alloc.rate:            872.256 MB/sec
[info]                  ·gc.alloc.rate.norm:       66696.023 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.615 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 51430.738 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 20116.932 ops/s
[info]                  ·gc.alloc.rate:            852.476 MB/sec
[info]                  ·gc.alloc.rate.norm:       66696.025 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.176 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 78955.897 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   4: 20420.004 ops/s
[info]                  ·gc.alloc.rate:                                  865.218 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66696.020 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.109 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 8.404 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            676.639 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       52159.276 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                308.027 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 20657.132 ops/s
[info]                  ·gc.alloc.rate:                                  875.393 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66696.020 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.052 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.965 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.111 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       77798.229 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala":
[info]   20378.723 ±(99.9%) 986.648 ops/s [Average]
[info]   (min, avg, max) = (20111.879, 20378.723, 20657.132), stdev = 256.229
[info]   CI (99.9%): [19392.075, 21365.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   863.490 ±(99.9%) 41.847 MB/sec [Average]
[info]   (min, avg, max) = (852.106, 863.490, 875.393), stdev = 10.867
[info]   CI (99.9%): [821.643, 905.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   66696.022 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (66696.020, 66696.022, 66696.025), stdev = 0.002
[info]   CI (99.9%): [66696.013, 66696.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.032 ±(99.9%) 0.187 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.032, 0.109), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.474 ±(99.9%) 14.375 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.474, 8.404), stdev = 3.733
[info]   CI (99.9%): [≈ 0, 16.849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   877.419 ±(99.9%) 713.150 MB/sec [Average]
[info]   (min, avg, max) = (672.615, 877.419, 1021.111), stdev = 185.203
[info]   CI (99.9%): [164.270, 1590.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   67841.513 ±(99.9%) 56441.637 B/op [Average]
[info]   (min, avg, max) = (51430.738, 67841.513, 78955.897), stdev = 14657.714
[info]   CI (99.9%): [11399.876, 124283.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.687 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   72.030 ±(99.9%) 515.382 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 72.030, 308.027), stdev = 133.843
[info]   CI (99.9%): [≈ 0, 587.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.400, 13.000), stdev = 4.722
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala
[info] # Run progress: 48.12% complete, ETA 00:41:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 433279.034 ops/s
[info] # Warmup Iteration   2: 497148.151 ops/s
[info] # Warmup Iteration   3: 498927.282 ops/s
[info] Iteration   1: 493296.021 ops/s
[info]                  ·gc.alloc.rate:                   1118.139 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.964 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        4294.995 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.125 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 491673.293 ops/s
[info]                  ·gc.alloc.rate:                   1114.394 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.975 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3230.475 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 12.794 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 492181.339 ops/s
[info]                  ·gc.alloc.rate:                                  1115.645 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3568.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.168 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.537 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.056 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3265.490 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 496981.215 ops/s
[info]                  ·gc.alloc.rate:                                  1126.712 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3568.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.671 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4312.054 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 499807.755 ops/s
[info]                  ·gc.alloc.rate:            1133.070 MB/sec
[info]                  ·gc.alloc.rate.norm:       3568.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.143 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3215.545 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala":
[info]   494787.924 ±(99.9%) 13440.101 ops/s [Average]
[info]   (min, avg, max) = (491673.293, 494787.924, 499807.755), stdev = 3490.352
[info]   CI (99.9%): [481347.823, 508228.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1121.592 ±(99.9%) 30.869 MB/sec [Average]
[info]   (min, avg, max) = (1114.394, 1121.592, 1133.070), stdev = 8.017
[info]   CI (99.9%): [1090.723, 1152.461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3568.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3568.001, 3568.001, 3568.001), stdev = 0.001
[info]   CI (99.9%): [3568.001, 3568.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.034 ±(99.9%) 0.288 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.034, 0.168), stdev = 0.075
[info]   CI (99.9%): [≈ 0, 0.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.110 ±(99.9%) 0.920 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.110, 0.537), stdev = 0.239
[info]   CI (99.9%): [≈ 0, 1.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1151.762 ±(99.9%) 710.833 MB/sec [Average]
[info]   (min, avg, max) = (1008.975, 1151.762, 1361.671), stdev = 184.601
[info]   CI (99.9%): [440.929, 1862.594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   3663.712 ±(99.9%) 2250.235 B/op [Average]
[info]   (min, avg, max) = (3215.545, 3663.712, 4312.054), stdev = 584.379
[info]   CI (99.9%): [1413.477, 5913.947] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.687 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   2.984 ±(99.9%) 21.412 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.984, 12.794), stdev = 5.561
[info]   CI (99.9%): [≈ 0, 24.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.200, 13.000), stdev = 4.658
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 48.39% complete, ETA 00:41:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 379465.060 ops/s
[info] # Warmup Iteration   2: 411309.114 ops/s
[info] # Warmup Iteration   3: 411400.473 ops/s
[info] Iteration   1: 409552.776 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 411235.407 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 411214.219 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 411247.389 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 411318.108 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   410913.579 ±(99.9%) 2933.079 ops/s [Average]
[info]   (min, avg, max) = (409552.776, 410913.579, 411318.108), stdev = 761.711
[info]   CI (99.9%): [407980.501, 413846.658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson
[info] # Run progress: 48.66% complete, ETA 00:40:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12595.867 ops/s
[info] # Warmup Iteration   2: 18775.264 ops/s
[info] # Warmup Iteration   3: 18961.205 ops/s
[info] Iteration   1: 19026.262 ops/s
[info]                  ·gc.alloc.rate:            877.184 MB/sec
[info]                  ·gc.alloc.rate.norm:       72566.756 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.722 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 55652.221 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 18778.698 ops/s
[info]                  ·gc.alloc.rate:            865.793 MB/sec
[info]                  ·gc.alloc.rate.norm:       72576.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.948 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 84576.087 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 18713.058 ops/s
[info]                  ·gc.alloc.rate:            862.748 MB/sec
[info]                  ·gc.alloc.rate.norm:       72576.027 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.630 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 56582.880 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 18883.536 ops/s
[info]                  ·gc.alloc.rate:                                  870.531 MB/sec
[info]                  ·gc.alloc.rate.norm:                             72562.243 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.069 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.730 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1013.070 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       84443.485 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                333.110 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   5: 19187.277 ops/s
[info]                  ·gc.alloc.rate:                                  884.484 MB/sec
[info]                  ·gc.alloc.rate.norm:                             72560.023 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.050 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.084 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.684 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       55841.002 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson":
[info]   18917.766 ±(99.9%) 737.739 ops/s [Average]
[info]   (min, avg, max) = (18713.058, 18917.766, 19187.277), stdev = 191.588
[info]   CI (99.9%): [18180.027, 19655.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   872.148 ±(99.9%) 33.837 MB/sec [Average]
[info]   (min, avg, max) = (862.748, 872.148, 884.484), stdev = 8.787
[info]   CI (99.9%): [838.310, 905.985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   72568.214 ±(99.9%) 29.000 B/op [Average]
[info]   (min, avg, max) = (72560.023, 72568.214, 72576.027), stdev = 7.531
[info]   CI (99.9%): [72539.214, 72597.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.024 ±(99.9%) 0.128 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.024, 0.069), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.963 ±(99.9%) 10.590 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.963, 5.730), stdev = 2.750
[info]   CI (99.9%): [≈ 0, 12.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   809.611 ±(99.9%) 708.078 MB/sec [Average]
[info]   (min, avg, max) = (672.630, 809.611, 1013.070), stdev = 183.886
[info]   CI (99.9%): [101.533, 1517.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   67419.135 ±(99.9%) 60091.249 B/op [Average]
[info]   (min, avg, max) = (55652.221, 67419.135, 84576.087), stdev = 15605.507
[info]   CI (99.9%): [7327.886, 127510.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   66.622 ±(99.9%) 573.636 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 66.622, 333.110), stdev = 148.971
[info]   CI (99.9%): [≈ 0, 640.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.800, 12.000), stdev = 3.633
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce
[info] # Run progress: 48.92% complete, ETA 00:40:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7545.613 ops/s
[info] # Warmup Iteration   2: 11228.485 ops/s
[info] # Warmup Iteration   3: 11218.358 ops/s
[info] Iteration   1: 11317.897 ops/s
[info]                  ·gc.alloc.rate:            1136.837 MB/sec
[info]                  ·gc.alloc.rate.norm:       158112.036 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.017 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 140612.930 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 11316.675 ops/s
[info]                  ·gc.alloc.rate:            1136.715 MB/sec
[info]                  ·gc.alloc.rate.norm:       158112.039 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1010.998 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 140625.353 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 11333.784 ops/s
[info]                  ·gc.alloc.rate:                                  1138.387 MB/sec
[info]                  ·gc.alloc.rate.norm:                             158112.036 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.057 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 7.965 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1357.945 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       188606.781 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                462.498 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 11065.724 ops/s
[info]                  ·gc.alloc.rate:                                  1111.625 MB/sec
[info]                  ·gc.alloc.rate.norm:                             158112.043 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁵ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.096 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       145235.545 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 11068.197 ops/s
[info]                  ·gc.alloc.rate:            1112.318 MB/sec
[info]                  ·gc.alloc.rate.norm:       158112.037 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.547 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 145209.305 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce":
[info]   11220.455 ±(99.9%) 540.193 ops/s [Average]
[info]   (min, avg, max) = (11065.724, 11220.455, 11333.784), stdev = 140.286
[info]   CI (99.9%): [10680.262, 11760.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1127.176 ±(99.9%) 53.516 MB/sec [Average]
[info]   (min, avg, max) = (1111.625, 1127.176, 1138.387), stdev = 13.898
[info]   CI (99.9%): [1073.661, 1180.692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   158112.038 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (158112.036, 158112.038, 158112.043), stdev = 0.003
[info]   CI (99.9%): [158112.027, 158112.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.011 ±(99.9%) 0.099 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.057), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.594 ±(99.9%) 13.714 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.594, 7.965), stdev = 3.562
[info]   CI (99.9%): [≈ 0, 15.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1084.521 ±(99.9%) 588.902 MB/sec [Average]
[info]   (min, avg, max) = (1010.998, 1084.521, 1357.945), stdev = 152.936
[info]   CI (99.9%): [495.618, 1673.423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   152057.983 ±(99.9%) 79171.686 B/op [Average]
[info]   (min, avg, max) = (140612.930, 152057.983, 188606.781), stdev = 20560.635
[info]   CI (99.9%): [72886.296, 231229.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   92.500 ±(99.9%) 796.450 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 92.500, 462.498), stdev = 206.835
[info]   CI (99.9%): [≈ 0, 888.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.400, 10.000), stdev = 3.782
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala
[info] # Run progress: 49.19% complete, ETA 00:40:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5920.235 ops/s
[info] # Warmup Iteration   2: 11031.818 ops/s
[info] # Warmup Iteration   3: 11542.924 ops/s
[info] Iteration   1: 11542.011 ops/s
[info]                  ·gc.alloc.rate:                   1056.472 MB/sec
[info]                  ·gc.alloc.rate.norm:              144088.038 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.235 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        137509.230 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 90.825 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 11515.437 ops/s
[info]                  ·gc.alloc.rate:            1054.181 MB/sec
[info]                  ·gc.alloc.rate.norm:       144088.038 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.431 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 183896.815 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   3: 11598.460 ops/s
[info]                  ·gc.alloc.rate:                                  1061.770 MB/sec
[info]                  ·gc.alloc.rate.norm:                             144088.039 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.075 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 10.223 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.059 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       138020.477 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                542.320 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 11466.155 ops/s
[info]                  ·gc.alloc.rate:                                  1049.566 MB/sec
[info]                  ·gc.alloc.rate.norm:                             144088.036 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.458 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.024 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       140169.777 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 11665.461 ops/s
[info]                  ·gc.alloc.rate:                                  1068.212 MB/sec
[info]                  ·gc.alloc.rate.norm:                             144088.035 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.177 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.351 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       137767.142 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala":
[info]   11557.505 ±(99.9%) 296.315 ops/s [Average]
[info]   (min, avg, max) = (11466.155, 11557.505, 11665.461), stdev = 76.952
[info]   CI (99.9%): [11261.190, 11853.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1058.040 ±(99.9%) 27.670 MB/sec [Average]
[info]   (min, avg, max) = (1049.566, 1058.040, 1068.212), stdev = 7.186
[info]   CI (99.9%): [1030.370, 1085.710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   144088.037 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (144088.035, 144088.037, 144088.039), stdev = 0.002
[info]   CI (99.9%): [144088.030, 144088.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.016 ±(99.9%) 0.128 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.075), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.171 ±(99.9%) 17.346 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.171, 10.223), stdev = 4.505
[info]   CI (99.9%): [≈ 0, 19.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1082.620 ±(99.9%) 566.087 MB/sec [Average]
[info]   (min, avg, max) = (1008.235, 1082.620, 1345.431), stdev = 147.011
[info]   CI (99.9%): [516.533, 1648.707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   147472.688 ±(99.9%) 78511.173 B/op [Average]
[info]   (min, avg, max) = (137509.230, 147472.688, 183896.815), stdev = 20389.102
[info]   CI (99.9%): [68961.515, 225983.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   126.629 ±(99.9%) 907.531 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 126.629, 542.320), stdev = 235.683
[info]   CI (99.9%): [≈ 0, 1034.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.600, 17.000), stdev = 6.656
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala
[info] # Run progress: 49.46% complete, ETA 00:40:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 151893.528 ops/s
[info] # Warmup Iteration   2: 157274.922 ops/s
[info] # Warmup Iteration   3: 159050.574 ops/s
[info] Iteration   1: 159655.407 ops/s
[info]                  ·gc.alloc.rate:            923.375 MB/sec
[info]                  ·gc.alloc.rate.norm:       9104.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.970 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6644.993 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 159470.080 ops/s
[info]                  ·gc.alloc.rate:            922.699 MB/sec
[info]                  ·gc.alloc.rate.norm:       9104.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.475 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9979.926 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 159723.670 ops/s
[info]                  ·gc.alloc.rate:                   923.709 MB/sec
[info]                  ·gc.alloc.rate.norm:              9104.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1010.991 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        9964.245 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 32.820 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 161852.133 ops/s
[info]                  ·gc.alloc.rate:                                  936.109 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9104.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.065 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.634 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.034 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9929.930 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 160147.505 ops/s
[info]                  ·gc.alloc.rate:            926.434 MB/sec
[info]                  ·gc.alloc.rate.norm:       9104.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.791 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6690.086 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala":
[info]   160169.759 ±(99.9%) 3745.225 ops/s [Average]
[info]   (min, avg, max) = (159470.080, 160169.759, 161852.133), stdev = 972.623
[info]   CI (99.9%): [156424.534, 163914.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   926.465 ±(99.9%) 21.467 MB/sec [Average]
[info]   (min, avg, max) = (922.699, 926.465, 936.109), stdev = 5.575
[info]   CI (99.9%): [904.998, 947.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   9104.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (9104.003, 9104.003, 9104.003), stdev = 0.001
[info]   CI (99.9%): [9104.002, 9104.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.013 ±(99.9%) 0.112 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.065), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.127 ±(99.9%) 1.091 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.127, 0.634), stdev = 0.283
[info]   CI (99.9%): [≈ 0, 1.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   879.652 ±(99.9%) 711.241 MB/sec [Average]
[info]   (min, avg, max) = (673.970, 879.652, 1021.034), stdev = 184.707
[info]   CI (99.9%): [168.411, 1590.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   8641.836 ±(99.9%) 6940.552 B/op [Average]
[info]   (min, avg, max) = (6644.993, 8641.836, 9979.926), stdev = 1802.439
[info]   CI (99.9%): [1701.284, 15582.388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   6.564 ±(99.9%) 56.519 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.564, 32.820), stdev = 14.678
[info]   CI (99.9%): [≈ 0, 63.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.800, 9.000), stdev = 3.271
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson
[info] # Run progress: 49.73% complete, ETA 00:40:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4010.936 ops/s
[info] # Warmup Iteration   2: 10366.815 ops/s
[info] # Warmup Iteration   3: 10652.517 ops/s
[info] Iteration   1: 10599.794 ops/s
[info]                  ·gc.alloc.rate:                   1327.190 MB/sec
[info]                  ·gc.alloc.rate.norm:              197016.042 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1343.180 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        199389.664 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 98.904 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   2: 10699.286 ops/s
[info]                  ·gc.alloc.rate:                                  1339.069 MB/sec
[info]                  ·gc.alloc.rate.norm:                             197016.041 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.032 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.640 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1352.655 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       199014.845 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                587.932 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   3: 10800.350 ops/s
[info]                  ·gc.alloc.rate:                                  1351.944 MB/sec
[info]                  ·gc.alloc.rate.norm:                             197016.038 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.081 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.424 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       198397.607 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 10666.194 ops/s
[info]                  ·gc.alloc.rate:            1335.032 MB/sec
[info]                  ·gc.alloc.rate.norm:       197016.400 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.404 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 200908.262 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 10721.518 ops/s
[info]                  ·gc.alloc.rate:                                  1341.970 MB/sec
[info]                  ·gc.alloc.rate.norm:                             197016.041 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.318 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.336 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       199859.133 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson":
[info]   10697.428 ±(99.9%) 283.518 ops/s [Average]
[info]   (min, avg, max) = (10599.794, 10697.428, 10800.350), stdev = 73.629
[info]   CI (99.9%): [10413.911, 10980.946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1339.041 ±(99.9%) 35.059 MB/sec [Average]
[info]   (min, avg, max) = (1327.190, 1339.041, 1351.944), stdev = 9.105
[info]   CI (99.9%): [1303.982, 1374.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   197016.112 ±(99.9%) 0.619 B/op [Average]
[info]   (min, avg, max) = (197016.038, 197016.112, 197016.400), stdev = 0.161
[info]   CI (99.9%): [197015.493, 197016.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.008 ±(99.9%) 0.052 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.032), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.208 ±(99.9%) 7.581 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.208, 4.640), stdev = 1.969
[info]   CI (99.9%): [≈ 0, 8.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1356.000 ±(99.9%) 31.203 MB/sec [Average]
[info]   (min, avg, max) = (1343.180, 1356.000, 1361.424), stdev = 8.103
[info]   CI (99.9%): [1324.797, 1387.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   199513.902 ±(99.9%) 3639.844 B/op [Average]
[info]   (min, avg, max) = (198397.607, 199513.902, 200908.262), stdev = 945.256
[info]   CI (99.9%): [195874.059, 203153.746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.687 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   137.367 ±(99.9%) 983.794 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 137.367, 587.932), stdev = 255.488
[info]   CI (99.9%): [≈ 0, 1121.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 8.600, 19.000), stdev = 6.768
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce
[info] # Run progress: 50.00% complete, ETA 00:39:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20577.172 ops/s
[info] # Warmup Iteration   2: 27862.931 ops/s
[info] # Warmup Iteration   3: 28216.613 ops/s
[info] Iteration   1: 27563.685 ops/s
[info]                  ·gc.alloc.rate:            1026.852 MB/sec
[info]                  ·gc.alloc.rate.norm:       58640.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.067 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 57738.623 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 27390.173 ops/s
[info]                  ·gc.alloc.rate:            1020.040 MB/sec
[info]                  ·gc.alloc.rate.norm:       58619.783 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.052 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 58103.244 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 27395.562 ops/s
[info]                  ·gc.alloc.rate:                                  1020.542 MB/sec
[info]                  ·gc.alloc.rate.norm:                             58616.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.070 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.036 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1014.724 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       58281.860 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                191.339 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   4: 28367.429 ops/s
[info]                  ·gc.alloc.rate:                                  1056.405 MB/sec
[info]                  ·gc.alloc.rate.norm:                             58616.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.019 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.081 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.060 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       56654.813 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 27922.948 ops/s
[info]                  ·gc.alloc.rate:            1039.880 MB/sec
[info]                  ·gc.alloc.rate.norm:       58616.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.992 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 57551.359 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce":
[info]   27727.959 ±(99.9%) 1609.130 ops/s [Average]
[info]   (min, avg, max) = (27390.173, 27727.959, 28367.429), stdev = 417.886
[info]   CI (99.9%): [26118.829, 29337.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1032.744 ±(99.9%) 59.522 MB/sec [Average]
[info]   (min, avg, max) = (1020.040, 1032.744, 1056.405), stdev = 15.458
[info]   CI (99.9%): [973.222, 1092.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   58621.569 ±(99.9%) 40.208 B/op [Average]
[info]   (min, avg, max) = (58616.014, 58621.569, 58640.019), stdev = 10.442
[info]   CI (99.9%): [58581.361, 58661.777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.018 ±(99.9%) 0.117 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.070), stdev = 0.030
[info]   CI (99.9%): [≈ 0, 0.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.023 ±(99.9%) 6.731 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.023, 4.036), stdev = 1.748
[info]   CI (99.9%): [≈ 0, 7.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1015.779 ±(99.9%) 19.322 MB/sec [Average]
[info]   (min, avg, max) = (1011.052, 1015.779, 1021.060), stdev = 5.018
[info]   CI (99.9%): [996.457, 1035.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   57665.980 ±(99.9%) 2444.008 B/op [Average]
[info]   (min, avg, max) = (56654.813, 57665.980, 58281.860), stdev = 634.701
[info]   CI (99.9%): [55221.972, 60109.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.737 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   38.268 ±(99.9%) 329.497 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 38.268, 191.339), stdev = 85.569
[info]   CI (99.9%): [≈ 0, 367.765] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.000, 11.000), stdev = 4.183
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala
[info] # Run progress: 50.27% complete, ETA 00:39:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 54554.710 ops/s
[info] # Warmup Iteration   2: 85842.928 ops/s
[info] # Warmup Iteration   3: 84741.521 ops/s
[info] Iteration   1: 83595.628 ops/s
[info]                  ·gc.alloc.rate:                   1330.617 MB/sec
[info]                  ·gc.alloc.rate.norm:              25056.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1344.681 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        25320.834 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 12.541 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   2: 85608.572 ops/s
[info]                  ·gc.alloc.rate:                                  1363.076 MB/sec
[info]                  ·gc.alloc.rate.norm:                             25056.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.226 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.162 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1357.756 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       24958.223 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                73.479 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   3: 86917.455 ops/s
[info]                  ·gc.alloc.rate:                                  1383.523 MB/sec
[info]                  ·gc.alloc.rate.norm:                             25056.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.061 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.352 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       24654.496 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 86986.224 ops/s
[info]                  ·gc.alloc.rate:                                  1384.847 MB/sec
[info]                  ·gc.alloc.rate.norm:                             25056.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.024 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.559 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       24634.660 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 86242.224 ops/s
[info]                  ·gc.alloc.rate:            1372.873 MB/sec
[info]                  ·gc.alloc.rate.norm:       25056.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.429 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 24847.139 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala":
[info]   85870.021 ±(99.9%) 5350.449 ops/s [Average]
[info]   (min, avg, max) = (83595.628, 85870.021, 86986.224), stdev = 1389.495
[info]   CI (99.9%): [80519.572, 91220.469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1366.987 ±(99.9%) 85.349 MB/sec [Average]
[info]   (min, avg, max) = (1330.617, 1366.987, 1384.847), stdev = 22.165
[info]   CI (99.9%): [1281.638, 1452.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   25056.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (25056.005, 25056.005, 25056.005), stdev = 0.001
[info]   CI (99.9%): [25056.004, 25056.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.046 ±(99.9%) 0.388 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.226), stdev = 0.101
[info]   CI (99.9%): [≈ 0, 0.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.849 ±(99.9%) 7.131 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.849, 4.162), stdev = 1.852
[info]   CI (99.9%): [≈ 0, 7.981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1357.355 ±(99.9%) 27.970 MB/sec [Average]
[info]   (min, avg, max) = (1344.681, 1357.355, 1361.559), stdev = 7.264
[info]   CI (99.9%): [1329.386, 1385.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   24883.070 ±(99.9%) 1076.339 B/op [Average]
[info]   (min, avg, max) = (24634.660, 24883.070, 25320.834), stdev = 279.522
[info]   CI (99.9%): [23806.732, 25959.409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 6.690 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.997), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   17.204 ±(99.9%) 122.927 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17.204, 73.479), stdev = 31.924
[info]   CI (99.9%): [≈ 0, 140.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.400, 17.000), stdev = 5.857
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala
[info] # Run progress: 50.54% complete, ETA 00:39:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 630406.944 ops/s
[info] # Warmup Iteration   2: 693189.148 ops/s
[info] # Warmup Iteration   3: 699886.120 ops/s
[info] Iteration   1: 704522.312 ops/s
[info]                  ·gc.alloc.rate:                   967.117 MB/sec
[info]                  ·gc.alloc.rate.norm:              2160.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1010.043 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2255.873 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.488 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 697990.875 ops/s
[info]                  ·gc.alloc.rate:            957.883 MB/sec
[info]                  ·gc.alloc.rate.norm:       2160.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.143 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2275.591 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 705166.742 ops/s
[info]                  ·gc.alloc.rate:                   967.615 MB/sec
[info]                  ·gc.alloc.rate.norm:              2160.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.680 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1501.621 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 8.921 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 703644.131 ops/s
[info]                  ·gc.alloc.rate:                                  965.646 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2160.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.160 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.357 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.141 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2284.135 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 703736.447 ops/s
[info]                  ·gc.alloc.rate:            965.736 MB/sec
[info]                  ·gc.alloc.rate.norm:       2160.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.126 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2283.889 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala":
[info]   703012.102 ±(99.9%) 11070.193 ops/s [Average]
[info]   (min, avg, max) = (697990.875, 703012.102, 705166.742), stdev = 2874.894
[info]   CI (99.9%): [691941.908, 714082.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   964.799 ±(99.9%) 15.249 MB/sec [Average]
[info]   (min, avg, max) = (957.883, 964.799, 967.615), stdev = 3.960
[info]   CI (99.9%): [949.550, 980.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2160.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2160.001, 2160.001, 2160.001), stdev = 0.001
[info]   CI (99.9%): [2160.001, 2160.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.032 ±(99.9%) 0.275 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.032, 0.160), stdev = 0.071
[info]   CI (99.9%): [≈ 0, 0.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.071 ±(99.9%) 0.615 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.071, 0.357), stdev = 0.160
[info]   CI (99.9%): [≈ 0, 0.686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   946.827 ±(99.9%) 590.540 MB/sec [Average]
[info]   (min, avg, max) = (672.680, 946.827, 1021.141), stdev = 153.361
[info]   CI (99.9%): [356.287, 1537.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   2120.222 ±(99.9%) 1332.320 B/op [Average]
[info]   (min, avg, max) = (1501.621, 2120.222, 2284.135), stdev = 345.999
[info]   CI (99.9%): [787.901, 3452.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   2.082 ±(99.9%) 14.929 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.082, 8.921), stdev = 3.877
[info]   CI (99.9%): [≈ 0, 17.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.200, 10.000), stdev = 3.564
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 50.81% complete, ETA 00:39:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 694511.273 ops/s
[info] # Warmup Iteration   2: 762216.491 ops/s
[info] # Warmup Iteration   3: 769300.405 ops/s
[info] Iteration   1: 768514.787 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 768460.982 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 768264.515 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 766061.596 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 769673.419 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   768195.060 ±(99.9%) 5062.893 ops/s [Average]
[info]   (min, avg, max) = (766061.596, 768195.060, 769673.419), stdev = 1314.817
[info]   CI (99.9%): [763132.166, 773257.953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson
[info] # Run progress: 51.08% complete, ETA 00:39:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 36358.015 ops/s
[info] # Warmup Iteration   2: 70821.739 ops/s
[info] # Warmup Iteration   3: 71358.229 ops/s
[info] Iteration   1: 71567.364 ops/s
[info]                  ·gc.alloc.rate:                   1542.658 MB/sec
[info]                  ·gc.alloc.rate.norm:              33928.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1682.491 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        37003.394 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 102.543 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         21.000 ms
[info] Iteration   2: 72734.934 ops/s
[info]                  ·gc.alloc.rate:                                  1567.738 MB/sec
[info]                  ·gc.alloc.rate.norm:                             33928.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.058 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.256 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.403 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       29462.642 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 73246.474 ops/s
[info]                  ·gc.alloc.rate:                                  1579.119 MB/sec
[info]                  ·gc.alloc.rate.norm:                             33928.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.085 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.012 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       36568.414 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 72990.859 ops/s
[info]                  ·gc.alloc.rate:                                  1573.199 MB/sec
[info]                  ·gc.alloc.rate.norm:                             33928.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.050 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.693 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       36699.155 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 72398.567 ops/s
[info]                  ·gc.alloc.rate:            1560.583 MB/sec
[info]                  ·gc.alloc.rate.norm:       33928.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.422 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 29598.129 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson":
[info]   72587.640 ±(99.9%) 2506.659 ops/s [Average]
[info]   (min, avg, max) = (71567.364, 72587.640, 73246.474), stdev = 650.971
[info]   CI (99.9%): [70080.980, 75094.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1564.659 ±(99.9%) 54.189 MB/sec [Average]
[info]   (min, avg, max) = (1542.658, 1564.659, 1579.119), stdev = 14.073
[info]   CI (99.9%): [1510.470, 1618.848] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   33928.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (33928.006, 33928.006, 33928.006), stdev = 0.001
[info]   CI (99.9%): [33928.005, 33928.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.013 ±(99.9%) 0.097 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.058), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.278 ±(99.9%) 2.109 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.278, 1.256), stdev = 0.548
[info]   CI (99.9%): [≈ 0, 2.387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1561.804 ±(99.9%) 705.063 MB/sec [Average]
[info]   (min, avg, max) = (1361.403, 1561.804, 1702.012), stdev = 183.103
[info]   CI (99.9%): [856.741, 2266.867] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   33866.347 ±(99.9%) 15254.739 B/op [Average]
[info]   (min, avg, max) = (29462.642, 33866.347, 37003.394), stdev = 3961.607
[info]   CI (99.9%): [18611.608, 49121.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   20.509 ±(99.9%) 176.585 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 20.509, 102.543), stdev = 45.859
[info]   CI (99.9%): [≈ 0, 197.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 8.200, 21.000), stdev = 7.259
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce
[info] # Run progress: 51.34% complete, ETA 00:38:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8889.378 ops/s
[info] # Warmup Iteration   2: 27470.128 ops/s
[info] # Warmup Iteration   3: 27518.826 ops/s
[info] Iteration   1: 27516.489 ops/s
[info]                  ·gc.alloc.rate:            991.993 MB/sec
[info]                  ·gc.alloc.rate.norm:       56752.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1010.925 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 57835.127 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 27578.904 ops/s
[info]                  ·gc.alloc.rate:            994.364 MB/sec
[info]                  ·gc.alloc.rate.norm:       56752.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.064 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 57705.132 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 27551.228 ops/s
[info]                  ·gc.alloc.rate:            993.331 MB/sec
[info]                  ·gc.alloc.rate.norm:       56752.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.003 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 57761.671 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 27616.173 ops/s
[info]                  ·gc.alloc.rate:                                  995.900 MB/sec
[info]                  ·gc.alloc.rate.norm:                             56752.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.144 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 8.193 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.931 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       58007.463 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                189.815 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 27767.037 ops/s
[info]                  ·gc.alloc.rate:                                  1001.190 MB/sec
[info]                  ·gc.alloc.rate.norm:                             56752.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.233 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.104 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       57880.852 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce":
[info]   27605.966 ±(99.9%) 374.240 ops/s [Average]
[info]   (min, avg, max) = (27516.489, 27605.966, 27767.037), stdev = 97.189
[info]   CI (99.9%): [27231.726, 27980.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate":
[info]   995.355 ±(99.9%) 13.712 MB/sec [Average]
[info]   (min, avg, max) = (991.993, 995.355, 1001.190), stdev = 3.561
[info]   CI (99.9%): [981.643, 1009.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   56752.016 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (56752.015, 56752.016, 56752.020), stdev = 0.002
[info]   CI (99.9%): [56752.007, 56752.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.030 ±(99.9%) 0.246 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.144), stdev = 0.064
[info]   CI (99.9%): [≈ 0, 0.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.685 ±(99.9%) 14.014 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.685, 8.193), stdev = 3.639
[info]   CI (99.9%): [≈ 0, 15.699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1014.405 ±(99.9%) 18.483 MB/sec [Average]
[info]   (min, avg, max) = (1010.925, 1014.405, 1021.104), stdev = 4.800
[info]   CI (99.9%): [995.923, 1032.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   57838.049 ±(99.9%) 447.579 B/op [Average]
[info]   (min, avg, max) = (57705.132, 57838.049, 58007.463), stdev = 116.235
[info]   CI (99.9%): [57390.470, 58285.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   37.963 ±(99.9%) 326.873 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 37.963, 189.815), stdev = 84.888
[info]   CI (99.9%): [≈ 0, 364.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.800, 11.000), stdev = 3.271
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala
[info] # Run progress: 51.61% complete, ETA 00:38:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8070.409 ops/s
[info] # Warmup Iteration   2: 26079.968 ops/s
[info] # Warmup Iteration   3: 26700.851 ops/s
[info] Iteration   1: 26957.670 ops/s
[info]                  ·gc.alloc.rate:                   738.821 MB/sec
[info]                  ·gc.alloc.rate.norm:              43144.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.305 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        58880.798 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 38.891 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 27004.673 ops/s
[info]                  ·gc.alloc.rate:            740.094 MB/sec
[info]                  ·gc.alloc.rate.norm:       43144.535 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.627 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 39211.439 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 27195.161 ops/s
[info]                  ·gc.alloc.rate:            745.380 MB/sec
[info]                  ·gc.alloc.rate.norm:       43144.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.682 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 38936.094 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 26933.841 ops/s
[info]                  ·gc.alloc.rate:            738.294 MB/sec
[info]                  ·gc.alloc.rate.norm:       43144.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.742 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 39313.329 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 26631.415 ops/s
[info]                  ·gc.alloc.rate:                   730.085 MB/sec
[info]                  ·gc.alloc.rate.norm:              43144.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.830 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        39760.541 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 236.201 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala":
[info]   26944.552 ±(99.9%) 781.502 ops/s [Average]
[info]   (min, avg, max) = (26631.415, 26944.552, 27195.161), stdev = 202.954
[info]   CI (99.9%): [26163.050, 27726.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   738.535 ±(99.9%) 21.163 MB/sec [Average]
[info]   (min, avg, max) = (730.085, 738.535, 745.380), stdev = 5.496
[info]   CI (99.9%): [717.371, 759.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   43144.120 ±(99.9%) 0.894 B/op [Average]
[info]   (min, avg, max) = (43144.015, 43144.120, 43144.535), stdev = 0.232
[info]   CI (99.9%): [43143.226, 43145.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   739.837 ±(99.9%) 577.898 MB/sec [Average]
[info]   (min, avg, max) = (672.627, 739.837, 1008.305), stdev = 150.078
[info]   CI (99.9%): [161.939, 1317.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   43220.440 ±(99.9%) 33729.472 B/op [Average]
[info]   (min, avg, max) = (38936.094, 43220.440, 58880.798), stdev = 8759.437
[info]   CI (99.9%): [9490.968, 76949.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 6.689 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.997), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   55.018 ±(99.9%) 395.364 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 55.018, 236.201), stdev = 102.675
[info]   CI (99.9%): [≈ 0, 450.382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 9.400, 13.000), stdev = 2.074
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala
[info] # Run progress: 51.88% complete, ETA 00:38:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 168492.144 ops/s
[info] # Warmup Iteration   2: 179374.187 ops/s
[info] # Warmup Iteration   3: 180307.310 ops/s
[info] Iteration   1: 180804.957 ops/s
[info]                  ·gc.alloc.rate:            470.439 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.648 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2939.819 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 180807.818 ops/s
[info]                  ·gc.alloc.rate:            470.446 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.652 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2939.819 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 174398.869 ops/s
[info]                  ·gc.alloc.rate:            453.800 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.338 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6095.603 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 173470.118 ops/s
[info]                  ·gc.alloc.rate:            451.555 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.805 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3064.191 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 173597.494 ops/s
[info]                  ·gc.alloc.rate:            451.728 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.686 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3061.933 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala":
[info]   176615.851 ±(99.9%) 14793.982 ops/s [Average]
[info]   (min, avg, max) = (173470.118, 176615.851, 180807.818), stdev = 3841.950
[info]   CI (99.9%): [161821.870, 191409.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   459.594 ±(99.9%) 38.287 MB/sec [Average]
[info]   (min, avg, max) = (451.555, 459.594, 470.446), stdev = 9.943
[info]   CI (99.9%): [421.307, 497.880] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.002, 4096.002, 4096.003), stdev = 0.001
[info]   CI (99.9%): [4096.002, 4096.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   405.226 ±(99.9%) 581.437 MB/sec [Average]
[info]   (min, avg, max) = (337.648, 405.226, 675.338), stdev = 150.997
[info]   CI (99.9%): [≈ 0, 986.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   3620.273 ±(99.9%) 5333.616 B/op [Average]
[info]   (min, avg, max) = (2939.819, 3620.273, 6095.603), stdev = 1385.123
[info]   CI (99.9%): [≈ 0, 8953.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.400, 6.000), stdev = 1.517
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson
[info] # Run progress: 52.15% complete, ETA 00:38:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4930.869 ops/s
[info] # Warmup Iteration   2: 21019.822 ops/s
[info] # Warmup Iteration   3: 21831.136 ops/s
[info] Iteration   1: 21578.050 ops/s
[info]                  ·gc.alloc.rate:            1350.191 MB/sec
[info]                  ·gc.alloc.rate.norm:       98458.131 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.870 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 98143.060 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   2: 22082.867 ops/s
[info]                  ·gc.alloc.rate:                                  1380.955 MB/sec
[info]                  ·gc.alloc.rate.norm:                             98448.018 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.015 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.049 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1352.587 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       96425.693 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                332.339 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   3: 21923.576 ops/s
[info]                  ·gc.alloc.rate:                                  1371.223 MB/sec
[info]                  ·gc.alloc.rate.norm:                             98448.771 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.015 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.077 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.443 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       97746.584 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 21631.186 ops/s
[info]                  ·gc.alloc.rate:            1352.808 MB/sec
[info]                  ·gc.alloc.rate.norm:       98448.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.297 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 99065.835 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 21751.117 ops/s
[info]                  ·gc.alloc.rate:            1360.385 MB/sec
[info]                  ·gc.alloc.rate.norm:       98448.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.372 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 98519.391 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson":
[info]   21793.359 ±(99.9%) 805.912 ops/s [Average]
[info]   (min, avg, max) = (21578.050, 21793.359, 22082.867), stdev = 209.293
[info]   CI (99.9%): [20987.447, 22599.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1363.112 ±(99.9%) 49.639 MB/sec [Average]
[info]   (min, avg, max) = (1350.191, 1363.112, 1380.955), stdev = 12.891
[info]   CI (99.9%): [1313.473, 1412.751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   98450.192 ±(99.9%) 17.135 B/op [Average]
[info]   (min, avg, max) = (98448.018, 98450.192, 98458.131), stdev = 4.450
[info]   CI (99.9%): [98433.056, 98467.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.006 ±(99.9%) 0.031 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.015), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.425 ±(99.9%) 2.242 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.425, 1.077), stdev = 0.582
[info]   CI (99.9%): [≈ 0, 2.667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1356.514 ±(99.9%) 27.193 MB/sec [Average]
[info]   (min, avg, max) = (1345.870, 1356.514, 1361.443), stdev = 7.062
[info]   CI (99.9%): [1329.321, 1383.707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   97980.113 ±(99.9%) 3834.689 B/op [Average]
[info]   (min, avg, max) = (96425.693, 97980.113, 99065.835), stdev = 995.857
[info]   CI (99.9%): [94145.423, 101814.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   66.468 ±(99.9%) 572.307 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 66.468, 332.339), stdev = 148.626
[info]   CI (99.9%): [≈ 0, 638.775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.200, 17.000), stdev = 5.630
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce
[info] # Run progress: 52.42% complete, ETA 00:37:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 61768.167 ops/s
[info] # Warmup Iteration   2: 80247.084 ops/s
[info] # Warmup Iteration   3: 81215.920 ops/s
[info] Iteration   1: 81376.857 ops/s
[info]                  ·gc.alloc.rate:            1255.181 MB/sec
[info]                  ·gc.alloc.rate.norm:       24280.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.005 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 26075.584 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 81609.025 ops/s
[info]                  ·gc.alloc.rate:                                  1258.809 MB/sec
[info]                  ·gc.alloc.rate.norm:                             24280.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.070 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.342 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1014.387 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       19565.574 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                64.234 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   3: 81971.954 ops/s
[info]                  ·gc.alloc.rate:                                  1264.432 MB/sec
[info]                  ·gc.alloc.rate.norm:                             24280.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.041 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.795 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.473 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       26143.414 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 82161.492 ops/s
[info]                  ·gc.alloc.rate:                                  1267.437 MB/sec
[info]                  ·gc.alloc.rate.norm:                             24280.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.058 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.553 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       26082.964 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 81990.164 ops/s
[info]                  ·gc.alloc.rate:                                  1264.620 MB/sec
[info]                  ·gc.alloc.rate.norm:                             24280.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.327 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       26136.719 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce":
[info]   81821.898 ±(99.9%) 1232.102 ops/s [Average]
[info]   (min, avg, max) = (81376.857, 81821.898, 82161.492), stdev = 319.973
[info]   CI (99.9%): [80589.796, 83054.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1262.096 ±(99.9%) 19.154 MB/sec [Average]
[info]   (min, avg, max) = (1255.181, 1262.096, 1267.437), stdev = 4.974
[info]   CI (99.9%): [1242.942, 1281.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   24280.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (24280.005, 24280.005, 24280.005), stdev = 0.001
[info]   CI (99.9%): [24280.004, 24280.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.023 ±(99.9%) 0.121 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.070), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.441 ±(99.9%) 2.331 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.441, 1.342), stdev = 0.605
[info]   CI (99.9%): [≈ 0, 2.772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1289.349 ±(99.9%) 592.300 MB/sec [Average]
[info]   (min, avg, max) = (1014.387, 1289.349, 1361.553), stdev = 153.818
[info]   CI (99.9%): [697.049, 1881.649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   24800.851 ±(99.9%) 11269.945 B/op [Average]
[info]   (min, avg, max) = (19565.574, 24800.851, 26143.414), stdev = 2926.769
[info]   CI (99.9%): [13530.906, 36070.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   12.847 ±(99.9%) 110.614 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 12.847, 64.234), stdev = 28.726
[info]   CI (99.9%): [≈ 0, 123.461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.600, 13.000), stdev = 4.278
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala
[info] # Run progress: 52.69% complete, ETA 00:37:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 83225.035 ops/s
[info] # Warmup Iteration   2: 133224.025 ops/s
[info] # Warmup Iteration   3: 132763.164 ops/s
[info] Iteration   1: 133288.066 ops/s
[info]                  ·gc.alloc.rate:                   1127.820 MB/sec
[info]                  ·gc.alloc.rate.norm:              13320.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1343.983 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        15872.976 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      1.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 15.731 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   2: 133842.060 ops/s
[info]                  ·gc.alloc.rate:                   1132.554 MB/sec
[info]                  ·gc.alloc.rate.norm:              13320.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1007.052 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        11843.979 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 54.833 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   3: 133717.667 ops/s
[info]                  ·gc.alloc.rate:                                  1131.559 MB/sec
[info]                  ·gc.alloc.rate.norm:                             13320.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.112 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.321 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.065 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       12019.344 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 128931.925 ops/s
[info]                  ·gc.alloc.rate:                                  1091.017 MB/sec
[info]                  ·gc.alloc.rate.norm:                             13320.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.080 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.371 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       16620.702 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 129900.069 ops/s
[info]                  ·gc.alloc.rate:            1099.277 MB/sec
[info]                  ·gc.alloc.rate.norm:       13320.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.062 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12372.269 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala":
[info]   131935.957 ±(99.9%) 8990.443 ops/s [Average]
[info]   (min, avg, max) = (128931.925, 131935.957, 133842.060), stdev = 2334.789
[info]   CI (99.9%): [122945.514, 140926.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1116.445 ±(99.9%) 76.011 MB/sec [Average]
[info]   (min, avg, max) = (1091.017, 1116.445, 1132.554), stdev = 19.740
[info]   CI (99.9%): [1040.434, 1192.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   13320.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (13320.003, 13320.003, 13320.003), stdev = 0.001
[info]   CI (99.9%): [13320.003, 13320.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.024 ±(99.9%) 0.191 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.024, 0.112), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.280 ±(99.9%) 2.244 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.280, 1.321), stdev = 0.583
[info]   CI (99.9%): [≈ 0, 2.524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1150.907 ±(99.9%) 709.988 MB/sec [Average]
[info]   (min, avg, max) = (1007.052, 1150.907, 1361.371), stdev = 184.382
[info]   CI (99.9%): [440.919, 1860.895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   13745.854 ±(99.9%) 8880.327 B/op [Average]
[info]   (min, avg, max) = (11843.979, 13745.854, 16620.702), stdev = 2306.193
[info]   CI (99.9%): [4865.527, 22626.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.199 ±(99.9%) 7.779 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.199, 4.662), stdev = 2.020
[info]   CI (99.9%): [≈ 0, 8.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   14.113 ±(99.9%) 91.494 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14.113, 54.833), stdev = 23.761
[info]   CI (99.9%): [≈ 0, 105.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.000, 17.000), stdev = 6.285
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala
[info] # Run progress: 52.96% complete, ETA 00:37:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 395195.305 ops/s
[info] # Warmup Iteration   2: 440989.290 ops/s
[info] # Warmup Iteration   3: 463995.074 ops/s
[info] Iteration   1: 450999.650 ops/s
[info]                  ·gc.alloc.rate:            499.701 MB/sec
[info]                  ·gc.alloc.rate.norm:       1744.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.358 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1173.920 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 464746.817 ops/s
[info]                  ·gc.alloc.rate:            515.040 MB/sec
[info]                  ·gc.alloc.rate.norm:       1744.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.869 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2278.434 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 467511.899 ops/s
[info]                  ·gc.alloc.rate:                   518.143 MB/sec
[info]                  ·gc.alloc.rate.norm:              1744.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             336.460 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1132.480 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.243 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 465410.321 ops/s
[info]                  ·gc.alloc.rate:            515.677 MB/sec
[info]                  ·gc.alloc.rate.norm:       1744.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.407 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2277.437 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 467789.145 ops/s
[info]                  ·gc.alloc.rate:            518.386 MB/sec
[info]                  ·gc.alloc.rate.norm:       1744.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.411 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1131.786 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala":
[info]   463291.567 ±(99.9%) 26936.452 ops/s [Average]
[info]   (min, avg, max) = (450999.650, 463291.567, 467789.145), stdev = 6995.311
[info]   CI (99.9%): [436355.115, 490228.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   513.389 ±(99.9%) 30.006 MB/sec [Average]
[info]   (min, avg, max) = (499.701, 513.389, 518.386), stdev = 7.792
[info]   CI (99.9%): [483.384, 543.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1744.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1744.001, 1744.001, 1744.001), stdev = 0.001
[info]   CI (99.9%): [1744.001, 1744.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   471.101 ±(99.9%) 710.188 MB/sec [Average]
[info]   (min, avg, max) = (336.358, 471.101, 673.407), stdev = 184.434
[info]   CI (99.9%): [≈ 0, 1181.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1598.812 ±(99.9%) 2388.120 B/op [Average]
[info]   (min, avg, max) = (1131.786, 1598.812, 2278.434), stdev = 620.187
[info]   CI (99.9%): [≈ 0, 3986.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.449 ±(99.9%) 3.862 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.449, 2.243), stdev = 1.003
[info]   CI (99.9%): [≈ 0, 4.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 7.000), stdev = 1.949
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 53.23% complete, ETA 00:37:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 467047.544 ops/s
[info] # Warmup Iteration   2: 528555.710 ops/s
[info] # Warmup Iteration   3: 529821.384 ops/s
[info] Iteration   1: 529768.762 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 513105.934 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 529570.569 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 529661.883 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 529618.282 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc":
[info]   526345.086 ±(99.9%) 28499.669 ops/s [Average]
[info]   (min, avg, max) = (513105.934, 526345.086, 529768.762), stdev = 7401.273
[info]   CI (99.9%): [497845.417, 554844.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson
[info] # Run progress: 53.49% complete, ETA 00:37:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 73846.651 ops/s
[info] # Warmup Iteration   2: 103453.446 ops/s
[info] # Warmup Iteration   3: 103730.655 ops/s
[info] Iteration   1: 103354.133 ops/s
[info]                  ·gc.alloc.rate:            1260.631 MB/sec
[info]                  ·gc.alloc.rate.norm:       19200.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.362 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 20490.500 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   2: 103697.450 ops/s
[info]                  ·gc.alloc.rate:                                  1264.652 MB/sec
[info]                  ·gc.alloc.rate.norm:                             19200.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.081 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.226 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1012.878 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       15377.564 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                60.661 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   3: 104570.196 ops/s
[info]                  ·gc.alloc.rate:                                  1275.481 MB/sec
[info]                  ·gc.alloc.rate.norm:                             19200.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.046 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.696 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.368 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       20492.885 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 104506.095 ops/s
[info]                  ·gc.alloc.rate:                                  1275.160 MB/sec
[info]                  ·gc.alloc.rate.norm:                             19200.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.112 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.859 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       20505.433 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 104746.065 ops/s
[info]                  ·gc.alloc.rate:                                  1277.702 MB/sec
[info]                  ·gc.alloc.rate.norm:                             19200.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.074 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.409 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       20457.871 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson":
[info]   104174.788 ±(99.9%) 2353.146 ops/s [Average]
[info]   (min, avg, max) = (103354.133, 104174.788, 104746.065), stdev = 611.105
[info]   CI (99.9%): [101821.641, 106527.934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1270.725 ±(99.9%) 29.182 MB/sec [Average]
[info]   (min, avg, max) = (1260.631, 1270.725, 1277.702), stdev = 7.578
[info]   CI (99.9%): [1241.543, 1299.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   19200.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (19200.004, 19200.004, 19200.004), stdev = 0.001
[info]   CI (99.9%): [19200.003, 19200.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.028 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.081), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.421 ±(99.9%) 2.035 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.421, 1.226), stdev = 0.529
[info]   CI (99.9%): [≈ 0, 2.457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1288.575 ±(99.9%) 594.073 MB/sec [Average]
[info]   (min, avg, max) = (1012.878, 1288.575, 1361.859), stdev = 154.279
[info]   CI (99.9%): [694.502, 1882.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   19464.851 ±(99.9%) 8798.452 B/op [Average]
[info]   (min, avg, max) = (15377.564, 19464.851, 20505.433), stdev = 2284.930
[info]   CI (99.9%): [10666.399, 28263.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   12.132 ±(99.9%) 104.462 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 12.132, 60.661), stdev = 27.128
[info]   CI (99.9%): [≈ 0, 116.594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.200, 16.000), stdev = 5.450
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce
[info] # Run progress: 53.76% complete, ETA 00:36:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 123546.895 ops/s
[info] # Warmup Iteration   2: 151696.805 ops/s
[info] # Warmup Iteration   3: 151862.997 ops/s
[info] Iteration   1: 155653.752 ops/s
[info]                  ·gc.alloc.rate:                                  2619.836 MB/sec
[info]                  ·gc.alloc.rate.norm:                             26496.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.009 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.088 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.559 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       27534.903 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   2: 155528.860 ops/s
[info]                  ·gc.alloc.rate:                                  2617.911 MB/sec
[info]                  ·gc.alloc.rate.norm:                             26496.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.061 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.356 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       24111.936 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 154792.901 ops/s
[info]                  ·gc.alloc.rate:                                  2606.063 MB/sec
[info]                  ·gc.alloc.rate.norm:                             26496.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.012 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.125 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2723.237 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       27687.321 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 155117.187 ops/s
[info]                  ·gc.alloc.rate:                                  2610.984 MB/sec
[info]                  ·gc.alloc.rate.norm:                             26496.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.037 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.735 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       27630.034 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 152491.787 ops/s
[info]                  ·gc.alloc.rate:                                  2566.813 MB/sec
[info]                  ·gc.alloc.rate.norm:                             26496.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.072 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.414 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       24592.543 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce":
[info]   154716.897 ±(99.9%) 4966.475 ops/s [Average]
[info]   (min, avg, max) = (152491.787, 154716.897, 155653.752), stdev = 1289.778
[info]   CI (99.9%): [149750.422, 159683.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate":
[info]   2604.321 ±(99.9%) 83.473 MB/sec [Average]
[info]   (min, avg, max) = (2566.813, 2604.321, 2619.836), stdev = 21.678
[info]   CI (99.9%): [2520.848, 2687.794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   26496.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (26496.003, 26496.003, 26496.003), stdev = 0.001
[info]   CI (99.9%): [26496.002, 26496.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.008 ±(99.9%) 0.012 MB/sec [Average]
[info]   (min, avg, max) = (0.004, 0.008, 0.012), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.076 ±(99.9%) 0.126 B/op [Average]
[info]   (min, avg, max) = (0.037, 0.076, 0.125), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2586.660 ±(99.9%) 718.057 MB/sec [Average]
[info]   (min, avg, max) = (2382.356, 2586.660, 2723.237), stdev = 186.477
[info]   CI (99.9%): [1868.604, 3304.717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   26311.347 ±(99.9%) 6920.728 B/op [Average]
[info]   (min, avg, max) = (24111.936, 26311.347, 27687.321), stdev = 1797.291
[info]   CI (99.9%): [19390.619, 33232.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.count":
[info]   38.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.600, 8.000), stdev = 0.548
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava
[info] # Run progress: 54.03% complete, ETA 00:36:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7380.913 ops/s
[info] # Warmup Iteration   2: 583085.673 ops/s
[info] # Warmup Iteration   3: 584182.462 ops/s
[info] Iteration   1: 592167.925 ops/s
[info]                  ·gc.alloc.rate:            328.049 MB/sec
[info]                  ·gc.alloc.rate.norm:       872.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.694 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 887.006 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 592725.927 ops/s
[info]                  ·gc.alloc.rate:            328.487 MB/sec
[info]                  ·gc.alloc.rate.norm:       872.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.827 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 886.176 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 610573.332 ops/s
[info]                  ·gc.alloc.rate:            338.245 MB/sec
[info]                  ·gc.alloc.rate.norm:       872.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.701 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 860.287 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 608752.182 ops/s
[info]                  ·gc.alloc.rate:            337.243 MB/sec
[info]                  ·gc.alloc.rate.norm:       872.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.701 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 862.841 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 611970.605 ops/s
[info]                  ·gc.alloc.rate:            339.041 MB/sec
[info]                  ·gc.alloc.rate.norm:       872.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.713 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 858.298 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava":
[info]   603237.994 ±(99.9%) 38193.356 ops/s [Average]
[info]   (min, avg, max) = (592167.925, 603237.994, 611970.605), stdev = 9918.693
[info]   CI (99.9%): [565044.638, 641431.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   334.213 ±(99.9%) 21.050 MB/sec [Average]
[info]   (min, avg, max) = (328.049, 334.213, 339.041), stdev = 5.467
[info]   CI (99.9%): [313.163, 355.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   872.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (872.001, 872.001, 872.001), stdev = 0.001
[info]   CI (99.9%): [872.001, 872.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   333.727 ±(99.9%) 0.216 MB/sec [Average]
[info]   (min, avg, max) = (333.694, 333.727, 333.827), stdev = 0.056
[info]   CI (99.9%): [333.511, 333.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   870.922 ±(99.9%) 55.440 B/op [Average]
[info]   (min, avg, max) = (858.298, 870.922, 887.006), stdev = 14.398
[info]   CI (99.9%): [815.481, 926.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala
[info] # Run progress: 54.30% complete, ETA 00:36:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 211092.910 ops/s
[info] # Warmup Iteration   2: 329628.548 ops/s
[info] # Warmup Iteration   3: 330296.570 ops/s
[info] Iteration   1: 327905.291 ops/s
[info]                  ·gc.alloc.rate:            341.676 MB/sec
[info]                  ·gc.alloc.rate.norm:       1640.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.397 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1614.665 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 330913.230 ops/s
[info]                  ·gc.alloc.rate:            344.743 MB/sec
[info]                  ·gc.alloc.rate.norm:       1640.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.325 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1599.956 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 330807.727 ops/s
[info]                  ·gc.alloc.rate:            344.648 MB/sec
[info]                  ·gc.alloc.rate.norm:       1640.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.340 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1600.468 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 316970.303 ops/s
[info]                  ·gc.alloc.rate:            330.271 MB/sec
[info]                  ·gc.alloc.rate.norm:       1640.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.381 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1670.339 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 319452.182 ops/s
[info]                  ·gc.alloc.rate:                   332.851 MB/sec
[info]                  ·gc.alloc.rate.norm:              1640.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             335.706 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1654.071 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.282 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala":
[info]   325209.746 ±(99.9%) 25262.913 ops/s [Average]
[info]   (min, avg, max) = (316970.303, 325209.746, 330913.230), stdev = 6560.698
[info]   CI (99.9%): [299946.833, 350472.660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   338.838 ±(99.9%) 26.252 MB/sec [Average]
[info]   (min, avg, max) = (330.271, 338.838, 344.743), stdev = 6.818
[info]   CI (99.9%): [312.586, 365.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1640.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1640.001, 1640.001, 1640.001), stdev = 0.001
[info]   CI (99.9%): [1640.001, 1640.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   336.230 ±(99.9%) 1.133 MB/sec [Average]
[info]   (min, avg, max) = (335.706, 336.230, 336.397), stdev = 0.294
[info]   CI (99.9%): [335.097, 337.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1627.900 ±(99.9%) 124.694 B/op [Average]
[info]   (min, avg, max) = (1599.956, 1627.900, 1670.339), stdev = 32.383
[info]   CI (99.9%): [1503.205, 1752.594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.656 ±(99.9%) 5.652 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.656, 3.282), stdev = 1.468
[info]   CI (99.9%): [≈ 0, 6.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala
[info] # Run progress: 54.57% complete, ETA 00:36:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 852834.346 ops/s
[info] # Warmup Iteration   2: 866771.561 ops/s
[info] # Warmup Iteration   3: 881412.724 ops/s
[info] Iteration   1: 866051.822 ops/s
[info]                  ·gc.alloc.rate:            299.294 MB/sec
[info]                  ·gc.alloc.rate.norm:       544.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.998 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 612.533 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 879191.241 ops/s
[info]                  ·gc.alloc.rate:            303.812 MB/sec
[info]                  ·gc.alloc.rate.norm:       544.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.980 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 603.390 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 879577.243 ops/s
[info]                  ·gc.alloc.rate:            303.972 MB/sec
[info]                  ·gc.alloc.rate.norm:       544.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.009 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 603.124 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 881293.956 ops/s
[info]                  ·gc.alloc.rate:            304.588 MB/sec
[info]                  ·gc.alloc.rate.norm:       544.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.027 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 601.939 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 882274.082 ops/s
[info]                  ·gc.alloc.rate:            304.899 MB/sec
[info]                  ·gc.alloc.rate.norm:       544.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.005 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 601.284 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala":
[info]   877677.669 ±(99.9%) 25488.830 ops/s [Average]
[info]   (min, avg, max) = (866051.822, 877677.669, 882274.082), stdev = 6619.368
[info]   CI (99.9%): [852188.839, 903166.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   303.313 ±(99.9%) 8.818 MB/sec [Average]
[info]   (min, avg, max) = (299.294, 303.313, 304.899), stdev = 2.290
[info]   CI (99.9%): [294.495, 312.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   544.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (544.000, 544.000, 544.001), stdev = 0.001
[info]   CI (99.9%): [544.000, 544.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   337.004 ±(99.9%) 0.066 MB/sec [Average]
[info]   (min, avg, max) = (336.980, 337.004, 337.027), stdev = 0.017
[info]   CI (99.9%): [336.938, 337.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   604.454 ±(99.9%) 17.703 B/op [Average]
[info]   (min, avg, max) = (601.284, 604.454, 612.533), stdev = 4.597
[info]   CI (99.9%): [586.751, 622.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson
[info] # Run progress: 54.84% complete, ETA 00:36:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 43071.749 ops/s
[info] # Warmup Iteration   2: 73390.457 ops/s
[info] # Warmup Iteration   3: 77249.075 ops/s
[info] Iteration   1: 77407.391 ops/s
[info]                  ·gc.alloc.rate:                                  3421.392 MB/sec
[info]                  ·gc.alloc.rate.norm:                             69576.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.017 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.352 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3403.384 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       69209.808 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   2: 77067.599 ops/s
[info]                  ·gc.alloc.rate:                                  3407.885 MB/sec
[info]                  ·gc.alloc.rate.norm:                             69576.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.009 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.191 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3404.945 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       69515.995 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   3: 77673.524 ops/s
[info]                  ·gc.alloc.rate:                                  3433.240 MB/sec
[info]                  ·gc.alloc.rate.norm:                             69576.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.155 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3403.564 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       68974.607 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   4: 77262.852 ops/s
[info]                  ·gc.alloc.rate:                                  3414.908 MB/sec
[info]                  ·gc.alloc.rate.norm:                             69576.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.021 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.427 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3403.352 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       69340.572 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   5: 76516.371 ops/s
[info]                  ·gc.alloc.rate:                                  3382.175 MB/sec
[info]                  ·gc.alloc.rate.norm:                             69576.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.018 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.371 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3403.500 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       70014.679 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson":
[info]   77185.547 ±(99.9%) 1672.949 ops/s [Average]
[info]   (min, avg, max) = (76516.371, 77185.547, 77673.524), stdev = 434.460
[info]   CI (99.9%): [75512.598, 78858.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3411.920 ±(99.9%) 73.421 MB/sec [Average]
[info]   (min, avg, max) = (3382.175, 3411.920, 3433.240), stdev = 19.067
[info]   CI (99.9%): [3338.499, 3485.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   69576.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (69576.005, 69576.005, 69576.006), stdev = 0.001
[info]   CI (99.9%): [69576.005, 69576.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.015 ±(99.9%) 0.022 MB/sec [Average]
[info]   (min, avg, max) = (0.008, 0.015, 0.021), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.299 ±(99.9%) 0.459 B/op [Average]
[info]   (min, avg, max) = (0.155, 0.299, 0.427), stdev = 0.119
[info]   CI (99.9%): [≈ 0, 0.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   3403.749 ±(99.9%) 2.596 MB/sec [Average]
[info]   (min, avg, max) = (3403.352, 3403.749, 3404.945), stdev = 0.674
[info]   CI (99.9%): [3401.153, 3406.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   69411.132 ±(99.9%) 1505.362 B/op [Average]
[info]   (min, avg, max) = (68974.607, 69411.132, 70014.679), stdev = 390.938
[info]   CI (99.9%): [67905.771, 70916.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.count":
[info]   50.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (10.000, 10.000, 10.000), stdev = 0.001
[info]   CI (99.9%): [50.000, 50.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.800, 9.000), stdev = 0.447
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce
[info] # Run progress: 55.11% complete, ETA 00:35:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 197032.748 ops/s
[info] # Warmup Iteration   2: 252938.548 ops/s
[info] # Warmup Iteration   3: 253820.609 ops/s
[info] Iteration   1: 255690.138 ops/s
[info]                  ·gc.alloc.rate:                                  1741.862 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10720.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.092 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.564 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1694.920 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       10431.103 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                24.602 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   2: 250991.527 ops/s
[info]                  ·gc.alloc.rate:                                  1709.049 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10720.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.458 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       10672.391 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 250560.312 ops/s
[info]                  ·gc.alloc.rate:                                  1706.375 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10720.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.025 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.711 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       10690.704 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 256312.246 ops/s
[info]                  ·gc.alloc.rate:            1745.666 MB/sec
[info]                  ·gc.alloc.rate.norm:       10720.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.873 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10451.073 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 257042.655 ops/s
[info]                  ·gc.alloc.rate:                                  1751.123 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10720.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.266 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       10420.910 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce":
[info]   254119.376 ±(99.9%) 11910.868 ops/s [Average]
[info]   (min, avg, max) = (250560.312, 254119.376, 257042.655), stdev = 3093.214
[info]   CI (99.9%): [242208.508, 266030.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1730.815 ±(99.9%) 82.275 MB/sec [Average]
[info]   (min, avg, max) = (1706.375, 1730.815, 1751.123), stdev = 21.367
[info]   CI (99.9%): [1648.540, 1813.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   10720.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10720.002, 10720.002, 10720.002), stdev = 0.001
[info]   CI (99.9%): [10720.001, 10720.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.020 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.092), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.123 ±(99.9%) 0.950 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.123, 0.564), stdev = 0.247
[info]   CI (99.9%): [≈ 0, 1.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1700.446 ±(99.9%) 11.949 MB/sec [Average]
[info]   (min, avg, max) = (1694.920, 1700.446, 1702.266), stdev = 3.103
[info]   CI (99.9%): [1688.497, 1712.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   10533.236 ±(99.9%) 523.600 B/op [Average]
[info]   (min, avg, max) = (10420.910, 10533.236, 10690.704), stdev = 135.977
[info]   CI (99.9%): [10009.636, 11056.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.884 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   4.920 ±(99.9%) 42.366 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.920, 24.602), stdev = 11.002
[info]   CI (99.9%): [≈ 0, 47.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 10.000), stdev = 2.608
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava
[info] # Run progress: 55.38% complete, ETA 00:35:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 31749.722 ops/s
[info] # Warmup Iteration   2: 1066599.158 ops/s
[info] # Warmup Iteration   3: 1053210.284 ops/s
[info] Iteration   1: 1053429.161 ops/s
[info]                  ·gc.alloc.rate:                   433.687 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             666.749 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        996.233 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.995 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 1068278.774 ops/s
[info]                  ·gc.alloc.rate:            439.967 MB/sec
[info]                  ·gc.alloc.rate.norm:       648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.835 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 491.686 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 1073666.962 ops/s
[info]                  ·gc.alloc.rate:            442.014 MB/sec
[info]                  ·gc.alloc.rate.norm:       648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.705 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 489.218 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 1067634.629 ops/s
[info]                  ·gc.alloc.rate:                   439.526 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             666.737 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        982.982 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.982 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 1075858.168 ops/s
[info]                  ·gc.alloc.rate:            442.968 MB/sec
[info]                  ·gc.alloc.rate.norm:       648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.744 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 488.221 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava":
[info]   1067773.539 ±(99.9%) 33686.499 ops/s [Average]
[info]   (min, avg, max) = (1053429.161, 1067773.539, 1075858.168), stdev = 8748.277
[info]   CI (99.9%): [1034087.040, 1101460.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   439.632 ±(99.9%) 13.919 MB/sec [Average]
[info]   (min, avg, max) = (433.687, 439.632, 442.968), stdev = 3.615
[info]   CI (99.9%): [425.713, 453.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   648.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (648.000, 648.000, 648.000), stdev = 0.001
[info]   CI (99.9%): [648.000, 648.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   466.954 ±(99.9%) 702.286 MB/sec [Average]
[info]   (min, avg, max) = (333.705, 466.954, 666.749), stdev = 182.381
[info]   CI (99.9%): [≈ 0, 1169.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   689.668 ±(99.9%) 1054.496 B/op [Average]
[info]   (min, avg, max) = (488.221, 689.668, 996.233), stdev = 273.849
[info]   CI (99.9%): [≈ 0, 1744.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   0.395 ±(99.9%) 2.085 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.395, 0.995), stdev = 0.542
[info]   CI (99.9%): [≈ 0, 2.481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.800, 10.000), stdev = 2.490
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJavaPrealloc
[info] # Run progress: 55.65% complete, ETA 00:35:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 68590.533 ops/s
[info] # Warmup Iteration   2: 1121904.810 ops/s
[info] # Warmup Iteration   3: 1147788.907 ops/s
[info] Iteration   1: 1148593.180 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1145948.212 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1147938.099 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1148321.930 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1148180.315 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJavaPrealloc":
[info]   1147796.347 ±(99.9%) 4081.641 ops/s [Average]
[info]   (min, avg, max) = (1145948.212, 1147796.347, 1148593.180), stdev = 1059.989
[info]   CI (99.9%): [1143714.707, 1151877.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJavaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJavaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJavaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala
[info] # Run progress: 55.91% complete, ETA 00:35:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 650147.382 ops/s
[info] # Warmup Iteration   2: 981194.937 ops/s
[info] # Warmup Iteration   3: 950145.160 ops/s
[info] Iteration   1: 951285.750 ops/s
[info]                  ·gc.alloc.rate:            624.311 MB/sec
[info]                  ·gc.alloc.rate.norm:       1032.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.556 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1110.096 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 991490.935 ops/s
[info]                  ·gc.alloc.rate:            650.043 MB/sec
[info]                  ·gc.alloc.rate.norm:       1032.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.348 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 533.982 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 983167.155 ops/s
[info]                  ·gc.alloc.rate:            644.574 MB/sec
[info]                  ·gc.alloc.rate.norm:       1032.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.694 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1077.023 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 986642.821 ops/s
[info]                  ·gc.alloc.rate:                   646.906 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.085 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1072.168 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.063 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 986660.315 ops/s
[info]                  ·gc.alloc.rate:            646.918 MB/sec
[info]                  ·gc.alloc.rate.norm:       1032.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.751 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1073.210 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala":
[info]   979849.395 ±(99.9%) 62534.566 ops/s [Average]
[info]   (min, avg, max) = (951285.750, 979849.395, 991490.935), stdev = 16240.028
[info]   CI (99.9%): [917314.829, 1042383.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   642.550 ±(99.9%) 39.968 MB/sec [Average]
[info]   (min, avg, max) = (624.311, 642.550, 650.043), stdev = 10.380
[info]   CI (99.9%): [602.582, 682.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1032.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1032.000, 1032.000, 1032.000), stdev = 0.001
[info]   CI (99.9%): [1032.000, 1032.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   605.087 ±(99.9%) 578.483 MB/sec [Average]
[info]   (min, avg, max) = (336.348, 605.087, 672.751), stdev = 150.230
[info]   CI (99.9%): [26.604, 1183.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   973.296 ±(99.9%) 947.581 B/op [Average]
[info]   (min, avg, max) = (533.982, 973.296, 1110.096), stdev = 246.084
[info]   CI (99.9%): [25.715, 1920.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.213 ±(99.9%) 1.830 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.213, 1.063), stdev = 0.475
[info]   CI (99.9%): [≈ 0, 2.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.600, 9.000), stdev = 2.074
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala
[info] # Run progress: 56.18% complete, ETA 00:34:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1156252.762 ops/s
[info] # Warmup Iteration   2: 1340320.670 ops/s
[info] # Warmup Iteration   3: 1354741.053 ops/s
[info] Iteration   1: 1349093.792 ops/s
[info]                  ·gc.alloc.rate:            555.502 MB/sec
[info]                  ·gc.alloc.rate.norm:       648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.854 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 784.893 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 1358075.556 ops/s
[info]                  ·gc.alloc.rate:            559.102 MB/sec
[info]                  ·gc.alloc.rate.norm:       648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.744 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 779.713 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 1352457.423 ops/s
[info]                  ·gc.alloc.rate:            556.691 MB/sec
[info]                  ·gc.alloc.rate.norm:       648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.318 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 391.482 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 1351184.877 ops/s
[info]                  ·gc.alloc.rate:                   556.268 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.742 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        783.682 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.776 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 1352360.011 ops/s
[info]                  ·gc.alloc.rate:            556.703 MB/sec
[info]                  ·gc.alloc.rate.norm:       648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.349 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 783.775 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala":
[info]   1352634.332 ±(99.9%) 12821.807 ops/s [Average]
[info]   (min, avg, max) = (1349093.792, 1352634.332, 1358075.556), stdev = 3329.783
[info]   CI (99.9%): [1339812.525, 1365456.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   556.853 ±(99.9%) 5.192 MB/sec [Average]
[info]   (min, avg, max) = (555.502, 556.853, 559.102), stdev = 1.348
[info]   CI (99.9%): [551.661, 562.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   648.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (648.000, 648.000, 648.000), stdev = 0.001
[info]   CI (99.9%): [648.000, 648.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   605.601 ±(99.9%) 579.653 MB/sec [Average]
[info]   (min, avg, max) = (336.318, 605.601, 673.349), stdev = 150.534
[info]   CI (99.9%): [25.948, 1185.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   704.709 ±(99.9%) 674.287 B/op [Average]
[info]   (min, avg, max) = (391.482, 704.709, 784.893), stdev = 175.110
[info]   CI (99.9%): [30.422, 1378.996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.155 ±(99.9%) 1.336 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.155, 0.776), stdev = 0.347
[info]   CI (99.9%): [≈ 0, 1.491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 7.000), stdev = 1.643
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 56.45% complete, ETA 00:34:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1302349.489 ops/s
[info] # Warmup Iteration   2: 1418825.155 ops/s
[info] # Warmup Iteration   3: 1419142.567 ops/s
[info] Iteration   1: 1425782.334 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1415951.883 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1422164.485 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1426239.172 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1426888.543 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc":
[info]   1423405.283 ±(99.9%) 17530.705 ops/s [Average]
[info]   (min, avg, max) = (1415951.883, 1423405.283, 1426888.543), stdev = 4552.668
[info]   CI (99.9%): [1405874.579, 1440935.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson
[info] # Run progress: 56.72% complete, ETA 00:34:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22794.461 ops/s
[info] # Warmup Iteration   2: 35565.606 ops/s
[info] # Warmup Iteration   3: 35843.599 ops/s
[info] Iteration   1: 36589.985 ops/s
[info]                  ·gc.alloc.rate:                                  1789.743 MB/sec
[info]                  ·gc.alloc.rate.norm:                             76991.172 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.160 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 6.904 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2030.164 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       87333.579 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                171.916 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        15.000 ms
[info] Iteration   2: 37076.823 ops/s
[info]                  ·gc.alloc.rate:                                  1813.305 MB/sec
[info]                  ·gc.alloc.rate.norm:                             76984.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.154 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.713 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       72246.358 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 37493.876 ops/s
[info]                  ·gc.alloc.rate:                                  1833.773 MB/sec
[info]                  ·gc.alloc.rate.norm:                             76984.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.739 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       71441.073 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 36881.784 ops/s
[info]                  ·gc.alloc.rate:                                  1803.727 MB/sec
[info]                  ·gc.alloc.rate.norm:                             76984.012 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.075 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.007 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       87153.926 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 36752.951 ops/s
[info]                  ·gc.alloc.rate:                                  1797.541 MB/sec
[info]                  ·gc.alloc.rate.norm:                             76984.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.742 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       72881.166 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson":
[info]   36959.084 ±(99.9%) 1340.231 ops/s [Average]
[info]   (min, avg, max) = (36589.985, 36959.084, 37493.876), stdev = 348.054
[info]   CI (99.9%): [35618.853, 38299.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1807.618 ±(99.9%) 65.365 MB/sec [Average]
[info]   (min, avg, max) = (1789.743, 1807.618, 1833.773), stdev = 16.975
[info]   CI (99.9%): [1742.253, 1872.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   76985.443 ±(99.9%) 12.331 B/op [Average]
[info]   (min, avg, max) = (76984.011, 76985.443, 76991.172), stdev = 3.202
[info]   CI (99.9%): [76973.112, 76997.775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.033 ±(99.9%) 0.274 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 0.033, 0.160), stdev = 0.071
[info]   CI (99.9%): [≈ 0, 0.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.433 ±(99.9%) 11.779 B/op [Average]
[info]   (min, avg, max) = (0.014, 1.433, 6.904), stdev = 3.059
[info]   CI (99.9%): [≈ 0, 13.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1835.473 ±(99.9%) 705.365 MB/sec [Average]
[info]   (min, avg, max) = (1701.713, 1835.473, 2042.007), stdev = 183.181
[info]   CI (99.9%): [1130.108, 2540.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   78211.220 ±(99.9%) 31812.318 B/op [Average]
[info]   (min, avg, max) = (71441.073, 78211.220, 87333.579), stdev = 8261.558
[info]   CI (99.9%): [46398.902, 110023.538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   34.383 ±(99.9%) 296.051 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 34.383, 171.916), stdev = 76.883
[info]   CI (99.9%): [≈ 0, 330.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.600, 15.000), stdev = 4.722
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce
[info] # Run progress: 56.99% complete, ETA 00:34:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 30650.232 ops/s
[info] # Warmup Iteration   2: 38504.835 ops/s
[info] # Warmup Iteration   3: 40597.626 ops/s
[info] Iteration   1: 40504.903 ops/s
[info]                  ·gc.alloc.rate:            808.758 MB/sec
[info]                  ·gc.alloc.rate.norm:       31424.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.146 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 26193.694 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 40316.625 ops/s
[info]                  ·gc.alloc.rate:            804.849 MB/sec
[info]                  ·gc.alloc.rate.norm:       31424.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.047 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 39474.701 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 40103.443 ops/s
[info]                  ·gc.alloc.rate:            800.798 MB/sec
[info]                  ·gc.alloc.rate.norm:       31424.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.201 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 26456.218 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 40318.015 ops/s
[info]                  ·gc.alloc.rate:                   804.919 MB/sec
[info]                  ·gc.alloc.rate.norm:              31424.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1011.086 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        39472.743 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 130.016 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 40748.007 ops/s
[info]                  ·gc.alloc.rate:                                  813.837 MB/sec
[info]                  ·gc.alloc.rate.norm:                             31424.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.051 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.967 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            681.015 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       26295.448 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce":
[info]   40398.199 ±(99.9%) 930.782 ops/s [Average]
[info]   (min, avg, max) = (40103.443, 40398.199, 40748.007), stdev = 241.721
[info]   CI (99.9%): [39467.417, 41328.981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate":
[info]   806.632 ±(99.9%) 18.921 MB/sec [Average]
[info]   (min, avg, max) = (800.798, 806.632, 813.837), stdev = 4.914
[info]   CI (99.9%): [787.711, 825.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   31424.010 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (31424.010, 31424.010, 31424.011), stdev = 0.001
[info]   CI (99.9%): [31424.009, 31424.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.010 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.051), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.393 ±(99.9%) 3.387 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.393, 1.967), stdev = 0.880
[info]   CI (99.9%): [≈ 0, 3.780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   810.299 ±(99.9%) 705.809 MB/sec [Average]
[info]   (min, avg, max) = (674.146, 810.299, 1011.086), stdev = 183.296
[info]   CI (99.9%): [104.490, 1516.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   31578.561 ±(99.9%) 27754.945 B/op [Average]
[info]   (min, avg, max) = (26193.694, 31578.561, 39474.701), stdev = 7207.871
[info]   CI (99.9%): [3823.616, 59333.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   26.003 ±(99.9%) 223.895 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 26.003, 130.016), stdev = 58.145
[info]   CI (99.9%): [≈ 0, 249.898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.000, 10.000), stdev = 2.739
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala
[info] # Run progress: 57.26% complete, ETA 00:34:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 49241.092 ops/s
[info] # Warmup Iteration   2: 76586.036 ops/s
[info] # Warmup Iteration   3: 77955.920 ops/s
[info] Iteration   1: 78895.619 ops/s
[info]                  ·gc.alloc.rate:            831.719 MB/sec
[info]                  ·gc.alloc.rate.norm:       16592.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.771 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13421.135 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 77671.428 ops/s
[info]                  ·gc.alloc.rate:            818.684 MB/sec
[info]                  ·gc.alloc.rate.norm:       16592.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.017 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 20449.419 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 77478.686 ops/s
[info]                  ·gc.alloc.rate:                   816.676 MB/sec
[info]                  ·gc.alloc.rate.norm:              16592.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.025 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        13653.192 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 13.531 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 78629.641 ops/s
[info]                  ·gc.alloc.rate:                                  828.830 MB/sec
[info]                  ·gc.alloc.rate.norm:                             16592.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.082 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.633 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1013.087 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       20280.567 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                80.002 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   5: 79455.939 ops/s
[info]                  ·gc.alloc.rate:                                  837.572 MB/sec
[info]                  ·gc.alloc.rate.norm:                             16592.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.045 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.888 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.724 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       13484.896 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala":
[info]   78426.263 ±(99.9%) 3215.672 ops/s [Average]
[info]   (min, avg, max) = (77478.686, 78426.263, 79455.939), stdev = 835.100
[info]   CI (99.9%): [75210.590, 81641.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   826.696 ±(99.9%) 34.044 MB/sec [Average]
[info]   (min, avg, max) = (816.676, 826.696, 837.572), stdev = 8.841
[info]   CI (99.9%): [792.653, 860.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   16592.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16592.005, 16592.005, 16592.006), stdev = 0.001
[info]   CI (99.9%): [16592.004, 16592.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.025 ±(99.9%) 0.142 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.082), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.504 ±(99.9%) 2.845 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.504, 1.633), stdev = 0.739
[info]   CI (99.9%): [≈ 0, 3.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   809.525 ±(99.9%) 708.541 MB/sec [Average]
[info]   (min, avg, max) = (672.025, 809.525, 1013.087), stdev = 184.006
[info]   CI (99.9%): [100.984, 1518.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   16257.842 ±(99.9%) 14442.735 B/op [Average]
[info]   (min, avg, max) = (13421.135, 16257.842, 20449.419), stdev = 3750.732
[info]   CI (99.9%): [1815.107, 30700.576] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   18.707 ±(99.9%) 133.858 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 18.707, 80.002), stdev = 34.763
[info]   CI (99.9%): [≈ 0, 152.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 8.200, 12.000), stdev = 4.207
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala
[info] # Run progress: 57.53% complete, ETA 00:33:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 235227.660 ops/s
[info] # Warmup Iteration   2: 260888.111 ops/s
[info] # Warmup Iteration   3: 266509.281 ops/s
[info] Iteration   1: 266306.779 ops/s
[info]                  ·gc.alloc.rate:            866.149 MB/sec
[info]                  ·gc.alloc.rate.norm:       5120.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1010.981 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5976.138 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 265676.834 ops/s
[info]                  ·gc.alloc.rate:            864.501 MB/sec
[info]                  ·gc.alloc.rate.norm:       5120.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.303 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3993.553 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 265841.773 ops/s
[info]                  ·gc.alloc.rate:            864.684 MB/sec
[info]                  ·gc.alloc.rate.norm:       5120.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.090 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5986.905 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 266967.672 ops/s
[info]                  ·gc.alloc.rate:                                  868.521 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5120.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.049 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.290 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            677.506 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3993.954 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                19.636 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 267574.739 ops/s
[info]                  ·gc.alloc.rate:                                  870.606 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5120.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.029 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.170 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.366 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6006.618 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala":
[info]   266473.560 ±(99.9%) 3055.434 ops/s [Average]
[info]   (min, avg, max) = (265676.834, 266473.560, 267574.739), stdev = 793.487
[info]   CI (99.9%): [263418.125, 269528.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   866.892 ±(99.9%) 10.112 MB/sec [Average]
[info]   (min, avg, max) = (864.501, 866.892, 870.606), stdev = 2.626
[info]   CI (99.9%): [856.780, 877.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   5120.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5120.002, 5120.002, 5120.002), stdev = 0.001
[info]   CI (99.9%): [5120.001, 5120.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.016 ±(99.9%) 0.087 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.049), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.092 ±(99.9%) 0.512 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.092, 0.290), stdev = 0.133
[info]   CI (99.9%): [≈ 0, 0.604] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   879.049 ±(99.9%) 714.280 MB/sec [Average]
[info]   (min, avg, max) = (674.303, 879.049, 1021.366), stdev = 185.496
[info]   CI (99.9%): [164.769, 1593.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   5191.434 ±(99.9%) 4210.224 B/op [Average]
[info]   (min, avg, max) = (3993.553, 5191.434, 6006.618), stdev = 1093.382
[info]   CI (99.9%): [981.210, 9401.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   3.927 ±(99.9%) 33.814 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.927, 19.636), stdev = 8.781
[info]   CI (99.9%): [≈ 0, 37.742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.000, 9.000), stdev = 2.739
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson
[info] # Run progress: 57.80% complete, ETA 00:33:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16713.327 ops/s
[info] # Warmup Iteration   2: 29045.745 ops/s
[info] # Warmup Iteration   3: 28915.233 ops/s
[info] Iteration   1: 29655.674 ops/s
[info]                  ·gc.alloc.rate:            1393.605 MB/sec
[info]                  ·gc.alloc.rate.norm:       73960.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.576 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 71411.062 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   2: 30030.739 ops/s
[info]                  ·gc.alloc.rate:                                  1411.214 MB/sec
[info]                  ·gc.alloc.rate.norm:                             73960.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.072 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.774 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1357.602 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       71150.254 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                209.471 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 30520.067 ops/s
[info]                  ·gc.alloc.rate:                                  1434.021 MB/sec
[info]                  ·gc.alloc.rate.norm:                             73960.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.011 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.577 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.742 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       87767.786 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 30272.063 ops/s
[info]                  ·gc.alloc.rate:                                  1422.349 MB/sec
[info]                  ·gc.alloc.rate.norm:                             73960.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.310 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.373 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       70789.356 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 30405.621 ops/s
[info]                  ·gc.alloc.rate:            1428.621 MB/sec
[info]                  ·gc.alloc.rate.norm:       73960.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.351 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 70477.437 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson":
[info]   30176.833 ±(99.9%) 1322.982 ops/s [Average]
[info]   (min, avg, max) = (29655.674, 30176.833, 30520.067), stdev = 343.574
[info]   CI (99.9%): [28853.851, 31499.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1417.962 ±(99.9%) 61.777 MB/sec [Average]
[info]   (min, avg, max) = (1393.605, 1417.962, 1434.021), stdev = 16.043
[info]   CI (99.9%): [1356.185, 1479.738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   73960.014 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (73960.013, 73960.014, 73960.017), stdev = 0.002
[info]   CI (99.9%): [73960.008, 73960.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.018 ±(99.9%) 0.118 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.072), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.932 ±(99.9%) 6.187 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.774), stdev = 1.607
[info]   CI (99.9%): [≈ 0, 7.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1425.529 ±(99.9%) 595.093 MB/sec [Average]
[info]   (min, avg, max) = (1345.576, 1425.529, 1701.742), stdev = 154.544
[info]   CI (99.9%): [830.436, 2020.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   74319.179 ±(99.9%) 28981.237 B/op [Average]
[info]   (min, avg, max) = (70477.437, 74319.179, 87767.786), stdev = 7526.335
[info]   CI (99.9%): [45337.942, 103300.417] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   41.894 ±(99.9%) 360.721 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 41.894, 209.471), stdev = 93.678
[info]   CI (99.9%): [≈ 0, 402.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.200, 17.000), stdev = 5.675
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce
[info] # Run progress: 58.06% complete, ETA 00:33:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 40453.555 ops/s
[info] # Warmup Iteration   2: 50413.651 ops/s
[info] # Warmup Iteration   3: 50638.669 ops/s
[info] Iteration   1: 50905.069 ops/s
[info]                  ·gc.alloc.rate:            1078.810 MB/sec
[info]                  ·gc.alloc.rate.norm:       33360.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1010.986 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 31262.661 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 49827.614 ops/s
[info]                  ·gc.alloc.rate:            1055.987 MB/sec
[info]                  ·gc.alloc.rate.norm:       33360.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.022 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 31939.529 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 50693.039 ops/s
[info]                  ·gc.alloc.rate:                                  1074.418 MB/sec
[info]                  ·gc.alloc.rate.norm:                             33360.008 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.075 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.330 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.699 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       31598.938 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                103.400 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 50971.694 ops/s
[info]                  ·gc.alloc.rate:                                  1080.629 MB/sec
[info]                  ·gc.alloc.rate.norm:                             33360.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.017 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.540 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.372 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       31530.708 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 50837.779 ops/s
[info]                  ·gc.alloc.rate:                                  1077.484 MB/sec
[info]                  ·gc.alloc.rate.norm:                             33360.008 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.031 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.044 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       31612.559 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce":
[info]   50647.039 ±(99.9%) 1808.097 ops/s [Average]
[info]   (min, avg, max) = (49827.614, 50647.039, 50971.694), stdev = 469.557
[info]   CI (99.9%): [48838.941, 52455.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1073.466 ±(99.9%) 38.624 MB/sec [Average]
[info]   (min, avg, max) = (1055.987, 1073.466, 1080.629), stdev = 10.031
[info]   CI (99.9%): [1034.841, 1112.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   33360.008 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (33360.008, 33360.008, 33360.009), stdev = 0.001
[info]   CI (99.9%): [33360.007, 33360.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.019 ±(99.9%) 0.125 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.075), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.580 ±(99.9%) 3.868 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.580, 2.330), stdev = 1.005
[info]   CI (99.9%): [≈ 0, 4.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1016.425 ±(99.9%) 19.842 MB/sec [Average]
[info]   (min, avg, max) = (1010.986, 1016.425, 1021.372), stdev = 5.153
[info]   CI (99.9%): [996.583, 1036.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   31588.879 ±(99.9%) 930.191 B/op [Average]
[info]   (min, avg, max) = (31262.661, 31588.879, 31939.529), stdev = 241.568
[info]   CI (99.9%): [30658.688, 32519.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   20.680 ±(99.9%) 178.060 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 20.680, 103.400), stdev = 46.242
[info]   CI (99.9%): [≈ 0, 198.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.200, 10.000), stdev = 3.768
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala
[info] # Run progress: 58.33% complete, ETA 00:33:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 53187.437 ops/s
[info] # Warmup Iteration   2: 86148.365 ops/s
[info] # Warmup Iteration   3: 86783.443 ops/s
[info] Iteration   1: 86113.407 ops/s
[info]                  ·gc.alloc.rate:            1179.418 MB/sec
[info]                  ·gc.alloc.rate.norm:       21560.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.991 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18444.555 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 83851.022 ops/s
[info]                  ·gc.alloc.rate:                                  1148.430 MB/sec
[info]                  ·gc.alloc.rate.norm:                             21560.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.035 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.655 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1348.636 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       25318.561 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                87.521 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        14.000 ms
[info] Iteration   3: 88641.187 ops/s
[info]                  ·gc.alloc.rate:                                  1214.535 MB/sec
[info]                  ·gc.alloc.rate.norm:                             21560.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.117 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.074 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.399 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       18131.508 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 87218.869 ops/s
[info]                  ·gc.alloc.rate:                                  1194.945 MB/sec
[info]                  ·gc.alloc.rate.norm:                             21560.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.042 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.739 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       24569.426 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 88695.479 ops/s
[info]                  ·gc.alloc.rate:            1214.798 MB/sec
[info]                  ·gc.alloc.rate.norm:       21559.982 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.987 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18120.267 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala":
[info]   86903.993 ±(99.9%) 7766.491 ops/s [Average]
[info]   (min, avg, max) = (83851.022, 86903.993, 88695.479), stdev = 2016.933
[info]   CI (99.9%): [79137.502, 94670.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1190.425 ±(99.9%) 106.859 MB/sec [Average]
[info]   (min, avg, max) = (1148.430, 1190.425, 1214.798), stdev = 27.751
[info]   CI (99.9%): [1083.566, 1297.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   21560.000 ±(99.9%) 0.039 B/op [Average]
[info]   (min, avg, max) = (21559.982, 21560.000, 21560.005), stdev = 0.010
[info]   CI (99.9%): [21559.962, 21560.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.031 ±(99.9%) 0.194 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.031, 0.117), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.554 ±(99.9%) 3.442 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.554, 2.074), stdev = 0.894
[info]   CI (99.9%): [≈ 0, 3.996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1152.350 ±(99.9%) 713.483 MB/sec [Average]
[info]   (min, avg, max) = (1008.991, 1152.350, 1361.739), stdev = 185.289
[info]   CI (99.9%): [438.867, 1865.834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   20916.863 ±(99.9%) 14201.467 B/op [Average]
[info]   (min, avg, max) = (18120.267, 20916.863, 25318.561), stdev = 3688.076
[info]   CI (99.9%): [6715.396, 35118.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   17.504 ±(99.9%) 150.716 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17.504, 87.521), stdev = 39.141
[info]   CI (99.9%): [≈ 0, 168.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.400, 14.000), stdev = 5.595
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala
[info] # Run progress: 58.60% complete, ETA 00:33:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 259890.470 ops/s
[info] # Warmup Iteration   2: 286454.236 ops/s
[info] # Warmup Iteration   3: 293400.806 ops/s
[info] Iteration   1: 290245.135 ops/s
[info]                  ·gc.alloc.rate:            924.873 MB/sec
[info]                  ·gc.alloc.rate.norm:       5016.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.667 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3648.176 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 292036.704 ops/s
[info]                  ·gc.alloc.rate:            930.519 MB/sec
[info]                  ·gc.alloc.rate.norm:       5016.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.953 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5438.803 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 291214.168 ops/s
[info]                  ·gc.alloc.rate:                   928.107 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.188 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5454.208 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 21.601 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 297385.608 ops/s
[info]                  ·gc.alloc.rate:                                  947.975 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5016.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.100 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.527 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.395 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5404.486 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 296808.273 ops/s
[info]                  ·gc.alloc.rate:            945.753 MB/sec
[info]                  ·gc.alloc.rate.norm:       5016.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.629 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3609.860 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala":
[info]   293537.978 ±(99.9%) 12770.533 ops/s [Average]
[info]   (min, avg, max) = (290245.135, 293537.978, 297385.608), stdev = 3316.467
[info]   CI (99.9%): [280767.444, 306308.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   935.445 ±(99.9%) 40.983 MB/sec [Average]
[info]   (min, avg, max) = (924.873, 935.445, 947.975), stdev = 10.643
[info]   CI (99.9%): [894.462, 976.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5016.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5016.001, 5016.001, 5016.001), stdev = 0.001
[info]   CI (99.9%): [5016.001, 5016.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.020 ±(99.9%) 0.172 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.100), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.105 ±(99.9%) 0.908 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.105, 0.527), stdev = 0.236
[info]   CI (99.9%): [≈ 0, 1.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   878.566 ±(99.9%) 710.118 MB/sec [Average]
[info]   (min, avg, max) = (672.667, 878.566, 1021.395), stdev = 184.415
[info]   CI (99.9%): [168.448, 1588.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   4711.106 ±(99.9%) 3804.683 B/op [Average]
[info]   (min, avg, max) = (3609.860, 4711.106, 5454.208), stdev = 988.064
[info]   CI (99.9%): [906.424, 8515.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   4.320 ±(99.9%) 37.198 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.320, 21.601), stdev = 9.660
[info]   CI (99.9%): [≈ 0, 41.518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 6.000, 10.000), stdev = 4.062
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 58.87% complete, ETA 00:32:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 294712.819 ops/s
[info] # Warmup Iteration   2: 308673.084 ops/s
[info] # Warmup Iteration   3: 322444.742 ops/s
[info] Iteration   1: 324077.287 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 324125.379 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 321667.262 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 322246.544 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 324597.497 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc":
[info]   323342.794 ±(99.9%) 4996.710 ops/s [Average]
[info]   (min, avg, max) = (321667.262, 323342.794, 324597.497), stdev = 1297.630
[info]   CI (99.9%): [318346.084, 328339.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson
[info] # Run progress: 59.14% complete, ETA 00:32:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 56866.736 ops/s
[info] # Warmup Iteration   2: 76693.986 ops/s
[info] # Warmup Iteration   3: 78469.385 ops/s
[info] Iteration   1: 78771.078 ops/s
[info]                  ·gc.alloc.rate:            1167.402 MB/sec
[info]                  ·gc.alloc.rate.norm:       23327.980 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.024 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 20163.131 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 78348.873 ops/s
[info]                  ·gc.alloc.rate:                   1161.014 MB/sec
[info]                  ·gc.alloc.rate.norm:              23328.031 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.240 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        27029.638 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 80.286 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   3: 77821.338 ops/s
[info]                  ·gc.alloc.rate:                                  1153.492 MB/sec
[info]                  ·gc.alloc.rate.norm:                             23328.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.146 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.943 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.171 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       20651.973 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 79223.907 ops/s
[info]                  ·gc.alloc.rate:                                  1174.080 MB/sec
[info]                  ·gc.alloc.rate.norm:                             23327.980 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.026 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.396 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       27049.780 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 79254.846 ops/s
[info]                  ·gc.alloc.rate:            1174.643 MB/sec
[info]                  ·gc.alloc.rate.norm:       23328.030 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.096 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 20278.634 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson":
[info]   78684.008 ±(99.9%) 2343.397 ops/s [Average]
[info]   (min, avg, max) = (77821.338, 78684.008, 79254.846), stdev = 608.573
[info]   CI (99.9%): [76340.611, 81027.405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1166.126 ±(99.9%) 34.613 MB/sec [Average]
[info]   (min, avg, max) = (1153.492, 1166.126, 1174.643), stdev = 8.989
[info]   CI (99.9%): [1131.514, 1200.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   23328.005 ±(99.9%) 0.098 B/op [Average]
[info]   (min, avg, max) = (23327.980, 23328.005, 23328.031), stdev = 0.025
[info]   CI (99.9%): [23327.907, 23328.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.029 ±(99.9%) 0.250 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.146), stdev = 0.065
[info]   CI (99.9%): [≈ 0, 0.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.594 ±(99.9%) 5.057 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.594, 2.943), stdev = 1.313
[info]   CI (99.9%): [≈ 0, 5.651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1151.585 ±(99.9%) 709.714 MB/sec [Average]
[info]   (min, avg, max) = (1009.024, 1151.585, 1361.396), stdev = 184.311
[info]   CI (99.9%): [441.871, 1861.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   23034.631 ±(99.9%) 14095.618 B/op [Average]
[info]   (min, avg, max) = (20163.131, 23034.631, 27049.780), stdev = 3660.587
[info]   CI (99.9%): [8939.014, 37130.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   16.057 ±(99.9%) 138.257 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16.057, 80.286), stdev = 35.905
[info]   CI (99.9%): [≈ 0, 154.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.400, 16.000), stdev = 6.229
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce
[info] # Run progress: 59.41% complete, ETA 00:32:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 45001.819 ops/s
[info] # Warmup Iteration   2: 69750.405 ops/s
[info] # Warmup Iteration   3: 69635.994 ops/s
[info] Iteration   1: 69885.436 ops/s
[info]                  ·gc.alloc.rate:                   1404.036 MB/sec
[info]                  ·gc.alloc.rate.norm:              31624.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1344.076 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        30273.493 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 15.002 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 70890.093 ops/s
[info]                  ·gc.alloc.rate:                                  1424.200 MB/sec
[info]                  ·gc.alloc.rate.norm:                             31624.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.133 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.953 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1357.375 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       30140.164 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                88.735 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 71049.668 ops/s
[info]                  ·gc.alloc.rate:            1427.732 MB/sec
[info]                  ·gc.alloc.rate.norm:       31624.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.674 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 30160.836 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 71031.583 ops/s
[info]                  ·gc.alloc.rate:            1427.310 MB/sec
[info]                  ·gc.alloc.rate.norm:       31624.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.655 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 30169.327 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 69432.343 ops/s
[info]                  ·gc.alloc.rate:                                  1395.412 MB/sec
[info]                  ·gc.alloc.rate.norm:                             31624.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.089 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.273 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       38578.344 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce":
[info]   70457.825 ±(99.9%) 2885.141 ops/s [Average]
[info]   (min, avg, max) = (69432.343, 70457.825, 71049.668), stdev = 749.262
[info]   CI (99.9%): [67572.684, 73342.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate":
[info]   1415.738 ±(99.9%) 57.742 MB/sec [Average]
[info]   (min, avg, max) = (1395.412, 1415.738, 1427.732), stdev = 14.996
[info]   CI (99.9%): [1357.996, 1473.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   31624.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (31624.006, 31624.006, 31624.006), stdev = 0.001
[info]   CI (99.9%): [31624.005, 31624.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.027 ±(99.9%) 0.227 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.133), stdev = 0.059
[info]   CI (99.9%): [≈ 0, 0.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.608 ±(99.9%) 5.049 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.608, 2.953), stdev = 1.311
[info]   CI (99.9%): [≈ 0, 5.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1425.411 ±(99.9%) 596.614 MB/sec [Average]
[info]   (min, avg, max) = (1344.076, 1425.411, 1702.273), stdev = 154.939
[info]   CI (99.9%): [828.796, 2022.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   31864.433 ±(99.9%) 14453.568 B/op [Average]
[info]   (min, avg, max) = (30140.164, 31864.433, 38578.344), stdev = 3753.546
[info]   CI (99.9%): [17410.865, 46318.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   20.747 ±(99.9%) 148.470 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 20.747, 88.735), stdev = 38.557
[info]   CI (99.9%): [≈ 0, 169.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 14.000), stdev = 4.506
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala
[info] # Run progress: 59.68% complete, ETA 00:32:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 42692.456 ops/s
[info] # Warmup Iteration   2: 79936.383 ops/s
[info] # Warmup Iteration   3: 80074.952 ops/s
[info] Iteration   1: 80246.875 ops/s
[info]                  ·gc.alloc.rate:            924.904 MB/sec
[info]                  ·gc.alloc.rate.norm:       18144.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.313 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13169.258 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 80588.907 ops/s
[info]                  ·gc.alloc.rate:            928.888 MB/sec
[info]                  ·gc.alloc.rate.norm:       18144.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.015 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19670.069 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   3: 78216.703 ops/s
[info]                  ·gc.alloc.rate:                   901.701 MB/sec
[info]                  ·gc.alloc.rate.norm:              18144.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1007.195 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        20266.741 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 93.828 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   4: 80547.437 ops/s
[info]                  ·gc.alloc.rate:                                  928.489 MB/sec
[info]                  ·gc.alloc.rate.norm:                             18144.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.133 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.593 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.747 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       13302.772 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 81026.172 ops/s
[info]                  ·gc.alloc.rate:                                  934.006 MB/sec
[info]                  ·gc.alloc.rate.norm:                             18144.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.110 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.078 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       19835.476 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala":
[info]   80125.219 ±(99.9%) 4245.422 ops/s [Average]
[info]   (min, avg, max) = (78216.703, 80125.219, 81026.172), stdev = 1102.523
[info]   CI (99.9%): [75879.797, 84370.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   923.598 ±(99.9%) 48.760 MB/sec [Average]
[info]   (min, avg, max) = (901.701, 923.598, 934.006), stdev = 12.663
[info]   CI (99.9%): [874.838, 972.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   18144.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (18144.005, 18144.005, 18144.005), stdev = 0.001
[info]   CI (99.9%): [18144.004, 18144.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.028 ±(99.9%) 0.226 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.133), stdev = 0.059
[info]   CI (99.9%): [≈ 0, 0.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.541 ±(99.9%) 4.422 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.541, 2.593), stdev = 1.148
[info]   CI (99.9%): [≈ 0, 4.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   877.470 ±(99.9%) 708.546 MB/sec [Average]
[info]   (min, avg, max) = (671.313, 877.470, 1021.078), stdev = 184.007
[info]   CI (99.9%): [168.923, 1586.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   17248.863 ±(99.9%) 14131.813 B/op [Average]
[info]   (min, avg, max) = (13169.258, 17248.863, 20266.741), stdev = 3669.987
[info]   CI (99.9%): [3117.050, 31380.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 8.030 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.663), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   18.766 ±(99.9%) 161.577 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 18.766, 93.828), stdev = 41.961
[info]   CI (99.9%): [≈ 0, 180.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.400, 14.000), stdev = 5.273
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala
[info] # Run progress: 59.95% complete, ETA 00:31:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 81087.652 ops/s
[info] # Warmup Iteration   2: 100813.768 ops/s
[info] # Warmup Iteration   3: 102639.838 ops/s
[info] Iteration   1: 101596.252 ops/s
[info]                  ·gc.alloc.rate:            1091.596 MB/sec
[info]                  ·gc.alloc.rate.norm:       16912.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.041 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 15632.985 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 100638.381 ops/s
[info]                  ·gc.alloc.rate:            1081.380 MB/sec
[info]                  ·gc.alloc.rate.norm:       16912.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.191 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 15783.021 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 99597.450 ops/s
[info]                  ·gc.alloc.rate:                                  1070.089 MB/sec
[info]                  ·gc.alloc.rate.norm:                             16912.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.115 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.813 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.052 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       16073.800 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                63.158 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 99926.023 ops/s
[info]                  ·gc.alloc.rate:                                  1073.653 MB/sec
[info]                  ·gc.alloc.rate.norm:                             16912.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.022 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.343 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.077 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       16083.838 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 100341.577 ops/s
[info]                  ·gc.alloc.rate:                                  1078.466 MB/sec
[info]                  ·gc.alloc.rate.norm:                             16912.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.009 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.141 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.897 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       21356.650 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala":
[info]   100419.936 ±(99.9%) 2956.489 ops/s [Average]
[info]   (min, avg, max) = (99597.450, 100419.936, 101596.252), stdev = 767.791
[info]   CI (99.9%): [97463.448, 103376.425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1079.037 ±(99.9%) 31.789 MB/sec [Average]
[info]   (min, avg, max) = (1070.089, 1079.037, 1091.596), stdev = 8.255
[info]   CI (99.9%): [1047.248, 1110.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   16912.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16912.004, 16912.004, 16912.004), stdev = 0.001
[info]   CI (99.9%): [16912.004, 16912.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.029 ±(99.9%) 0.188 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.115), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.459 ±(99.9%) 2.964 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.459, 1.813), stdev = 0.770
[info]   CI (99.9%): [≈ 0, 3.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1083.652 ±(99.9%) 599.276 MB/sec [Average]
[info]   (min, avg, max) = (1009.041, 1083.652, 1361.897), stdev = 155.630
[info]   CI (99.9%): [484.376, 1682.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   16986.059 ±(99.9%) 9437.298 B/op [Average]
[info]   (min, avg, max) = (15632.985, 16986.059, 21356.650), stdev = 2450.836
[info]   CI (99.9%): [7548.761, 26423.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   12.632 ±(99.9%) 108.762 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 12.632, 63.158), stdev = 28.245
[info]   CI (99.9%): [≈ 0, 121.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.400, 10.000), stdev = 3.782
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson
[info] # Run progress: 60.22% complete, ETA 00:31:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15034.153 ops/s
[info] # Warmup Iteration   2: 36817.936 ops/s
[info] # Warmup Iteration   3: 36526.954 ops/s
[info] Iteration   1: 37480.370 ops/s
[info]                  ·gc.alloc.rate:                                  1872.036 MB/sec
[info]                  ·gc.alloc.rate.norm:                             78615.577 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.085 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.589 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1692.458 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       71074.254 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                195.797 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        13.000 ms
[info] Iteration   2: 37554.353 ops/s
[info]                  ·gc.alloc.rate:                                  1875.669 MB/sec
[info]                  ·gc.alloc.rate.norm:                             78616.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.011 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.461 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.223 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       85596.901 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 37685.181 ops/s
[info]                  ·gc.alloc.rate:                                  1882.145 MB/sec
[info]                  ·gc.alloc.rate.norm:                             78616.012 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.009 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.383 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.748 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       71080.939 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 36927.137 ops/s
[info]                  ·gc.alloc.rate:                                  1844.939 MB/sec
[info]                  ·gc.alloc.rate.norm:                             78616.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.097 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.868 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       87050.092 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 37922.813 ops/s
[info]                  ·gc.alloc.rate:                                  1894.005 MB/sec
[info]                  ·gc.alloc.rate.norm:                             78616.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.010 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.435 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.770 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       70636.777 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson":
[info]   37513.971 ±(99.9%) 1419.524 ops/s [Average]
[info]   (min, avg, max) = (36927.137, 37513.971, 37922.813), stdev = 368.646
[info]   CI (99.9%): [36094.447, 38933.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1873.759 ±(99.9%) 69.882 MB/sec [Average]
[info]   (min, avg, max) = (1844.939, 1873.759, 1894.005), stdev = 18.148
[info]   CI (99.9%): [1803.877, 1943.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   78615.924 ±(99.9%) 0.747 B/op [Average]
[info]   (min, avg, max) = (78615.577, 78615.924, 78616.012), stdev = 0.194
[info]   CI (99.9%): [78615.177, 78616.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.024 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.002, 0.024, 0.085), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.993 ±(99.9%) 5.615 B/op [Average]
[info]   (min, avg, max) = (0.097, 0.993, 3.589), stdev = 1.458
[info]   CI (99.9%): [≈ 0, 6.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1836.213 ±(99.9%) 725.434 MB/sec [Average]
[info]   (min, avg, max) = (1692.458, 1836.213, 2042.868), stdev = 188.393
[info]   CI (99.9%): [1110.780, 2561.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   77087.793 ±(99.9%) 32532.409 B/op [Average]
[info]   (min, avg, max) = (70636.777, 77087.793, 87050.092), stdev = 8448.563
[info]   CI (99.9%): [44555.384, 109620.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   39.159 ±(99.9%) 337.174 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 39.159, 195.797), stdev = 87.563
[info]   CI (99.9%): [≈ 0, 376.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 13.000), stdev = 3.715
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce
[info] # Run progress: 60.48% complete, ETA 00:31:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 91391.182 ops/s
[info] # Warmup Iteration   2: 117386.342 ops/s
[info] # Warmup Iteration   3: 116133.302 ops/s
[info] Iteration   1: 118207.925 ops/s
[info]                  ·gc.alloc.rate:                   815.904 MB/sec
[info]                  ·gc.alloc.rate.norm:              10864.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.442 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        13427.704 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 8.869 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 117024.725 ops/s
[info]                  ·gc.alloc.rate:                   807.902 MB/sec
[info]                  ·gc.alloc.rate.norm:              10864.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.219 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        9039.448 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 8.959 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 116956.351 ops/s
[info]                  ·gc.alloc.rate:            807.151 MB/sec
[info]                  ·gc.alloc.rate.norm:       10864.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.984 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13580.617 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   4: 117931.545 ops/s
[info]                  ·gc.alloc.rate:                   814.312 MB/sec
[info]                  ·gc.alloc.rate.norm:              10864.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.009 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        8978.828 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 53.340 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 117281.113 ops/s
[info]                  ·gc.alloc.rate:                                  809.708 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10864.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.227 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.049 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.913 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9135.931 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce":
[info]   117480.332 ±(99.9%) 2156.710 ops/s [Average]
[info]   (min, avg, max) = (116956.351, 117480.332, 118207.925), stdev = 560.091
[info]   CI (99.9%): [115323.622, 119637.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate":
[info]   810.995 ±(99.9%) 15.050 MB/sec [Average]
[info]   (min, avg, max) = (807.151, 810.995, 815.904), stdev = 3.908
[info]   CI (99.9%): [795.946, 826.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   10864.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10864.003, 10864.004, 10864.004), stdev = 0.001
[info]   CI (99.9%): [10864.003, 10864.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.045 ±(99.9%) 0.391 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.045, 0.227), stdev = 0.102
[info]   CI (99.9%): [≈ 0, 0.437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.610 ±(99.9%) 5.251 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.610, 3.049), stdev = 1.364
[info]   CI (99.9%): [≈ 0, 5.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   808.713 ±(99.9%) 703.149 MB/sec [Average]
[info]   (min, avg, max) = (672.219, 808.713, 1008.984), stdev = 182.606
[info]   CI (99.9%): [105.564, 1511.862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   10832.506 ±(99.9%) 9396.027 B/op [Average]
[info]   (min, avg, max) = (8978.828, 10832.506, 13580.617), stdev = 2440.118
[info]   CI (99.9%): [1436.478, 20228.533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 6.440 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 3.998), stdev = 1.673
[info]   CI (99.9%): [≈ 0, 7.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   14.233 ±(99.9%) 85.911 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14.233, 53.340), stdev = 22.311
[info]   CI (99.9%): [≈ 0, 100.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.200, 12.000), stdev = 3.834
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala
[info] # Run progress: 60.75% complete, ETA 00:31:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 123615.560 ops/s
[info] # Warmup Iteration   2: 172517.694 ops/s
[info] # Warmup Iteration   3: 176644.627 ops/s
[info] Iteration   1: 177402.658 ops/s
[info]                  ·gc.alloc.rate:      263.263 MB/sec
[info]                  ·gc.alloc.rate.norm: 2336.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 169162.427 ops/s
[info]                  ·gc.alloc.rate:            251.028 MB/sec
[info]                  ·gc.alloc.rate.norm:       2336.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.652 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3123.492 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 171795.668 ops/s
[info]                  ·gc.alloc.rate:            254.964 MB/sec
[info]                  ·gc.alloc.rate.norm:       2336.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.701 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3075.719 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 174571.878 ops/s
[info]                  ·gc.alloc.rate:            259.083 MB/sec
[info]                  ·gc.alloc.rate.norm:       2336.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.698 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3026.800 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 178000.406 ops/s
[info]                  ·gc.alloc.rate:      264.158 MB/sec
[info]                  ·gc.alloc.rate.norm: 2336.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala":
[info]   174186.607 ±(99.9%) 14407.205 ops/s [Average]
[info]   (min, avg, max) = (169162.427, 174186.607, 178000.406), stdev = 3741.505
[info]   CI (99.9%): [159779.403, 188593.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   258.499 ±(99.9%) 21.385 MB/sec [Average]
[info]   (min, avg, max) = (251.028, 258.499, 264.158), stdev = 5.554
[info]   CI (99.9%): [237.114, 279.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   2336.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2336.002, 2336.002, 2336.003), stdev = 0.001
[info]   CI (99.9%): [2336.002, 2336.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   201.410 ±(99.9%) 707.985 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 201.410, 335.701), stdev = 183.861
[info]   CI (99.9%): [≈ 0, 909.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1845.202 ±(99.9%) 6487.481 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1845.202, 3123.492), stdev = 1684.778
[info]   CI (99.9%): [≈ 0, 8332.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 5.000), stdev = 2.588
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala
[info] # Run progress: 61.02% complete, ETA 00:31:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 699683.283 ops/s
[info] # Warmup Iteration   2: 782791.484 ops/s
[info] # Warmup Iteration   3: 792661.723 ops/s
[info] Iteration   1: 759479.152 ops/s
[info]                  ·gc.alloc.rate:            941.793 MB/sec
[info]                  ·gc.alloc.rate.norm:       1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.005 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2091.307 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 748874.416 ops/s
[info]                  ·gc.alloc.rate:            928.648 MB/sec
[info]                  ·gc.alloc.rate.norm:       1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.031 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2120.963 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 740623.163 ops/s
[info]                  ·gc.alloc.rate:                   918.464 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.723 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1429.731 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 8.493 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 752942.749 ops/s
[info]                  ·gc.alloc.rate:                                  933.851 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1952.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.170 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.355 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.235 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2134.657 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 748199.306 ops/s
[info]                  ·gc.alloc.rate:                                  927.847 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1952.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.111 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2148.210 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala":
[info]   750023.757 ±(99.9%) 26604.703 ops/s [Average]
[info]   (min, avg, max) = (740623.163, 750023.757, 759479.152), stdev = 6909.157
[info]   CI (99.9%): [723419.054, 776628.460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   930.120 ±(99.9%) 32.977 MB/sec [Average]
[info]   (min, avg, max) = (918.464, 930.120, 941.793), stdev = 8.564
[info]   CI (99.9%): [897.143, 963.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1952.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1952.001, 1952.001, 1952.001), stdev = 0.001
[info]   CI (99.9%): [1952.000, 1952.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.034 ±(99.9%) 0.292 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.034, 0.170), stdev = 0.076
[info]   CI (99.9%): [≈ 0, 0.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.071 ±(99.9%) 0.611 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.071, 0.355), stdev = 0.159
[info]   CI (99.9%): [≈ 0, 0.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   946.621 ±(99.9%) 590.050 MB/sec [Average]
[info]   (min, avg, max) = (672.723, 946.621, 1021.235), stdev = 153.234
[info]   CI (99.9%): [356.571, 1536.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1984.974 ±(99.9%) 1197.955 B/op [Average]
[info]   (min, avg, max) = (1429.731, 1984.974, 2148.210), stdev = 311.105
[info]   CI (99.9%): [787.019, 3182.929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.699 ±(99.9%) 14.626 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.699, 8.493), stdev = 3.798
[info]   CI (99.9%): [≈ 0, 16.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.800, 11.000), stdev = 3.768
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 61.29% complete, ETA 00:30:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 746605.586 ops/s
[info] # Warmup Iteration   2: 792963.336 ops/s
[info] # Warmup Iteration   3: 794049.588 ops/s
[info] Iteration   1: 794861.124 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 791503.995 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 791357.874 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 792531.465 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 792924.601 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc":
[info]   792635.812 ±(99.9%) 5432.150 ops/s [Average]
[info]   (min, avg, max) = (791357.874, 792635.812, 794861.124), stdev = 1410.712
[info]   CI (99.9%): [787203.662, 798067.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson
[info] # Run progress: 61.56% complete, ETA 00:30:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 138241.724 ops/s
[info] # Warmup Iteration   2: 187314.981 ops/s
[info] # Warmup Iteration   3: 197407.569 ops/s
[info] Iteration   1: 193642.441 ops/s
[info]                  ·gc.alloc.rate:            630.836 MB/sec
[info]                  ·gc.alloc.rate.norm:       5128.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.370 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5457.498 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 192424.273 ops/s
[info]                  ·gc.alloc.rate:            626.869 MB/sec
[info]                  ·gc.alloc.rate.norm:       5128.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.678 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2745.962 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 191097.584 ops/s
[info]                  ·gc.alloc.rate:            622.554 MB/sec
[info]                  ·gc.alloc.rate.norm:       5128.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.343 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5529.880 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 191036.464 ops/s
[info]                  ·gc.alloc.rate:            622.600 MB/sec
[info]                  ·gc.alloc.rate.norm:       5128.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.635 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5531.877 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 191413.934 ops/s
[info]                  ·gc.alloc.rate:            623.553 MB/sec
[info]                  ·gc.alloc.rate.norm:       5128.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.338 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5520.983 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson":
[info]   191922.939 ±(99.9%) 4276.710 ops/s [Average]
[info]   (min, avg, max) = (191036.464, 191922.939, 193642.441), stdev = 1110.648
[info]   CI (99.9%): [187646.229, 196199.649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   625.282 ±(99.9%) 13.748 MB/sec [Average]
[info]   (min, avg, max) = (622.554, 625.282, 630.836), stdev = 3.570
[info]   CI (99.9%): [611.534, 639.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5128.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5128.002, 5128.002, 5128.002), stdev = 0.001
[info]   CI (99.9%): [5128.002, 5128.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   604.273 ±(99.9%) 578.170 MB/sec [Average]
[info]   (min, avg, max) = (335.678, 604.273, 671.635), stdev = 150.149
[info]   CI (99.9%): [26.103, 1182.443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   4957.240 ±(99.9%) 4761.403 B/op [Average]
[info]   (min, avg, max) = (2745.962, 4957.240, 5531.877), stdev = 1236.521
[info]   CI (99.9%): [195.837, 9718.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.800, 9.000), stdev = 2.168
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce
[info] # Run progress: 61.83% complete, ETA 00:30:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 93262.232 ops/s
[info] # Warmup Iteration   2: 122565.588 ops/s
[info] # Warmup Iteration   3: 123739.407 ops/s
[info] Iteration   1: 125448.912 ops/s
[info]                  ·gc.alloc.rate:                                  1544.797 MB/sec
[info]                  ·gc.alloc.rate.norm:                             19384.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.034 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.423 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1688.404 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       21185.970 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                41.787 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        15.000 ms
[info] Iteration   2: 124296.349 ops/s
[info]                  ·gc.alloc.rate:                                  1530.588 MB/sec
[info]                  ·gc.alloc.rate.norm:                             19384.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.013 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.167 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.379 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       17241.072 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   3: 127293.373 ops/s
[info]                  ·gc.alloc.rate:                                  1567.517 MB/sec
[info]                  ·gc.alloc.rate.norm:                             19384.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.715 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       21043.504 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 127430.615 ops/s
[info]                  ·gc.alloc.rate:                                  1569.493 MB/sec
[info]                  ·gc.alloc.rate.norm:                             19384.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.601 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       16816.443 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 124725.077 ops/s
[info]                  ·gc.alloc.rate:                                  1536.708 MB/sec
[info]                  ·gc.alloc.rate.norm:                             19384.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.035 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.612 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       21476.706 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce":
[info]   125838.865 ±(99.9%) 5587.152 ops/s [Average]
[info]   (min, avg, max) = (124296.349, 125838.865, 127430.615), stdev = 1450.966
[info]   CI (99.9%): [120251.713, 131426.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate":
[info]   1549.821 ±(99.9%) 68.538 MB/sec [Average]
[info]   (min, avg, max) = (1530.588, 1549.821, 1569.493), stdev = 17.799
[info]   CI (99.9%): [1481.283, 1618.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   19384.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (19384.003, 19384.003, 19384.004), stdev = 0.001
[info]   CI (99.9%): [19384.003, 19384.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.010 ±(99.9%) 0.054 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.010, 0.034), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.130 ±(99.9%) 0.678 B/op [Average]
[info]   (min, avg, max) = (0.002, 0.130, 0.423), stdev = 0.176
[info]   CI (99.9%): [≈ 0, 0.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1563.142 ±(99.9%) 709.167 MB/sec [Average]
[info]   (min, avg, max) = (1361.379, 1563.142, 1702.612), stdev = 184.168
[info]   CI (99.9%): [853.975, 2272.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   19552.739 ±(99.9%) 8911.266 B/op [Average]
[info]   (min, avg, max) = (16816.443, 19552.739, 21476.706), stdev = 2314.227
[info]   CI (99.9%): [10641.473, 28464.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   8.357 ±(99.9%) 71.960 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.357, 41.787), stdev = 18.688
[info]   CI (99.9%): [≈ 0, 80.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 15.000), stdev = 5.050
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala
[info] # Run progress: 62.10% complete, ETA 00:30:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 98060.322 ops/s
[info] # Warmup Iteration   2: 161152.891 ops/s
[info] # Warmup Iteration   3: 165541.848 ops/s
[info] Iteration   1: 164126.876 ops/s
[info]                  ·gc.alloc.rate:            875.937 MB/sec
[info]                  ·gc.alloc.rate.norm:       8400.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.154 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9677.512 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 164274.015 ops/s
[info]                  ·gc.alloc.rate:            877.030 MB/sec
[info]                  ·gc.alloc.rate.norm:       8400.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.305 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9657.333 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   3: 164980.422 ops/s
[info]                  ·gc.alloc.rate:            880.387 MB/sec
[info]                  ·gc.alloc.rate.norm:       8400.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.687 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6418.284 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 165681.208 ops/s
[info]                  ·gc.alloc.rate:                                  884.219 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8400.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.111 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.059 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.153 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9662.866 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                37.968 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   5: 166208.512 ops/s
[info]                  ·gc.alloc.rate:                                  886.978 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8400.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.028 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.262 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.718 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6446.642 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala":
[info]   165054.207 ±(99.9%) 3443.925 ops/s [Average]
[info]   (min, avg, max) = (164126.876, 165054.207, 166208.512), stdev = 894.376
[info]   CI (99.9%): [161610.282, 168498.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   880.910 ±(99.9%) 18.043 MB/sec [Average]
[info]   (min, avg, max) = (875.937, 880.910, 886.978), stdev = 4.686
[info]   CI (99.9%): [862.867, 898.954] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   8400.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8400.002, 8400.003, 8400.003), stdev = 0.001
[info]   CI (99.9%): [8400.002, 8400.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.028 ±(99.9%) 0.186 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.111), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.264 ±(99.9%) 1.766 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.264, 1.059), stdev = 0.459
[info]   CI (99.9%): [≈ 0, 2.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   877.603 ±(99.9%) 706.405 MB/sec [Average]
[info]   (min, avg, max) = (672.687, 877.603, 1017.153), stdev = 183.451
[info]   CI (99.9%): [171.198, 1584.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   8372.527 ±(99.9%) 6819.768 B/op [Average]
[info]   (min, avg, max) = (6418.284, 8372.527, 9677.512), stdev = 1771.072
[info]   CI (99.9%): [1552.759, 15192.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   7.594 ±(99.9%) 65.383 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.594, 37.968), stdev = 16.980
[info]   CI (99.9%): [≈ 0, 72.977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 8.200, 13.000), stdev = 4.764
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala
[info] # Run progress: 62.37% complete, ETA 00:30:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 302246.103 ops/s
[info] # Warmup Iteration   2: 313395.403 ops/s
[info] # Warmup Iteration   3: 322925.442 ops/s
[info] Iteration   1: 322746.937 ops/s
[info]                  ·gc.alloc.rate:            626.772 MB/sec
[info]                  ·gc.alloc.rate.norm:       3056.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.227 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3287.378 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 322405.870 ops/s
[info]                  ·gc.alloc.rate:            625.869 MB/sec
[info]                  ·gc.alloc.rate.norm:       3056.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.984 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3290.936 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 316790.196 ops/s
[info]                  ·gc.alloc.rate:            615.099 MB/sec
[info]                  ·gc.alloc.rate.norm:       3056.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.127 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3349.269 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 323722.957 ops/s
[info]                  ·gc.alloc.rate:            628.519 MB/sec
[info]                  ·gc.alloc.rate.norm:       3056.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.041 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1638.769 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 322979.264 ops/s
[info]                  ·gc.alloc.rate:            627.270 MB/sec
[info]                  ·gc.alloc.rate.norm:       3056.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.275 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3285.006 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala":
[info]   321729.045 ±(99.9%) 10792.999 ops/s [Average]
[info]   (min, avg, max) = (316790.196, 321729.045, 323722.957), stdev = 2802.907
[info]   CI (99.9%): [310936.046, 332522.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   624.706 ±(99.9%) 21.005 MB/sec [Average]
[info]   (min, avg, max) = (615.099, 624.706, 628.519), stdev = 5.455
[info]   CI (99.9%): [603.701, 645.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3056.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3056.001, 3056.001, 3056.001), stdev = 0.001
[info]   CI (99.9%): [3056.001, 3056.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   606.731 ±(99.9%) 580.528 MB/sec [Average]
[info]   (min, avg, max) = (337.041, 606.731, 674.275), stdev = 150.761
[info]   CI (99.9%): [26.203, 1187.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   2970.272 ±(99.9%) 2868.004 B/op [Average]
[info]   (min, avg, max) = (1638.769, 2970.272, 3349.269), stdev = 744.812
[info]   CI (99.9%): [102.268, 5838.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 6.000), stdev = 1.342
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson
[info] # Run progress: 62.63% complete, ETA 00:29:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24910.026 ops/s
[info] # Warmup Iteration   2: 61981.453 ops/s
[info] # Warmup Iteration   3: 62492.684 ops/s
[info] Iteration   1: 64239.384 ops/s
[info]                  ·gc.alloc.rate:                                  2712.044 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66448.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.181 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2723.072 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       66718.216 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   2: 64311.720 ops/s
[info]                  ·gc.alloc.rate:                                  2714.631 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66448.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.104 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.661 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       66644.569 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 63050.115 ops/s
[info]                  ·gc.alloc.rate:                                  2662.690 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66448.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.188 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2723.927 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       67976.192 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   4: 64072.393 ops/s
[info]                  ·gc.alloc.rate:                                  2705.695 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66448.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.186 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2723.778 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       66892.087 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   5: 64237.394 ops/s
[info]                  ·gc.alloc.rate:                                  2712.002 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66448.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.009 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.225 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.988 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       66717.178 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson":
[info]   63982.201 ±(99.9%) 2034.627 ops/s [Average]
[info]   (min, avg, max) = (63050.115, 63982.201, 64311.720), stdev = 528.386
[info]   CI (99.9%): [61947.574, 66016.828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2701.412 ±(99.9%) 84.312 MB/sec [Average]
[info]   (min, avg, max) = (2662.690, 2701.412, 2714.631), stdev = 21.895
[info]   CI (99.9%): [2617.101, 2785.724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   66448.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (66448.006, 66448.006, 66448.007), stdev = 0.001
[info]   CI (99.9%): [66448.006, 66448.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.007 ±(99.9%) 0.007 MB/sec [Average]
[info]   (min, avg, max) = (0.004, 0.007, 0.009), stdev = 0.002
[info]   CI (99.9%): [≈ 10⁻⁴, 0.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.177 ±(99.9%) 0.170 B/op [Average]
[info]   (min, avg, max) = (0.104, 0.177, 0.225), stdev = 0.044
[info]   CI (99.9%): [0.007, 0.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2723.285 ±(99.9%) 2.090 MB/sec [Average]
[info]   (min, avg, max) = (2722.661, 2723.285, 2723.927), stdev = 0.543
[info]   CI (99.9%): [2721.196, 2725.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   66989.648 ±(99.9%) 2152.388 B/op [Average]
[info]   (min, avg, max) = (66644.569, 66989.648, 67976.192), stdev = 558.968
[info]   CI (99.9%): [64837.261, 69142.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.count":
[info]   40.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.000, 8.000), stdev = 0.001
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.600, 8.000), stdev = 0.548
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce
[info] # Run progress: 62.90% complete, ETA 00:29:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 126596.449 ops/s
[info] # Warmup Iteration   2: 164125.468 ops/s
[info] # Warmup Iteration   3: 169291.140 ops/s
[info] Iteration   1: 168246.026 ops/s
[info]                  ·gc.alloc.rate:            826.233 MB/sec
[info]                  ·gc.alloc.rate.norm:       7728.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.324 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9459.206 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 168415.003 ops/s
[info]                  ·gc.alloc.rate:            826.840 MB/sec
[info]                  ·gc.alloc.rate.norm:       7728.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.033 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6299.810 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 165785.118 ops/s
[info]                  ·gc.alloc.rate:            813.959 MB/sec
[info]                  ·gc.alloc.rate.norm:       7728.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.050 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9599.252 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 168533.586 ops/s
[info]                  ·gc.alloc.rate:                   827.539 MB/sec
[info]                  ·gc.alloc.rate.norm:              7728.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             674.123 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        6295.325 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 31.103 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 169803.980 ops/s
[info]                  ·gc.alloc.rate:                                  833.793 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7728.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.203 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.878 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.189 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9464.875 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce":
[info]   168156.743 ±(99.9%) 5631.255 ops/s [Average]
[info]   (min, avg, max) = (165785.118, 168156.743, 169803.980), stdev = 1462.419
[info]   CI (99.9%): [162525.488, 173787.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate":
[info]   825.673 ±(99.9%) 27.788 MB/sec [Average]
[info]   (min, avg, max) = (813.959, 825.673, 833.793), stdev = 7.217
[info]   CI (99.9%): [797.885, 853.461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   7728.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7728.002, 7728.002, 7728.003), stdev = 0.001
[info]   CI (99.9%): [7728.002, 7728.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.041 ±(99.9%) 0.349 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.041, 0.203), stdev = 0.091
[info]   CI (99.9%): [≈ 0, 0.389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.376 ±(99.9%) 3.233 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.376, 1.878), stdev = 0.840
[info]   CI (99.9%): [≈ 0, 3.609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   878.344 ±(99.9%) 718.195 MB/sec [Average]
[info]   (min, avg, max) = (674.033, 878.344, 1021.189), stdev = 186.513
[info]   CI (99.9%): [160.149, 1596.538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   8223.694 ±(99.9%) 6774.046 B/op [Average]
[info]   (min, avg, max) = (6295.325, 8223.694, 9599.252), stdev = 1759.198
[info]   CI (99.9%): [1449.648, 14997.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   6.221 ±(99.9%) 53.562 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.221, 31.103), stdev = 13.910
[info]   CI (99.9%): [≈ 0, 59.783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.400, 10.000), stdev = 2.881
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala
[info] # Run progress: 63.17% complete, ETA 00:29:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 191287.442 ops/s
[info] # Warmup Iteration   2: 288451.282 ops/s
[info] # Warmup Iteration   3: 277227.537 ops/s
[info] Iteration   1: 292258.260 ops/s
[info]                  ·gc.alloc.rate:                   288.135 MB/sec
[info]                  ·gc.alloc.rate.norm:              1552.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             335.648 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1807.927 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.587 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 291689.253 ops/s
[info]                  ·gc.alloc.rate:      287.587 MB/sec
[info]                  ·gc.alloc.rate.norm: 1552.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 285995.016 ops/s
[info]                  ·gc.alloc.rate:            281.979 MB/sec
[info]                  ·gc.alloc.rate.norm:       1552.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.355 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1851.286 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 282925.882 ops/s
[info]                  ·gc.alloc.rate:            278.982 MB/sec
[info]                  ·gc.alloc.rate.norm:       1552.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.397 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1871.405 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 286925.905 ops/s
[info]                  ·gc.alloc.rate:            282.909 MB/sec
[info]                  ·gc.alloc.rate.norm:       1552.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.376 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1845.313 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala":
[info]   287958.863 ±(99.9%) 15239.897 ops/s [Average]
[info]   (min, avg, max) = (282925.882, 287958.863, 292258.260), stdev = 3957.753
[info]   CI (99.9%): [272718.967, 303198.760] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   283.918 ±(99.9%) 14.961 MB/sec [Average]
[info]   (min, avg, max) = (278.982, 283.918, 288.135), stdev = 3.885
[info]   CI (99.9%): [268.958, 298.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1552.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1552.001, 1552.001, 1552.002), stdev = 0.001
[info]   CI (99.9%): [1552.001, 1552.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   268.955 ±(99.9%) 578.948 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 268.955, 336.397), stdev = 150.351
[info]   CI (99.9%): [≈ 0, 847.903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1475.186 ±(99.9%) 3176.679 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1475.186, 1871.405), stdev = 824.973
[info]   CI (99.9%): [≈ 0, 4651.865] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.717 ±(99.9%) 6.177 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.717, 3.587), stdev = 1.604
[info]   CI (99.9%): [≈ 0, 6.895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.400, 5.000), stdev = 1.949
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala
[info] # Run progress: 63.44% complete, ETA 00:29:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1088189.458 ops/s
[info] # Warmup Iteration   2: 1224643.150 ops/s
[info] # Warmup Iteration   3: 1236636.508 ops/s
[info] Iteration   1: 1231055.102 ops/s
[info]                  ·gc.alloc.rate:            913.624 MB/sec
[info]                  ·gc.alloc.rate.norm:       1168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.208 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1290.197 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 1229761.751 ops/s
[info]                  ·gc.alloc.rate:            912.443 MB/sec
[info]                  ·gc.alloc.rate.norm:       1168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.987 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1291.585 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 1244034.756 ops/s
[info]                  ·gc.alloc.rate:                   923.049 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.034 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1276.804 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 5.057 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 1219438.316 ops/s
[info]                  ·gc.alloc.rate:                                  904.871 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1168.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.120 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.155 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.734 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       878.685 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 1217696.374 ops/s
[info]                  ·gc.alloc.rate:                                  903.607 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1168.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.019 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.025 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.092 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1319.860 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala":
[info]   1228397.260 ±(99.9%) 40761.793 ops/s [Average]
[info]   (min, avg, max) = (1217696.374, 1228397.260, 1244034.756), stdev = 10585.708
[info]   CI (99.9%): [1187635.466, 1269159.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   911.519 ±(99.9%) 30.137 MB/sec [Average]
[info]   (min, avg, max) = (903.607, 911.519, 923.049), stdev = 7.827
[info]   CI (99.9%): [881.382, 941.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1168.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1168.000, 1168.000, 1168.000), stdev = 0.001
[info]   CI (99.9%): [1168.000, 1168.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.028 ±(99.9%) 0.201 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.120), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.036 ±(99.9%) 0.260 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.036, 0.155), stdev = 0.068
[info]   CI (99.9%): [≈ 0, 0.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   945.811 ±(99.9%) 570.951 MB/sec [Average]
[info]   (min, avg, max) = (680.734, 945.811, 1021.092), stdev = 148.274
[info]   CI (99.9%): [374.860, 1516.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1211.426 ±(99.9%) 718.790 B/op [Average]
[info]   (min, avg, max) = (878.685, 1211.426, 1319.860), stdev = 186.667
[info]   CI (99.9%): [492.637, 1930.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.011 ±(99.9%) 8.708 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.011, 5.057), stdev = 2.261
[info]   CI (99.9%): [≈ 0, 9.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.800, 10.000), stdev = 3.962
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 63.71% complete, ETA 00:28:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1071911.476 ops/s
[info] # Warmup Iteration   2: 1179912.823 ops/s
[info] # Warmup Iteration   3: 1197359.424 ops/s
[info] Iteration   1: 1197530.446 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1193119.716 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1188186.092 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1194221.128 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1193170.220 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc":
[info]   1193245.520 ±(99.9%) 12905.649 ops/s [Average]
[info]   (min, avg, max) = (1188186.092, 1193245.520, 1197530.446), stdev = 3351.556
[info]   CI (99.9%): [1180339.871, 1206151.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson
[info] # Run progress: 63.98% complete, ETA 00:28:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 163393.218 ops/s
[info] # Warmup Iteration   2: 305332.839 ops/s
[info] # Warmup Iteration   3: 297831.694 ops/s
[info] Iteration   1: 296908.119 ops/s
[info]                  ·gc.alloc.rate:                   810.329 MB/sec
[info]                  ·gc.alloc.rate.norm:              4296.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             671.373 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3559.319 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.531 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 297966.419 ops/s
[info]                  ·gc.alloc.rate:                   813.352 MB/sec
[info]                  ·gc.alloc.rate.norm:              4296.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1007.911 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5323.632 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.519 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   3: 298130.629 ops/s
[info]                  ·gc.alloc.rate:                   813.649 MB/sec
[info]                  ·gc.alloc.rate.norm:              4296.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.043 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3548.332 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.517 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 301422.686 ops/s
[info]                  ·gc.alloc.rate:                   822.963 MB/sec
[info]                  ·gc.alloc.rate.norm:              4296.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.961 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3512.969 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 17.391 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 309069.343 ops/s
[info]                  ·gc.alloc.rate:                                  843.505 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4296.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.074 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.375 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.370 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5196.781 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                3.392 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson":
[info]   300699.439 ±(99.9%) 19158.712 ops/s [Average]
[info]   (min, avg, max) = (296908.119, 300699.439, 309069.343), stdev = 4975.457
[info]   CI (99.9%): [281540.727, 319858.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   820.760 ±(99.9%) 52.249 MB/sec [Average]
[info]   (min, avg, max) = (810.329, 820.760, 843.505), stdev = 13.569
[info]   CI (99.9%): [768.511, 873.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4296.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4296.001, 4296.001, 4296.001), stdev = 0.001
[info]   CI (99.9%): [4296.001, 4296.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.015 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.074), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.075 ±(99.9%) 0.645 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.075, 0.375), stdev = 0.168
[info]   CI (99.9%): [≈ 0, 0.720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   808.932 ±(99.9%) 721.542 MB/sec [Average]
[info]   (min, avg, max) = (671.373, 808.932, 1020.370), stdev = 187.382
[info]   CI (99.9%): [87.390, 1530.473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   4228.206 ±(99.9%) 3632.332 B/op [Average]
[info]   (min, avg, max) = (3512.969, 4228.206, 5323.632), stdev = 943.305
[info]   CI (99.9%): [595.875, 7860.538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.199 ±(99.9%) 4.590 MB/sec [Average]
[info]   (min, avg, max) = (0.666, 1.199, 3.331), stdev = 1.192
[info]   CI (99.9%): [≈ 0, 5.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   6.270 ±(99.9%) 23.940 B/op [Average]
[info]   (min, avg, max) = (3.392, 6.270, 17.391), stdev = 6.217
[info]   CI (99.9%): [≈ 0, 30.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 9.200, 14.000), stdev = 3.194
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce
[info] # Run progress: 64.25% complete, ETA 00:28:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2596.431 ops/s
[info] # Warmup Iteration   2: 4445.543 ops/s
[info] # Warmup Iteration   3: 4550.789 ops/s
[info] Iteration   1: 4598.530 ops/s
[info]                  ·gc.alloc.rate:                   901.776 MB/sec
[info]                  ·gc.alloc.rate.norm:              308592.096 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1007.848 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        344890.323 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 227.951 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 4630.783 ops/s
[info]                  ·gc.alloc.rate:            908.014 MB/sec
[info]                  ·gc.alloc.rate.norm:       308592.088 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.143 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 342281.285 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   3: 4538.579 ops/s
[info]                  ·gc.alloc.rate:            889.926 MB/sec
[info]                  ·gc.alloc.rate.norm:       308592.090 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.388 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 232811.588 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 4474.782 ops/s
[info]                  ·gc.alloc.rate:                                  877.361 MB/sec
[info]                  ·gc.alloc.rate.norm:                             308592.091 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.026 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 9.206 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1011.721 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       355850.524 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1639.864 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   5: 4551.130 ops/s
[info]                  ·gc.alloc.rate:                                  892.338 MB/sec
[info]                  ·gc.alloc.rate.norm:                             308592.097 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.084 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 29.215 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.913 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       353056.668 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce":
[info]   4558.761 ±(99.9%) 230.128 ops/s [Average]
[info]   (min, avg, max) = (4474.782, 4558.761, 4630.783), stdev = 59.764
[info]   CI (99.9%): [4328.633, 4788.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   893.883 ±(99.9%) 45.277 MB/sec [Average]
[info]   (min, avg, max) = (877.361, 893.883, 908.014), stdev = 11.758
[info]   CI (99.9%): [848.606, 939.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   308592.092 ±(99.9%) 0.014 B/op [Average]
[info]   (min, avg, max) = (308592.088, 308592.092, 308592.097), stdev = 0.004
[info]   CI (99.9%): [308592.078, 308592.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.022 ±(99.9%) 0.141 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.084), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   7.684 ±(99.9%) 48.823 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.684, 29.215), stdev = 12.679
[info]   CI (99.9%): [≈ 0, 56.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   943.803 ±(99.9%) 586.772 MB/sec [Average]
[info]   (min, avg, max) = (671.388, 943.803, 1020.913), stdev = 152.383
[info]   CI (99.9%): [357.030, 1530.575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   325778.077 ±(99.9%) 201275.589 B/op [Average]
[info]   (min, avg, max) = (232811.588, 325778.077, 355850.524), stdev = 52270.631
[info]   CI (99.9%): [124502.489, 527053.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.821 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.662), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   373.563 ±(99.9%) 2752.180 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 373.563, 1639.864), stdev = 714.732
[info]   CI (99.9%): [≈ 0, 3125.743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.200, 11.000), stdev = 3.347
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala
[info] # Run progress: 64.52% complete, ETA 00:28:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1788.532 ops/s
[info] # Warmup Iteration   2: 4055.946 ops/s
[info] # Warmup Iteration   3: 4068.451 ops/s
[info] Iteration   1: 4100.237 ops/s
[info]                  ·gc.alloc.rate:            763.775 MB/sec
[info]                  ·gc.alloc.rate.norm:       293224.115 B/op
[info]                  ·gc.churn.G1_Old_Gen:      669.999 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 257222.008 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 4188.268 ops/s
[info]                  ·gc.alloc.rate:                   780.299 MB/sec
[info]                  ·gc.alloc.rate.norm:              293224.097 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1005.837 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        377977.980 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 250.317 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   3: 4198.520 ops/s
[info]                  ·gc.alloc.rate:            782.409 MB/sec
[info]                  ·gc.alloc.rate.norm:       293224.105 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.167 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 251158.918 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 4223.770 ops/s
[info]                  ·gc.alloc.rate:            786.910 MB/sec
[info]                  ·gc.alloc.rate.norm:       293224.097 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.033 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 249672.771 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 4277.673 ops/s
[info]                  ·gc.alloc.rate:                                  796.965 MB/sec
[info]                  ·gc.alloc.rate.norm:                             293224.095 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.029 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 10.754 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1015.038 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       373458.711 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     5.328 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1960.413 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala":
[info]   4197.694 ±(99.9%) 248.538 ops/s [Average]
[info]   (min, avg, max) = (4100.237, 4197.694, 4277.673), stdev = 64.545
[info]   CI (99.9%): [3949.155, 4446.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   782.072 ±(99.9%) 46.497 MB/sec [Average]
[info]   (min, avg, max) = (763.775, 782.072, 796.965), stdev = 12.075
[info]   CI (99.9%): [735.575, 828.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   293224.102 ±(99.9%) 0.032 B/op [Average]
[info]   (min, avg, max) = (293224.095, 293224.102, 293224.115), stdev = 0.008
[info]   CI (99.9%): [293224.070, 293224.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.006 ±(99.9%) 0.050 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.029), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.151 ±(99.9%) 18.519 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.151, 10.754), stdev = 4.809
[info]   CI (99.9%): [≈ 0, 20.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   806.215 ±(99.9%) 717.981 MB/sec [Average]
[info]   (min, avg, max) = (669.999, 806.215, 1015.038), stdev = 186.457
[info]   CI (99.9%): [88.234, 1524.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   301898.078 ±(99.9%) 259789.879 B/op [Average]
[info]   (min, avg, max) = (249672.771, 301898.078, 377977.980), stdev = 67466.607
[info]   CI (99.9%): [42108.199, 561687.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.199 ±(99.9%) 8.958 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.199, 5.328), stdev = 2.326
[info]   CI (99.9%): [≈ 0, 10.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   442.146 ±(99.9%) 3294.728 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 442.146, 1960.413), stdev = 855.630
[info]   CI (99.9%): [≈ 0, 3736.874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   50.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 10.000, 14.000), stdev = 2.550
[info]   CI (99.9%): [50.000, 50.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala
[info] # Run progress: 64.78% complete, ETA 00:28:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19545.420 ops/s
[info] # Warmup Iteration   2: 30063.848 ops/s
[info] # Warmup Iteration   3: 30163.881 ops/s
[info] Iteration   1: 28941.957 ops/s
[info]                  ·gc.alloc.rate:            491.708 MB/sec
[info]                  ·gc.alloc.rate.norm:       26744.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.344 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18293.750 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 30327.712 ops/s
[info]                  ·gc.alloc.rate:            515.403 MB/sec
[info]                  ·gc.alloc.rate.norm:       26744.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.862 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 34914.508 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 30367.627 ops/s
[info]                  ·gc.alloc.rate:            515.934 MB/sec
[info]                  ·gc.alloc.rate.norm:       26744.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.345 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 17434.837 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 30439.077 ops/s
[info]                  ·gc.alloc.rate:            517.353 MB/sec
[info]                  ·gc.alloc.rate.norm:       26744.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.946 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 34787.208 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 30544.323 ops/s
[info]                  ·gc.alloc.rate:            519.053 MB/sec
[info]                  ·gc.alloc.rate.norm:       26744.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.407 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 17333.253 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala":
[info]   30124.139 ±(99.9%) 2564.384 ops/s [Average]
[info]   (min, avg, max) = (28941.957, 30124.139, 30544.323), stdev = 665.962
[info]   CI (99.9%): [27559.756, 32688.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   511.890 ±(99.9%) 43.784 MB/sec [Average]
[info]   (min, avg, max) = (491.708, 511.890, 519.053), stdev = 11.370
[info]   CI (99.9%): [468.106, 555.674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   26744.014 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (26744.013, 26744.014, 26744.018), stdev = 0.002
[info]   CI (99.9%): [26744.007, 26744.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   470.981 ±(99.9%) 709.788 MB/sec [Average]
[info]   (min, avg, max) = (336.344, 470.981, 672.946), stdev = 184.330
[info]   CI (99.9%): [≈ 0, 1180.769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   24552.711 ±(99.9%) 36228.352 B/op [Average]
[info]   (min, avg, max) = (17333.253, 24552.711, 34914.508), stdev = 9408.388
[info]   CI (99.9%): [≈ 0, 60781.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 7.000), stdev = 2.049
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson
[info] # Run progress: 65.05% complete, ETA 00:27:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1711.572 ops/s
[info] # Warmup Iteration   2: 3828.483 ops/s
[info] # Warmup Iteration   3: 3849.252 ops/s
[info] Iteration   1: 3977.036 ops/s
[info]                  ·gc.alloc.rate:                   1015.180 MB/sec
[info]                  ·gc.alloc.rate.norm:              401792.111 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1006.332 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        398290.180 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 263.594 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 3983.097 ops/s
[info]                  ·gc.alloc.rate:            1016.902 MB/sec
[info]                  ·gc.alloc.rate.norm:       401792.102 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.187 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 397953.542 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   3: 3856.014 ops/s
[info]                  ·gc.alloc.rate:                   984.173 MB/sec
[info]                  ·gc.alloc.rate.norm:              401792.114 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1010.196 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        412416.332 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      5.327 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2174.905 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   4: 3867.792 ops/s
[info]                  ·gc.alloc.rate:                                  987.291 MB/sec
[info]                  ·gc.alloc.rate.norm:                             401792.105 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.021 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 8.655 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.909 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       415473.509 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 3880.373 ops/s
[info]                  ·gc.alloc.rate:            990.637 MB/sec
[info]                  ·gc.alloc.rate.norm:       401792.105 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.939 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 414082.176 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson":
[info]   3912.863 ±(99.9%) 238.691 ops/s [Average]
[info]   (min, avg, max) = (3856.014, 3912.863, 3983.097), stdev = 61.987
[info]   CI (99.9%): [3674.171, 4151.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   998.836 ±(99.9%) 61.159 MB/sec [Average]
[info]   (min, avg, max) = (984.173, 998.836, 1016.902), stdev = 15.883
[info]   CI (99.9%): [937.678, 1059.995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   401792.108 ±(99.9%) 0.018 B/op [Average]
[info]   (min, avg, max) = (401792.102, 401792.108, 401792.114), stdev = 0.005
[info]   CI (99.9%): [401792.089, 401792.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.004 ±(99.9%) 0.037 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.731 ±(99.9%) 14.905 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.731, 8.655), stdev = 3.871
[info]   CI (99.9%): [≈ 0, 16.636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1013.113 ±(99.9%) 28.009 MB/sec [Average]
[info]   (min, avg, max) = (1006.332, 1013.113, 1020.939), stdev = 7.274
[info]   CI (99.9%): [985.104, 1041.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   407643.148 ±(99.9%) 33730.267 B/op [Average]
[info]   (min, avg, max) = (397953.542, 407643.148, 415473.509), stdev = 8759.643
[info]   CI (99.9%): [373912.881, 441373.415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.199 ±(99.9%) 8.956 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.199, 5.327), stdev = 2.326
[info]   CI (99.9%): [≈ 0, 10.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   487.700 ±(99.9%) 3658.333 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 487.700, 2174.905), stdev = 950.058
[info]   CI (99.9%): [≈ 0, 4146.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 9.000, 14.000), stdev = 5.612
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce
[info] # Run progress: 65.32% complete, ETA 00:27:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9494.425 ops/s
[info] # Warmup Iteration   2: 13562.370 ops/s
[info] # Warmup Iteration   3: 13615.155 ops/s
[info] Iteration   1: 13572.656 ops/s
[info]                  ·gc.alloc.rate:                   851.155 MB/sec
[info]                  ·gc.alloc.rate.norm:              98712.032 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1007.715 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        116868.913 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 77.243 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 13509.784 ops/s
[info]                  ·gc.alloc.rate:                   847.233 MB/sec
[info]                  ·gc.alloc.rate.norm:              98716.163 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1007.631 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        117405.128 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 77.598 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   3: 13584.935 ops/s
[info]                  ·gc.alloc.rate:            852.395 MB/sec
[info]                  ·gc.alloc.rate.norm:       98736.030 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.537 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 77786.621 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 13536.899 ops/s
[info]                  ·gc.alloc.rate:                                  849.201 MB/sec
[info]                  ·gc.alloc.rate.norm:                             98736.035 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.087 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 10.120 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1011.751 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       117635.668 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                542.100 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   5: 13629.432 ops/s
[info]                  ·gc.alloc.rate:                                  855.231 MB/sec
[info]                  ·gc.alloc.rate.norm:                             98736.038 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.151 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 17.379 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.924 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       78612.432 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce":
[info]   13566.741 ±(99.9%) 176.783 ops/s [Average]
[info]   (min, avg, max) = (13509.784, 13566.741, 13629.432), stdev = 45.910
[info]   CI (99.9%): [13389.958, 13743.524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   851.043 ±(99.9%) 11.757 MB/sec [Average]
[info]   (min, avg, max) = (847.233, 851.043, 855.231), stdev = 3.053
[info]   CI (99.9%): [839.286, 862.800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   98727.260 ±(99.9%) 46.606 B/op [Average]
[info]   (min, avg, max) = (98712.032, 98727.260, 98736.038), stdev = 12.103
[info]   CI (99.9%): [98680.653, 98773.866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.048 ±(99.9%) 0.265 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.048, 0.151), stdev = 0.069
[info]   CI (99.9%): [≈ 0, 0.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   5.500 ±(99.9%) 30.636 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.500, 17.379), stdev = 7.956
[info]   CI (99.9%): [≈ 0, 36.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   875.912 ±(99.9%) 702.052 MB/sec [Average]
[info]   (min, avg, max) = (671.537, 875.912, 1011.751), stdev = 182.321
[info]   CI (99.9%): [173.859, 1577.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   101661.752 ±(99.9%) 82487.647 B/op [Average]
[info]   (min, avg, max) = (77786.621, 101661.752, 117635.668), stdev = 21421.780
[info]   CI (99.9%): [19174.105, 184149.399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   1.199 ±(99.9%) 7.565 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.199, 4.662), stdev = 1.965
[info]   CI (99.9%): [≈ 0, 8.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   139.388 ±(99.9%) 879.590 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 139.388, 542.100), stdev = 228.427
[info]   CI (99.9%): [≈ 0, 1018.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.600, 12.000), stdev = 4.099
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala
[info] # Run progress: 65.59% complete, ETA 00:27:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9782.436 ops/s
[info] # Warmup Iteration   2: 15747.640 ops/s
[info] # Warmup Iteration   3: 15815.666 ops/s
[info] Iteration   1: 15999.953 ops/s
[info]                  ·gc.alloc.rate:            828.736 MB/sec
[info]                  ·gc.alloc.rate.norm:       81536.147 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.271 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 66043.777 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 15956.610 ops/s
[info]                  ·gc.alloc.rate:                   826.741 MB/sec
[info]                  ·gc.alloc.rate.norm:              81536.028 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1005.921 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        99207.378 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      1.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 131.401 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   3: 15901.460 ops/s
[info]                  ·gc.alloc.rate:            823.680 MB/sec
[info]                  ·gc.alloc.rate.norm:       81536.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.330 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 66454.864 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 16367.111 ops/s
[info]                  ·gc.alloc.rate:                   848.015 MB/sec
[info]                  ·gc.alloc.rate.norm:              81536.031 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1011.231 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        97229.147 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 448.356 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   5: 16330.986 ops/s
[info]                  ·gc.alloc.rate:                                  845.928 MB/sec
[info]                  ·gc.alloc.rate.norm:                             81536.025 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.073 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 6.991 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.637 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       65604.204 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala":
[info]   16111.224 ±(99.9%) 848.149 ops/s [Average]
[info]   (min, avg, max) = (15901.460, 16111.224, 16367.111), stdev = 220.262
[info]   CI (99.9%): [15263.074, 16959.373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   834.620 ±(99.9%) 44.058 MB/sec [Average]
[info]   (min, avg, max) = (823.680, 834.620, 848.015), stdev = 11.442
[info]   CI (99.9%): [790.561, 878.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   81536.048 ±(99.9%) 0.216 B/op [Average]
[info]   (min, avg, max) = (81536.009, 81536.048, 81536.147), stdev = 0.056
[info]   CI (99.9%): [81535.832, 81536.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.015 ±(99.9%) 0.125 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.073), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.398 ±(99.9%) 12.038 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.398, 6.991), stdev = 3.126
[info]   CI (99.9%): [≈ 0, 13.436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   808.078 ±(99.9%) 704.969 MB/sec [Average]
[info]   (min, avg, max) = (671.271, 808.078, 1011.231), stdev = 183.078
[info]   CI (99.9%): [103.109, 1513.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   78907.874 ±(99.9%) 67942.018 B/op [Average]
[info]   (min, avg, max) = (65604.204, 78907.874, 99207.378), stdev = 17644.326
[info]   CI (99.9%): [10965.856, 146849.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.199 ±(99.9%) 7.780 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.199, 4.663), stdev = 2.021
[info]   CI (99.9%): [≈ 0, 8.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   115.951 ±(99.9%) 748.318 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 115.951, 448.356), stdev = 194.336
[info]   CI (99.9%): [≈ 0, 864.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 9.000, 14.000), stdev = 4.416
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala
[info] # Run progress: 65.86% complete, ETA 00:27:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 235436.226 ops/s
[info] # Warmup Iteration   2: 252871.042 ops/s
[info] # Warmup Iteration   3: 268981.404 ops/s
[info] Iteration   1: 272529.598 ops/s
[info]                  ·gc.alloc.rate:            961.226 MB/sec
[info]                  ·gc.alloc.rate.norm:       5552.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.677 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3885.353 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 269013.207 ops/s
[info]                  ·gc.alloc.rate:            948.674 MB/sec
[info]                  ·gc.alloc.rate.norm:       5552.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.867 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5904.276 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   3: 270619.520 ops/s
[info]                  ·gc.alloc.rate:                   954.529 MB/sec
[info]                  ·gc.alloc.rate.norm:              5552.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.435 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5865.542 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 27.119 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 267743.337 ops/s
[info]                  ·gc.alloc.rate:                                  944.351 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5552.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.127 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.748 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.059 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6002.984 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 273241.461 ops/s
[info]                  ·gc.alloc.rate:                                  963.734 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5552.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.049 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5882.189 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala":
[info]   270629.425 ±(99.9%) 8901.393 ops/s [Average]
[info]   (min, avg, max) = (267743.337, 270629.425, 273241.461), stdev = 2311.663
[info]   CI (99.9%): [261728.032, 279530.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   954.503 ±(99.9%) 31.487 MB/sec [Average]
[info]   (min, avg, max) = (944.351, 954.503, 963.734), stdev = 8.177
[info]   CI (99.9%): [923.016, 985.990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5552.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5552.001, 5552.002, 5552.002), stdev = 0.001
[info]   CI (99.9%): [5552.001, 5552.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.025 ±(99.9%) 0.219 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.127), stdev = 0.057
[info]   CI (99.9%): [≈ 0, 0.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.150 ±(99.9%) 1.288 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.150, 0.748), stdev = 0.334
[info]   CI (99.9%): [≈ 0, 1.438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   946.417 ±(99.9%) 589.731 MB/sec [Average]
[info]   (min, avg, max) = (672.677, 946.417, 1021.059), stdev = 153.151
[info]   CI (99.9%): [356.687, 1536.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   5508.069 ±(99.9%) 3499.047 B/op [Average]
[info]   (min, avg, max) = (3885.353, 5508.069, 6002.984), stdev = 908.691
[info]   CI (99.9%): [2009.022, 9007.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 8.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.663), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   5.424 ±(99.9%) 46.701 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.424, 27.119), stdev = 12.128
[info]   CI (99.9%): [≈ 0, 52.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.800, 11.000), stdev = 3.768
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 66.13% complete, ETA 00:27:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 262676.893 ops/s
[info] # Warmup Iteration   2: 289538.940 ops/s
[info] # Warmup Iteration   3: 290251.761 ops/s
[info] Iteration   1: 290883.888 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 290792.708 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 290063.091 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 291153.610 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 290962.603 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   290771.180 ±(99.9%) 1607.907 ops/s [Average]
[info]   (min, avg, max) = (290063.091, 290771.180, 291153.610), stdev = 417.568
[info]   CI (99.9%): [289163.273, 292379.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson
[info] # Run progress: 66.40% complete, ETA 00:26:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9595.462 ops/s
[info] # Warmup Iteration   2: 14820.144 ops/s
[info] # Warmup Iteration   3: 14988.902 ops/s
[info] Iteration   1: 14891.953 ops/s
[info]                  ·gc.alloc.rate:                   846.549 MB/sec
[info]                  ·gc.alloc.rate.norm:              89464.030 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1005.865 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        106300.756 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 70.398 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   2: 14824.377 ops/s
[info]                  ·gc.alloc.rate:            832.413 MB/sec
[info]                  ·gc.alloc.rate.norm:       88388.943 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.349 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 71286.478 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 14413.729 ops/s
[info]                  ·gc.alloc.rate:            800.240 MB/sec
[info]                  ·gc.alloc.rate.norm:       87392.047 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.059 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 109978.282 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   4: 14768.469 ops/s
[info]                  ·gc.alloc.rate:                   819.936 MB/sec
[info]                  ·gc.alloc.rate.norm:              87392.030 B/op
[info]                  ·gc.churn.G1_Old_Gen:             671.320 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        71551.896 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 496.888 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 15071.846 ops/s
[info]                  ·gc.alloc.rate:                                  838.391 MB/sec
[info]                  ·gc.alloc.rate.norm:                             87529.663 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.221 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 23.098 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.353 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       106631.311 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson":
[info]   14794.075 ±(99.9%) 929.302 ops/s [Average]
[info]   (min, avg, max) = (14413.729, 14794.075, 15071.846), stdev = 241.337
[info]   CI (99.9%): [13864.772, 15723.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   827.506 ±(99.9%) 69.577 MB/sec [Average]
[info]   (min, avg, max) = (800.240, 827.506, 846.549), stdev = 18.069
[info]   CI (99.9%): [757.929, 897.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   88033.342 ±(99.9%) 3470.684 B/op [Average]
[info]   (min, avg, max) = (87392.030, 88033.342, 89464.030), stdev = 901.326
[info]   CI (99.9%): [84562.658, 91504.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.044 ±(99.9%) 0.381 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.044, 0.221), stdev = 0.099
[info]   CI (99.9%): [≈ 0, 0.425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   4.620 ±(99.9%) 39.777 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.620, 23.098), stdev = 10.330
[info]   CI (99.9%): [≈ 0, 44.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   875.389 ±(99.9%) 717.666 MB/sec [Average]
[info]   (min, avg, max) = (671.320, 875.389, 1021.353), stdev = 186.376
[info]   CI (99.9%): [157.724, 1593.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   93149.744 ±(99.9%) 76587.432 B/op [Average]
[info]   (min, avg, max) = (71286.478, 93149.744, 109978.282), stdev = 19889.513
[info]   CI (99.9%): [16562.313, 169737.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.821 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.662), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   113.457 ±(99.9%) 833.669 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 113.457, 496.888), stdev = 216.501
[info]   CI (99.9%): [≈ 0, 947.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.time":
[info]   52.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 10.400, 18.000), stdev = 5.550
[info]   CI (99.9%): [52.000, 52.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce
[info] # Run progress: 66.67% complete, ETA 00:26:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 536496.171 ops/s
[info] # Warmup Iteration   2: 829695.213 ops/s
[info] # Warmup Iteration   3: 847757.399 ops/s
[info] Iteration   1: 837244.112 ops/s
[info]                  ·gc.alloc.rate:                                  2710.453 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5096.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.718 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5119.061 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   2: 849035.681 ops/s
[info]                  ·gc.alloc.rate:                                  2748.492 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5096.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.589 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5047.975 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 845612.341 ops/s
[info]                  ·gc.alloc.rate:                                  2737.794 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5096.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.960 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5068.388 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 844562.503 ops/s
[info]                  ·gc.alloc.rate:                                  2734.189 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5096.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.764 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5074.706 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   5: 854571.141 ops/s
[info]                  ·gc.alloc.rate:                                  2766.531 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5096.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.705 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5015.273 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce":
[info]   846205.156 ±(99.9%) 24456.259 ops/s [Average]
[info]   (min, avg, max) = (837244.112, 846205.156, 854571.141), stdev = 6351.213
[info]   CI (99.9%): [821748.897, 870661.415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.alloc.rate":
[info]   2739.492 ±(99.9%) 79.065 MB/sec [Average]
[info]   (min, avg, max) = (2710.453, 2739.492, 2766.531), stdev = 20.533
[info]   CI (99.9%): [2660.427, 2818.556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5096.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5096.000, 5096.000, 5096.001), stdev = 0.001
[info]   CI (99.9%): [5096.000, 5096.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.003 ±(99.9%) 0.011 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.003, 0.007), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.006 ±(99.9%) 0.020 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.006, 0.013), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2722.747 ±(99.9%) 0.520 MB/sec [Average]
[info]   (min, avg, max) = (2722.589, 2722.747, 2722.960), stdev = 0.135
[info]   CI (99.9%): [2722.227, 2723.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   5065.080 ±(99.9%) 146.513 B/op [Average]
[info]   (min, avg, max) = (5015.273, 5065.080, 5119.061), stdev = 38.049
[info]   CI (99.9%): [4918.568, 5211.593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.count":
[info]   40.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.000, 8.000), stdev = 0.001
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.600, 10.000), stdev = 1.342
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala
[info] # Run progress: 66.94% complete, ETA 00:26:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 611354.649 ops/s
[info] # Warmup Iteration   2: 1403270.670 ops/s
[info] # Warmup Iteration   3: 1390136.428 ops/s
[info] Iteration   1: 1405828.494 ops/s
[info]                  ·gc.alloc.rate:                   1321.840 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1344.747 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1505.648 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.746 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   2: 1412114.477 ops/s
[info]                  ·gc.alloc.rate:                                  1327.610 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1480.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.146 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.162 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1352.644 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1507.908 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                5.197 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   3: 1389385.001 ops/s
[info]                  ·gc.alloc.rate:                                  1306.294 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1480.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.038 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.043 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.344 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1542.371 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 1422972.369 ops/s
[info]                  ·gc.alloc.rate:                                  1337.925 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1480.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.473 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1506.049 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 1428027.870 ops/s
[info]                  ·gc.alloc.rate:            1342.704 MB/sec
[info]                  ·gc.alloc.rate.norm:       1480.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.464 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1500.679 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala":
[info]   1411665.642 ±(99.9%) 58596.417 ops/s [Average]
[info]   (min, avg, max) = (1389385.001, 1411665.642, 1428027.870), stdev = 15217.303
[info]   CI (99.9%): [1353069.225, 1470262.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1327.275 ±(99.9%) 55.177 MB/sec [Average]
[info]   (min, avg, max) = (1306.294, 1327.275, 1342.704), stdev = 14.329
[info]   CI (99.9%): [1272.097, 1382.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1480.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1480.000, 1480.000, 1480.000), stdev = 0.001
[info]   CI (99.9%): [1480.000, 1480.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.037 ±(99.9%) 0.243 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.146), stdev = 0.063
[info]   CI (99.9%): [≈ 0, 0.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.041 ±(99.9%) 0.270 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.041, 0.162), stdev = 0.070
[info]   CI (99.9%): [≈ 0, 0.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1356.334 ±(99.9%) 28.925 MB/sec [Average]
[info]   (min, avg, max) = (1344.747, 1356.334, 1361.473), stdev = 7.512
[info]   CI (99.9%): [1327.410, 1385.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1512.531 ±(99.9%) 65.054 B/op [Average]
[info]   (min, avg, max) = (1500.679, 1512.531, 1542.371), stdev = 16.894
[info]   CI (99.9%): [1447.477, 1577.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.821 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.662), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.189 ±(99.9%) 8.718 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.189, 5.197), stdev = 2.264
[info]   CI (99.9%): [≈ 0, 9.906] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.200, 18.000), stdev = 6.573
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala
[info] # Run progress: 67.20% complete, ETA 00:26:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7881819.631 ops/s
[info] # Warmup Iteration   2: 8430817.661 ops/s
[info] # Warmup Iteration   3: 8435043.812 ops/s
[info] Iteration   1: 8457778.934 ops/s
[info]                  ·gc.alloc.rate:                                  2106.815 MB/sec
[info]                  ·gc.alloc.rate.norm:                             392.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.011 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.583 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       380.049 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 8381211.068 ops/s
[info]                  ·gc.alloc.rate:                                  2087.843 MB/sec
[info]                  ·gc.alloc.rate.norm:                             392.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.774 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       383.538 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 8559771.025 ops/s
[info]                  ·gc.alloc.rate:                                  2131.964 MB/sec
[info]                  ·gc.alloc.rate.norm:                             392.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.398 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       375.532 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 8517874.259 ops/s
[info]                  ·gc.alloc.rate:            2121.187 MB/sec
[info]                  ·gc.alloc.rate.norm:       392.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2382.462 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 440.284 B/op
[info]                  ·gc.count:                 7.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   5: 8253509.864 ops/s
[info]                  ·gc.alloc.rate:            2056.148 MB/sec
[info]                  ·gc.alloc.rate.norm:       392.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2042.838 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 389.463 B/op
[info]                  ·gc.count:                 6.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala":
[info]   8434029.030 ±(99.9%) 466794.444 ops/s [Average]
[info]   (min, avg, max) = (8253509.864, 8434029.030, 8559771.025), stdev = 121225.035
[info]   CI (99.9%): [7967234.586, 8900823.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2100.791 ±(99.9%) 115.274 MB/sec [Average]
[info]   (min, avg, max) = (2056.148, 2100.791, 2131.964), stdev = 29.936
[info]   CI (99.9%): [1985.517, 2216.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   392.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (392.000, 392.000, 392.000), stdev = 0.001
[info]   CI (99.9%): [392.000, 392.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.003 ±(99.9%) 0.018 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.011), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.001 ±(99.9%) 0.003 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.002), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   2110.611 ±(99.9%) 585.180 MB/sec [Average]
[info]   (min, avg, max) = (2042.398, 2110.611, 2382.462), stdev = 151.969
[info]   CI (99.9%): [1525.431, 2695.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   393.773 ±(99.9%) 102.019 B/op [Average]
[info]   (min, avg, max) = (375.532, 393.773, 440.284), stdev = 26.494
[info]   CI (99.9%): [291.754, 495.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 11.000), stdev = 2.683
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson
[info] # Run progress: 67.47% complete, ETA 00:25:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 38313.974 ops/s
[info] # Warmup Iteration   2: 290472.454 ops/s
[info] # Warmup Iteration   3: 292140.615 ops/s
[info] Iteration   1: 289447.049 ops/s
[info]                  ·gc.alloc.rate:                   1781.510 MB/sec
[info]                  ·gc.alloc.rate.norm:              9688.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1683.079 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        9152.729 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 25.354 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         21.000 ms
[info] Iteration   2: 294899.624 ops/s
[info]                  ·gc.alloc.rate:                                  1814.901 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9688.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.176 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.939 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.959 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       10900.040 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 298533.573 ops/s
[info]                  ·gc.alloc.rate:            1838.072 MB/sec
[info]                  ·gc.alloc.rate.norm:       9688.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1702.365 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8972.724 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 300822.825 ops/s
[info]                  ·gc.alloc.rate:                                  1851.417 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9688.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.679 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8904.460 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 300544.984 ops/s
[info]                  ·gc.alloc.rate:                                  1849.980 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9688.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.263 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       10694.950 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson":
[info]   296849.611 ±(99.9%) 18354.117 ops/s [Average]
[info]   (min, avg, max) = (289447.049, 296849.611, 300822.825), stdev = 4766.506
[info]   CI (99.9%): [278495.494, 315203.728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1827.176 ±(99.9%) 113.291 MB/sec [Average]
[info]   (min, avg, max) = (1781.510, 1827.176, 1851.417), stdev = 29.421
[info]   CI (99.9%): [1713.885, 1940.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   9688.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (9688.001, 9688.001, 9688.002), stdev = 0.001
[info]   CI (99.9%): [9688.001, 9688.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.036 ±(99.9%) 0.302 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.036, 0.176), stdev = 0.078
[info]   CI (99.9%): [≈ 0, 0.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.191 ±(99.9%) 1.612 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.191, 0.939), stdev = 0.419
[info]   CI (99.9%): [≈ 0, 1.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1834.269 ±(99.9%) 731.201 MB/sec [Average]
[info]   (min, avg, max) = (1683.079, 1834.269, 2042.263), stdev = 189.891
[info]   CI (99.9%): [1103.068, 2565.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   9724.980 ±(99.9%) 3796.460 B/op [Average]
[info]   (min, avg, max) = (8904.460, 9724.980, 10900.040), stdev = 985.929
[info]   CI (99.9%): [5928.520, 13521.440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   5.071 ±(99.9%) 43.661 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.071, 25.354), stdev = 11.339
[info]   CI (99.9%): [≈ 0, 48.732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 8.200, 21.000), stdev = 7.190
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce
[info] # Run progress: 67.74% complete, ETA 00:25:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 494765.489 ops/s
[info] # Warmup Iteration   2: 968060.483 ops/s
[info] # Warmup Iteration   3: 977827.682 ops/s
[info] Iteration   1: 1002617.523 ops/s
[info]                  ·gc.alloc.rate:                                  2206.588 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3464.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.096 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.151 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.262 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3206.034 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 986793.049 ops/s
[info]                  ·gc.alloc.rate:            2171.449 MB/sec
[info]                  ·gc.alloc.rate.norm:       3464.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2041.977 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3257.460 B/op
[info]                  ·gc.count:                 6.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 998629.741 ops/s
[info]                  ·gc.alloc.rate:                                  2197.697 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3464.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.583 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3755.417 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 991649.252 ops/s
[info]                  ·gc.alloc.rate:                                  2182.233 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3464.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.096 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3241.550 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 991754.294 ops/s
[info]                  ·gc.alloc.rate:                                  2183.254 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3464.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2383.338 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3781.458 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce":
[info]   994288.772 ±(99.9%) 24184.728 ops/s [Average]
[info]   (min, avg, max) = (986793.049, 994288.772, 1002617.523), stdev = 6280.697
[info]   CI (99.9%): [970104.044, 1018473.500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.alloc.rate":
[info]   2188.244 ±(99.9%) 53.389 MB/sec [Average]
[info]   (min, avg, max) = (2171.449, 2188.244, 2206.588), stdev = 13.865
[info]   CI (99.9%): [2134.856, 2241.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   3464.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3464.000, 3464.000, 3464.000), stdev = 0.001
[info]   CI (99.9%): [3464.000, 3464.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.020 ±(99.9%) 0.164 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.096), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.032 ±(99.9%) 0.257 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.032, 0.151), stdev = 0.067
[info]   CI (99.9%): [≈ 0, 0.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   2178.451 ±(99.9%) 718.881 MB/sec [Average]
[info]   (min, avg, max) = (2041.977, 2178.451, 2383.338), stdev = 186.691
[info]   CI (99.9%): [1459.570, 2897.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   3448.384 ±(99.9%) 1127.872 B/op [Average]
[info]   (min, avg, max) = (3206.034, 3448.384, 3781.458), stdev = 292.905
[info]   CI (99.9%): [2320.512, 4576.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.count":
[info]   32.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 7.000), stdev = 0.837
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala
[info] # Run progress: 68.01% complete, ETA 00:25:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_227b1689/target/5e31e36e/jackson-module-afterburner-2.9.4.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 1211344.742 ops/s
[info] # Warmup Iteration   2: 3258765.373 ops/s
[info] # Warmup Iteration   3: 3311818.782 ops/s
[info] Iteration   1: 3299391.896 ops/s
[info]                  ·gc.alloc.rate:                   1626.501 MB/sec
[info]                  ·gc.alloc.rate.norm:              776.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1682.337 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        802.640 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.224 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         20.000 ms
[info] Iteration   2: 3295975.590 ops/s
[info]                  ·gc.alloc.rate:                                  1625.045 MB/sec
[info]                  ·gc.alloc.rate.norm:                             776.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.069 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.033 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.992 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       812.744 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 3292963.501 ops/s
[info]                  ·gc.alloc.rate:            1623.952 MB/sec
[info]                  ·gc.alloc.rate.norm:       776.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.869 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 650.765 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 3307931.851 ops/s
[info]                  ·gc.alloc.rate:                                  1631.265 MB/sec
[info]                  ·gc.alloc.rate.norm:                             776.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.273 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       809.779 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 3300546.719 ops/s
[info]                  ·gc.alloc.rate:                                  1627.214 MB/sec
[info]                  ·gc.alloc.rate.norm:                             776.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.795 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       811.567 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala":
[info]   3299361.911 ±(99.9%) 21719.079 ops/s [Average]
[info]   (min, avg, max) = (3292963.501, 3299361.911, 3307931.851), stdev = 5640.376
[info]   CI (99.9%): [3277642.832, 3321080.991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1626.795 ±(99.9%) 10.787 MB/sec [Average]
[info]   (min, avg, max) = (1623.952, 1626.795, 1631.265), stdev = 2.801
[info]   CI (99.9%): [1616.008, 1637.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   776.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (776.000, 776.000, 776.000), stdev = 0.001
[info]   CI (99.9%): [776.000, 776.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.015 ±(99.9%) 0.117 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.069), stdev = 0.030
[info]   CI (99.9%): [≈ 0, 0.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.007 ±(99.9%) 0.056 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.033), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1630.053 ±(99.9%) 578.219 MB/sec [Average]
[info]   (min, avg, max) = (1361.869, 1630.053, 1702.273), stdev = 150.162
[info]   CI (99.9%): [1051.835, 2208.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   777.499 ±(99.9%) 273.222 B/op [Average]
[info]   (min, avg, max) = (650.765, 777.499, 812.744), stdev = 70.955
[info]   CI (99.9%): [504.276, 1050.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.445 ±(99.9%) 3.830 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.445, 2.224), stdev = 0.995
[info]   CI (99.9%): [≈ 0, 4.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.400, 20.000), stdev = 7.092
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala
[info] # Run progress: 68.28% complete, ETA 00:25:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10468101.535 ops/s
[info] # Warmup Iteration   2: 12884321.902 ops/s
[info] # Warmup Iteration   3: 13248673.738 ops/s
[info] Iteration   1: 13556772.532 ops/s
[info]                  ·gc.alloc.rate:            826.798 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.050 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 117.161 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 13768922.442 ops/s
[info]                  ·gc.alloc.rate:            839.676 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.690 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 76.909 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 13725728.125 ops/s
[info]                  ·gc.alloc.rate:            837.112 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.118 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 115.726 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 13444856.033 ops/s
[info]                  ·gc.alloc.rate:                   820.053 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.802 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        78.762 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.468 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 12669505.737 ops/s
[info]                  ·gc.alloc.rate:                                  772.776 MB/sec
[info]                  ·gc.alloc.rate.norm:                             96.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.212 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.026 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.807 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       84.575 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala":
[info]   13433156.974 ±(99.9%) 1718739.149 ops/s [Average]
[info]   (min, avg, max) = (12669505.737, 13433156.974, 13768922.442), stdev = 446351.099
[info]   CI (99.9%): [11714417.825, 15151896.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   819.283 ±(99.9%) 104.637 MB/sec [Average]
[info]   (min, avg, max) = (772.776, 819.283, 839.676), stdev = 27.174
[info]   CI (99.9%): [714.646, 923.920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   96.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (96.000, 96.000, 96.000), stdev = 0.001
[info]   CI (99.9%): [96.000, 96.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.042 ±(99.9%) 0.365 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.212), stdev = 0.095
[info]   CI (99.9%): [≈ 0, 0.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.005 ±(99.9%) 0.045 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.026), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   808.893 ±(99.9%) 703.812 MB/sec [Average]
[info]   (min, avg, max) = (672.690, 808.893, 1009.118), stdev = 182.778
[info]   CI (99.9%): [105.081, 1512.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   94.627 ±(99.9%) 77.484 B/op [Average]
[info]   (min, avg, max) = (76.909, 94.627, 117.161), stdev = 20.122
[info]   CI (99.9%): [17.142, 172.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.094 ±(99.9%) 0.806 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.094, 0.468), stdev = 0.209
[info]   CI (99.9%): [≈ 0, 0.899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.800, 10.000), stdev = 3.347
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson
[info] # Run progress: 68.55% complete, ETA 00:25:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 85896.728 ops/s
[info] # Warmup Iteration   2: 473480.929 ops/s
[info] # Warmup Iteration   3: 486069.312 ops/s
[info] Iteration   1: 474274.568 ops/s
[info]                  ·gc.alloc.rate:                   1643.860 MB/sec
[info]                  ·gc.alloc.rate.norm:              5456.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1678.362 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5570.512 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 13.263 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         24.000 ms
[info] Iteration   2: 484146.432 ops/s
[info]                  ·gc.alloc.rate:                                  1678.154 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5456.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.206 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.671 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.139 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5530.731 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                2.166 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 480022.245 ops/s
[info]                  ·gc.alloc.rate:            1664.365 MB/sec
[info]                  ·gc.alloc.rate.norm:       5456.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1702.239 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5580.157 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 481839.462 ops/s
[info]                  ·gc.alloc.rate:                                  1670.091 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5456.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.653 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5559.107 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 482890.305 ops/s
[info]                  ·gc.alloc.rate:            1673.790 MB/sec
[info]                  ·gc.alloc.rate.norm:       5456.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.685 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5546.930 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson":
[info]   480634.602 ±(99.9%) 14875.881 ops/s [Average]
[info]   (min, avg, max) = (474274.568, 480634.602, 484146.432), stdev = 3863.219
[info]   CI (99.9%): [465758.721, 495510.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1666.052 ±(99.9%) 51.589 MB/sec [Average]
[info]   (min, avg, max) = (1643.860, 1666.052, 1678.154), stdev = 13.397
[info]   CI (99.9%): [1614.463, 1717.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5456.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5456.001, 5456.001, 5456.001), stdev = 0.001
[info]   CI (99.9%): [5456.001, 5456.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.042 ±(99.9%) 0.355 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.206), stdev = 0.092
[info]   CI (99.9%): [≈ 0, 0.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.135 ±(99.9%) 1.153 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.135, 0.671), stdev = 0.299
[info]   CI (99.9%): [≈ 0, 1.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1697.016 ±(99.9%) 40.181 MB/sec [Average]
[info]   (min, avg, max) = (1678.362, 1697.016, 1702.239), stdev = 10.435
[info]   CI (99.9%): [1656.834, 1737.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   5557.488 ±(99.9%) 74.903 B/op [Average]
[info]   (min, avg, max) = (5530.731, 5557.488, 5580.157), stdev = 19.452
[info]   CI (99.9%): [5482.584, 5632.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   3.086 ±(99.9%) 22.203 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.086, 13.263), stdev = 5.766
[info]   CI (99.9%): [≈ 0, 25.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 8.600, 24.000), stdev = 8.620
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala
[info] # Run progress: 68.82% complete, ETA 00:24:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 905209.453 ops/s
[info] # Warmup Iteration   2: 1883280.456 ops/s
[info] # Warmup Iteration   3: 1937902.763 ops/s
[info] Iteration   1: 1957275.551 ops/s
[info]                  ·gc.alloc.rate:            1243.576 MB/sec
[info]                  ·gc.alloc.rate.norm:       1000.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.826 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 810.426 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   2: 1948546.008 ops/s
[info]                  ·gc.alloc.rate:                   1237.763 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1347.294 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1088.491 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.766 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   3: 1966802.755 ops/s
[info]                  ·gc.alloc.rate:                                  1249.677 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1000.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.070 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.056 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.608 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1089.568 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 1962141.754 ops/s
[info]                  ·gc.alloc.rate:                                  1247.073 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1000.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.490 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       819.110 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 1895156.824 ops/s
[info]                  ·gc.alloc.rate:            1203.973 MB/sec
[info]                  ·gc.alloc.rate.norm:       1000.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.372 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1130.733 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala":
[info]   1945984.578 ±(99.9%) 112461.852 ops/s [Average]
[info]   (min, avg, max) = (1895156.824, 1945984.578, 1966802.755), stdev = 29205.986
[info]   CI (99.9%): [1833522.727, 2058446.430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1236.412 ±(99.9%) 71.911 MB/sec [Average]
[info]   (min, avg, max) = (1203.973, 1236.412, 1249.677), stdev = 18.675
[info]   CI (99.9%): [1164.502, 1308.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1000.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1000.000, 1000.000, 1000.000), stdev = 0.001
[info]   CI (99.9%): [1000.000, 1000.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.014 ±(99.9%) 0.120 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.070), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.011 ±(99.9%) 0.096 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.056), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1219.918 ±(99.9%) 722.103 MB/sec [Average]
[info]   (min, avg, max) = (1007.826, 1219.918, 1361.608), stdev = 187.528
[info]   CI (99.9%): [497.815, 1942.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   987.666 ±(99.9%) 611.401 B/op [Average]
[info]   (min, avg, max) = (810.426, 987.666, 1130.733), stdev = 158.779
[info]   CI (99.9%): [376.265, 1599.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.753 ±(99.9%) 6.486 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.753, 3.766), stdev = 1.684
[info]   CI (99.9%): [≈ 0, 7.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.000, 16.000), stdev = 6.481
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala
[info] # Run progress: 69.09% complete, ETA 00:24:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7232151.617 ops/s
[info] # Warmup Iteration   2: 8587934.923 ops/s
[info] # Warmup Iteration   3: 8758230.138 ops/s
[info] Iteration   1: 8822025.660 ops/s
[info]                  ·gc.alloc.rate:            1165.707 MB/sec
[info]                  ·gc.alloc.rate.norm:       208.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.058 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 240.537 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 8837939.547 ops/s
[info]                  ·gc.alloc.rate:                   1167.779 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1011.041 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        180.082 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.593 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   3: 8631262.064 ops/s
[info]                  ·gc.alloc.rate:                                  1141.241 MB/sec
[info]                  ·gc.alloc.rate.norm:                             208.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.109 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.518 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       248.147 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 8338836.946 ops/s
[info]                  ·gc.alloc.rate:                                  1102.238 MB/sec
[info]                  ·gc.alloc.rate.norm:                             208.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.398 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       192.745 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 8338634.246 ops/s
[info]                  ·gc.alloc.rate:            1101.861 MB/sec
[info]                  ·gc.alloc.rate.norm:       208.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.062 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 192.748 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala":
[info]   8593739.692 ±(99.9%) 949498.404 ops/s [Average]
[info]   (min, avg, max) = (8338634.246, 8593739.692, 8837939.547), stdev = 246581.720
[info]   CI (99.9%): [7644241.288, 9543238.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1135.765 ±(99.9%) 125.146 MB/sec [Average]
[info]   (min, avg, max) = (1101.861, 1135.765, 1167.779), stdev = 32.500
[info]   CI (99.9%): [1010.620, 1260.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   208.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (208.000, 208.000, 208.000), stdev = 0.001
[info]   CI (99.9%): [208.000, 208.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.022 ±(99.9%) 0.188 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.109), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.004 ±(99.9%) 0.034 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.020), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1152.615 ±(99.9%) 711.081 MB/sec [Average]
[info]   (min, avg, max) = (1011.041, 1152.615, 1361.518), stdev = 184.666
[info]   CI (99.9%): [441.534, 1863.697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   210.852 ±(99.9%) 119.843 B/op [Average]
[info]   (min, avg, max) = (180.082, 210.852, 248.147), stdev = 31.123
[info]   CI (99.9%): [91.009, 330.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.119 ±(99.9%) 1.021 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.119, 0.593), stdev = 0.265
[info]   CI (99.9%): [≈ 0, 1.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.800, 12.000), stdev = 4.868
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson
[info] # Run progress: 69.35% complete, ETA 00:24:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 84344.912 ops/s
[info] # Warmup Iteration   2: 376715.094 ops/s
[info] # Warmup Iteration   3: 389591.191 ops/s
[info] Iteration   1: 388126.057 ops/s
[info]                  ·gc.alloc.rate:                                  1785.194 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7240.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.027 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.109 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2023.518 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8206.541 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                18.909 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        22.000 ms
[info] Iteration   2: 396825.214 ops/s
[info]                  ·gc.alloc.rate:                                  1825.168 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7240.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.046 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.184 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.759 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6750.467 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 395917.348 ops/s
[info]                  ·gc.alloc.rate:                                  1820.960 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7240.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.729 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6765.946 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 393814.057 ops/s
[info]                  ·gc.alloc.rate:                                  1812.015 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7240.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.903 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8162.528 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 396878.839 ops/s
[info]                  ·gc.alloc.rate:                                  1825.691 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7240.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.024 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6749.582 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson":
[info]   394312.303 ±(99.9%) 14147.631 ops/s [Average]
[info]   (min, avg, max) = (388126.057, 394312.303, 396878.839), stdev = 3674.095
[info]   CI (99.9%): [380164.672, 408459.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1813.806 ±(99.9%) 65.102 MB/sec [Average]
[info]   (min, avg, max) = (1785.194, 1813.806, 1825.691), stdev = 16.907
[info]   CI (99.9%): [1748.703, 1878.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   7240.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7240.001, 7240.001, 7240.001), stdev = 0.001
[info]   CI (99.9%): [7240.001, 7240.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.016 ±(99.9%) 0.078 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.016, 0.046), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.063 ±(99.9%) 0.311 B/op [Average]
[info]   (min, avg, max) = (0.005, 0.063, 0.184), stdev = 0.081
[info]   CI (99.9%): [≈ 0, 0.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1834.386 ±(99.9%) 699.393 MB/sec [Average]
[info]   (min, avg, max) = (1701.729, 1834.386, 2042.903), stdev = 181.630
[info]   CI (99.9%): [1134.994, 2533.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   7327.013 ±(99.9%) 3015.009 B/op [Average]
[info]   (min, avg, max) = (6749.582, 7327.013, 8206.541), stdev = 782.988
[info]   CI (99.9%): [4312.004, 10342.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   3.782 ±(99.9%) 32.563 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.782, 18.909), stdev = 8.456
[info]   CI (99.9%): [≈ 0, 36.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 8.200, 22.000), stdev = 7.759
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala
[info] # Run progress: 69.62% complete, ETA 00:24:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_227b1689/target/5e31e36e/jackson-module-afterburner-2.9.4.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 1280119.092 ops/s
[info] # Warmup Iteration   2: 2228298.368 ops/s
[info] # Warmup Iteration   3: 2253598.351 ops/s
[info] Iteration   1: 2202703.066 ops/s
[info]                  ·gc.alloc.rate:            1164.215 MB/sec
[info]                  ·gc.alloc.rate.norm:       832.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.033 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 719.671 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 2259066.414 ops/s
[info]                  ·gc.alloc.rate:                   1193.920 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.589 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        938.389 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.249 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   3: 2297244.313 ops/s
[info]                  ·gc.alloc.rate:                                  1214.255 MB/sec
[info]                  ·gc.alloc.rate.norm:                             832.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.156 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.107 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.066 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       699.628 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 2261349.496 ops/s
[info]                  ·gc.alloc.rate:            1195.341 MB/sec
[info]                  ·gc.alloc.rate.norm:       832.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.491 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 947.647 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 2296258.962 ops/s
[info]                  ·gc.alloc.rate:            1213.701 MB/sec
[info]                  ·gc.alloc.rate.norm:       832.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.042 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 699.931 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala":
[info]   2263324.450 ±(99.9%) 148290.075 ops/s [Average]
[info]   (min, avg, max) = (2202703.066, 2263324.450, 2297244.313), stdev = 38510.462
[info]   CI (99.9%): [2115034.375, 2411614.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1196.287 ±(99.9%) 78.472 MB/sec [Average]
[info]   (min, avg, max) = (1164.215, 1196.287, 1214.255), stdev = 20.379
[info]   CI (99.9%): [1117.814, 1274.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   832.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (832.000, 832.000, 832.000), stdev = 0.001
[info]   CI (99.9%): [832.000, 832.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.031 ±(99.9%) 0.268 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.031, 0.156), stdev = 0.070
[info]   CI (99.9%): [≈ 0, 0.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.021 ±(99.9%) 0.184 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.107), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1151.444 ±(99.9%) 712.783 MB/sec [Average]
[info]   (min, avg, max) = (1007.033, 1151.444, 1361.491), stdev = 185.107
[info]   CI (99.9%): [438.662, 1864.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   801.053 ±(99.9%) 500.165 B/op [Average]
[info]   (min, avg, max) = (699.628, 801.053, 947.647), stdev = 129.891
[info]   CI (99.9%): [300.889, 1301.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.650 ±(99.9%) 5.594 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.650, 3.249), stdev = 1.453
[info]   CI (99.9%): [≈ 0, 6.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.600, 15.000), stdev = 5.899
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala
[info] # Run progress: 69.89% complete, ETA 00:24:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8013406.409 ops/s
[info] # Warmup Iteration   2: 6878447.855 ops/s
[info] # Warmup Iteration   3: 7001429.367 ops/s
[info] Iteration   1: 6976028.113 ops/s
[info]                  ·gc.alloc.rate:            1064.124 MB/sec
[info]                  ·gc.alloc.rate.norm:       240.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.997 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 303.573 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 7003157.703 ops/s
[info]                  ·gc.alloc.rate:                   1067.621 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.920 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        226.804 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.898 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 6804688.117 ops/s
[info]                  ·gc.alloc.rate:                                  1037.843 MB/sec
[info]                  ·gc.alloc.rate.norm:                             240.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.135 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.031 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.375 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       236.192 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 6823475.100 ops/s
[info]                  ·gc.alloc.rate:                                  1040.450 MB/sec
[info]                  ·gc.alloc.rate.norm:                             240.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.110 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       235.539 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 6815361.524 ops/s
[info]                  ·gc.alloc.rate:            1039.199 MB/sec
[info]                  ·gc.alloc.rate.norm:       240.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.110 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 235.822 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala":
[info]   6884542.112 ±(99.9%) 371996.624 ops/s [Average]
[info]   (min, avg, max) = (6804688.117, 6884542.112, 7003157.703), stdev = 96606.342
[info]   CI (99.9%): [6512545.487, 7256538.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1049.847 ±(99.9%) 56.642 MB/sec [Average]
[info]   (min, avg, max) = (1037.843, 1049.847, 1067.621), stdev = 14.710
[info]   CI (99.9%): [993.205, 1106.490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   240.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (240.000, 240.000, 240.000), stdev = 0.001
[info]   CI (99.9%): [240.000, 240.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.027 ±(99.9%) 0.232 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.135), stdev = 0.060
[info]   CI (99.9%): [≈ 0, 0.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.006 ±(99.9%) 0.054 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.031), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1083.703 ±(99.9%) 564.980 MB/sec [Average]
[info]   (min, avg, max) = (1008.920, 1083.703, 1345.997), stdev = 146.723
[info]   CI (99.9%): [518.723, 1648.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   247.586 ±(99.9%) 121.460 B/op [Average]
[info]   (min, avg, max) = (226.804, 247.586, 303.573), stdev = 31.543
[info]   CI (99.9%): [126.126, 369.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.180 ±(99.9%) 1.547 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.180, 0.898), stdev = 0.402
[info]   CI (99.9%): [≈ 0, 1.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.200, 12.000), stdev = 4.494
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson
[info] # Run progress: 70.16% complete, ETA 00:23:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 147491.283 ops/s
[info] # Warmup Iteration   2: 580311.391 ops/s
[info] # Warmup Iteration   3: 588858.163 ops/s
[info] Iteration   1: 584067.208 ops/s
[info]                  ·gc.alloc.rate:                   1692.221 MB/sec
[info]                  ·gc.alloc.rate.norm:              4560.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1683.341 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        4536.073 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      5.329 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 14.360 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         20.000 ms
[info] Iteration   2: 594832.513 ops/s
[info]                  ·gc.alloc.rate:                                  1723.132 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4560.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.093 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.247 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.688 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4503.254 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 598968.798 ops/s
[info]                  ·gc.alloc.rate:                                  1735.181 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4560.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.720 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4472.066 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 598455.370 ops/s
[info]                  ·gc.alloc.rate:                                  1733.642 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4560.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.707 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4476.003 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 585687.795 ops/s
[info]                  ·gc.alloc.rate:                                  1696.678 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4560.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.728 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4573.572 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson":
[info]   592402.337 ±(99.9%) 27243.328 ops/s [Average]
[info]   (min, avg, max) = (584067.208, 592402.337, 598968.798), stdev = 7075.006
[info]   CI (99.9%): [565159.009, 619645.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1716.171 ±(99.9%) 78.647 MB/sec [Average]
[info]   (min, avg, max) = (1692.221, 1716.171, 1735.181), stdev = 20.424
[info]   CI (99.9%): [1637.523, 1794.818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4560.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4560.001, 4560.001, 4560.001), stdev = 0.001
[info]   CI (99.9%): [4560.001, 4560.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.020 ±(99.9%) 0.159 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.093), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.052 ±(99.9%) 0.420 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.052, 0.247), stdev = 0.109
[info]   CI (99.9%): [≈ 0, 0.472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1698.037 ±(99.9%) 31.634 MB/sec [Average]
[info]   (min, avg, max) = (1683.341, 1698.037, 1701.728), stdev = 8.215
[info]   CI (99.9%): [1666.403, 1729.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   4512.194 ±(99.9%) 164.921 B/op [Average]
[info]   (min, avg, max) = (4472.066, 4512.194, 4573.572), stdev = 42.830
[info]   CI (99.9%): [4347.272, 4677.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 9.177 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 5.329), stdev = 2.383
[info]   CI (99.9%): [≈ 0, 10.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   2.872 ±(99.9%) 24.729 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.872, 14.360), stdev = 6.422
[info]   CI (99.9%): [≈ 0, 27.601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.800, 20.000), stdev = 6.834
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce
[info] # Run progress: 70.43% complete, ETA 00:23:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 369666.998 ops/s
[info] # Warmup Iteration   2: 666505.713 ops/s
[info] # Warmup Iteration   3: 674946.280 ops/s
[info] Iteration   1: 684314.719 ops/s
[info]                  ·gc.alloc.rate:                                  2244.282 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5160.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.153 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.352 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2383.530 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5480.157 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 667227.904 ops/s
[info]                  ·gc.alloc.rate:                                  2187.232 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5160.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.009 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4817.398 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 679931.732 ops/s
[info]                  ·gc.alloc.rate:                                  2229.165 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5160.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.808 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5515.648 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 685334.548 ops/s
[info]                  ·gc.alloc.rate:                                  2246.829 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5160.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.408 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4690.534 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 676368.953 ops/s
[info]                  ·gc.alloc.rate:            2217.313 MB/sec
[info]                  ·gc.alloc.rate.norm:       5160.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2382.630 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5544.716 B/op
[info]                  ·gc.count:                 7.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce":
[info]   678635.571 ±(99.9%) 28170.392 ops/s [Average]
[info]   (min, avg, max) = (667227.904, 678635.571, 685334.548), stdev = 7315.761
[info]   CI (99.9%): [650465.179, 706805.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate":
[info]   2224.964 ±(99.9%) 93.356 MB/sec [Average]
[info]   (min, avg, max) = (2187.232, 2224.964, 2246.829), stdev = 24.244
[info]   CI (99.9%): [2131.609, 2318.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5160.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5160.001, 5160.001, 5160.001), stdev = 0.001
[info]   CI (99.9%): [5160.001, 5160.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.033 ±(99.9%) 0.260 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.153), stdev = 0.067
[info]   CI (99.9%): [≈ 0, 0.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.075 ±(99.9%) 0.597 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.075, 0.352), stdev = 0.155
[info]   CI (99.9%): [≈ 0, 0.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2246.677 ±(99.9%) 718.737 MB/sec [Average]
[info]   (min, avg, max) = (2042.009, 2246.677, 2383.530), stdev = 186.654
[info]   CI (99.9%): [1527.940, 2965.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   5209.690 ±(99.9%) 1613.623 B/op [Average]
[info]   (min, avg, max) = (4690.534, 5209.690, 5544.716), stdev = 419.053
[info]   CI (99.9%): [3596.067, 6823.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.count":
[info]   33.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.400, 10.000), stdev = 2.074
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava
[info] # Run progress: 70.70% complete, ETA 00:23:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.873 ops/s
[info] # Warmup Iteration   2: 5178743.540 ops/s
[info] # Warmup Iteration   3: 5388549.650 ops/s
[info] Iteration   1: 5459150.708 ops/s
[info]                  ·gc.alloc.rate:            333.005 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.753 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 96.216 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 5441068.345 ops/s
[info]                  ·gc.alloc.rate:            331.789 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.649 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 96.538 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 5397194.955 ops/s
[info]                  ·gc.alloc.rate:            329.175 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.712 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 97.323 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 5427380.858 ops/s
[info]                  ·gc.alloc.rate:            331.009 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.706 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 96.782 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 5411331.591 ops/s
[info]                  ·gc.alloc.rate:            330.119 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.580 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 97.006 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava":
[info]   5427225.291 ±(99.9%) 93637.127 ops/s [Average]
[info]   (min, avg, max) = (5397194.955, 5427225.291, 5459150.708), stdev = 24317.265
[info]   CI (99.9%): [5333588.164, 5520862.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   331.019 ±(99.9%) 5.693 MB/sec [Average]
[info]   (min, avg, max) = (329.175, 331.019, 333.005), stdev = 1.479
[info]   CI (99.9%): [325.326, 336.713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   96.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (96.000, 96.000, 96.000), stdev = 0.001
[info]   CI (99.9%): [96.000, 96.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   333.680 ±(99.9%) 0.258 MB/sec [Average]
[info]   (min, avg, max) = (333.580, 333.680, 333.753), stdev = 0.067
[info]   CI (99.9%): [333.421, 333.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   96.773 ±(99.9%) 1.637 B/op [Average]
[info]   (min, avg, max) = (96.216, 96.773, 97.323), stdev = 0.425
[info]   CI (99.9%): [95.136, 98.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala
[info] # Run progress: 70.97% complete, ETA 00:23:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 167204.722 ops/s
[info] # Warmup Iteration   2: 795136.105 ops/s
[info] # Warmup Iteration   3: 801991.310 ops/s
[info] Iteration   1: 802024.831 ops/s
[info]                  ·gc.alloc.rate:            994.511 MB/sec
[info]                  ·gc.alloc.rate.norm:       1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.988 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1980.416 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 798933.162 ops/s
[info]                  ·gc.alloc.rate:                   990.627 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1007.625 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1985.495 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.312 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   3: 773618.433 ops/s
[info]                  ·gc.alloc.rate:                   959.444 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.506 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2051.817 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 9.487 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   4: 784675.545 ops/s
[info]                  ·gc.alloc.rate:                                  973.253 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1952.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.275 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.552 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.269 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2048.303 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 806225.708 ops/s
[info]                  ·gc.alloc.rate:            1000.169 MB/sec
[info]                  ·gc.alloc.rate.norm:       1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.457 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1993.547 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala":
[info]   793095.536 ±(99.9%) 52249.187 ops/s [Average]
[info]   (min, avg, max) = (773618.433, 793095.536, 806225.708), stdev = 13568.948
[info]   CI (99.9%): [740846.349, 845344.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   983.601 ±(99.9%) 64.821 MB/sec [Average]
[info]   (min, avg, max) = (959.444, 983.601, 1000.169), stdev = 16.834
[info]   CI (99.9%): [918.780, 1048.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1952.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1952.001, 1952.001, 1952.001), stdev = 0.001
[info]   CI (99.9%): [1952.000, 1952.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.055 ±(99.9%) 0.474 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.055, 0.275), stdev = 0.123
[info]   CI (99.9%): [≈ 0, 0.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.110 ±(99.9%) 0.951 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.110, 0.552), stdev = 0.247
[info]   CI (99.9%): [≈ 0, 1.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1013.569 ±(99.9%) 27.462 MB/sec [Average]
[info]   (min, avg, max) = (1007.625, 1013.569, 1021.457), stdev = 7.132
[info]   CI (99.9%): [986.107, 1041.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   2011.915 ±(99.9%) 135.374 B/op [Average]
[info]   (min, avg, max) = (1980.416, 2011.915, 2051.817), stdev = 35.156
[info]   CI (99.9%): [1876.542, 2147.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.822 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.663), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   2.160 ±(99.9%) 15.923 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.160, 9.487), stdev = 4.135
[info]   CI (99.9%): [≈ 0, 18.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 9.400, 14.000), stdev = 5.857
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala
[info] # Run progress: 71.24% complete, ETA 00:22:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7415962.615 ops/s
[info] # Warmup Iteration   2: 7336656.307 ops/s
[info] # Warmup Iteration   3: 7429491.372 ops/s
[info] Iteration   1: 7432277.167 ops/s
[info]                  ·gc.alloc.rate:            339.933 MB/sec
[info]                  ·gc.alloc.rate.norm:       72.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.002 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 71.379 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 7459338.047 ops/s
[info]                  ·gc.alloc.rate:            341.224 MB/sec
[info]                  ·gc.alloc.rate.norm:       72.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.045 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 71.118 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   3: 7434702.426 ops/s
[info]                  ·gc.alloc.rate:            340.072 MB/sec
[info]                  ·gc.alloc.rate.norm:       72.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.013 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 71.353 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 7290484.887 ops/s
[info]                  ·gc.alloc.rate:            333.472 MB/sec
[info]                  ·gc.alloc.rate.norm:       72.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.018 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 72.766 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 7276913.661 ops/s
[info]                  ·gc.alloc.rate:            332.862 MB/sec
[info]                  ·gc.alloc.rate.norm:       72.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.021 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 72.900 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala":
[info]   7378743.238 ±(99.9%) 337077.827 ops/s [Average]
[info]   (min, avg, max) = (7276913.661, 7378743.238, 7459338.047), stdev = 87538.041
[info]   CI (99.9%): [7041665.411, 7715821.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   337.512 ±(99.9%) 15.419 MB/sec [Average]
[info]   (min, avg, max) = (332.862, 337.512, 341.224), stdev = 4.004
[info]   CI (99.9%): [322.093, 352.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   72.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (72.000, 72.000, 72.000), stdev = 0.001
[info]   CI (99.9%): [72.000, 72.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   337.020 ±(99.9%) 0.060 MB/sec [Average]
[info]   (min, avg, max) = (337.002, 337.020, 337.045), stdev = 0.016
[info]   CI (99.9%): [336.960, 337.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   71.903 ±(99.9%) 3.296 B/op [Average]
[info]   (min, avg, max) = (71.118, 71.903, 72.900), stdev = 0.856
[info]   CI (99.9%): [68.607, 75.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson
[info] # Run progress: 71.51% complete, ETA 00:22:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26028.304 ops/s
[info] # Warmup Iteration   2: 255172.264 ops/s
[info] # Warmup Iteration   3: 266626.296 ops/s
[info] Iteration   1: 269278.373 ops/s
[info]                  ·gc.alloc.rate:                   1489.169 MB/sec
[info]                  ·gc.alloc.rate.norm:              8704.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1344.232 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        7856.864 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.893 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   2: 264424.249 ops/s
[info]                  ·gc.alloc.rate:                                  1462.122 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8704.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.144 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.858 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1352.705 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8052.641 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                27.754 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   3: 268649.317 ops/s
[info]                  ·gc.alloc.rate:                                  1485.528 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8704.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.035 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.203 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.790 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9971.125 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 271309.251 ops/s
[info]                  ·gc.alloc.rate:                                  1500.263 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8704.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.493 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7898.907 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 270316.454 ops/s
[info]                  ·gc.alloc.rate:            1494.698 MB/sec
[info]                  ·gc.alloc.rate.norm:       8704.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.706 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9909.460 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson":
[info]   268795.529 ±(99.9%) 10186.866 ops/s [Average]
[info]   (min, avg, max) = (264424.249, 268795.529, 271309.251), stdev = 2645.497
[info]   CI (99.9%): [258608.662, 278982.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1486.356 ±(99.9%) 56.425 MB/sec [Average]
[info]   (min, avg, max) = (1462.122, 1486.356, 1500.263), stdev = 14.653
[info]   CI (99.9%): [1429.932, 1542.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   8704.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8704.002, 8704.002, 8704.002), stdev = 0.001
[info]   CI (99.9%): [8704.001, 8704.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.036 ±(99.9%) 0.240 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.036, 0.144), stdev = 0.062
[info]   CI (99.9%): [≈ 0, 0.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.213 ±(99.9%) 1.428 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.213, 0.858), stdev = 0.371
[info]   CI (99.9%): [≈ 0, 1.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1492.385 ±(99.9%) 736.316 MB/sec [Average]
[info]   (min, avg, max) = (1344.232, 1492.385, 1701.790), stdev = 191.219
[info]   CI (99.9%): [756.069, 2228.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   8737.799 ±(99.9%) 4237.069 B/op [Average]
[info]   (min, avg, max) = (7856.864, 8737.799, 9971.125), stdev = 1100.353
[info]   CI (99.9%): [4500.730, 12974.868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.821 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.662), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   6.329 ±(99.9%) 46.573 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.329, 27.754), stdev = 12.095
[info]   CI (99.9%): [≈ 0, 52.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 8.800, 19.000), stdev = 6.611
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce
[info] # Run progress: 71.77% complete, ETA 00:22:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4924.465 ops/s
[info] # Warmup Iteration   2: 6884.836 ops/s
[info] # Warmup Iteration   3: 7109.768 ops/s
[info] Iteration   1: 7140.313 ops/s
[info]                  ·gc.alloc.rate:                                  1718.375 MB/sec
[info]                  ·gc.alloc.rate.norm:                             378808.066 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.158 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 34.784 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1690.326 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       372624.739 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                880.910 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        13.000 ms
[info] Iteration   2: 6965.395 ops/s
[info]                  ·gc.alloc.rate:                                  1676.891 MB/sec
[info]                  ·gc.alloc.rate.norm:                             378808.059 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.034 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 7.654 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.278 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       384543.086 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 7011.393 ops/s
[info]                  ·gc.alloc.rate:                                  1687.477 MB/sec
[info]                  ·gc.alloc.rate.norm:                             378808.058 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.082 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 18.376 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.789 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       382020.773 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 7010.022 ops/s
[info]                  ·gc.alloc.rate:                                  1687.246 MB/sec
[info]                  ·gc.alloc.rate.norm:                             378808.058 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.103 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 23.223 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.798 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       382075.254 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 7120.916 ops/s
[info]                  ·gc.alloc.rate:                                  1713.636 MB/sec
[info]                  ·gc.alloc.rate.norm:                             378808.062 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.096 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 21.214 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.721 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       376174.063 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce":
[info]   7049.608 ±(99.9%) 294.716 ops/s [Average]
[info]   (min, avg, max) = (6965.395, 7049.608, 7140.313), stdev = 76.537
[info]   CI (99.9%): [6754.892, 7344.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   1696.725 ±(99.9%) 70.042 MB/sec [Average]
[info]   (min, avg, max) = (1676.891, 1696.725, 1718.375), stdev = 18.190
[info]   CI (99.9%): [1626.683, 1766.768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   378808.061 ±(99.9%) 0.013 B/op [Average]
[info]   (min, avg, max) = (378808.058, 378808.061, 378808.066), stdev = 0.003
[info]   CI (99.9%): [378808.047, 378808.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.095 ±(99.9%) 0.171 MB/sec [Average]
[info]   (min, avg, max) = (0.034, 0.095, 0.158), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   21.050 ±(99.9%) 37.529 B/op [Average]
[info]   (min, avg, max) = (7.654, 21.050, 34.784), stdev = 9.746
[info]   CI (99.9%): [≈ 0, 58.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1699.582 ±(99.9%) 19.944 MB/sec [Average]
[info]   (min, avg, max) = (1690.326, 1699.582, 1702.278), stdev = 5.179
[info]   CI (99.9%): [1679.638, 1719.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   379487.583 ±(99.9%) 18937.696 B/op [Average]
[info]   (min, avg, max) = (372624.739, 379487.583, 384543.086), stdev = 4918.060
[info]   CI (99.9%): [360549.887, 398425.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   176.182 ±(99.9%) 1516.979 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 176.182, 880.910), stdev = 393.955
[info]   CI (99.9%): [≈ 0, 1693.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 13.000), stdev = 3.715
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava
[info] # Run progress: 72.04% complete, ETA 00:22:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 363.793 ops/s
[info] # Warmup Iteration   2: 11362.369 ops/s
[info] # Warmup Iteration   3: 11367.914 ops/s
[info] Iteration   1: 11356.971 ops/s
[info]                  ·gc.alloc.rate:                   261.772 MB/sec
[info]                  ·gc.alloc.rate.norm:              36280.036 B/op
[info]                  ·gc.churn.G1_Old_Gen:             329.672 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        45690.592 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 461.521 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 11351.069 ops/s
[info]                  ·gc.alloc.rate:            261.573 MB/sec
[info]                  ·gc.alloc.rate.norm:       36280.036 B/op
[info]                  ·gc.churn.G1_Old_Gen:      332.955 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 46180.569 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 11329.887 ops/s
[info]                  ·gc.alloc.rate:                   261.154 MB/sec
[info]                  ·gc.alloc.rate.norm:              36280.039 B/op
[info]                  ·gc.churn.G1_Old_Gen:             333.036 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        46266.149 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 92.532 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 11447.212 ops/s
[info]                  ·gc.alloc.rate:      263.869 MB/sec
[info]                  ·gc.alloc.rate.norm: 36280.036 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 11395.683 ops/s
[info]                  ·gc.alloc.rate:            262.666 MB/sec
[info]                  ·gc.alloc.rate.norm:       36280.036 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.692 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 46090.242 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava":
[info]   11376.164 ±(99.9%) 178.220 ops/s [Average]
[info]   (min, avg, max) = (11329.887, 11376.164, 11447.212), stdev = 46.283
[info]   CI (99.9%): [11197.944, 11554.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   262.207 ±(99.9%) 4.162 MB/sec [Average]
[info]   (min, avg, max) = (261.154, 262.207, 263.869), stdev = 1.081
[info]   CI (99.9%): [258.045, 266.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   36280.036 ±(99.9%) 0.005 B/op [Average]
[info]   (min, avg, max) = (36280.036, 36280.036, 36280.039), stdev = 0.001
[info]   CI (99.9%): [36280.031, 36280.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   265.871 ±(99.9%) 572.339 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 265.871, 333.692), stdev = 148.635
[info]   CI (99.9%): [≈ 0, 838.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   36845.510 ±(99.9%) 79317.281 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 36845.510, 46266.149), stdev = 20598.446
[info]   CI (99.9%): [≈ 0, 116162.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.560 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.330), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   110.811 ±(99.9%) 770.535 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 110.811, 461.521), stdev = 200.106
[info]   CI (99.9%): [≈ 0, 881.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.800, 5.000), stdev = 2.168
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala
[info] # Run progress: 72.31% complete, ETA 00:22:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5700.011 ops/s
[info] # Warmup Iteration   2: 12557.580 ops/s
[info] # Warmup Iteration   3: 13010.717 ops/s
[info] Iteration   1: 13052.158 ops/s
[info]                  ·gc.alloc.rate:            330.820 MB/sec
[info]                  ·gc.alloc.rate.norm:       39888.031 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.740 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 40481.218 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 13072.486 ops/s
[info]                  ·gc.alloc.rate:            331.248 MB/sec
[info]                  ·gc.alloc.rate.norm:       39888.034 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.660 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 40419.297 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 13043.484 ops/s
[info]                  ·gc.alloc.rate:            330.543 MB/sec
[info]                  ·gc.alloc.rate.norm:       39888.031 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.690 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 40509.145 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 13064.431 ops/s
[info]                  ·gc.alloc.rate:            331.057 MB/sec
[info]                  ·gc.alloc.rate.norm:       39888.034 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.672 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 40444.043 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 13081.962 ops/s
[info]                  ·gc.alloc.rate:            331.495 MB/sec
[info]                  ·gc.alloc.rate.norm:       39888.031 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.679 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 40391.494 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala":
[info]   13062.904 ±(99.9%) 59.342 ops/s [Average]
[info]   (min, avg, max) = (13043.484, 13062.904, 13081.962), stdev = 15.411
[info]   CI (99.9%): [13003.562, 13122.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   331.033 ±(99.9%) 1.423 MB/sec [Average]
[info]   (min, avg, max) = (330.543, 331.033, 331.495), stdev = 0.370
[info]   CI (99.9%): [329.610, 332.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   39888.032 ±(99.9%) 0.005 B/op [Average]
[info]   (min, avg, max) = (39888.031, 39888.032, 39888.034), stdev = 0.001
[info]   CI (99.9%): [39888.027, 39888.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   335.688 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (335.660, 335.688, 335.740), stdev = 0.031
[info]   CI (99.9%): [335.569, 335.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   40449.039 ±(99.9%) 181.320 B/op [Average]
[info]   (min, avg, max) = (40391.494, 40449.039, 40509.145), stdev = 47.088
[info]   CI (99.9%): [40267.719, 40630.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala
[info] # Run progress: 72.58% complete, ETA 00:21:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19827.326 ops/s
[info] # Warmup Iteration   2: 24018.781 ops/s
[info] # Warmup Iteration   3: 24400.280 ops/s
[info] Iteration   1: 24426.191 ops/s
[info]                  ·gc.alloc.rate:            429.273 MB/sec
[info]                  ·gc.alloc.rate.norm:       27664.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.998 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 21717.468 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 24219.383 ops/s
[info]                  ·gc.alloc.rate:            425.597 MB/sec
[info]                  ·gc.alloc.rate.norm:       27664.024 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.934 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 43806.098 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 24448.580 ops/s
[info]                  ·gc.alloc.rate:            429.701 MB/sec
[info]                  ·gc.alloc.rate.norm:       27664.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.031 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 21697.929 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 24450.162 ops/s
[info]                  ·gc.alloc.rate:            429.694 MB/sec
[info]                  ·gc.alloc.rate.norm:       27664.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.998 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 21696.154 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 24432.580 ops/s
[info]                  ·gc.alloc.rate:            429.405 MB/sec
[info]                  ·gc.alloc.rate.norm:       27664.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.005 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 21711.247 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala":
[info]   24395.379 ±(99.9%) 380.899 ops/s [Average]
[info]   (min, avg, max) = (24219.383, 24395.379, 24450.162), stdev = 98.918
[info]   CI (99.9%): [24014.480, 24776.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   428.734 ±(99.9%) 6.791 MB/sec [Average]
[info]   (min, avg, max) = (425.597, 428.734, 429.701), stdev = 1.764
[info]   CI (99.9%): [421.943, 435.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   27664.018 ±(99.9%) 0.012 B/op [Average]
[info]   (min, avg, max) = (27664.017, 27664.018, 27664.024), stdev = 0.003
[info]   CI (99.9%): [27664.007, 27664.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   404.393 ±(99.9%) 580.207 MB/sec [Average]
[info]   (min, avg, max) = (336.998, 404.393, 673.934), stdev = 150.678
[info]   CI (99.9%): [≈ 0, 984.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   26125.779 ±(99.9%) 38058.234 B/op [Average]
[info]   (min, avg, max) = (21696.154, 26125.779, 43806.098), stdev = 9883.603
[info]   CI (99.9%): [≈ 0, 64184.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 6.000), stdev = 1.304
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson
[info] # Run progress: 72.85% complete, ETA 00:21:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 651.589 ops/s
[info] # Warmup Iteration   2: 2098.758 ops/s
[info] # Warmup Iteration   3: 2112.670 ops/s
[info] Iteration   1: 2090.030 ops/s
[info]                  ·gc.alloc.rate:            1305.258 MB/sec
[info]                  ·gc.alloc.rate.norm:       982984.490 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1342.413 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1010965.670 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  20.000 ms
[info] Iteration   2: 2153.291 ops/s
[info]                  ·gc.alloc.rate:                                  1345.162 MB/sec
[info]                  ·gc.alloc.rate.norm:                             982976.189 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.045 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 32.958 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1351.662 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       987725.489 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                3407.629 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        13.000 ms
[info] Iteration   3: 2172.548 ops/s
[info]                  ·gc.alloc.rate:                                  1356.785 MB/sec
[info]                  ·gc.alloc.rate.norm:                             982976.188 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.029 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 21.132 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.411 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       986327.356 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 2174.310 ops/s
[info]                  ·gc.alloc.rate:                                  1358.067 MB/sec
[info]                  ·gc.alloc.rate.norm:                             982976.188 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.065 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 47.360 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.444 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       985420.388 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 2171.383 ops/s
[info]                  ·gc.alloc.rate:                                  1355.946 MB/sec
[info]                  ·gc.alloc.rate.norm:                             982976.203 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.053 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 38.085 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.195 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       986781.466 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson":
[info]   2152.312 ±(99.9%) 137.996 ops/s [Average]
[info]   (min, avg, max) = (2090.030, 2152.312, 2174.310), stdev = 35.837
[info]   CI (99.9%): [2014.317, 2290.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1344.244 ±(99.9%) 86.233 MB/sec [Average]
[info]   (min, avg, max) = (1305.258, 1344.244, 1358.067), stdev = 22.395
[info]   CI (99.9%): [1258.010, 1430.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   982977.851 ±(99.9%) 14.289 B/op [Average]
[info]   (min, avg, max) = (982976.188, 982977.851, 982984.490), stdev = 3.711
[info]   CI (99.9%): [982963.562, 982992.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.038 ±(99.9%) 0.097 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.038, 0.065), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   27.907 ±(99.9%) 70.273 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 27.907, 47.360), stdev = 18.250
[info]   CI (99.9%): [≈ 0, 98.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1355.625 ±(99.9%) 32.710 MB/sec [Average]
[info]   (min, avg, max) = (1342.413, 1355.625, 1361.444), stdev = 8.495
[info]   CI (99.9%): [1322.915, 1388.335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   991444.074 ±(99.9%) 42143.275 B/op [Average]
[info]   (min, avg, max) = (985420.388, 991444.074, 1010965.670), stdev = 10944.475
[info]   CI (99.9%): [949300.799, 1033587.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 8.030 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.663), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   681.526 ±(99.9%) 5868.142 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 681.526, 3407.629), stdev = 1523.938
[info]   CI (99.9%): [≈ 0, 6549.668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 9.000, 20.000), stdev = 7.280
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce
[info] # Run progress: 73.12% complete, ETA 00:21:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4955.467 ops/s
[info] # Warmup Iteration   2: 7002.791 ops/s
[info] # Warmup Iteration   3: 7111.610 ops/s
[info] Iteration   1: 7006.012 ops/s
[info]                  ·gc.alloc.rate:                                  1539.014 MB/sec
[info]                  ·gc.alloc.rate.norm:                             345800.063 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.024 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.360 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1686.115 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       378851.945 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                897.753 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        16.000 ms
[info] Iteration   2: 7209.875 ops/s
[info]                  ·gc.alloc.rate:                                  1583.834 MB/sec
[info]                  ·gc.alloc.rate.norm:                             345800.057 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.094 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 20.536 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.162 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       297183.769 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 7061.886 ops/s
[info]                  ·gc.alloc.rate:                                  1551.539 MB/sec
[info]                  ·gc.alloc.rate.norm:                             345800.058 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.070 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 15.641 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.680 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       379262.695 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 7012.785 ops/s
[info]                  ·gc.alloc.rate:                                  1540.594 MB/sec
[info]                  ·gc.alloc.rate.norm:                             345800.058 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.063 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 14.183 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.376 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       305573.046 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 6914.996 ops/s
[info]                  ·gc.alloc.rate:                                  1519.120 MB/sec
[info]                  ·gc.alloc.rate.norm:                             345800.059 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.084 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 19.037 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.532 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       387322.782 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        13.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce":
[info]   7041.111 ±(99.9%) 416.743 ops/s [Average]
[info]   (min, avg, max) = (6914.996, 7041.111, 7209.875), stdev = 108.227
[info]   CI (99.9%): [6624.368, 7457.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate":
[info]   1546.820 ±(99.9%) 91.514 MB/sec [Average]
[info]   (min, avg, max) = (1519.120, 1546.820, 1583.834), stdev = 23.766
[info]   CI (99.9%): [1455.306, 1638.334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   345800.059 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (345800.057, 345800.059, 345800.063), stdev = 0.002
[info]   CI (99.9%): [345800.050, 345800.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.067 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (0.024, 0.067, 0.094), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   14.951 ±(99.9%) 22.858 B/op [Average]
[info]   (min, avg, max) = (5.360, 14.951, 20.536), stdev = 5.936
[info]   CI (99.9%): [≈ 0, 37.809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1562.373 ±(99.9%) 707.328 MB/sec [Average]
[info]   (min, avg, max) = (1361.162, 1562.373, 1701.680), stdev = 183.691
[info]   CI (99.9%): [855.045, 2269.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   349638.847 ±(99.9%) 170522.957 B/op [Average]
[info]   (min, avg, max) = (297183.769, 349638.847, 387322.782), stdev = 44284.270
[info]   CI (99.9%): [179115.890, 520161.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   179.551 ±(99.9%) 1545.986 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 179.551, 897.753), stdev = 401.488
[info]   CI (99.9%): [≈ 0, 1725.536] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 8.400, 16.000), stdev = 5.683
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava
[info] # Run progress: 73.39% complete, ETA 00:21:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3037.532 ops/s
[info] # Warmup Iteration   2: 51894.338 ops/s
[info] # Warmup Iteration   3: 51589.538 ops/s
[info] Iteration   1: 51768.691 ops/s
[info]                  ·gc.alloc.rate:            483.849 MB/sec
[info]                  ·gc.alloc.rate.norm:       14712.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.686 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10146.138 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 50479.324 ops/s
[info]                  ·gc.alloc.rate:                   471.783 MB/sec
[info]                  ·gc.alloc.rate.norm:              14712.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:             666.704 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        20790.409 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 20.770 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 50284.384 ops/s
[info]                  ·gc.alloc.rate:            470.208 MB/sec
[info]                  ·gc.alloc.rate.norm:       14712.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.854 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10445.728 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 50705.316 ops/s
[info]                  ·gc.alloc.rate:            473.946 MB/sec
[info]                  ·gc.alloc.rate.norm:       14712.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.715 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10359.012 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 50281.702 ops/s
[info]                  ·gc.alloc.rate:                   470.017 MB/sec
[info]                  ·gc.alloc.rate.norm:              14712.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:             666.798 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        20871.437 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 20.851 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava":
[info]   50703.883 ±(99.9%) 2388.068 ops/s [Average]
[info]   (min, avg, max) = (50281.702, 50703.883, 51768.691), stdev = 620.174
[info]   CI (99.9%): [48315.815, 53091.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   473.961 ±(99.9%) 22.133 MB/sec [Average]
[info]   (min, avg, max) = (470.017, 473.961, 483.849), stdev = 5.748
[info]   CI (99.9%): [451.828, 496.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   14712.008 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (14712.008, 14712.008, 14712.009), stdev = 0.001
[info]   CI (99.9%): [14712.007, 14712.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   466.952 ±(99.9%) 702.323 MB/sec [Average]
[info]   (min, avg, max) = (333.686, 466.952, 666.798), stdev = 182.391
[info]   CI (99.9%): [≈ 0, 1169.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   14522.545 ±(99.9%) 22179.085 B/op [Average]
[info]   (min, avg, max) = (10146.138, 14522.545, 20871.437), stdev = 5759.838
[info]   CI (99.9%): [≈ 0, 36701.629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   8.324 ±(99.9%) 43.890 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.324, 20.851), stdev = 11.398
[info]   CI (99.9%): [≈ 0, 52.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.000, 10.000), stdev = 2.739
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJavaPrealloc
[info] # Run progress: 73.66% complete, ETA 00:21:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3955.124 ops/s
[info] # Warmup Iteration   2: 53802.109 ops/s
[info] # Warmup Iteration   3: 53949.483 ops/s
[info] Iteration   1: 53854.520 ops/s
[info]                  ·gc.alloc.rate:            98.567 MB/sec
[info]                  ·gc.alloc.rate.norm:       2880.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      331.608 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9689.220 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 52378.640 ops/s
[info]                  ·gc.alloc.rate:      95.831 MB/sec
[info]                  ·gc.alloc.rate.norm: 2880.008 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 52539.189 ops/s
[info]                  ·gc.alloc.rate:      96.128 MB/sec
[info]                  ·gc.alloc.rate.norm: 2880.008 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 52508.539 ops/s
[info]                  ·gc.alloc.rate:      96.078 MB/sec
[info]                  ·gc.alloc.rate.norm: 2880.008 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 53065.309 ops/s
[info]                  ·gc.alloc.rate:                   97.087 MB/sec
[info]                  ·gc.alloc.rate.norm:              2880.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:             330.364 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        9799.960 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      2.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 79.032 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJavaPrealloc":
[info]   52869.239 ±(99.9%) 2349.324 ops/s [Average]
[info]   (min, avg, max) = (52378.640, 52869.239, 53854.520), stdev = 610.112
[info]   CI (99.9%): [50519.915, 55218.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJavaPrealloc:·gc.alloc.rate":
[info]   96.738 ±(99.9%) 4.346 MB/sec [Average]
[info]   (min, avg, max) = (95.831, 96.738, 98.567), stdev = 1.129
[info]   CI (99.9%): [92.392, 101.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJavaPrealloc:·gc.alloc.rate.norm":
[info]   2880.008 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2880.008, 2880.008, 2880.008), stdev = 0.001
[info]   CI (99.9%): [2880.007, 2880.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJavaPrealloc:·gc.churn.G1_Old_Gen":
[info]   132.394 ±(99.9%) 698.079 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 132.394, 331.608), stdev = 181.289
[info]   CI (99.9%): [≈ 0, 830.473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJavaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   3897.836 ±(99.9%) 20552.718 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3897.836, 9799.960), stdev = 5337.476
[info]   CI (99.9%): [≈ 0, 24450.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJavaPrealloc:·gc.churn.G1_Survivor_Space":
[info]   0.533 ±(99.9%) 4.588 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.533, 2.664), stdev = 1.191
[info]   CI (99.9%): [≈ 0, 5.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJavaPrealloc:·gc.churn.G1_Survivor_Space.norm":
[info]   15.806 ±(99.9%) 136.098 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15.806, 79.032), stdev = 35.344
[info]   CI (99.9%): [≈ 0, 151.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJavaPrealloc:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJavaPrealloc:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 6.000), stdev = 3.033
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala
[info] # Run progress: 73.92% complete, ETA 00:20:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_227b1689/target/5e31e36e/jackson-module-afterburner-2.9.4.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 19274.818 ops/s
[info] # Warmup Iteration   2: 36998.038 ops/s
[info] # Warmup Iteration   3: 37371.459 ops/s
[info] Iteration   1: 37537.981 ops/s
[info]                  ·gc.alloc.rate:            543.888 MB/sec
[info]                  ·gc.alloc.rate.norm:       22807.905 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.671 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14076.345 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 37112.344 ops/s
[info]                  ·gc.alloc.rate:            537.928 MB/sec
[info]                  ·gc.alloc.rate.norm:       22807.961 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.605 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 28475.796 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 37243.468 ops/s
[info]                  ·gc.alloc.rate:            539.651 MB/sec
[info]                  ·gc.alloc.rate.norm:       22807.872 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.694 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14187.825 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 37406.740 ops/s
[info]                  ·gc.alloc.rate:            542.135 MB/sec
[info]                  ·gc.alloc.rate.norm:       22807.769 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.544 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 28252.021 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 37306.629 ops/s
[info]                  ·gc.alloc.rate:            540.565 MB/sec
[info]                  ·gc.alloc.rate.norm:       22807.801 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.375 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 28326.980 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala":
[info]   37321.432 ±(99.9%) 621.454 ops/s [Average]
[info]   (min, avg, max) = (37112.344, 37321.432, 37537.981), stdev = 161.390
[info]   CI (99.9%): [36699.979, 37942.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   540.834 ±(99.9%) 8.809 MB/sec [Average]
[info]   (min, avg, max) = (537.928, 540.834, 543.888), stdev = 2.288
[info]   CI (99.9%): [532.024, 549.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   22807.862 ±(99.9%) 0.299 B/op [Average]
[info]   (min, avg, max) = (22807.769, 22807.862, 22807.961), stdev = 0.078
[info]   CI (99.9%): [22807.562, 22808.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   537.178 ±(99.9%) 708.283 MB/sec [Average]
[info]   (min, avg, max) = (335.671, 537.178, 671.605), stdev = 183.939
[info]   CI (99.9%): [≈ 0, 1245.461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   22663.794 ±(99.9%) 29992.144 B/op [Average]
[info]   (min, avg, max) = (14076.345, 22663.794, 28475.796), stdev = 7788.865
[info]   CI (99.9%): [≈ 0, 52655.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.600, 10.000), stdev = 2.408
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala
[info] # Run progress: 74.19% complete, ETA 00:20:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 49132.573 ops/s
[info] # Warmup Iteration   2: 56165.277 ops/s
[info] # Warmup Iteration   3: 57019.639 ops/s
[info] Iteration   1: 58129.682 ops/s
[info]                  ·gc.alloc.rate:            438.998 MB/sec
[info]                  ·gc.alloc.rate.norm:       11888.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.678 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18216.030 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 58882.627 ops/s
[info]                  ·gc.alloc.rate:            444.645 MB/sec
[info]                  ·gc.alloc.rate.norm:       11888.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.321 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8991.864 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 58849.777 ops/s
[info]                  ·gc.alloc.rate:            444.442 MB/sec
[info]                  ·gc.alloc.rate.norm:       11888.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.345 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8996.600 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 58827.896 ops/s
[info]                  ·gc.alloc.rate:            444.378 MB/sec
[info]                  ·gc.alloc.rate.norm:       11888.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.416 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8999.811 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 58270.353 ops/s
[info]                  ·gc.alloc.rate:            440.074 MB/sec
[info]                  ·gc.alloc.rate.norm:       11888.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.683 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18171.647 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala":
[info]   58592.067 ±(99.9%) 1393.373 ops/s [Average]
[info]   (min, avg, max) = (58129.682, 58592.067, 58882.627), stdev = 361.855
[info]   CI (99.9%): [57198.694, 59985.440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   442.508 ±(99.9%) 10.554 MB/sec [Average]
[info]   (min, avg, max) = (438.998, 442.508, 444.645), stdev = 2.741
[info]   CI (99.9%): [431.953, 453.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   11888.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11888.007, 11888.007, 11888.007), stdev = 0.001
[info]   CI (99.9%): [11888.006, 11888.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   470.889 ±(99.9%) 709.327 MB/sec [Average]
[info]   (min, avg, max) = (336.321, 470.889, 672.683), stdev = 184.210
[info]   CI (99.9%): [≈ 0, 1180.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   12675.190 ±(99.9%) 19398.923 B/op [Average]
[info]   (min, avg, max) = (8991.864, 12675.190, 18216.030), stdev = 5037.839
[info]   CI (99.9%): [≈ 0, 32074.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 11.000), stdev = 3.435
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 74.46% complete, ETA 00:20:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 66420.284 ops/s
[info] # Warmup Iteration   2: 75166.932 ops/s
[info] # Warmup Iteration   3: 75214.242 ops/s
[info] Iteration   1: 75136.439 ops/s
[info]                  ·gc.alloc.rate:      1.146 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 75312.310 ops/s
[info]                  ·gc.alloc.rate:      1.148 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 75216.069 ops/s
[info]                  ·gc.alloc.rate:      1.147 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 75141.231 ops/s
[info]                  ·gc.alloc.rate:      1.146 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 74988.196 ops/s
[info]                  ·gc.alloc.rate:      1.144 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   75158.849 ±(99.9%) 458.694 ops/s [Average]
[info]   (min, avg, max) = (74988.196, 75158.849, 75312.310), stdev = 119.121
[info]   CI (99.9%): [74700.155, 75617.543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1.146 ±(99.9%) 0.006 MB/sec [Average]
[info]   (min, avg, max) = (1.144, 1.146, 1.148), stdev = 0.002
[info]   CI (99.9%): [1.140, 1.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   24.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (24.005, 24.005, 24.005), stdev = 0.001
[info]   CI (99.9%): [24.005, 24.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson
[info] # Run progress: 74.73% complete, ETA 00:20:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1667.728 ops/s
[info] # Warmup Iteration   2: 4898.802 ops/s
[info] # Warmup Iteration   3: 5022.164 ops/s
[info] Iteration   1: 5038.437 ops/s
[info]                  ·gc.alloc.rate:                   1523.897 MB/sec
[info]                  ·gc.alloc.rate.norm:              476072.368 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1678.235 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        524288.000 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1248.305 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         26.000 ms
[info] Iteration   2: 5079.578 ops/s
[info]                  ·gc.alloc.rate:                                  1536.932 MB/sec
[info]                  ·gc.alloc.rate.norm:                             476071.421 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.061 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 19.032 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.137 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       421617.943 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                206.372 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 5064.460 ops/s
[info]                  ·gc.alloc.rate:                                  1532.111 MB/sec
[info]                  ·gc.alloc.rate.norm:                             476072.396 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.101 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 31.529 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.934 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       528841.627 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 5077.829 ops/s
[info]                  ·gc.alloc.rate:                                  1536.051 MB/sec
[info]                  ·gc.alloc.rate.norm:                             476071.795 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.045 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 13.869 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.557 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       421990.420 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 5149.148 ops/s
[info]                  ·gc.alloc.rate:                                  1557.391 MB/sec
[info]                  ·gc.alloc.rate.norm:                             476071.612 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.102 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 31.213 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.472 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       520114.867 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson":
[info]   5081.890 ±(99.9%) 158.035 ops/s [Average]
[info]   (min, avg, max) = (5038.437, 5081.890, 5149.148), stdev = 41.041
[info]   CI (99.9%): [4923.856, 5239.925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1537.276 ±(99.9%) 47.626 MB/sec [Average]
[info]   (min, avg, max) = (1523.897, 1537.276, 1557.391), stdev = 12.368
[info]   CI (99.9%): [1489.650, 1584.903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   476071.918 ±(99.9%) 1.709 B/op [Average]
[info]   (min, avg, max) = (476071.421, 476071.918, 476072.396), stdev = 0.444
[info]   CI (99.9%): [476070.209, 476073.627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.062 ±(99.9%) 0.165 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.102), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   19.129 ±(99.9%) 50.698 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 19.129, 31.529), stdev = 13.166
[info]   CI (99.9%): [≈ 0, 69.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1560.867 ±(99.9%) 702.311 MB/sec [Average]
[info]   (min, avg, max) = (1361.137, 1560.867, 1701.934), stdev = 182.388
[info]   CI (99.9%): [858.556, 2263.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   483370.571 ±(99.9%) 216741.201 B/op [Average]
[info]   (min, avg, max) = (421617.943, 483370.571, 528841.627), stdev = 56287.002
[info]   CI (99.9%): [266629.371, 700111.772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.687 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   290.935 ±(99.9%) 2089.340 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 290.935, 1248.305), stdev = 542.595
[info]   CI (99.9%): [≈ 0, 2380.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.time":
[info]   49.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 9.800, 26.000), stdev = 9.176
[info]   CI (99.9%): [49.000, 49.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala
[info] # Run progress: 75.00% complete, ETA 00:19:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4567276.328 ops/s
[info] # Warmup Iteration   2: 5135671.276 ops/s
[info] # Warmup Iteration   3: 5230379.875 ops/s
[info] Iteration   1: 5211297.206 ops/s
[info]                  ·gc.alloc.rate:                                  1562.448 MB/sec
[info]                  ·gc.alloc.rate.norm:                             472.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.058 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1351.270 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       408.205 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1.006 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   2: 5149135.425 ops/s
[info]                  ·gc.alloc.rate:                                  1543.927 MB/sec
[info]                  ·gc.alloc.rate.norm:                             472.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.072 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.749 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       520.248 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 5090387.897 ops/s
[info]                  ·gc.alloc.rate:            1526.791 MB/sec
[info]                  ·gc.alloc.rate.norm:       472.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1702.203 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 526.228 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 5040478.755 ops/s
[info]                  ·gc.alloc.rate:            1511.465 MB/sec
[info]                  ·gc.alloc.rate.norm:       472.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.416 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 425.143 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 5031112.042 ops/s
[info]                  ·gc.alloc.rate:                                  1508.692 MB/sec
[info]                  ·gc.alloc.rate.norm:                             472.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.464 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       425.939 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala":
[info]   5104482.265 ±(99.9%) 292507.207 ops/s [Average]
[info]   (min, avg, max) = (5031112.042, 5104482.265, 5211297.206), stdev = 75963.193
[info]   CI (99.9%): [4811975.058, 5396989.472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1530.665 ±(99.9%) 87.226 MB/sec [Average]
[info]   (min, avg, max) = (1508.692, 1530.665, 1562.448), stdev = 22.652
[info]   CI (99.9%): [1443.438, 1617.891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   472.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (472.000, 472.000, 472.000), stdev = 0.001
[info]   CI (99.9%): [472.000, 472.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.026 ±(99.9%) 0.137 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.072), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.008 ±(99.9%) 0.042 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.022), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1495.620 ±(99.9%) 725.546 MB/sec [Average]
[info]   (min, avg, max) = (1351.270, 1495.620, 1702.203), stdev = 188.422
[info]   CI (99.9%): [770.074, 2221.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   461.153 ±(99.9%) 220.087 B/op [Average]
[info]   (min, avg, max) = (408.205, 461.153, 526.228), stdev = 57.156
[info]   CI (99.9%): [241.066, 681.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.201 ±(99.9%) 1.732 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.201, 1.006), stdev = 0.450
[info]   CI (99.9%): [≈ 0, 1.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 10.000), stdev = 2.793
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson
[info] # Run progress: 75.27% complete, ETA 00:19:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 98988.494 ops/s
[info] # Warmup Iteration   2: 321694.227 ops/s
[info] # Warmup Iteration   3: 318771.493 ops/s
[info] Iteration   1: 317186.212 ops/s
[info]                  ·gc.alloc.rate:                                  1758.648 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8728.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.049 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.242 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1689.020 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8382.447 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                23.138 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        18.000 ms
[info] Iteration   2: 321731.881 ops/s
[info]                  ·gc.alloc.rate:                                  1783.857 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8728.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.033 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.159 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.645 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8325.756 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 327940.065 ops/s
[info]                  ·gc.alloc.rate:                                  1818.731 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8728.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.496 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9801.837 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 317848.733 ops/s
[info]                  ·gc.alloc.rate:            1762.421 MB/sec
[info]                  ·gc.alloc.rate.norm:       8728.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.758 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8427.583 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 324482.615 ops/s
[info]                  ·gc.alloc.rate:                                  1799.123 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8728.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.649 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8255.130 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson":
[info]   321837.901 ±(99.9%) 17412.599 ops/s [Average]
[info]   (min, avg, max) = (317186.212, 321837.901, 327940.065), stdev = 4521.997
[info]   CI (99.9%): [304425.302, 339250.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1784.556 ±(99.9%) 97.068 MB/sec [Average]
[info]   (min, avg, max) = (1758.648, 1784.556, 1818.731), stdev = 25.208
[info]   CI (99.9%): [1687.488, 1881.624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   8728.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8728.001, 8728.001, 8728.001), stdev = 0.001
[info]   CI (99.9%): [8728.001, 8728.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.017 ±(99.9%) 0.085 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.049), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.085 ±(99.9%) 0.422 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.085, 0.242), stdev = 0.110
[info]   CI (99.9%): [≈ 0, 0.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1767.314 ±(99.9%) 592.726 MB/sec [Average]
[info]   (min, avg, max) = (1689.020, 1767.314, 2042.496), stdev = 153.929
[info]   CI (99.9%): [1174.587, 2360.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   8638.551 ±(99.9%) 2516.348 B/op [Average]
[info]   (min, avg, max) = (8255.130, 8638.551, 9801.837), stdev = 653.488
[info]   CI (99.9%): [6122.202, 11154.899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   4.628 ±(99.9%) 39.844 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.628, 23.138), stdev = 10.347
[info]   CI (99.9%): [≈ 0, 44.472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.400, 18.000), stdev = 5.983
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala
[info] # Run progress: 75.54% complete, ETA 00:19:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2600530.048 ops/s
[info] # Warmup Iteration   2: 3112631.653 ops/s
[info] # Warmup Iteration   3: 3157382.401 ops/s
[info] Iteration   1: 3116417.900 ops/s
[info]                  ·gc.alloc.rate:            506.841 MB/sec
[info]                  ·gc.alloc.rate.norm:       256.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.347 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 169.885 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 3113727.720 ops/s
[info]                  ·gc.alloc.rate:            506.336 MB/sec
[info]                  ·gc.alloc.rate.norm:       256.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.643 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 340.084 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 3095231.914 ops/s
[info]                  ·gc.alloc.rate:            503.362 MB/sec
[info]                  ·gc.alloc.rate.norm:       256.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.333 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 171.052 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 3249277.040 ops/s
[info]                  ·gc.alloc.rate:            528.472 MB/sec
[info]                  ·gc.alloc.rate.norm:       256.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.739 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 325.885 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 3249097.604 ops/s
[info]                  ·gc.alloc.rate:            528.400 MB/sec
[info]                  ·gc.alloc.rate.norm:       256.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.690 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 325.906 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala":
[info]   3164750.436 ±(99.9%) 298464.453 ops/s [Average]
[info]   (min, avg, max) = (3095231.914, 3164750.436, 3249277.040), stdev = 77510.271
[info]   CI (99.9%): [2866285.983, 3463214.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   514.682 ±(99.9%) 48.617 MB/sec [Average]
[info]   (min, avg, max) = (503.362, 514.682, 528.472), stdev = 12.626
[info]   CI (99.9%): [466.065, 563.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   256.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (256.000, 256.000, 256.000), stdev = 0.001
[info]   CI (99.9%): [256.000, 256.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   538.150 ±(99.9%) 709.392 MB/sec [Average]
[info]   (min, avg, max) = (336.333, 538.150, 672.739), stdev = 184.227
[info]   CI (99.9%): [≈ 0, 1247.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   266.563 ±(99.9%) 338.522 B/op [Average]
[info]   (min, avg, max) = (169.885, 266.563, 340.084), stdev = 87.913
[info]   CI (99.9%): [≈ 0, 605.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 7.000), stdev = 2.049
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson
[info] # Run progress: 75.81% complete, ETA 00:19:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 57447.928 ops/s
[info] # Warmup Iteration   2: 355001.397 ops/s
[info] # Warmup Iteration   3: 348125.239 ops/s
[info] Iteration   1: 358323.866 ops/s
[info]                  ·gc.alloc.rate:            1378.559 MB/sec
[info]                  ·gc.alloc.rate.norm:       6056.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1342.673 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5898.355 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   2: 357832.247 ops/s
[info]                  ·gc.alloc.rate:                                  1377.091 MB/sec
[info]                  ·gc.alloc.rate.norm:                             6056.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.154 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.675 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1688.247 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7424.366 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     5.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                23.439 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        17.000 ms
[info] Iteration   3: 356857.474 ops/s
[info]                  ·gc.alloc.rate:                                  1372.896 MB/sec
[info]                  ·gc.alloc.rate.norm:                             6056.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.047 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.209 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.386 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6005.226 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 358083.848 ops/s
[info]                  ·gc.alloc.rate:                                  1377.949 MB/sec
[info]                  ·gc.alloc.rate.norm:                             6056.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.718 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5984.669 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 362994.149 ops/s
[info]                  ·gc.alloc.rate:                                  1396.980 MB/sec
[info]                  ·gc.alloc.rate.norm:                             6056.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.824 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5903.598 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson":
[info]   358818.317 ±(99.9%) 9241.294 ops/s [Average]
[info]   (min, avg, max) = (356857.474, 358818.317, 362994.149), stdev = 2399.935
[info]   CI (99.9%): [349577.023, 368059.610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1380.695 ±(99.9%) 36.076 MB/sec [Average]
[info]   (min, avg, max) = (1372.896, 1380.695, 1396.980), stdev = 9.369
[info]   CI (99.9%): [1344.618, 1416.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   6056.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6056.001, 6056.001, 6056.001), stdev = 0.001
[info]   CI (99.9%): [6056.001, 6056.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.041 ±(99.9%) 0.255 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.041, 0.154), stdev = 0.066
[info]   CI (99.9%): [≈ 0, 0.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.179 ±(99.9%) 1.122 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.179, 0.675), stdev = 0.291
[info]   CI (99.9%): [≈ 0, 1.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1423.170 ±(99.9%) 571.475 MB/sec [Average]
[info]   (min, avg, max) = (1342.673, 1423.170, 1688.247), stdev = 148.410
[info]   CI (99.9%): [851.695, 1994.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   6243.243 ±(99.9%) 2549.050 B/op [Average]
[info]   (min, avg, max) = (5898.355, 6243.243, 7424.366), stdev = 661.980
[info]   CI (99.9%): [3694.193, 8792.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 9.178 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 5.330), stdev = 2.384
[info]   CI (99.9%): [≈ 0, 10.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   4.688 ±(99.9%) 40.364 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.688, 23.439), stdev = 10.482
[info]   CI (99.9%): [≈ 0, 45.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 9.400, 19.000), stdev = 7.893
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce
[info] # Run progress: 76.08% complete, ETA 00:19:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4626288.758 ops/s
[info] # Warmup Iteration   2: 6648375.398 ops/s
[info] # Warmup Iteration   3: 6749850.244 ops/s
[info] Iteration   1: 6799962.021 ops/s
[info]                  ·gc.alloc.rate:                                  4218.047 MB/sec
[info]                  ·gc.alloc.rate.norm:                             976.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            4085.917 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       945.427 B/op
[info]                  ·gc.count:                                       12.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   2: 6780597.890 ops/s
[info]                  ·gc.alloc.rate:                                  4204.479 MB/sec
[info]                  ·gc.alloc.rate.norm:                             976.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            4084.312 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       948.105 B/op
[info]                  ·gc.count:                                       12.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   3: 6811239.522 ops/s
[info]                  ·gc.alloc.rate:                                  4224.655 MB/sec
[info]                  ·gc.alloc.rate.norm:                             976.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            4425.971 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1022.509 B/op
[info]                  ·gc.count:                                       13.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   4: 6850656.362 ops/s
[info]                  ·gc.alloc.rate:                                  4247.850 MB/sec
[info]                  ·gc.alloc.rate.norm:                             976.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            4084.324 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       938.428 B/op
[info]                  ·gc.count:                                       12.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   5: 6799434.093 ops/s
[info]                  ·gc.alloc.rate:                                  4215.941 MB/sec
[info]                  ·gc.alloc.rate.norm:                             976.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            4424.521 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1024.287 B/op
[info]                  ·gc.count:                                       13.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce":
[info]   6808377.978 ±(99.9%) 100379.368 ops/s [Average]
[info]   (min, avg, max) = (6780597.890, 6808377.978, 6850656.362), stdev = 26068.203
[info]   CI (99.9%): [6707998.609, 6908757.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.alloc.rate":
[info]   4222.194 ±(99.9%) 61.922 MB/sec [Average]
[info]   (min, avg, max) = (4204.479, 4222.194, 4247.850), stdev = 16.081
[info]   CI (99.9%): [4160.273, 4284.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   976.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (976.000, 976.000, 976.000), stdev = 0.001
[info]   CI (99.9%): [976.000, 976.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.004 ±(99.9%) 0.004 MB/sec [Average]
[info]   (min, avg, max) = (0.003, 0.004, 0.005), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   4221.009 ±(99.9%) 717.929 MB/sec [Average]
[info]   (min, avg, max) = (4084.312, 4221.009, 4425.971), stdev = 186.444
[info]   CI (99.9%): [3503.080, 4938.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   975.751 ±(99.9%) 168.054 B/op [Average]
[info]   (min, avg, max) = (938.428, 975.751, 1024.287), stdev = 43.643
[info]   CI (99.9%): [807.697, 1143.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.count":
[info]   62.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (12.000, 12.400, 13.000), stdev = 0.548
[info]   CI (99.9%): [62.000, 62.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.time":
[info]   53.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 10.600, 12.000), stdev = 1.342
[info]   CI (99.9%): [53.000, 53.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava
[info] # Run progress: 76.34% complete, ETA 00:18:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.882 ops/s
[info] # Warmup Iteration   2: 38625003.247 ops/s
[info] # Warmup Iteration   3: 39459654.507 ops/s
[info] Iteration   1: 37973048.186 ops/s
[info]                  ·gc.alloc.rate:            385.993 MB/sec
[info]                  ·gc.alloc.rate.norm:       16.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.699 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13.832 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 38045426.812 ops/s
[info]                  ·gc.alloc.rate:            386.736 MB/sec
[info]                  ·gc.alloc.rate.norm:       16.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.689 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13.805 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 38899221.201 ops/s
[info]                  ·gc.alloc.rate:                   395.416 MB/sec
[info]                  ·gc.alloc.rate.norm:              16.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             333.039 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        13.476 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.027 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 38981215.963 ops/s
[info]                  ·gc.alloc.rate:                   396.264 MB/sec
[info]                  ·gc.alloc.rate.norm:              16.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             666.788 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        26.923 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.027 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 39119864.152 ops/s
[info]                  ·gc.alloc.rate:            397.745 MB/sec
[info]                  ·gc.alloc.rate.norm:       16.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.779 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13.427 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava":
[info]   38603755.263 ±(99.9%) 2114058.893 ops/s [Average]
[info]   (min, avg, max) = (37973048.186, 38603755.263, 39119864.152), stdev = 549014.381
[info]   CI (99.9%): [36489696.370, 40717814.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   392.431 ±(99.9%) 21.588 MB/sec [Average]
[info]   (min, avg, max) = (385.993, 392.431, 397.745), stdev = 5.606
[info]   CI (99.9%): [370.843, 414.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   16.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16.000, 16.000, 16.000), stdev = 0.001
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   400.199 ±(99.9%) 573.854 MB/sec [Average]
[info]   (min, avg, max) = (333.039, 400.199, 666.788), stdev = 149.028
[info]   CI (99.9%): [≈ 0, 974.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   16.293 ±(99.9%) 22.894 B/op [Average]
[info]   (min, avg, max) = (13.427, 16.293, 26.923), stdev = 5.945
[info]   CI (99.9%): [≈ 0, 39.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   0.011 ±(99.9%) 0.057 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.027), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 10.000), stdev = 2.236
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala
[info] # Run progress: 76.61% complete, ETA 00:18:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2718695.633 ops/s
[info] # Warmup Iteration   2: 6808250.504 ops/s
[info] # Warmup Iteration   3: 7097757.334 ops/s
[info] Iteration   1: 7245411.772 ops/s
[info]                  ·gc.alloc.rate:                                  2725.291 MB/sec
[info]                  ·gc.alloc.rate.norm:                             592.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2723.152 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       591.536 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   2: 7208072.545 ops/s
[info]                  ·gc.alloc.rate:                                  2711.792 MB/sec
[info]                  ·gc.alloc.rate.norm:                             592.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2723.761 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       594.613 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 7220781.732 ops/s
[info]                  ·gc.alloc.rate:                                  2715.685 MB/sec
[info]                  ·gc.alloc.rate.norm:                             592.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.844 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       593.561 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 7228044.490 ops/s
[info]                  ·gc.alloc.rate:                                  2718.884 MB/sec
[info]                  ·gc.alloc.rate.norm:                             592.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2723.259 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       592.953 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 7151590.070 ops/s
[info]                  ·gc.alloc.rate:                                  2689.577 MB/sec
[info]                  ·gc.alloc.rate.norm:                             592.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.728 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       599.297 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala":
[info]   7210780.122 ±(99.9%) 137606.452 ops/s [Average]
[info]   (min, avg, max) = (7151590.070, 7210780.122, 7245411.772), stdev = 35735.959
[info]   CI (99.9%): [7073173.670, 7348386.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2712.246 ±(99.9%) 52.380 MB/sec [Average]
[info]   (min, avg, max) = (2689.577, 2712.246, 2725.291), stdev = 13.603
[info]   CI (99.9%): [2659.865, 2764.626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   592.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (592.000, 592.000, 592.000), stdev = 0.001
[info]   CI (99.9%): [592.000, 592.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.002 ±(99.9%) 0.003 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.002, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   2723.149 ±(99.9%) 1.561 MB/sec [Average]
[info]   (min, avg, max) = (2722.728, 2723.149, 2723.761), stdev = 0.405
[info]   CI (99.9%): [2721.588, 2724.710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   594.392 ±(99.9%) 11.395 B/op [Average]
[info]   (min, avg, max) = (591.536, 594.392, 599.297), stdev = 2.959
[info]   CI (99.9%): [582.997, 605.787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.count":
[info]   40.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.000, 8.000), stdev = 0.001
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.000, 8.000), stdev = 0.707
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala
[info] # Run progress: 76.88% complete, ETA 00:18:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 35366226.340 ops/s
[info] # Warmup Iteration   2: 33073313.451 ops/s
[info] # Warmup Iteration   3: 37283662.520 ops/s
[info] Iteration   1: 37156642.490 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 37281131.402 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 37280828.287 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 37280040.661 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 37296621.772 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala":
[info]   37259052.922 ±(99.9%) 222050.865 ops/s [Average]
[info]   (min, avg, max) = (37156642.490, 37259052.922, 37296621.772), stdev = 57665.904
[info]   CI (99.9%): [37037002.058, 37481103.787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala
[info] # Run progress: 77.15% complete, ETA 00:18:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20957253.441 ops/s
[info] # Warmup Iteration   2: 27011759.789 ops/s
[info] # Warmup Iteration   3: 26309149.145 ops/s
[info] Iteration   1: 26269109.695 ops/s
[info]                  ·gc.alloc.rate:            1335.061 MB/sec
[info]                  ·gc.alloc.rate.norm:       80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.057 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 80.779 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 26120779.120 ops/s
[info]                  ·gc.alloc.rate:                                  1327.515 MB/sec
[info]                  ·gc.alloc.rate.norm:                             80.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.109 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1358.112 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       81.844 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                0.201 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 26081861.744 ops/s
[info]                  ·gc.alloc.rate:                                  1325.541 MB/sec
[info]                  ·gc.alloc.rate.norm:                             80.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.409 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       82.165 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 26511804.300 ops/s
[info]                  ·gc.alloc.rate:                                  1347.473 MB/sec
[info]                  ·gc.alloc.rate.norm:                             80.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.461 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       80.830 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 26423572.182 ops/s
[info]                  ·gc.alloc.rate:            1343.501 MB/sec
[info]                  ·gc.alloc.rate.norm:       80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.481 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 60.825 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala":
[info]   26281425.408 ±(99.9%) 717979.130 ops/s [Average]
[info]   (min, avg, max) = (26081861.744, 26281425.408, 26511804.300), stdev = 186456.900
[info]   CI (99.9%): [25563446.278, 26999404.538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.alloc.rate":
[info]   1335.818 ±(99.9%) 37.034 MB/sec [Average]
[info]   (min, avg, max) = (1325.541, 1335.818, 1347.473), stdev = 9.618
[info]   CI (99.9%): [1298.784, 1372.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.alloc.rate.norm":
[info]   80.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (80.000, 80.000, 80.000), stdev = 0.001
[info]   CI (99.9%): [80.000, 80.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.022 ±(99.9%) 0.186 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.109), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.001 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.007), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.G1_Old_Gen":
[info]   1290.104 ±(99.9%) 578.617 MB/sec [Average]
[info]   (min, avg, max) = (1021.481, 1290.104, 1361.461), stdev = 150.265
[info]   CI (99.9%): [711.487, 1868.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.G1_Old_Gen.norm":
[info]   77.289 ±(99.9%) 35.517 B/op [Average]
[info]   (min, avg, max) = (60.825, 77.289, 82.165), stdev = 9.224
[info]   CI (99.9%): [41.772, 112.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.040 ±(99.9%) 0.346 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.040, 0.201), stdev = 0.090
[info]   CI (99.9%): [≈ 0, 0.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.200, 11.000), stdev = 3.564
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson
[info] # Run progress: 77.42% complete, ETA 00:18:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3071037.590 ops/s
[info] # Warmup Iteration   2: 5739521.190 ops/s
[info] # Warmup Iteration   3: 5986268.792 ops/s
[info] Iteration   1: 6102481.100 ops/s
[info]                  ·gc.alloc.rate:                                  2946.690 MB/sec
[info]                  ·gc.alloc.rate.norm:                             760.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3061.905 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       789.716 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   2: 6156125.341 ops/s
[info]                  ·gc.alloc.rate:                                  2973.231 MB/sec
[info]                  ·gc.alloc.rate.norm:                             760.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2723.622 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       696.196 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 6017386.825 ops/s
[info]                  ·gc.alloc.rate:                                  2905.291 MB/sec
[info]                  ·gc.alloc.rate.norm:                             760.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.128 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       801.289 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   4: 6063389.787 ops/s
[info]                  ·gc.alloc.rate:                                  2927.335 MB/sec
[info]                  ·gc.alloc.rate.norm:                             760.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.673 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       706.865 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   5: 6056516.663 ops/s
[info]                  ·gc.alloc.rate:            2924.282 MB/sec
[info]                  ·gc.alloc.rate.norm:       760.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      3063.288 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 796.127 B/op
[info]                  ·gc.count:                 9.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson":
[info]   6079179.943 ±(99.9%) 202340.997 ops/s [Average]
[info]   (min, avg, max) = (6017386.825, 6079179.943, 6156125.341), stdev = 52547.314
[info]   CI (99.9%): [5876838.946, 6281520.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2935.366 ±(99.9%) 99.184 MB/sec [Average]
[info]   (min, avg, max) = (2905.291, 2935.366, 2973.231), stdev = 25.758
[info]   CI (99.9%): [2836.182, 3034.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   760.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (760.000, 760.000, 760.000), stdev = 0.001
[info]   CI (99.9%): [760.000, 760.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.003 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.002), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2926.923 ±(99.9%) 716.305 MB/sec [Average]
[info]   (min, avg, max) = (2722.673, 2926.923, 3063.288), stdev = 186.022
[info]   CI (99.9%): [2210.618, 3643.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   758.039 ±(99.9%) 199.788 B/op [Average]
[info]   (min, avg, max) = (696.196, 758.039, 801.289), stdev = 51.884
[info]   CI (99.9%): [558.251, 957.827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.count":
[info]   43.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.600, 9.000), stdev = 0.548
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.200, 8.000), stdev = 0.447
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce
[info] # Run progress: 77.69% complete, ETA 00:17:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13332008.775 ops/s
[info] # Warmup Iteration   2: 18947391.424 ops/s
[info] # Warmup Iteration   3: 19003761.818 ops/s
[info] Iteration   1: 19952168.400 ops/s
[info]                  ·gc.alloc.rate:                                  2332.183 MB/sec
[info]                  ·gc.alloc.rate.norm:                             184.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.086 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.359 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       187.959 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   2: 19913134.932 ops/s
[info]                  ·gc.alloc.rate:                                  2327.872 MB/sec
[info]                  ·gc.alloc.rate.norm:                             184.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.620 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       188.327 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 19671523.689 ops/s
[info]                  ·gc.alloc.rate:                                  2299.422 MB/sec
[info]                  ·gc.alloc.rate.norm:                             184.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.368 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       190.637 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 19801211.932 ops/s
[info]                  ·gc.alloc.rate:                                  2314.695 MB/sec
[info]                  ·gc.alloc.rate.norm:                             184.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.511 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       189.391 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 19677261.202 ops/s
[info]                  ·gc.alloc.rate:            2300.230 MB/sec
[info]                  ·gc.alloc.rate.norm:       184.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2042.152 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 163.356 B/op
[info]                  ·gc.count:                 6.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce":
[info]   19803060.031 ±(99.9%) 500140.543 ops/s [Average]
[info]   (min, avg, max) = (19671523.689, 19803060.031, 19952168.400), stdev = 129884.911
[info]   CI (99.9%): [19302919.488, 20303200.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.alloc.rate":
[info]   2314.880 ±(99.9%) 58.456 MB/sec [Average]
[info]   (min, avg, max) = (2299.422, 2314.880, 2332.183), stdev = 15.181
[info]   CI (99.9%): [2256.424, 2373.337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   184.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (184.000, 184.000, 184.000), stdev = 0.001
[info]   CI (99.9%): [184.000, 184.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.018 ±(99.9%) 0.145 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.086), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.001 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.007), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   2314.402 ±(99.9%) 586.038 MB/sec [Average]
[info]   (min, avg, max) = (2042.152, 2314.402, 2382.620), stdev = 152.192
[info]   CI (99.9%): [1728.364, 2900.440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   183.934 ±(99.9%) 44.477 B/op [Average]
[info]   (min, avg, max) = (163.356, 183.934, 190.637), stdev = 11.551
[info]   CI (99.9%): [139.457, 228.411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.count":
[info]   34.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 7.000), stdev = 0.894
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava
[info] # Run progress: 77.96% complete, ETA 00:17:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.900 ops/s
[info] # Warmup Iteration   2: 51651174.120 ops/s
[info] # Warmup Iteration   3: 53470994.562 ops/s
[info] Iteration   1: 52863664.771 ops/s
[info]                  ·gc.alloc.rate:            1612.533 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1668.977 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 49.680 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  25.000 ms
[info] Iteration   2: 54399621.556 ops/s
[info]                  ·gc.alloc.rate:                                  1659.172 MB/sec
[info]                  ·gc.alloc.rate.norm:                             48.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.599 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1692.739 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       48.971 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     6.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                0.193 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   3: 54435991.208 ops/s
[info]                  ·gc.alloc.rate:                                  1660.065 MB/sec
[info]                  ·gc.alloc.rate.norm:                             48.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.838 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       49.208 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 54478072.344 ops/s
[info]                  ·gc.alloc.rate:            1661.283 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.760 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 49.170 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 54285369.265 ops/s
[info]                  ·gc.alloc.rate:            1655.434 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.869 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 49.346 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava":
[info]   54092543.829 ±(99.9%) 2659601.083 ops/s [Average]
[info]   (min, avg, max) = (52863664.771, 54092543.829, 54478072.344), stdev = 690689.955
[info]   CI (99.9%): [51432942.746, 56752144.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   1649.697 ±(99.9%) 80.440 MB/sec [Average]
[info]   (min, avg, max) = (1612.533, 1649.697, 1661.283), stdev = 20.890
[info]   CI (99.9%): [1569.258, 1730.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.120 ±(99.9%) 1.031 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.120, 0.599), stdev = 0.268
[info]   CI (99.9%): [≈ 0, 1.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.003 ±(99.9%) 0.030 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.017), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   1693.437 ±(99.9%) 54.786 MB/sec [Average]
[info]   (min, avg, max) = (1668.977, 1693.437, 1701.869), stdev = 14.228
[info]   CI (99.9%): [1638.651, 1748.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   49.275 ±(99.9%) 1.014 B/op [Average]
[info]   (min, avg, max) = (48.971, 49.275, 49.680), stdev = 0.263
[info]   CI (99.9%): [48.261, 50.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   1.332 ±(99.9%) 11.472 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.332, 6.662), stdev = 2.979
[info]   CI (99.9%): [≈ 0, 12.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   0.039 ±(99.9%) 0.332 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.039, 0.193), stdev = 0.086
[info]   CI (99.9%): [≈ 0, 0.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.time":
[info]   51.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 10.200, 25.000), stdev = 8.672
[info]   CI (99.9%): [51.000, 51.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJavaPrealloc
[info] # Run progress: 78.23% complete, ETA 00:17:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.880 ops/s
[info] # Warmup Iteration   2: 62356470.415 ops/s
[info] # Warmup Iteration   3: 63999284.608 ops/s
[info] Iteration   1: 69958336.889 ops/s
[info]                  ·gc.alloc.rate:            711.256 MB/sec
[info]                  ·gc.alloc.rate.norm:       16.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1001.287 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 22.524 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   2: 68073377.823 ops/s
[info]                  ·gc.alloc.rate:            692.165 MB/sec
[info]                  ·gc.alloc.rate.norm:       16.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.597 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 15.432 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 73319822.967 ops/s
[info]                  ·gc.alloc.rate:            745.398 MB/sec
[info]                  ·gc.alloc.rate.norm:       16.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.491 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14.328 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 73009564.454 ops/s
[info]                  ·gc.alloc.rate:            742.148 MB/sec
[info]                  ·gc.alloc.rate.norm:       16.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.405 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14.389 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 69189028.492 ops/s
[info]                  ·gc.alloc.rate:                   703.271 MB/sec
[info]                  ·gc.alloc.rate.norm:              16.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             666.693 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        15.168 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJavaPrealloc":
[info]   70710026.125 ±(99.9%) 9016038.516 ops/s [Average]
[info]   (min, avg, max) = (68073377.823, 70710026.125, 73319822.967), stdev = 2341436.571
[info]   CI (99.9%): [61693987.609, 79726064.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJavaPrealloc:·gc.alloc.rate":
[info]   718.848 ±(99.9%) 91.530 MB/sec [Average]
[info]   (min, avg, max) = (692.165, 718.848, 745.398), stdev = 23.770
[info]   CI (99.9%): [627.318, 810.378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJavaPrealloc:·gc.alloc.rate.norm":
[info]   16.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16.000, 16.000, 16.000), stdev = 0.001
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJavaPrealloc:·gc.churn.G1_Old_Gen":
[info]   734.095 ±(99.9%) 575.154 MB/sec [Average]
[info]   (min, avg, max) = (666.693, 734.095, 1001.287), stdev = 149.366
[info]   CI (99.9%): [158.940, 1309.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJavaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   16.368 ±(99.9%) 13.380 B/op [Average]
[info]   (min, avg, max) = (14.328, 16.368, 22.524), stdev = 3.475
[info]   CI (99.9%): [2.988, 29.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJavaPrealloc:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJavaPrealloc:·gc.churn.G1_Survivor_Space.norm":
[info]   0.003 ±(99.9%) 0.026 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.015), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJavaPrealloc:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJavaPrealloc:·gc.time":
[info]   54.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 10.800, 15.000), stdev = 2.387
[info]   CI (99.9%): [54.000, 54.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala
[info] # Run progress: 78.49% complete, ETA 00:17:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3244387.678 ops/s
[info] # Warmup Iteration   2: 10946013.702 ops/s
[info] # Warmup Iteration   3: 11097019.394 ops/s
[info] Iteration   1: 11170927.387 ops/s
[info]                  ·gc.alloc.rate:                                  2214.710 MB/sec
[info]                  ·gc.alloc.rate.norm:                             312.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.226 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.032 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.570 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       287.750 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   2: 11379066.697 ops/s
[info]                  ·gc.alloc.rate:                                  2255.984 MB/sec
[info]                  ·gc.alloc.rate.norm:                             312.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2383.015 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       329.568 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 11002968.634 ops/s
[info]                  ·gc.alloc.rate:                                  2181.175 MB/sec
[info]                  ·gc.alloc.rate.norm:                             312.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.402 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       292.150 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 10945019.052 ops/s
[info]                  ·gc.alloc.rate:                                  2170.310 MB/sec
[info]                  ·gc.alloc.rate.norm:                             312.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2383.457 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       342.642 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 11360676.712 ops/s
[info]                  ·gc.alloc.rate:                                  2252.056 MB/sec
[info]                  ·gc.alloc.rate.norm:                             312.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.269 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       282.936 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala":
[info]   11171731.697 ±(99.9%) 766675.349 ops/s [Average]
[info]   (min, avg, max) = (10945019.052, 11171731.697, 11379066.697), stdev = 199103.153
[info]   CI (99.9%): [10405056.348, 11938407.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   2214.847 ±(99.9%) 151.528 MB/sec [Average]
[info]   (min, avg, max) = (2170.310, 2214.847, 2255.984), stdev = 39.351
[info]   CI (99.9%): [2063.319, 2366.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   312.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (312.000, 312.000, 312.000), stdev = 0.001
[info]   CI (99.9%): [312.000, 312.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.047 ±(99.9%) 0.385 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.047, 0.226), stdev = 0.100
[info]   CI (99.9%): [≈ 0, 0.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.007 ±(99.9%) 0.054 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.007, 0.032), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   2178.743 ±(99.9%) 718.824 MB/sec [Average]
[info]   (min, avg, max) = (2042.269, 2178.743, 2383.457), stdev = 186.676
[info]   CI (99.9%): [1459.918, 2897.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   307.009 ±(99.9%) 104.569 B/op [Average]
[info]   (min, avg, max) = (282.936, 307.009, 342.642), stdev = 27.156
[info]   CI (99.9%): [202.440, 411.578] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.count":
[info]   32.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 0.707
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala
[info] # Run progress: 78.76% complete, ETA 00:16:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 30508667.048 ops/s
[info] # Warmup Iteration   2: 43616588.069 ops/s
[info] # Warmup Iteration   3: 45593056.548 ops/s
[info] Iteration   1: 45562124.186 ops/s
[info]                  ·gc.alloc.rate:            926.440 MB/sec
[info]                  ·gc.alloc.rate.norm:       32.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.303 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 34.862 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 45158037.424 ops/s
[info]                  ·gc.alloc.rate:            918.238 MB/sec
[info]                  ·gc.alloc.rate.norm:       32.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.869 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23.449 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 45589869.045 ops/s
[info]                  ·gc.alloc.rate:            926.732 MB/sec
[info]                  ·gc.alloc.rate.norm:       32.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.986 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 34.840 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 38446467.576 ops/s
[info]                  ·gc.alloc.rate:                                  781.628 MB/sec
[info]                  ·gc.alloc.rate.norm:                             32.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.067 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            676.728 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       27.705 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                0.164 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 37145281.410 ops/s
[info]                  ·gc.alloc.rate:                                  755.113 MB/sec
[info]                  ·gc.alloc.rate.norm:                             32.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.117 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.017 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       43.268 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala":
[info]   42380355.928 ±(99.9%) 16225521.172 ops/s [Average]
[info]   (min, avg, max) = (37145281.410, 42380355.928, 45589869.045), stdev = 4213716.322
[info]   CI (99.9%): [26154834.757, 58605877.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   861.630 ±(99.9%) 330.063 MB/sec [Average]
[info]   (min, avg, max) = (755.113, 861.630, 926.732), stdev = 85.716
[info]   CI (99.9%): [531.567, 1191.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   32.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (32.000, 32.000, 32.000), stdev = 0.001
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.037 ±(99.9%) 0.205 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.117), stdev = 0.053
[info]   CI (99.9%): [≈ 0, 0.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.002 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.005), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   877.781 ±(99.9%) 713.775 MB/sec [Average]
[info]   (min, avg, max) = (672.869, 877.781, 1021.017), stdev = 185.365
[info]   CI (99.9%): [164.006, 1591.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   32.825 ±(99.9%) 29.287 B/op [Average]
[info]   (min, avg, max) = (23.449, 32.825, 43.268), stdev = 7.606
[info]   CI (99.9%): [3.538, 62.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.033 ±(99.9%) 0.282 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.164), stdev = 0.073
[info]   CI (99.9%): [≈ 0, 0.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.600, 10.000), stdev = 3.286
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 79.03% complete, ETA 00:16:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 35111957.633 ops/s
[info] # Warmup Iteration   2: 47081595.825 ops/s
[info] # Warmup Iteration   3: 48260238.378 ops/s
[info] Iteration   1: 48240152.222 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 48204772.178 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 48143466.411 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 48250594.174 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 48208024.336 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc":
[info]   48209401.864 ±(99.9%) 161235.875 ops/s [Average]
[info]   (min, avg, max) = (48143466.411, 48209401.864, 48250594.174), stdev = 41872.445
[info]   CI (99.9%): [48048165.989, 48370637.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala
[info] # Run progress: 79.30% complete, ETA 00:16:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 30476886.006 ops/s
[info] # Warmup Iteration   2: 32103673.938 ops/s
[info] # Warmup Iteration   3: 33234656.559 ops/s
[info] Iteration   1: 33224310.403 ops/s
[info]                  ·gc.alloc.rate:                                  2532.716 MB/sec
[info]                  ·gc.alloc.rate.norm:                             120.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.722 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       129.002 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 33254083.090 ops/s
[info]                  ·gc.alloc.rate:                                  2534.783 MB/sec
[info]                  ·gc.alloc.rate.norm:                             120.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.130 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       112.773 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 33480460.812 ops/s
[info]                  ·gc.alloc.rate:                                  2552.509 MB/sec
[info]                  ·gc.alloc.rate.norm:                             120.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.874 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       128.009 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 32061985.909 ops/s
[info]                  ·gc.alloc.rate:            2444.338 MB/sec
[info]                  ·gc.alloc.rate.norm:       120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2382.530 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 116.966 B/op
[info]                  ·gc.count:                 7.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 33086554.498 ops/s
[info]                  ·gc.alloc.rate:                                  2522.298 MB/sec
[info]                  ·gc.alloc.rate.norm:                             120.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.383 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       113.343 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala":
[info]   33021478.942 ±(99.9%) 2135954.789 ops/s [Average]
[info]   (min, avg, max) = (32061985.909, 33021478.942, 33480460.812), stdev = 554700.676
[info]   CI (99.9%): [30885524.154, 35157433.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.alloc.rate":
[info]   2517.329 ±(99.9%) 162.590 MB/sec [Average]
[info]   (min, avg, max) = (2444.338, 2517.329, 2552.509), stdev = 42.224
[info]   CI (99.9%): [2354.739, 2679.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.alloc.rate.norm":
[info]   120.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (120.000, 120.000, 120.000), stdev = 0.001
[info]   CI (99.9%): [120.000, 120.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.002 ±(99.9%) 0.007 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.005), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.G1_Old_Gen":
[info]   2518.528 ±(99.9%) 718.040 MB/sec [Average]
[info]   (min, avg, max) = (2382.130, 2518.528, 2722.874), stdev = 186.473
[info]   CI (99.9%): [1800.488, 3236.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.G1_Old_Gen.norm":
[info]   120.019 ±(99.9%) 30.499 B/op [Average]
[info]   (min, avg, max) = (112.773, 120.019, 129.002), stdev = 7.920
[info]   CI (99.9%): [89.520, 150.518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.count":
[info]   37.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.400, 8.000), stdev = 0.548
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson
[info] # Run progress: 79.57% complete, ETA 00:16:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1357054.727 ops/s
[info] # Warmup Iteration   2: 2124676.784 ops/s
[info] # Warmup Iteration   3: 2137844.965 ops/s
[info] Iteration   1: 2139513.315 ops/s
[info]                  ·gc.alloc.rate:                                  1750.631 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1288.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.134 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.098 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1689.717 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1243.183 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                2.940 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        13.000 ms
[info] Iteration   2: 2168299.835 ops/s
[info]                  ·gc.alloc.rate:                                  1774.017 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1288.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.863 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1482.466 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 2113527.989 ops/s
[info]                  ·gc.alloc.rate:                                  1729.615 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1288.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.964 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1267.409 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 2106705.532 ops/s
[info]                  ·gc.alloc.rate:            1724.486 MB/sec
[info]                  ·gc.alloc.rate.norm:       1288.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1702.409 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1271.512 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 2110660.204 ops/s
[info]                  ·gc.alloc.rate:                                  1727.787 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1288.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.424 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1269.093 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson":
[info]   2127741.375 ±(99.9%) 100409.936 ops/s [Average]
[info]   (min, avg, max) = (2106705.532, 2127741.375, 2168299.835), stdev = 26076.142
[info]   CI (99.9%): [2027331.439, 2228151.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1741.307 ±(99.9%) 80.756 MB/sec [Average]
[info]   (min, avg, max) = (1724.486, 1741.307, 1774.017), stdev = 20.972
[info]   CI (99.9%): [1660.551, 1822.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   1288.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1288.000, 1288.000, 1288.000), stdev = 0.001
[info]   CI (99.9%): [1288.000, 1288.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.028 ±(99.9%) 0.227 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.134), stdev = 0.059
[info]   CI (99.9%): [≈ 0, 0.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.021 ±(99.9%) 0.167 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.098), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1767.675 ±(99.9%) 590.580 MB/sec [Average]
[info]   (min, avg, max) = (1689.717, 1767.675, 2041.863), stdev = 153.372
[info]   CI (99.9%): [1177.095, 2358.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   1306.733 ±(99.9%) 380.826 B/op [Average]
[info]   (min, avg, max) = (1243.183, 1306.733, 1482.466), stdev = 98.899
[info]   CI (99.9%): [925.906, 1687.559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   0.588 ±(99.9%) 5.063 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.588, 2.940), stdev = 1.315
[info]   CI (99.9%): [≈ 0, 5.651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 13.000), stdev = 3.834
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce
[info] # Run progress: 79.84% complete, ETA 00:16:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 407059.217 ops/s
[info] # Warmup Iteration   2: 574412.269 ops/s
[info] # Warmup Iteration   3: 569851.199 ops/s
[info] Iteration   1: 578096.417 ops/s
[info]                  ·gc.alloc.rate:                                  2097.717 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5712.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.105 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.285 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.024 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5560.351 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 577437.656 ops/s
[info]                  ·gc.alloc.rate:                                  2095.744 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5712.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.845 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6494.501 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        14.000 ms
[info] Iteration   3: 577461.263 ops/s
[info]                  ·gc.alloc.rate:                                  2096.261 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5712.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.843 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5566.446 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 588994.699 ops/s
[info]                  ·gc.alloc.rate:                                  2137.486 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5712.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.244 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5457.486 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 589028.051 ops/s
[info]                  ·gc.alloc.rate:            2137.419 MB/sec
[info]                  ·gc.alloc.rate.norm:       5712.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2042.055 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5457.152 B/op
[info]                  ·gc.count:                 6.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce":
[info]   582203.617 ±(99.9%) 23951.894 ops/s [Average]
[info]   (min, avg, max) = (577437.656, 582203.617, 589028.051), stdev = 6220.231
[info]   CI (99.9%): [558251.723, 606155.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.alloc.rate":
[info]   2112.925 ±(99.9%) 86.260 MB/sec [Average]
[info]   (min, avg, max) = (2095.744, 2112.925, 2137.486), stdev = 22.402
[info]   CI (99.9%): [2026.665, 2199.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5712.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5712.001, 5712.001, 5712.001), stdev = 0.001
[info]   CI (99.9%): [5712.001, 5712.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.023 ±(99.9%) 0.176 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.105), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.062 ±(99.9%) 0.481 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.285), stdev = 0.125
[info]   CI (99.9%): [≈ 0, 0.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2110.402 ±(99.9%) 586.455 MB/sec [Average]
[info]   (min, avg, max) = (2042.024, 2110.402, 2382.845), stdev = 152.300
[info]   CI (99.9%): [1523.948, 2696.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   5707.187 ±(99.9%) 1707.035 B/op [Average]
[info]   (min, avg, max) = (5457.152, 5707.187, 6494.501), stdev = 443.312
[info]   CI (99.9%): [4000.152, 7414.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.000, 14.000), stdev = 4.000
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala
[info] # Run progress: 80.11% complete, ETA 00:15:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 205206.041 ops/s
[info] # Warmup Iteration   2: 571749.801 ops/s
[info] # Warmup Iteration   3: 574068.182 ops/s
[info] Iteration   1: 575151.690 ops/s
[info]                  ·gc.alloc.rate:            669.469 MB/sec
[info]                  ·gc.alloc.rate.norm:       1832.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.444 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1837.407 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 579503.071 ops/s
[info]                  ·gc.alloc.rate:            674.403 MB/sec
[info]                  ·gc.alloc.rate.norm:       1832.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.320 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1823.626 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 572081.572 ops/s
[info]                  ·gc.alloc.rate:            665.838 MB/sec
[info]                  ·gc.alloc.rate.norm:       1832.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.393 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1847.285 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 572226.407 ops/s
[info]                  ·gc.alloc.rate:            665.984 MB/sec
[info]                  ·gc.alloc.rate.norm:       1832.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.364 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1846.801 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 574971.043 ops/s
[info]                  ·gc.alloc.rate:            669.234 MB/sec
[info]                  ·gc.alloc.rate.norm:       1832.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.401 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1837.934 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala":
[info]   574786.757 ±(99.9%) 11597.435 ops/s [Average]
[info]   (min, avg, max) = (572081.572, 574786.757, 579503.071), stdev = 3011.817
[info]   CI (99.9%): [563189.321, 586384.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   668.985 ±(99.9%) 13.417 MB/sec [Average]
[info]   (min, avg, max) = (665.838, 668.985, 674.403), stdev = 3.484
[info]   CI (99.9%): [655.568, 682.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1832.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1832.001, 1832.001, 1832.001), stdev = 0.001
[info]   CI (99.9%): [1832.001, 1832.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   671.385 ±(99.9%) 0.177 MB/sec [Average]
[info]   (min, avg, max) = (671.320, 671.385, 671.444), stdev = 0.046
[info]   CI (99.9%): [671.208, 671.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1838.610 ±(99.9%) 36.972 B/op [Average]
[info]   (min, avg, max) = (1823.626, 1838.610, 1847.285), stdev = 9.602
[info]   CI (99.9%): [1801.638, 1875.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.time":
[info]   49.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 9.800, 10.000), stdev = 0.447
[info]   CI (99.9%): [49.000, 49.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala
[info] # Run progress: 80.38% complete, ETA 00:15:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3083431.893 ops/s
[info] # Warmup Iteration   2: 3593169.537 ops/s
[info] # Warmup Iteration   3: 3612287.058 ops/s
[info] Iteration   1: 3709887.893 ops/s
[info]                  ·gc.alloc.rate:                   1470.661 MB/sec
[info]                  ·gc.alloc.rate.norm:              624.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.096 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        571.996 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.413 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 3694408.286 ops/s
[info]                  ·gc.alloc.rate:                                  1464.778 MB/sec
[info]                  ·gc.alloc.rate.norm:                             624.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.113 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.048 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.679 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       580.080 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 3688397.354 ops/s
[info]                  ·gc.alloc.rate:                                  1462.180 MB/sec
[info]                  ·gc.alloc.rate.norm:                             624.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.820 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       726.269 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 3746633.165 ops/s
[info]                  ·gc.alloc.rate:            1485.484 MB/sec
[info]                  ·gc.alloc.rate.norm:       624.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.617 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 571.968 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 3743455.137 ops/s
[info]                  ·gc.alloc.rate:                                  1484.303 MB/sec
[info]                  ·gc.alloc.rate.norm:                             624.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.589 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       572.411 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala":
[info]   3716556.367 ±(99.9%) 104679.697 ops/s [Average]
[info]   (min, avg, max) = (3688397.354, 3716556.367, 3746633.165), stdev = 27184.985
[info]   CI (99.9%): [3611876.670, 3821236.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1473.481 ±(99.9%) 41.855 MB/sec [Average]
[info]   (min, avg, max) = (1462.180, 1473.481, 1485.484), stdev = 10.870
[info]   CI (99.9%): [1431.626, 1515.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   624.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (624.000, 624.000, 624.000), stdev = 0.001
[info]   CI (99.9%): [624.000, 624.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.023 ±(99.9%) 0.193 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.113), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.010 ±(99.9%) 0.082 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.048), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1426.960 ±(99.9%) 592.087 MB/sec [Average]
[info]   (min, avg, max) = (1348.096, 1426.960, 1701.820), stdev = 153.763
[info]   CI (99.9%): [834.873, 2019.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   604.545 ±(99.9%) 262.357 B/op [Average]
[info]   (min, avg, max) = (571.968, 604.545, 726.269), stdev = 68.133
[info]   CI (99.9%): [342.188, 866.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.283 ±(99.9%) 2.433 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.283, 1.413), stdev = 0.632
[info]   CI (99.9%): [≈ 0, 2.716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 12.000), stdev = 3.715
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson
[info] # Run progress: 80.65% complete, ETA 00:15:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 34607.512 ops/s
[info] # Warmup Iteration   2: 202861.742 ops/s
[info] # Warmup Iteration   3: 219451.086 ops/s
[info] Iteration   1: 222256.564 ops/s
[info]                  ·gc.alloc.rate:            1552.401 MB/sec
[info]                  ·gc.alloc.rate.norm:       10992.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1678.818 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11887.119 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  24.000 ms
[info] Iteration   2: 222729.795 ops/s
[info]                  ·gc.alloc.rate:                                  1555.777 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10992.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.072 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.505 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1357.163 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9588.740 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                32.951 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 224030.303 ops/s
[info]                  ·gc.alloc.rate:                                  1565.062 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10992.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.477 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11957.117 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 222754.108 ops/s
[info]                  ·gc.alloc.rate:                                  1556.150 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10992.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.007 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9620.654 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 223558.092 ops/s
[info]                  ·gc.alloc.rate:            1561.549 MB/sec
[info]                  ·gc.alloc.rate.norm:       10992.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1702.181 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11981.930 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson":
[info]   223065.772 ±(99.9%) 2748.246 ops/s [Average]
[info]   (min, avg, max) = (222256.564, 223065.772, 224030.303), stdev = 713.711
[info]   CI (99.9%): [220317.527, 225814.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1558.188 ±(99.9%) 19.446 MB/sec [Average]
[info]   (min, avg, max) = (1552.401, 1558.188, 1565.062), stdev = 5.050
[info]   CI (99.9%): [1538.742, 1577.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   10992.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10992.002, 10992.002, 10992.002), stdev = 0.001
[info]   CI (99.9%): [10992.002, 10992.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.015 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.072), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.104 ±(99.9%) 0.865 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.104, 0.505), stdev = 0.225
[info]   CI (99.9%): [≈ 0, 0.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1560.529 ±(99.9%) 707.344 MB/sec [Average]
[info]   (min, avg, max) = (1357.163, 1560.529, 1702.477), stdev = 183.695
[info]   CI (99.9%): [853.185, 2267.873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   11007.112 ±(99.9%) 4931.696 B/op [Average]
[info]   (min, avg, max) = (9588.740, 11007.112, 11981.930), stdev = 1280.746
[info]   CI (99.9%): [6075.416, 15938.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 8.031 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.664), stdev = 2.086
[info]   CI (99.9%): [≈ 0, 8.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   6.590 ±(99.9%) 56.744 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.590, 32.951), stdev = 14.736
[info]   CI (99.9%): [≈ 0, 63.334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 9.200, 24.000), stdev = 8.408
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce
[info] # Run progress: 80.91% complete, ETA 00:15:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 541824.836 ops/s
[info] # Warmup Iteration   2: 810315.171 ops/s
[info] # Warmup Iteration   3: 827684.290 ops/s
[info] Iteration   1: 807966.667 ops/s
[info]                  ·gc.alloc.rate:                                  1856.427 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3616.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.178 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.347 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2035.746 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3965.283 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                6.488 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        15.000 ms
[info] Iteration   2: 829271.545 ops/s
[info]                  ·gc.alloc.rate:                                  1904.893 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3616.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.025 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3876.315 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 841834.883 ops/s
[info]                  ·gc.alloc.rate:            1933.780 MB/sec
[info]                  ·gc.alloc.rate.norm:       3616.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.701 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3182.032 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 827108.304 ops/s
[info]                  ·gc.alloc.rate:                                  1900.078 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3616.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.135 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3886.347 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 833812.409 ops/s
[info]                  ·gc.alloc.rate:                                  1916.203 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3616.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.427 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3212.591 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce":
[info]   827998.762 ±(99.9%) 48284.313 ops/s [Average]
[info]   (min, avg, max) = (807966.667, 827998.762, 841834.883), stdev = 12539.283
[info]   CI (99.9%): [779714.449, 876283.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1902.276 ±(99.9%) 110.607 MB/sec [Average]
[info]   (min, avg, max) = (1856.427, 1902.276, 1933.780), stdev = 28.724
[info]   CI (99.9%): [1791.670, 2012.883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   3616.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3616.000, 3616.001, 3616.001), stdev = 0.001
[info]   CI (99.9%): [3616.000, 3616.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.037 ±(99.9%) 0.304 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.178), stdev = 0.079
[info]   CI (99.9%): [≈ 0, 0.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.072 ±(99.9%) 0.593 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.072, 0.347), stdev = 0.154
[info]   CI (99.9%): [≈ 0, 0.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1904.807 ±(99.9%) 712.740 MB/sec [Average]
[info]   (min, avg, max) = (1701.701, 1904.807, 2042.135), stdev = 185.096
[info]   CI (99.9%): [1192.067, 2617.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   3624.514 ±(99.9%) 1508.099 B/op [Average]
[info]   (min, avg, max) = (3182.032, 3624.514, 3965.283), stdev = 391.649
[info]   CI (99.9%): [2116.414, 5132.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   1.298 ±(99.9%) 11.172 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.298, 6.488), stdev = 2.901
[info]   CI (99.9%): [≈ 0, 12.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.600, 15.000), stdev = 4.722
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala
[info] # Run progress: 81.18% complete, ETA 00:15:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_227b1689/target/5e31e36e/jackson-module-afterburner-2.9.4.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 475455.267 ops/s
[info] # Warmup Iteration   2: 1219646.763 ops/s
[info] # Warmup Iteration   3: 1234065.616 ops/s
[info] Iteration   1: 1239918.118 ops/s
[info]                  ·gc.alloc.rate:            838.113 MB/sec
[info]                  ·gc.alloc.rate.norm:       1064.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.048 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1278.466 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   2: 1271451.685 ops/s
[info]                  ·gc.alloc.rate:            859.699 MB/sec
[info]                  ·gc.alloc.rate.norm:       1064.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.398 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1246.798 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   3: 1274004.389 ops/s
[info]                  ·gc.alloc.rate:                   861.176 MB/sec
[info]                  ·gc.alloc.rate.norm:              1064.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             670.718 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        828.686 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.823 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 1265869.929 ops/s
[info]                  ·gc.alloc.rate:                   855.749 MB/sec
[info]                  ·gc.alloc.rate.norm:              1064.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1011.159 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1257.230 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 5.798 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   5: 1278582.201 ops/s
[info]                  ·gc.alloc.rate:                                  864.423 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1064.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.079 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.097 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.819 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       838.005 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala":
[info]   1265965.264 ±(99.9%) 58789.457 ops/s [Average]
[info]   (min, avg, max) = (1239918.118, 1265965.264, 1278582.201), stdev = 15267.435
[info]   CI (99.9%): [1207175.808, 1324754.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   855.832 ±(99.9%) 39.984 MB/sec [Average]
[info]   (min, avg, max) = (838.113, 855.832, 864.423), stdev = 10.384
[info]   CI (99.9%): [815.848, 895.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1064.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1064.000, 1064.000, 1064.000), stdev = 0.001
[info]   CI (99.9%): [1064.000, 1064.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.016 ±(99.9%) 0.135 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.079), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.019 ±(99.9%) 0.167 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.097), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   875.428 ±(99.9%) 701.994 MB/sec [Average]
[info]   (min, avg, max) = (670.718, 875.428, 1011.159), stdev = 182.306
[info]   CI (99.9%): [173.434, 1577.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1089.837 ±(99.9%) 902.762 B/op [Average]
[info]   (min, avg, max) = (828.686, 1089.837, 1278.466), stdev = 234.444
[info]   CI (99.9%): [187.075, 1992.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.822 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.663), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.324 ±(99.9%) 9.727 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.324, 5.798), stdev = 2.526
[info]   CI (99.9%): [≈ 0, 11.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.time":
[info]   52.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 10.400, 15.000), stdev = 5.128
[info]   CI (99.9%): [52.000, 52.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala
[info] # Run progress: 81.45% complete, ETA 00:14:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5357496.163 ops/s
[info] # Warmup Iteration   2: 6450522.935 ops/s
[info] # Warmup Iteration   3: 6545093.274 ops/s
[info] Iteration   1: 6712698.784 ops/s
[info]                  ·gc.alloc.rate:            750.735 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.861 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 157.744 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 6757623.325 ops/s
[info]                  ·gc.alloc.rate:            755.728 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.842 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 156.697 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 6710513.352 ops/s
[info]                  ·gc.alloc.rate:                   750.392 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.443 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        157.952 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.156 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 6657104.866 ops/s
[info]                  ·gc.alloc.rate:            744.575 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.378 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 238.593 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 6614023.772 ops/s
[info]                  ·gc.alloc.rate:                                  739.508 MB/sec
[info]                  ·gc.alloc.rate.norm:                             176.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.063 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            676.692 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       161.050 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                0.951 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala":
[info]   6690392.820 ±(99.9%) 214071.665 ops/s [Average]
[info]   (min, avg, max) = (6614023.772, 6690392.820, 6757623.325), stdev = 55593.732
[info]   CI (99.9%): [6476321.155, 6904464.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   748.188 ±(99.9%) 24.094 MB/sec [Average]
[info]   (min, avg, max) = (739.508, 748.188, 755.728), stdev = 6.257
[info]   CI (99.9%): [724.094, 772.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   176.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (176.000, 176.000, 176.000), stdev = 0.001
[info]   CI (99.9%): [176.000, 176.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.013 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.063), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.003 ±(99.9%) 0.026 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.015), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   741.043 ±(99.9%) 577.644 MB/sec [Average]
[info]   (min, avg, max) = (672.842, 741.043, 1009.378), stdev = 150.012
[info]   CI (99.9%): [163.400, 1318.687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   174.407 ±(99.9%) 138.307 B/op [Average]
[info]   (min, avg, max) = (156.697, 174.407, 238.593), stdev = 35.918
[info]   CI (99.9%): [36.100, 312.714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.221 ±(99.9%) 1.592 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.221, 0.951), stdev = 0.413
[info]   CI (99.9%): [≈ 0, 1.813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.800, 9.000), stdev = 1.483
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson
[info] # Run progress: 81.72% complete, ETA 00:14:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 108580.301 ops/s
[info] # Warmup Iteration   2: 486361.485 ops/s
[info] # Warmup Iteration   3: 481811.631 ops/s
[info] Iteration   1: 490023.943 ops/s
[info]                  ·gc.alloc.rate:                   1661.480 MB/sec
[info]                  ·gc.alloc.rate.norm:              5336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1683.445 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5406.542 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      5.329 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 17.116 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         21.000 ms
[info] Iteration   2: 496504.934 ops/s
[info]                  ·gc.alloc.rate:                                  1682.975 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5336.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.093 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.294 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.276 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4316.031 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 492306.697 ops/s
[info]                  ·gc.alloc.rate:                                  1668.870 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5336.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.782 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5441.235 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   4: 491186.426 ops/s
[info]                  ·gc.alloc.rate:                                  1664.998 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5336.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.657 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5453.485 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 481100.388 ops/s
[info]                  ·gc.alloc.rate:                                  1631.109 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5336.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.939 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5567.714 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson":
[info]   490224.478 ±(99.9%) 21782.050 ops/s [Average]
[info]   (min, avg, max) = (481100.388, 490224.478, 496504.934), stdev = 5656.729
[info]   CI (99.9%): [468442.428, 512006.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1661.886 ±(99.9%) 73.329 MB/sec [Average]
[info]   (min, avg, max) = (1631.109, 1661.886, 1682.975), stdev = 19.043
[info]   CI (99.9%): [1588.557, 1735.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5336.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5336.001, 5336.001, 5336.001), stdev = 0.001
[info]   CI (99.9%): [5336.001, 5336.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.020 ±(99.9%) 0.158 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.093), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.062 ±(99.9%) 0.500 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.294), stdev = 0.130
[info]   CI (99.9%): [≈ 0, 0.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1630.020 ±(99.9%) 579.299 MB/sec [Average]
[info]   (min, avg, max) = (1361.276, 1630.020, 1701.939), stdev = 150.442
[info]   CI (99.9%): [1050.721, 2209.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   5237.001 ±(99.9%) 1996.102 B/op [Average]
[info]   (min, avg, max) = (4316.031, 5237.001, 5567.714), stdev = 518.381
[info]   CI (99.9%): [3240.899, 7233.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 9.178 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 5.329), stdev = 2.383
[info]   CI (99.9%): [≈ 0, 10.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   3.423 ±(99.9%) 29.475 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.423, 17.116), stdev = 7.655
[info]   CI (99.9%): [≈ 0, 32.898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 9.400, 21.000), stdev = 7.232
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce
[info] # Run progress: 81.99% complete, ETA 00:14:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 346008.195 ops/s
[info] # Warmup Iteration   2: 584230.090 ops/s
[info] # Warmup Iteration   3: 581376.079 ops/s
[info] Iteration   1: 590909.496 ops/s
[info]                  ·gc.alloc.rate:                                  2054.847 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5472.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.071 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.189 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2039.407 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5430.885 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                8.871 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   2: 597259.974 ops/s
[info]                  ·gc.alloc.rate:            2076.290 MB/sec
[info]                  ·gc.alloc.rate.norm:       5472.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2042.120 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5381.949 B/op
[info]                  ·gc.count:                 6.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 599806.358 ops/s
[info]                  ·gc.alloc.rate:                                  2085.161 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5472.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.435 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6252.125 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 603350.247 ops/s
[info]                  ·gc.alloc.rate:                                  2097.511 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5472.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.172 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5327.634 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 602917.553 ops/s
[info]                  ·gc.alloc.rate:                                  2095.772 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5472.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.942 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5331.451 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce":
[info]   598848.726 ±(99.9%) 19567.524 ops/s [Average]
[info]   (min, avg, max) = (590909.496, 598848.726, 603350.247), stdev = 5081.624
[info]   CI (99.9%): [579281.202, 618416.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.alloc.rate":
[info]   2081.916 ±(99.9%) 66.975 MB/sec [Average]
[info]   (min, avg, max) = (2054.847, 2081.916, 2097.511), stdev = 17.393
[info]   CI (99.9%): [2014.941, 2148.891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5472.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5472.001, 5472.001, 5472.001), stdev = 0.001
[info]   CI (99.9%): [5472.001, 5472.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.017 ±(99.9%) 0.116 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.071), stdev = 0.030
[info]   CI (99.9%): [≈ 0, 0.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.045 ±(99.9%) 0.310 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.045, 0.189), stdev = 0.081
[info]   CI (99.9%): [≈ 0, 0.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2109.615 ±(99.9%) 587.282 MB/sec [Average]
[info]   (min, avg, max) = (2039.407, 2109.615, 2382.435), stdev = 152.515
[info]   CI (99.9%): [1522.333, 2696.898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   5544.809 ±(99.9%) 1531.189 B/op [Average]
[info]   (min, avg, max) = (5327.634, 5544.809, 6252.125), stdev = 397.645
[info]   CI (99.9%): [4013.620, 7075.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.737 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   1.774 ±(99.9%) 15.277 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.774, 8.871), stdev = 3.967
[info]   CI (99.9%): [≈ 0, 17.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 8.000), stdev = 1.304
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJacksonScala
[info] # Run progress: 82.26% complete, ETA 00:14:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 70933.978 ops/s
[info] # Warmup Iteration   2: 572570.454 ops/s
[info] # Warmup Iteration   3: 577972.811 ops/s
[info] Iteration   1: 585797.239 ops/s
[info]                  ·gc.alloc.rate:            905.034 MB/sec
[info]                  ·gc.alloc.rate.norm:       2432.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.012 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2706.035 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   2: 583721.939 ops/s
[info]                  ·gc.alloc.rate:            901.750 MB/sec
[info]                  ·gc.alloc.rate.norm:       2432.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1006.934 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2715.681 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   3: 586422.395 ops/s
[info]                  ·gc.alloc.rate:            906.032 MB/sec
[info]                  ·gc.alloc.rate.norm:       2432.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.368 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1802.107 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 581172.099 ops/s
[info]                  ·gc.alloc.rate:                   897.977 MB/sec
[info]                  ·gc.alloc.rate.norm:              2432.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1011.110 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2738.399 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 12.628 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   5: 580243.547 ops/s
[info]                  ·gc.alloc.rate:                                  896.525 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2432.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.251 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.681 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.112 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2769.967 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJacksonScala":
[info]   583471.444 ±(99.9%) 10525.452 ops/s [Average]
[info]   (min, avg, max) = (580243.547, 583471.444, 586422.395), stdev = 2733.427
[info]   CI (99.9%): [572945.992, 593996.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   901.464 ±(99.9%) 16.137 MB/sec [Average]
[info]   (min, avg, max) = (896.525, 901.464, 906.032), stdev = 4.191
[info]   CI (99.9%): [885.327, 917.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2432.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2432.001, 2432.001, 2432.001), stdev = 0.001
[info]   CI (99.9%): [2432.001, 2432.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.050 ±(99.9%) 0.432 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.251), stdev = 0.112
[info]   CI (99.9%): [≈ 0, 0.482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.136 ±(99.9%) 1.172 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.136, 0.681), stdev = 0.304
[info]   CI (99.9%): [≈ 0, 1.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   943.507 ±(99.9%) 586.222 MB/sec [Average]
[info]   (min, avg, max) = (671.368, 943.507, 1021.112), stdev = 152.240
[info]   CI (99.9%): [357.285, 1529.729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   2546.438 ±(99.9%) 1605.027 B/op [Average]
[info]   (min, avg, max) = (1802.107, 2546.438, 2769.967), stdev = 416.820
[info]   CI (99.9%): [941.411, 4151.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 8.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.663), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   2.526 ±(99.9%) 21.746 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.526, 12.628), stdev = 5.647
[info]   CI (99.9%): [≈ 0, 24.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJacksonScala:·gc.time":
[info]   53.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 10.600, 15.000), stdev = 4.722
[info]   CI (99.9%): [53.000, 53.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala
[info] # Run progress: 82.53% complete, ETA 00:13:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4618313.044 ops/s
[info] # Warmup Iteration   2: 3783060.267 ops/s
[info] # Warmup Iteration   3: 3839467.453 ops/s
[info] Iteration   1: 3839096.226 ops/s
[info]                  ·gc.alloc.rate:            956.134 MB/sec
[info]                  ·gc.alloc.rate.norm:       392.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.084 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 276.364 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 3810469.611 ops/s
[info]                  ·gc.alloc.rate:            948.905 MB/sec
[info]                  ·gc.alloc.rate.norm:       392.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.046 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 417.671 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 3763899.847 ops/s
[info]                  ·gc.alloc.rate:                   937.530 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1014.617 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        424.232 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.393 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 3816455.119 ops/s
[info]                  ·gc.alloc.rate:                                  950.419 MB/sec
[info]                  ·gc.alloc.rate.norm:                             392.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.058 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.024 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.025 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       421.122 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 3803711.287 ops/s
[info]                  ·gc.alloc.rate:                                  947.317 MB/sec
[info]                  ·gc.alloc.rate.norm:                             392.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.094 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       422.529 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala":
[info]   3806726.418 ±(99.9%) 105448.423 ops/s [Average]
[info]   (min, avg, max) = (3763899.847, 3806726.418, 3839096.226), stdev = 27384.621
[info]   CI (99.9%): [3701277.995, 3912174.841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   948.061 ±(99.9%) 26.038 MB/sec [Average]
[info]   (min, avg, max) = (937.530, 948.061, 956.134), stdev = 6.762
[info]   CI (99.9%): [922.023, 974.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   392.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (392.000, 392.000, 392.000), stdev = 0.001
[info]   CI (99.9%): [392.000, 392.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.012 ±(99.9%) 0.100 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.058), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.005 ±(99.9%) 0.041 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.024), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   948.373 ±(99.9%) 590.661 MB/sec [Average]
[info]   (min, avg, max) = (674.084, 948.373, 1021.094), stdev = 153.393
[info]   CI (99.9%): [357.712, 1539.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   392.383 ±(99.9%) 249.914 B/op [Average]
[info]   (min, avg, max) = (276.364, 392.383, 424.232), stdev = 64.902
[info]   CI (99.9%): [142.470, 642.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.279 ±(99.9%) 2.398 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.279, 1.393), stdev = 0.623
[info]   CI (99.9%): [≈ 0, 2.677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.600, 9.000), stdev = 2.966
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson
[info] # Run progress: 82.80% complete, ETA 00:13:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 108401.425 ops/s
[info] # Warmup Iteration   2: 314043.384 ops/s
[info] # Warmup Iteration   3: 322103.274 ops/s
[info] Iteration   1: 326708.576 ops/s
[info]                  ·gc.alloc.rate:                                  1825.611 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8792.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.020 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.098 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1689.186 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8134.989 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     5.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                25.673 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        17.000 ms
[info] Iteration   2: 327926.953 ops/s
[info]                  ·gc.alloc.rate:                                  1832.188 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8792.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.045 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.214 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.817 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9802.734 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 331145.778 ops/s
[info]                  ·gc.alloc.rate:                                  1849.881 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8792.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.963 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8088.983 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 332859.017 ops/s
[info]                  ·gc.alloc.rate:                                  1859.405 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8792.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.350 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9657.038 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 332543.323 ops/s
[info]                  ·gc.alloc.rate:                                  1857.576 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8792.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.890 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8055.129 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson":
[info]   330236.729 ±(99.9%) 10686.155 ops/s [Average]
[info]   (min, avg, max) = (326708.576, 330236.729, 332859.017), stdev = 2775.161
[info]   CI (99.9%): [319550.574, 340922.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1844.932 ±(99.9%) 58.701 MB/sec [Average]
[info]   (min, avg, max) = (1825.611, 1844.932, 1859.405), stdev = 15.244
[info]   CI (99.9%): [1786.231, 1903.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   8792.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8792.001, 8792.001, 8792.001), stdev = 0.001
[info]   CI (99.9%): [8792.001, 8792.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.014 ±(99.9%) 0.074 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.014, 0.045), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.066 ±(99.9%) 0.353 B/op [Average]
[info]   (min, avg, max) = (0.006, 0.066, 0.214), stdev = 0.092
[info]   CI (99.9%): [≈ 0, 0.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1835.641 ±(99.9%) 727.708 MB/sec [Average]
[info]   (min, avg, max) = (1689.186, 1835.641, 2042.817), stdev = 188.983
[info]   CI (99.9%): [1107.933, 2563.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   8747.774 ±(99.9%) 3459.675 B/op [Average]
[info]   (min, avg, max) = (8055.129, 8747.774, 9802.734), stdev = 898.467
[info]   CI (99.9%): [5288.100, 12207.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 9.180 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 5.331), stdev = 2.384
[info]   CI (99.9%): [≈ 0, 10.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   5.135 ±(99.9%) 44.210 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.135, 25.673), stdev = 11.481
[info]   CI (99.9%): [≈ 0, 49.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.400, 17.000), stdev = 5.367
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce
[info] # Run progress: 83.06% complete, ETA 00:13:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 209511.393 ops/s
[info] # Warmup Iteration   2: 445793.519 ops/s
[info] # Warmup Iteration   3: 447190.046 ops/s
[info] Iteration   1: 447612.580 ops/s
[info]                  ·gc.alloc.rate:            1148.718 MB/sec
[info]                  ·gc.alloc.rate.norm:       4040.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1010.953 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3555.487 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 443379.655 ops/s
[info]                  ·gc.alloc.rate:            1137.861 MB/sec
[info]                  ·gc.alloc.rate.norm:       4040.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1347.986 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4786.053 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   3: 441746.180 ops/s
[info]                  ·gc.alloc.rate:                                  1134.140 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4040.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.135 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.481 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1018.068 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3626.533 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                11.867 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 443331.482 ops/s
[info]                  ·gc.alloc.rate:                                  1137.846 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4040.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.017 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.061 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.441 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4833.891 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 448391.269 ops/s
[info]                  ·gc.alloc.rate:            1151.098 MB/sec
[info]                  ·gc.alloc.rate.norm:       4040.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.284 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3584.392 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce":
[info]   444892.233 ±(99.9%) 11270.129 ops/s [Average]
[info]   (min, avg, max) = (441746.180, 444892.233, 448391.269), stdev = 2926.817
[info]   CI (99.9%): [433622.104, 456162.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1141.933 ±(99.9%) 28.819 MB/sec [Average]
[info]   (min, avg, max) = (1134.140, 1141.933, 1151.098), stdev = 7.484
[info]   CI (99.9%): [1113.114, 1170.752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   4040.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4040.001, 4040.001, 4040.001), stdev = 0.001
[info]   CI (99.9%): [4040.001, 4040.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.030 ±(99.9%) 0.227 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.135), stdev = 0.059
[info]   CI (99.9%): [≈ 0, 0.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.108 ±(99.9%) 0.808 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.108, 0.481), stdev = 0.210
[info]   CI (99.9%): [≈ 0, 0.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1151.946 ±(99.9%) 713.135 MB/sec [Average]
[info]   (min, avg, max) = (1010.953, 1151.946, 1361.441), stdev = 185.199
[info]   CI (99.9%): [438.811, 1865.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   4077.271 ±(99.9%) 2578.206 B/op [Average]
[info]   (min, avg, max) = (3555.487, 4077.271, 4833.891), stdev = 669.552
[info]   CI (99.9%): [1499.065, 6655.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.737 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   2.373 ±(99.9%) 20.436 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.373, 11.867), stdev = 5.307
[info]   CI (99.9%): [≈ 0, 22.809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.200, 15.000), stdev = 5.263
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala
[info] # Run progress: 83.33% complete, ETA 00:13:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2694214.864 ops/s
[info] # Warmup Iteration   2: 3155180.274 ops/s
[info] # Warmup Iteration   3: 3285282.010 ops/s
[info] Iteration   1: 3338785.000 ops/s
[info]                  ·gc.alloc.rate:            712.922 MB/sec
[info]                  ·gc.alloc.rate.norm:       336.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.914 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 317.144 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 3323908.853 ops/s
[info]                  ·gc.alloc.rate:            709.532 MB/sec
[info]                  ·gc.alloc.rate.norm:       336.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.091 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 477.857 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 3218382.216 ops/s
[info]                  ·gc.alloc.rate:            687.037 MB/sec
[info]                  ·gc.alloc.rate.norm:       336.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.754 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 329.015 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 3321162.647 ops/s
[info]                  ·gc.alloc.rate:            708.944 MB/sec
[info]                  ·gc.alloc.rate.norm:       336.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.708 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 318.826 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 3214561.224 ops/s
[info]                  ·gc.alloc.rate:                   686.182 MB/sec
[info]                  ·gc.alloc.rate.norm:              336.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.715 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        329.406 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.957 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala":
[info]   3283359.988 ±(99.9%) 236591.943 ops/s [Average]
[info]   (min, avg, max) = (3214561.224, 3283359.988, 3338785.000), stdev = 61442.176
[info]   CI (99.9%): [3046768.045, 3519951.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   700.923 ±(99.9%) 50.668 MB/sec [Average]
[info]   (min, avg, max) = (686.182, 700.923, 712.922), stdev = 13.158
[info]   CI (99.9%): [650.256, 751.591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   336.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (336.000, 336.000, 336.000), stdev = 0.001
[info]   CI (99.9%): [336.000, 336.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   740.036 ±(99.9%) 579.161 MB/sec [Average]
[info]   (min, avg, max) = (672.708, 740.036, 1009.091), stdev = 150.406
[info]   CI (99.9%): [160.876, 1319.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   354.450 ±(99.9%) 266.531 B/op [Average]
[info]   (min, avg, max) = (317.144, 354.450, 477.857), stdev = 69.217
[info]   CI (99.9%): [87.918, 620.981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.391 ±(99.9%) 3.370 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.391, 1.957), stdev = 0.875
[info]   CI (99.9%): [≈ 0, 3.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.200, 10.000), stdev = 1.643
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson
[info] # Run progress: 83.60% complete, ETA 00:13:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 66297.334 ops/s
[info] # Warmup Iteration   2: 348036.127 ops/s
[info] # Warmup Iteration   3: 352751.376 ops/s
[info] Iteration   1: 353255.813 ops/s
[info]                  ·gc.alloc.rate:                   1277.123 MB/sec
[info]                  ·gc.alloc.rate.norm:              5688.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1343.399 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5983.180 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.968 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   2: 353262.240 ops/s
[info]                  ·gc.alloc.rate:                   1276.380 MB/sec
[info]                  ·gc.alloc.rate.norm:              5688.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1007.629 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        4490.353 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 17.807 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   3: 357340.731 ops/s
[info]                  ·gc.alloc.rate:                                  1291.378 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5688.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.188 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.826 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1360.887 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5994.160 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                2.934 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 356086.502 ops/s
[info]                  ·gc.alloc.rate:                                  1287.030 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5688.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.754 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6018.244 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 358750.214 ops/s
[info]                  ·gc.alloc.rate:            1296.779 MB/sec
[info]                  ·gc.alloc.rate.norm:       5688.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.837 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5973.360 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson":
[info]   355739.100 ±(99.9%) 9442.770 ops/s [Average]
[info]   (min, avg, max) = (353255.813, 355739.100, 358750.214), stdev = 2452.257
[info]   CI (99.9%): [346296.330, 365181.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1285.738 ±(99.9%) 34.289 MB/sec [Average]
[info]   (min, avg, max) = (1276.380, 1285.738, 1296.779), stdev = 8.905
[info]   CI (99.9%): [1251.449, 1320.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5688.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5688.001, 5688.001, 5688.001), stdev = 0.001
[info]   CI (99.9%): [5688.001, 5688.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.038 ±(99.9%) 0.322 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.038, 0.188), stdev = 0.084
[info]   CI (99.9%): [≈ 0, 0.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.167 ±(99.9%) 1.419 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.167, 0.826), stdev = 0.369
[info]   CI (99.9%): [≈ 0, 1.586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1287.101 ±(99.9%) 602.342 MB/sec [Average]
[info]   (min, avg, max) = (1007.629, 1287.101, 1361.837), stdev = 156.426
[info]   CI (99.9%): [684.759, 1889.444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   5691.859 ±(99.9%) 2587.135 B/op [Average]
[info]   (min, avg, max) = (4490.353, 5691.859, 6018.244), stdev = 671.871
[info]   CI (99.9%): [3104.724, 8278.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 6.437 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 3.996), stdev = 1.672
[info]   CI (99.9%): [≈ 0, 7.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   4.742 ±(99.9%) 28.692 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.742, 17.807), stdev = 7.451
[info]   CI (99.9%): [≈ 0, 33.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 9.000, 19.000), stdev = 7.106
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce
[info] # Run progress: 83.87% complete, ETA 00:12:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1172174.844 ops/s
[info] # Warmup Iteration   2: 2058236.534 ops/s
[info] # Warmup Iteration   3: 2097119.830 ops/s
[info] Iteration   1: 2133411.318 ops/s
[info]                  ·gc.alloc.rate:                                  3035.695 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2240.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3062.833 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2260.025 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   2: 2099686.825 ops/s
[info]                  ·gc.alloc.rate:                                  2988.815 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2240.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3064.017 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2296.362 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 2082875.217 ops/s
[info]                  ·gc.alloc.rate:            2965.415 MB/sec
[info]                  ·gc.alloc.rate.norm:       2240.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      3064.576 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2314.904 B/op
[info]                  ·gc.count:                 9.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 2080848.005 ops/s
[info]                  ·gc.alloc.rate:                                  2961.240 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2240.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2723.001 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2059.787 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 2082190.203 ops/s
[info]                  ·gc.alloc.rate:                                  2963.112 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2240.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.262 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2315.710 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce":
[info]   2095802.313 ±(99.9%) 86222.559 ops/s [Average]
[info]   (min, avg, max) = (2080848.005, 2095802.313, 2133411.318), stdev = 22391.725
[info]   CI (99.9%): [2009579.754, 2182024.873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate":
[info]   2982.855 ±(99.9%) 121.596 MB/sec [Average]
[info]   (min, avg, max) = (2961.240, 2982.855, 3035.695), stdev = 31.578
[info]   CI (99.9%): [2861.260, 3104.451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2240.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2240.000, 2240.000, 2240.000), stdev = 0.001
[info]   CI (99.9%): [2240.000, 2240.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.002 ±(99.9%) 0.007 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.004), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.002 ±(99.9%) 0.005 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2995.538 ±(99.9%) 586.662 MB/sec [Average]
[info]   (min, avg, max) = (2723.001, 2995.538, 3064.576), stdev = 152.354
[info]   CI (99.9%): [2408.876, 3582.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   2249.357 ±(99.9%) 417.219 B/op [Average]
[info]   (min, avg, max) = (2059.787, 2249.357, 2315.710), stdev = 108.350
[info]   CI (99.9%): [1832.138, 2666.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.count":
[info]   44.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.800, 9.000), stdev = 0.447
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.200, 8.000), stdev = 0.837
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava
[info] # Run progress: 84.14% complete, ETA 00:12:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.894 ops/s
[info] # Warmup Iteration   2: 743008.593 ops/s
[info] # Warmup Iteration   3: 774839.342 ops/s
[info] Iteration   1: 757018.913 ops/s
[info]                  ·gc.alloc.rate:            357.955 MB/sec
[info]                  ·gc.alloc.rate.norm:       744.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.836 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 693.870 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 769803.027 ops/s
[info]                  ·gc.alloc.rate:            363.808 MB/sec
[info]                  ·gc.alloc.rate.norm:       744.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.664 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 682.355 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 770731.258 ops/s
[info]                  ·gc.alloc.rate:                   364.318 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             333.064 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        680.175 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.360 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 773814.331 ops/s
[info]                  ·gc.alloc.rate:            365.836 MB/sec
[info]                  ·gc.alloc.rate.norm:       744.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.787 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 678.822 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 774772.164 ops/s
[info]                  ·gc.alloc.rate:            366.232 MB/sec
[info]                  ·gc.alloc.rate.norm:       744.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.694 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 677.898 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava":
[info]   769227.939 ±(99.9%) 27460.277 ops/s [Average]
[info]   (min, avg, max) = (757018.913, 769227.939, 774772.164), stdev = 7131.347
[info]   CI (99.9%): [741767.662, 796688.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   363.630 ±(99.9%) 12.822 MB/sec [Average]
[info]   (min, avg, max) = (357.955, 363.630, 366.232), stdev = 3.330
[info]   CI (99.9%): [350.808, 376.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   744.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (744.001, 744.001, 744.001), stdev = 0.001
[info]   CI (99.9%): [744.000, 744.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   333.609 ±(99.9%) 1.203 MB/sec [Average]
[info]   (min, avg, max) = (333.064, 333.609, 333.836), stdev = 0.312
[info]   CI (99.9%): [332.406, 334.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   682.624 ±(99.9%) 25.053 B/op [Average]
[info]   (min, avg, max) = (677.898, 682.624, 693.870), stdev = 6.506
[info]   CI (99.9%): [657.571, 707.677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   0.272 ±(99.9%) 2.343 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.272, 1.360), stdev = 0.608
[info]   CI (99.9%): [≈ 0, 2.615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala
[info] # Run progress: 84.41% complete, ETA 00:12:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 36101.045 ops/s
[info] # Warmup Iteration   2: 263054.440 ops/s
[info] # Warmup Iteration   3: 272803.229 ops/s
[info] Iteration   1: 275026.399 ops/s
[info]                  ·gc.alloc.rate:            503.303 MB/sec
[info]                  ·gc.alloc.rate.norm:       2880.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.765 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1921.314 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 274881.991 ops/s
[info]                  ·gc.alloc.rate:                   503.000 MB/sec
[info]                  ·gc.alloc.rate.norm:              2880.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.131 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3848.384 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.814 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 275598.888 ops/s
[info]                  ·gc.alloc.rate:            504.245 MB/sec
[info]                  ·gc.alloc.rate.norm:       2880.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.349 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1921.061 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 276023.089 ops/s
[info]                  ·gc.alloc.rate:                   505.150 MB/sec
[info]                  ·gc.alloc.rate.norm:              2880.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             671.560 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3828.750 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.798 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 276993.673 ops/s
[info]                  ·gc.alloc.rate:            506.804 MB/sec
[info]                  ·gc.alloc.rate.norm:       2880.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.356 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1911.402 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala":
[info]   275704.808 ±(99.9%) 3284.895 ops/s [Average]
[info]   (min, avg, max) = (274881.991, 275704.808, 276993.673), stdev = 853.077
[info]   CI (99.9%): [272419.913, 278989.703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   504.501 ±(99.9%) 5.927 MB/sec [Average]
[info]   (min, avg, max) = (503.000, 504.501, 506.804), stdev = 1.539
[info]   CI (99.9%): [498.573, 510.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2880.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2880.001, 2880.002, 2880.002), stdev = 0.001
[info]   CI (99.9%): [2880.001, 2880.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   470.432 ±(99.9%) 707.997 MB/sec [Average]
[info]   (min, avg, max) = (335.765, 470.432, 672.131), stdev = 183.865
[info]   CI (99.9%): [≈ 0, 1178.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   2686.182 ±(99.9%) 4050.913 B/op [Average]
[info]   (min, avg, max) = (1911.402, 2686.182, 3848.384), stdev = 1052.009
[info]   CI (99.9%): [≈ 0, 6737.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.522 ±(99.9%) 8.028 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.522, 3.814), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 9.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 9.000), stdev = 2.408
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala
[info] # Run progress: 84.68% complete, ETA 00:12:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 600585.861 ops/s
[info] # Warmup Iteration   2: 682941.460 ops/s
[info] # Warmup Iteration   3: 668810.123 ops/s
[info] Iteration   1: 684536.942 ops/s
[info]                  ·gc.alloc.rate:            431.367 MB/sec
[info]                  ·gc.alloc.rate.norm:       992.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.999 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 774.987 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 683351.898 ops/s
[info]                  ·gc.alloc.rate:            430.680 MB/sec
[info]                  ·gc.alloc.rate.norm:       992.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.095 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1552.666 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 681693.392 ops/s
[info]                  ·gc.alloc.rate:            429.584 MB/sec
[info]                  ·gc.alloc.rate.norm:       992.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.010 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 778.228 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 682903.465 ops/s
[info]                  ·gc.alloc.rate:            430.380 MB/sec
[info]                  ·gc.alloc.rate.norm:       992.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.035 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 776.847 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 671480.523 ops/s
[info]                  ·gc.alloc.rate:            423.143 MB/sec
[info]                  ·gc.alloc.rate.norm:       992.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.994 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1580.088 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala":
[info]   680793.244 ±(99.9%) 20425.848 ops/s [Average]
[info]   (min, avg, max) = (671480.523, 680793.244, 684536.942), stdev = 5304.528
[info]   CI (99.9%): [660367.396, 701219.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   429.031 ±(99.9%) 12.911 MB/sec [Average]
[info]   (min, avg, max) = (423.143, 429.031, 431.367), stdev = 3.353
[info]   CI (99.9%): [416.119, 441.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   992.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (992.001, 992.001, 992.001), stdev = 0.001
[info]   CI (99.9%): [992.001, 992.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   471.827 ±(99.9%) 710.824 MB/sec [Average]
[info]   (min, avg, max) = (336.999, 471.827, 674.095), stdev = 184.599
[info]   CI (99.9%): [≈ 0, 1182.651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1092.563 ±(99.9%) 1665.947 B/op [Average]
[info]   (min, avg, max) = (774.987, 1092.563, 1580.088), stdev = 432.641
[info]   CI (99.9%): [≈ 0, 2758.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 5.000), stdev = 1.095
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless
[info] # Run progress: 84.95% complete, ETA 00:12:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3114530.780 ops/s
[info] # Warmup Iteration   2: 3418955.812 ops/s
[info] # Warmup Iteration   3: 3479210.306 ops/s
[info] Iteration   1: 3512208.017 ops/s
[info]                  ·gc.alloc.rate:            1124.670 MB/sec
[info]                  ·gc.alloc.rate.norm:       504.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.179 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 453.141 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 3485284.183 ops/s
[info]                  ·gc.alloc.rate:                   1116.080 MB/sec
[info]                  ·gc.alloc.rate.norm:              504.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.244 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        608.841 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.504 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 3441852.368 ops/s
[info]                  ·gc.alloc.rate:                                  1102.141 MB/sec
[info]                  ·gc.alloc.rate.norm:                             504.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.103 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.047 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.145 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       466.961 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 3463435.371 ops/s
[info]                  ·gc.alloc.rate:                                  1109.047 MB/sec
[info]                  ·gc.alloc.rate.norm:                             504.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.194 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       464.076 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 3423842.698 ops/s
[info]                  ·gc.alloc.rate:            1096.349 MB/sec
[info]                  ·gc.alloc.rate.norm:       504.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.147 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 469.429 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless":
[info]   3465324.528 ±(99.9%) 134382.823 ops/s [Average]
[info]   (min, avg, max) = (3423842.698, 3465324.528, 3512208.017), stdev = 34898.792
[info]   CI (99.9%): [3330941.705, 3599707.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate":
[info]   1109.657 ±(99.9%) 43.078 MB/sec [Average]
[info]   (min, avg, max) = (1096.349, 1109.657, 1124.670), stdev = 11.187
[info]   CI (99.9%): [1066.579, 1152.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm":
[info]   504.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (504.000, 504.000, 504.000), stdev = 0.001
[info]   CI (99.9%): [504.000, 504.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.021 ±(99.9%) 0.176 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.103), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.010 ±(99.9%) 0.081 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.047), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.G1_Old_Gen":
[info]   1084.582 ±(99.9%) 567.798 MB/sec [Average]
[info]   (min, avg, max) = (1011.179, 1084.582, 1348.244), stdev = 147.455
[info]   CI (99.9%): [516.784, 1652.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.G1_Old_Gen.norm":
[info]   492.490 ±(99.9%) 251.598 B/op [Average]
[info]   (min, avg, max) = (453.141, 492.490, 608.841), stdev = 65.339
[info]   CI (99.9%): [240.892, 744.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.G1_Survivor_Space.norm":
[info]   0.301 ±(99.9%) 2.590 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.301, 1.504), stdev = 0.673
[info]   CI (99.9%): [≈ 0, 2.891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.000, 11.000), stdev = 3.674
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump
[info] # Run progress: 85.22% complete, ETA 00:11:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6359758.831 ops/s
[info] # Warmup Iteration   2: 6591520.065 ops/s
[info] # Warmup Iteration   3: 6939209.910 ops/s
[info] Iteration   1: 6981949.274 ops/s
[info]                  ·gc.alloc.rate:            567.702 MB/sec
[info]                  ·gc.alloc.rate.norm:       128.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.994 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 151.966 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 7021755.593 ops/s
[info]                  ·gc.alloc.rate:            570.892 MB/sec
[info]                  ·gc.alloc.rate.norm:       128.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.928 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 151.102 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 7006595.596 ops/s
[info]                  ·gc.alloc.rate:            569.685 MB/sec
[info]                  ·gc.alloc.rate.norm:       128.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.978 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 75.714 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 6960933.797 ops/s
[info]                  ·gc.alloc.rate:            566.073 MB/sec
[info]                  ·gc.alloc.rate.norm:       128.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.090 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 152.425 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 6976194.835 ops/s
[info]                  ·gc.alloc.rate:            567.293 MB/sec
[info]                  ·gc.alloc.rate.norm:       128.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.045 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 152.087 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump":
[info]   6989485.819 ±(99.9%) 93981.560 ops/s [Average]
[info]   (min, avg, max) = (6960933.797, 6989485.819, 7021755.593), stdev = 24406.713
[info]   CI (99.9%): [6895504.259, 7083467.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate":
[info]   568.329 ±(99.9%) 7.447 MB/sec [Average]
[info]   (min, avg, max) = (566.073, 568.329, 570.892), stdev = 1.934
[info]   CI (99.9%): [560.881, 575.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm":
[info]   128.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (128.000, 128.000, 128.000), stdev = 0.001
[info]   CI (99.9%): [128.000, 128.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.G1_Old_Gen":
[info]   606.607 ±(99.9%) 580.396 MB/sec [Average]
[info]   (min, avg, max) = (336.978, 606.607, 674.090), stdev = 150.727
[info]   CI (99.9%): [26.211, 1187.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.G1_Old_Gen.norm":
[info]   136.659 ±(99.9%) 131.201 B/op [Average]
[info]   (min, avg, max) = (75.714, 136.659, 152.425), stdev = 34.073
[info]   CI (99.9%): [5.458, 267.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 6.000), stdev = 1.095
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson
[info] # Run progress: 85.48% complete, ETA 00:11:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15117.049 ops/s
[info] # Warmup Iteration   2: 164158.867 ops/s
[info] # Warmup Iteration   3: 171514.747 ops/s
[info] Iteration   1: 175229.076 ops/s
[info]                  ·gc.alloc.rate:            1171.994 MB/sec
[info]                  ·gc.alloc.rate.norm:       10528.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.055 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9046.360 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   2: 172715.989 ops/s
[info]                  ·gc.alloc.rate:            1155.511 MB/sec
[info]                  ·gc.alloc.rate.norm:       10528.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1343.154 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12237.636 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   3: 173881.085 ops/s
[info]                  ·gc.alloc.rate:                                  1163.275 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10528.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.043 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.387 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1016.655 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9201.050 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                42.207 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   4: 174129.834 ops/s
[info]                  ·gc.alloc.rate:                                  1164.742 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10528.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.023 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.209 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.121 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9229.829 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 176523.046 ops/s
[info]                  ·gc.alloc.rate:                                  1180.833 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10528.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.611 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       12139.775 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson":
[info]   174495.806 ±(99.9%) 5555.798 ops/s [Average]
[info]   (min, avg, max) = (172715.989, 174495.806, 176523.046), stdev = 1442.823
[info]   CI (99.9%): [168940.008, 180051.604] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1167.271 ±(99.9%) 36.879 MB/sec [Average]
[info]   (min, avg, max) = (1155.511, 1167.271, 1180.833), stdev = 9.577
[info]   CI (99.9%): [1130.392, 1204.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   10528.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10528.002, 10528.002, 10528.003), stdev = 0.001
[info]   CI (99.9%): [10528.002, 10528.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.013 ±(99.9%) 0.074 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.043), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.122 ±(99.9%) 0.667 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.122, 0.387), stdev = 0.173
[info]   CI (99.9%): [≈ 0, 0.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1149.919 ±(99.9%) 712.399 MB/sec [Average]
[info]   (min, avg, max) = (1007.055, 1149.919, 1361.611), stdev = 185.008
[info]   CI (99.9%): [437.520, 1862.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   10370.930 ±(99.9%) 6396.770 B/op [Average]
[info]   (min, avg, max) = (9046.360, 10370.930, 12237.636), stdev = 1661.221
[info]   CI (99.9%): [3974.160, 16767.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 8.031 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.664), stdev = 2.086
[info]   CI (99.9%): [≈ 0, 8.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   8.441 ±(99.9%) 72.682 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.441, 42.207), stdev = 18.875
[info]   CI (99.9%): [≈ 0, 81.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.time":
[info]   49.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 9.800, 18.000), stdev = 6.870
[info]   CI (99.9%): [49.000, 49.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce
[info] # Run progress: 85.75% complete, ETA 00:11:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 448431.526 ops/s
[info] # Warmup Iteration   2: 664336.095 ops/s
[info] # Warmup Iteration   3: 661926.489 ops/s
[info] Iteration   1: 675050.781 ops/s
[info]                  ·gc.alloc.rate:            2591.147 MB/sec
[info]                  ·gc.alloc.rate.norm:       6040.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2383.184 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5555.236 B/op
[info]                  ·gc.count:                 7.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 664763.600 ops/s
[info]                  ·gc.alloc.rate:                                  2550.537 MB/sec
[info]                  ·gc.alloc.rate.norm:                             6040.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.513 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6447.263 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 676339.293 ops/s
[info]                  ·gc.alloc.rate:                                  2595.156 MB/sec
[info]                  ·gc.alloc.rate.norm:                             6040.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.772 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6337.015 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 666085.394 ops/s
[info]                  ·gc.alloc.rate:                                  2556.073 MB/sec
[info]                  ·gc.alloc.rate.norm:                             6040.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.625 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5630.143 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   5: 658376.162 ops/s
[info]                  ·gc.alloc.rate:                                  2526.155 MB/sec
[info]                  ·gc.alloc.rate.norm:                             6040.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.630 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6509.769 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce":
[info]   668123.046 ±(99.9%) 28940.086 ops/s [Average]
[info]   (min, avg, max) = (658376.162, 668123.046, 676339.293), stdev = 7515.648
[info]   CI (99.9%): [639182.960, 697063.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.alloc.rate":
[info]   2563.814 ±(99.9%) 111.997 MB/sec [Average]
[info]   (min, avg, max) = (2526.155, 2563.814, 2595.156), stdev = 29.085
[info]   CI (99.9%): [2451.816, 2675.811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   6040.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6040.001, 6040.001, 6040.001), stdev = 0.001
[info]   CI (99.9%): [6040.001, 6040.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.002 ±(99.9%) 0.007 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.005), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.005 ±(99.9%) 0.016 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.011), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2586.745 ±(99.9%) 716.527 MB/sec [Average]
[info]   (min, avg, max) = (2382.625, 2586.745, 2722.772), stdev = 186.080
[info]   CI (99.9%): [1870.218, 3303.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   6095.885 ±(99.9%) 1787.677 B/op [Average]
[info]   (min, avg, max) = (5555.236, 6095.885, 6509.769), stdev = 464.254
[info]   CI (99.9%): [4308.209, 7883.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.count":
[info]   38.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.600, 8.000), stdev = 0.548
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.600, 10.000), stdev = 1.817
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala
[info] # Run progress: 86.02% complete, ETA 00:11:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2809551.929 ops/s
[info] # Warmup Iteration   2: 3398862.493 ops/s
[info] # Warmup Iteration   3: 3422429.813 ops/s
[info] Iteration   1: 3412805.851 ops/s
[info]                  ·gc.alloc.rate:                                  2202.507 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1016.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.014 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.864 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       941.897 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 3434237.760 ops/s
[info]                  ·gc.alloc.rate:                                  2216.639 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1016.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.440 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1091.995 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 3435830.655 ops/s
[info]                  ·gc.alloc.rate:                                  2217.717 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1016.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.500 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1091.492 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 3407755.062 ops/s
[info]                  ·gc.alloc.rate:                                  2200.337 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1016.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.807 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       943.261 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 3309863.473 ops/s
[info]                  ·gc.alloc.rate:                                  2136.318 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1016.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.987 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       971.138 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala":
[info]   3400098.560 ±(99.9%) 200129.192 ops/s [Average]
[info]   (min, avg, max) = (3309863.473, 3400098.560, 3435830.655), stdev = 51972.916
[info]   CI (99.9%): [3199969.368, 3600227.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2194.704 ±(99.9%) 129.331 MB/sec [Average]
[info]   (min, avg, max) = (2136.318, 2194.704, 2217.717), stdev = 33.587
[info]   CI (99.9%): [2065.373, 2324.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1016.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1016.000, 1016.000, 1016.000), stdev = 0.001
[info]   CI (99.9%): [1016.000, 1016.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.004 ±(99.9%) 0.021 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.004, 0.014), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.002 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 0.002, 0.006), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   2178.319 ±(99.9%) 717.620 MB/sec [Average]
[info]   (min, avg, max) = (2041.864, 2178.319, 2382.500), stdev = 186.364
[info]   CI (99.9%): [1460.700, 2895.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1007.956 ±(99.9%) 297.933 B/op [Average]
[info]   (min, avg, max) = (941.897, 1007.956, 1091.995), stdev = 77.372
[info]   CI (99.9%): [710.024, 1305.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.count":
[info]   32.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson
[info] # Run progress: 86.29% complete, ETA 00:10:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 43762.768 ops/s
[info] # Warmup Iteration   2: 233951.423 ops/s
[info] # Warmup Iteration   3: 235542.079 ops/s
[info] Iteration   1: 236907.596 ops/s
[info]                  ·gc.alloc.rate:                   1691.665 MB/sec
[info]                  ·gc.alloc.rate.norm:              11240.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1685.082 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        11196.258 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 30.978 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         20.000 ms
[info] Iteration   2: 242153.315 ops/s
[info]                  ·gc.alloc.rate:                                  1729.312 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11240.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.061 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.398 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.923 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11061.979 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 242136.763 ops/s
[info]                  ·gc.alloc.rate:                                  1729.561 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11240.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.295 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11062.801 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 242487.320 ops/s
[info]                  ·gc.alloc.rate:                                  1731.738 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11240.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.956 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11046.699 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 239363.398 ops/s
[info]                  ·gc.alloc.rate:                                  1709.280 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11240.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.812 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11190.896 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson":
[info]   240609.679 ±(99.9%) 9333.139 ops/s [Average]
[info]   (min, avg, max) = (236907.596, 240609.679, 242487.320), stdev = 2423.787
[info]   CI (99.9%): [231276.539, 249942.818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1718.311 ±(99.9%) 67.233 MB/sec [Average]
[info]   (min, avg, max) = (1691.665, 1718.311, 1731.738), stdev = 17.460
[info]   CI (99.9%): [1651.078, 1785.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   11240.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11240.002, 11240.002, 11240.002), stdev = 0.001
[info]   CI (99.9%): [11240.002, 11240.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.014 ±(99.9%) 0.103 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.061), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.088 ±(99.9%) 0.666 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.088, 0.398), stdev = 0.173
[info]   CI (99.9%): [≈ 0, 0.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1698.613 ±(99.9%) 29.137 MB/sec [Average]
[info]   (min, avg, max) = (1685.082, 1698.613, 1702.295), stdev = 7.567
[info]   CI (99.9%): [1669.477, 1727.750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   11111.726 ±(99.9%) 288.866 B/op [Average]
[info]   (min, avg, max) = (11046.699, 11111.726, 11196.258), stdev = 75.017
[info]   CI (99.9%): [10822.861, 11400.592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   6.196 ±(99.9%) 53.346 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.196, 30.978), stdev = 13.854
[info]   CI (99.9%): [≈ 0, 59.541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.800, 20.000), stdev = 6.834
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce
[info] # Run progress: 86.56% complete, ETA 00:10:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 458780.026 ops/s
[info] # Warmup Iteration   2: 707399.928 ops/s
[info] # Warmup Iteration   3: 699473.651 ops/s
[info] Iteration   1: 705370.217 ops/s
[info]                  ·gc.alloc.rate:                   1548.655 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1347.924 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3008.046 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 7.431 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 707398.999 ops/s
[info]                  ·gc.alloc.rate:                                  1553.557 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3456.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.150 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.333 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.199 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3786.666 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 706372.245 ops/s
[info]                  ·gc.alloc.rate:                                  1551.500 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3456.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.457 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3792.262 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 713381.254 ops/s
[info]                  ·gc.alloc.rate:                                  1566.619 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3456.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.707 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3003.960 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 688723.428 ops/s
[info]                  ·gc.alloc.rate:                                  1512.280 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3456.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.915 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3889.371 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce":
[info]   704249.229 ±(99.9%) 35507.929 ops/s [Average]
[info]   (min, avg, max) = (688723.428, 704249.229, 713381.254), stdev = 9221.296
[info]   CI (99.9%): [668741.300, 739757.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1546.522 ±(99.9%) 78.330 MB/sec [Average]
[info]   (min, avg, max) = (1512.280, 1546.522, 1566.619), stdev = 20.342
[info]   CI (99.9%): [1468.192, 1624.852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   3456.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3456.001, 3456.001, 3456.001), stdev = 0.001
[info]   CI (99.9%): [3456.001, 3456.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.031 ±(99.9%) 0.255 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.031, 0.150), stdev = 0.066
[info]   CI (99.9%): [≈ 0, 0.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.069 ±(99.9%) 0.567 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.069, 0.333), stdev = 0.147
[info]   CI (99.9%): [≈ 0, 0.636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1563.240 ±(99.9%) 732.884 MB/sec [Average]
[info]   (min, avg, max) = (1347.924, 1563.240, 1702.457), stdev = 190.328
[info]   CI (99.9%): [830.356, 2296.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   3496.061 ±(99.9%) 1729.794 B/op [Average]
[info]   (min, avg, max) = (3003.960, 3496.061, 3889.371), stdev = 449.222
[info]   CI (99.9%): [1766.267, 5225.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   1.486 ±(99.9%) 12.797 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.486, 7.431), stdev = 3.323
[info]   CI (99.9%): [≈ 0, 14.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 14.000), stdev = 4.528
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala
[info] # Run progress: 86.83% complete, ETA 00:10:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_227b1689/target/5e31e36e/jackson-module-afterburner-2.9.4.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 479922.445 ops/s
[info] # Warmup Iteration   2: 1364464.583 ops/s
[info] # Warmup Iteration   3: 1374380.624 ops/s
[info] Iteration   1: 1367194.526 ops/s
[info]                  ·gc.alloc.rate:            680.978 MB/sec
[info]                  ·gc.alloc.rate.norm:       784.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.391 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 772.963 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 1374861.160 ops/s
[info]                  ·gc.alloc.rate:                   684.890 MB/sec
[info]                  ·gc.alloc.rate.norm:              784.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             670.842 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        767.919 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.763 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 1358017.818 ops/s
[info]                  ·gc.alloc.rate:            676.482 MB/sec
[info]                  ·gc.alloc.rate.norm:       784.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.468 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 778.189 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 1328636.566 ops/s
[info]                  ·gc.alloc.rate:            661.769 MB/sec
[info]                  ·gc.alloc.rate.norm:       784.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.392 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 795.400 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 1324402.835 ops/s
[info]                  ·gc.alloc.rate:            659.815 MB/sec
[info]                  ·gc.alloc.rate.norm:       784.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.872 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 797.137 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala":
[info]   1350622.581 ±(99.9%) 87970.309 ops/s [Average]
[info]   (min, avg, max) = (1324402.835, 1350622.581, 1374861.160), stdev = 22845.610
[info]   CI (99.9%): [1262652.272, 1438592.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   672.787 ±(99.9%) 43.773 MB/sec [Average]
[info]   (min, avg, max) = (659.815, 672.787, 684.890), stdev = 11.368
[info]   CI (99.9%): [629.014, 716.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   784.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (784.000, 784.000, 784.000), stdev = 0.001
[info]   CI (99.9%): [784.000, 784.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   671.193 ±(99.9%) 1.188 MB/sec [Average]
[info]   (min, avg, max) = (670.842, 671.193, 671.468), stdev = 0.308
[info]   CI (99.9%): [670.005, 672.381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   782.322 ±(99.9%) 51.036 B/op [Average]
[info]   (min, avg, max) = (767.919, 782.322, 797.137), stdev = 13.254
[info]   CI (99.9%): [731.286, 833.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.153 ±(99.9%) 1.313 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.153, 0.763), stdev = 0.341
[info]   CI (99.9%): [≈ 0, 1.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.time":
[info]   48.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 9.600, 10.000), stdev = 0.548
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala
[info] # Run progress: 87.10% complete, ETA 00:10:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5427360.781 ops/s
[info] # Warmup Iteration   2: 6210176.794 ops/s
[info] # Warmup Iteration   3: 6929203.854 ops/s
[info] Iteration   1: 6933309.169 ops/s
[info]                  ·gc.alloc.rate:            352.354 MB/sec
[info]                  ·gc.alloc.rate.norm:       80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.325 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 76.361 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 6930726.274 ops/s
[info]                  ·gc.alloc.rate:            352.348 MB/sec
[info]                  ·gc.alloc.rate.norm:       80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.454 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 76.391 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 6901523.796 ops/s
[info]                  ·gc.alloc.rate:            350.760 MB/sec
[info]                  ·gc.alloc.rate.norm:       80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.730 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 153.434 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 6931076.024 ops/s
[info]                  ·gc.alloc.rate:            352.341 MB/sec
[info]                  ·gc.alloc.rate.norm:       80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.441 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 76.390 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 6892671.665 ops/s
[info]                  ·gc.alloc.rate:            350.379 MB/sec
[info]                  ·gc.alloc.rate.norm:       80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.431 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 76.815 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala":
[info]   6917861.386 ±(99.9%) 74073.742 ops/s [Average]
[info]   (min, avg, max) = (6892671.665, 6917861.386, 6933309.169), stdev = 19236.715
[info]   CI (99.9%): [6843787.644, 6991935.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   351.636 ±(99.9%) 3.786 MB/sec [Average]
[info]   (min, avg, max) = (350.379, 351.636, 352.354), stdev = 0.983
[info]   CI (99.9%): [347.850, 355.423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   80.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (80.000, 80.000, 80.000), stdev = 0.001
[info]   CI (99.9%): [80.000, 80.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   403.676 ±(99.9%) 579.159 MB/sec [Average]
[info]   (min, avg, max) = (336.325, 403.676, 672.730), stdev = 150.406
[info]   CI (99.9%): [≈ 0, 982.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   91.878 ±(99.9%) 132.506 B/op [Average]
[info]   (min, avg, max) = (76.361, 91.878, 153.434), stdev = 34.411
[info]   CI (99.9%): [≈ 0, 224.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 6.000), stdev = 1.225
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson
[info] # Run progress: 87.37% complete, ETA 00:10:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 98659.074 ops/s
[info] # Warmup Iteration   2: 484766.482 ops/s
[info] # Warmup Iteration   3: 487563.790 ops/s
[info] Iteration   1: 488079.427 ops/s
[info]                  ·gc.alloc.rate:                   1649.469 MB/sec
[info]                  ·gc.alloc.rate.norm:              5320.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1342.709 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        4330.615 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 12.889 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   2: 488893.371 ops/s
[info]                  ·gc.alloc.rate:                                  1652.521 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5320.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.085 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.274 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.279 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5476.970 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                2.144 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 481130.272 ops/s
[info]                  ·gc.alloc.rate:                                  1626.062 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5320.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.698 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5567.460 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 496186.498 ops/s
[info]                  ·gc.alloc.rate:                                  1677.541 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5320.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.313 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5398.561 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 493927.058 ops/s
[info]                  ·gc.alloc.rate:                                  1669.339 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5320.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.777 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5423.380 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson":
[info]   489643.325 ±(99.9%) 22505.997 ops/s [Average]
[info]   (min, avg, max) = (481130.272, 489643.325, 496186.498), stdev = 5844.736
[info]   CI (99.9%): [467137.328, 512149.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1654.986 ±(99.9%) 76.720 MB/sec [Average]
[info]   (min, avg, max) = (1626.062, 1654.986, 1677.541), stdev = 19.924
[info]   CI (99.9%): [1578.267, 1731.706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5320.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5320.001, 5320.001, 5320.001), stdev = 0.001
[info]   CI (99.9%): [5320.001, 5320.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.018 ±(99.9%) 0.144 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.085), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.059 ±(99.9%) 0.463 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.059, 0.274), stdev = 0.120
[info]   CI (99.9%): [≈ 0, 0.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1629.955 ±(99.9%) 618.321 MB/sec [Average]
[info]   (min, avg, max) = (1342.709, 1629.955, 1702.313), stdev = 160.576
[info]   CI (99.9%): [1011.635, 2248.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   5239.397 ±(99.9%) 1972.054 B/op [Average]
[info]   (min, avg, max) = (4330.615, 5239.397, 5567.460), stdev = 512.136
[info]   CI (99.9%): [3267.344, 7211.451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   3.007 ±(99.9%) 21.570 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.007, 12.889), stdev = 5.602
[info]   CI (99.9%): [≈ 0, 24.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.600, 19.000), stdev = 6.387
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJacksonScala
[info] # Run progress: 87.63% complete, ETA 00:09:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 53565.631 ops/s
[info] # Warmup Iteration   2: 602475.231 ops/s
[info] # Warmup Iteration   3: 624909.841 ops/s
[info] Iteration   1: 631051.597 ops/s
[info]                  ·gc.alloc.rate:            1048.599 MB/sec
[info]                  ·gc.alloc.rate.norm:       2616.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1006.889 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2511.945 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   2: 628017.587 ops/s
[info]                  ·gc.alloc.rate:            1043.607 MB/sec
[info]                  ·gc.alloc.rate.norm:       2616.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1006.963 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2524.147 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   3: 621819.454 ops/s
[info]                  ·gc.alloc.rate:                   1033.329 MB/sec
[info]                  ·gc.alloc.rate.norm:              2616.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1006.972 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2549.274 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 10.116 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   4: 626452.479 ops/s
[info]                  ·gc.alloc.rate:                                  1041.206 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2616.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.255 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.642 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.497 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2563.968 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1.674 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 631272.017 ops/s
[info]                  ·gc.alloc.rate:            1049.291 MB/sec
[info]                  ·gc.alloc.rate.norm:       2616.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.237 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2546.059 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJacksonScala":
[info]   627722.627 ±(99.9%) 14941.781 ops/s [Average]
[info]   (min, avg, max) = (621819.454, 627722.627, 631272.017), stdev = 3880.333
[info]   CI (99.9%): [612780.846, 642664.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1043.206 ±(99.9%) 24.942 MB/sec [Average]
[info]   (min, avg, max) = (1033.329, 1043.206, 1049.291), stdev = 6.477
[info]   CI (99.9%): [1018.264, 1068.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2616.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2616.001, 2616.001, 2616.001), stdev = 0.001
[info]   CI (99.9%): [2616.001, 2616.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.051 ±(99.9%) 0.440 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.051, 0.255), stdev = 0.114
[info]   CI (99.9%): [≈ 0, 0.491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.128 ±(99.9%) 1.105 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.128, 0.642), stdev = 0.287
[info]   CI (99.9%): [≈ 0, 1.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1012.511 ±(99.9%) 29.387 MB/sec [Average]
[info]   (min, avg, max) = (1006.889, 1012.511, 1021.237), stdev = 7.632
[info]   CI (99.9%): [983.125, 1041.898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   2539.079 ±(99.9%) 80.111 B/op [Average]
[info]   (min, avg, max) = (2511.945, 2539.079, 2563.968), stdev = 20.805
[info]   CI (99.9%): [2458.967, 2619.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.687 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   2.358 ±(99.9%) 16.932 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.358, 10.116), stdev = 4.397
[info]   CI (99.9%): [≈ 0, 19.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJacksonScala:·gc.time":
[info]   51.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 10.200, 15.000), stdev = 6.140
[info]   CI (99.9%): [51.000, 51.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala
[info] # Run progress: 87.90% complete, ETA 00:09:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2921618.141 ops/s
[info] # Warmup Iteration   2: 2862200.629 ops/s
[info] # Warmup Iteration   3: 2908870.101 ops/s
[info] Iteration   1: 2990747.884 ops/s
[info]                  ·gc.alloc.rate:                   1413.493 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.008 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        709.532 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.753 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 2940165.843 ops/s
[info]                  ·gc.alloc.rate:                                  1390.183 MB/sec
[info]                  ·gc.alloc.rate.norm:                             744.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.148 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.079 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.952 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       728.891 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 2944322.709 ops/s
[info]                  ·gc.alloc.rate:                                  1392.174 MB/sec
[info]                  ·gc.alloc.rate.norm:                             744.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.947 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       727.846 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 2927563.394 ops/s
[info]                  ·gc.alloc.rate:            1384.085 MB/sec
[info]                  ·gc.alloc.rate.norm:       744.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.741 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 731.989 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 2820876.647 ops/s
[info]                  ·gc.alloc.rate:                                  1333.758 MB/sec
[info]                  ·gc.alloc.rate.norm:                             744.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.823 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       759.655 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala":
[info]   2924735.295 ±(99.9%) 241810.378 ops/s [Average]
[info]   (min, avg, max) = (2820876.647, 2924735.295, 2990747.884), stdev = 62797.387
[info]   CI (99.9%): [2682924.917, 3166545.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1382.739 ±(99.9%) 113.759 MB/sec [Average]
[info]   (min, avg, max) = (1333.758, 1382.739, 1413.493), stdev = 29.543
[info]   CI (99.9%): [1268.980, 1496.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   744.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (744.000, 744.000, 744.000), stdev = 0.001
[info]   CI (99.9%): [744.000, 744.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.030 ±(99.9%) 0.254 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.148), stdev = 0.066
[info]   CI (99.9%): [≈ 0, 0.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.016 ±(99.9%) 0.136 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.079), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1359.094 ±(99.9%) 23.867 MB/sec [Average]
[info]   (min, avg, max) = (1348.008, 1359.094, 1361.952), stdev = 6.198
[info]   CI (99.9%): [1335.228, 1382.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   731.583 ±(99.9%) 69.303 B/op [Average]
[info]   (min, avg, max) = (709.532, 731.583, 759.655), stdev = 17.998
[info]   CI (99.9%): [662.280, 800.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.351 ±(99.9%) 3.018 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.351, 1.753), stdev = 0.784
[info]   CI (99.9%): [≈ 0, 3.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 12.000), stdev = 3.834
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson
[info] # Run progress: 88.17% complete, ETA 00:09:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 83864.854 ops/s
[info] # Warmup Iteration   2: 269863.807 ops/s
[info] # Warmup Iteration   3: 276975.020 ops/s
[info] Iteration   1: 276607.465 ops/s
[info]                  ·gc.alloc.rate:                   1538.166 MB/sec
[info]                  ·gc.alloc.rate.norm:              8752.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1680.658 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        9562.762 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      5.329 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 30.322 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         23.000 ms
[info] Iteration   2: 281898.490 ops/s
[info]                  ·gc.alloc.rate:                                  1567.268 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8752.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.064 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.355 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.300 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7601.826 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 281900.106 ops/s
[info]                  ·gc.alloc.rate:            1567.341 MB/sec
[info]                  ·gc.alloc.rate.norm:       8752.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.686 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9502.182 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 283644.535 ops/s
[info]                  ·gc.alloc.rate:                                  1577.573 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8752.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.813 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7555.014 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 281764.838 ops/s
[info]                  ·gc.alloc.rate:                                  1566.720 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8752.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.796 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9506.565 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson":
[info]   281163.087 ±(99.9%) 10252.660 ops/s [Average]
[info]   (min, avg, max) = (276607.465, 281163.087, 283644.535), stdev = 2662.583
[info]   CI (99.9%): [270910.427, 291415.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1563.414 ±(99.9%) 57.086 MB/sec [Average]
[info]   (min, avg, max) = (1538.166, 1563.414, 1577.573), stdev = 14.825
[info]   CI (99.9%): [1506.327, 1620.500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   8752.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8752.001, 8752.001, 8752.002), stdev = 0.001
[info]   CI (99.9%): [8752.001, 8752.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.013 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.064), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.074 ±(99.9%) 0.605 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.074, 0.355), stdev = 0.157
[info]   CI (99.9%): [≈ 0, 0.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1561.450 ±(99.9%) 703.438 MB/sec [Average]
[info]   (min, avg, max) = (1361.300, 1561.450, 1701.796), stdev = 182.681
[info]   CI (99.9%): [858.012, 2264.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   8745.670 ±(99.9%) 4104.573 B/op [Average]
[info]   (min, avg, max) = (7555.014, 8745.670, 9562.762), stdev = 1065.945
[info]   CI (99.9%): [4641.096, 12850.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 9.177 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 5.329), stdev = 2.383
[info]   CI (99.9%): [≈ 0, 10.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   6.064 ±(99.9%) 52.216 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.064, 30.322), stdev = 13.560
[info]   CI (99.9%): [≈ 0, 58.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.800, 23.000), stdev = 8.136
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce
[info] # Run progress: 88.44% complete, ETA 00:09:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 217803.923 ops/s
[info] # Warmup Iteration   2: 441321.102 ops/s
[info] # Warmup Iteration   3: 440943.800 ops/s
[info] Iteration   1: 442609.641 ops/s
[info]                  ·gc.alloc.rate:            1138.098 MB/sec
[info]                  ·gc.alloc.rate.norm:       4048.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1010.895 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3595.564 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 440003.666 ops/s
[info]                  ·gc.alloc.rate:            1131.681 MB/sec
[info]                  ·gc.alloc.rate.norm:       4048.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.242 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4822.639 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   3: 444887.932 ops/s
[info]                  ·gc.alloc.rate:                                  1144.070 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4048.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.176 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.624 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.689 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3600.835 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                11.783 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 446360.036 ops/s
[info]                  ·gc.alloc.rate:                                  1147.870 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4048.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.016 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.056 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.359 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4800.877 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 448688.390 ops/s
[info]                  ·gc.alloc.rate:            1154.093 MB/sec
[info]                  ·gc.alloc.rate.norm:       4048.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.240 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3582.019 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce":
[info]   444509.933 ±(99.9%) 12907.244 ops/s [Average]
[info]   (min, avg, max) = (440003.666, 444509.933, 448688.390), stdev = 3351.970
[info]   CI (99.9%): [431602.689, 457417.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1143.162 ±(99.9%) 33.344 MB/sec [Average]
[info]   (min, avg, max) = (1131.681, 1143.162, 1154.093), stdev = 8.659
[info]   CI (99.9%): [1109.819, 1176.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   4048.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4048.001, 4048.001, 4048.001), stdev = 0.001
[info]   CI (99.9%): [4048.001, 4048.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.038 ±(99.9%) 0.298 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.038, 0.176), stdev = 0.077
[info]   CI (99.9%): [≈ 0, 0.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.136 ±(99.9%) 1.054 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.136, 0.624), stdev = 0.274
[info]   CI (99.9%): [≈ 0, 1.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1151.885 ±(99.9%) 713.643 MB/sec [Average]
[info]   (min, avg, max) = (1010.895, 1151.885, 1361.359), stdev = 185.331
[info]   CI (99.9%): [438.242, 1865.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   4080.387 ±(99.9%) 2571.179 B/op [Average]
[info]   (min, avg, max) = (3582.019, 4080.387, 4822.639), stdev = 667.727
[info]   CI (99.9%): [1509.208, 6651.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   2.357 ±(99.9%) 20.291 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.357, 11.783), stdev = 5.269
[info]   CI (99.9%): [≈ 0, 22.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.200, 14.000), stdev = 4.764
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala
[info] # Run progress: 88.71% complete, ETA 00:09:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2291793.397 ops/s
[info] # Warmup Iteration   2: 2776196.441 ops/s
[info] # Warmup Iteration   3: 2805765.552 ops/s
[info] Iteration   1: 2736718.664 ops/s
[info]                  ·gc.alloc.rate:            556.356 MB/sec
[info]                  ·gc.alloc.rate.norm:       320.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.740 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 386.941 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 2737011.220 ops/s
[info]                  ·gc.alloc.rate:            556.432 MB/sec
[info]                  ·gc.alloc.rate.norm:       320.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.761 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 386.900 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 2746361.188 ops/s
[info]                  ·gc.alloc.rate:            558.318 MB/sec
[info]                  ·gc.alloc.rate.norm:       320.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.354 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 192.782 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 2731501.057 ops/s
[info]                  ·gc.alloc.rate:            555.407 MB/sec
[info]                  ·gc.alloc.rate.norm:       320.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.858 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 387.670 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 2739198.581 ops/s
[info]                  ·gc.alloc.rate:            556.943 MB/sec
[info]                  ·gc.alloc.rate.norm:       320.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.772 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 386.551 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala":
[info]   2738158.142 ±(99.9%) 20743.215 ops/s [Average]
[info]   (min, avg, max) = (2731501.057, 2738158.142, 2746361.188), stdev = 5386.947
[info]   CI (99.9%): [2717414.927, 2758901.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   556.691 ±(99.9%) 4.101 MB/sec [Average]
[info]   (min, avg, max) = (555.407, 556.691, 558.318), stdev = 1.065
[info]   CI (99.9%): [552.590, 560.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   320.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (320.000, 320.000, 320.000), stdev = 0.001
[info]   CI (99.9%): [320.000, 320.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   605.497 ±(99.9%) 579.350 MB/sec [Average]
[info]   (min, avg, max) = (336.354, 605.497, 672.858), stdev = 150.455
[info]   CI (99.9%): [26.147, 1184.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   348.169 ±(99.9%) 334.486 B/op [Average]
[info]   (min, avg, max) = (192.782, 348.169, 387.670), stdev = 86.865
[info]   CI (99.9%): [13.683, 682.655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 7.000), stdev = 1.643
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson
[info] # Run progress: 88.98% complete, ETA 00:08:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 67335.462 ops/s
[info] # Warmup Iteration   2: 358697.164 ops/s
[info] # Warmup Iteration   3: 363799.140 ops/s
[info] Iteration   1: 363667.096 ops/s
[info]                  ·gc.alloc.rate:                   1397.257 MB/sec
[info]                  ·gc.alloc.rate.norm:              6048.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1343.378 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5814.788 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.883 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   2: 355582.083 ops/s
[info]                  ·gc.alloc.rate:                                  1366.171 MB/sec
[info]                  ·gc.alloc.rate.norm:                             6048.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.165 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.729 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1351.344 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5982.360 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                20.639 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   3: 366142.604 ops/s
[info]                  ·gc.alloc.rate:                                  1406.836 MB/sec
[info]                  ·gc.alloc.rate.norm:                             6048.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.040 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.174 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.418 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5852.752 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 362203.013 ops/s
[info]                  ·gc.alloc.rate:            1391.637 MB/sec
[info]                  ·gc.alloc.rate.norm:       6048.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.369 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5916.456 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 357682.788 ops/s
[info]                  ·gc.alloc.rate:            1374.704 MB/sec
[info]                  ·gc.alloc.rate.norm:       6048.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.708 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5990.824 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson":
[info]   361055.517 ±(99.9%) 16712.564 ops/s [Average]
[info]   (min, avg, max) = (355582.083, 361055.517, 366142.604), stdev = 4340.200
[info]   CI (99.9%): [344342.953, 377768.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1387.321 ±(99.9%) 63.991 MB/sec [Average]
[info]   (min, avg, max) = (1366.171, 1387.321, 1406.836), stdev = 16.618
[info]   CI (99.9%): [1323.330, 1451.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   6048.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6048.001, 6048.001, 6048.001), stdev = 0.001
[info]   CI (99.9%): [6048.001, 6048.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.041 ±(99.9%) 0.275 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.041, 0.165), stdev = 0.071
[info]   CI (99.9%): [≈ 0, 0.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.181 ±(99.9%) 1.216 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.181, 0.729), stdev = 0.316
[info]   CI (99.9%): [≈ 0, 1.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1355.843 ±(99.9%) 31.732 MB/sec [Average]
[info]   (min, avg, max) = (1343.378, 1355.843, 1361.708), stdev = 8.241
[info]   CI (99.9%): [1324.112, 1387.575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   5911.436 ±(99.9%) 299.156 B/op [Average]
[info]   (min, avg, max) = (5814.788, 5911.436, 5990.824), stdev = 77.690
[info]   CI (99.9%): [5612.280, 6210.592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.821 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.662), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   4.704 ±(99.9%) 34.636 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.704, 20.639), stdev = 8.995
[info]   CI (99.9%): [≈ 0, 39.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 9.000, 19.000), stdev = 6.481
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce
[info] # Run progress: 89.25% complete, ETA 00:08:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 272136.395 ops/s
[info] # Warmup Iteration   2: 601040.479 ops/s
[info] # Warmup Iteration   3: 605736.669 ops/s
[info] Iteration   1: 608650.729 ops/s
[info]                  ·gc.alloc.rate:                                  1877.540 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4856.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.097 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.251 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2032.026 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5255.558 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                8.613 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        13.000 ms
[info] Iteration   2: 626852.802 ops/s
[info]                  ·gc.alloc.rate:                                  1934.395 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4856.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.289 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4273.335 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 610354.066 ops/s
[info]                  ·gc.alloc.rate:                                  1882.900 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4856.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.979 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5266.266 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 613713.611 ops/s
[info]                  ·gc.alloc.rate:                                  1893.349 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4856.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.168 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5237.687 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 632526.475 ops/s
[info]                  ·gc.alloc.rate:                                  1951.354 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4856.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.790 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4234.953 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce":
[info]   618419.537 ±(99.9%) 40966.980 ops/s [Average]
[info]   (min, avg, max) = (608650.729, 618419.537, 632526.475), stdev = 10638.995
[info]   CI (99.9%): [577452.557, 659386.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate":
[info]   1907.908 ±(99.9%) 126.964 MB/sec [Average]
[info]   (min, avg, max) = (1877.540, 1907.908, 1951.354), stdev = 32.972
[info]   CI (99.9%): [1780.943, 2034.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4856.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4856.001, 4856.001, 4856.001), stdev = 0.001
[info]   CI (99.9%): [4856.001, 4856.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.021 ±(99.9%) 0.163 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.021, 0.097), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.055 ±(99.9%) 0.421 B/op [Average]
[info]   (min, avg, max) = (0.003, 0.055, 0.251), stdev = 0.109
[info]   CI (99.9%): [≈ 0, 0.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1904.050 ±(99.9%) 710.273 MB/sec [Average]
[info]   (min, avg, max) = (1701.790, 1904.050, 2042.168), stdev = 184.456
[info]   CI (99.9%): [1193.778, 2614.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   4853.560 ±(99.9%) 2108.045 B/op [Average]
[info]   (min, avg, max) = (4234.953, 4853.560, 5266.266), stdev = 547.453
[info]   CI (99.9%): [2745.514, 6961.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   1.723 ±(99.9%) 14.832 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.723, 8.613), stdev = 3.852
[info]   CI (99.9%): [≈ 0, 16.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 13.000), stdev = 3.834
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala
[info] # Run progress: 89.52% complete, ETA 00:08:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 309596.548 ops/s
[info] # Warmup Iteration   2: 1318884.341 ops/s
[info] # Warmup Iteration   3: 1321899.065 ops/s
[info] Iteration   1: 1328501.619 ops/s
[info]                  ·gc.alloc.rate:                   1006.325 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1007.959 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1193.935 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.789 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 1318366.970 ops/s
[info]                  ·gc.alloc.rate:                   998.431 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.466 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1203.981 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.795 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   3: 1326867.516 ops/s
[info]                  ·gc.alloc.rate:                   1004.788 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1007.041 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1194.673 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 5.531 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   4: 1371524.058 ops/s
[info]                  ·gc.alloc.rate:                                  1038.580 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1192.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.212 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.243 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.028 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1171.856 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 1376379.134 ops/s
[info]                  ·gc.alloc.rate:                                  1042.288 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1192.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.075 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1167.741 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala":
[info]   1344327.859 ±(99.9%) 105387.747 ops/s [Average]
[info]   (min, avg, max) = (1318366.970, 1344327.859, 1376379.134), stdev = 27368.863
[info]   CI (99.9%): [1238940.112, 1449715.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1018.082 ±(99.9%) 79.551 MB/sec [Average]
[info]   (min, avg, max) = (998.431, 1018.082, 1042.288), stdev = 20.659
[info]   CI (99.9%): [938.532, 1097.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1192.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1192.000, 1192.000, 1192.000), stdev = 0.001
[info]   CI (99.9%): [1192.000, 1192.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.043 ±(99.9%) 0.365 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.043, 0.212), stdev = 0.095
[info]   CI (99.9%): [≈ 0, 0.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.049 ±(99.9%) 0.419 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.049, 0.243), stdev = 0.109
[info]   CI (99.9%): [≈ 0, 0.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1013.114 ±(99.9%) 27.972 MB/sec [Average]
[info]   (min, avg, max) = (1007.041, 1013.114, 1021.075), stdev = 7.264
[info]   CI (99.9%): [985.142, 1041.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1186.437 ±(99.9%) 60.700 B/op [Average]
[info]   (min, avg, max) = (1167.741, 1186.437, 1203.981), stdev = 15.764
[info]   CI (99.9%): [1125.737, 1247.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.199 ±(99.9%) 7.565 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.199, 4.662), stdev = 1.964
[info]   CI (99.9%): [≈ 0, 8.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.423 ±(99.9%) 8.973 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.423, 5.531), stdev = 2.330
[info]   CI (99.9%): [≈ 0, 10.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.time":
[info]   48.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 9.600, 14.000), stdev = 6.025
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala
[info] # Run progress: 89.78% complete, ETA 00:08:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6143913.395 ops/s
[info] # Warmup Iteration   2: 6360571.403 ops/s
[info] # Warmup Iteration   3: 6451311.571 ops/s
[info] Iteration   1: 6618504.202 ops/s
[info]                  ·gc.alloc.rate:                   201.843 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             336.374 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        79.993 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.158 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 6824447.480 ops/s
[info]                  ·gc.alloc.rate:      208.107 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 6760371.439 ops/s
[info]                  ·gc.alloc.rate:            206.144 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.010 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 78.472 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   4: 6794049.047 ops/s
[info]                  ·gc.alloc.rate:            207.186 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.032 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 78.082 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 6828448.153 ops/s
[info]                  ·gc.alloc.rate:      208.263 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala":
[info]   6765164.064 ±(99.9%) 332840.371 ops/s [Average]
[info]   (min, avg, max) = (6618504.202, 6765164.064, 6828448.153), stdev = 86437.587
[info]   CI (99.9%): [6432323.693, 7098004.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   206.309 ±(99.9%) 10.150 MB/sec [Average]
[info]   (min, avg, max) = (201.843, 206.309, 208.263), stdev = 2.636
[info]   CI (99.9%): [196.158, 216.459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   202.083 ±(99.9%) 710.352 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 202.083, 337.032), stdev = 184.476
[info]   CI (99.9%): [≈ 0, 912.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   47.309 ±(99.9%) 166.322 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 47.309, 79.993), stdev = 43.193
[info]   CI (99.9%): [≈ 0, 213.631] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.032 ±(99.9%) 0.273 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.032, 0.158), stdev = 0.071
[info]   CI (99.9%): [≈ 0, 0.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.517
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson
[info] # Run progress: 90.05% complete, ETA 00:07:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18838.742 ops/s
[info] # Warmup Iteration   2: 200310.407 ops/s
[info] # Warmup Iteration   3: 203669.309 ops/s
[info] Iteration   1: 203315.526 ops/s
[info]                  ·gc.alloc.rate:                   1374.289 MB/sec
[info]                  ·gc.alloc.rate.norm:              10640.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1344.083 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        10406.141 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 5.157 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         20.000 ms
[info] Iteration   2: 205324.323 ops/s
[info]                  ·gc.alloc.rate:                   1387.828 MB/sec
[info]                  ·gc.alloc.rate.norm:              10640.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.701 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        10340.029 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 35.743 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   3: 207075.155 ops/s
[info]                  ·gc.alloc.rate:                                  1399.801 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10640.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.205 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.558 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.498 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       10348.855 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 207821.585 ops/s
[info]                  ·gc.alloc.rate:            1404.716 MB/sec
[info]                  ·gc.alloc.rate.norm:       10640.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.735 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12889.764 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 208978.090 ops/s
[info]                  ·gc.alloc.rate:            1412.793 MB/sec
[info]                  ·gc.alloc.rate.norm:       10640.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.590 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10254.384 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson":
[info]   206502.936 ±(99.9%) 8554.448 ops/s [Average]
[info]   (min, avg, max) = (203315.526, 206502.936, 208978.090), stdev = 2221.563
[info]   CI (99.9%): [197948.487, 215057.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1395.885 ±(99.9%) 58.096 MB/sec [Average]
[info]   (min, avg, max) = (1374.289, 1395.885, 1412.793), stdev = 15.087
[info]   CI (99.9%): [1337.789, 1453.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   10640.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10640.002, 10640.002, 10640.002), stdev = 0.001
[info]   CI (99.9%): [10640.002, 10640.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.041 ±(99.9%) 0.353 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.041, 0.205), stdev = 0.092
[info]   CI (99.9%): [≈ 0, 0.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.312 ±(99.9%) 2.683 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.312, 1.558), stdev = 0.697
[info]   CI (99.9%): [≈ 0, 2.995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1423.521 ±(99.9%) 599.619 MB/sec [Average]
[info]   (min, avg, max) = (1344.083, 1423.521, 1701.735), stdev = 155.719
[info]   CI (99.9%): [823.902, 2023.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   10847.835 ±(99.9%) 4400.361 B/op [Average]
[info]   (min, avg, max) = (10254.384, 10847.835, 12889.764), stdev = 1142.760
[info]   CI (99.9%): [6447.474, 15248.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.821 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.662), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   8.180 ±(99.9%) 59.952 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.180, 35.743), stdev = 15.569
[info]   CI (99.9%): [≈ 0, 68.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.time":
[info]   49.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 9.800, 20.000), stdev = 7.629
[info]   CI (99.9%): [49.000, 49.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce
[info] # Run progress: 90.32% complete, ETA 00:07:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 350180.583 ops/s
[info] # Warmup Iteration   2: 833065.308 ops/s
[info] # Warmup Iteration   3: 839647.408 ops/s
[info] Iteration   1: 834696.827 ops/s
[info]                  ·gc.alloc.rate:            1370.262 MB/sec
[info]                  ·gc.alloc.rate.norm:       2584.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1685.135 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3177.777 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   2: 834081.695 ops/s
[info]                  ·gc.alloc.rate:                                  1369.193 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2584.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.124 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.234 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1354.719 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2556.684 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                6.285 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   3: 822450.291 ops/s
[info]                  ·gc.alloc.rate:                                  1350.116 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2584.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.019 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.036 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.428 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2605.652 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 831582.308 ops/s
[info]                  ·gc.alloc.rate:            1365.175 MB/sec
[info]                  ·gc.alloc.rate.norm:       2584.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.469 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2576.986 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 841919.628 ops/s
[info]                  ·gc.alloc.rate:                                  1382.121 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2584.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.420 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2545.299 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce":
[info]   832946.150 ±(99.9%) 27016.373 ops/s [Average]
[info]   (min, avg, max) = (822450.291, 832946.150, 841919.628), stdev = 7016.066
[info]   CI (99.9%): [805929.776, 859962.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1367.373 ±(99.9%) 44.400 MB/sec [Average]
[info]   (min, avg, max) = (1350.116, 1367.373, 1382.121), stdev = 11.530
[info]   CI (99.9%): [1322.974, 1411.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2584.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2584.000, 2584.001, 2584.001), stdev = 0.001
[info]   CI (99.9%): [2584.000, 2584.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.029 ±(99.9%) 0.206 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.124), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.055 ±(99.9%) 0.389 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.055, 0.234), stdev = 0.101
[info]   CI (99.9%): [≈ 0, 0.444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1424.834 ±(99.9%) 560.428 MB/sec [Average]
[info]   (min, avg, max) = (1354.719, 1424.834, 1685.135), stdev = 145.541
[info]   CI (99.9%): [864.406, 1985.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   2692.479 ±(99.9%) 1048.362 B/op [Average]
[info]   (min, avg, max) = (2545.299, 2692.479, 3177.777), stdev = 272.256
[info]   CI (99.9%): [1644.117, 3740.842] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   1.257 ±(99.9%) 10.823 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.257, 6.285), stdev = 2.811
[info]   CI (99.9%): [≈ 0, 12.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.200, 17.000), stdev = 6.017
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala
[info] # Run progress: 90.59% complete, ETA 00:07:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_227b1689/target/5e31e36e/jackson-module-afterburner-2.9.4.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 562483.898 ops/s
[info] # Warmup Iteration   2: 2201850.389 ops/s
[info] # Warmup Iteration   3: 2225691.323 ops/s
[info] Iteration   1: 2210035.963 ops/s
[info]                  ·gc.alloc.rate:            909.954 MB/sec
[info]                  ·gc.alloc.rate.norm:       648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.480 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 478.177 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 2176484.517 ops/s
[info]                  ·gc.alloc.rate:            896.339 MB/sec
[info]                  ·gc.alloc.rate.norm:       648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.485 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 728.352 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   3: 2162244.295 ops/s
[info]                  ·gc.alloc.rate:            890.112 MB/sec
[info]                  ·gc.alloc.rate.norm:       648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.042 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 733.125 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   4: 2234624.991 ops/s
[info]                  ·gc.alloc.rate:                   919.945 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             675.380 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        475.731 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.284 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 2219094.721 ops/s
[info]                  ·gc.alloc.rate:                                  913.597 MB/sec
[info]                  ·gc.alloc.rate.norm:                             648.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.115 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.082 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.126 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       724.269 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala":
[info]   2200496.897 ±(99.9%) 116182.542 ops/s [Average]
[info]   (min, avg, max) = (2162244.295, 2200496.897, 2234624.991), stdev = 30172.237
[info]   CI (99.9%): [2084314.356, 2316679.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   905.989 ±(99.9%) 47.691 MB/sec [Average]
[info]   (min, avg, max) = (890.112, 905.989, 919.945), stdev = 12.385
[info]   CI (99.9%): [858.299, 953.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   648.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (648.000, 648.000, 648.000), stdev = 0.001
[info]   CI (99.9%): [648.000, 648.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.023 ±(99.9%) 0.198 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.115), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.016 ±(99.9%) 0.141 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.082), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   876.503 ±(99.9%) 714.183 MB/sec [Average]
[info]   (min, avg, max) = (671.480, 876.503, 1021.126), stdev = 185.471
[info]   CI (99.9%): [162.320, 1590.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   627.931 ±(99.9%) 530.853 B/op [Average]
[info]   (min, avg, max) = (475.731, 627.931, 733.125), stdev = 137.861
[info]   CI (99.9%): [97.078, 1158.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.657 ±(99.9%) 5.655 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.657, 3.284), stdev = 1.469
[info]   CI (99.9%): [≈ 0, 6.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 9.000, 14.000), stdev = 5.196
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala
[info] # Run progress: 90.86% complete, ETA 00:07:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3863844.401 ops/s
[info] # Warmup Iteration   2: 5968766.354 ops/s
[info] # Warmup Iteration   3: 6037277.920 ops/s
[info] Iteration   1: 6013185.387 ops/s
[info]                  ·gc.alloc.rate:            672.330 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.710 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 176.100 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 5969293.859 ops/s
[info]                  ·gc.alloc.rate:            667.405 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.698 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 177.396 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 5886262.403 ops/s
[info]                  ·gc.alloc.rate:            658.125 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.700 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 179.898 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 5803551.216 ops/s
[info]                  ·gc.alloc.rate:            649.041 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.856 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 182.458 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 5779123.627 ops/s
[info]                  ·gc.alloc.rate:            646.170 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.705 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 183.228 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala":
[info]   5890283.298 ±(99.9%) 391000.072 ops/s [Average]
[info]   (min, avg, max) = (5779123.627, 5890283.298, 6013185.387), stdev = 101541.477
[info]   CI (99.9%): [5499283.226, 6281283.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   658.614 ±(99.9%) 43.571 MB/sec [Average]
[info]   (min, avg, max) = (646.170, 658.614, 672.330), stdev = 11.315
[info]   CI (99.9%): [615.043, 702.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   176.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (176.000, 176.000, 176.000), stdev = 0.001
[info]   CI (99.9%): [176.000, 176.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   672.734 ±(99.9%) 0.263 MB/sec [Average]
[info]   (min, avg, max) = (672.698, 672.734, 672.856), stdev = 0.068
[info]   CI (99.9%): [672.471, 672.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   179.816 ±(99.9%) 11.914 B/op [Average]
[info]   (min, avg, max) = (176.100, 179.816, 183.228), stdev = 3.094
[info]   CI (99.9%): [167.902, 191.730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 91.13% complete, ETA 00:07:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4125261.019 ops/s
[info] # Warmup Iteration   2: 5721986.899 ops/s
[info] # Warmup Iteration   3: 5750933.578 ops/s
[info] Iteration   1: 5947745.470 ops/s
[info]                  ·gc.alloc.rate:            362.711 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.324 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 89.016 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 5897895.221 ops/s
[info]                  ·gc.alloc.rate:            359.674 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.677 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 179.543 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 5966454.465 ops/s
[info]                  ·gc.alloc.rate:            363.874 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.357 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 88.740 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 5942046.731 ops/s
[info]                  ·gc.alloc.rate:            362.500 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.457 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 89.103 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 5967732.440 ops/s
[info]                  ·gc.alloc.rate:            363.965 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.369 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 88.721 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc":
[info]   5944374.865 ±(99.9%) 109086.500 ops/s [Average]
[info]   (min, avg, max) = (5897895.221, 5944374.865, 5967732.440), stdev = 28329.418
[info]   CI (99.9%): [5835288.366, 6053461.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   362.545 ±(99.9%) 6.684 MB/sec [Average]
[info]   (min, avg, max) = (359.674, 362.545, 363.965), stdev = 1.736
[info]   CI (99.9%): [355.860, 369.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   96.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (96.000, 96.000, 96.000), stdev = 0.001
[info]   CI (99.9%): [96.000, 96.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen":
[info]   403.637 ±(99.9%) 579.129 MB/sec [Average]
[info]   (min, avg, max) = (336.324, 403.637, 672.677), stdev = 150.398
[info]   CI (99.9%): [≈ 0, 982.765] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   107.025 ±(99.9%) 156.102 B/op [Average]
[info]   (min, avg, max) = (88.721, 107.025, 179.543), stdev = 40.539
[info]   CI (99.9%): [≈ 0, 263.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 7.000), stdev = 1.789
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson
[info] # Run progress: 91.40% complete, ETA 00:06:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 33600.335 ops/s
[info] # Warmup Iteration   2: 314207.233 ops/s
[info] # Warmup Iteration   3: 313729.760 ops/s
[info] Iteration   1: 315568.140 ops/s
[info]                  ·gc.alloc.rate:                   1629.814 MB/sec
[info]                  ·gc.alloc.rate.norm:              8128.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1679.427 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        8375.425 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 23.256 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         23.000 ms
[info] Iteration   2: 319546.760 ops/s
[info]                  ·gc.alloc.rate:                                  1649.935 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8128.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.212 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.043 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.041 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8379.762 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                3.281 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 320716.051 ops/s
[info]                  ·gc.alloc.rate:                                  1656.109 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8128.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.395 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6681.576 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 320196.212 ops/s
[info]                  ·gc.alloc.rate:            1653.409 MB/sec
[info]                  ·gc.alloc.rate.norm:       8128.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.776 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8365.767 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 320102.688 ops/s
[info]                  ·gc.alloc.rate:            1652.964 MB/sec
[info]                  ·gc.alloc.rate.norm:       8128.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.822 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8368.249 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson":
[info]   319225.970 ±(99.9%) 8034.147 ops/s [Average]
[info]   (min, avg, max) = (315568.140, 319225.970, 320716.051), stdev = 2086.443
[info]   CI (99.9%): [311191.823, 327260.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1648.446 ±(99.9%) 40.984 MB/sec [Average]
[info]   (min, avg, max) = (1629.814, 1648.446, 1656.109), stdev = 10.644
[info]   CI (99.9%): [1607.462, 1689.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   8128.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8128.001, 8128.001, 8128.001), stdev = 0.001
[info]   CI (99.9%): [8128.001, 8128.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.043 ±(99.9%) 0.364 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.043, 0.212), stdev = 0.095
[info]   CI (99.9%): [≈ 0, 0.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.210 ±(99.9%) 1.794 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.210, 1.043), stdev = 0.466
[info]   CI (99.9%): [≈ 0, 2.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1629.092 ±(99.9%) 577.419 MB/sec [Average]
[info]   (min, avg, max) = (1361.395, 1629.092, 1701.822), stdev = 149.954
[info]   CI (99.9%): [1051.673, 2206.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   8034.156 ±(99.9%) 2911.609 B/op [Average]
[info]   (min, avg, max) = (6681.576, 8034.156, 8379.762), stdev = 756.136
[info]   CI (99.9%): [5122.547, 10945.765] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.823 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.663), stdev = 2.032
[info]   CI (99.9%): [≈ 0, 8.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   5.307 ±(99.9%) 39.021 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.307, 23.256), stdev = 10.134
[info]   CI (99.9%): [≈ 0, 44.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 8.400, 23.000), stdev = 8.204
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce
[info] # Run progress: 91.67% complete, ETA 00:06:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2921354.548 ops/s
[info] # Warmup Iteration   2: 4254845.758 ops/s
[info] # Warmup Iteration   3: 4316321.328 ops/s
[info] Iteration   1: 4329207.877 ops/s
[info]                  ·gc.alloc.rate:                                  3191.578 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1160.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3064.323 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1113.748 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   2: 4346981.974 ops/s
[info]                  ·gc.alloc.rate:                                  3203.976 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1160.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.716 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1109.219 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 4322231.416 ops/s
[info]                  ·gc.alloc.rate:                                  3186.167 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1160.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3404.609 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1239.529 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   4: 4287201.632 ops/s
[info]                  ·gc.alloc.rate:                                  3159.615 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1160.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.425 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1124.686 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   5: 4280749.798 ops/s
[info]                  ·gc.alloc.rate:                                  3154.724 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1160.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.299 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1126.383 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce":
[info]   4313274.539 ±(99.9%) 109047.750 ops/s [Average]
[info]   (min, avg, max) = (4280749.798, 4313274.539, 4346981.974), stdev = 28319.354
[info]   CI (99.9%): [4204226.789, 4422322.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   3179.212 ±(99.9%) 81.644 MB/sec [Average]
[info]   (min, avg, max) = (3154.724, 3179.212, 3203.976), stdev = 21.203
[info]   CI (99.9%): [3097.568, 3260.856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   1160.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1160.000, 1160.000, 1160.000), stdev = 0.001
[info]   CI (99.9%): [1160.000, 1160.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.002 ±(99.9%) 0.003 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.002, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   3131.875 ±(99.9%) 587.083 MB/sec [Average]
[info]   (min, avg, max) = (3063.299, 3131.875, 3404.609), stdev = 152.464
[info]   CI (99.9%): [2544.791, 3718.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   1142.713 ±(99.9%) 210.255 B/op [Average]
[info]   (min, avg, max) = (1109.219, 1142.713, 1239.529), stdev = 54.603
[info]   CI (99.9%): [932.458, 1352.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.count":
[info]   46.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.200, 10.000), stdev = 0.447
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.600, 9.000), stdev = 0.894
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava
[info] # Run progress: 91.94% complete, ETA 00:06:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.858 ops/s
[info] # Warmup Iteration   2: 7132696.890 ops/s
[info] # Warmup Iteration   3: 7402566.260 ops/s
[info] Iteration   1: 7562178.614 ops/s
[info]                  ·gc.alloc.rate:            807.107 MB/sec
[info]                  ·gc.alloc.rate.norm:       168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1001.072 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 208.374 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   2: 7521700.595 ops/s
[info]                  ·gc.alloc.rate:            802.709 MB/sec
[info]                  ·gc.alloc.rate.norm:       168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.319 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 139.664 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 7532039.560 ops/s
[info]                  ·gc.alloc.rate:            803.928 MB/sec
[info]                  ·gc.alloc.rate.norm:       168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1001.096 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 209.203 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   4: 7564638.526 ops/s
[info]                  ·gc.alloc.rate:            807.408 MB/sec
[info]                  ·gc.alloc.rate.norm:       168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.417 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 138.872 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 7343752.525 ops/s
[info]                  ·gc.alloc.rate:                   783.846 MB/sec
[info]                  ·gc.alloc.rate.norm:              168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             670.737 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        143.758 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      7.327 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.570 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava":
[info]   7504861.964 ±(99.9%) 354159.030 ops/s [Average]
[info]   (min, avg, max) = (7343752.525, 7504861.964, 7564638.526), stdev = 91973.975
[info]   CI (99.9%): [7150702.935, 7859020.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   801.000 ±(99.9%) 37.733 MB/sec [Average]
[info]   (min, avg, max) = (783.846, 801.000, 807.408), stdev = 9.799
[info]   CI (99.9%): [763.266, 838.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   168.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (168.000, 168.000, 168.000), stdev = 0.001
[info]   CI (99.9%): [168.000, 168.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   801.528 ±(99.9%) 701.486 MB/sec [Average]
[info]   (min, avg, max) = (667.319, 801.528, 1001.096), stdev = 182.174
[info]   CI (99.9%): [100.042, 1503.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   167.974 ±(99.9%) 143.651 B/op [Average]
[info]   (min, avg, max) = (138.872, 167.974, 209.203), stdev = 37.306
[info]   CI (99.9%): [24.324, 311.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   1.465 ±(99.9%) 12.617 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.465, 7.327), stdev = 3.277
[info]   CI (99.9%): [≈ 0, 14.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   0.314 ±(99.9%) 2.704 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.314, 1.570), stdev = 0.702
[info]   CI (99.9%): [≈ 0, 3.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.time":
[info]   57.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 11.400, 15.000), stdev = 2.966
[info]   CI (99.9%): [57.000, 57.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala
[info] # Run progress: 92.20% complete, ETA 00:06:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1493291.309 ops/s
[info] # Warmup Iteration   2: 3509132.088 ops/s
[info] # Warmup Iteration   3: 3492554.492 ops/s
[info] Iteration   1: 3603996.038 ops/s
[info]                  ·gc.alloc.rate:                                  2033.133 MB/sec
[info]                  ·gc.alloc.rate.norm:                             888.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.088 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.038 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2038.140 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       890.187 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1.745 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   2: 3670360.618 ops/s
[info]                  ·gc.alloc.rate:                                  2070.393 MB/sec
[info]                  ·gc.alloc.rate.norm:                             888.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.908 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       875.783 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 3572596.715 ops/s
[info]                  ·gc.alloc.rate:            2015.510 MB/sec
[info]                  ·gc.alloc.rate.norm:       888.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2042.210 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 899.764 B/op
[info]                  ·gc.count:                 6.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 3645558.951 ops/s
[info]                  ·gc.alloc.rate:                                  2056.718 MB/sec
[info]                  ·gc.alloc.rate.norm:                             888.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.279 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       881.766 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 3563140.952 ops/s
[info]                  ·gc.alloc.rate:                                  2010.038 MB/sec
[info]                  ·gc.alloc.rate.norm:                             888.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.036 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       902.136 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala":
[info]   3611130.655 ±(99.9%) 177842.595 ops/s [Average]
[info]   (min, avg, max) = (3563140.952, 3611130.655, 3670360.618), stdev = 46185.157
[info]   CI (99.9%): [3433288.060, 3788973.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2037.158 ±(99.9%) 100.181 MB/sec [Average]
[info]   (min, avg, max) = (2010.038, 2037.158, 2070.393), stdev = 26.017
[info]   CI (99.9%): [1936.977, 2137.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   888.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (888.000, 888.000, 888.000), stdev = 0.001
[info]   CI (99.9%): [888.000, 888.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.019 ±(99.9%) 0.149 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.088), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.008 ±(99.9%) 0.065 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.038), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   2041.315 ±(99.9%) 6.857 MB/sec [Average]
[info]   (min, avg, max) = (2038.140, 2041.315, 2042.279), stdev = 1.781
[info]   CI (99.9%): [2034.457, 2048.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   889.927 ±(99.9%) 43.589 B/op [Average]
[info]   (min, avg, max) = (875.783, 889.927, 902.136), stdev = 11.320
[info]   CI (99.9%): [846.338, 933.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.349 ±(99.9%) 3.006 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.349, 1.745), stdev = 0.781
[info]   CI (99.9%): [≈ 0, 3.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 9.000), stdev = 1.643
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala
[info] # Run progress: 92.47% complete, ETA 00:06:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7006943.792 ops/s
[info] # Warmup Iteration   2: 7351378.688 ops/s
[info] # Warmup Iteration   3: 7287539.810 ops/s
[info] Iteration   1: 7515771.023 ops/s
[info]                  ·gc.alloc.rate:            802.121 MB/sec
[info]                  ·gc.alloc.rate.norm:       168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.049 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 211.759 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 7258251.847 ops/s
[info]                  ·gc.alloc.rate:            774.617 MB/sec
[info]                  ·gc.alloc.rate.norm:       168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.996 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 146.177 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 7385901.108 ops/s
[info]                  ·gc.alloc.rate:            788.274 MB/sec
[info]                  ·gc.alloc.rate.norm:       168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.008 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 143.647 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 7487658.327 ops/s
[info]                  ·gc.alloc.rate:                   799.520 MB/sec
[info]                  ·gc.alloc.rate.norm:              168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1011.527 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        212.548 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.700 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 7247881.443 ops/s
[info]                  ·gc.alloc.rate:                                  773.908 MB/sec
[info]                  ·gc.alloc.rate.norm:                             168.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.024 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            681.006 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       147.833 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala":
[info]   7379092.750 ±(99.9%) 480685.921 ops/s [Average]
[info]   (min, avg, max) = (7247881.443, 7379092.750, 7515771.023), stdev = 124832.607
[info]   CI (99.9%): [6898406.828, 7859778.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   787.688 ±(99.9%) 51.280 MB/sec [Average]
[info]   (min, avg, max) = (773.908, 787.688, 802.121), stdev = 13.317
[info]   CI (99.9%): [736.408, 838.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   168.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (168.000, 168.000, 168.000), stdev = 0.001
[info]   CI (99.9%): [168.000, 168.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.005 ±(99.9%) 0.041 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.024), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.001 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.005), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   810.317 ±(99.9%) 706.527 MB/sec [Average]
[info]   (min, avg, max) = (673.996, 810.317, 1011.527), stdev = 183.483
[info]   CI (99.9%): [103.790, 1516.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   172.393 ±(99.9%) 139.887 B/op [Average]
[info]   (min, avg, max) = (143.647, 172.393, 212.548), stdev = 36.328
[info]   CI (99.9%): [32.506, 312.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.738 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.332), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.140 ±(99.9%) 1.206 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.140, 0.700), stdev = 0.313
[info]   CI (99.9%): [≈ 0, 1.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.000, 9.000), stdev = 3.000
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson
[info] # Run progress: 92.74% complete, ETA 00:05:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2433572.883 ops/s
[info] # Warmup Iteration   2: 4321548.722 ops/s
[info] # Warmup Iteration   3: 4274241.926 ops/s
[info] Iteration   1: 4397435.254 ops/s
[info]                  ·gc.alloc.rate:                                  2368.727 MB/sec
[info]                  ·gc.alloc.rate.norm:                             848.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.100 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.036 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.141 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       852.802 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 4316331.323 ops/s
[info]                  ·gc.alloc.rate:            2325.123 MB/sec
[info]                  ·gc.alloc.rate.norm:       848.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2382.240 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 868.832 B/op
[info]                  ·gc.count:                 7.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 4381325.371 ops/s
[info]                  ·gc.alloc.rate:                                  2360.325 MB/sec
[info]                  ·gc.alloc.rate.norm:                             848.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.445 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       855.947 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 4394628.485 ops/s
[info]                  ·gc.alloc.rate:                                  2367.253 MB/sec
[info]                  ·gc.alloc.rate.norm:                             848.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.244 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       853.370 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 4386894.198 ops/s
[info]                  ·gc.alloc.rate:                                  2363.434 MB/sec
[info]                  ·gc.alloc.rate.norm:                             848.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.560 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       854.863 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson":
[info]   4375322.926 ±(99.9%) 129320.776 ops/s [Average]
[info]   (min, avg, max) = (4316331.323, 4375322.926, 4397435.254), stdev = 33584.195
[info]   CI (99.9%): [4246002.151, 4504643.702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2356.972 ±(99.9%) 69.719 MB/sec [Average]
[info]   (min, avg, max) = (2325.123, 2356.972, 2368.727), stdev = 18.106
[info]   CI (99.9%): [2287.254, 2426.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   848.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (848.000, 848.000, 848.000), stdev = 0.001
[info]   CI (99.9%): [848.000, 848.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.021 ±(99.9%) 0.170 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.100), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.008 ±(99.9%) 0.061 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.036), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2382.326 ±(99.9%) 0.660 MB/sec [Average]
[info]   (min, avg, max) = (2382.141, 2382.326, 2382.560), stdev = 0.171
[info]   CI (99.9%): [2381.666, 2382.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   857.163 ±(99.9%) 25.566 B/op [Average]
[info]   (min, avg, max) = (852.802, 857.163, 868.832), stdev = 6.639
[info]   CI (99.9%): [831.597, 882.729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.count":
[info]   35.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.000, 7.000), stdev = 0.001
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce
[info] # Run progress: 93.01% complete, ETA 00:05:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1771936.846 ops/s
[info] # Warmup Iteration   2: 2778821.873 ops/s
[info] # Warmup Iteration   3: 2796537.608 ops/s
[info] Iteration   1: 2785918.679 ops/s
[info]                  ·gc.alloc.rate:                   1160.948 MB/sec
[info]                  ·gc.alloc.rate.norm:              656.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1010.343 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        570.899 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.376 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 2792677.234 ops/s
[info]                  ·gc.alloc.rate:                   1163.807 MB/sec
[info]                  ·gc.alloc.rate.norm:              656.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.034 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        759.843 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.877 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   3: 2823786.396 ops/s
[info]                  ·gc.alloc.rate:                                  1176.860 MB/sec
[info]                  ·gc.alloc.rate.norm:                             656.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.113 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.063 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.087 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       569.169 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 2807855.790 ops/s
[info]                  ·gc.alloc.rate:                                  1170.141 MB/sec
[info]                  ·gc.alloc.rate.norm:                             656.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.368 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       763.205 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 2813209.129 ops/s
[info]                  ·gc.alloc.rate:            1172.469 MB/sec
[info]                  ·gc.alloc.rate.norm:       656.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.070 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 571.292 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce":
[info]   2804689.446 ±(99.9%) 59152.808 ops/s [Average]
[info]   (min, avg, max) = (2785918.679, 2804689.446, 2823786.396), stdev = 15361.796
[info]   CI (99.9%): [2745536.638, 2863842.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1168.845 ±(99.9%) 24.865 MB/sec [Average]
[info]   (min, avg, max) = (1160.948, 1168.845, 1176.860), stdev = 6.457
[info]   CI (99.9%): [1143.980, 1193.710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   656.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (656.000, 656.000, 656.000), stdev = 0.001
[info]   CI (99.9%): [656.000, 656.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.023 ±(99.9%) 0.194 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.113), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.013 ±(99.9%) 0.108 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.063), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1152.380 ±(99.9%) 711.617 MB/sec [Average]
[info]   (min, avg, max) = (1010.343, 1152.380, 1361.368), stdev = 184.805
[info]   CI (99.9%): [440.763, 1863.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   646.882 ±(99.9%) 403.021 B/op [Average]
[info]   (min, avg, max) = (569.169, 646.882, 763.205), stdev = 104.663
[info]   CI (99.9%): [243.861, 1049.903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.560 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.330), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   0.451 ±(99.9%) 3.134 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.451, 1.877), stdev = 0.814
[info]   CI (99.9%): [≈ 0, 3.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.600, 13.000), stdev = 4.615
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava
[info] # Run progress: 93.28% complete, ETA 00:05:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.896 ops/s
[info] # Warmup Iteration   2: 7801595.545 ops/s
[info] # Warmup Iteration   3: 8034213.421 ops/s
[info] Iteration   1: 8474836.790 ops/s
[info]                  ·gc.alloc.rate:            818.382 MB/sec
[info]                  ·gc.alloc.rate.norm:       152.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1001.122 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 185.941 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   2: 8458665.608 ops/s
[info]                  ·gc.alloc.rate:            816.747 MB/sec
[info]                  ·gc.alloc.rate.norm:       152.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.352 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 124.197 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 8378531.208 ops/s
[info]                  ·gc.alloc.rate:            809.187 MB/sec
[info]                  ·gc.alloc.rate.norm:       152.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1001.251 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 188.078 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   4: 8529916.674 ops/s
[info]                  ·gc.alloc.rate:            823.732 MB/sec
[info]                  ·gc.alloc.rate.norm:       152.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.428 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 123.158 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 8355837.861 ops/s
[info]                  ·gc.alloc.rate:                   806.919 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             671.413 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        126.475 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      6.661 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.255 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava":
[info]   8439557.628 ±(99.9%) 275716.019 ops/s [Average]
[info]   (min, avg, max) = (8355837.861, 8439557.628, 8529916.674), stdev = 71602.575
[info]   CI (99.9%): [8163841.609, 8715273.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   814.993 ±(99.9%) 26.527 MB/sec [Average]
[info]   (min, avg, max) = (806.919, 814.993, 823.732), stdev = 6.889
[info]   CI (99.9%): [788.466, 841.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   152.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (152.000, 152.000, 152.000), stdev = 0.001
[info]   CI (99.9%): [152.000, 152.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   801.713 ±(99.9%) 701.205 MB/sec [Average]
[info]   (min, avg, max) = (667.352, 801.713, 1001.251), stdev = 182.101
[info]   CI (99.9%): [100.508, 1502.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   149.570 ±(99.9%) 131.719 B/op [Average]
[info]   (min, avg, max) = (123.158, 149.570, 188.078), stdev = 34.207
[info]   CI (99.9%): [17.851, 281.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   1.332 ±(99.9%) 11.470 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.332, 6.661), stdev = 2.979
[info]   CI (99.9%): [≈ 0, 12.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   0.251 ±(99.9%) 2.161 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.251, 1.255), stdev = 0.561
[info]   CI (99.9%): [≈ 0, 2.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.time":
[info]   58.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 11.600, 15.000), stdev = 2.702
[info]   CI (99.9%): [58.000, 58.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJavaPrealloc
[info] # Run progress: 93.55% complete, ETA 00:05:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.865 ops/s
[info] # Warmup Iteration   2: 8804870.783 ops/s
[info] # Warmup Iteration   3: 8969324.501 ops/s
[info] Iteration   1: 9048368.429 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 9049223.632 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 9046997.533 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 9049116.610 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 9048996.672 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJavaPrealloc":
[info]   9048540.576 ±(99.9%) 3558.993 ops/s [Average]
[info]   (min, avg, max) = (9046997.533, 9048540.576, 9049223.632), stdev = 924.259
[info]   CI (99.9%): [9044981.582, 9052099.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJavaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJavaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJavaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala
[info] # Run progress: 93.82% complete, ETA 00:04:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1050568.805 ops/s
[info] # Warmup Iteration   2: 2025253.513 ops/s
[info] # Warmup Iteration   3: 2223142.351 ops/s
[info] Iteration   1: 2208452.053 ops/s
[info]                  ·gc.alloc.rate:            684.632 MB/sec
[info]                  ·gc.alloc.rate.norm:       488.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.012 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 719.215 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 2214902.930 ops/s
[info]                  ·gc.alloc.rate:            686.813 MB/sec
[info]                  ·gc.alloc.rate.norm:       488.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.871 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 478.094 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 2207413.339 ops/s
[info]                  ·gc.alloc.rate:            684.405 MB/sec
[info]                  ·gc.alloc.rate.norm:       488.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.767 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 479.702 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 2218672.539 ops/s
[info]                  ·gc.alloc.rate:            687.883 MB/sec
[info]                  ·gc.alloc.rate.norm:       488.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.744 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 477.260 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 2179817.647 ops/s
[info]                  ·gc.alloc.rate:                   675.904 MB/sec
[info]                  ·gc.alloc.rate.norm:              488.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.820 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        485.773 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.886 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala":
[info]   2205851.701 ±(99.9%) 58817.599 ops/s [Average]
[info]   (min, avg, max) = (2179817.647, 2205851.701, 2218672.539), stdev = 15274.744
[info]   CI (99.9%): [2147034.103, 2264669.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   683.927 ±(99.9%) 18.171 MB/sec [Average]
[info]   (min, avg, max) = (675.904, 683.927, 687.883), stdev = 4.719
[info]   CI (99.9%): [665.757, 702.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   488.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (488.000, 488.000, 488.000), stdev = 0.001
[info]   CI (99.9%): [488.000, 488.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   740.043 ±(99.9%) 578.976 MB/sec [Average]
[info]   (min, avg, max) = (672.744, 740.043, 1009.012), stdev = 150.358
[info]   CI (99.9%): [161.066, 1319.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   528.009 ±(99.9%) 411.786 B/op [Average]
[info]   (min, avg, max) = (477.260, 528.009, 719.215), stdev = 106.939
[info]   CI (99.9%): [116.223, 939.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.577 ±(99.9%) 4.969 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.577, 2.886), stdev = 1.291
[info]   CI (99.9%): [≈ 0, 5.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 9.200, 13.000), stdev = 2.168
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala
[info] # Run progress: 94.09% complete, ETA 00:04:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6402273.320 ops/s
[info] # Warmup Iteration   2: 8574746.709 ops/s
[info] # Warmup Iteration   3: 8988691.814 ops/s
[info] Iteration   1: 8966230.073 ops/s
[info]                  ·gc.alloc.rate:            865.786 MB/sec
[info]                  ·gc.alloc.rate.norm:       152.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.031 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 177.149 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 8912535.715 ops/s
[info]                  ·gc.alloc.rate:            860.631 MB/sec
[info]                  ·gc.alloc.rate.norm:       152.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.061 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 178.215 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 8976571.375 ops/s
[info]                  ·gc.alloc.rate:            866.804 MB/sec
[info]                  ·gc.alloc.rate.norm:       152.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.696 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 117.962 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 8725122.959 ops/s
[info]                  ·gc.alloc.rate:                                  842.834 MB/sec
[info]                  ·gc.alloc.rate.norm:                             152.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.042 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1013.422 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       182.765 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                0.721 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   5: 8602631.283 ops/s
[info]                  ·gc.alloc.rate:                                  830.896 MB/sec
[info]                  ·gc.alloc.rate.norm:                             152.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.119 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.850 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       124.551 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala":
[info]   8836618.281 ±(99.9%) 636611.323 ops/s [Average]
[info]   (min, avg, max) = (8602631.283, 8836618.281, 8976571.375), stdev = 165325.939
[info]   CI (99.9%): [8200006.958, 9473229.604] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   853.390 ±(99.9%) 60.988 MB/sec [Average]
[info]   (min, avg, max) = (830.896, 853.390, 866.804), stdev = 15.838
[info]   CI (99.9%): [792.402, 914.378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   152.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (152.000, 152.000, 152.000), stdev = 0.001
[info]   CI (99.9%): [152.000, 152.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.032 ±(99.9%) 0.199 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.032, 0.119), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.006 ±(99.9%) 0.036 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.022), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   877.012 ±(99.9%) 703.989 MB/sec [Average]
[info]   (min, avg, max) = (672.696, 877.012, 1013.422), stdev = 182.824
[info]   CI (99.9%): [173.023, 1581.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   156.128 ±(99.9%) 123.175 B/op [Average]
[info]   (min, avg, max) = (117.962, 156.128, 182.765), stdev = 31.988
[info]   CI (99.9%): [32.954, 279.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.800 ±(99.9%) 6.884 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.800, 3.998), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.144 ±(99.9%) 1.242 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.144, 0.721), stdev = 0.322
[info]   CI (99.9%): [≈ 0, 1.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.000, 10.000), stdev = 3.082
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 94.35% complete, ETA 00:04:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6023149.291 ops/s
[info] # Warmup Iteration   2: 7630468.087 ops/s
[info] # Warmup Iteration   3: 8115106.082 ops/s
[info] Iteration   1: 8115056.607 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 8091460.908 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 8043612.832 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 7916882.722 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 8095058.250 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   8052414.264 ±(99.9%) 308733.509 ops/s [Average]
[info]   (min, avg, max) = (7916882.722, 8052414.264, 8115056.607), stdev = 80177.112
[info]   CI (99.9%): [7743680.755, 8361147.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson
[info] # Run progress: 94.62% complete, ETA 00:04:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2082178.341 ops/s
[info] # Warmup Iteration   2: 2995613.698 ops/s
[info] # Warmup Iteration   3: 3012240.209 ops/s
[info] Iteration   1: 2969307.912 ops/s
[info]                  ·gc.alloc.rate:            950.668 MB/sec
[info]                  ·gc.alloc.rate.norm:       504.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.992 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 534.921 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 2976965.676 ops/s
[info]                  ·gc.alloc.rate:            953.095 MB/sec
[info]                  ·gc.alloc.rate.norm:       504.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.965 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 533.544 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   3: 2975165.517 ops/s
[info]                  ·gc.alloc.rate:                   952.872 MB/sec
[info]                  ·gc.alloc.rate.norm:              504.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.341 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        533.868 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.114 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   4: 3022528.105 ops/s
[info]                  ·gc.alloc.rate:                                  967.758 MB/sec
[info]                  ·gc.alloc.rate.norm:                             504.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.158 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.082 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.070 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       531.764 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 3015450.719 ops/s
[info]                  ·gc.alloc.rate:            965.842 MB/sec
[info]                  ·gc.alloc.rate.norm:       504.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.409 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 532.996 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson":
[info]   2991883.586 ±(99.9%) 96385.303 ops/s [Average]
[info]   (min, avg, max) = (2969307.912, 2991883.586, 3022528.105), stdev = 25030.957
[info]   CI (99.9%): [2895498.283, 3088268.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   958.047 ±(99.9%) 31.094 MB/sec [Average]
[info]   (min, avg, max) = (950.668, 958.047, 967.758), stdev = 8.075
[info]   CI (99.9%): [926.954, 989.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   504.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (504.000, 504.000, 504.000), stdev = 0.001
[info]   CI (99.9%): [504.000, 504.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.032 ±(99.9%) 0.272 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.032, 0.158), stdev = 0.071
[info]   CI (99.9%): [≈ 0, 0.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.016 ±(99.9%) 0.142 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.082), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1013.955 ±(99.9%) 25.615 MB/sec [Average]
[info]   (min, avg, max) = (1008.965, 1013.955, 1021.409), stdev = 6.652
[info]   CI (99.9%): [988.340, 1039.570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   533.419 ±(99.9%) 4.469 B/op [Average]
[info]   (min, avg, max) = (531.764, 533.419, 534.921), stdev = 1.161
[info]   CI (99.9%): [528.949, 537.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.884 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   0.423 ±(99.9%) 3.641 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.423, 2.114), stdev = 0.946
[info]   CI (99.9%): [≈ 0, 4.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.800, 11.000), stdev = 4.438
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce
[info] # Run progress: 94.89% complete, ETA 00:04:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 575138.509 ops/s
[info] # Warmup Iteration   2: 806967.898 ops/s
[info] # Warmup Iteration   3: 820514.122 ops/s
[info] Iteration   1: 822564.211 ops/s
[info]                  ·gc.alloc.rate:            1379.478 MB/sec
[info]                  ·gc.alloc.rate.norm:       2640.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1347.983 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2579.727 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 816281.662 ops/s
[info]                  ·gc.alloc.rate:                                  1368.904 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2640.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.062 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.120 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1357.902 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2618.781 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                6.422 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 828569.246 ops/s
[info]                  ·gc.alloc.rate:                                  1389.833 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2640.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.610 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2586.390 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 829061.320 ops/s
[info]                  ·gc.alloc.rate:            1390.478 MB/sec
[info]                  ·gc.alloc.rate.norm:       2640.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.435 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2584.858 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 831315.770 ops/s
[info]                  ·gc.alloc.rate:            1394.319 MB/sec
[info]                  ·gc.alloc.rate.norm:       2640.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.519 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2577.897 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce":
[info]   825558.442 ±(99.9%) 23541.421 ops/s [Average]
[info]   (min, avg, max) = (816281.662, 825558.442, 831315.770), stdev = 6113.632
[info]   CI (99.9%): [802017.021, 849099.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   1384.603 ±(99.9%) 39.878 MB/sec [Average]
[info]   (min, avg, max) = (1368.904, 1384.603, 1394.319), stdev = 10.356
[info]   CI (99.9%): [1344.724, 1424.481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2640.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2640.000, 2640.001, 2640.001), stdev = 0.001
[info]   CI (99.9%): [2640.000, 2640.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.013 ±(99.9%) 0.106 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.025 ±(99.9%) 0.205 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.120), stdev = 0.053
[info]   CI (99.9%): [≈ 0, 0.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1358.090 ±(99.9%) 22.579 MB/sec [Average]
[info]   (min, avg, max) = (1347.983, 1358.090, 1361.610), stdev = 5.864
[info]   CI (99.9%): [1335.511, 1380.668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   2589.531 ±(99.9%) 64.398 B/op [Average]
[info]   (min, avg, max) = (2577.897, 2589.531, 2618.781), stdev = 16.724
[info]   CI (99.9%): [2525.132, 2653.929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   1.284 ±(99.9%) 11.059 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.284, 6.422), stdev = 2.872
[info]   CI (99.9%): [≈ 0, 12.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 13.000), stdev = 4.207
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava
[info] # Run progress: 95.16% complete, ETA 00:03:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.866 ops/s
[info] # Warmup Iteration   2: 2823461.994 ops/s
[info] # Warmup Iteration   3: 2953350.634 ops/s
[info] Iteration   1: 2993384.864 ops/s
[info]                  ·gc.alloc.rate:                   837.143 MB/sec
[info]                  ·gc.alloc.rate.norm:              440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1000.890 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        526.065 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.350 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 2972837.176 ops/s
[info]                  ·gc.alloc.rate:            831.343 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.662 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 353.370 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   3: 2995981.702 ops/s
[info]                  ·gc.alloc.rate:                   837.496 MB/sec
[info]                  ·gc.alloc.rate.norm:              440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1000.445 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        525.609 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.350 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   4: 2992626.959 ops/s
[info]                  ·gc.alloc.rate:                   838.187 MB/sec
[info]                  ·gc.alloc.rate.norm:              440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             998.278 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        524.039 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.985 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.092 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   5: 3001323.380 ops/s
[info]                  ·gc.alloc.rate:                                  839.185 MB/sec
[info]                  ·gc.alloc.rate.norm:                             440.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.481 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.252 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            678.209 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       355.597 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     2.665 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1.397 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava":
[info]   2991230.816 ±(99.9%) 41710.930 ops/s [Average]
[info]   (min, avg, max) = (2972837.176, 2991230.816, 3001323.380), stdev = 10832.196
[info]   CI (99.9%): [2949519.886, 3032941.746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   836.671 ±(99.9%) 11.855 MB/sec [Average]
[info]   (min, avg, max) = (831.343, 836.671, 839.185), stdev = 3.079
[info]   CI (99.9%): [824.815, 848.526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   440.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (440.000, 440.000, 440.000), stdev = 0.001
[info]   CI (99.9%): [440.000, 440.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.096 ±(99.9%) 0.828 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.096, 0.481), stdev = 0.215
[info]   CI (99.9%): [≈ 0, 0.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.050 ±(99.9%) 0.434 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.252), stdev = 0.113
[info]   CI (99.9%): [≈ 0, 0.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   869.097 ±(99.9%) 689.695 MB/sec [Average]
[info]   (min, avg, max) = (667.662, 869.097, 1000.890), stdev = 179.112
[info]   CI (99.9%): [179.402, 1558.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   456.936 ±(99.9%) 360.160 B/op [Average]
[info]   (min, avg, max) = (353.370, 456.936, 526.065), stdev = 93.532
[info]   CI (99.9%): [96.776, 817.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   1.596 ±(99.9%) 6.422 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.596, 3.985), stdev = 1.668
[info]   CI (99.9%): [≈ 0, 8.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   0.838 ±(99.9%) 3.370 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.838, 2.092), stdev = 0.875
[info]   CI (99.9%): [≈ 0, 4.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.time":
[info]   62.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 12.400, 15.000), stdev = 4.159
[info]   CI (99.9%): [62.000, 62.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala
[info] # Run progress: 95.43% complete, ETA 00:03:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 446377.524 ops/s
[info] # Warmup Iteration   2: 1052007.542 ops/s
[info] # Warmup Iteration   3: 1052319.611 ops/s
[info] Iteration   1: 1059880.034 ops/s
[info]                  ·gc.alloc.rate:            781.785 MB/sec
[info]                  ·gc.alloc.rate.norm:       1160.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.098 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1495.799 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 1053812.398 ops/s
[info]                  ·gc.alloc.rate:            776.930 MB/sec
[info]                  ·gc.alloc.rate.norm:       1160.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.021 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1004.858 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 1055475.560 ops/s
[info]                  ·gc.alloc.rate:            777.805 MB/sec
[info]                  ·gc.alloc.rate.norm:       1160.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.691 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1003.235 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 1031921.373 ops/s
[info]                  ·gc.alloc.rate:            760.490 MB/sec
[info]                  ·gc.alloc.rate.norm:       1160.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.731 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1026.138 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 1058520.294 ops/s
[info]                  ·gc.alloc.rate:                                  780.103 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1160.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.117 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.174 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.103 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1512.415 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                5.943 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala":
[info]   1051921.932 ±(99.9%) 44034.528 ops/s [Average]
[info]   (min, avg, max) = (1031921.373, 1051921.932, 1059880.034), stdev = 11435.627
[info]   CI (99.9%): [1007887.404, 1095956.460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   775.423 ±(99.9%) 32.974 MB/sec [Average]
[info]   (min, avg, max) = (760.490, 775.423, 781.785), stdev = 8.563
[info]   CI (99.9%): [742.449, 808.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1160.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1160.000, 1160.000, 1160.000), stdev = 0.001
[info]   CI (99.9%): [1160.000, 1160.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.023 ±(99.9%) 0.201 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.117), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.035 ±(99.9%) 0.299 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.035, 0.174), stdev = 0.078
[info]   CI (99.9%): [≈ 0, 0.334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   808.728 ±(99.9%) 716.743 MB/sec [Average]
[info]   (min, avg, max) = (672.691, 808.728, 1017.103), stdev = 186.136
[info]   CI (99.9%): [91.986, 1525.471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1208.489 ±(99.9%) 1039.968 B/op [Average]
[info]   (min, avg, max) = (1003.235, 1208.489, 1512.415), stdev = 270.076
[info]   CI (99.9%): [168.521, 2248.457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.189 ±(99.9%) 10.234 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.189, 5.943), stdev = 2.658
[info]   CI (99.9%): [≈ 0, 11.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 9.000, 13.000), stdev = 2.345
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala
[info] # Run progress: 95.70% complete, ETA 00:03:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1769718.831 ops/s
[info] # Warmup Iteration   2: 1936049.429 ops/s
[info] # Warmup Iteration   3: 1905045.709 ops/s
[info] Iteration   1: 1950925.023 ops/s
[info]                  ·gc.alloc.rate:            545.272 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.956 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 543.841 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 1957420.446 ops/s
[info]                  ·gc.alloc.rate:            547.062 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.963 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 271.018 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 1948768.142 ops/s
[info]                  ·gc.alloc.rate:            544.662 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.970 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 544.461 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 1950363.063 ops/s
[info]                  ·gc.alloc.rate:            545.276 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.157 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 543.999 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 1959309.055 ops/s
[info]                  ·gc.alloc.rate:            547.837 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.115 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 270.756 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala":
[info]   1953357.146 ±(99.9%) 18048.221 ops/s [Average]
[info]   (min, avg, max) = (1948768.142, 1953357.146, 1959309.055), stdev = 4687.066
[info]   CI (99.9%): [1935308.924, 1971405.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   546.022 ±(99.9%) 5.219 MB/sec [Average]
[info]   (min, avg, max) = (544.662, 546.022, 547.837), stdev = 1.355
[info]   CI (99.9%): [540.803, 551.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   440.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (440.000, 440.000, 440.000), stdev = 0.001
[info]   CI (99.9%): [440.000, 440.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   539.232 ±(99.9%) 710.739 MB/sec [Average]
[info]   (min, avg, max) = (336.963, 539.232, 674.157), stdev = 184.577
[info]   CI (99.9%): [≈ 0, 1249.971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   434.815 ±(99.9%) 576.230 B/op [Average]
[info]   (min, avg, max) = (270.756, 434.815, 544.461), stdev = 149.645
[info]   CI (99.9%): [≈ 0, 1011.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 6.000), stdev = 1.342
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson
[info] # Run progress: 95.97% complete, ETA 00:03:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 585018.866 ops/s
[info] # Warmup Iteration   2: 1100991.325 ops/s
[info] # Warmup Iteration   3: 1117227.888 ops/s
[info] Iteration   1: 1124802.211 ops/s
[info]                  ·gc.alloc.rate:            800.437 MB/sec
[info]                  ·gc.alloc.rate.norm:       1120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.810 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 941.419 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 1123378.142 ops/s
[info]                  ·gc.alloc.rate:            799.369 MB/sec
[info]                  ·gc.alloc.rate.norm:       1120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.772 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 942.625 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 1094197.176 ops/s
[info]                  ·gc.alloc.rate:            778.489 MB/sec
[info]                  ·gc.alloc.rate.norm:       1120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.014 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1451.652 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   4: 1118855.813 ops/s
[info]                  ·gc.alloc.rate:            796.125 MB/sec
[info]                  ·gc.alloc.rate.norm:       1120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.733 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 946.411 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 1117545.351 ops/s
[info]                  ·gc.alloc.rate:                                  795.222 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1120.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.056 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.079 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            676.740 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       953.129 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                5.629 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson":
[info]   1115755.739 ±(99.9%) 47844.327 ops/s [Average]
[info]   (min, avg, max) = (1094197.176, 1115755.739, 1124802.211), stdev = 12425.020
[info]   CI (99.9%): [1067911.411, 1163600.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   793.929 ±(99.9%) 34.270 MB/sec [Average]
[info]   (min, avg, max) = (778.489, 793.929, 800.437), stdev = 8.900
[info]   CI (99.9%): [759.658, 828.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   1120.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1120.000, 1120.000, 1120.000), stdev = 0.001
[info]   CI (99.9%): [1120.000, 1120.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.011 ±(99.9%) 0.097 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.056), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.016 ±(99.9%) 0.137 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.079), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   740.814 ±(99.9%) 577.359 MB/sec [Average]
[info]   (min, avg, max) = (672.733, 740.814, 1009.014), stdev = 149.938
[info]   CI (99.9%): [163.455, 1318.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   1047.047 ±(99.9%) 871.121 B/op [Average]
[info]   (min, avg, max) = (941.419, 1047.047, 1451.652), stdev = 226.227
[info]   CI (99.9%): [175.927, 1918.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   1.126 ±(99.9%) 9.693 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.126, 5.629), stdev = 2.517
[info]   CI (99.9%): [≈ 0, 10.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 8.400, 12.000), stdev = 2.510
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce
[info] # Run progress: 96.24% complete, ETA 00:03:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1047715.151 ops/s
[info] # Warmup Iteration   2: 1665118.469 ops/s
[info] # Warmup Iteration   3: 1674268.898 ops/s
[info] Iteration   1: 1668770.232 ops/s
[info]                  ·gc.alloc.rate:            1356.932 MB/sec
[info]                  ·gc.alloc.rate.norm:       1280.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.009 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1271.583 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   2: 1687967.883 ops/s
[info]                  ·gc.alloc.rate:                                  1372.533 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1280.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.057 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.053 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1354.661 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1263.333 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                3.106 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   3: 1718234.146 ops/s
[info]                  ·gc.alloc.rate:                                  1397.453 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1280.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.022 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.620 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1247.178 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 1712727.640 ops/s
[info]                  ·gc.alloc.rate:            1392.747 MB/sec
[info]                  ·gc.alloc.rate.norm:       1280.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.398 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1251.189 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 1690209.078 ops/s
[info]                  ·gc.alloc.rate:                                  1374.502 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1280.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.810 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1584.804 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce":
[info]   1695581.796 ±(99.9%) 77320.477 ops/s [Average]
[info]   (min, avg, max) = (1668770.232, 1695581.796, 1718234.146), stdev = 20079.882
[info]   CI (99.9%): [1618261.319, 1772902.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1378.834 ±(99.9%) 63.226 MB/sec [Average]
[info]   (min, avg, max) = (1356.932, 1378.834, 1397.453), stdev = 16.420
[info]   CI (99.9%): [1315.608, 1442.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1280.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1280.000, 1280.000, 1280.000), stdev = 0.001
[info]   CI (99.9%): [1280.000, 1280.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.016 ±(99.9%) 0.095 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.057), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.015 ±(99.9%) 0.089 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.053), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1425.499 ±(99.9%) 595.171 MB/sec [Average]
[info]   (min, avg, max) = (1348.009, 1425.499, 1701.810), stdev = 154.564
[info]   CI (99.9%): [830.329, 2020.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   1323.617 ±(99.9%) 563.463 B/op [Average]
[info]   (min, avg, max) = (1247.178, 1323.617, 1584.804), stdev = 146.329
[info]   CI (99.9%): [760.155, 1887.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   0.621 ±(99.9%) 5.348 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.621, 3.106), stdev = 1.389
[info]   CI (99.9%): [≈ 0, 5.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.600, 14.000), stdev = 4.669
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava
[info] # Run progress: 96.51% complete, ETA 00:02:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.885 ops/s
[info] # Warmup Iteration   2: 2865349.077 ops/s
[info] # Warmup Iteration   3: 2946836.109 ops/s
[info] Iteration   1: 2934690.463 ops/s
[info]                  ·gc.alloc.rate:            686.096 MB/sec
[info]                  ·gc.alloc.rate.norm:       368.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.379 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 357.961 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 2912610.070 ops/s
[info]                  ·gc.alloc.rate:            681.215 MB/sec
[info]                  ·gc.alloc.rate.norm:       368.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.661 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 360.678 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 2905399.957 ops/s
[info]                  ·gc.alloc.rate:                   679.353 MB/sec
[info]                  ·gc.alloc.rate.norm:              368.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             666.822 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        361.212 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.361 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 2896811.083 ops/s
[info]                  ·gc.alloc.rate:            677.292 MB/sec
[info]                  ·gc.alloc.rate.norm:       368.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.435 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 362.645 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 2954848.801 ops/s
[info]                  ·gc.alloc.rate:            690.802 MB/sec
[info]                  ·gc.alloc.rate.norm:       368.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.354 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 355.509 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava":
[info]   2920872.075 ±(99.9%) 90958.866 ops/s [Average]
[info]   (min, avg, max) = (2896811.083, 2920872.075, 2954848.801), stdev = 23621.729
[info]   CI (99.9%): [2829913.209, 3011830.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   682.952 ±(99.9%) 21.048 MB/sec [Average]
[info]   (min, avg, max) = (677.292, 682.952, 690.802), stdev = 5.466
[info]   CI (99.9%): [661.904, 704.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   368.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (368.000, 368.000, 368.000), stdev = 0.001
[info]   CI (99.9%): [368.000, 368.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   667.330 ±(99.9%) 1.190 MB/sec [Average]
[info]   (min, avg, max) = (666.822, 667.330, 667.661), stdev = 0.309
[info]   CI (99.9%): [666.141, 668.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   359.601 ±(99.9%) 10.969 B/op [Average]
[info]   (min, avg, max) = (355.509, 359.601, 362.645), stdev = 2.849
[info]   CI (99.9%): [348.632, 370.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   0.072 ±(99.9%) 0.621 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.072, 0.361), stdev = 0.161
[info]   CI (99.9%): [≈ 0, 0.694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.time":
[info]   48.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 9.600, 10.000), stdev = 0.548
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJavaPrealloc
[info] # Run progress: 96.77% complete, ETA 00:02:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.820 ops/s
[info] # Warmup Iteration   2: 3015137.118 ops/s
[info] # Warmup Iteration   3: 3104331.243 ops/s
[info] Iteration   1: 3120053.335 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3112293.328 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3112817.308 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3113693.465 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3112496.601 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJavaPrealloc":
[info]   3114270.807 ±(99.9%) 12616.639 ops/s [Average]
[info]   (min, avg, max) = (3112293.328, 3114270.807, 3120053.335), stdev = 3276.501
[info]   CI (99.9%): [3101654.168, 3126887.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJavaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJavaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJavaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala
[info] # Run progress: 97.04% complete, ETA 00:02:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 944757.528 ops/s
[info] # Warmup Iteration   2: 2361480.303 ops/s
[info] # Warmup Iteration   3: 2421362.864 ops/s
[info] Iteration   1: 2366817.250 ops/s
[info]                  ·gc.alloc.rate:            950.477 MB/sec
[info]                  ·gc.alloc.rate.norm:       632.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.234 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 671.070 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 2347530.044 ops/s
[info]                  ·gc.alloc.rate:            942.597 MB/sec
[info]                  ·gc.alloc.rate.norm:       632.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.120 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 676.603 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 2367021.454 ops/s
[info]                  ·gc.alloc.rate:                   950.656 MB/sec
[info]                  ·gc.alloc.rate.norm:              632.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.006 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        670.127 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      5.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.543 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   4: 2423683.758 ops/s
[info]                  ·gc.alloc.rate:                                  973.446 MB/sec
[info]                  ·gc.alloc.rate.norm:                             632.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.187 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.121 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.392 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       663.129 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 2455536.983 ops/s
[info]                  ·gc.alloc.rate:            986.061 MB/sec
[info]                  ·gc.alloc.rate.norm:       632.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.210 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 654.528 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala":
[info]   2392117.898 ±(99.9%) 175155.788 ops/s [Average]
[info]   (min, avg, max) = (2347530.044, 2392117.898, 2455536.983), stdev = 45487.402
[info]   CI (99.9%): [2216962.110, 2567273.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   960.647 ±(99.9%) 70.445 MB/sec [Average]
[info]   (min, avg, max) = (942.597, 960.647, 986.061), stdev = 18.294
[info]   CI (99.9%): [890.203, 1031.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   632.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (632.000, 632.000, 632.000), stdev = 0.001
[info]   CI (99.9%): [632.000, 632.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.037 ±(99.9%) 0.321 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.187), stdev = 0.083
[info]   CI (99.9%): [≈ 0, 0.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.024 ±(99.9%) 0.209 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.024, 0.121), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1013.793 ±(99.9%) 26.459 MB/sec [Average]
[info]   (min, avg, max) = (1008.006, 1013.793, 1021.392), stdev = 6.871
[info]   CI (99.9%): [987.334, 1040.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   667.091 ±(99.9%) 32.733 B/op [Average]
[info]   (min, avg, max) = (654.528, 667.091, 676.603), stdev = 8.501
[info]   CI (99.9%): [634.359, 699.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 9.178 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 5.330), stdev = 2.384
[info]   CI (99.9%): [≈ 0, 10.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.709 ±(99.9%) 6.102 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.709, 3.543), stdev = 1.585
[info]   CI (99.9%): [≈ 0, 6.810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.600, 13.000), stdev = 5.177
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala
[info] # Run progress: 97.31% complete, ETA 00:02:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1946468.283 ops/s
[info] # Warmup Iteration   2: 2845528.627 ops/s
[info] # Warmup Iteration   3: 2799198.047 ops/s
[info] Iteration   1: 2830933.539 ops/s
[info]                  ·gc.alloc.rate:            661.940 MB/sec
[info]                  ·gc.alloc.rate.norm:       368.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.816 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 374.047 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 2819629.287 ops/s
[info]                  ·gc.alloc.rate:            659.324 MB/sec
[info]                  ·gc.alloc.rate.norm:       368.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.857 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 375.554 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 2829258.566 ops/s
[info]                  ·gc.alloc.rate:            661.563 MB/sec
[info]                  ·gc.alloc.rate.norm:       368.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.825 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 374.265 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 2805507.558 ops/s
[info]                  ·gc.alloc.rate:            655.980 MB/sec
[info]                  ·gc.alloc.rate.norm:       368.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.814 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 377.444 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 2827986.092 ops/s
[info]                  ·gc.alloc.rate:            661.347 MB/sec
[info]                  ·gc.alloc.rate.norm:       368.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.904 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 374.431 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala":
[info]   2822663.008 ±(99.9%) 40557.684 ops/s [Average]
[info]   (min, avg, max) = (2805507.558, 2822663.008, 2830933.539), stdev = 10532.702
[info]   CI (99.9%): [2782105.325, 2863220.692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   660.031 ±(99.9%) 9.556 MB/sec [Average]
[info]   (min, avg, max) = (655.980, 660.031, 661.940), stdev = 2.482
[info]   CI (99.9%): [650.474, 669.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   368.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (368.000, 368.000, 368.000), stdev = 0.001
[info]   CI (99.9%): [368.000, 368.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   672.843 ±(99.9%) 0.147 MB/sec [Average]
[info]   (min, avg, max) = (672.814, 672.843, 672.904), stdev = 0.038
[info]   CI (99.9%): [672.696, 672.990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   375.148 ±(99.9%) 5.426 B/op [Average]
[info]   (min, avg, max) = (374.047, 375.148, 377.444), stdev = 1.409
[info]   CI (99.9%): [369.722, 380.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 97.58% complete, ETA 00:01:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2056995.686 ops/s
[info] # Warmup Iteration   2: 2838913.565 ops/s
[info] # Warmup Iteration   3: 2842772.938 ops/s
[info] Iteration   1: 2840148.591 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2842959.246 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2825398.872 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2842558.011 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2842552.594 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   2838723.463 ±(99.9%) 29000.460 ops/s [Average]
[info]   (min, avg, max) = (2825398.872, 2838723.463, 2842959.246), stdev = 7531.327
[info]   CI (99.9%): [2809723.003, 2867723.922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson
[info] # Run progress: 97.85% complete, ETA 00:01:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1455040.548 ops/s
[info] # Warmup Iteration   2: 2180350.123 ops/s
[info] # Warmup Iteration   3: 2229221.086 ops/s
[info] Iteration   1: 2261536.319 ops/s
[info]                  ·gc.alloc.rate:            1034.390 MB/sec
[info]                  ·gc.alloc.rate.norm:       720.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.000 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 702.328 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 2227766.180 ops/s
[info]                  ·gc.alloc.rate:            1018.900 MB/sec
[info]                  ·gc.alloc.rate.norm:       720.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.961 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 712.977 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   3: 2216952.077 ops/s
[info]                  ·gc.alloc.rate:                                  1014.049 MB/sec
[info]                  ·gc.alloc.rate.norm:                             720.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.042 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.030 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1013.047 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       719.288 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                2.837 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   4: 2278861.723 ops/s
[info]                  ·gc.alloc.rate:                                  1042.682 MB/sec
[info]                  ·gc.alloc.rate.norm:                             720.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.055 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.038 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.355 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       705.273 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 2267983.036 ops/s
[info]                  ·gc.alloc.rate:                                  1037.697 MB/sec
[info]                  ·gc.alloc.rate.norm:                             720.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.339 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       708.650 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson":
[info]   2250619.867 ±(99.9%) 103217.049 ops/s [Average]
[info]   (min, avg, max) = (2216952.077, 2250619.867, 2278861.723), stdev = 26805.140
[info]   CI (99.9%): [2147402.818, 2353836.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1029.544 ±(99.9%) 47.783 MB/sec [Average]
[info]   (min, avg, max) = (1014.049, 1029.544, 1042.682), stdev = 12.409
[info]   CI (99.9%): [981.761, 1077.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   720.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (720.000, 720.000, 720.000), stdev = 0.001
[info]   CI (99.9%): [720.000, 720.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.020 ±(99.9%) 0.103 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.055), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.014 ±(99.9%) 0.072 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.038), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1014.740 ±(99.9%) 24.086 MB/sec [Average]
[info]   (min, avg, max) = (1008.961, 1014.740, 1021.355), stdev = 6.255
[info]   CI (99.9%): [990.654, 1038.827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   709.703 ±(99.9%) 25.667 B/op [Average]
[info]   (min, avg, max) = (702.328, 709.703, 719.288), stdev = 6.666
[info]   CI (99.9%): [684.036, 735.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   0.567 ±(99.9%) 4.886 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.567, 2.837), stdev = 1.269
[info]   CI (99.9%): [≈ 0, 5.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.800, 12.000), stdev = 4.025
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce
[info] # Run progress: 98.12% complete, ETA 00:01:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4692.664 ops/s
[info] # Warmup Iteration   2: 8106.616 ops/s
[info] # Warmup Iteration   3: 9623.494 ops/s
[info] Iteration   1: 9587.817 ops/s
[info]                  ·gc.alloc.rate:            1401.288 MB/sec
[info]                  ·gc.alloc.rate.norm:       229960.046 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1685.686 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 276631.625 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  27.000 ms
[info] Iteration   2: 10710.404 ops/s
[info]                  ·gc.alloc.rate:                                  1561.112 MB/sec
[info]                  ·gc.alloc.rate.norm:                             229445.499 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.028 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.051 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1354.674 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       199104.143 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                489.440 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   3: 10865.130 ops/s
[info]                  ·gc.alloc.rate:                                  1583.350 MB/sec
[info]                  ·gc.alloc.rate.norm:                             229384.040 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.028 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.061 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.746 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       246536.457 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 10849.440 ops/s
[info]                  ·gc.alloc.rate:                                  1582.067 MB/sec
[info]                  ·gc.alloc.rate.norm:                             229390.699 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.045 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 6.554 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.885 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       246763.533 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 10848.438 ops/s
[info]                  ·gc.alloc.rate:                                  1581.193 MB/sec
[info]                  ·gc.alloc.rate.norm:                             229408.038 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.042 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 6.114 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.530 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       197538.188 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce":
[info]   10572.246 ±(99.9%) 2132.755 ops/s [Average]
[info]   (min, avg, max) = (9587.817, 10572.246, 10865.130), stdev = 553.870
[info]   CI (99.9%): [8439.491, 12705.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   1541.802 ±(99.9%) 304.520 MB/sec [Average]
[info]   (min, avg, max) = (1401.288, 1541.802, 1583.350), stdev = 79.083
[info]   CI (99.9%): [1237.282, 1846.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   229517.664 ±(99.9%) 956.679 B/op [Average]
[info]   (min, avg, max) = (229384.040, 229517.664, 229960.046), stdev = 248.447
[info]   CI (99.9%): [228560.985, 230474.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.029 ±(99.9%) 0.069 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.045), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   4.156 ±(99.9%) 9.981 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.156, 6.554), stdev = 2.592
[info]   CI (99.9%): [≈ 0, 14.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1561.104 ±(99.9%) 714.093 MB/sec [Average]
[info]   (min, avg, max) = (1354.674, 1561.104, 1701.885), stdev = 185.448
[info]   CI (99.9%): [847.012, 2275.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   233314.789 ±(99.9%) 131745.533 B/op [Average]
[info]   (min, avg, max) = (197538.188, 233314.789, 276631.625), stdev = 34213.897
[info]   CI (99.9%): [101569.256, 365060.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   97.888 ±(99.9%) 842.845 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 97.888, 489.440), stdev = 218.884
[info]   CI (99.9%): [≈ 0, 940.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.time":
[info]   49.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 9.800, 27.000), stdev = 9.834
[info]   CI (99.9%): [49.000, 49.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala
[info] # Run progress: 98.39% complete, ETA 00:01:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4116.114 ops/s
[info] # Warmup Iteration   2: 13137.022 ops/s
[info] # Warmup Iteration   3: 13447.947 ops/s
[info] Iteration   1: 13974.312 ops/s
[info]                  ·gc.alloc.rate:      197.285 MB/sec
[info]                  ·gc.alloc.rate.norm: 22224.031 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 13869.168 ops/s
[info]                  ·gc.alloc.rate:                   195.824 MB/sec
[info]                  ·gc.alloc.rate.norm:              22224.029 B/op
[info]                  ·gc.churn.G1_Old_Gen:             334.355 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        37945.873 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      1.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 151.179 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 14093.598 ops/s
[info]                  ·gc.alloc.rate:            199.153 MB/sec
[info]                  ·gc.alloc.rate.norm:       22236.752 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.777 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 37491.650 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 14243.890 ops/s
[info]                  ·gc.alloc.rate:      201.269 MB/sec
[info]                  ·gc.alloc.rate.norm: 22240.029 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 14188.260 ops/s
[info]                  ·gc.alloc.rate:            200.467 MB/sec
[info]                  ·gc.alloc.rate.norm:       22240.029 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.679 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 37240.667 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala":
[info]   14073.845 ±(99.9%) 590.907 ops/s [Average]
[info]   (min, avg, max) = (13869.168, 14073.845, 14243.890), stdev = 153.457
[info]   CI (99.9%): [13482.938, 14664.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   198.800 ±(99.9%) 8.642 MB/sec [Average]
[info]   (min, avg, max) = (195.824, 198.800, 201.269), stdev = 2.244
[info]   CI (99.9%): [190.158, 207.442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   22232.974 ±(99.9%) 31.857 B/op [Average]
[info]   (min, avg, max) = (22224.029, 22232.974, 22240.029), stdev = 8.273
[info]   CI (99.9%): [22201.117, 22264.831] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   201.162 ±(99.9%) 707.117 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 201.162, 335.777), stdev = 183.636
[info]   CI (99.9%): [≈ 0, 908.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   22535.638 ±(99.9%) 79221.922 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 22535.638, 37945.873), stdev = 20573.682
[info]   CI (99.9%): [≈ 0, 101757.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 2.294 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 1.332), stdev = 0.596
[info]   CI (99.9%): [≈ 0, 2.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   30.236 ±(99.9%) 260.339 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 30.236, 151.179), stdev = 67.609
[info]   CI (99.9%): [≈ 0, 290.575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.000, 5.000), stdev = 2.739
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala
[info] # Run progress: 98.66% complete, ETA 00:01:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17940.566 ops/s
[info] # Warmup Iteration   2: 21140.066 ops/s
[info] # Warmup Iteration   3: 37247.205 ops/s
[info] Iteration   1: 37308.416 ops/s
[info]                  ·gc.alloc.rate:            345.459 MB/sec
[info]                  ·gc.alloc.rate.norm:       14576.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.996 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14218.932 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 37589.660 ops/s
[info]                  ·gc.alloc.rate:            348.059 MB/sec
[info]                  ·gc.alloc.rate.norm:       14576.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.995 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14112.657 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 37706.598 ops/s
[info]                  ·gc.alloc.rate:            349.170 MB/sec
[info]                  ·gc.alloc.rate.norm:       14576.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.022 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14068.874 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 37872.445 ops/s
[info]                  ·gc.alloc.rate:            350.723 MB/sec
[info]                  ·gc.alloc.rate.norm:       14576.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.037 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14007.219 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 37675.937 ops/s
[info]                  ·gc.alloc.rate:            348.861 MB/sec
[info]                  ·gc.alloc.rate.norm:       14576.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.000 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14080.448 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala":
[info]   37630.611 ±(99.9%) 798.019 ops/s [Average]
[info]   (min, avg, max) = (37308.416, 37630.611, 37872.445), stdev = 207.243
[info]   CI (99.9%): [36832.593, 38428.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   348.454 ±(99.9%) 7.446 MB/sec [Average]
[info]   (min, avg, max) = (345.459, 348.454, 350.723), stdev = 1.934
[info]   CI (99.9%): [341.009, 355.900] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   14576.012 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (14576.011, 14576.012, 14576.015), stdev = 0.002
[info]   CI (99.9%): [14576.006, 14576.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   337.010 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (336.995, 337.010, 337.037), stdev = 0.019
[info]   CI (99.9%): [336.938, 337.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   14097.626 ±(99.9%) 299.734 B/op [Average]
[info]   (min, avg, max) = (14007.219, 14097.626, 14218.932), stdev = 77.840
[info]   CI (99.9%): [13797.892, 14397.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson
[info] # Run progress: 98.92% complete, ETA 00:00:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 711.475 ops/s
[info] # Warmup Iteration   2: 2654.531 ops/s
[info] # Warmup Iteration   3: 2514.017 ops/s
[info] Iteration   1: 2458.182 ops/s
[info]                  ·gc.alloc.rate:            780.381 MB/sec
[info]                  ·gc.alloc.rate.norm:       499456.179 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.601 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 429835.139 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   2: 2899.646 ops/s
[info]                  ·gc.alloc.rate:            919.952 MB/sec
[info]                  ·gc.alloc.rate.norm:       499183.225 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.532 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 546705.832 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  23.000 ms
[info] Iteration   3: 2968.467 ops/s
[info]                  ·gc.alloc.rate:            941.727 MB/sec
[info]                  ·gc.alloc.rate.norm:       499144.137 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.490 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 534000.307 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  20.000 ms
[info] Iteration   4: 2956.913 ops/s
[info]                  ·gc.alloc.rate:                   938.215 MB/sec
[info]                  ·gc.alloc.rate.norm:              499144.138 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1011.463 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        538113.039 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2481.417 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         22.000 ms
[info] Iteration   5: 3014.317 ops/s
[info]                  ·gc.alloc.rate:                                  956.365 MB/sec
[info]                  ·gc.alloc.rate.norm:                             499144.146 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.057 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 29.609 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.533 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       533156.553 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson":
[info]   2859.505 ±(99.9%) 878.080 ops/s [Average]
[info]   (min, avg, max) = (2458.182, 2859.505, 3014.317), stdev = 228.035
[info]   CI (99.9%): [1981.425, 3737.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   907.328 ±(99.9%) 277.785 MB/sec [Average]
[info]   (min, avg, max) = (780.381, 907.328, 956.365), stdev = 72.140
[info]   CI (99.9%): [629.543, 1185.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   499214.365 ±(99.9%) 524.586 B/op [Average]
[info]   (min, avg, max) = (499144.137, 499214.365, 499456.179), stdev = 136.233
[info]   CI (99.9%): [498689.779, 499738.951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.011 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.057), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   5.922 ±(99.9%) 50.989 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.922, 29.609), stdev = 13.242
[info]   CI (99.9%): [≈ 0, 56.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   943.924 ±(99.9%) 586.610 MB/sec [Average]
[info]   (min, avg, max) = (671.601, 943.924, 1021.533), stdev = 152.341
[info]   CI (99.9%): [357.313, 1530.534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   516362.174 ±(99.9%) 187399.414 B/op [Average]
[info]   (min, avg, max) = (429835.139, 516362.174, 546705.832), stdev = 48667.033
[info]   CI (99.9%): [328962.760, 703761.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 8.032 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.664), stdev = 2.086
[info]   CI (99.9%): [≈ 0, 8.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   496.283 ±(99.9%) 4273.150 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 496.283, 2481.417), stdev = 1109.723
[info]   CI (99.9%): [≈ 0, 4769.433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.time":
[info]   90.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 18.000, 23.000), stdev = 6.892
[info]   CI (99.9%): [90.000, 90.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala
[info] # Run progress: 99.19% complete, ETA 00:00:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_227b1689/target/5e31e36e/jackson-module-afterburner-2.9.4.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 20495.585 ops/s
[info] # Warmup Iteration   2: 53471.319 ops/s
[info] # Warmup Iteration   3: 55106.559 ops/s
[info] Iteration   1: 56071.462 ops/s
[info]                  ·gc.alloc.rate:            715.964 MB/sec
[info]                  ·gc.alloc.rate.norm:       20100.084 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.013 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18810.047 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 56493.011 ops/s
[info]                  ·gc.alloc.rate:            721.367 MB/sec
[info]                  ·gc.alloc.rate.norm:       20099.954 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.008 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18668.899 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 55982.171 ops/s
[info]                  ·gc.alloc.rate:            714.894 MB/sec
[info]                  ·gc.alloc.rate.norm:       20100.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.077 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18839.947 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 56110.994 ops/s
[info]                  ·gc.alloc.rate:            716.517 MB/sec
[info]                  ·gc.alloc.rate.norm:       20099.992 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.032 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18795.970 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 56298.267 ops/s
[info]                  ·gc.alloc.rate:                   719.108 MB/sec
[info]                  ·gc.alloc.rate.norm:              20100.074 B/op
[info]                  ·gc.churn.G1_Old_Gen:             670.242 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        18734.215 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 111.735 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala":
[info]   56191.181 ±(99.9%) 786.834 ops/s [Average]
[info]   (min, avg, max) = (55982.171, 56191.181, 56493.011), stdev = 204.338
[info]   CI (99.9%): [55404.347, 56978.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   717.570 ±(99.9%) 10.120 MB/sec [Average]
[info]   (min, avg, max) = (714.894, 717.570, 721.367), stdev = 2.628
[info]   CI (99.9%): [707.450, 727.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   20100.024 ±(99.9%) 0.211 B/op [Average]
[info]   (min, avg, max) = (20099.954, 20100.024, 20100.084), stdev = 0.055
[info]   CI (99.9%): [20099.812, 20100.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   670.074 ±(99.9%) 0.377 MB/sec [Average]
[info]   (min, avg, max) = (670.008, 670.074, 670.242), stdev = 0.098
[info]   CI (99.9%): [669.698, 670.451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   18769.816 ±(99.9%) 263.091 B/op [Average]
[info]   (min, avg, max) = (18668.899, 18769.816, 18839.947), stdev = 68.324
[info]   CI (99.9%): [18506.725, 19032.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.884 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   22.347 ±(99.9%) 192.414 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 22.347, 111.735), stdev = 49.969
[info]   CI (99.9%): [≈ 0, 214.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.time":
[info]   51.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (10.000, 10.200, 11.000), stdev = 0.447
[info]   CI (99.9%): [51.000, 51.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala
[info] # Run progress: 99.46% complete, ETA 00:00:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 67428.407 ops/s
[info] # Warmup Iteration   2: 85615.945 ops/s
[info] # Warmup Iteration   3: 87155.382 ops/s
[info] Iteration   1: 87956.507 ops/s
[info]                  ·gc.alloc.rate:            576.736 MB/sec
[info]                  ·gc.alloc.rate.norm:       10320.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.789 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12038.760 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 87032.413 ops/s
[info]                  ·gc.alloc.rate:            570.660 MB/sec
[info]                  ·gc.alloc.rate.norm:       10320.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.776 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12166.691 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 87104.821 ops/s
[info]                  ·gc.alloc.rate:            571.258 MB/sec
[info]                  ·gc.alloc.rate.norm:       10320.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.924 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12156.635 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 88572.486 ops/s
[info]                  ·gc.alloc.rate:            580.966 MB/sec
[info]                  ·gc.alloc.rate.norm:       10320.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.509 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5977.591 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 86875.230 ops/s
[info]                  ·gc.alloc.rate:            569.539 MB/sec
[info]                  ·gc.alloc.rate.norm:       10320.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.660 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12188.534 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala":
[info]   87508.292 ±(99.9%) 2805.573 ops/s [Average]
[info]   (min, avg, max) = (86875.230, 87508.292, 88572.486), stdev = 728.598
[info]   CI (99.9%): [84702.719, 90313.865] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   573.832 ±(99.9%) 18.710 MB/sec [Average]
[info]   (min, avg, max) = (569.539, 573.832, 580.966), stdev = 4.859
[info]   CI (99.9%): [555.122, 592.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   10320.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10320.005, 10320.005, 10320.005), stdev = 0.001
[info]   CI (99.9%): [10320.004, 10320.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   605.531 ±(99.9%) 579.090 MB/sec [Average]
[info]   (min, avg, max) = (336.509, 605.531, 672.924), stdev = 150.388
[info]   CI (99.9%): [26.441, 1184.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   10905.642 ±(99.9%) 10610.373 B/op [Average]
[info]   (min, avg, max) = (5977.591, 10905.642, 12188.534), stdev = 2755.480
[info]   CI (99.9%): [295.269, 21516.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 7.000), stdev = 1.732
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 99.73% complete, ETA 00:00:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 80990.557 ops/s
[info] # Warmup Iteration   2: 101284.344 ops/s
[info] # Warmup Iteration   3: 101515.746 ops/s
[info] Iteration   1: 100872.062 ops/s
[info]                  ·gc.alloc.rate:      6.666 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 101385.285 ops/s
[info]                  ·gc.alloc.rate:      6.699 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 101475.177 ops/s
[info]                  ·gc.alloc.rate:      6.706 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 101171.000 ops/s
[info]                  ·gc.alloc.rate:      6.685 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 101522.501 ops/s
[info]                  ·gc.alloc.rate:      6.710 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   101285.205 ±(99.9%) 1029.902 ops/s [Average]
[info]   (min, avg, max) = (100872.062, 101285.205, 101522.501), stdev = 267.462
[info]   CI (99.9%): [100255.303, 102315.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   6.693 ±(99.9%) 0.069 MB/sec [Average]
[info]   (min, avg, max) = (6.666, 6.693, 6.710), stdev = 0.018
[info]   CI (99.9%): [6.624, 6.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   104.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (104.004, 104.004, 104.004), stdev = 0.001
[info]   CI (99.9%): [104.004, 104.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # Run complete. Total time: 01:19:53
[info] Benchmark                                                                                                Mode  Cnt         Score          Error   Units
[info] AdtBenchmark.readCirce                                                                                  thrpt    5    697559.378 ±    36642.303   ops/s
[info] AdtBenchmark.readCirce:·gc.alloc.rate                                                                   thrpt    5      1843.610 ±       96.977  MB/sec
[info] AdtBenchmark.readCirce:·gc.alloc.rate.norm                                                              thrpt    5      4160.001 ±        0.001    B/op
[info] AdtBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                       thrpt    5         0.012 ±        0.098  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                  thrpt    5         0.028 ±        0.221    B/op
[info] AdtBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                             thrpt    5      1836.024 ±      707.409  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                        thrpt    5      4143.491 ±     1608.592    B/op
[info] AdtBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                      thrpt    5         0.666 ±        5.735  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                                 thrpt    5         1.505 ±       12.957    B/op
[info] AdtBenchmark.readCirce:·gc.count                                                                        thrpt    5        27.000                 counts
[info] AdtBenchmark.readCirce:·gc.time                                                                         thrpt    5        31.000                     ms
[info] AdtBenchmark.readJacksonScala                                                                           thrpt    5   1446821.668 ±    82453.868   ops/s
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate                                                            thrpt    5      1029.589 ±       58.385  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                       thrpt    5      1120.000 ±        0.001    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                                thrpt    5         0.040 ±        0.341  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           thrpt    5         0.043 ±        0.367    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                      thrpt    5      1012.940 ±       29.541  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                 thrpt    5      1102.129 ±       83.457    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                               thrpt    5         0.932 ±        8.029  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                          thrpt    5         1.010 ±        8.698    B/op
[info] AdtBenchmark.readJacksonScala:·gc.count                                                                 thrpt    5        15.000                 counts
[info] AdtBenchmark.readJacksonScala:·gc.time                                                                  thrpt    5        49.000                     ms
[info] AdtBenchmark.readJsoniterScala                                                                          thrpt    5   3312071.168 ±    62254.002   ops/s
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate                                                           thrpt    5       218.837 ±        4.095  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                      thrpt    5       104.000 ±        0.001    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                     thrpt    5       269.494 ±      580.108  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                thrpt    5       128.201 ±      275.973    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                              thrpt    5         0.133 ±        1.147  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                         thrpt    5         0.064 ±        0.548    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.count                                                                thrpt    5         4.000                 counts
[info] AdtBenchmark.readJsoniterScala:·gc.time                                                                 thrpt    5        11.000                     ms
[info] AdtBenchmark.readPlayJson                                                                               thrpt    5    160404.584 ±     9824.090   ops/s
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate                                                                thrpt    5      1267.825 ±       77.774  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate.norm                                                           thrpt    5     12440.003 ±        0.001    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                    thrpt    5         0.007 ±        0.053  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                               thrpt    5         0.065 ±        0.514    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                          thrpt    5      1286.427 ±      571.962  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                     thrpt    5     12627.067 ±     5730.143    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                   thrpt    5         1.199 ±        7.781  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                              thrpt    5        11.881 ±       76.781    B/op
[info] AdtBenchmark.readPlayJson:·gc.count                                                                     thrpt    5        19.000                 counts
[info] AdtBenchmark.readPlayJson:·gc.time                                                                      thrpt    5        50.000                     ms
[info] AdtBenchmark.writeCirce                                                                                 thrpt    5    528665.674 ±    12480.737   ops/s
[info] AdtBenchmark.writeCirce:·gc.alloc.rate                                                                  thrpt    5      1725.058 ±       41.479  MB/sec
[info] AdtBenchmark.writeCirce:·gc.alloc.rate.norm                                                             thrpt    5      5136.001 ±        0.001    B/op
[info] AdtBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                      thrpt    5         0.031 ±        0.242  MB/sec
[info] AdtBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                 thrpt    5         0.092 ±        0.720    B/op
[info] AdtBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                            thrpt    5      1766.496 ±      594.226  MB/sec
[info] AdtBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                       thrpt    5      5259.008 ±     1741.863    B/op
[info] AdtBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                     thrpt    5         0.799 ±        6.881  MB/sec
[info] AdtBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                                thrpt    5         2.406 ±       20.714    B/op
[info] AdtBenchmark.writeCirce:·gc.count                                                                       thrpt    5        26.000                 counts
[info] AdtBenchmark.writeCirce:·gc.time                                                                        thrpt    5        36.000                     ms
[info] AdtBenchmark.writeJacksonScala                                                                          thrpt    5   1674287.466 ±   134824.937   ops/s
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate                                                           thrpt    5       646.766 ±       52.042  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                      thrpt    5       608.000 ±        0.001    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                     thrpt    5       671.435 ±        0.341  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                                thrpt    5       631.412 ±       50.751    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.count                                                                thrpt    5        10.000                 counts
[info] AdtBenchmark.writeJacksonScala:·gc.time                                                                 thrpt    5        46.000                     ms
[info] AdtBenchmark.writeJsoniterScala                                                                         thrpt    5   8157324.907 ±   528134.078   ops/s
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate                                                          thrpt    5       414.576 ±       26.875  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                     thrpt    5        80.000 ±        0.001    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                    thrpt    5       403.628 ±      579.313  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                               thrpt    5        77.726 ±      108.409    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.count                                                               thrpt    5         6.000                 counts
[info] AdtBenchmark.writeJsoniterScala:·gc.time                                                                thrpt    5        19.000                     ms
[info] AdtBenchmark.writePlayJson                                                                              thrpt    5    307113.288 ±     8329.110   ops/s
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate                                                               thrpt    5      1041.315 ±       27.741  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate.norm                                                          thrpt    5      5336.001 ±        0.001    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   thrpt    5         0.039 ±        0.336  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              thrpt    5         0.201 ±        1.732    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                         thrpt    5      1080.872 ±      563.871  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                    thrpt    5      5540.675 ±     2965.946    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                  thrpt    5         1.199 ±        7.569  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                             thrpt    5         6.155 ±       38.858    B/op
[info] AdtBenchmark.writePlayJson:·gc.count                                                                    thrpt    5        16.000                 counts
[info] AdtBenchmark.writePlayJson:·gc.time                                                                     thrpt    5        49.000                     ms
[info] AnyRefsBenchmark.readCirce                                                                              thrpt    5   1474334.876 ±    67350.755   ops/s
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate                                                               thrpt    5      2315.611 ±      105.997  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm                                                          thrpt    5      2472.000 ±        0.001    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   thrpt    5         0.016 ±        0.122  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              thrpt    5         0.018 ±        0.133    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                         thrpt    5      2314.695 ±      586.303  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                    thrpt    5      2470.078 ±      548.897    B/op
[info] AnyRefsBenchmark.readCirce:·gc.count                                                                    thrpt    5        34.000                 counts
[info] AnyRefsBenchmark.readCirce:·gc.time                                                                     thrpt    5        28.000                     ms
[info] AnyRefsBenchmark.readDslJsonJava                                                                        thrpt    5   9742269.793 ±  1079139.001   ops/s
[info] AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate                                                         thrpt    5      1188.378 ±      131.652  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                    thrpt    5       192.000 ±        0.001    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'                             thrpt    5         0.120 ±        0.839  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        thrpt    5         0.019 ±        0.134    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                                   thrpt    5      1146.063 ±      711.933  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                              thrpt    5       185.588 ±      126.665    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space                                            thrpt    5         1.332 ±       11.470  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm                                       thrpt    5         0.213 ±        1.838    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.count                                                              thrpt    5        17.000                 counts
[info] AnyRefsBenchmark.readDslJsonJava:·gc.time                                                               thrpt    5        51.000                     ms
[info] AnyRefsBenchmark.readJacksonScala                                                                       thrpt    5   2228891.469 ±    77411.807   ops/s
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate                                                        thrpt    5      1563.287 ±       54.009  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                   thrpt    5      1104.000 ±        0.001    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                            thrpt    5         0.026 ±        0.211  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       thrpt    5         0.018 ±        0.150    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                  thrpt    5      1561.367 ±      703.520  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                             thrpt    5      1102.957 ±      507.546    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                           thrpt    5         0.932 ±        8.028  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                      thrpt    5         0.667 ±        5.742    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.count                                                             thrpt    5        23.000                 counts
[info] AnyRefsBenchmark.readJacksonScala:·gc.time                                                              thrpt    5        42.000                     ms
[info] AnyRefsBenchmark.readJsoniterScala                                                                      thrpt    5   9655367.062 ±  1289065.810   ops/s
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate                                                       thrpt    5      1227.001 ±      163.548  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                  thrpt    5       200.000 ±        0.001    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                           thrpt    5         0.025 ±        0.198  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      thrpt    5         0.004 ±        0.031    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                 thrpt    5      1222.149 ±      724.401  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                            thrpt    5       199.533 ±      124.570    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                          thrpt    5         0.666 ±        5.737  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                     thrpt    5         0.106 ±        0.911    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.count                                                            thrpt    5        18.000                 counts
[info] AnyRefsBenchmark.readJsoniterScala:·gc.time                                                             thrpt    5        26.000                     ms
[info] AnyRefsBenchmark.readPlayJson                                                                           thrpt    5    583221.265 ±    14523.091   ops/s
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate                                                            thrpt    5      1499.828 ±       37.471  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                       thrpt    5      4048.001 ±        0.001    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                thrpt    5         0.040 ±        0.341  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           thrpt    5         0.108 ±        0.923    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                      thrpt    5      1492.057 ±      721.257  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                 thrpt    5      4025.678 ±     1889.241    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                               thrpt    5         1.066 ±        7.821  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                          thrpt    5         2.884 ±       21.159    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.count                                                                 thrpt    5        22.000                 counts
[info] AnyRefsBenchmark.readPlayJson:·gc.time                                                                  thrpt    5        44.000                     ms
[info] AnyRefsBenchmark.writeCirce                                                                             thrpt    5   1799730.285 ±    77908.006   ops/s
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate                                                              thrpt    5      1692.447 ±       74.726  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm                                                         thrpt    5      1480.000 ±        0.001    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                  thrpt    5         0.020 ±        0.102  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                             thrpt    5         0.018 ±        0.091    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                        thrpt    5      1699.382 ±       23.921  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                   thrpt    5      1486.183 ±       51.200    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                 thrpt    5         0.666 ±        5.734  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                            thrpt    5         0.591 ±        5.092    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.count                                                                   thrpt    5        25.000                 counts
[info] AnyRefsBenchmark.writeCirce:·gc.time                                                                    thrpt    5        32.000                     ms
[info] AnyRefsBenchmark.writeDslJsonJava                                                                       thrpt    5  17815027.609 ±  2169918.029   ops/s
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                        thrpt    5       543.269 ±       66.260  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                   thrpt    5        48.000 ±        0.001    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                                  thrpt    5       533.777 ±      704.375  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                             thrpt    5        47.453 ±       65.656    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space                                           thrpt    5         0.133 ±        1.147  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space.norm                                      thrpt    5         0.011 ±        0.099    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.count                                                             thrpt    5         8.000                 counts
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.time                                                              thrpt    5        38.000                     ms
[info] AnyRefsBenchmark.writeDslJsonJavaPrealloc                                                               thrpt    5  19722016.974 ±  1644545.775   ops/s
[info] AnyRefsBenchmark.writeDslJsonJavaPrealloc:·gc.alloc.rate                                                thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] AnyRefsBenchmark.writeDslJsonJavaPrealloc:·gc.alloc.rate.norm                                           thrpt    5        ≈ 10⁻⁵                   B/op
[info] AnyRefsBenchmark.writeDslJsonJavaPrealloc:·gc.count                                                     thrpt    5           ≈ 0                 counts
[info] AnyRefsBenchmark.writeJacksonScala                                                                      thrpt    5   4864373.112 ±    68392.525   ops/s
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate                                                       thrpt    5      1335.204 ±       19.771  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                  thrpt    5       432.000 ±        0.001    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                           thrpt    5         0.013 ±        0.065  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      thrpt    5         0.004 ±        0.021    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                 thrpt    5      1287.770 ±      574.129  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                            thrpt    5       416.737 ±      188.592    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                          thrpt    5         0.932 ±        8.028  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                     thrpt    5         0.303 ±        2.612    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.count                                                            thrpt    5        19.000                 counts
[info] AnyRefsBenchmark.writeJacksonScala:·gc.time                                                             thrpt    5        39.000                     ms
[info] AnyRefsBenchmark.writeJsoniterScala                                                                     thrpt    5  21651911.127 ±  1658414.631   ops/s
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                      thrpt    5       660.320 ±       50.656  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                 thrpt    5        48.000 ±        0.001    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                thrpt    5       605.609 ±      577.997  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                           thrpt    5        44.067 ±       42.585    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                         thrpt    5         0.133 ±        1.147  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                    thrpt    5         0.010 ±        0.083    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.count                                                           thrpt    5         9.000                 counts
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.time                                                            thrpt    5        32.000                     ms
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc                                                             thrpt    5  20749860.931 ±   654737.360   ops/s
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                              thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                         thrpt    5        ≈ 10⁻⁵                   B/op
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                   thrpt    5           ≈ 0                 counts
[info] AnyRefsBenchmark.writePlayJson                                                                          thrpt    5   1303394.712 ±    48410.835   ops/s
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate                                                           thrpt    5      1901.097 ±       70.832  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                      thrpt    5      2296.000 ±        0.001    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                               thrpt    5         0.047 ±        0.329  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                          thrpt    5         0.057 ±        0.404    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                     thrpt    5      1902.320 ±      705.751  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                thrpt    5      2298.763 ±      908.284    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                              thrpt    5         1.066 ±        9.175  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                         thrpt    5         1.307 ±       11.256    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.count                                                                thrpt    5        28.000                 counts
[info] AnyRefsBenchmark.writePlayJson:·gc.time                                                                 thrpt    5        41.000                     ms
[info] ArrayOfBigDecimalsBenchmark.readCirce                                                                   thrpt    5     19287.977 ±      330.619   ops/s
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate                                                    thrpt    5      1206.831 ±       20.599  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate.norm                                               thrpt    5     98480.032 ±        0.082    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                        thrpt    5         0.023 ±        0.109  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   thrpt    5         1.853 ±        8.935    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                              thrpt    5      1220.677 ±      701.614  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                         thrpt    5     99660.939 ±    58765.815    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                       thrpt    5         0.666 ±        5.734  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                  thrpt    5        54.395 ±      468.359    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.count                                                         thrpt    5        18.000                 counts
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.time                                                          thrpt    5        33.000                     ms
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala                                                            thrpt    5     31678.820 ±      609.875   ops/s
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate                                             thrpt    5       794.053 ±       15.229  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        thrpt    5     39456.014 ±        0.006    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                 thrpt    5         0.032 ±        0.273  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            thrpt    5         1.565 ±       13.477    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                       thrpt    5       741.555 ±      575.972  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                  thrpt    5     36865.390 ±    29153.155    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                           thrpt    5        39.824 ±      342.900    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.count                                                  thrpt    5        11.000                 counts
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.time                                                   thrpt    5        41.000                     ms
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala                                                           thrpt    5     32935.397 ±     1247.149   ops/s
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate                                            thrpt    5       442.424 ±       16.869  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       thrpt    5     21144.013 ±        0.007    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                      thrpt    5       471.827 ±      710.698  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                 thrpt    5     22566.261 ±    34192.791    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.count                                                 thrpt    5         7.000                 counts
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.time                                                  thrpt    5        21.000                     ms
[info] ArrayOfBigDecimalsBenchmark.readPlayJson                                                                thrpt    5     25401.931 ±     1798.128   ops/s
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate                                                 thrpt    5      1346.073 ±       95.526  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate.norm                                            thrpt    5     83400.017 ±        0.009    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                     thrpt    5         0.022 ±        0.176  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                thrpt    5         1.386 ±       11.067    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                           thrpt    5      1289.495 ±      603.890  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                      thrpt    5     79798.424 ±    33678.556    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                    thrpt    5         0.799 ±        6.883  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                               thrpt    5        50.165 ±      431.937    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.count                                                      thrpt    5        19.000                 counts
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.time                                                       thrpt    5        34.000                     ms
[info] ArrayOfBigDecimalsBenchmark.writeCirce                                                                  thrpt    5     27565.522 ±     1137.799   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate                                                   thrpt    5      1672.357 ±       69.071  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate.norm                                              thrpt    5     95479.730 ±        2.455    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                       thrpt    5         0.031 ±        0.227  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                  thrpt    5         1.827 ±       13.230    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                             thrpt    5      1631.734 ±      582.403  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                        thrpt    5     93173.165 ±    33655.305    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                      thrpt    5         0.666 ±        5.732  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                 thrpt    5        38.736 ±      333.526    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.count                                                        thrpt    5        24.000                 counts
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.time                                                         thrpt    5        31.000                     ms
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala                                                           thrpt    5     28130.866 ±     1578.236   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate                                            thrpt    5      1540.686 ±       86.545  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       thrpt    5     86208.026 ±        0.098    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                thrpt    5         0.018 ±        0.111  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm           thrpt    5         0.979 ±        6.247    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                      thrpt    5      1494.220 ±      729.696  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                 thrpt    5     83589.605 ±    39793.338    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                               thrpt    5         0.932 ±        8.029  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                          thrpt    5        53.507 ±      460.708    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.count                                                 thrpt    5        22.000                 counts
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.time                                                  thrpt    5        36.000                     ms
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala                                                          thrpt    5     31456.327 ±      963.993   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate                                           thrpt    5      1623.332 ±       50.222  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      thrpt    5     81224.014 ±        0.007    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'               thrpt    5         0.031 ±        0.231  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm          thrpt    5         1.557 ±       11.640    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                     thrpt    5      1631.414 ±      581.463  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                thrpt    5     81669.578 ±    30820.989    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                              thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                         thrpt    5        40.267 ±      346.708    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.count                                                thrpt    5        24.000                 counts
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.time                                                 thrpt    5        28.000                     ms
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc                                                  thrpt    5     31967.385 ±     1661.906   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   thrpt    5      1587.608 ±       83.319  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              thrpt    5     78168.023 ±        0.087    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'       thrpt    5         0.023 ±        0.112  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm  thrpt    5         1.121 ±        5.475    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen                             thrpt    5      1563.316 ±      731.539  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm                        thrpt    5     76936.169 ±    34404.729    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space                      thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm                 thrpt    5        40.247 ±      346.541    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        thrpt    5        23.000                 counts
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                         thrpt    5        27.000                     ms
[info] ArrayOfBigDecimalsBenchmark.writePlayJson                                                               thrpt    5      7993.834 ±      212.408   ops/s
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate                                                thrpt    5      1039.442 ±       27.758  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate.norm                                           thrpt    5    204656.052 ±        0.008    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                    thrpt    5         0.024 ±        0.159  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               thrpt    5         4.725 ±       31.147    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                          thrpt    5      1081.936 ±      567.042  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                     thrpt    5    212964.648 ±   108983.279    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.799 ±        6.883  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                              thrpt    5       156.135 ±     1344.369    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.count                                                     thrpt    5        16.000                 counts
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.time                                                      thrpt    5        42.000                     ms
[info] ArrayOfBigIntsBenchmark.readCirce                                                                       thrpt    5     19961.733 ±      958.044   ops/s
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate                                                        thrpt    5      1525.031 ±       73.836  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm                                                   thrpt    5    120238.631 ±       10.308    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                            thrpt    5         0.025 ±        0.185  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       thrpt    5         1.936 ±       14.527    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                  thrpt    5      1495.057 ±      727.795  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                             thrpt    5    117792.928 ±    53689.470    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                           thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                      thrpt    5        53.616 ±      461.653    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.count                                                             thrpt    5        22.000                 counts
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.time                                                              thrpt    5        30.000                     ms
[info] ArrayOfBigIntsBenchmark.readJacksonScala                                                                thrpt    5     39431.113 ±     2473.066   ops/s
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate                                                 thrpt    5       972.648 ±       61.310  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                            thrpt    5     38823.846 ±        1.418    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                     thrpt    5         0.021 ±        0.118  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                thrpt    5         0.853 ±        4.761    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                           thrpt    5       946.536 ±      572.280  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                      thrpt    5     37797.069 ±    23151.018    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                    thrpt    5         0.932 ±        6.688  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                               thrpt    5        37.976 ±      272.853    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count                                                      thrpt    5        14.000                 counts
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time                                                       thrpt    5        39.000                     ms
[info] ArrayOfBigIntsBenchmark.readJsoniterScala                                                               thrpt    5     59595.028 ±     1355.776   ops/s
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                                thrpt    5       770.141 ±       17.265  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                           thrpt    5     20336.007 ±        0.001    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                    thrpt    5         0.006 ±        0.047  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               thrpt    5         0.147 ±        1.264    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                          thrpt    5       810.413 ±      718.457  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                     thrpt    5     21415.771 ±    19335.944    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.666 ±        5.737  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                              thrpt    5        17.766 ±      152.972    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count                                                     thrpt    5        12.000                 counts
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time                                                      thrpt    5        32.000                     ms
[info] ArrayOfBigIntsBenchmark.readPlayJson                                                                    thrpt    5     29951.760 ±      808.285   ops/s
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate                                                     thrpt    5      2001.042 ±       54.449  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                thrpt    5    105144.015 ±        0.005    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                         thrpt    5         0.005 ±        0.024  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    thrpt    5         0.270 ±        1.260    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                               thrpt    5      1973.379 ±      594.100  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                          thrpt    5    103727.547 ±    33094.406    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                        thrpt    5         0.933 ±        8.030  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                   thrpt    5        48.561 ±      418.127    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.count                                                          thrpt    5        29.000                 counts
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.time                                                           thrpt    5        33.000                     ms
[info] ArrayOfBigIntsBenchmark.writeJacksonScala                                                               thrpt    5     31906.317 ±      561.779   ops/s
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                                thrpt    5      1806.904 ±       31.990  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                           thrpt    5     89144.014 ±        0.009    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                    thrpt    5         0.024 ±        0.186  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               thrpt    5         1.186 ±        9.241    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                          thrpt    5      1836.090 ±      724.024  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                     thrpt    5     90576.536 ±    35318.610    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.932 ±        8.028  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                              thrpt    5        46.226 ±      398.022    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count                                                     thrpt    5        27.000                 counts
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time                                                      thrpt    5        33.000                     ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala                                                              thrpt    5     44238.203 ±      801.293   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                               thrpt    5      1843.755 ±       33.512  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                          thrpt    5     65600.010 ±        0.002    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                   thrpt    5         0.028 ±        0.223  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm              thrpt    5         1.003 ±        7.967    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                         thrpt    5      1837.217 ±      721.053  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                    thrpt    5     65366.438 ±    25583.838    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                  thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                             thrpt    5        28.494 ±      245.341    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count                                                    thrpt    5        27.000                 counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time                                                     thrpt    5        24.000                     ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc                                                      thrpt    5     45940.010 ±     1014.154   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                       thrpt    5      1685.235 ±       36.316  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                  thrpt    5     57736.009 ±        0.001    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'           thrpt    5         0.029 ±        0.224  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm      thrpt    5         1.002 ±        7.668    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen                                 thrpt    5      1699.541 ±       21.173  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm                            thrpt    5     58227.682 ±     1523.626    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space                          thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm                     thrpt    5        27.364 ±      235.609    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                            thrpt    5        25.000                 counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                             thrpt    5        27.000                     ms
[info] ArrayOfBooleansBenchmark.readCirce                                                                      thrpt    5    343255.647 ±    10940.141   ops/s
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                       thrpt    5      1735.806 ±       55.432  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                                  thrpt    5      7960.001 ±        0.001    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                           thrpt    5         0.024 ±        0.188  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      thrpt    5         0.108 ±        0.854    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                 thrpt    5      1700.355 ±       10.992  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                            thrpt    5      7797.910 ±      281.536    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                          thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                     thrpt    5         3.028 ±       26.072    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.count                                                            thrpt    5        25.000                 counts
[info] ArrayOfBooleansBenchmark.readCirce:·gc.time                                                             thrpt    5        27.000                     ms
[info] ArrayOfBooleansBenchmark.readDslJsonJava                                                                thrpt    5   1602052.234 ±    17215.054   ops/s
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate                                                 thrpt    5       504.898 ±        5.515  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                            thrpt    5       496.000 ±        0.001    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                           thrpt    5       466.978 ±      702.475  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                      thrpt    5       459.101 ±      695.028    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space                                    thrpt    5         0.266 ±        1.405  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm                               thrpt    5         0.262 ±        1.384    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.count                                                      thrpt    5         7.000                 counts
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.time                                                       thrpt    5        35.000                     ms
[info] ArrayOfBooleansBenchmark.readJacksonScala                                                               thrpt    5    613914.862 ±    40590.078   ops/s
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                                thrpt    5       521.089 ±       34.525  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                           thrpt    5      1336.001 ±        0.001    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                          thrpt    5       470.929 ±      709.570  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                     thrpt    5      1210.587 ±     1861.248    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.count                                                     thrpt    5         7.000                 counts
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.time                                                      thrpt    5        30.000                     ms
[info] ArrayOfBooleansBenchmark.readJsoniterScala                                                              thrpt    5   1727073.893 ±     5412.998   ops/s
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                               thrpt    5       333.543 ±        1.067  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                          thrpt    5       304.000 ±        0.001    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                         thrpt    5       337.006 ±        0.071  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                    thrpt    5       307.157 ±        0.949    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count                                                    thrpt    5         5.000                 counts
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time                                                     thrpt    5        15.000                     ms
[info] ArrayOfBooleansBenchmark.readPlayJson                                                                   thrpt    5     94465.465 ±     2851.164   ops/s
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                                    thrpt    5      3432.102 ±      102.578  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                               thrpt    5     57176.004 ±        0.001    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                        thrpt    5         0.002 ±        0.003  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   thrpt    5         0.039 ±        0.054    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                              thrpt    5      3472.373 ±      585.087  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                         thrpt    5     57837.167 ±     8353.083    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.count                                                         thrpt    5        51.000                 counts
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.time                                                          thrpt    5        47.000                     ms
[info] ArrayOfBooleansBenchmark.writeCirce                                                                     thrpt    5    317803.357 ±     8273.337   ops/s
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                                      thrpt    5       778.561 ±       20.215  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                                 thrpt    5      3856.001 ±        0.001    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                          thrpt    5         0.031 ±        0.266  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     thrpt    5         0.153 ±        1.317    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                thrpt    5       810.240 ±      718.342  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                           thrpt    5      4015.622 ±     3617.085    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                         thrpt    5         0.666 ±        5.737  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                    thrpt    5         3.305 ±       28.457    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.count                                                           thrpt    5        12.000                 counts
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.time                                                            thrpt    5        36.000                     ms
[info] ArrayOfBooleansBenchmark.writeDslJsonJava                                                               thrpt    5   1187873.121 ±    73287.018   ops/s
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate                                                thrpt    5       549.367 ±       33.825  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                           thrpt    5       728.000 ±        0.001    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                          thrpt    5       533.767 ±      703.377  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                     thrpt    5       709.118 ±      953.701    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.133 ±        1.147  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space.norm                              thrpt    5         0.175 ±        1.510    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.count                                                     thrpt    5         8.000                 counts
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.time                                                      thrpt    5        39.000                     ms
[info] ArrayOfBooleansBenchmark.writeDslJsonJavaPrealloc                                                       thrpt    5   1202789.165 ±     3137.277   ops/s
[info] ArrayOfBooleansBenchmark.writeDslJsonJavaPrealloc:·gc.alloc.rate                                        thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJavaPrealloc:·gc.alloc.rate.norm                                   thrpt    5        ≈ 10⁻³                   B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJavaPrealloc:·gc.count                                             thrpt    5           ≈ 0                 counts
[info] ArrayOfBooleansBenchmark.writeJacksonScala                                                              thrpt    5   1067056.807 ±    24869.731   ops/s
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                               thrpt    5       753.867 ±       17.551  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                          thrpt    5      1112.000 ±        0.001    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                   thrpt    5         0.014 ±        0.123  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm              thrpt    5         0.021 ±        0.184    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                         thrpt    5       741.636 ±      576.134  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                    thrpt    5      1094.118 ±      853.768    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                  thrpt    5         0.799 ±        6.883  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                             thrpt    5         1.180 ±       10.164    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count                                                    thrpt    5        11.000                 counts
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time                                                     thrpt    5        40.000                     ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScala                                                             thrpt    5   2103114.677 ±   296333.234   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                              thrpt    5       972.796 ±      137.556  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                         thrpt    5       728.000 ±        0.001    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                  thrpt    5         0.019 ±        0.101  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm             thrpt    5         0.014 ±        0.079    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                        thrpt    5       946.684 ±      572.440  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                   thrpt    5       710.443 ±      469.003    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                 thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                            thrpt    5         0.634 ±        5.457    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count                                                   thrpt    5        14.000                 counts
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time                                                    thrpt    5        31.000                     ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                     thrpt    5   2208207.268 ±     7774.298   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                      thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                 thrpt    5        ≈ 10⁻⁴                   B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                           thrpt    5           ≈ 0                 counts
[info] ArrayOfBooleansBenchmark.writePlayJson                                                                  thrpt    5    422262.759 ±    21601.234   ops/s
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                                   thrpt    5       493.629 ±       25.403  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                              thrpt    5      1840.001 ±        0.001    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                             thrpt    5       538.203 ±      709.562  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                        thrpt    5      2002.732 ±     2600.256    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.count                                                        thrpt    5         8.000                 counts
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.time                                                         thrpt    5        31.000                     ms
[info] ArrayOfBytesBenchmark.readCirce                                                                         thrpt    5    173326.703 ±     4812.465   ops/s
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate                                                          thrpt    5      2081.647 ±       56.641  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm                                                     thrpt    5     18904.002 ±        0.001    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                              thrpt    5         0.019 ±        0.107  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         thrpt    5         0.172 ±        0.966    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                    thrpt    5      2042.148 ±        1.404  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                               thrpt    5     18546.070 ±      519.236    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.count                                                               thrpt    5        30.000                 counts
[info] ArrayOfBytesBenchmark.readCirce:·gc.time                                                                thrpt    5        25.000                     ms
[info] ArrayOfBytesBenchmark.readJacksonScala                                                                  thrpt    5    371551.719 ±     5591.760   ops/s
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate                                                   thrpt    5       315.381 ±        4.881  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                              thrpt    5      1336.001 ±        0.001    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                             thrpt    5       336.248 ±        0.925  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                        thrpt    5      1424.416 ±       23.438    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                      thrpt    5         0.133 ±        1.147  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                 thrpt    5         0.563 ±        4.849    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.count                                                        thrpt    5         5.000                 counts
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.time                                                         thrpt    5        21.000                     ms
[info] ArrayOfBytesBenchmark.readJsoniterScala                                                                 thrpt    5   1049886.978 ±    45066.263   ops/s
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate                                                  thrpt    5       202.788 ±        8.840  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                             thrpt    5       304.000 ±        0.001    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                            thrpt    5       201.813 ±      709.410  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                       thrpt    5       303.225 ±     1066.027    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                     thrpt    5         0.400 ±        3.441  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                thrpt    5         0.598 ±        5.148    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.count                                                       thrpt    5         3.000                 counts
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.time                                                        thrpt    5         9.000                     ms
[info] ArrayOfBytesBenchmark.readPlayJson                                                                      thrpt    5     78942.743 ±     4139.540   ops/s
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate                                                       thrpt    5      3361.263 ±      176.581  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm                                                  thrpt    5     67016.005 ±        0.001    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                           thrpt    5         0.007 ±        0.006  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      thrpt    5         0.134 ±        0.117    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                 thrpt    5      3403.730 ±        2.001  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                            thrpt    5     67872.812 ±     3570.601    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.count                                                            thrpt    5        50.000                 counts
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.time                                                             thrpt    5        43.000                     ms
[info] ArrayOfBytesBenchmark.writeCirce                                                                        thrpt    5    306305.556 ±    16419.950   ops/s
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate                                                         thrpt    5      1522.492 ±       81.706  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm                                                    thrpt    5      7824.001 ±        0.001    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                             thrpt    5         0.029 ±        0.238  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        thrpt    5         0.153 ±        1.240    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                   thrpt    5      1494.838 ±      727.514  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                              thrpt    5      7692.346 ±     4114.263    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                            thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                       thrpt    5         3.430 ±       29.536    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.count                                                              thrpt    5        22.000                 counts
[info] ArrayOfBytesBenchmark.writeCirce:·gc.time                                                               thrpt    5        30.000                     ms
[info] ArrayOfBytesBenchmark.writeJacksonScala                                                                 thrpt    5   1812322.509 ±    32503.556   ops/s
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate                                                  thrpt    5       930.328 ±       17.323  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                             thrpt    5       808.000 ±        0.001    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                      thrpt    5         0.027 ±        0.225  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                 thrpt    5         0.023 ±        0.195    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                            thrpt    5       878.547 ±      709.520  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                       thrpt    5       763.306 ±      621.939    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                     thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                thrpt    5         0.696 ±        5.996    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.count                                                       thrpt    5        13.000                 counts
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.time                                                        thrpt    5        38.000                     ms
[info] ArrayOfBytesBenchmark.writeJsoniterScala                                                                thrpt    5   1915974.609 ±    41378.167   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate                                                 thrpt    5       516.077 ±       11.181  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                            thrpt    5       424.000 ±        0.001    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                           thrpt    5       538.131 ±      709.321  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                      thrpt    5       442.440 ±      586.649    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count                                                      thrpt    5         8.000                 counts
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time                                                       thrpt    5        25.000                     ms
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc                                                        thrpt    5   2003273.721 ±     2181.858   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                         thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                    thrpt    5        ≈ 10⁻⁴                   B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                              thrpt    5           ≈ 0                 counts
[info] ArrayOfBytesBenchmark.writePlayJson                                                                     thrpt    5     40778.296 ±     1839.219   ops/s
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate                                                      thrpt    5      1718.232 ±       77.974  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm                                                 thrpt    5     66320.344 ±        2.872    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                          thrpt    5         0.046 ±        0.384  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     thrpt    5         1.800 ±       15.064    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                thrpt    5      1699.459 ±       20.747  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                           thrpt    5     65601.518 ±     2416.542    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                         thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                    thrpt    5        31.349 ±      269.925    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.count                                                           thrpt    5        25.000                 counts
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.time                                                            thrpt    5        32.000                     ms
[info] ArrayOfCharsBenchmark.readCirce                                                                         thrpt    5    230574.025 ±     3986.312   ops/s
[info] ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate                                                          thrpt    5      2370.770 ±       40.715  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate.norm                                                     thrpt    5     16184.002 ±        0.001    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                              thrpt    5         0.009 ±        0.009  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         thrpt    5         0.060 ±        0.065    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                    thrpt    5      2382.517 ±        1.564  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                               thrpt    5     16264.452 ±      281.364    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.count                                                               thrpt    5        35.000                 counts
[info] ArrayOfCharsBenchmark.readCirce:·gc.time                                                                thrpt    5        30.000                     ms
[info] ArrayOfCharsBenchmark.readJacksonScala                                                                  thrpt    5    314501.376 ±    17529.219   ops/s
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate                                                   thrpt    5      1521.819 ±       85.673  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                              thrpt    5      7616.001 ±        0.001    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                       thrpt    5         0.038 ±        0.204  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                  thrpt    5         0.194 ±        1.033    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                             thrpt    5      1562.536 ±      707.008  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                        thrpt    5      7816.078 ±     3365.166    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                      thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                 thrpt    5         4.064 ±       34.996    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.count                                                        thrpt    5        23.000                 counts
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.time                                                         thrpt    5        34.000                     ms
[info] ArrayOfCharsBenchmark.readJsoniterScala                                                                 thrpt    5   1254552.461 ±    95913.631   ops/s
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                                  thrpt    5       433.612 ±       33.228  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                             thrpt    5       544.000 ±        0.001    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                            thrpt    5       471.864 ±      710.684  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                       thrpt    5       593.467 ±      911.451    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.count                                                       thrpt    5         7.000                 counts
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.time                                                        thrpt    5        21.000                     ms
[info] ArrayOfCharsBenchmark.readPlayJson                                                                      thrpt    5     75246.585 ±     3264.741   ops/s
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate                                                       thrpt    5      3163.174 ±      137.060  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                  thrpt    5     66160.006 ±        0.001    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                           thrpt    5         0.007 ±        0.013  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      thrpt    5         0.145 ±        0.271    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                 thrpt    5      3131.592 ±      584.649  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                            thrpt    5     65523.311 ±    14223.187    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.count                                                            thrpt    5        46.000                 counts
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.time                                                             thrpt    5        46.000                     ms
[info] ArrayOfCharsBenchmark.writeCirce                                                                        thrpt    5    217234.783 ±     8863.339   ops/s
[info] ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate                                                         thrpt    5      1985.339 ±       82.071  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                                    thrpt    5     14384.002 ±        0.001    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                             thrpt    5         0.027 ±        0.205  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        thrpt    5         0.196 ±        1.474    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                   thrpt    5      1974.264 ±      586.847  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                              thrpt    5     14297.842 ±     3867.514    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.count                                                              thrpt    5        29.000                 counts
[info] ArrayOfCharsBenchmark.writeCirce:·gc.time                                                               thrpt    5        28.000                     ms
[info] ArrayOfCharsBenchmark.writeJacksonScala                                                                 thrpt    5   1060987.915 ±    14421.576   ops/s
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                                  thrpt    5       620.173 ±        8.461  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                             thrpt    5       920.000 ±        0.001    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                            thrpt    5       672.776 ±        0.473  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                       thrpt    5       998.043 ±       13.628    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.count                                                       thrpt    5        10.000                 counts
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.time                                                        thrpt    5        41.000                     ms
[info] ArrayOfCharsBenchmark.writeJsoniterScala                                                                thrpt    5   2957326.805 ±    43705.587   ops/s
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                 thrpt    5      1007.000 ±       15.011  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                            thrpt    5       536.000 ±        0.001    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                     thrpt    5         0.022 ±        0.117  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                thrpt    5         0.012 ±        0.062    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                           thrpt    5      1014.651 ±       23.513  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                      thrpt    5       540.070 ±        6.459    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                    thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                               thrpt    5         0.425 ±        3.659    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.count                                                      thrpt    5        15.000                 counts
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.time                                                       thrpt    5        32.000                     ms
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc                                                        thrpt    5   2206824.409 ±    62373.170   ops/s
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                         thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                    thrpt    5        ≈ 10⁻⁴                   B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                              thrpt    5           ≈ 0                 counts
[info] ArrayOfCharsBenchmark.writePlayJson                                                                     thrpt    5    257456.428 ±     9580.765   ops/s
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate                                                      thrpt    5      2104.282 ±       78.446  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                 thrpt    5     12864.002 ±        0.001    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                          thrpt    5         0.041 ±        0.318  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     thrpt    5         0.247 ±        1.936    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                thrpt    5      2110.234 ±      585.703  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                           thrpt    5     12895.417 ±     3157.428    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                         thrpt    5         0.133 ±        1.147  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                    thrpt    5         0.810 ±        6.978    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.count                                                           thrpt    5        31.000                 counts
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.time                                                            thrpt    5        31.000                     ms
[info] ArrayOfDoublesBenchmark.readCirce                                                                       thrpt    5     25818.263 ±     1141.795   ops/s
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate                                                        thrpt    5      1512.146 ±       67.023  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm                                                   thrpt    5     92192.017 ±        0.007    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                            thrpt    5         0.034 ±        0.229  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       thrpt    5         2.107 ±       14.107    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                  thrpt    5      1494.822 ±      727.357  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                             thrpt    5     91169.930 ±    45497.811    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                           thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                      thrpt    5        40.963 ±      352.706    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.count                                                             thrpt    5        22.000                 counts
[info] ArrayOfDoublesBenchmark.readCirce:·gc.time                                                              thrpt    5        33.000                     ms
[info] ArrayOfDoublesBenchmark.readDslJsonJava                                                                 thrpt    5    100673.606 ±     7622.010   ops/s
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate                                                  thrpt    5       906.798 ±       68.437  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                             thrpt    5     14176.004 ±        0.001    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'                      thrpt    5         0.103 ±        0.891  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                 thrpt    5         1.564 ±       13.463    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                            thrpt    5       870.914 ±      691.871  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                       thrpt    5     13637.480 ±    11246.142    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space                                     thrpt    5         1.599 ±       11.120  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm                                thrpt    5        25.069 ±      174.181    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.count                                                       thrpt    5        13.000                 counts
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.time                                                        thrpt    5        56.000                     ms
[info] ArrayOfDoublesBenchmark.readJacksonScala                                                                thrpt    5     58811.036 ±     3933.473   ops/s
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate                                                 thrpt    5       971.823 ±       65.427  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                            thrpt    5     26008.007 ±        0.001    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                     thrpt    5         0.035 ±        0.202  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                thrpt    5         0.949 ±        5.517    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                           thrpt    5       946.640 ±      572.245  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                      thrpt    5     25375.170 ±    16219.883    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                    thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                               thrpt    5        21.915 ±      188.694    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.count                                                      thrpt    5        14.000                 counts
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.time                                                       thrpt    5        40.000                     ms
[info] ArrayOfDoublesBenchmark.readJsoniterScala                                                               thrpt    5     82094.366 ±     2873.182   ops/s
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate                                                thrpt    5       529.080 ±       18.414  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                           thrpt    5     10144.005 ±        0.001    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                          thrpt    5       539.256 ±      710.790  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                     thrpt    5     10329.992 ±    13509.668    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count                                                     thrpt    5         8.000                 counts
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time                                                      thrpt    5        24.000                     ms
[info] ArrayOfDoublesBenchmark.readPlayJson                                                                    thrpt    5     33550.076 ±     2536.951   ops/s
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate                                                     thrpt    5      1753.111 ±      131.440  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm                                                thrpt    5     82248.013 ±        0.008    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                         thrpt    5         0.014 ±        0.038  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    thrpt    5         0.658 ±        1.873    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                               thrpt    5      1767.300 ±      592.060  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                          thrpt    5     82935.220 ±    28232.675    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                        thrpt    5         0.933 ±        8.031  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                   thrpt    5        45.282 ±      389.894    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.count                                                          thrpt    5        26.000                 counts
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.time                                                           thrpt    5        33.000                     ms
[info] ArrayOfDoublesBenchmark.writeCirce                                                                      thrpt    5     39208.352 ±     1808.354   ops/s
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate                                                       thrpt    5       528.258 ±       24.441  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm                                                  thrpt    5     21207.798 ±        1.827    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                 thrpt    5       539.211 ±      710.773  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                            thrpt    5     21582.164 ±    27704.423    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.count                                                            thrpt    5         8.000                 counts
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.time                                                             thrpt    5        28.000                     ms
[info] ArrayOfDoublesBenchmark.writeJacksonScala                                                               thrpt    5     42136.855 ±      104.487   ops/s
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate                                                thrpt    5       380.553 ±        0.988  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                           thrpt    5     14216.010 ±        0.001    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                          thrpt    5       336.078 ±        1.470  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                     thrpt    5     12554.616 ±       74.001    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.266 ±        1.405  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                              thrpt    5         9.949 ±       52.456    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count                                                     thrpt    5         5.000                 counts
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time                                                      thrpt    5        21.000                     ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScala                                                              thrpt    5     45906.783 ±     1042.100   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate                                               thrpt    5       403.428 ±        9.286  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                          thrpt    5     13832.009 ±        0.001    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                         thrpt    5       403.643 ±      579.123  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                    thrpt    5     13857.814 ±    20207.235    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count                                                    thrpt    5         6.000                 counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time                                                     thrpt    5        19.000                     ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc                                                      thrpt    5     46312.088 ±      385.819   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                       thrpt    5       354.003 ±        2.933  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                  thrpt    5     12032.009 ±        0.001    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen                                 thrpt    5       403.625 ±      579.262  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm                            thrpt    5     13721.128 ±    19737.370    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                            thrpt    5         6.000                 counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time                                             thrpt    5        19.000                     ms
[info] ArrayOfDurationsBenchmark.readCirce                                                                     thrpt    5     19972.995 ±      526.363   ops/s
[info] ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate                                                      thrpt    5       749.277 ±       19.701  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate.norm                                                 thrpt    5     59040.022 ±        0.008    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                          thrpt    5         0.006 ±        0.055  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     thrpt    5         0.503 ±        4.334    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                thrpt    5       809.655 ±      714.173  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                           thrpt    5     63845.699 ±    57331.861    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                         thrpt    5         0.666 ±        5.734  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                    thrpt    5        52.801 ±      454.633    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.count                                                           thrpt    5        12.000                 counts
[info] ArrayOfDurationsBenchmark.readCirce:·gc.time                                                            thrpt    5        38.000                     ms
[info] ArrayOfDurationsBenchmark.readJacksonScala                                                              thrpt    5     19126.596 ±     1245.447   ops/s
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate                                               thrpt    5       542.922 ±       35.617  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                          thrpt    5     44676.283 ±       28.758    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                         thrpt    5       537.946 ±      708.554  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                    thrpt    5     44359.812 ±    59376.637    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                  thrpt    5         0.266 ±        1.405  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                             thrpt    5        22.169 ±      116.889    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.count                                                    thrpt    5         8.000                 counts
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.time                                                     thrpt    5        33.000                     ms
[info] ArrayOfDurationsBenchmark.readJsoniterScala                                                             thrpt    5     76313.234 ±     2174.374   ops/s
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate                                              thrpt    5       198.583 ±        5.669  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                         thrpt    5      4096.006 ±        0.001    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                        thrpt    5       202.225 ±      710.858  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                   thrpt    5      4189.090 ±    14725.645    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                 thrpt    5         0.400 ±        3.441  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                            thrpt    5         8.304 ±       71.498    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.count                                                   thrpt    5         3.000                 counts
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.time                                                    thrpt    5         9.000                     ms
[info] ArrayOfDurationsBenchmark.readPlayJson                                                                  thrpt    5     16074.992 ±      759.577   ops/s
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate                                                   thrpt    5      1042.257 ±       49.332  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate.norm                                              thrpt    5    102048.172 ±        1.242    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                       thrpt    5         0.008 ±        0.052  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                  thrpt    5         0.784 ±        5.126    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                             thrpt    5      1015.543 ±       23.024  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                        thrpt    5     99446.558 ±     5860.491    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                      thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                 thrpt    5        79.357 ±      683.291    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.count                                                        thrpt    5        15.000                 counts
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.time                                                         thrpt    5        37.000                     ms
[info] ArrayOfDurationsBenchmark.writeCirce                                                                    thrpt    5     61664.751 ±     1947.136   ops/s
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate                                                     thrpt    5      1008.936 ±       31.768  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate.norm                                                thrpt    5     25752.007 ±        0.001    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                         thrpt    5         0.018 ±        0.094  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    thrpt    5         0.455 ±        2.380    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                               thrpt    5      1015.815 ±       19.660  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                          thrpt    5     25928.643 ±      769.383    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                        thrpt    5         0.666 ±        5.734  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                   thrpt    5        16.820 ±      144.823    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.count                                                          thrpt    5        15.000                 counts
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.time                                                           thrpt    5        37.000                     ms
[info] ArrayOfDurationsBenchmark.writeJacksonScala                                                             thrpt    5     87673.598 ±     6798.445   ops/s
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate                                              thrpt    5      1039.714 ±       80.252  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                         thrpt    5     18664.005 ±        0.001    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                  thrpt    5         0.016 ±        0.085  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm             thrpt    5         0.291 ±        1.504    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                        thrpt    5      1082.408 ±      563.793  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                   thrpt    5     19437.805 ±    10282.710    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                 thrpt    5         0.932 ±        6.688  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                            thrpt    5        16.718 ±      119.106    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.count                                                   thrpt    5        16.000                 counts
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.time                                                    thrpt    5        42.000                     ms
[info] ArrayOfDurationsBenchmark.writeJsoniterScala                                                            thrpt    5    257364.655 ±    13750.613   ops/s
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate                                             thrpt    5       408.097 ±       21.834  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                        thrpt    5      2496.002 ±        0.001    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                       thrpt    5       403.751 ±      578.891  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                  thrpt    5      2473.290 ±     3610.358    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                thrpt    5         0.133 ±        1.147  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                           thrpt    5         0.824 ±        7.096    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.count                                                  thrpt    5         6.000                 counts
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.time                                                   thrpt    5        19.000                     ms
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc                                                    thrpt    5    335407.765 ±      466.754   ops/s
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                     thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                          thrpt    5           ≈ 0                 counts
[info] ArrayOfDurationsBenchmark.writePlayJson                                                                 thrpt    5     70690.351 ±     4605.462   ops/s
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate                                                  thrpt    5      1101.380 ±       71.603  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate.norm                                             thrpt    5     24520.006 ±        0.001    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                      thrpt    5         0.022 ±        0.127  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                 thrpt    5         0.491 ±        2.786    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                            thrpt    5      1151.005 ±      713.658  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                       thrpt    5     25621.693 ±    15701.565    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                     thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                thrpt    5        17.556 ±      151.165    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.count                                                       thrpt    5        17.000                 counts
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.time                                                        thrpt    5        41.000                     ms
[info] ArrayOfEnumsBenchmark.readCirce                                                                         thrpt    5     27645.756 ±      237.137   ops/s
[info] ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate                                                          thrpt    5       575.001 ±        4.889  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate.norm                                                     thrpt    5     32736.016 ±        0.008    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                    thrpt    5       606.701 ±      580.598  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                               thrpt    5     34542.394 ±    33076.083    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.count                                                               thrpt    5         9.000                 counts
[info] ArrayOfEnumsBenchmark.readCirce:·gc.time                                                                thrpt    5        31.000                     ms
[info] ArrayOfEnumsBenchmark.readJacksonScala                                                                  thrpt    5     28135.138 ±      255.218   ops/s
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate                                                   thrpt    5       369.774 ±        3.409  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                              thrpt    5     20687.782 ±        2.003    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                             thrpt    5       403.472 ±      577.913  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                        thrpt    5     22586.900 ±    32598.818    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                      thrpt    5         0.133 ±        1.147  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                 thrpt    5         7.479 ±       64.395    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.count                                                        thrpt    5         6.000                 counts
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.time                                                         thrpt    5        26.000                     ms
[info] ArrayOfEnumsBenchmark.readJsoniterScala                                                                 thrpt    5    120489.829 ±     5490.159   ops/s
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate                                                  thrpt    5       470.327 ±       21.612  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                             thrpt    5      6144.003 ±        0.001    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                            thrpt    5       471.846 ±      710.688  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                       thrpt    5      6172.486 ±     9398.687    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.count                                                       thrpt    5         7.000                 counts
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.time                                                        thrpt    5        21.000                     ms
[info] ArrayOfEnumsBenchmark.readPlayJson                                                                      thrpt    5     21015.181 ±     1584.909   ops/s
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate                                                       thrpt    5      1160.635 ±       87.520  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                  thrpt    5     86920.042 ±        0.176    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                           thrpt    5         0.013 ±        0.096  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      thrpt    5         0.973 ±        7.094    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                 thrpt    5      1151.084 ±      710.511  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                            thrpt    5     86218.762 ±    53218.268    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                          thrpt    5         1.066 ±        9.179  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                     thrpt    5        80.920 ±      696.749    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.count                                                            thrpt    5        17.000                 counts
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.time                                                             thrpt    5        43.000                     ms
[info] ArrayOfEnumsBenchmark.writeCirce                                                                        thrpt    5    166262.413 ±     1269.087   ops/s
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate                                                         thrpt    5       833.205 ±        6.491  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate.norm                                                    thrpt    5      7888.003 ±        0.001    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                             thrpt    5         0.020 ±        0.169  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        thrpt    5         0.185 ±        1.590    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                   thrpt    5       878.269 ±      717.968  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                              thrpt    5      8314.478 ±     6793.147    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                            thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                       thrpt    5         6.307 ±       54.305    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.count                                                              thrpt    5        13.000                 counts
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.time                                                               thrpt    5        37.000                     ms
[info] ArrayOfEnumsBenchmark.writeJacksonScala                                                                 thrpt    5    279791.131 ±    27411.787   ops/s
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate                                                  thrpt    5       282.986 ±       27.691  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                             thrpt    5      1592.002 ±        0.001    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                            thrpt    5       268.972 ±      578.985  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                       thrpt    5      1521.152 ±     3279.093    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                     thrpt    5         0.133 ±        1.147  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                thrpt    5         0.737 ±        6.349    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.count                                                       thrpt    5         4.000                 counts
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.time                                                        thrpt    5        17.000                     ms
[info] ArrayOfEnumsBenchmark.writeJsoniterScala                                                                thrpt    5    545678.944 ±     5916.980   ops/s
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                 thrpt    5       418.760 ±        4.584  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                            thrpt    5      1208.001 ±        0.001    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                           thrpt    5       403.605 ±      579.118  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                      thrpt    5      1164.648 ±     1677.520    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.count                                                      thrpt    5         6.000                 counts
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.time                                                       thrpt    5        19.000                     ms
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc                                                        thrpt    5    550667.889 ±     2058.332   ops/s
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                         thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                    thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                              thrpt    5           ≈ 0                 counts
[info] ArrayOfEnumsBenchmark.writePlayJson                                                                     thrpt    5    286907.579 ±    16669.938   ops/s
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate                                                      thrpt    5       790.391 ±       45.596  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                 thrpt    5      4336.001 ±        0.001    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                thrpt    5       807.957 ±      703.437  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                           thrpt    5      4426.092 ±     3700.232    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                         thrpt    5         1.199 ±        6.124  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                    thrpt    5         6.658 ±       34.316    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.count                                                           thrpt    5        12.000                 counts
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.time                                                            thrpt    5        49.000                     ms
[info] ArrayOfFloatsBenchmark.readCirce                                                                        thrpt    5     37228.785 ±     1824.604   ops/s
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate                                                         thrpt    5      1660.614 ±       81.713  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm                                                    thrpt    5     70200.011 ±        0.001    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                             thrpt    5         0.031 ±        0.223  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        thrpt    5         1.348 ±        9.595    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                   thrpt    5      1699.990 ±       17.791  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                              thrpt    5     71872.574 ±     3050.007    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                            thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                       thrpt    5        28.625 ±      246.466    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.count                                                              thrpt    5        25.000                 counts
[info] ArrayOfFloatsBenchmark.readCirce:·gc.time                                                               thrpt    5        29.000                     ms
[info] ArrayOfFloatsBenchmark.readDslJsonJava                                                                  thrpt    5    307561.174 ±    16665.269   ops/s
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate                                                   thrpt    5       318.904 ±       17.324  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                              thrpt    5      1632.001 ±        0.001    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                             thrpt    5       266.948 ±      574.626  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                        thrpt    5      1368.387 ±     2946.991    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.count                                                        thrpt    5         4.000                 counts
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.time                                                         thrpt    5        19.000                     ms
[info] ArrayOfFloatsBenchmark.readJacksonScala                                                                 thrpt    5     97269.785 ±     7467.840   ops/s
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate                                                  thrpt    5      1074.824 ±       83.218  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                             thrpt    5     17392.004 ±        0.001    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                      thrpt    5         0.045 ±        0.377  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                 thrpt    5         0.729 ±        6.092    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                            thrpt    5      1083.651 ±      598.838  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                       thrpt    5     17513.093 ±     8658.035    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                     thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                thrpt    5        12.906 ±      111.123    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.count                                                       thrpt    5        16.000                 counts
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.time                                                        thrpt    5        38.000                     ms
[info] ArrayOfFloatsBenchmark.readJsoniterScala                                                                thrpt    5    152425.413 ±     4303.714   ops/s
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate                                                 thrpt    5        99.159 ±        2.796  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                            thrpt    5      1024.003 ±        0.001    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                           thrpt    5       135.206 ±      712.950  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                      thrpt    5      1405.803 ±     7413.378    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                    thrpt    5         0.400 ±        3.441  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                               thrpt    5         4.139 ±       35.641    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count                                                      thrpt    5         2.000                 counts
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time                                                       thrpt    5         6.000                     ms
[info] ArrayOfFloatsBenchmark.readPlayJson                                                                     thrpt    5     39129.371 ±      704.756   ops/s
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate                                                      thrpt    5      2088.541 ±       37.183  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                 thrpt    5     84016.011 ±        0.004    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                          thrpt    5         0.023 ±        0.113  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     thrpt    5         0.921 ±        4.541    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                thrpt    5      2042.098 ±        0.726  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                           thrpt    5     82149.186 ±     1483.671    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.count                                                           thrpt    5        30.000                 counts
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.time                                                            thrpt    5        29.000                     ms
[info] ArrayOfFloatsBenchmark.writeCirce                                                                       thrpt    5     86990.503 ±     1030.957   ops/s
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate                                                        thrpt    5       556.168 ±        6.580  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm                                                   thrpt    5     10064.005 ±        0.001    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                  thrpt    5       539.083 ±      711.527  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                             thrpt    5      9753.047 ±    12852.598    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                           thrpt    5         0.133 ±        1.147  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                      thrpt    5         2.422 ±       20.850    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.count                                                             thrpt    5         8.000                 counts
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.time                                                              thrpt    5        28.000                     ms
[info] ArrayOfFloatsBenchmark.writeDslJsonJava                                                                 thrpt    5    112008.925 ±     6105.116   ops/s
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                  thrpt    5       342.763 ±       18.428  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                             thrpt    5      4816.004 ±        0.001    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                            thrpt    5       333.766 ±        0.335  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                       thrpt    5      4690.347 ±      259.406    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.count                                                       thrpt    5         5.000                 counts
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.time                                                        thrpt    5        25.000                     ms
[info] ArrayOfFloatsBenchmark.writeDslJsonJavaPrealloc                                                         thrpt    5    116062.124 ±     3302.279   ops/s
[info] ArrayOfFloatsBenchmark.writeDslJsonJavaPrealloc:·gc.alloc.rate                                          thrpt    5       263.690 ±        7.526  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJavaPrealloc:·gc.alloc.rate.norm                                     thrpt    5      3576.004 ±        0.001    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJavaPrealloc:·gc.churn.G1_Old_Gen                                    thrpt    5       266.179 ±      572.995  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJavaPrealloc:·gc.churn.G1_Old_Gen.norm                               thrpt    5      3618.808 ±     7789.797    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJavaPrealloc:·gc.churn.G1_Survivor_Space                             thrpt    5         0.799 ±        5.560  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJavaPrealloc:·gc.churn.G1_Survivor_Space.norm                        thrpt    5        10.937 ±       76.213    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJavaPrealloc:·gc.count                                               thrpt    5         4.000                 counts
[info] ArrayOfFloatsBenchmark.writeDslJsonJavaPrealloc:·gc.time                                                thrpt    5        20.000                     ms
[info] ArrayOfFloatsBenchmark.writeJacksonScala                                                                thrpt    5    101643.178 ±      601.861   ops/s
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate                                                 thrpt    5       335.782 ±        1.960  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                            thrpt    5      5200.004 ±        0.001    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                           thrpt    5       336.230 ±        1.199  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                      thrpt    5      5206.952 ±       31.907    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                    thrpt    5         0.133 ±        1.147  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                               thrpt    5         2.064 ±       17.774    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count                                                      thrpt    5         5.000                 counts
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time                                                       thrpt    5        21.000                     ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScala                                                               thrpt    5    116317.248 ±     6274.256   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                thrpt    5       355.993 ±       18.964  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                           thrpt    5      4816.004 ±        0.001    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                          thrpt    5       336.456 ±        0.293  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                     thrpt    5      4552.397 ±      245.410    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count                                                     thrpt    5         5.000                 counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time                                                      thrpt    5        16.000                     ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc                                                       thrpt    5    115141.908 ±     9383.976   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                        thrpt    5       261.562 ±       21.305  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                   thrpt    5      3576.004 ±        0.001    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen                                  thrpt    5       269.070 ±      579.194  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm                             thrpt    5      3691.768 ±     7955.127    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                             thrpt    5         4.000                 counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                              thrpt    5        13.000                     ms
[info] ArrayOfInstantsBenchmark.readCirce                                                                      thrpt    5      8335.496 ±      179.208   ops/s
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate                                                       thrpt    5      1379.829 ±       29.005  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm                                                  thrpt    5    260552.050 ±        0.008    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                           thrpt    5         0.007 ±        0.043  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      thrpt    5         1.299 ±        8.123    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                 thrpt    5      1425.419 ±      580.464  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                            thrpt    5    269108.300 ±   106626.317    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                          thrpt    5         0.666 ±        5.734  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                     thrpt    5       125.143 ±     1077.522    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.count                                                            thrpt    5        21.000                 counts
[info] ArrayOfInstantsBenchmark.readCirce:·gc.time                                                             thrpt    5        33.000                     ms
[info] ArrayOfInstantsBenchmark.readJacksonScala                                                               thrpt    5      8520.710 ±      160.117   ops/s
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate                                                thrpt    5      1327.309 ±       24.765  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                           thrpt    5    245185.740 ±       14.565    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                    thrpt    5         0.017 ±        0.123  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               thrpt    5         3.134 ±       22.864    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                          thrpt    5      1356.439 ±       27.671  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                     thrpt    5    250567.041 ±     2761.735    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.932 ±        8.028  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                              thrpt    5       172.646 ±     1486.532    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.count                                                     thrpt    5        20.000                 counts
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.time                                                      thrpt    5        39.000                     ms
[info] ArrayOfInstantsBenchmark.readJsoniterScala                                                              thrpt    5     90385.117 ±      790.941   ops/s
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate                                               thrpt    5       235.214 ±        2.031  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                          thrpt    5      4096.005 ±        0.001    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                         thrpt    5       202.631 ±      712.277  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                    thrpt    5      3534.369 ±    12423.806    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count                                                    thrpt    5         3.000                 counts
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time                                                     thrpt    5         9.000                     ms
[info] ArrayOfInstantsBenchmark.readPlayJson                                                                   thrpt    5      4783.037 ±      152.358   ops/s
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate                                                    thrpt    5      1269.106 ±       40.681  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm                                               thrpt    5    417664.091 ±        0.021    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                        thrpt    5         0.027 ±        0.140  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   thrpt    5         8.853 ±       46.372    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                              thrpt    5      1287.656 ±      574.583  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                         thrpt    5    424023.891 ±   197404.885    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                       thrpt    5         0.799 ±        6.880  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                  thrpt    5       264.903 ±     2280.898    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.count                                                         thrpt    5        19.000                 counts
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.time                                                          thrpt    5        42.000                     ms
[info] ArrayOfInstantsBenchmark.writeCirce                                                                     thrpt    5     24184.431 ±     1570.767   ops/s
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate                                                      thrpt    5      1359.551 ±       88.669  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm                                                 thrpt    5     88479.674 ±        2.954    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                          thrpt    5         0.010 ±        0.042  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     thrpt    5         0.660 ±        2.717    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                thrpt    5      1357.482 ±       23.183  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                           thrpt    5     88360.722 ±     4505.392    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                         thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                    thrpt    5        44.071 ±      379.463    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.count                                                           thrpt    5        20.000                 counts
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.time                                                            thrpt    5        38.000                     ms
[info] ArrayOfInstantsBenchmark.writeJacksonScala                                                              thrpt    5     29150.579 ±     2549.407   ops/s
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate                                               thrpt    5      1424.584 ±      125.998  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                          thrpt    5     76912.015 ±        0.009    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                   thrpt    5         0.021 ±        0.178  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm              thrpt    5         1.178 ±        9.850    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                         thrpt    5      1425.657 ±      594.809  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                    thrpt    5     76945.496 ±    29891.852    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                  thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                             thrpt    5        44.115 ±      379.843    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.count                                                    thrpt    5        21.000                 counts
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.time                                                     thrpt    5        37.000                     ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScala                                                             thrpt    5    350651.293 ±     7426.325   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate                                              thrpt    5       773.484 ±       16.500  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                         thrpt    5      3472.001 ±        0.001    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                  thrpt    5         0.015 ±        0.131  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm             thrpt    5         0.068 ±        0.583    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                        thrpt    5       809.025 ±      718.815  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                   thrpt    5      3630.231 ±     3195.620    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                 thrpt    5         0.799 ±        5.561  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                            thrpt    5         3.572 ±       24.841    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count                                                   thrpt    5        12.000                 counts
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time                                                    thrpt    5        35.000                     ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc                                                     thrpt    5    371239.748 ±    31837.063   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                      thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                 thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                           thrpt    5           ≈ 0                 counts
[info] ArrayOfInstantsBenchmark.writePlayJson                                                                  thrpt    5     27868.833 ±     1233.495   ops/s
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate                                                   thrpt    5      1466.083 ±       64.720  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm                                              thrpt    5     82792.016 ±        0.005    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                       thrpt    5         0.019 ±        0.154  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                  thrpt    5         1.077 ±        8.644    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                             thrpt    5      1493.783 ±      725.078  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                        thrpt    5     84389.314 ±    42071.951    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                      thrpt    5         0.799 ±        6.883  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                 thrpt    5        44.864 ±      386.290    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.count                                                        thrpt    5        22.000                 counts
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.time                                                         thrpt    5        36.000                     ms
[info] ArrayOfIntsBenchmark.readCirce                                                                          thrpt    5    134954.023 ±     5288.725   ops/s
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate                                                           thrpt    5      2198.406 ±       86.304  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                                      thrpt    5     25640.003 ±        0.001    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                               thrpt    5         0.005 ±        0.010  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                          thrpt    5         0.060 ±        0.115    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                     thrpt    5      2178.413 ±      718.414  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                thrpt    5     25403.939 ±     8139.460    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.count                                                                thrpt    5        32.000                 counts
[info] ArrayOfIntsBenchmark.readCirce:·gc.time                                                                 thrpt    5        27.000                     ms
[info] ArrayOfIntsBenchmark.readDslJsonJava                                                                    thrpt    5    479260.171 ±    11691.683   ops/s
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate                                                     thrpt    5       497.106 ±       12.189  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                thrpt    5      1632.001 ±        0.001    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                               thrpt    5       466.720 ±      702.529  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                          thrpt    5      1532.104 ±     2303.947    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space                                        thrpt    5         0.133 ±        1.147  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm                                   thrpt    5         0.436 ±        3.751    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.count                                                          thrpt    5         7.000                 counts
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.time                                                           thrpt    5        35.000                     ms
[info] ArrayOfIntsBenchmark.readJacksonScala                                                                   thrpt    5    281499.091 ±     1465.280   ops/s
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                                    thrpt    5       403.438 ±        2.020  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                               thrpt    5      2256.001 ±        0.001    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                              thrpt    5       403.613 ±      579.299  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                         thrpt    5      2257.824 ±     3255.687    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.count                                                         thrpt    5         6.000                 counts
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.time                                                          thrpt    5        25.000                     ms
[info] ArrayOfIntsBenchmark.readJsoniterScala                                                                  thrpt    5    736735.608 ±     6434.806   ops/s
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                                   thrpt    5       479.252 ±        4.226  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                              thrpt    5      1024.001 ±        0.001    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                             thrpt    5       471.801 ±      710.737  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                        thrpt    5      1008.805 ±     1528.740    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.count                                                        thrpt    5         7.000                 counts
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.time                                                         thrpt    5        21.000                     ms
[info] ArrayOfIntsBenchmark.readPlayJson                                                                       thrpt    5     70552.452 ±     1450.433   ops/s
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                                        thrpt    5      3089.277 ±       62.231  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                   thrpt    5     68920.006 ±        0.001    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                            thrpt    5         0.011 ±        0.024  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       thrpt    5         0.240 ±        0.536    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                  thrpt    5      3131.343 ±      584.983  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                             thrpt    5     69862.490 ±    13380.818    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.count                                                             thrpt    5        46.000                 counts
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.time                                                              thrpt    5        41.000                     ms
[info] ArrayOfIntsBenchmark.writeCirce                                                                         thrpt    5    221464.966 ±     7841.549   ops/s
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate                                                          thrpt    5      1554.711 ±       54.546  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                                     thrpt    5     11048.002 ±        0.001    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                              thrpt    5         0.018 ±        0.087  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         thrpt    5         0.125 ±        0.614    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                    thrpt    5      1563.238 ±      708.902  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                               thrpt    5     11112.338 ±     5168.455    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                             thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                        thrpt    5         4.772 ±       41.089    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.count                                                               thrpt    5        23.000                 counts
[info] ArrayOfIntsBenchmark.writeCirce:·gc.time                                                                thrpt    5        37.000                     ms
[info] ArrayOfIntsBenchmark.writeDslJsonJava                                                                   thrpt    5   1176222.347 ±    34320.744   ops/s
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                    thrpt    5       639.654 ±       18.797  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                               thrpt    5       856.000 ±        0.001    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                              thrpt    5       667.381 ±        0.116  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                         thrpt    5       893.147 ±       26.392    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.count                                                         thrpt    5        10.000                 counts
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.time                                                          thrpt    5        49.000                     ms
[info] ArrayOfIntsBenchmark.writeDslJsonJavaPrealloc                                                           thrpt    5   1229130.729 ±     4925.909   ops/s
[info] ArrayOfIntsBenchmark.writeDslJsonJavaPrealloc:·gc.alloc.rate                                            thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJavaPrealloc:·gc.alloc.rate.norm                                       thrpt    5        ≈ 10⁻³                   B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJavaPrealloc:·gc.count                                                 thrpt    5           ≈ 0                 counts
[info] ArrayOfIntsBenchmark.writeJacksonScala                                                                  thrpt    5    842272.154 ±    17422.869   ops/s
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                                   thrpt    5       663.570 ±       14.144  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                              thrpt    5      1240.000 ±        0.001    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                             thrpt    5       672.631 ±        1.125  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                        thrpt    5      1256.962 ±       25.743    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                      thrpt    5         0.933 ±        8.030  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                 thrpt    5         1.745 ±       15.024    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.count                                                        thrpt    5        10.000                 counts
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.time                                                         thrpt    5        41.000                     ms
[info] ArrayOfIntsBenchmark.writeJsoniterScala                                                                 thrpt    5   1052583.231 ±    25076.374   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                  thrpt    5       572.396 ±       13.602  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                             thrpt    5       856.000 ±        0.001    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                            thrpt    5       605.417 ±      579.154  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                       thrpt    5       905.986 ±      873.824    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count                                                       thrpt    5         9.000                 counts
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time                                                        thrpt    5        29.000                     ms
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc                                                         thrpt    5   1107140.991 ±    72149.846   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                          thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                     thrpt    5        ≈ 10⁻³                   B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                               thrpt    5           ≈ 0                 counts
[info] ArrayOfIntsBenchmark.writePlayJson                                                                      thrpt    5     30375.046 ±      886.454   ops/s
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                                       thrpt    5      1591.965 ±       46.440  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                  thrpt    5     82491.530 ±       27.008    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                           thrpt    5         0.030 ±        0.246  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      thrpt    5         1.526 ±       12.701    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                 thrpt    5      1562.531 ±      735.598  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                            thrpt    5     80912.777 ±    35976.108    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                          thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                     thrpt    5        41.804 ±      359.942    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.count                                                            thrpt    5        23.000                 counts
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.time                                                             thrpt    5        33.000                     ms
[info] ArrayOfJavaEnumsBenchmark.readCirce                                                                     thrpt    5    117967.799 ±     7823.302   ops/s
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate                                                      thrpt    5      1455.934 ±       96.899  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate.norm                                                 thrpt    5     19424.004 ±        0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                          thrpt    5         0.016 ±        0.092  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     thrpt    5         0.209 ±        1.236    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                thrpt    5      1494.286 ±      699.710  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                           thrpt    5     19956.525 ±    10070.714    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                         thrpt    5         0.799 ±        6.883  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                    thrpt    5        10.949 ±       94.273    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.count                                                           thrpt    5        22.000                 counts
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.time                                                            thrpt    5        38.000                     ms
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala                                                              thrpt    5    173285.137 ±     5074.167   ops/s
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate                                               thrpt    5       924.792 ±       27.305  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                          thrpt    5      8400.002 ±        0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                   thrpt    5         0.020 ±        0.171  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm              thrpt    5         0.180 ±        1.546    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                         thrpt    5       878.020 ±      710.053  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                    thrpt    5      7978.698 ±     6519.749    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                  thrpt    5         1.066 ±        7.821  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                             thrpt    5         9.790 ±       72.001    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.count                                                    thrpt    5        13.000                 counts
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.time                                                     thrpt    5        40.000                     ms
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala                                                             thrpt    5    260353.329 ±    19764.494   ops/s
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate                                              thrpt    5       677.521 ±       51.240  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                         thrpt    5      4096.002 ±        0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                        thrpt    5       674.083 ±        0.418  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                   thrpt    5      4076.482 ±      309.426    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                 thrpt    5         0.666 ±        5.736  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                            thrpt    5         4.058 ±       34.939    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.count                                                   thrpt    5        10.000                 counts
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.time                                                    thrpt    5        29.000                     ms
[info] ArrayOfJavaEnumsBenchmark.readPlayJson                                                                  thrpt    5     65994.152 ±     1791.543   ops/s
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate                                                   thrpt    5      2787.097 ±       74.332  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm                                              thrpt    5     66464.006 ±        0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                       thrpt    5         0.009 ±        0.008  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                  thrpt    5         0.206 ±        0.188    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                             thrpt    5      2791.410 ±      587.738  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                        thrpt    5     66576.375 ±    14764.126    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.count                                                        thrpt    5        41.000                 counts
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.time                                                         thrpt    5        42.000                     ms
[info] ArrayOfJavaEnumsBenchmark.writeCirce                                                                    thrpt    5    165273.163 ±     9372.360   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate                                                     thrpt    5       828.269 ±       47.078  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate.norm                                                thrpt    5      7888.003 ±        0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                         thrpt    5         0.046 ±        0.398  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    thrpt    5         0.438 ±        3.769    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                               thrpt    5       878.297 ±      717.893  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                          thrpt    5      8378.179 ±     7106.979    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                        thrpt    5         0.666 ±        5.737  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                   thrpt    5         6.290 ±       54.163    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.count                                                          thrpt    5        13.000                 counts
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.time                                                           thrpt    5        37.000                     ms
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala                                                             thrpt    5    530947.642 ±    16088.295   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate                                              thrpt    5       536.985 ±       16.218  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                         thrpt    5      1592.001 ±        0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                        thrpt    5       537.891 ±      708.470  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                   thrpt    5      1597.853 ±     2138.652    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                 thrpt    5         0.266 ±        1.405  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                            thrpt    5         0.796 ±        4.197    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.count                                                   thrpt    5         8.000                 counts
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.time                                                    thrpt    5        35.000                     ms
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala                                                            thrpt    5    543894.204 ±    28364.167   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate                                             thrpt    5       417.425 ±       21.844  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                        thrpt    5      1208.001 ±        0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                       thrpt    5       403.651 ±      579.395  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                  thrpt    5      1166.781 ±     1648.013    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.count                                                  thrpt    5         6.000                 counts
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.time                                                   thrpt    5        20.000                     ms
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc                                                    thrpt    5    535739.797 ±    19358.418   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                     thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                          thrpt    5           ≈ 0                 counts
[info] ArrayOfJavaEnumsBenchmark.writePlayJson                                                                 thrpt    5    300449.014 ±    13030.898   ops/s
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate                                                  thrpt    5       824.588 ±       35.613  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm                                             thrpt    5      4320.001 ±        0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                      thrpt    5         0.013 ±        0.112  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                 thrpt    5         0.069 ±        0.593    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                            thrpt    5       808.702 ±      705.432  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                       thrpt    5      4232.915 ±     3599.190    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                     thrpt    5         1.199 ±        7.565  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                thrpt    5         6.234 ±       39.250    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.count                                                       thrpt    5        12.000                 counts
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.time                                                        thrpt    5        45.000                     ms
[info] ArrayOfLocalDateTimesBenchmark.readCirce                                                                thrpt    5      8701.498 ±      376.308   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate                                                 thrpt    5      1112.822 ±       48.481  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                            thrpt    5    201280.048 ±        0.005    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                     thrpt    5         0.008 ±        0.049  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                thrpt    5         1.487 ±        8.698    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                           thrpt    5      1151.905 ±      713.189  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                      thrpt    5    208427.237 ±   131109.325    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                    thrpt    5         0.666 ±        5.736  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                               thrpt    5       119.360 ±     1027.724    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.count                                                      thrpt    5        17.000                 counts
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.time                                                       thrpt    5        35.000                     ms
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala                                                         thrpt    5      9234.279 ±      298.284   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                          thrpt    5      1052.532 ±       34.107  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                     thrpt    5    179381.819 ±       49.718    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'              thrpt    5         0.017 ±        0.137  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm         thrpt    5         2.895 ±       23.484    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                    thrpt    5      1082.890 ±      566.603  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                               thrpt    5    184654.945 ±   100424.643    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                             thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                        thrpt    5       137.293 ±     1182.135    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.count                                               thrpt    5        16.000                 counts
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.time                                                thrpt    5        43.000                     ms
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala                                                        thrpt    5    106653.890 ±     5477.320   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                         thrpt    5       693.865 ±       35.518  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                    thrpt    5     10240.004 ±        0.001    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                   thrpt    5       742.944 ±      581.715  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                              thrpt    5     10969.967 ±     8724.114    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                            thrpt    5         0.533 ±        4.588  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                       thrpt    5         7.797 ±       67.135    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.count                                              thrpt    5        11.000                 counts
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.time                                               thrpt    5        32.000                     ms
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson                                                             thrpt    5      6906.485 ±      189.192   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                              thrpt    5      1285.999 ±       35.202  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                         thrpt    5    293096.061 ±        0.010    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                  thrpt    5         0.021 ±        0.142  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm             thrpt    5         4.746 ±       32.609    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                        thrpt    5      1288.424 ±      593.736  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                   thrpt    5    293504.762 ±   130160.131    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                 thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                            thrpt    5       183.934 ±     1583.726    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.count                                                   thrpt    5        19.000                 counts
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.time                                                    thrpt    5        38.000                     ms
[info] ArrayOfLocalDateTimesBenchmark.writeCirce                                                               thrpt    5     21207.198 ±      636.232   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate                                                thrpt    5       966.697 ±       29.059  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                           thrpt    5     71745.233 ±       38.804    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                    thrpt    5         0.020 ±        0.172  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               thrpt    5         1.479 ±       12.734    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                          thrpt    5      1015.148 ±       21.906  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                     thrpt    5     75342.743 ±     1396.712    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                              thrpt    5        49.954 ±      430.116    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.count                                                     thrpt    5        15.000                 counts
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.time                                                      thrpt    5        45.000                     ms
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala                                                        thrpt    5     25564.525 ±     1867.785   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                         thrpt    5       983.377 ±       71.784  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                    thrpt    5     60552.017 ±        0.008    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'             thrpt    5         0.030 ±        0.170  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm        thrpt    5         1.860 ±       10.656    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                   thrpt    5      1014.593 ±       23.500  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                              thrpt    5     62488.455 ±     3796.162    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                            thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                       thrpt    5        50.356 ±      433.579    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.count                                              thrpt    5        15.000                 counts
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.time                                               thrpt    5        41.000                     ms
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala                                                       thrpt    5    735380.875 ±    48229.902   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                        thrpt    5      1327.172 ±       87.876  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                   thrpt    5      2840.001 ±        0.001    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'            thrpt    5         0.032 ±        0.269  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm       thrpt    5         0.068 ±        0.573    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                  thrpt    5      1289.570 ±      578.195  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                             thrpt    5      2761.694 ±     1300.810    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                           thrpt    5         0.799 ±        6.883  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                      thrpt    5         1.702 ±       14.654    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.count                                             thrpt    5        19.000                 counts
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.time                                              thrpt    5        28.000                     ms
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc                                               thrpt    5    501061.760 ±     2947.262   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                           thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                     thrpt    5           ≈ 0                 counts
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson                                                            thrpt    5     24338.364 ±     1534.962   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                             thrpt    5      1026.664 ±       64.937  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                        thrpt    5     66397.805 ±       30.800    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                 thrpt    5         0.021 ±        0.112  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            thrpt    5         1.382 ±        7.310    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                       thrpt    5      1014.670 ±       23.536  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                  thrpt    5     65633.528 ±     3590.833    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                           thrpt    5        53.092 ±      457.142    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.count                                                  thrpt    5        15.000                 counts
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.time                                                   thrpt    5        39.000                     ms
[info] ArrayOfLocalDatesBenchmark.readCirce                                                                    thrpt    5     24088.658 ±     1283.846   ops/s
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate                                                     thrpt    5      1307.559 ±       69.795  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm                                                thrpt    5     85440.018 ±        0.010    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                         thrpt    5         0.014 ±        0.064  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    thrpt    5         0.933 ±        4.228    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                               thrpt    5      1289.330 ±      578.083  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                          thrpt    5     84233.790 ±    37053.711    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                        thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                   thrpt    5        43.986 ±      378.730    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.count                                                          thrpt    5        19.000                 counts
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.time                                                           thrpt    5        33.000                     ms
[info] ArrayOfLocalDatesBenchmark.readJacksonScala                                                             thrpt    5     27457.845 ±     1786.492   ops/s
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate                                              thrpt    5      1307.728 ±       85.916  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                         thrpt    5     74960.119 ±        0.896    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                  thrpt    5         0.022 ±        0.168  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm             thrpt    5         1.300 ±        9.807    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                        thrpt    5      1356.709 ±       28.356  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                   thrpt    5     77782.990 ±     4527.531    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                 thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                            thrpt    5        46.745 ±      402.492    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count                                                   thrpt    5        20.000                 counts
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time                                                    thrpt    5        39.000                     ms
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala                                                            thrpt    5    262382.903 ±     3971.872   ops/s
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate                                             thrpt    5       682.833 ±       10.526  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                        thrpt    5      4096.002 ±        0.001    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                       thrpt    5       675.430 ±        0.498  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                  thrpt    5      4051.642 ±       61.502    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                thrpt    5         0.533 ±        4.589  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                           thrpt    5         3.187 ±       27.440    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count                                                  thrpt    5        10.000                 counts
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time                                                   thrpt    5        29.000                     ms
[info] ArrayOfLocalDatesBenchmark.readPlayJson                                                                 thrpt    5     15837.952 ±     1093.307   ops/s
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate                                                  thrpt    5      1630.698 ±      112.761  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm                                             thrpt    5    162056.032 ±        0.033    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                      thrpt    5         0.016 ±        0.132  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                 thrpt    5         1.569 ±       12.953    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                            thrpt    5      1630.547 ±      613.963  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                       thrpt    5    161857.667 ±    51439.728    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                     thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                thrpt    5        81.979 ±      705.861    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count                                                       thrpt    5        24.000                 counts
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time                                                        thrpt    5        36.000                     ms
[info] ArrayOfLocalDatesBenchmark.writeCirce                                                                   thrpt    5     51353.985 ±     1523.496   ops/s
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate                                                    thrpt    5      1355.007 ±       39.884  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm                                               thrpt    5     41528.008 ±        0.002    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                        thrpt    5         0.017 ±        0.133  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   thrpt    5         0.529 ±        4.039    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                              thrpt    5      1358.184 ±       21.865  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                         thrpt    5     41627.830 ±     1648.588    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                       thrpt    5         0.666 ±        5.734  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                  thrpt    5        20.203 ±      173.951    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.count                                                         thrpt    5        20.000                 counts
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.time                                                          thrpt    5        40.000                     ms
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala                                                            thrpt    5    116702.562 ±    10754.867   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate                                             thrpt    5       988.699 ±       91.372  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                        thrpt    5     13336.004 ±        0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                 thrpt    5         0.025 ±        0.145  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            thrpt    5         0.332 ±        1.926    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                       thrpt    5      1014.606 ±       23.404  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                  thrpt    5     13691.389 ±     1225.721    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                           thrpt    5        10.651 ±       91.705    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.count                                                  thrpt    5        15.000                 counts
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.time                                                   thrpt    5        42.000                     ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala                                                           thrpt    5   1126149.826 ±    35958.456   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate                                            thrpt    5      1207.829 ±       38.333  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                       thrpt    5      1688.000 ±        0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                thrpt    5         0.033 ±        0.174  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm           thrpt    5         0.046 ±        0.245    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                      thrpt    5      1220.602 ±      715.232  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                 thrpt    5      1704.783 ±      965.990    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                               thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                          thrpt    5         1.121 ±        9.656    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count                                                 thrpt    5        18.000                 counts
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time                                                  thrpt    5        29.000                     ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc                                                   thrpt    5    653637.771 ±    20429.142   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                    thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                               thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                         thrpt    5           ≈ 0                 counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson                                                                thrpt    5     57962.351 ±     2488.510   ops/s
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate                                                 thrpt    5      1348.097 ±       58.458  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm                                            thrpt    5     36608.007 ±        0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                     thrpt    5         0.028 ±        0.182  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                thrpt    5         0.757 ±        4.874    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                           thrpt    5      1356.652 ±       27.331  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                      thrpt    5     36845.496 ±     2245.657    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                    thrpt    5         0.800 ±        6.884  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                               thrpt    5        21.412 ±      184.366    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count                                                      thrpt    5        20.000                 counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time                                                       thrpt    5        38.000                     ms
[info] ArrayOfLocalTimesBenchmark.readCirce                                                                    thrpt    5     14051.192 ±      949.146   ops/s
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate                                                     thrpt    5      1254.210 ±       83.931  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm                                                thrpt    5    140480.036 ±        0.034    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                         thrpt    5         0.018 ±        0.086  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    thrpt    5         1.999 ±        9.471    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                               thrpt    5      1221.365 ±      720.916  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                          thrpt    5    136612.915 ±    74467.813    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                        thrpt    5         0.666 ±        5.736  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                   thrpt    5        74.146 ±      638.421    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.count                                                          thrpt    5        18.000                 counts
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.time                                                           thrpt    5        36.000                     ms
[info] ArrayOfLocalTimesBenchmark.readJacksonScala                                                             thrpt    5     14200.344 ±      716.887   ops/s
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate                                              thrpt    5      1147.521 ±       58.167  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                         thrpt    5    127184.031 ±        0.011    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                  thrpt    5         0.035 ±        0.298  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm             thrpt    5         3.931 ±       33.542    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                        thrpt    5      1151.309 ±      709.696  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                   thrpt    5    127567.772 ±    77187.031    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                 thrpt    5         1.199 ±        7.778  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                            thrpt    5       133.760 ±      867.608    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count                                                   thrpt    5        17.000                 counts
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time                                                    thrpt    5        40.000                     ms
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala                                                            thrpt    5    285453.790 ±     1797.685   ops/s
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                             thrpt    5       742.867 ±        4.584  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                        thrpt    5      4096.001 ±        0.001    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                 thrpt    5         0.006 ±        0.050  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            thrpt    5         0.032 ±        0.274    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                       thrpt    5       743.528 ±      580.852  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                  thrpt    5      4100.550 ±     3229.622    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                thrpt    5         0.533 ±        4.588  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                           thrpt    5         2.937 ±       25.292    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count                                                  thrpt    5        11.000                 counts
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time                                                   thrpt    5        30.000                     ms
[info] ArrayOfLocalTimesBenchmark.readPlayJson                                                                 thrpt    5     10733.650 ±      359.784   ops/s
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate                                                  thrpt    5      1482.283 ±       50.217  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                             thrpt    5    217352.343 ±        2.623    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                      thrpt    5         0.019 ±        0.152  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                 thrpt    5         2.797 ±       22.186    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                            thrpt    5      1493.660 ±      726.241  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                       thrpt    5    218865.493 ±    99814.056    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                     thrpt    5         0.800 ±        6.885  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                thrpt    5       116.487 ±     1002.987    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count                                                       thrpt    5        22.000                 counts
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time                                                        thrpt    5        38.000                     ms
[info] ArrayOfLocalTimesBenchmark.writeCirce                                                                   thrpt    5     38538.306 ±     1472.512   ops/s
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate                                                    thrpt    5      1267.502 ±       48.280  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                               thrpt    5     51768.619 ±        5.240    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                        thrpt    5         0.017 ±        0.084  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   thrpt    5         0.709 ±        3.448    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                              thrpt    5      1221.283 ±      721.654  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                         thrpt    5     49927.064 ±    30759.625    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                       thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                  thrpt    5        27.392 ±      235.850    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.count                                                         thrpt    5        18.000                 counts
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.time                                                          thrpt    5        33.000                     ms
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala                                                            thrpt    5     46537.293 ±     1103.990   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                             thrpt    5      1234.631 ±       28.979  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                        thrpt    5     41752.009 ±        0.001    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                 thrpt    5         0.044 ±        0.230  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            thrpt    5         1.501 ±        7.778    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                       thrpt    5      1220.574 ±      715.153  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                  thrpt    5     41267.828 ±    23897.816    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                thrpt    5         0.933 ±        6.691  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                           thrpt    5        31.582 ±      226.276    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.count                                                  thrpt    5        18.000                 counts
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.time                                                   thrpt    5        36.000                     ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala                                                           thrpt    5   1312041.085 ±    82822.821   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                            thrpt    5      1193.633 ±       75.752  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                       thrpt    5      1432.000 ±        0.001    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                thrpt    5         0.027 ±        0.141  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm           thrpt    5         0.032 ±        0.169    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                      thrpt    5      1152.379 ±      713.902  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                 thrpt    5      1384.128 ±      901.870    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                               thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                          thrpt    5         0.977 ±        8.410    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count                                                 thrpt    5        17.000                 counts
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time                                                  thrpt    5        28.000                     ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc                                                   thrpt    5   1429303.605 ±      325.236   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                    thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                               thrpt    5        ≈ 10⁻⁴                   B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                         thrpt    5           ≈ 0                 counts
[info] ArrayOfLocalTimesBenchmark.writePlayJson                                                                thrpt    5     36430.959 ±     2599.046   ops/s
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate                                                 thrpt    5      1102.362 ±       78.348  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                            thrpt    5     47617.156 ±        9.855    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                     thrpt    5         0.032 ±        0.207  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                thrpt    5         1.357 ±        8.885    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                           thrpt    5      1151.097 ±      712.709  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                      thrpt    5     49775.729 ±    32261.611    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                    thrpt    5         0.800 ±        6.884  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                               thrpt    5        34.297 ±      295.308    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.count                                                      thrpt    5        17.000                 counts
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.time                                                       thrpt    5        41.000                     ms
[info] ArrayOfLongsBenchmark.readCirce                                                                         thrpt    5    124947.415 ±      245.842   ops/s
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate                                                          thrpt    5      2143.822 ±        4.192  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm                                                     thrpt    5     27000.003 ±        0.001    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                              thrpt    5         0.016 ±        0.107  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         thrpt    5         0.201 ±        1.352    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                    thrpt    5      2178.853 ±      718.357  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                               thrpt    5     27441.539 ±     9066.687    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.count                                                               thrpt    5        32.000                 counts
[info] ArrayOfLongsBenchmark.readCirce:·gc.time                                                                thrpt    5        29.000                     ms
[info] ArrayOfLongsBenchmark.readDslJsonJava                                                                   thrpt    5    347353.581 ±     9914.276   ops/s
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate                                                    thrpt    5       695.610 ±       19.786  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                               thrpt    5      3152.001 ±        0.001    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                              thrpt    5       667.167 ±        1.502  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                         thrpt    5      3023.253 ±       89.885    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space                                       thrpt    5         0.266 ±        1.405  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm                                  thrpt    5         1.203 ±        6.346    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.count                                                         thrpt    5        10.000                 counts
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.time                                                          thrpt    5        49.000                     ms
[info] ArrayOfLongsBenchmark.readJacksonScala                                                                  thrpt    5    234665.239 ±     2581.042   ops/s
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate                                                   thrpt    5       520.091 ±        5.685  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                              thrpt    5      3488.002 ±        0.001    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                             thrpt    5       470.853 ±      710.104  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                        thrpt    5      3159.981 ±     4793.001    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                      thrpt    5         0.133 ±        1.147  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                 thrpt    5         0.895 ±        7.702    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.count                                                        thrpt    5         7.000                 counts
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.time                                                         thrpt    5        30.000                     ms
[info] ArrayOfLongsBenchmark.readJsoniterScala                                                                 thrpt    5    481947.153 ±    15405.092   ops/s
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate                                                  thrpt    5       607.507 ±       19.255  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                             thrpt    5      1984.001 ±        0.001    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                            thrpt    5       606.704 ±      580.437  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                       thrpt    5      1980.960 ±     1890.161    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.count                                                       thrpt    5         9.000                 counts
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.time                                                        thrpt    5        27.000                     ms
[info] ArrayOfLongsBenchmark.readPlayJson                                                                      thrpt    5     68949.173 ±     2560.256   ops/s
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate                                                       thrpt    5      3076.789 ±      114.932  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                  thrpt    5     70232.006 ±        0.001    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                           thrpt    5         0.009 ±        0.020  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      thrpt    5         0.199 ±        0.463    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                 thrpt    5      3131.683 ±      587.316  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                            thrpt    5     71481.947 ±    12756.089    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.count                                                            thrpt    5        46.000                 counts
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.time                                                             thrpt    5        44.000                     ms
[info] ArrayOfLongsBenchmark.writeCirce                                                                        thrpt    5    191849.084 ±     5158.575   ops/s
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate                                                         thrpt    5      1653.733 ±       43.840  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm                                                    thrpt    5     13568.002 ±        0.001    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                             thrpt    5         0.033 ±        0.269  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        thrpt    5         0.272 ±        2.218    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                   thrpt    5      1631.688 ±      581.120  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                              thrpt    5     13384.186 ±     4620.434    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                            thrpt    5         0.666 ±        5.734  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                       thrpt    5         5.492 ±       47.291    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.count                                                              thrpt    5        24.000                 counts
[info] ArrayOfLongsBenchmark.writeCirce:·gc.time                                                               thrpt    5        34.000                     ms
[info] ArrayOfLongsBenchmark.writeDslJsonJava                                                                  thrpt    5    723503.621 ±    11189.658   ops/s
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                   thrpt    5       566.276 ±        8.765  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                              thrpt    5      1232.001 ±        0.001    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                             thrpt    5       600.516 ±      574.395  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                        thrpt    5      1306.996 ±     1256.090    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space                                      thrpt    5         0.133 ±        1.147  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space.norm                                 thrpt    5         0.289 ±        2.491    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.count                                                        thrpt    5         9.000                 counts
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.time                                                         thrpt    5        43.000                     ms
[info] ArrayOfLongsBenchmark.writeDslJsonJavaPrealloc                                                          thrpt    5    752489.848 ±     6286.714   ops/s
[info] ArrayOfLongsBenchmark.writeDslJsonJavaPrealloc:·gc.alloc.rate                                           thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJavaPrealloc:·gc.alloc.rate.norm                                      thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJavaPrealloc:·gc.count                                                thrpt    5           ≈ 0                 counts
[info] ArrayOfLongsBenchmark.writeJacksonScala                                                                 thrpt    5    468302.667 ±    15470.843   ops/s
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate                                                  thrpt    5       480.802 ±       15.929  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                             thrpt    5      1616.001 ±        0.001    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                            thrpt    5       538.180 ±      709.167  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                       thrpt    5      1809.626 ±     2393.016    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.count                                                       thrpt    5         8.000                 counts
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.time                                                        thrpt    5        33.000                     ms
[info] ArrayOfLongsBenchmark.writeJsoniterScala                                                                thrpt    5    635149.459 ±    27866.637   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                 thrpt    5       497.155 ±       21.998  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                            thrpt    5      1232.001 ±        0.001    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                           thrpt    5       470.928 ±      709.356  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                      thrpt    5      1169.712 ±     1795.303    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count                                                      thrpt    5         7.000                 counts
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time                                                       thrpt    5        22.000                     ms
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc                                                        thrpt    5    638112.988 ±     4648.809   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                         thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                    thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                              thrpt    5           ≈ 0                 counts
[info] ArrayOfLongsBenchmark.writePlayJson                                                                     thrpt    5     28264.445 ±      933.841   ops/s
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate                                                      thrpt    5      1448.904 ±       47.508  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                 thrpt    5     80692.159 ±       26.713    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                          thrpt    5         0.028 ±        0.225  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     thrpt    5         1.563 ±       12.643    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                thrpt    5      1425.426 ±      595.491  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                           thrpt    5     79368.197 ±    32201.557    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                         thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                    thrpt    5        44.821 ±      385.918    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.count                                                           thrpt    5        21.000                 counts
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.time                                                            thrpt    5        34.000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.readCirce                                                               thrpt    5      6540.589 ±      108.897   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate                                                thrpt    5      1006.991 ±       16.639  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                           thrpt    5    242296.064 ±        0.009    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                    thrpt    5         0.014 ±        0.105  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               thrpt    5         3.358 ±       25.017    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                          thrpt    5      1015.143 ±       21.485  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                     thrpt    5    244261.428 ±     6758.026    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                              thrpt    5       160.259 ±     1379.880    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.count                                                     thrpt    5        15.000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.time                                                      thrpt    5        36.000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala                                                        thrpt    5      6511.522 ±      124.408   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                         thrpt    5       925.819 ±       17.753  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    thrpt    5    223792.065 ±        0.010    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'             thrpt    5         0.022 ±        0.187  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm        thrpt    5         5.278 ±       45.449    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                   thrpt    5       945.605 ±      587.650  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                              thrpt    5    228643.773 ±   143611.856    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                            thrpt    5         0.932 ±        6.688  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                       thrpt    5       226.427 ±     1626.321    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.count                                              thrpt    5        14.000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.time                                               thrpt    5        45.000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala                                                       thrpt    5     98880.654 ±     3331.888   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                        thrpt    5       957.976 ±       31.876  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   thrpt    5     15248.004 ±        0.001    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'            thrpt    5         0.019 ±        0.163  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm       thrpt    5         0.304 ±        2.618    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                  thrpt    5      1016.369 ±       17.292  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                             thrpt    5     16178.327 ±      568.642    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                           thrpt    5         0.533 ±        4.588  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                      thrpt    5         8.440 ±       72.672    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.count                                             thrpt    5        15.000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.time                                              thrpt    5        33.000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson                                                            thrpt    5      6488.469 ±      217.790   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                             thrpt    5      1180.181 ±       39.435  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                        thrpt    5    286280.064 ±        0.009    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                 thrpt    5         0.026 ±        0.215  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            thrpt    5         6.240 ±       52.360    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                       thrpt    5      1151.439 ±      710.191  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                  thrpt    5    279367.924 ±   173896.735    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                thrpt    5         0.932 ±        6.687  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                           thrpt    5       228.532 ±     1641.823    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.count                                                  thrpt    5        17.000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.time                                                   thrpt    5        42.000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce                                                              thrpt    5     18040.996 ±      684.030   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate                                               thrpt    5       900.119 ±       33.652  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                          thrpt    5     78534.772 ±       72.996    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                   thrpt    5         0.008 ±        0.044  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm              thrpt    5         0.721 ±        3.807    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                         thrpt    5       878.915 ±      714.656  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                    thrpt    5     76738.322 ±    63416.924    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                  thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                             thrpt    5        57.731 ±      497.085    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.count                                                    thrpt    5        13.000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.time                                                     thrpt    5        35.000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala                                                       thrpt    5     20378.723 ±      986.648   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                        thrpt    5       863.490 ±       41.847  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   thrpt    5     66696.022 ±        0.009    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'            thrpt    5         0.032 ±        0.187  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm       thrpt    5         2.474 ±       14.375    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                  thrpt    5       877.419 ±      713.150  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                             thrpt    5     67841.513 ±    56441.637    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                           thrpt    5         0.932 ±        6.687  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                      thrpt    5        72.030 ±      515.382    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.count                                             thrpt    5        13.000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.time                                              thrpt    5        42.000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala                                                      thrpt    5    494787.924 ±    13440.101   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                       thrpt    5      1121.592 ±       30.869  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  thrpt    5      3568.001 ±        0.001    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'           thrpt    5         0.034 ±        0.288  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm      thrpt    5         0.110 ±        0.920    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                 thrpt    5      1151.762 ±      710.833  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                            thrpt    5      3663.712 ±     2250.235    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                          thrpt    5         0.932 ±        6.687  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                     thrpt    5         2.984 ±       21.412    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.count                                            thrpt    5        17.000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.time                                             thrpt    5        31.000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc                                              thrpt    5    410913.579 ±     2933.079   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    thrpt    5           ≈ 0                 counts
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson                                                           thrpt    5     18917.766 ±      737.739   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                            thrpt    5       872.148 ±       33.837  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                       thrpt    5     72568.214 ±       29.000    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                thrpt    5         0.024 ±        0.128  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm           thrpt    5         1.963 ±       10.590    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                      thrpt    5       809.611 ±      708.078  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                 thrpt    5     67419.135 ±    60091.249    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                               thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                          thrpt    5        66.622 ±      573.636    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.count                                                 thrpt    5        12.000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.time                                                  thrpt    5        39.000                     ms
[info] ArrayOfOffsetTimesBenchmark.readCirce                                                                   thrpt    5     11220.455 ±      540.193   ops/s
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate                                                    thrpt    5      1127.176 ±       53.516  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate.norm                                               thrpt    5    158112.038 ±        0.011    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                        thrpt    5         0.011 ±        0.099  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   thrpt    5         1.594 ±       13.714    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                              thrpt    5      1084.521 ±      588.902  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                         thrpt    5    152057.983 ±    79171.686    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                       thrpt    5         0.666 ±        5.734  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                  thrpt    5        92.500 ±      796.450    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.count                                                         thrpt    5        16.000                 counts
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.time                                                          thrpt    5        32.000                     ms
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala                                                            thrpt    5     11557.505 ±      296.315   ops/s
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate                                             thrpt    5      1058.040 ±       27.670  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        thrpt    5    144088.037 ±        0.007    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                 thrpt    5         0.016 ±        0.128  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            thrpt    5         2.171 ±       17.346    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                       thrpt    5      1082.620 ±      566.087  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                  thrpt    5    147472.688 ±    78511.173    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                thrpt    5         0.932 ±        6.688  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                           thrpt    5       126.629 ±      907.531    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.count                                                  thrpt    5        16.000                 counts
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.time                                                   thrpt    5        43.000                     ms
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala                                                           thrpt    5    160169.759 ±     3745.225   ops/s
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                            thrpt    5       926.465 ±       21.467  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       thrpt    5      9104.003 ±        0.001    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                thrpt    5         0.013 ±        0.112  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm           thrpt    5         0.127 ±        1.091    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                      thrpt    5       879.652 ±      711.241  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                 thrpt    5      8641.836 ±     6940.552    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                               thrpt    5         0.666 ±        5.734  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                          thrpt    5         6.564 ±       56.519    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.count                                                 thrpt    5        13.000                 counts
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.time                                                  thrpt    5        29.000                     ms
[info] ArrayOfOffsetTimesBenchmark.readPlayJson                                                                thrpt    5     10697.428 ±      283.518   ops/s
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate                                                 thrpt    5      1339.041 ±       35.059  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                            thrpt    5    197016.112 ±        0.619    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                     thrpt    5         0.008 ±        0.052  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                thrpt    5         1.208 ±        7.581    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                           thrpt    5      1356.000 ±       31.203  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                      thrpt    5    199513.902 ±     3639.844    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                    thrpt    5         0.932 ±        6.687  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                               thrpt    5       137.367 ±      983.794    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.count                                                      thrpt    5        20.000                 counts
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.time                                                       thrpt    5        43.000                     ms
[info] ArrayOfOffsetTimesBenchmark.writeCirce                                                                  thrpt    5     27727.959 ±     1609.130   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate                                                   thrpt    5      1032.744 ±       59.522  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                              thrpt    5     58621.569 ±       40.208    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                       thrpt    5         0.018 ±        0.117  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                  thrpt    5         1.023 ±        6.731    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                             thrpt    5      1015.779 ±       19.322  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                        thrpt    5     57665.980 ±     2444.008    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                      thrpt    5         0.666 ±        5.737  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                 thrpt    5        38.268 ±      329.497    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.count                                                        thrpt    5        15.000                 counts
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.time                                                         thrpt    5        35.000                     ms
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala                                                           thrpt    5     85870.021 ±     5350.449   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                            thrpt    5      1366.987 ±       85.349  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       thrpt    5     25056.005 ±        0.001    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                thrpt    5         0.046 ±        0.388  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm           thrpt    5         0.849 ±        7.131    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                      thrpt    5      1357.355 ±       27.970  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                 thrpt    5     24883.070 ±     1076.339    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                               thrpt    5         0.933 ±        6.690  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                          thrpt    5        17.204 ±      122.927    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.count                                                 thrpt    5        20.000                 counts
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.time                                                  thrpt    5        37.000                     ms
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala                                                          thrpt    5    703012.102 ±    11070.193   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                           thrpt    5       964.799 ±       15.249  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      thrpt    5      2160.001 ±        0.001    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'               thrpt    5         0.032 ±        0.275  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm          thrpt    5         0.071 ±        0.615    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                     thrpt    5       946.827 ±      590.540  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                thrpt    5      2120.222 ±     1332.320    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                              thrpt    5         0.932 ±        6.688  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                         thrpt    5         2.082 ±       14.929    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.count                                                thrpt    5        14.000                 counts
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.time                                                 thrpt    5        31.000                     ms
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc                                                  thrpt    5    768195.060 ±     5062.893   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        thrpt    5           ≈ 0                 counts
[info] ArrayOfOffsetTimesBenchmark.writePlayJson                                                               thrpt    5     72587.640 ±     2506.659   ops/s
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate                                                thrpt    5      1564.659 ±       54.189  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                           thrpt    5     33928.006 ±        0.001    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                    thrpt    5         0.013 ±        0.097  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               thrpt    5         0.278 ±        2.109    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                          thrpt    5      1561.804 ±      705.063  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                     thrpt    5     33866.347 ±    15254.739    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.932 ±        8.029  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                              thrpt    5        20.509 ±      176.585    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.count                                                     thrpt    5        23.000                 counts
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.time                                                      thrpt    5        41.000                     ms
[info] ArrayOfPeriodsBenchmark.readCirce                                                                       thrpt    5     27605.966 ±      374.240   ops/s
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate                                                        thrpt    5       995.355 ±       13.712  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate.norm                                                   thrpt    5     56752.016 ±        0.009    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                            thrpt    5         0.030 ±        0.246  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       thrpt    5         1.685 ±       14.014    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                  thrpt    5      1014.405 ±       18.483  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                             thrpt    5     57838.049 ±      447.579    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                           thrpt    5         0.666 ±        5.736  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                      thrpt    5        37.963 ±      326.873    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.count                                                             thrpt    5        15.000                 counts
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.time                                                              thrpt    5        39.000                     ms
[info] ArrayOfPeriodsBenchmark.readJacksonScala                                                                thrpt    5     26944.552 ±      781.502   ops/s
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate                                                 thrpt    5       738.535 ±       21.163  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                            thrpt    5     43144.120 ±        0.894    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                           thrpt    5       739.837 ±      577.898  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                      thrpt    5     43220.440 ±    33729.472    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                    thrpt    5         0.933 ±        6.689  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                               thrpt    5        55.018 ±      395.364    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.count                                                      thrpt    5        11.000                 counts
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.time                                                       thrpt    5        47.000                     ms
[info] ArrayOfPeriodsBenchmark.readJsoniterScala                                                               thrpt    5    176615.851 ±    14793.982   ops/s
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate                                                thrpt    5       459.594 ±       38.287  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                           thrpt    5      4096.002 ±        0.001    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                          thrpt    5       405.226 ±      581.437  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                     thrpt    5      3620.273 ±     5333.616    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.count                                                     thrpt    5         6.000                 counts
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.time                                                      thrpt    5        17.000                     ms
[info] ArrayOfPeriodsBenchmark.readPlayJson                                                                    thrpt    5     21793.359 ±      805.912   ops/s
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate                                                     thrpt    5      1363.112 ±       49.639  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                thrpt    5     98450.192 ±       17.135    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                         thrpt    5         0.006 ±        0.031  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    thrpt    5         0.425 ±        2.242    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                               thrpt    5      1356.514 ±       27.193  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                          thrpt    5     97980.113 ±     3834.689    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                        thrpt    5         0.932 ±        8.028  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                   thrpt    5        66.468 ±      572.307    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.count                                                          thrpt    5        20.000                 counts
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.time                                                           thrpt    5        41.000                     ms
[info] ArrayOfPeriodsBenchmark.writeCirce                                                                      thrpt    5     81821.898 ±     1232.102   ops/s
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate                                                       thrpt    5      1262.096 ±       19.154  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate.norm                                                  thrpt    5     24280.005 ±        0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                           thrpt    5         0.023 ±        0.121  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      thrpt    5         0.441 ±        2.331    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                 thrpt    5      1289.349 ±      592.300  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                            thrpt    5     24800.851 ±    11269.945    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                          thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                     thrpt    5        12.847 ±      110.614    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.count                                                            thrpt    5        19.000                 counts
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.time                                                             thrpt    5        33.000                     ms
[info] ArrayOfPeriodsBenchmark.writeJacksonScala                                                               thrpt    5    131935.957 ±     8990.443   ops/s
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate                                                thrpt    5      1116.445 ±       76.011  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                           thrpt    5     13320.003 ±        0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                    thrpt    5         0.024 ±        0.191  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               thrpt    5         0.280 ±        2.244    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                          thrpt    5      1150.907 ±      709.988  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                     thrpt    5     13745.854 ±     8880.327    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                   thrpt    5         1.199 ±        7.779  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                              thrpt    5        14.113 ±       91.494    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.count                                                     thrpt    5        17.000                 counts
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.time                                                      thrpt    5        40.000                     ms
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala                                                              thrpt    5    463291.567 ±    26936.452   ops/s
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate                                               thrpt    5       513.389 ±       30.006  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                          thrpt    5      1744.001 ±        0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                         thrpt    5       471.101 ±      710.188  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                    thrpt    5      1598.812 ±     2388.120    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                  thrpt    5         0.133 ±        1.147  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                             thrpt    5         0.449 ±        3.862    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.count                                                    thrpt    5         7.000                 counts
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.time                                                     thrpt    5        22.000                     ms
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc                                                      thrpt    5    526345.086 ±    28499.669   ops/s
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                       thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                  thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                            thrpt    5           ≈ 0                 counts
[info] ArrayOfPeriodsBenchmark.writePlayJson                                                                   thrpt    5    104174.788 ±     2353.146   ops/s
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate                                                    thrpt    5      1270.725 ±       29.182  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate.norm                                               thrpt    5     19200.004 ±        0.001    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                        thrpt    5         0.028 ±        0.134  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   thrpt    5         0.421 ±        2.035    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                              thrpt    5      1288.575 ±      594.073  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                         thrpt    5     19464.851 ±     8798.452    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                       thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                  thrpt    5        12.132 ±      104.462    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.count                                                         thrpt    5        19.000                 counts
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.time                                                          thrpt    5        36.000                     ms
[info] ArrayOfShortsBenchmark.readCirce                                                                        thrpt    5    154716.897 ±     4966.475   ops/s
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate                                                         thrpt    5      2604.321 ±       83.473  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm                                                    thrpt    5     26496.003 ±        0.001    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                             thrpt    5         0.008 ±        0.012  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        thrpt    5         0.076 ±        0.126    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                   thrpt    5      2586.660 ±      718.057  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                              thrpt    5     26311.347 ±     6920.728    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.count                                                              thrpt    5        38.000                 counts
[info] ArrayOfShortsBenchmark.readCirce:·gc.time                                                               thrpt    5        31.000                     ms
[info] ArrayOfShortsBenchmark.readDslJsonJava                                                                  thrpt    5    603237.994 ±    38193.356   ops/s
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate                                                   thrpt    5       334.213 ±       21.050  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                              thrpt    5       872.001 ±        0.001    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                             thrpt    5       333.727 ±        0.216  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                        thrpt    5       870.922 ±       55.440    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.count                                                        thrpt    5         5.000                 counts
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.time                                                         thrpt    5        25.000                     ms
[info] ArrayOfShortsBenchmark.readJacksonScala                                                                 thrpt    5    325209.746 ±    25262.913   ops/s
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate                                                  thrpt    5       338.838 ±       26.252  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                             thrpt    5      1640.001 ±        0.001    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                            thrpt    5       336.230 ±        1.133  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                       thrpt    5      1627.900 ±      124.694    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                     thrpt    5         0.133 ±        1.147  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                thrpt    5         0.656 ±        5.652    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.count                                                       thrpt    5         5.000                 counts
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.time                                                        thrpt    5        21.000                     ms
[info] ArrayOfShortsBenchmark.readJsoniterScala                                                                thrpt    5    877677.669 ±    25488.830   ops/s
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate                                                 thrpt    5       303.313 ±        8.818  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                            thrpt    5       544.000 ±        0.001    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                           thrpt    5       337.004 ±        0.066  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                      thrpt    5       604.454 ±       17.703    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.count                                                      thrpt    5         5.000                 counts
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.time                                                       thrpt    5        15.000                     ms
[info] ArrayOfShortsBenchmark.readPlayJson                                                                     thrpt    5     77185.547 ±     1672.949   ops/s
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate                                                      thrpt    5      3411.920 ±       73.421  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                 thrpt    5     69576.005 ±        0.001    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                          thrpt    5         0.015 ±        0.022  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     thrpt    5         0.299 ±        0.459    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                thrpt    5      3403.749 ±        2.596  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                           thrpt    5     69411.132 ±     1505.362    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.count                                                           thrpt    5        50.000                 counts
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.time                                                            thrpt    5        44.000                     ms
[info] ArrayOfShortsBenchmark.writeCirce                                                                       thrpt    5    254119.376 ±    11910.868   ops/s
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate                                                        thrpt    5      1730.815 ±       82.275  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm                                                   thrpt    5     10720.002 ±        0.001    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                            thrpt    5         0.020 ±        0.154  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       thrpt    5         0.123 ±        0.950    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                  thrpt    5      1700.446 ±       11.949  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                             thrpt    5     10533.236 ±      523.600    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                           thrpt    5         0.799 ±        6.884  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                      thrpt    5         4.920 ±       42.366    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.count                                                             thrpt    5        25.000                 counts
[info] ArrayOfShortsBenchmark.writeCirce:·gc.time                                                              thrpt    5        27.000                     ms
[info] ArrayOfShortsBenchmark.writeDslJsonJava                                                                 thrpt    5   1067773.539 ±    33686.499   ops/s
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                  thrpt    5       439.632 ±       13.919  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                             thrpt    5       648.000 ±        0.001    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                            thrpt    5       466.954 ±      702.286  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                       thrpt    5       689.668 ±     1054.496    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space                                     thrpt    5         0.266 ±        1.405  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space.norm                                thrpt    5         0.395 ±        2.085    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.count                                                       thrpt    5         7.000                 counts
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.time                                                        thrpt    5        34.000                     ms
[info] ArrayOfShortsBenchmark.writeDslJsonJavaPrealloc                                                         thrpt    5   1147796.347 ±     4081.641   ops/s
[info] ArrayOfShortsBenchmark.writeDslJsonJavaPrealloc:·gc.alloc.rate                                          thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJavaPrealloc:·gc.alloc.rate.norm                                     thrpt    5        ≈ 10⁻³                   B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJavaPrealloc:·gc.count                                               thrpt    5           ≈ 0                 counts
[info] ArrayOfShortsBenchmark.writeJacksonScala                                                                thrpt    5    979849.395 ±    62534.566   ops/s
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate                                                 thrpt    5       642.550 ±       39.968  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                            thrpt    5      1032.000 ±        0.001    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                           thrpt    5       605.087 ±      578.483  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                      thrpt    5       973.296 ±      947.581    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                    thrpt    5         0.133 ±        1.147  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                               thrpt    5         0.213 ±        1.830    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.count                                                      thrpt    5         9.000                 counts
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.time                                                       thrpt    5        38.000                     ms
[info] ArrayOfShortsBenchmark.writeJsoniterScala                                                               thrpt    5   1352634.332 ±    12821.807   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                thrpt    5       556.853 ±        5.192  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                           thrpt    5       648.000 ±        0.001    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                          thrpt    5       605.601 ±      579.653  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                     thrpt    5       704.709 ±      674.287    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.133 ±        1.147  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                              thrpt    5         0.155 ±        1.336    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count                                                     thrpt    5         9.000                 counts
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time                                                      thrpt    5        29.000                     ms
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc                                                       thrpt    5   1423405.283 ±    17530.705   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                        thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                   thrpt    5        ≈ 10⁻⁴                   B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                             thrpt    5           ≈ 0                 counts
[info] ArrayOfShortsBenchmark.writePlayJson                                                                    thrpt    5     36959.084 ±     1340.231   ops/s
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate                                                     thrpt    5      1807.618 ±       65.365  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                thrpt    5     76985.443 ±       12.331    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                         thrpt    5         0.033 ±        0.274  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    thrpt    5         1.433 ±       11.779    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                               thrpt    5      1835.473 ±      705.365  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                          thrpt    5     78211.220 ±    31812.318    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                        thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                   thrpt    5        34.383 ±      296.051    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.count                                                          thrpt    5        27.000                 counts
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.time                                                           thrpt    5        33.000                     ms
[info] ArrayOfUUIDsBenchmark.readCirce                                                                         thrpt    5     40398.199 ±      930.782   ops/s
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate                                                          thrpt    5       806.632 ±       18.921  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm                                                     thrpt    5     31424.010 ±        0.001    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                              thrpt    5         0.010 ±        0.088  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         thrpt    5         0.393 ±        3.387    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                    thrpt    5       810.299 ±      705.809  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                               thrpt    5     31578.561 ±    27754.945    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                             thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                        thrpt    5        26.003 ±      223.895    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.count                                                               thrpt    5        12.000                 counts
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.time                                                                thrpt    5        35.000                     ms
[info] ArrayOfUUIDsBenchmark.readJacksonScala                                                                  thrpt    5     78426.263 ±     3215.672   ops/s
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate                                                   thrpt    5       826.696 ±       34.044  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                              thrpt    5     16592.005 ±        0.001    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                       thrpt    5         0.025 ±        0.142  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                  thrpt    5         0.504 ±        2.845    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                             thrpt    5       809.525 ±      708.541  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                        thrpt    5     16257.842 ±    14442.735    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                      thrpt    5         0.932 ±        6.688  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                 thrpt    5        18.707 ±      133.858    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count                                                        thrpt    5        12.000                 counts
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time                                                         thrpt    5        41.000                     ms
[info] ArrayOfUUIDsBenchmark.readJsoniterScala                                                                 thrpt    5    266473.560 ±     3055.434   ops/s
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate                                                  thrpt    5       866.892 ±       10.112  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                             thrpt    5      5120.002 ±        0.001    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                      thrpt    5         0.016 ±        0.087  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                 thrpt    5         0.092 ±        0.512    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                            thrpt    5       879.049 ±      714.280  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                       thrpt    5      5191.434 ±     4210.224    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                     thrpt    5         0.666 ±        5.736  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                thrpt    5         3.927 ±       33.814    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count                                                       thrpt    5        13.000                 counts
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time                                                        thrpt    5        30.000                     ms
[info] ArrayOfUUIDsBenchmark.readPlayJson                                                                      thrpt    5     30176.833 ±     1322.982   ops/s
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate                                                       thrpt    5      1417.962 ±       61.777  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                  thrpt    5     73960.014 ±        0.006    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                           thrpt    5         0.018 ±        0.118  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      thrpt    5         0.932 ±        6.187    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                 thrpt    5      1425.529 ±      595.093  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                            thrpt    5     74319.179 ±    28981.237    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                          thrpt    5         0.799 ±        6.883  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                     thrpt    5        41.894 ±      360.721    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.count                                                            thrpt    5        21.000                 counts
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.time                                                             thrpt    5        36.000                     ms
[info] ArrayOfUUIDsBenchmark.writeCirce                                                                        thrpt    5     50647.039 ±     1808.097   ops/s
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate                                                         thrpt    5      1073.466 ±       38.624  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm                                                    thrpt    5     33360.008 ±        0.002    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                             thrpt    5         0.019 ±        0.125  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        thrpt    5         0.580 ±        3.868    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                   thrpt    5      1016.425 ±       19.842  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                              thrpt    5     31588.879 ±      930.191    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                            thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                       thrpt    5        20.680 ±      178.060    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.count                                                              thrpt    5        15.000                 counts
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.time                                                               thrpt    5        31.000                     ms
[info] ArrayOfUUIDsBenchmark.writeJacksonScala                                                                 thrpt    5     86903.993 ±     7766.491   ops/s
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate                                                  thrpt    5      1190.425 ±      106.859  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                             thrpt    5     21560.000 ±        0.039    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                      thrpt    5         0.031 ±        0.194  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                 thrpt    5         0.554 ±        3.442    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                            thrpt    5      1152.350 ±      713.483  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                       thrpt    5     20916.863 ±    14201.467    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                     thrpt    5         0.932 ±        8.028  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                thrpt    5        17.504 ±      150.716    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count                                                       thrpt    5        17.000                 counts
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time                                                        thrpt    5        37.000                     ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala                                                                thrpt    5    293537.978 ±    12770.533   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                 thrpt    5       935.445 ±       40.983  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                            thrpt    5      5016.001 ±        0.001    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                     thrpt    5         0.020 ±        0.172  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                thrpt    5         0.105 ±        0.908    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                           thrpt    5       878.566 ±      710.118  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                      thrpt    5      4711.106 ±     3804.683    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                    thrpt    5         0.799 ±        6.883  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                               thrpt    5         4.320 ±       37.198    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count                                                      thrpt    5        13.000                 counts
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time                                                       thrpt    5        30.000                     ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc                                                        thrpt    5    323342.794 ±     4996.710   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                         thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                    thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                              thrpt    5           ≈ 0                 counts
[info] ArrayOfUUIDsBenchmark.writePlayJson                                                                     thrpt    5     78684.008 ±     2343.397   ops/s
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate                                                      thrpt    5      1166.126 ±       34.613  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                 thrpt    5     23328.005 ±        0.098    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                          thrpt    5         0.029 ±        0.250  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     thrpt    5         0.594 ±        5.057    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                thrpt    5      1151.585 ±      709.714  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                           thrpt    5     23034.631 ±    14095.618    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                         thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                    thrpt    5        16.057 ±      138.257    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.count                                                           thrpt    5        17.000                 counts
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.time                                                            thrpt    5        37.000                     ms
[info] ArrayOfZoneIdsBenchmark.readCirce                                                                       thrpt    5     70457.825 ±     2885.141   ops/s
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate                                                        thrpt    5      1415.738 ±       57.742  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm                                                   thrpt    5     31624.006 ±        0.001    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                            thrpt    5         0.027 ±        0.227  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       thrpt    5         0.608 ±        5.049    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                  thrpt    5      1425.411 ±      596.614  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                             thrpt    5     31864.433 ±    14453.568    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                           thrpt    5         0.932 ±        6.688  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                      thrpt    5        20.747 ±      148.470    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.count                                                             thrpt    5        21.000                 counts
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.time                                                              thrpt    5        32.000                     ms
[info] ArrayOfZoneIdsBenchmark.readJacksonScala                                                                thrpt    5     80125.219 ±     4245.422   ops/s
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate                                                 thrpt    5       923.598 ±       48.760  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                            thrpt    5     18144.005 ±        0.001    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                     thrpt    5         0.028 ±        0.226  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                thrpt    5         0.541 ±        4.422    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                           thrpt    5       877.470 ±      708.546  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                      thrpt    5     17248.863 ±    14131.813    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                    thrpt    5         0.933 ±        8.030  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                               thrpt    5        18.766 ±      161.577    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count                                                      thrpt    5        13.000                 counts
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time                                                       thrpt    5        42.000                     ms
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala                                                               thrpt    5    100419.936 ±     2956.489   ops/s
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate                                                thrpt    5      1079.037 ±       31.789  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                           thrpt    5     16912.004 ±        0.001    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                    thrpt    5         0.029 ±        0.188  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               thrpt    5         0.459 ±        2.964    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                          thrpt    5      1083.652 ±      599.276  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                     thrpt    5     16986.059 ±     9437.298    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                              thrpt    5        12.632 ±      108.762    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count                                                     thrpt    5        16.000                 counts
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time                                                      thrpt    5        32.000                     ms
[info] ArrayOfZoneIdsBenchmark.readPlayJson                                                                    thrpt    5     37513.971 ±     1419.524   ops/s
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate                                                     thrpt    5      1873.759 ±       69.882  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                thrpt    5     78615.924 ±        0.747    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                         thrpt    5         0.024 ±        0.134  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    thrpt    5         0.993 ±        5.615    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                               thrpt    5      1836.213 ±      725.434  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                          thrpt    5     77087.793 ±    32532.409    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                        thrpt    5         0.932 ±        8.029  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                   thrpt    5        39.159 ±      337.174    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count                                                          thrpt    5        27.000                 counts
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time                                                           thrpt    5        32.000                     ms
[info] ArrayOfZoneIdsBenchmark.writeCirce                                                                      thrpt    5    117480.332 ±     2156.710   ops/s
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate                                                       thrpt    5       810.995 ±       15.050  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm                                                  thrpt    5     10864.004 ±        0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                           thrpt    5         0.045 ±        0.391  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      thrpt    5         0.610 ±        5.251    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                 thrpt    5       808.713 ±      703.149  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                            thrpt    5     10832.506 ±     9396.027    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                          thrpt    5         1.066 ±        6.440  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                     thrpt    5        14.233 ±       85.911    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.count                                                            thrpt    5        12.000                 counts
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.time                                                             thrpt    5        41.000                     ms
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala                                                               thrpt    5    174186.607 ±    14407.205   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate                                                thrpt    5       258.499 ±       21.385  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                           thrpt    5      2336.002 ±        0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                          thrpt    5       201.410 ±      707.985  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                     thrpt    5      1845.202 ±     6487.481    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count                                                     thrpt    5         3.000                 counts
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time                                                      thrpt    5        14.000                     ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala                                                              thrpt    5    750023.757 ±    26604.703   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate                                               thrpt    5       930.120 ±       32.977  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                          thrpt    5      1952.001 ±        0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                   thrpt    5         0.034 ±        0.292  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm              thrpt    5         0.071 ±        0.611    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                         thrpt    5       946.621 ±      590.050  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                    thrpt    5      1984.974 ±     1197.955    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                  thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                             thrpt    5         1.699 ±       14.626    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count                                                    thrpt    5        14.000                 counts
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time                                                     thrpt    5        34.000                     ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc                                                      thrpt    5    792635.812 ±     5432.150   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                       thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                  thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                            thrpt    5           ≈ 0                 counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson                                                                   thrpt    5    191922.939 ±     4276.710   ops/s
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate                                                    thrpt    5       625.282 ±       13.748  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm                                               thrpt    5      5128.002 ±        0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                              thrpt    5       604.273 ±      578.170  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                         thrpt    5      4957.240 ±     4761.403    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count                                                         thrpt    5         9.000                 counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time                                                          thrpt    5        39.000                     ms
[info] ArrayOfZoneOffsetsBenchmark.readCirce                                                                   thrpt    5    125838.865 ±     5587.152   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate                                                    thrpt    5      1549.821 ±       68.538  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate.norm                                               thrpt    5     19384.003 ±        0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                        thrpt    5         0.010 ±        0.054  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   thrpt    5         0.130 ±        0.678    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                              thrpt    5      1563.142 ±      709.167  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                         thrpt    5     19552.739 ±     8911.266    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                       thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                  thrpt    5         8.357 ±       71.960    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.count                                                         thrpt    5        23.000                 counts
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.time                                                          thrpt    5        30.000                     ms
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala                                                            thrpt    5    165054.207 ±     3443.925   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate                                             thrpt    5       880.910 ±       18.043  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        thrpt    5      8400.003 ±        0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                 thrpt    5         0.028 ±        0.186  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            thrpt    5         0.264 ±        1.766    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                       thrpt    5       877.603 ±      706.405  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                  thrpt    5      8372.527 ±     6819.768    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                thrpt    5         0.799 ±        6.883  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                           thrpt    5         7.594 ±       65.383    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.count                                                  thrpt    5        13.000                 counts
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.time                                                   thrpt    5        41.000                     ms
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala                                                           thrpt    5    321729.045 ±    10792.999   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate                                            thrpt    5       624.706 ±       21.005  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       thrpt    5      3056.001 ±        0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                      thrpt    5       606.731 ±      580.528  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                 thrpt    5      2970.272 ±     2868.004    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.count                                                 thrpt    5         9.000                 counts
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.time                                                  thrpt    5        27.000                     ms
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson                                                                thrpt    5     63982.201 ±     2034.627   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate                                                 thrpt    5      2701.412 ±       84.312  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate.norm                                            thrpt    5     66448.006 ±        0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                     thrpt    5         0.007 ±        0.007  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                thrpt    5         0.177 ±        0.170    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                           thrpt    5      2723.285 ±        2.090  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                      thrpt    5     66989.648 ±     2152.388    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.count                                                      thrpt    5        40.000                 counts
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.time                                                       thrpt    5        38.000                     ms
[info] ArrayOfZoneOffsetsBenchmark.writeCirce                                                                  thrpt    5    168156.743 ±     5631.255   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate                                                   thrpt    5       825.673 ±       27.788  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate.norm                                              thrpt    5      7728.002 ±        0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                       thrpt    5         0.041 ±        0.349  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                  thrpt    5         0.376 ±        3.233    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                             thrpt    5       878.344 ±      718.195  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                        thrpt    5      8223.694 ±     6774.046    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                      thrpt    5         0.666 ±        5.736  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                 thrpt    5         6.221 ±       53.562    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.count                                                        thrpt    5        13.000                 counts
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.time                                                         thrpt    5        37.000                     ms
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala                                                           thrpt    5    287958.863 ±    15239.897   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate                                            thrpt    5       283.918 ±       14.961  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       thrpt    5      1552.001 ±        0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                      thrpt    5       268.955 ±      578.948  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                 thrpt    5      1475.186 ±     3176.679    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                               thrpt    5         0.133 ±        1.147  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                          thrpt    5         0.717 ±        6.177    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.count                                                 thrpt    5         4.000                 counts
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.time                                                  thrpt    5        17.000                     ms
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala                                                          thrpt    5   1228397.260 ±    40761.793   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate                                           thrpt    5       911.519 ±       30.137  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      thrpt    5      1168.000 ±        0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'               thrpt    5         0.028 ±        0.201  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm          thrpt    5         0.036 ±        0.260    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                     thrpt    5       945.811 ±      570.951  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                thrpt    5      1211.426 ±      718.790    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                              thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                         thrpt    5         1.011 ±        8.708    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.count                                                thrpt    5        14.000                 counts
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.time                                                 thrpt    5        34.000                     ms
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc                                                  thrpt    5   1193245.520 ±    12905.649   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              thrpt    5        ≈ 10⁻³                   B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        thrpt    5           ≈ 0                 counts
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson                                                               thrpt    5    300699.439 ±    19158.712   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate                                                thrpt    5       820.760 ±       52.249  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate.norm                                           thrpt    5      4296.001 ±        0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                    thrpt    5         0.015 ±        0.127  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               thrpt    5         0.075 ±        0.645    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                          thrpt    5       808.932 ±      721.542  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                     thrpt    5      4228.206 ±     3632.332    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                   thrpt    5         1.199 ±        4.590  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                              thrpt    5         6.270 ±       23.940    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.count                                                     thrpt    5        12.000                 counts
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.time                                                      thrpt    5        46.000                     ms
[info] ArrayOfZonedDateTimesBenchmark.readCirce                                                                thrpt    5      4558.761 ±      230.128   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate                                                 thrpt    5       893.883 ±       45.277  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                            thrpt    5    308592.092 ±        0.014    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                     thrpt    5         0.022 ±        0.141  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                thrpt    5         7.684 ±       48.823    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                           thrpt    5       943.803 ±      586.772  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                      thrpt    5    325778.077 ±   201275.589    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                    thrpt    5         1.066 ±        7.821  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                               thrpt    5       373.563 ±     2752.180    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.count                                                      thrpt    5        14.000                 counts
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.time                                                       thrpt    5        41.000                     ms
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala                                                         thrpt    5      4197.694 ±      248.538   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                          thrpt    5       782.072 ±       46.497  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                     thrpt    5    293224.102 ±        0.032    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'              thrpt    5         0.006 ±        0.050  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm         thrpt    5         2.151 ±       18.519    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                    thrpt    5       806.215 ±      717.981  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                               thrpt    5    301898.078 ±   259789.879    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                             thrpt    5         1.199 ±        8.958  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                        thrpt    5       442.146 ±     3294.728    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.count                                               thrpt    5        12.000                 counts
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.time                                                thrpt    5        50.000                     ms
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala                                                        thrpt    5     30124.139 ±     2564.384   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                         thrpt    5       511.890 ±       43.784  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                    thrpt    5     26744.014 ±        0.007    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                   thrpt    5       470.981 ±      709.788  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                              thrpt    5     24552.711 ±    36228.352    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.count                                              thrpt    5         7.000                 counts
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.time                                               thrpt    5        24.000                     ms
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson                                                             thrpt    5      3912.863 ±      238.691   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                              thrpt    5       998.836 ±       61.159  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                         thrpt    5    401792.108 ±        0.018    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                  thrpt    5         0.004 ±        0.037  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm             thrpt    5         1.731 ±       14.905    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                        thrpt    5      1013.113 ±       28.009  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                   thrpt    5    407643.148 ±    33730.267    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                 thrpt    5         1.199 ±        8.956  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                            thrpt    5       487.700 ±     3658.333    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.count                                                   thrpt    5        15.000                 counts
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.time                                                    thrpt    5        45.000                     ms
[info] ArrayOfZonedDateTimesBenchmark.writeCirce                                                               thrpt    5     13566.741 ±      176.783   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate                                                thrpt    5       851.043 ±       11.757  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                           thrpt    5     98727.260 ±       46.606    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                    thrpt    5         0.048 ±        0.265  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               thrpt    5         5.500 ±       30.636    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                          thrpt    5       875.912 ±      702.052  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                     thrpt    5    101661.752 ±    82487.647    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                   thrpt    5         1.199 ±        7.565  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                              thrpt    5       139.388 ±      879.590    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.count                                                     thrpt    5        13.000                 counts
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.time                                                      thrpt    5        43.000                     ms
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala                                                        thrpt    5     16111.224 ±      848.149   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                         thrpt    5       834.620 ±       44.058  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                    thrpt    5     81536.048 ±        0.216    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'             thrpt    5         0.015 ±        0.125  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm        thrpt    5         1.398 ±       12.038    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                   thrpt    5       808.078 ±      704.969  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                              thrpt    5     78907.874 ±    67942.018    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                            thrpt    5         1.199 ±        7.780  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                       thrpt    5       115.951 ±      748.318    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.count                                              thrpt    5        12.000                 counts
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.time                                               thrpt    5        45.000                     ms
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala                                                       thrpt    5    270629.425 ±     8901.393   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                        thrpt    5       954.503 ±       31.487  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                   thrpt    5      5552.002 ±        0.001    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'            thrpt    5         0.025 ±        0.219  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm       thrpt    5         0.150 ±        1.288    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                  thrpt    5       946.417 ±      589.731  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                             thrpt    5      5508.069 ±     3499.047    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                           thrpt    5         0.933 ±        8.029  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                      thrpt    5         5.424 ±       46.701    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.count                                             thrpt    5        14.000                 counts
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.time                                              thrpt    5        34.000                     ms
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc                                               thrpt    5    290771.180 ±     1607.907   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                           thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                     thrpt    5           ≈ 0                 counts
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson                                                            thrpt    5     14794.075 ±      929.302   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                             thrpt    5       827.506 ±       69.577  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                        thrpt    5     88033.342 ±     3470.684    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                 thrpt    5         0.044 ±        0.381  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            thrpt    5         4.620 ±       39.777    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                       thrpt    5       875.389 ±      717.666  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                  thrpt    5     93149.744 ±    76587.432    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                thrpt    5         1.066 ±        7.821  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                           thrpt    5       113.457 ±      833.669    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.count                                                  thrpt    5        13.000                 counts
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.time                                                   thrpt    5        52.000                     ms
[info] ArraysBenchmark.readCirce                                                                               thrpt    5    846205.156 ±    24456.259   ops/s
[info] ArraysBenchmark.readCirce:·gc.alloc.rate                                                                thrpt    5      2739.492 ±       79.065  MB/sec
[info] ArraysBenchmark.readCirce:·gc.alloc.rate.norm                                                           thrpt    5      5096.000 ±        0.001    B/op
[info] ArraysBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                    thrpt    5         0.003 ±        0.011  MB/sec
[info] ArraysBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                               thrpt    5         0.006 ±        0.020    B/op
[info] ArraysBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                          thrpt    5      2722.747 ±        0.520  MB/sec
[info] ArraysBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                     thrpt    5      5065.080 ±      146.513    B/op
[info] ArraysBenchmark.readCirce:·gc.count                                                                     thrpt    5        40.000                 counts
[info] ArraysBenchmark.readCirce:·gc.time                                                                      thrpt    5        38.000                     ms
[info] ArraysBenchmark.readJacksonScala                                                                        thrpt    5   1411665.642 ±    58596.417   ops/s
[info] ArraysBenchmark.readJacksonScala:·gc.alloc.rate                                                         thrpt    5      1327.275 ±       55.177  MB/sec
[info] ArraysBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                    thrpt    5      1480.000 ±        0.001    B/op
[info] ArraysBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                             thrpt    5         0.037 ±        0.243  MB/sec
[info] ArraysBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        thrpt    5         0.041 ±        0.270    B/op
[info] ArraysBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                   thrpt    5      1356.334 ±       28.925  MB/sec
[info] ArraysBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                              thrpt    5      1512.531 ±       65.054    B/op
[info] ArraysBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                            thrpt    5         1.066 ±        7.821  MB/sec
[info] ArraysBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                       thrpt    5         1.189 ±        8.718    B/op
[info] ArraysBenchmark.readJacksonScala:·gc.count                                                              thrpt    5        20.000                 counts
[info] ArraysBenchmark.readJacksonScala:·gc.time                                                               thrpt    5        41.000                     ms
[info] ArraysBenchmark.readJsoniterScala                                                                       thrpt    5   8434029.030 ±   466794.444   ops/s
[info] ArraysBenchmark.readJsoniterScala:·gc.alloc.rate                                                        thrpt    5      2100.791 ±      115.274  MB/sec
[info] ArraysBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                   thrpt    5       392.000 ±        0.001    B/op
[info] ArraysBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                            thrpt    5         0.003 ±        0.018  MB/sec
[info] ArraysBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       thrpt    5         0.001 ±        0.003    B/op
[info] ArraysBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                  thrpt    5      2110.611 ±      585.180  MB/sec
[info] ArraysBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                             thrpt    5       393.773 ±      102.019    B/op
[info] ArraysBenchmark.readJsoniterScala:·gc.count                                                             thrpt    5        31.000                 counts
[info] ArraysBenchmark.readJsoniterScala:·gc.time                                                              thrpt    5        31.000                     ms
[info] ArraysBenchmark.readPlayJson                                                                            thrpt    5    296849.611 ±    18354.117   ops/s
[info] ArraysBenchmark.readPlayJson:·gc.alloc.rate                                                             thrpt    5      1827.176 ±      113.291  MB/sec
[info] ArraysBenchmark.readPlayJson:·gc.alloc.rate.norm                                                        thrpt    5      9688.001 ±        0.001    B/op
[info] ArraysBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                 thrpt    5         0.036 ±        0.302  MB/sec
[info] ArraysBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                            thrpt    5         0.191 ±        1.612    B/op
[info] ArraysBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                       thrpt    5      1834.269 ±      731.201  MB/sec
[info] ArraysBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                  thrpt    5      9724.980 ±     3796.460    B/op
[info] ArraysBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                thrpt    5         0.932 ±        8.029  MB/sec
[info] ArraysBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                           thrpt    5         5.071 ±       43.661    B/op
[info] ArraysBenchmark.readPlayJson:·gc.count                                                                  thrpt    5        27.000                 counts
[info] ArraysBenchmark.readPlayJson:·gc.time                                                                   thrpt    5        41.000                     ms
[info] ArraysBenchmark.writeCirce                                                                              thrpt    5    994288.772 ±    24184.728   ops/s
[info] ArraysBenchmark.writeCirce:·gc.alloc.rate                                                               thrpt    5      2188.244 ±       53.389  MB/sec
[info] ArraysBenchmark.writeCirce:·gc.alloc.rate.norm                                                          thrpt    5      3464.000 ±        0.001    B/op
[info] ArraysBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   thrpt    5         0.020 ±        0.164  MB/sec
[info] ArraysBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              thrpt    5         0.032 ±        0.257    B/op
[info] ArraysBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                         thrpt    5      2178.451 ±      718.881  MB/sec
[info] ArraysBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                    thrpt    5      3448.384 ±     1127.872    B/op
[info] ArraysBenchmark.writeCirce:·gc.count                                                                    thrpt    5        32.000                 counts
[info] ArraysBenchmark.writeCirce:·gc.time                                                                     thrpt    5        29.000                     ms
[info] ArraysBenchmark.writeJacksonScala                                                                       thrpt    5   3299361.911 ±    21719.079   ops/s
[info] ArraysBenchmark.writeJacksonScala:·gc.alloc.rate                                                        thrpt    5      1626.795 ±       10.787  MB/sec
[info] ArraysBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                   thrpt    5       776.000 ±        0.001    B/op
[info] ArraysBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                            thrpt    5         0.015 ±        0.117  MB/sec
[info] ArraysBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       thrpt    5         0.007 ±        0.056    B/op
[info] ArraysBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                  thrpt    5      1630.053 ±      578.219  MB/sec
[info] ArraysBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                             thrpt    5       777.499 ±      273.222    B/op
[info] ArraysBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                           thrpt    5         0.932 ±        8.028  MB/sec
[info] ArraysBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                      thrpt    5         0.445 ±        3.830    B/op
[info] ArraysBenchmark.writeJacksonScala:·gc.count                                                             thrpt    5        24.000                 counts
[info] ArraysBenchmark.writeJacksonScala:·gc.time                                                              thrpt    5        37.000                     ms
[info] ArraysBenchmark.writeJsoniterScala                                                                      thrpt    5  13433156.974 ±  1718739.149   ops/s
[info] ArraysBenchmark.writeJsoniterScala:·gc.alloc.rate                                                       thrpt    5       819.283 ±      104.637  MB/sec
[info] ArraysBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                  thrpt    5        96.000 ±        0.001    B/op
[info] ArraysBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                           thrpt    5         0.042 ±        0.365  MB/sec
[info] ArraysBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      thrpt    5         0.005 ±        0.045    B/op
[info] ArraysBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                 thrpt    5       808.893 ±      703.812  MB/sec
[info] ArraysBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                            thrpt    5        94.627 ±       77.484    B/op
[info] ArraysBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                          thrpt    5         0.799 ±        6.883  MB/sec
[info] ArraysBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                     thrpt    5         0.094 ±        0.806    B/op
[info] ArraysBenchmark.writeJsoniterScala:·gc.count                                                            thrpt    5        12.000                 counts
[info] ArraysBenchmark.writeJsoniterScala:·gc.time                                                             thrpt    5        34.000                     ms
[info] ArraysBenchmark.writePlayJson                                                                           thrpt    5    480634.602 ±    14875.881   ops/s
[info] ArraysBenchmark.writePlayJson:·gc.alloc.rate                                                            thrpt    5      1666.052 ±       51.589  MB/sec
[info] ArraysBenchmark.writePlayJson:·gc.alloc.rate.norm                                                       thrpt    5      5456.001 ±        0.001    B/op
[info] ArraysBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                thrpt    5         0.042 ±        0.355  MB/sec
[info] ArraysBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           thrpt    5         0.135 ±        1.153    B/op
[info] ArraysBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                      thrpt    5      1697.016 ±       40.181  MB/sec
[info] ArraysBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                 thrpt    5      5557.488 ±       74.903    B/op
[info] ArraysBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                               thrpt    5         0.932 ±        6.688  MB/sec
[info] ArraysBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                          thrpt    5         3.086 ±       22.203    B/op
[info] ArraysBenchmark.writePlayJson:·gc.count                                                                 thrpt    5        25.000                 counts
[info] ArraysBenchmark.writePlayJson:·gc.time                                                                  thrpt    5        43.000                     ms
[info] BitSetsBenchmark.readJacksonScala                                                                       thrpt    5   1945984.578 ±   112461.852   ops/s
[info] BitSetsBenchmark.readJacksonScala:·gc.alloc.rate                                                        thrpt    5      1236.412 ±       71.911  MB/sec
[info] BitSetsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                   thrpt    5      1000.000 ±        0.001    B/op
[info] BitSetsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                            thrpt    5         0.014 ±        0.120  MB/sec
[info] BitSetsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       thrpt    5         0.011 ±        0.096    B/op
[info] BitSetsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                  thrpt    5      1219.918 ±      722.103  MB/sec
[info] BitSetsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                             thrpt    5       987.666 ±      611.401    B/op
[info] BitSetsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                           thrpt    5         0.932 ±        8.028  MB/sec
[info] BitSetsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                      thrpt    5         0.753 ±        6.486    B/op
[info] BitSetsBenchmark.readJacksonScala:·gc.count                                                             thrpt    5        18.000                 counts
[info] BitSetsBenchmark.readJacksonScala:·gc.time                                                              thrpt    5        40.000                     ms
[info] BitSetsBenchmark.readJsoniterScala                                                                      thrpt    5   8593739.692 ±   949498.404   ops/s
[info] BitSetsBenchmark.readJsoniterScala:·gc.alloc.rate                                                       thrpt    5      1135.765 ±      125.146  MB/sec
[info] BitSetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                  thrpt    5       208.000 ±        0.001    B/op
[info] BitSetsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                           thrpt    5         0.022 ±        0.188  MB/sec
[info] BitSetsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      thrpt    5         0.004 ±        0.034    B/op
[info] BitSetsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                 thrpt    5      1152.615 ±      711.081  MB/sec
[info] BitSetsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                            thrpt    5       210.852 ±      119.843    B/op
[info] BitSetsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                          thrpt    5         0.666 ±        5.735  MB/sec
[info] BitSetsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                     thrpt    5         0.119 ±        1.021    B/op
[info] BitSetsBenchmark.readJsoniterScala:·gc.count                                                            thrpt    5        17.000                 counts
[info] BitSetsBenchmark.readJsoniterScala:·gc.time                                                             thrpt    5        34.000                     ms
[info] BitSetsBenchmark.readPlayJson                                                                           thrpt    5    394312.303 ±    14147.631   ops/s
[info] BitSetsBenchmark.readPlayJson:·gc.alloc.rate                                                            thrpt    5      1813.806 ±       65.102  MB/sec
[info] BitSetsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                       thrpt    5      7240.001 ±        0.001    B/op
[info] BitSetsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                thrpt    5         0.016 ±        0.078  MB/sec
[info] BitSetsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           thrpt    5         0.063 ±        0.311    B/op
[info] BitSetsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                      thrpt    5      1834.386 ±      699.393  MB/sec
[info] BitSetsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                 thrpt    5      7327.013 ±     3015.009    B/op
[info] BitSetsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                               thrpt    5         0.932 ±        8.029  MB/sec
[info] BitSetsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                          thrpt    5         3.782 ±       32.563    B/op
[info] BitSetsBenchmark.readPlayJson:·gc.count                                                                 thrpt    5        27.000                 counts
[info] BitSetsBenchmark.readPlayJson:·gc.time                                                                  thrpt    5        41.000                     ms
[info] BitSetsBenchmark.writeJacksonScala                                                                      thrpt    5   2263324.450 ±   148290.075   ops/s
[info] BitSetsBenchmark.writeJacksonScala:·gc.alloc.rate                                                       thrpt    5      1196.287 ±       78.472  MB/sec
[info] BitSetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                  thrpt    5       832.000 ±        0.001    B/op
[info] BitSetsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                           thrpt    5         0.031 ±        0.268  MB/sec
[info] BitSetsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      thrpt    5         0.021 ±        0.184    B/op
[info] BitSetsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                 thrpt    5      1151.444 ±      712.783  MB/sec
[info] BitSetsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                            thrpt    5       801.053 ±      500.165    B/op
[info] BitSetsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                          thrpt    5         0.932 ±        8.028  MB/sec
[info] BitSetsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                     thrpt    5         0.650 ±        5.594    B/op
[info] BitSetsBenchmark.writeJacksonScala:·gc.count                                                            thrpt    5        17.000                 counts
[info] BitSetsBenchmark.writeJacksonScala:·gc.time                                                             thrpt    5        38.000                     ms
[info] BitSetsBenchmark.writeJsoniterScala                                                                     thrpt    5   6884542.112 ±   371996.624   ops/s
[info] BitSetsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                      thrpt    5      1049.847 ±       56.642  MB/sec
[info] BitSetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                 thrpt    5       240.000 ±        0.001    B/op
[info] BitSetsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                          thrpt    5         0.027 ±        0.232  MB/sec
[info] BitSetsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     thrpt    5         0.006 ±        0.054    B/op
[info] BitSetsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                thrpt    5      1083.703 ±      564.980  MB/sec
[info] BitSetsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                           thrpt    5       247.586 ±      121.460    B/op
[info] BitSetsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                         thrpt    5         0.799 ±        6.881  MB/sec
[info] BitSetsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                    thrpt    5         0.180 ±        1.547    B/op
[info] BitSetsBenchmark.writeJsoniterScala:·gc.count                                                           thrpt    5        16.000                 counts
[info] BitSetsBenchmark.writeJsoniterScala:·gc.time                                                            thrpt    5        31.000                     ms
[info] BitSetsBenchmark.writePlayJson                                                                          thrpt    5    592402.337 ±    27243.328   ops/s
[info] BitSetsBenchmark.writePlayJson:·gc.alloc.rate                                                           thrpt    5      1716.171 ±       78.647  MB/sec
[info] BitSetsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                      thrpt    5      4560.001 ±        0.001    B/op
[info] BitSetsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                               thrpt    5         0.020 ±        0.159  MB/sec
[info] BitSetsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                          thrpt    5         0.052 ±        0.420    B/op
[info] BitSetsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                     thrpt    5      1698.037 ±       31.634  MB/sec
[info] BitSetsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                thrpt    5      4512.194 ±      164.921    B/op
[info] BitSetsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                              thrpt    5         1.066 ±        9.177  MB/sec
[info] BitSetsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                         thrpt    5         2.872 ±       24.729    B/op
[info] BitSetsBenchmark.writePlayJson:·gc.count                                                                thrpt    5        25.000                 counts
[info] BitSetsBenchmark.writePlayJson:·gc.time                                                                 thrpt    5        39.000                     ms
[info] ExtractFieldsBenchmark.readCirce                                                                        thrpt    5    678635.571 ±    28170.392   ops/s
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate                                                         thrpt    5      2224.964 ±       93.356  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm                                                    thrpt    5      5160.001 ±        0.001    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                             thrpt    5         0.033 ±        0.260  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        thrpt    5         0.075 ±        0.597    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                   thrpt    5      2246.677 ±      718.737  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                              thrpt    5      5209.690 ±     1613.623    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.count                                                              thrpt    5        33.000                 counts
[info] ExtractFieldsBenchmark.readCirce:·gc.time                                                               thrpt    5        32.000                     ms
[info] ExtractFieldsBenchmark.readDslJsonJava                                                                  thrpt    5   5427225.291 ±    93637.127   ops/s
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate                                                   thrpt    5       331.019 ±        5.693  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                              thrpt    5        96.000 ±        0.001    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                             thrpt    5       333.680 ±        0.258  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                        thrpt    5        96.773 ±        1.637    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.count                                                        thrpt    5         5.000                 counts
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.time                                                         thrpt    5        25.000                     ms
[info] ExtractFieldsBenchmark.readJacksonScala                                                                 thrpt    5    793095.536 ±    52249.187   ops/s
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate                                                  thrpt    5       983.601 ±       64.821  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                             thrpt    5      1952.001 ±        0.001    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                      thrpt    5         0.055 ±        0.474  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                 thrpt    5         0.110 ±        0.951    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                            thrpt    5      1013.569 ±       27.462  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                       thrpt    5      2011.915 ±      135.374    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                     thrpt    5         1.066 ±        7.822  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                thrpt    5         2.160 ±       15.923    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.count                                                       thrpt    5        15.000                 counts
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.time                                                        thrpt    5        47.000                     ms
[info] ExtractFieldsBenchmark.readJsoniterScala                                                                thrpt    5   7378743.238 ±   337077.827   ops/s
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate                                                 thrpt    5       337.512 ±       15.419  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                            thrpt    5        72.000 ±        0.001    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                           thrpt    5       337.020 ±        0.060  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                      thrpt    5        71.903 ±        3.296    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.count                                                      thrpt    5         5.000                 counts
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.time                                                       thrpt    5        13.000                     ms
[info] ExtractFieldsBenchmark.readPlayJson                                                                     thrpt    5    268795.529 ±    10186.866   ops/s
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate                                                      thrpt    5      1486.356 ±       56.425  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                 thrpt    5      8704.002 ±        0.001    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                          thrpt    5         0.036 ±        0.240  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     thrpt    5         0.213 ±        1.428    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                thrpt    5      1492.385 ±      736.316  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                           thrpt    5      8737.799 ±     4237.069    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                         thrpt    5         1.066 ±        7.821  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                    thrpt    5         6.329 ±       46.573    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.count                                                           thrpt    5        22.000                 counts
[info] ExtractFieldsBenchmark.readPlayJson:·gc.time                                                            thrpt    5        44.000                     ms
[info] GoogleMapsAPIBenchmark.readCirce                                                                        thrpt    5      7049.608 ±      294.716   ops/s
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate                                                         thrpt    5      1696.725 ±       70.042  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm                                                    thrpt    5    378808.061 ±        0.013    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                             thrpt    5         0.095 ±        0.171  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        thrpt    5        21.050 ±       37.529    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                   thrpt    5      1699.582 ±       19.944  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                              thrpt    5    379487.583 ±    18937.696    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                            thrpt    5         0.799 ±        6.881  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                       thrpt    5       176.182 ±     1516.979    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.count                                                              thrpt    5        25.000                 counts
[info] GoogleMapsAPIBenchmark.readCirce:·gc.time                                                               thrpt    5        32.000                     ms
[info] GoogleMapsAPIBenchmark.readDslJsonJava                                                                  thrpt    5     11376.164 ±      178.220   ops/s
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate                                                   thrpt    5       262.207 ±        4.162  MB/sec
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                              thrpt    5     36280.036 ±        0.005    B/op
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                             thrpt    5       265.871 ±      572.339  MB/sec
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                        thrpt    5     36845.510 ±    79317.281    B/op
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space                                      thrpt    5         0.799 ±        5.560  MB/sec
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm                                 thrpt    5       110.811 ±      770.535    B/op
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.count                                                        thrpt    5         4.000                 counts
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.time                                                         thrpt    5        19.000                     ms
[info] GoogleMapsAPIBenchmark.readJacksonScala                                                                 thrpt    5     13062.904 ±       59.342   ops/s
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate                                                  thrpt    5       331.033 ±        1.423  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                                             thrpt    5     39888.032 ±        0.005    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                            thrpt    5       335.688 ±        0.119  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                       thrpt    5     40449.039 ±      181.320    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.count                                                       thrpt    5         5.000                 counts
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.time                                                        thrpt    5        24.000                     ms
[info] GoogleMapsAPIBenchmark.readJsoniterScala                                                                thrpt    5     24395.379 ±      380.899   ops/s
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                                 thrpt    5       428.734 ±        6.791  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                            thrpt    5     27664.018 ±        0.012    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                           thrpt    5       404.393 ±      580.207  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                      thrpt    5     26125.779 ±    38058.234    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count                                                      thrpt    5         6.000                 counts
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time                                                       thrpt    5        19.000                     ms
[info] GoogleMapsAPIBenchmark.readPlayJson                                                                     thrpt    5      2152.312 ±      137.996   ops/s
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate                                                      thrpt    5      1344.244 ±       86.233  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                                 thrpt    5    982977.851 ±       14.289    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                          thrpt    5         0.038 ±        0.097  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     thrpt    5        27.907 ±       70.273    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                thrpt    5      1355.625 ±       32.710  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                           thrpt    5    991444.074 ±    42143.275    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                         thrpt    5         0.933 ±        8.030  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                    thrpt    5       681.526 ±     5868.142    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.count                                                           thrpt    5        20.000                 counts
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.time                                                            thrpt    5        45.000                     ms
[info] GoogleMapsAPIBenchmark.writeCirce                                                                       thrpt    5      7041.111 ±      416.743   ops/s
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate                                                        thrpt    5      1546.820 ±       91.514  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm                                                   thrpt    5    345800.059 ±        0.009    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                            thrpt    5         0.067 ±        0.104  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       thrpt    5        14.951 ±       22.858    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                  thrpt    5      1562.373 ±      707.328  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                             thrpt    5    349638.847 ±   170522.957    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                           thrpt    5         0.799 ±        6.881  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                      thrpt    5       179.551 ±     1545.986    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.count                                                             thrpt    5        23.000                 counts
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.time                                                              thrpt    5        42.000                     ms
[info] GoogleMapsAPIBenchmark.writeDslJsonJava                                                                 thrpt    5     50703.883 ±     2388.068   ops/s
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate                                                  thrpt    5       473.961 ±       22.133  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                             thrpt    5     14712.008 ±        0.001    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                            thrpt    5       466.952 ±      702.323  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                       thrpt    5     14522.545 ±    22179.085    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space                                     thrpt    5         0.266 ±        1.405  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space.norm                                thrpt    5         8.324 ±       43.890    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.count                                                       thrpt    5         7.000                 counts
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.time                                                        thrpt    5        35.000                     ms
[info] GoogleMapsAPIBenchmark.writeDslJsonJavaPrealloc                                                         thrpt    5     52869.239 ±     2349.324   ops/s
[info] GoogleMapsAPIBenchmark.writeDslJsonJavaPrealloc:·gc.alloc.rate                                          thrpt    5        96.738 ±        4.346  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJavaPrealloc:·gc.alloc.rate.norm                                     thrpt    5      2880.008 ±        0.001    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJavaPrealloc:·gc.churn.G1_Old_Gen                                    thrpt    5       132.394 ±      698.079  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJavaPrealloc:·gc.churn.G1_Old_Gen.norm                               thrpt    5      3897.836 ±    20552.718    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJavaPrealloc:·gc.churn.G1_Survivor_Space                             thrpt    5         0.533 ±        4.588  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJavaPrealloc:·gc.churn.G1_Survivor_Space.norm                        thrpt    5        15.806 ±      136.098    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJavaPrealloc:·gc.count                                               thrpt    5         2.000                 counts
[info] GoogleMapsAPIBenchmark.writeDslJsonJavaPrealloc:·gc.time                                                thrpt    5        11.000                     ms
[info] GoogleMapsAPIBenchmark.writeJacksonScala                                                                thrpt    5     37321.432 ±      621.454   ops/s
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                                 thrpt    5       540.834 ±        8.809  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                            thrpt    5     22807.862 ±        0.299    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                           thrpt    5       537.178 ±      708.283  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                      thrpt    5     22663.794 ±    29992.144    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count                                                      thrpt    5         8.000                 counts
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time                                                       thrpt    5        38.000                     ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScala                                                               thrpt    5     58592.067 ±     1393.373   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                                thrpt    5       442.508 ±       10.554  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                           thrpt    5     11888.007 ±        0.001    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                          thrpt    5       470.889 ±      709.327  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                     thrpt    5     12675.190 ±    19398.923    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count                                                     thrpt    5         7.000                 counts
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time                                                      thrpt    5        28.000                     ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc                                                       thrpt    5     75158.849 ±      458.694   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                        thrpt    5         1.146 ±        0.006  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                   thrpt    5        24.005 ±        0.001    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                                             thrpt    5           ≈ 0                 counts
[info] GoogleMapsAPIBenchmark.writePlayJson                                                                    thrpt    5      5081.890 ±      158.035   ops/s
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate                                                     thrpt    5      1537.276 ±       47.626  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm                                                thrpt    5    476071.918 ±        1.709    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                         thrpt    5         0.062 ±        0.165  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    thrpt    5        19.129 ±       50.698    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                               thrpt    5      1560.867 ±      702.311  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                          thrpt    5    483370.571 ±   216741.201    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                        thrpt    5         0.932 ±        6.687  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                   thrpt    5       290.935 ±     2089.340    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.count                                                          thrpt    5        23.000                 counts
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.time                                                           thrpt    5        49.000                     ms
[info] IntAndLongMapsBenchmark.readJsoniterScala                                                               thrpt    5   5104482.265 ±   292507.207   ops/s
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.alloc.rate                                                thrpt    5      1530.665 ±       87.226  MB/sec
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                           thrpt    5       472.000 ±        0.001    B/op
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                    thrpt    5         0.026 ±        0.137  MB/sec
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               thrpt    5         0.008 ±        0.042    B/op
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                          thrpt    5      1495.620 ±      725.546  MB/sec
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                     thrpt    5       461.153 ±      220.087    B/op
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.666 ±        5.734  MB/sec
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                              thrpt    5         0.201 ±        1.732    B/op
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.count                                                     thrpt    5        22.000                 counts
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.time                                                      thrpt    5        27.000                     ms
[info] IntAndLongMapsBenchmark.readPlayJson                                                                    thrpt    5    321837.901 ±    17412.599   ops/s
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.alloc.rate                                                     thrpt    5      1784.556 ±       97.068  MB/sec
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                thrpt    5      8728.001 ±        0.001    B/op
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                         thrpt    5         0.017 ±        0.085  MB/sec
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    thrpt    5         0.085 ±        0.422    B/op
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                               thrpt    5      1767.314 ±      592.726  MB/sec
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                          thrpt    5      8638.551 ±     2516.348    B/op
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                        thrpt    5         0.932 ±        8.028  MB/sec
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                   thrpt    5         4.628 ±       39.844    B/op
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.count                                                          thrpt    5        26.000                 counts
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.time                                                           thrpt    5        37.000                     ms
[info] IntAndLongMapsBenchmark.writeJsoniterScala                                                              thrpt    5   3164750.436 ±   298464.453   ops/s
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.alloc.rate                                               thrpt    5       514.682 ±       48.617  MB/sec
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                          thrpt    5       256.000 ±        0.001    B/op
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                         thrpt    5       538.150 ±      709.392  MB/sec
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                    thrpt    5       266.563 ±      338.522    B/op
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.count                                                    thrpt    5         8.000                 counts
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.time                                                     thrpt    5        26.000                     ms
[info] IntAndLongMapsBenchmark.writePlayJson                                                                   thrpt    5    358818.317 ±     9241.294   ops/s
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.alloc.rate                                                    thrpt    5      1380.695 ±       36.076  MB/sec
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.alloc.rate.norm                                               thrpt    5      6056.001 ±        0.001    B/op
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                        thrpt    5         0.041 ±        0.255  MB/sec
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   thrpt    5         0.179 ±        1.122    B/op
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                              thrpt    5      1423.170 ±      571.475  MB/sec
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                         thrpt    5      6243.243 ±     2549.050    B/op
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                       thrpt    5         1.066 ±        9.178  MB/sec
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                  thrpt    5         4.688 ±       40.364    B/op
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.count                                                         thrpt    5        21.000                 counts
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.time                                                          thrpt    5        47.000                     ms
[info] IntBenchmark.readCirce                                                                                  thrpt    5   6808377.978 ±   100379.368   ops/s
[info] IntBenchmark.readCirce:·gc.alloc.rate                                                                   thrpt    5      4222.194 ±       61.922  MB/sec
[info] IntBenchmark.readCirce:·gc.alloc.rate.norm                                                              thrpt    5       976.000 ±        0.001    B/op
[info] IntBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                       thrpt    5         0.004 ±        0.004  MB/sec
[info] IntBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                  thrpt    5         0.001 ±        0.001    B/op
[info] IntBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                             thrpt    5      4221.009 ±      717.929  MB/sec
[info] IntBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                        thrpt    5       975.751 ±      168.054    B/op
[info] IntBenchmark.readCirce:·gc.count                                                                        thrpt    5        62.000                 counts
[info] IntBenchmark.readCirce:·gc.time                                                                         thrpt    5        53.000                     ms
[info] IntBenchmark.readDslJsonJava                                                                            thrpt    5  38603755.263 ±  2114058.893   ops/s
[info] IntBenchmark.readDslJsonJava:·gc.alloc.rate                                                             thrpt    5       392.431 ±       21.588  MB/sec
[info] IntBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                        thrpt    5        16.000 ±        0.001    B/op
[info] IntBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                                       thrpt    5       400.199 ±      573.854  MB/sec
[info] IntBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                  thrpt    5        16.293 ±       22.894    B/op
[info] IntBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space                                                thrpt    5         0.266 ±        1.405  MB/sec
[info] IntBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm                                           thrpt    5         0.011 ±        0.057    B/op
[info] IntBenchmark.readDslJsonJava:·gc.count                                                                  thrpt    5         6.000                 counts
[info] IntBenchmark.readDslJsonJava:·gc.time                                                                   thrpt    5        30.000                     ms
[info] IntBenchmark.readJacksonScala                                                                           thrpt    5   7210780.122 ±   137606.452   ops/s
[info] IntBenchmark.readJacksonScala:·gc.alloc.rate                                                            thrpt    5      2712.246 ±       52.380  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                       thrpt    5       592.000 ±        0.001    B/op
[info] IntBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                                thrpt    5         0.002 ±        0.003  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           thrpt    5        ≈ 10⁻³                   B/op
[info] IntBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                      thrpt    5      2723.149 ±        1.561  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                 thrpt    5       594.392 ±       11.395    B/op
[info] IntBenchmark.readJacksonScala:·gc.count                                                                 thrpt    5        40.000                 counts
[info] IntBenchmark.readJacksonScala:·gc.time                                                                  thrpt    5        35.000                     ms
[info] IntBenchmark.readJsoniterScala                                                                          thrpt    5  37259052.922 ±   222050.865   ops/s
[info] IntBenchmark.readJsoniterScala:·gc.alloc.rate                                                           thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] IntBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                      thrpt    5        ≈ 10⁻⁵                   B/op
[info] IntBenchmark.readJsoniterScala:·gc.count                                                                thrpt    5           ≈ 0                 counts
[info] IntBenchmark.readNaiveScala                                                                             thrpt    5  26281425.408 ±   717979.130   ops/s
[info] IntBenchmark.readNaiveScala:·gc.alloc.rate                                                              thrpt    5      1335.818 ±       37.034  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.alloc.rate.norm                                                         thrpt    5        80.000 ±        0.001    B/op
[info] IntBenchmark.readNaiveScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                                  thrpt    5         0.022 ±        0.186  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                             thrpt    5         0.001 ±        0.011    B/op
[info] IntBenchmark.readNaiveScala:·gc.churn.G1_Old_Gen                                                        thrpt    5      1290.104 ±      578.617  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.churn.G1_Old_Gen.norm                                                   thrpt    5        77.289 ±       35.517    B/op
[info] IntBenchmark.readNaiveScala:·gc.churn.G1_Survivor_Space                                                 thrpt    5         0.666 ±        5.735  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.churn.G1_Survivor_Space.norm                                            thrpt    5         0.040 ±        0.346    B/op
[info] IntBenchmark.readNaiveScala:·gc.count                                                                   thrpt    5        19.000                 counts
[info] IntBenchmark.readNaiveScala:·gc.time                                                                    thrpt    5        26.000                     ms
[info] IntBenchmark.readPlayJson                                                                               thrpt    5   6079179.943 ±   202340.997   ops/s
[info] IntBenchmark.readPlayJson:·gc.alloc.rate                                                                thrpt    5      2935.366 ±       99.184  MB/sec
[info] IntBenchmark.readPlayJson:·gc.alloc.rate.norm                                                           thrpt    5       760.000 ±        0.001    B/op
[info] IntBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                    thrpt    5         0.001 ±        0.003  MB/sec
[info] IntBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                               thrpt    5        ≈ 10⁻⁴                   B/op
[info] IntBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                          thrpt    5      2926.923 ±      716.305  MB/sec
[info] IntBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                     thrpt    5       758.039 ±      199.788    B/op
[info] IntBenchmark.readPlayJson:·gc.count                                                                     thrpt    5        43.000                 counts
[info] IntBenchmark.readPlayJson:·gc.time                                                                      thrpt    5        36.000                     ms
[info] IntBenchmark.writeCirce                                                                                 thrpt    5  19803060.031 ±   500140.543   ops/s
[info] IntBenchmark.writeCirce:·gc.alloc.rate                                                                  thrpt    5      2314.880 ±       58.456  MB/sec
[info] IntBenchmark.writeCirce:·gc.alloc.rate.norm                                                             thrpt    5       184.000 ±        0.001    B/op
[info] IntBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                      thrpt    5         0.018 ±        0.145  MB/sec
[info] IntBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                 thrpt    5         0.001 ±        0.011    B/op
[info] IntBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                            thrpt    5      2314.402 ±      586.038  MB/sec
[info] IntBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                       thrpt    5       183.934 ±       44.477    B/op
[info] IntBenchmark.writeCirce:·gc.count                                                                       thrpt    5        34.000                 counts
[info] IntBenchmark.writeCirce:·gc.time                                                                        thrpt    5        28.000                     ms
[info] IntBenchmark.writeDslJsonJava                                                                           thrpt    5  54092543.829 ±  2659601.083   ops/s
[info] IntBenchmark.writeDslJsonJava:·gc.alloc.rate                                                            thrpt    5      1649.697 ±       80.440  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                       thrpt    5        48.000 ±        0.001    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'                                thrpt    5         0.120 ±        1.031  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           thrpt    5         0.003 ±        0.030    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                                      thrpt    5      1693.437 ±       54.786  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                 thrpt    5        49.275 ±        1.014    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space                                               thrpt    5         1.332 ±       11.472  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space.norm                                          thrpt    5         0.039 ±        0.332    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.count                                                                 thrpt    5        25.000                 counts
[info] IntBenchmark.writeDslJsonJava:·gc.time                                                                  thrpt    5        51.000                     ms
[info] IntBenchmark.writeDslJsonJavaPrealloc                                                                   thrpt    5  70710026.125 ±  9016038.516   ops/s
[info] IntBenchmark.writeDslJsonJavaPrealloc:·gc.alloc.rate                                                    thrpt    5       718.848 ±       91.530  MB/sec
[info] IntBenchmark.writeDslJsonJavaPrealloc:·gc.alloc.rate.norm                                               thrpt    5        16.000 ±        0.001    B/op
[info] IntBenchmark.writeDslJsonJavaPrealloc:·gc.churn.G1_Old_Gen                                              thrpt    5       734.095 ±      575.154  MB/sec
[info] IntBenchmark.writeDslJsonJavaPrealloc:·gc.churn.G1_Old_Gen.norm                                         thrpt    5        16.368 ±       13.380    B/op
[info] IntBenchmark.writeDslJsonJavaPrealloc:·gc.churn.G1_Survivor_Space                                       thrpt    5         0.133 ±        1.147  MB/sec
[info] IntBenchmark.writeDslJsonJavaPrealloc:·gc.churn.G1_Survivor_Space.norm                                  thrpt    5         0.003 ±        0.026    B/op
[info] IntBenchmark.writeDslJsonJavaPrealloc:·gc.count                                                         thrpt    5        11.000                 counts
[info] IntBenchmark.writeDslJsonJavaPrealloc:·gc.time                                                          thrpt    5        54.000                     ms
[info] IntBenchmark.writeJacksonScala                                                                          thrpt    5  11171731.697 ±   766675.349   ops/s
[info] IntBenchmark.writeJacksonScala:·gc.alloc.rate                                                           thrpt    5      2214.847 ±      151.528  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                      thrpt    5       312.000 ±        0.001    B/op
[info] IntBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                               thrpt    5         0.047 ±        0.385  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                          thrpt    5         0.007 ±        0.054    B/op
[info] IntBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                     thrpt    5      2178.743 ±      718.824  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                                thrpt    5       307.009 ±      104.569    B/op
[info] IntBenchmark.writeJacksonScala:·gc.count                                                                thrpt    5        32.000                 counts
[info] IntBenchmark.writeJacksonScala:·gc.time                                                                 thrpt    5        30.000                     ms
[info] IntBenchmark.writeJsoniterScala                                                                         thrpt    5  42380355.928 ± 16225521.172   ops/s
[info] IntBenchmark.writeJsoniterScala:·gc.alloc.rate                                                          thrpt    5       861.630 ±      330.063  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                     thrpt    5        32.000 ±        0.001    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                              thrpt    5         0.037 ±        0.205  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         thrpt    5         0.002 ±        0.009    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                    thrpt    5       877.781 ±      713.775  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                               thrpt    5        32.825 ±       29.287    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                             thrpt    5         0.799 ±        6.882  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                        thrpt    5         0.033 ±        0.282    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.count                                                               thrpt    5        13.000                 counts
[info] IntBenchmark.writeJsoniterScala:·gc.time                                                                thrpt    5        33.000                     ms
[info] IntBenchmark.writeJsoniterScalaPrealloc                                                                 thrpt    5  48209401.864 ±   161235.875   ops/s
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                             thrpt    5        ≈ 10⁻⁵                   B/op
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                       thrpt    5           ≈ 0                 counts
[info] IntBenchmark.writeNaiveScala                                                                            thrpt    5  33021478.942 ±  2135954.789   ops/s
[info] IntBenchmark.writeNaiveScala:·gc.alloc.rate                                                             thrpt    5      2517.329 ±      162.590  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.alloc.rate.norm                                                        thrpt    5       120.000 ±        0.001    B/op
[info] IntBenchmark.writeNaiveScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                                 thrpt    5         0.002 ±        0.007  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                            thrpt    5        ≈ 10⁻⁴                   B/op
[info] IntBenchmark.writeNaiveScala:·gc.churn.G1_Old_Gen                                                       thrpt    5      2518.528 ±      718.040  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.churn.G1_Old_Gen.norm                                                  thrpt    5       120.019 ±       30.499    B/op
[info] IntBenchmark.writeNaiveScala:·gc.count                                                                  thrpt    5        37.000                 counts
[info] IntBenchmark.writeNaiveScala:·gc.time                                                                   thrpt    5        29.000                     ms
[info] IntBenchmark.writePlayJson                                                                              thrpt    5   2127741.375 ±   100409.936   ops/s
[info] IntBenchmark.writePlayJson:·gc.alloc.rate                                                               thrpt    5      1741.307 ±       80.756  MB/sec
[info] IntBenchmark.writePlayJson:·gc.alloc.rate.norm                                                          thrpt    5      1288.000 ±        0.001    B/op
[info] IntBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   thrpt    5         0.028 ±        0.227  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              thrpt    5         0.021 ±        0.167    B/op
[info] IntBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                         thrpt    5      1767.675 ±      590.580  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                    thrpt    5      1306.733 ±      380.826    B/op
[info] IntBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                  thrpt    5         0.799 ±        6.882  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                             thrpt    5         0.588 ±        5.063    B/op
[info] IntBenchmark.writePlayJson:·gc.count                                                                    thrpt    5        26.000                 counts
[info] IntBenchmark.writePlayJson:·gc.time                                                                     thrpt    5        31.000                     ms
[info] IterablesBenchmark.readCirce                                                                            thrpt    5    582203.617 ±    23951.894   ops/s
[info] IterablesBenchmark.readCirce:·gc.alloc.rate                                                             thrpt    5      2112.925 ±       86.260  MB/sec
[info] IterablesBenchmark.readCirce:·gc.alloc.rate.norm                                                        thrpt    5      5712.001 ±        0.001    B/op
[info] IterablesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                 thrpt    5         0.023 ±        0.176  MB/sec
[info] IterablesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                            thrpt    5         0.062 ±        0.481    B/op
[info] IterablesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                       thrpt    5      2110.402 ±      586.455  MB/sec
[info] IterablesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                  thrpt    5      5707.187 ±     1707.035    B/op
[info] IterablesBenchmark.readCirce:·gc.count                                                                  thrpt    5        31.000                 counts
[info] IterablesBenchmark.readCirce:·gc.time                                                                   thrpt    5        35.000                     ms
[info] IterablesBenchmark.readJacksonScala                                                                     thrpt    5    574786.757 ±    11597.435   ops/s
[info] IterablesBenchmark.readJacksonScala:·gc.alloc.rate                                                      thrpt    5       668.985 ±       13.417  MB/sec
[info] IterablesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                 thrpt    5      1832.001 ±        0.001    B/op
[info] IterablesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                thrpt    5       671.385 ±        0.177  MB/sec
[info] IterablesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                           thrpt    5      1838.610 ±       36.972    B/op
[info] IterablesBenchmark.readJacksonScala:·gc.count                                                           thrpt    5        10.000                 counts
[info] IterablesBenchmark.readJacksonScala:·gc.time                                                            thrpt    5        49.000                     ms
[info] IterablesBenchmark.readJsoniterScala                                                                    thrpt    5   3716556.367 ±   104679.697   ops/s
[info] IterablesBenchmark.readJsoniterScala:·gc.alloc.rate                                                     thrpt    5      1473.481 ±       41.855  MB/sec
[info] IterablesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                thrpt    5       624.000 ±        0.001    B/op
[info] IterablesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                         thrpt    5         0.023 ±        0.193  MB/sec
[info] IterablesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    thrpt    5         0.010 ±        0.082    B/op
[info] IterablesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                               thrpt    5      1426.960 ±      592.087  MB/sec
[info] IterablesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                          thrpt    5       604.545 ±      262.357    B/op
[info] IterablesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                        thrpt    5         0.666 ±        5.735  MB/sec
[info] IterablesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                   thrpt    5         0.283 ±        2.433    B/op
[info] IterablesBenchmark.readJsoniterScala:·gc.count                                                          thrpt    5        21.000                 counts
[info] IterablesBenchmark.readJsoniterScala:·gc.time                                                           thrpt    5        27.000                     ms
[info] IterablesBenchmark.readPlayJson                                                                         thrpt    5    223065.772 ±     2748.246   ops/s
[info] IterablesBenchmark.readPlayJson:·gc.alloc.rate                                                          thrpt    5      1558.188 ±       19.446  MB/sec
[info] IterablesBenchmark.readPlayJson:·gc.alloc.rate.norm                                                     thrpt    5     10992.002 ±        0.001    B/op
[info] IterablesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                              thrpt    5         0.015 ±        0.122  MB/sec
[info] IterablesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         thrpt    5         0.104 ±        0.865    B/op
[info] IterablesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                    thrpt    5      1560.529 ±      707.344  MB/sec
[info] IterablesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                               thrpt    5     11007.112 ±     4931.696    B/op
[info] IterablesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                             thrpt    5         0.933 ±        8.031  MB/sec
[info] IterablesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                        thrpt    5         6.590 ±       56.744    B/op
[info] IterablesBenchmark.readPlayJson:·gc.count                                                               thrpt    5        23.000                 counts
[info] IterablesBenchmark.readPlayJson:·gc.time                                                                thrpt    5        46.000                     ms
[info] IterablesBenchmark.writeCirce                                                                           thrpt    5    827998.762 ±    48284.313   ops/s
[info] IterablesBenchmark.writeCirce:·gc.alloc.rate                                                            thrpt    5      1902.276 ±      110.607  MB/sec
[info] IterablesBenchmark.writeCirce:·gc.alloc.rate.norm                                                       thrpt    5      3616.001 ±        0.001    B/op
[info] IterablesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                thrpt    5         0.037 ±        0.304  MB/sec
[info] IterablesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           thrpt    5         0.072 ±        0.593    B/op
[info] IterablesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                      thrpt    5      1904.807 ±      712.740  MB/sec
[info] IterablesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                 thrpt    5      3624.514 ±     1508.099    B/op
[info] IterablesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                               thrpt    5         0.666 ±        5.736  MB/sec
[info] IterablesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                          thrpt    5         1.298 ±       11.172    B/op
[info] IterablesBenchmark.writeCirce:·gc.count                                                                 thrpt    5        28.000                 counts
[info] IterablesBenchmark.writeCirce:·gc.time                                                                  thrpt    5        33.000                     ms
[info] IterablesBenchmark.writeJacksonScala                                                                    thrpt    5   1265965.264 ±    58789.457   ops/s
[info] IterablesBenchmark.writeJacksonScala:·gc.alloc.rate                                                     thrpt    5       855.832 ±       39.984  MB/sec
[info] IterablesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                thrpt    5      1064.000 ±        0.001    B/op
[info] IterablesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                         thrpt    5         0.016 ±        0.135  MB/sec
[info] IterablesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    thrpt    5         0.019 ±        0.167    B/op
[info] IterablesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                               thrpt    5       875.428 ±      701.994  MB/sec
[info] IterablesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                          thrpt    5      1089.837 ±      902.762    B/op
[info] IterablesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                        thrpt    5         1.066 ±        7.822  MB/sec
[info] IterablesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                   thrpt    5         1.324 ±        9.727    B/op
[info] IterablesBenchmark.writeJacksonScala:·gc.count                                                          thrpt    5        13.000                 counts
[info] IterablesBenchmark.writeJacksonScala:·gc.time                                                           thrpt    5        52.000                     ms
[info] IterablesBenchmark.writeJsoniterScala                                                                   thrpt    5   6690392.820 ±   214071.665   ops/s
[info] IterablesBenchmark.writeJsoniterScala:·gc.alloc.rate                                                    thrpt    5       748.188 ±       24.094  MB/sec
[info] IterablesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                               thrpt    5       176.000 ±        0.001    B/op
[info] IterablesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                        thrpt    5         0.013 ±        0.108  MB/sec
[info] IterablesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   thrpt    5         0.003 ±        0.026    B/op
[info] IterablesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                              thrpt    5       741.043 ±      577.644  MB/sec
[info] IterablesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                         thrpt    5       174.407 ±      138.307    B/op
[info] IterablesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                       thrpt    5         0.932 ±        6.688  MB/sec
[info] IterablesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                  thrpt    5         0.221 ±        1.592    B/op
[info] IterablesBenchmark.writeJsoniterScala:·gc.count                                                         thrpt    5        11.000                 counts
[info] IterablesBenchmark.writeJsoniterScala:·gc.time                                                          thrpt    5        34.000                     ms
[info] IterablesBenchmark.writePlayJson                                                                        thrpt    5    490224.478 ±    21782.050   ops/s
[info] IterablesBenchmark.writePlayJson:·gc.alloc.rate                                                         thrpt    5      1661.886 ±       73.329  MB/sec
[info] IterablesBenchmark.writePlayJson:·gc.alloc.rate.norm                                                    thrpt    5      5336.001 ±        0.001    B/op
[info] IterablesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                             thrpt    5         0.020 ±        0.158  MB/sec
[info] IterablesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        thrpt    5         0.062 ±        0.500    B/op
[info] IterablesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                   thrpt    5      1630.020 ±      579.299  MB/sec
[info] IterablesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                              thrpt    5      5237.001 ±     1996.102    B/op
[info] IterablesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                            thrpt    5         1.066 ±        9.178  MB/sec
[info] IterablesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                       thrpt    5         3.423 ±       29.475    B/op
[info] IterablesBenchmark.writePlayJson:·gc.count                                                              thrpt    5        24.000                 counts
[info] IterablesBenchmark.writePlayJson:·gc.time                                                               thrpt    5        47.000                     ms
[info] MapsBenchmark.readCirce                                                                                 thrpt    5    598848.726 ±    19567.524   ops/s
[info] MapsBenchmark.readCirce:·gc.alloc.rate                                                                  thrpt    5      2081.916 ±       66.975  MB/sec
[info] MapsBenchmark.readCirce:·gc.alloc.rate.norm                                                             thrpt    5      5472.001 ±        0.001    B/op
[info] MapsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                      thrpt    5         0.017 ±        0.116  MB/sec
[info] MapsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                 thrpt    5         0.045 ±        0.310    B/op
[info] MapsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                            thrpt    5      2109.615 ±      587.282  MB/sec
[info] MapsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                       thrpt    5      5544.809 ±     1531.189    B/op
[info] MapsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                     thrpt    5         0.666 ±        5.737  MB/sec
[info] MapsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                                thrpt    5         1.774 ±       15.277    B/op
[info] MapsBenchmark.readCirce:·gc.count                                                                       thrpt    5        31.000                 counts
[info] MapsBenchmark.readCirce:·gc.time                                                                        thrpt    5        29.000                     ms
[info] MapsBenchmark.readJacksonScala                                                                          thrpt    5    583471.444 ±    10525.452   ops/s
[info] MapsBenchmark.readJacksonScala:·gc.alloc.rate                                                           thrpt    5       901.464 ±       16.137  MB/sec
[info] MapsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                      thrpt    5      2432.001 ±        0.001    B/op
[info] MapsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                               thrpt    5         0.050 ±        0.432  MB/sec
[info] MapsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                          thrpt    5         0.136 ±        1.172    B/op
[info] MapsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                     thrpt    5       943.507 ±      586.222  MB/sec
[info] MapsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                thrpt    5      2546.438 ±     1605.027    B/op
[info] MapsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                              thrpt    5         0.933 ±        8.029  MB/sec
[info] MapsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                         thrpt    5         2.526 ±       21.746    B/op
[info] MapsBenchmark.readJacksonScala:·gc.count                                                                thrpt    5        14.000                 counts
[info] MapsBenchmark.readJacksonScala:·gc.time                                                                 thrpt    5        53.000                     ms
[info] MapsBenchmark.readJsoniterScala                                                                         thrpt    5   3806726.418 ±   105448.423   ops/s
[info] MapsBenchmark.readJsoniterScala:·gc.alloc.rate                                                          thrpt    5       948.061 ±       26.038  MB/sec
[info] MapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                     thrpt    5       392.000 ±        0.001    B/op
[info] MapsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                              thrpt    5         0.012 ±        0.100  MB/sec
[info] MapsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         thrpt    5         0.005 ±        0.041    B/op
[info] MapsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                    thrpt    5       948.373 ±      590.661  MB/sec
[info] MapsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                               thrpt    5       392.383 ±      249.914    B/op
[info] MapsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                             thrpt    5         0.666 ±        5.736  MB/sec
[info] MapsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                        thrpt    5         0.279 ±        2.398    B/op
[info] MapsBenchmark.readJsoniterScala:·gc.count                                                               thrpt    5        14.000                 counts
[info] MapsBenchmark.readJsoniterScala:·gc.time                                                                thrpt    5        28.000                     ms
[info] MapsBenchmark.readPlayJson                                                                              thrpt    5    330236.729 ±    10686.155   ops/s
[info] MapsBenchmark.readPlayJson:·gc.alloc.rate                                                               thrpt    5      1844.932 ±       58.701  MB/sec
[info] MapsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                          thrpt    5      8792.001 ±        0.001    B/op
[info] MapsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   thrpt    5         0.014 ±        0.074  MB/sec
[info] MapsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              thrpt    5         0.066 ±        0.353    B/op
[info] MapsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                         thrpt    5      1835.641 ±      727.708  MB/sec
[info] MapsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                    thrpt    5      8747.774 ±     3459.675    B/op
[info] MapsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                  thrpt    5         1.066 ±        9.180  MB/sec
[info] MapsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                             thrpt    5         5.135 ±       44.210    B/op
[info] MapsBenchmark.readPlayJson:·gc.count                                                                    thrpt    5        27.000                 counts
[info] MapsBenchmark.readPlayJson:·gc.time                                                                     thrpt    5        37.000                     ms
[info] MapsBenchmark.writeCirce                                                                                thrpt    5    444892.233 ±    11270.129   ops/s
[info] MapsBenchmark.writeCirce:·gc.alloc.rate                                                                 thrpt    5      1141.933 ±       28.819  MB/sec
[info] MapsBenchmark.writeCirce:·gc.alloc.rate.norm                                                            thrpt    5      4040.001 ±        0.001    B/op
[info] MapsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                     thrpt    5         0.030 ±        0.227  MB/sec
[info] MapsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                thrpt    5         0.108 ±        0.808    B/op
[info] MapsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                           thrpt    5      1151.946 ±      713.135  MB/sec
[info] MapsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                      thrpt    5      4077.271 ±     2578.206    B/op
[info] MapsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                    thrpt    5         0.666 ±        5.737  MB/sec
[info] MapsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                               thrpt    5         2.373 ±       20.436    B/op
[info] MapsBenchmark.writeCirce:·gc.count                                                                      thrpt    5        17.000                 counts
[info] MapsBenchmark.writeCirce:·gc.time                                                                       thrpt    5        36.000                     ms
[info] MapsBenchmark.writeJsoniterScala                                                                        thrpt    5   3283359.988 ±   236591.943   ops/s
[info] MapsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                         thrpt    5       700.923 ±       50.668  MB/sec
[info] MapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                    thrpt    5       336.000 ±        0.001    B/op
[info] MapsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                   thrpt    5       740.036 ±      579.161  MB/sec
[info] MapsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                              thrpt    5       354.450 ±      266.531    B/op
[info] MapsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                            thrpt    5         0.799 ±        6.882  MB/sec
[info] MapsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                       thrpt    5         0.391 ±        3.370    B/op
[info] MapsBenchmark.writeJsoniterScala:·gc.count                                                              thrpt    5        11.000                 counts
[info] MapsBenchmark.writeJsoniterScala:·gc.time                                                               thrpt    5        36.000                     ms
[info] MapsBenchmark.writePlayJson                                                                             thrpt    5    355739.100 ±     9442.770   ops/s
[info] MapsBenchmark.writePlayJson:·gc.alloc.rate                                                              thrpt    5      1285.738 ±       34.289  MB/sec
[info] MapsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                         thrpt    5      5688.001 ±        0.001    B/op
[info] MapsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                  thrpt    5         0.038 ±        0.322  MB/sec
[info] MapsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                             thrpt    5         0.167 ±        1.419    B/op
[info] MapsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                        thrpt    5      1287.101 ±      602.342  MB/sec
[info] MapsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                   thrpt    5      5691.859 ±     2587.135    B/op
[info] MapsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                 thrpt    5         1.066 ±        6.437  MB/sec
[info] MapsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                            thrpt    5         4.742 ±       28.692    B/op
[info] MapsBenchmark.writePlayJson:·gc.count                                                                   thrpt    5        19.000                 counts
[info] MapsBenchmark.writePlayJson:·gc.time                                                                    thrpt    5        45.000                     ms
[info] MissingReqFieldBenchmark.readCirce                                                                      thrpt    5   2095802.313 ±    86222.559   ops/s
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate                                                       thrpt    5      2982.855 ±      121.596  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm                                                  thrpt    5      2240.000 ±        0.001    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                           thrpt    5         0.002 ±        0.007  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      thrpt    5         0.002 ±        0.005    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                 thrpt    5      2995.538 ±      586.662  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                            thrpt    5      2249.357 ±      417.219    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.count                                                            thrpt    5        44.000                 counts
[info] MissingReqFieldBenchmark.readCirce:·gc.time                                                             thrpt    5        36.000                     ms
[info] MissingReqFieldBenchmark.readDslJsonJava                                                                thrpt    5    769227.939 ±    27460.277   ops/s
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate                                                 thrpt    5       363.630 ±       12.822  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                            thrpt    5       744.001 ±        0.001    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                           thrpt    5       333.609 ±        1.203  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                      thrpt    5       682.624 ±       25.053    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space                                    thrpt    5         0.133 ±        1.147  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm                               thrpt    5         0.272 ±        2.343    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.count                                                      thrpt    5         5.000                 counts
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.time                                                       thrpt    5        25.000                     ms
[info] MissingReqFieldBenchmark.readJacksonScala                                                               thrpt    5    275704.808 ±     3284.895   ops/s
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate                                                thrpt    5       504.501 ±        5.927  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm                                           thrpt    5      2880.002 ±        0.001    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                          thrpt    5       470.432 ±      707.997  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                     thrpt    5      2686.182 ±     4050.913    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.266 ±        1.405  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                              thrpt    5         1.522 ±        8.028    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.count                                                     thrpt    5         7.000                 counts
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.time                                                      thrpt    5        32.000                     ms
[info] MissingReqFieldBenchmark.readJsoniterScala                                                              thrpt    5    680793.244 ±    20425.848   ops/s
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate                                               thrpt    5       429.031 ±       12.911  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                          thrpt    5       992.001 ±        0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                         thrpt    5       471.827 ±      710.824  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                    thrpt    5      1092.563 ±     1665.947    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.count                                                    thrpt    5         7.000                 counts
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.time                                                     thrpt    5        19.000                     ms
[info] MissingReqFieldBenchmark.readJsoniterStackless                                                          thrpt    5   3465324.528 ±   134382.823   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate                                           thrpt    5      1109.657 ±       43.078  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm                                      thrpt    5       504.000 ±        0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.CodeHeap_'non-profiled_nmethods'               thrpt    5         0.021 ±        0.176  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm          thrpt    5         0.010 ±        0.081    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.G1_Old_Gen                                     thrpt    5      1084.582 ±      567.798  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.G1_Old_Gen.norm                                thrpt    5       492.490 ±      251.598    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.G1_Survivor_Space                              thrpt    5         0.666 ±        5.736  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.G1_Survivor_Space.norm                         thrpt    5         0.301 ±        2.590    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.count                                                thrpt    5        16.000                 counts
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.time                                                 thrpt    5        30.000                     ms
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump                                                    thrpt    5   6989485.819 ±    93981.560   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate                                     thrpt    5       568.329 ±        7.447  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm                                thrpt    5       128.000 ±        0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.G1_Old_Gen                               thrpt    5       606.607 ±      580.396  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.G1_Old_Gen.norm                          thrpt    5       136.659 ±      131.201    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count                                          thrpt    5         9.000                 counts
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time                                           thrpt    5        24.000                     ms
[info] MissingReqFieldBenchmark.readPlayJson                                                                   thrpt    5    174495.806 ±     5555.798   ops/s
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate                                                    thrpt    5      1167.271 ±       36.879  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm                                               thrpt    5     10528.002 ±        0.001    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                        thrpt    5         0.013 ±        0.074  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   thrpt    5         0.122 ±        0.667    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                              thrpt    5      1149.919 ±      712.399  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                         thrpt    5     10370.930 ±     6396.770    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                       thrpt    5         0.933 ±        8.031  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                  thrpt    5         8.441 ±       72.682    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.count                                                         thrpt    5        17.000                 counts
[info] MissingReqFieldBenchmark.readPlayJson:·gc.time                                                          thrpt    5        49.000                     ms
[info] MutableIterablesBenchmark.readCirce                                                                     thrpt    5    668123.046 ±    28940.086   ops/s
[info] MutableIterablesBenchmark.readCirce:·gc.alloc.rate                                                      thrpt    5      2563.814 ±      111.997  MB/sec
[info] MutableIterablesBenchmark.readCirce:·gc.alloc.rate.norm                                                 thrpt    5      6040.001 ±        0.001    B/op
[info] MutableIterablesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                          thrpt    5         0.002 ±        0.007  MB/sec
[info] MutableIterablesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     thrpt    5         0.005 ±        0.016    B/op
[info] MutableIterablesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                thrpt    5      2586.745 ±      716.527  MB/sec
[info] MutableIterablesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                           thrpt    5      6095.885 ±     1787.677    B/op
[info] MutableIterablesBenchmark.readCirce:·gc.count                                                           thrpt    5        38.000                 counts
[info] MutableIterablesBenchmark.readCirce:·gc.time                                                            thrpt    5        38.000                     ms
[info] MutableIterablesBenchmark.readJsoniterScala                                                             thrpt    5   3400098.560 ±   200129.192   ops/s
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.alloc.rate                                              thrpt    5      2194.704 ±      129.331  MB/sec
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                         thrpt    5      1016.000 ±        0.001    B/op
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                  thrpt    5         0.004 ±        0.021  MB/sec
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm             thrpt    5         0.002 ±        0.010    B/op
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                        thrpt    5      2178.319 ±      717.620  MB/sec
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                   thrpt    5      1007.956 ±      297.933    B/op
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.count                                                   thrpt    5        32.000                 counts
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.time                                                    thrpt    5        27.000                     ms
[info] MutableIterablesBenchmark.readPlayJson                                                                  thrpt    5    240609.679 ±     9333.139   ops/s
[info] MutableIterablesBenchmark.readPlayJson:·gc.alloc.rate                                                   thrpt    5      1718.311 ±       67.233  MB/sec
[info] MutableIterablesBenchmark.readPlayJson:·gc.alloc.rate.norm                                              thrpt    5     11240.002 ±        0.001    B/op
[info] MutableIterablesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                       thrpt    5         0.014 ±        0.103  MB/sec
[info] MutableIterablesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                  thrpt    5         0.088 ±        0.666    B/op
[info] MutableIterablesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                             thrpt    5      1698.613 ±       29.137  MB/sec
[info] MutableIterablesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                        thrpt    5     11111.726 ±      288.866    B/op
[info] MutableIterablesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                      thrpt    5         0.932 ±        8.029  MB/sec
[info] MutableIterablesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                 thrpt    5         6.196 ±       53.346    B/op
[info] MutableIterablesBenchmark.readPlayJson:·gc.count                                                        thrpt    5        25.000                 counts
[info] MutableIterablesBenchmark.readPlayJson:·gc.time                                                         thrpt    5        39.000                     ms
[info] MutableIterablesBenchmark.writeCirce                                                                    thrpt    5    704249.229 ±    35507.929   ops/s
[info] MutableIterablesBenchmark.writeCirce:·gc.alloc.rate                                                     thrpt    5      1546.522 ±       78.330  MB/sec
[info] MutableIterablesBenchmark.writeCirce:·gc.alloc.rate.norm                                                thrpt    5      3456.001 ±        0.001    B/op
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                         thrpt    5         0.031 ±        0.255  MB/sec
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    thrpt    5         0.069 ±        0.567    B/op
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                               thrpt    5      1563.240 ±      732.884  MB/sec
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                          thrpt    5      3496.061 ±     1729.794    B/op
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                        thrpt    5         0.666 ±        5.734  MB/sec
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                   thrpt    5         1.486 ±       12.797    B/op
[info] MutableIterablesBenchmark.writeCirce:·gc.count                                                          thrpt    5        23.000                 counts
[info] MutableIterablesBenchmark.writeCirce:·gc.time                                                           thrpt    5        30.000                     ms
[info] MutableIterablesBenchmark.writeJacksonScala                                                             thrpt    5   1350622.581 ±    87970.309   ops/s
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.alloc.rate                                              thrpt    5       672.787 ±       43.773  MB/sec
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                         thrpt    5       784.000 ±        0.001    B/op
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                        thrpt    5       671.193 ±        1.188  MB/sec
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                   thrpt    5       782.322 ±       51.036    B/op
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                 thrpt    5         0.133 ±        1.147  MB/sec
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                            thrpt    5         0.153 ±        1.313    B/op
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.count                                                   thrpt    5        10.000                 counts
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.time                                                    thrpt    5        48.000                     ms
[info] MutableIterablesBenchmark.writeJsoniterScala                                                            thrpt    5   6917861.386 ±    74073.742   ops/s
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.alloc.rate                                             thrpt    5       351.636 ±        3.786  MB/sec
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                        thrpt    5        80.000 ±        0.001    B/op
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                       thrpt    5       403.676 ±      579.159  MB/sec
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                  thrpt    5        91.878 ±      132.506    B/op
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.count                                                  thrpt    5         6.000                 counts
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.time                                                   thrpt    5        20.000                     ms
[info] MutableIterablesBenchmark.writePlayJson                                                                 thrpt    5    489643.325 ±    22505.997   ops/s
[info] MutableIterablesBenchmark.writePlayJson:·gc.alloc.rate                                                  thrpt    5      1654.986 ±       76.720  MB/sec
[info] MutableIterablesBenchmark.writePlayJson:·gc.alloc.rate.norm                                             thrpt    5      5320.001 ±        0.001    B/op
[info] MutableIterablesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                      thrpt    5         0.018 ±        0.144  MB/sec
[info] MutableIterablesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                 thrpt    5         0.059 ±        0.463    B/op
[info] MutableIterablesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                            thrpt    5      1629.955 ±      618.321  MB/sec
[info] MutableIterablesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                       thrpt    5      5239.397 ±     1972.054    B/op
[info] MutableIterablesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                     thrpt    5         0.932 ±        6.688  MB/sec
[info] MutableIterablesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                thrpt    5         3.007 ±       21.570    B/op
[info] MutableIterablesBenchmark.writePlayJson:·gc.count                                                       thrpt    5        24.000                 counts
[info] MutableIterablesBenchmark.writePlayJson:·gc.time                                                        thrpt    5        38.000                     ms
[info] MutableMapsBenchmark.readJacksonScala                                                                   thrpt    5    627722.627 ±    14941.781   ops/s
[info] MutableMapsBenchmark.readJacksonScala:·gc.alloc.rate                                                    thrpt    5      1043.206 ±       24.942  MB/sec
[info] MutableMapsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                               thrpt    5      2616.001 ±        0.001    B/op
[info] MutableMapsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                        thrpt    5         0.051 ±        0.440  MB/sec
[info] MutableMapsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   thrpt    5         0.128 ±        1.105    B/op
[info] MutableMapsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                              thrpt    5      1012.511 ±       29.387  MB/sec
[info] MutableMapsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                         thrpt    5      2539.079 ±       80.111    B/op
[info] MutableMapsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                       thrpt    5         0.932 ±        6.687  MB/sec
[info] MutableMapsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                  thrpt    5         2.358 ±       16.932    B/op
[info] MutableMapsBenchmark.readJacksonScala:·gc.count                                                         thrpt    5        15.000                 counts
[info] MutableMapsBenchmark.readJacksonScala:·gc.time                                                          thrpt    5        51.000                     ms
[info] MutableMapsBenchmark.readJsoniterScala                                                                  thrpt    5   2924735.295 ±   241810.378   ops/s
[info] MutableMapsBenchmark.readJsoniterScala:·gc.alloc.rate                                                   thrpt    5      1382.739 ±      113.759  MB/sec
[info] MutableMapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                              thrpt    5       744.000 ±        0.001    B/op
[info] MutableMapsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                       thrpt    5         0.030 ±        0.254  MB/sec
[info] MutableMapsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                  thrpt    5         0.016 ±        0.136    B/op
[info] MutableMapsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                             thrpt    5      1359.094 ±       23.867  MB/sec
[info] MutableMapsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                        thrpt    5       731.583 ±       69.303    B/op
[info] MutableMapsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                      thrpt    5         0.666 ±        5.735  MB/sec
[info] MutableMapsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                 thrpt    5         0.351 ±        3.018    B/op
[info] MutableMapsBenchmark.readJsoniterScala:·gc.count                                                        thrpt    5        20.000                 counts
[info] MutableMapsBenchmark.readJsoniterScala:·gc.time                                                         thrpt    5        26.000                     ms
[info] MutableMapsBenchmark.readPlayJson                                                                       thrpt    5    281163.087 ±    10252.660   ops/s
[info] MutableMapsBenchmark.readPlayJson:·gc.alloc.rate                                                        thrpt    5      1563.414 ±       57.086  MB/sec
[info] MutableMapsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                   thrpt    5      8752.001 ±        0.001    B/op
[info] MutableMapsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                            thrpt    5         0.013 ±        0.108  MB/sec
[info] MutableMapsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       thrpt    5         0.074 ±        0.605    B/op
[info] MutableMapsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                  thrpt    5      1561.450 ±      703.438  MB/sec
[info] MutableMapsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                             thrpt    5      8745.670 ±     4104.573    B/op
[info] MutableMapsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                           thrpt    5         1.066 ±        9.177  MB/sec
[info] MutableMapsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                      thrpt    5         6.064 ±       52.216    B/op
[info] MutableMapsBenchmark.readPlayJson:·gc.count                                                             thrpt    5        23.000                 counts
[info] MutableMapsBenchmark.readPlayJson:·gc.time                                                              thrpt    5        44.000                     ms
[info] MutableMapsBenchmark.writeCirce                                                                         thrpt    5    444509.933 ±    12907.244   ops/s
[info] MutableMapsBenchmark.writeCirce:·gc.alloc.rate                                                          thrpt    5      1143.162 ±       33.344  MB/sec
[info] MutableMapsBenchmark.writeCirce:·gc.alloc.rate.norm                                                     thrpt    5      4048.001 ±        0.001    B/op
[info] MutableMapsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                              thrpt    5         0.038 ±        0.298  MB/sec
[info] MutableMapsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         thrpt    5         0.136 ±        1.054    B/op
[info] MutableMapsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                    thrpt    5      1151.885 ±      713.643  MB/sec
[info] MutableMapsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                               thrpt    5      4080.387 ±     2571.179    B/op
[info] MutableMapsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                             thrpt    5         0.666 ±        5.735  MB/sec
[info] MutableMapsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                        thrpt    5         2.357 ±       20.291    B/op
[info] MutableMapsBenchmark.writeCirce:·gc.count                                                               thrpt    5        17.000                 counts
[info] MutableMapsBenchmark.writeCirce:·gc.time                                                                thrpt    5        36.000                     ms
[info] MutableMapsBenchmark.writeJsoniterScala                                                                 thrpt    5   2738158.142 ±    20743.215   ops/s
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                  thrpt    5       556.691 ±        4.101  MB/sec
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                             thrpt    5       320.000 ±        0.001    B/op
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                            thrpt    5       605.497 ±      579.350  MB/sec
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                       thrpt    5       348.169 ±      334.486    B/op
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.count                                                       thrpt    5         9.000                 counts
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.time                                                        thrpt    5        29.000                     ms
[info] MutableMapsBenchmark.writePlayJson                                                                      thrpt    5    361055.517 ±    16712.564   ops/s
[info] MutableMapsBenchmark.writePlayJson:·gc.alloc.rate                                                       thrpt    5      1387.321 ±       63.991  MB/sec
[info] MutableMapsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                  thrpt    5      6048.001 ±        0.001    B/op
[info] MutableMapsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                           thrpt    5         0.041 ±        0.275  MB/sec
[info] MutableMapsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      thrpt    5         0.181 ±        1.216    B/op
[info] MutableMapsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                 thrpt    5      1355.843 ±       31.732  MB/sec
[info] MutableMapsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                            thrpt    5      5911.436 ±      299.156    B/op
[info] MutableMapsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                          thrpt    5         1.066 ±        7.821  MB/sec
[info] MutableMapsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                     thrpt    5         4.704 ±       34.636    B/op
[info] MutableMapsBenchmark.writePlayJson:·gc.count                                                            thrpt    5        20.000                 counts
[info] MutableMapsBenchmark.writePlayJson:·gc.time                                                             thrpt    5        45.000                     ms
[info] PrimitivesBenchmark.readCirce                                                                           thrpt    5    618419.537 ±    40966.980   ops/s
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate                                                            thrpt    5      1907.908 ±      126.964  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm                                                       thrpt    5      4856.001 ±        0.001    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                thrpt    5         0.021 ±        0.163  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           thrpt    5         0.055 ±        0.421    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                      thrpt    5      1904.050 ±      710.273  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                 thrpt    5      4853.560 ±     2108.045    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                               thrpt    5         0.666 ±        5.735  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                          thrpt    5         1.723 ±       14.832    B/op
[info] PrimitivesBenchmark.readCirce:·gc.count                                                                 thrpt    5        28.000                 counts
[info] PrimitivesBenchmark.readCirce:·gc.time                                                                  thrpt    5        31.000                     ms
[info] PrimitivesBenchmark.readJacksonScala                                                                    thrpt    5   1344327.859 ±   105387.747   ops/s
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate                                                     thrpt    5      1018.082 ±       79.551  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                thrpt    5      1192.000 ±        0.001    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                         thrpt    5         0.043 ±        0.365  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    thrpt    5         0.049 ±        0.419    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                               thrpt    5      1013.114 ±       27.972  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                          thrpt    5      1186.437 ±       60.700    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                        thrpt    5         1.199 ±        7.565  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                   thrpt    5         1.423 ±        8.973    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.count                                                          thrpt    5        15.000                 counts
[info] PrimitivesBenchmark.readJacksonScala:·gc.time                                                           thrpt    5        48.000                     ms
[info] PrimitivesBenchmark.readJsoniterScala                                                                   thrpt    5   6765164.064 ±   332840.371   ops/s
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate                                                    thrpt    5       206.309 ±       10.150  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                               thrpt    5        48.000 ±        0.001    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                              thrpt    5       202.083 ±      710.352  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                         thrpt    5        47.309 ±      166.322    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                       thrpt    5         0.133 ±        1.147  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                  thrpt    5         0.032 ±        0.273    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.count                                                         thrpt    5         3.000                 counts
[info] PrimitivesBenchmark.readJsoniterScala:·gc.time                                                          thrpt    5         8.000                     ms
[info] PrimitivesBenchmark.readPlayJson                                                                        thrpt    5    206502.936 ±     8554.448   ops/s
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate                                                         thrpt    5      1395.885 ±       58.096  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm                                                    thrpt    5     10640.002 ±        0.001    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                             thrpt    5         0.041 ±        0.353  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        thrpt    5         0.312 ±        2.683    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                   thrpt    5      1423.521 ±      599.619  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                              thrpt    5     10847.835 ±     4400.361    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                            thrpt    5         1.066 ±        7.821  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                       thrpt    5         8.180 ±       59.952    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.count                                                              thrpt    5        21.000                 counts
[info] PrimitivesBenchmark.readPlayJson:·gc.time                                                               thrpt    5        49.000                     ms
[info] PrimitivesBenchmark.writeCirce                                                                          thrpt    5    832946.150 ±    27016.373   ops/s
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate                                                           thrpt    5      1367.373 ±       44.400  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm                                                      thrpt    5      2584.001 ±        0.001    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                               thrpt    5         0.029 ±        0.206  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                          thrpt    5         0.055 ±        0.389    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                     thrpt    5      1424.834 ±      560.428  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                thrpt    5      2692.479 ±     1048.362    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                              thrpt    5         0.666 ±        5.735  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                         thrpt    5         1.257 ±       10.823    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.count                                                                thrpt    5        21.000                 counts
[info] PrimitivesBenchmark.writeCirce:·gc.time                                                                 thrpt    5        36.000                     ms
[info] PrimitivesBenchmark.writeJacksonScala                                                                   thrpt    5   2200496.897 ±   116182.542   ops/s
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate                                                    thrpt    5       905.989 ±       47.691  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                               thrpt    5       648.000 ±        0.001    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                        thrpt    5         0.023 ±        0.198  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   thrpt    5         0.016 ±        0.141    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                              thrpt    5       876.503 ±      714.183  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                         thrpt    5       627.931 ±      530.853    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                       thrpt    5         0.932 ±        8.029  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                  thrpt    5         0.657 ±        5.655    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.count                                                         thrpt    5        13.000                 counts
[info] PrimitivesBenchmark.writeJacksonScala:·gc.time                                                          thrpt    5        45.000                     ms
[info] PrimitivesBenchmark.writeJsoniterScala                                                                  thrpt    5   5890283.298 ±   391000.072   ops/s
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate                                                   thrpt    5       658.614 ±       43.571  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                              thrpt    5       176.000 ±        0.001    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                             thrpt    5       672.734 ±        0.263  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                        thrpt    5       179.816 ±       11.914    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.count                                                        thrpt    5        10.000                 counts
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.time                                                         thrpt    5        32.000                     ms
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc                                                          thrpt    5   5944374.865 ±   109086.500   ops/s
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                           thrpt    5       362.545 ±        6.684  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                      thrpt    5        96.000 ±        0.001    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen                                     thrpt    5       403.637 ±      579.129  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm                                thrpt    5       107.025 ±      156.102    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                thrpt    5         6.000                 counts
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time                                                 thrpt    5        19.000                     ms
[info] PrimitivesBenchmark.writePlayJson                                                                       thrpt    5    319225.970 ±     8034.147   ops/s
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate                                                        thrpt    5      1648.446 ±       40.984  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm                                                   thrpt    5      8128.001 ±        0.001    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                            thrpt    5         0.043 ±        0.364  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       thrpt    5         0.210 ±        1.794    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                  thrpt    5      1629.092 ±      577.419  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                             thrpt    5      8034.156 ±     2911.609    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                           thrpt    5         1.066 ±        7.823  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                      thrpt    5         5.307 ±       39.021    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.count                                                             thrpt    5        24.000                 counts
[info] PrimitivesBenchmark.writePlayJson:·gc.time                                                              thrpt    5        42.000                     ms
[info] StringOfAsciiCharsBenchmark.readCirce                                                                   thrpt    5   4313274.539 ±   109047.750   ops/s
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                                    thrpt    5      3179.212 ±       81.644  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                                               thrpt    5      1160.000 ±        0.001    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                        thrpt    5         0.002 ±        0.003  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   thrpt    5         0.001 ±        0.001    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                              thrpt    5      3131.875 ±      587.083  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                         thrpt    5      1142.713 ±      210.255    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.count                                                         thrpt    5        46.000                 counts
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.time                                                          thrpt    5        38.000                     ms
[info] StringOfAsciiCharsBenchmark.readDslJsonJava                                                             thrpt    5   7504861.964 ±   354159.030   ops/s
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate                                              thrpt    5       801.000 ±       37.733  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                         thrpt    5       168.000 ±        0.001    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                        thrpt    5       801.528 ±      701.486  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                   thrpt    5       167.974 ±      143.651    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space                                 thrpt    5         1.465 ±       12.617  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm                            thrpt    5         0.314 ±        2.704    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.count                                                   thrpt    5        12.000                 counts
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.time                                                    thrpt    5        57.000                     ms
[info] StringOfAsciiCharsBenchmark.readJacksonScala                                                            thrpt    5   3611130.655 ±   177842.595   ops/s
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                                             thrpt    5      2037.158 ±      100.181  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        thrpt    5       888.000 ±        0.001    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                 thrpt    5         0.019 ±        0.149  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            thrpt    5         0.008 ±        0.065    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                       thrpt    5      2041.315 ±        6.857  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                  thrpt    5       889.927 ±       43.589    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                thrpt    5         0.799 ±        6.882  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                           thrpt    5         0.349 ±        3.006    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count                                                  thrpt    5        30.000                 counts
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time                                                   thrpt    5        31.000                     ms
[info] StringOfAsciiCharsBenchmark.readJsoniterScala                                                           thrpt    5   7379092.750 ±   480685.921   ops/s
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                            thrpt    5       787.688 ±       51.280  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       thrpt    5       168.000 ±        0.001    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                thrpt    5         0.005 ±        0.041  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm           thrpt    5         0.001 ±        0.009    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                      thrpt    5       810.317 ±      706.527  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                 thrpt    5       172.393 ±      139.887    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                               thrpt    5         0.666 ±        5.738  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                          thrpt    5         0.140 ±        1.206    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count                                                 thrpt    5        12.000                 counts
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time                                                  thrpt    5        30.000                     ms
[info] StringOfAsciiCharsBenchmark.readPlayJson                                                                thrpt    5   4375322.926 ±   129320.776   ops/s
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate                                                 thrpt    5      2356.972 ±       69.719  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                            thrpt    5       848.000 ±        0.001    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                     thrpt    5         0.021 ±        0.170  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                thrpt    5         0.008 ±        0.061    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                           thrpt    5      2382.326 ±        0.660  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                      thrpt    5       857.163 ±       25.566    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.count                                                      thrpt    5        35.000                 counts
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.time                                                       thrpt    5        29.000                     ms
[info] StringOfAsciiCharsBenchmark.writeCirce                                                                  thrpt    5   2804689.446 ±    59152.808   ops/s
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                                   thrpt    5      1168.845 ±       24.865  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                              thrpt    5       656.000 ±        0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                       thrpt    5         0.023 ±        0.194  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                  thrpt    5         0.013 ±        0.108    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                             thrpt    5      1152.380 ±      711.617  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                        thrpt    5       646.882 ±      403.021    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                      thrpt    5         0.799 ±        5.560  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                 thrpt    5         0.451 ±        3.134    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.count                                                        thrpt    5        17.000                 counts
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.time                                                         thrpt    5        33.000                     ms
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava                                                            thrpt    5   8439557.628 ±   275716.019   ops/s
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate                                             thrpt    5       814.993 ±       26.527  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                        thrpt    5       152.000 ±        0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                       thrpt    5       801.713 ±      701.205  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                  thrpt    5       149.570 ±      131.719    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space                                thrpt    5         1.332 ±       11.470  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space.norm                           thrpt    5         0.251 ±        2.161    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.count                                                  thrpt    5        12.000                 counts
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.time                                                   thrpt    5        58.000                     ms
[info] StringOfAsciiCharsBenchmark.writeDslJsonJavaPrealloc                                                    thrpt    5   9048540.576 ±     3558.993   ops/s
[info] StringOfAsciiCharsBenchmark.writeDslJsonJavaPrealloc:·gc.alloc.rate                                     thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJavaPrealloc:·gc.alloc.rate.norm                                thrpt    5        ≈ 10⁻⁴                   B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJavaPrealloc:·gc.count                                          thrpt    5           ≈ 0                 counts
[info] StringOfAsciiCharsBenchmark.writeJacksonScala                                                           thrpt    5   2205851.701 ±    58817.599   ops/s
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                            thrpt    5       683.927 ±       18.171  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       thrpt    5       488.000 ±        0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                      thrpt    5       740.043 ±      578.976  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                 thrpt    5       528.009 ±      411.786    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                               thrpt    5         0.799 ±        6.883  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                          thrpt    5         0.577 ±        4.969    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count                                                 thrpt    5        11.000                 counts
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time                                                  thrpt    5        46.000                     ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala                                                          thrpt    5   8836618.281 ±   636611.323   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                           thrpt    5       853.390 ±       60.988  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      thrpt    5       152.000 ±        0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'               thrpt    5         0.032 ±        0.199  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm          thrpt    5         0.006 ±        0.036    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                     thrpt    5       877.012 ±      703.989  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                thrpt    5       156.128 ±      123.175    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                              thrpt    5         0.800 ±        6.884  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                         thrpt    5         0.144 ±        1.242    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count                                                thrpt    5        13.000                 counts
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time                                                 thrpt    5        35.000                     ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                                  thrpt    5   8052414.264 ±   308733.509   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              thrpt    5        ≈ 10⁻⁴                   B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        thrpt    5           ≈ 0                 counts
[info] StringOfAsciiCharsBenchmark.writePlayJson                                                               thrpt    5   2991883.586 ±    96385.303   ops/s
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                                                thrpt    5       958.047 ±       31.094  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                           thrpt    5       504.000 ±        0.001    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                    thrpt    5         0.032 ±        0.272  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               thrpt    5         0.016 ±        0.142    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                          thrpt    5      1013.955 ±       25.615  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                     thrpt    5       533.419 ±        4.469    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.799 ±        6.884  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                              thrpt    5         0.423 ±        3.641    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.count                                                     thrpt    5        15.000                 counts
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.time                                                      thrpt    5        39.000                     ms
[info] StringOfNonAsciiCharsBenchmark.readCirce                                                                thrpt    5    825558.442 ±    23541.421   ops/s
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                                 thrpt    5      1384.603 ±       39.878  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                                            thrpt    5      2640.001 ±        0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                     thrpt    5         0.013 ±        0.106  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                thrpt    5         0.025 ±        0.205    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                           thrpt    5      1358.090 ±       22.579  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                      thrpt    5      2589.531 ±       64.398    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                    thrpt    5         0.666 ±        5.734  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                               thrpt    5         1.284 ±       11.059    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.count                                                      thrpt    5        20.000                 counts
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.time                                                       thrpt    5        29.000                     ms
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava                                                          thrpt    5   2991230.816 ±    41710.930   ops/s
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate                                           thrpt    5       836.671 ±       11.855  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                      thrpt    5       440.000 ±        0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'               thrpt    5         0.096 ±        0.828  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm          thrpt    5         0.050 ±        0.434    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                     thrpt    5       869.097 ±      689.695  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                thrpt    5       456.936 ±      360.160    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space                              thrpt    5         1.596 ±        6.422  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm                         thrpt    5         0.838 ±        3.370    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.count                                                thrpt    5        13.000                 counts
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.time                                                 thrpt    5        62.000                     ms
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala                                                         thrpt    5   1051921.932 ±    44034.528   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                                          thrpt    5       775.423 ±       32.974  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                     thrpt    5      1160.000 ±        0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'              thrpt    5         0.023 ±        0.201  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm         thrpt    5         0.035 ±        0.299    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                    thrpt    5       808.728 ±      716.743  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                               thrpt    5      1208.489 ±     1039.968    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                             thrpt    5         0.799 ±        6.882  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                        thrpt    5         1.189 ±       10.234    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count                                               thrpt    5        12.000                 counts
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time                                                thrpt    5        45.000                     ms
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala                                                        thrpt    5   1953357.146 ±    18048.221   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                         thrpt    5       546.022 ±        5.219  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                    thrpt    5       440.000 ±        0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                   thrpt    5       539.232 ±      710.739  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                              thrpt    5       434.815 ±      576.230    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count                                              thrpt    5         8.000                 counts
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time                                               thrpt    5        22.000                     ms
[info] StringOfNonAsciiCharsBenchmark.readPlayJson                                                             thrpt    5   1115755.739 ±    47844.327   ops/s
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate                                              thrpt    5       793.929 ±       34.270  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                         thrpt    5      1120.000 ±        0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                  thrpt    5         0.011 ±        0.097  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm             thrpt    5         0.016 ±        0.137    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                        thrpt    5       740.814 ±      577.359  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                   thrpt    5      1047.047 ±      871.121    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                 thrpt    5         0.799 ±        6.882  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                            thrpt    5         1.126 ±        9.693    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.count                                                   thrpt    5        11.000                 counts
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.time                                                    thrpt    5        42.000                     ms
[info] StringOfNonAsciiCharsBenchmark.writeCirce                                                               thrpt    5   1695581.796 ±    77320.477   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                                thrpt    5      1378.834 ±       63.226  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                           thrpt    5      1280.000 ±        0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                    thrpt    5         0.016 ±        0.095  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               thrpt    5         0.015 ±        0.089    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                          thrpt    5      1425.499 ±      595.171  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                     thrpt    5      1323.617 ±      563.463    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.666 ±        5.735  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                              thrpt    5         0.621 ±        5.348    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count                                                     thrpt    5        21.000                 counts
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time                                                      thrpt    5        38.000                     ms
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava                                                         thrpt    5   2920872.075 ±    90958.866   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate                                          thrpt    5       682.952 ±       21.048  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                     thrpt    5       368.000 ±        0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                    thrpt    5       667.330 ±        1.190  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                               thrpt    5       359.601 ±       10.969    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space                             thrpt    5         0.133 ±        1.147  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space.norm                        thrpt    5         0.072 ±        0.621    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.count                                               thrpt    5        10.000                 counts
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.time                                                thrpt    5        48.000                     ms
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJavaPrealloc                                                 thrpt    5   3114270.807 ±    12616.639   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJavaPrealloc:·gc.alloc.rate                                  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJavaPrealloc:·gc.alloc.rate.norm                             thrpt    5        ≈ 10⁻⁴                   B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJavaPrealloc:·gc.count                                       thrpt    5           ≈ 0                 counts
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala                                                        thrpt    5   2392117.898 ±   175155.788   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                         thrpt    5       960.647 ±       70.445  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                    thrpt    5       632.000 ±        0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'             thrpt    5         0.037 ±        0.321  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm        thrpt    5         0.024 ±        0.209    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                   thrpt    5      1013.793 ±       26.459  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                              thrpt    5       667.091 ±       32.733    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                            thrpt    5         1.066 ±        9.178  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                       thrpt    5         0.709 ±        6.102    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count                                              thrpt    5        15.000                 counts
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time                                               thrpt    5        43.000                     ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala                                                       thrpt    5   2822663.008 ±    40557.684   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                        thrpt    5       660.031 ±        9.556  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                   thrpt    5       368.000 ±        0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                  thrpt    5       672.843 ±        0.147  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                             thrpt    5       375.148 ±        5.426    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count                                             thrpt    5        10.000                 counts
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time                                              thrpt    5        32.000                     ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                               thrpt    5   2838723.463 ±    29000.460   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                           thrpt    5        ≈ 10⁻⁴                   B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                     thrpt    5           ≈ 0                 counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson                                                            thrpt    5   2250619.867 ±   103217.049   ops/s
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                                             thrpt    5      1029.544 ±       47.783  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                        thrpt    5       720.000 ±        0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                 thrpt    5         0.020 ±        0.103  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            thrpt    5         0.014 ±        0.072    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                       thrpt    5      1014.740 ±       24.086  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                  thrpt    5       709.703 ±       25.667    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                thrpt    5         0.799 ±        6.882  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                           thrpt    5         0.567 ±        4.886    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count                                                  thrpt    5        15.000                 counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time                                                   thrpt    5        39.000                     ms
[info] TwitterAPIBenchmark.readCirce                                                                           thrpt    5     10572.246 ±     2132.755   ops/s
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate                                                            thrpt    5      1541.802 ±      304.520  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm                                                       thrpt    5    229517.664 ±      956.679    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                thrpt    5         0.029 ±        0.069  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           thrpt    5         4.156 ±        9.981    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                      thrpt    5      1561.104 ±      714.093  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                 thrpt    5    233314.789 ±   131745.533    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                               thrpt    5         0.666 ±        5.735  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                          thrpt    5        97.888 ±      842.845    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.count                                                                 thrpt    5        23.000                 counts
[info] TwitterAPIBenchmark.readCirce:·gc.time                                                                  thrpt    5        49.000                     ms
[info] TwitterAPIBenchmark.readJacksonScala                                                                    thrpt    5     14073.845 ±      590.907   ops/s
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate                                                     thrpt    5       198.800 ±        8.642  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                thrpt    5     22232.974 ±       31.857    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                               thrpt    5       201.162 ±      707.117  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                          thrpt    5     22535.638 ±    79221.922    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                        thrpt    5         0.266 ±        2.294  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                   thrpt    5        30.236 ±      260.339    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.count                                                          thrpt    5         3.000                 counts
[info] TwitterAPIBenchmark.readJacksonScala:·gc.time                                                           thrpt    5        15.000                     ms
[info] TwitterAPIBenchmark.readJsoniterScala                                                                   thrpt    5     37630.611 ±      798.019   ops/s
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                                    thrpt    5       348.454 ±        7.446  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                               thrpt    5     14576.012 ±        0.006    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                              thrpt    5       337.010 ±        0.072  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                         thrpt    5     14097.626 ±      299.734    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.count                                                         thrpt    5         5.000                 counts
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.time                                                          thrpt    5        15.000                     ms
[info] TwitterAPIBenchmark.readPlayJson                                                                        thrpt    5      2859.505 ±      878.080   ops/s
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate                                                         thrpt    5       907.328 ±      277.785  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                                    thrpt    5    499214.365 ±      524.586    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                             thrpt    5         0.011 ±        0.098  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        thrpt    5         5.922 ±       50.989    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                   thrpt    5       943.924 ±      586.610  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                              thrpt    5    516362.174 ±   187399.414    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                            thrpt    5         0.933 ±        8.032  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                       thrpt    5       496.283 ±     4273.150    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.count                                                              thrpt    5        14.000                 counts
[info] TwitterAPIBenchmark.readPlayJson:·gc.time                                                               thrpt    5        90.000                     ms
[info] TwitterAPIBenchmark.writeJacksonScala                                                                   thrpt    5     56191.181 ±      786.834   ops/s
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                                    thrpt    5       717.570 ±       10.120  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                               thrpt    5     20100.024 ±        0.211    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                              thrpt    5       670.074 ±        0.377  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                         thrpt    5     18769.816 ±      263.091    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                       thrpt    5         0.799 ±        6.884  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                  thrpt    5        22.347 ±      192.414    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.count                                                         thrpt    5        10.000                 counts
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.time                                                          thrpt    5        51.000                     ms
[info] TwitterAPIBenchmark.writeJsoniterScala                                                                  thrpt    5     87508.292 ±     2805.573   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                                   thrpt    5       573.832 ±       18.710  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                              thrpt    5     10320.005 ±        0.001    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                             thrpt    5       605.531 ±      579.090  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                        thrpt    5     10905.642 ±    10610.373    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.count                                                        thrpt    5         9.000                 counts
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.time                                                         thrpt    5        30.000                     ms
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc                                                          thrpt    5    101285.205 ±     1029.902   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                           thrpt    5         6.693 ±        0.069  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                      thrpt    5       104.004 ±        0.001    B/op
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                thrpt    5           ≈ 0                 counts
[info] Benchmark result is saved to jdk9.json
[success] Total time: 4956 s, completed Apr 8, 2018 11:11:50 AM
